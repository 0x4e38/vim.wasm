// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'index.data';
    var REMOTE_PACKAGE_BASE = 'index.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'usr', true, true);
Module['FS_createPath']('/usr', 'local', true, true);
Module['FS_createPath']('/usr/local', 'share', true, true);
Module['FS_createPath']('/usr/local/share', 'vim', true, true);
Module['FS_createPath']('/usr/local/share/vim', 'colors', true, true);
Module['FS_createPath']('/usr/local/share/vim', 'syntax', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_index.data');

    };
    Module['addRunDependency']('datafile_index.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 1720, "filename": "/usr/local/share/vim/vimrc"}, {"audio": 0, "start": 1720, "crunched": 0, "end": 4532, "filename": "/usr/local/share/vim/colors/desert.vim"}, {"audio": 0, "start": 4532, "crunched": 0, "end": 5287, "filename": "/usr/local/share/vim/syntax/nosyntax.vim"}, {"audio": 0, "start": 5287, "crunched": 0, "end": 9380, "filename": "/usr/local/share/vim/syntax/syncolor.vim"}, {"audio": 0, "start": 9380, "crunched": 0, "end": 11364, "filename": "/usr/local/share/vim/syntax/synload.vim"}, {"audio": 0, "start": 11364, "crunched": 0, "end": 80224, "filename": "/usr/local/share/vim/syntax/vim.vim"}], "remote_package_size": 80224, "package_uuid": "4fa31a34-5053-44d9-8116-1fecb389d217"});

})();

/* vi:set ts=4 sts=4 sw=4 et:
 *
 * VIM - Vi IMproved		by Bram Moolenaar
 *				GUI/Motif support by Robert Webb
 *	      Implemented by rhysd <https://github.com/rhysd>
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 */

/*
 * runtime.js: preloaded JavaScript code for Wasm port of Vim by @rhysd.
 */

function stdin() {
    // Tell that user did not give any input. GUI input is caught in 'keydown' listener.
    return null;
}

function prerun() {
    debug('prerun');
    FS.init(stdin, null, null);
}

Module.preRun.push(prerun);



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('not compiled for this environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}



var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    if (opts && opts.async) {
      EmterpreterAsync.asyncFinalizers.push(function() {
        stackRestore(stack);
      });
      return;
    }
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = Module['wasmMemory'].buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




function integrateWasmJS() {
  // wasm.js has several methods for creating the compiled code module here:
  //  * 'native-wasm' : use native WebAssembly support in the browser
  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret
  //  * 'interpret-binary': load binary wasm and interpret
  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret
  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)
  // The method is set at compile time (BINARYEN_METHOD)
  // The method can be a comma-separated list, in which case, we will try the
  // options one by one. Some of them can fail gracefully, and then we can try
  // the next.

  // inputs

  var method = 'native-wasm';

  var wasmTextFile = 'index.wast';
  var wasmBinaryFile = 'index.wasm';
  var asmjsCodeFile = 'index.temp.asm.js';

  if (typeof Module['locateFile'] === 'function') {
    if (!isDataURI(wasmTextFile)) {
      wasmTextFile = Module['locateFile'](wasmTextFile);
    }
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = Module['locateFile'](wasmBinaryFile);
    }
    if (!isDataURI(asmjsCodeFile)) {
      asmjsCodeFile = Module['locateFile'](asmjsCodeFile);
    }
  }

  // utilities

  var wasmPageSize = 64*1024;

  var info = {
    'global': null,
    'env': null,
    'asm2wasm': asm2wasmImports,
    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.
  };

  var exports = null;


  function mergeMemory(newBuffer) {
    // The wasm instance creates its memory. But static init code might have written to
    // buffer already, including the mem init file, and we must copy it over in a proper merge.
    // TODO: avoid this copy, by avoiding such static init writes
    // TODO: in shorter term, just copy up to the last static init write
    var oldBuffer = Module['buffer'];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      Module['printErr']('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);


    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }

  function fixImports(imports) {
    return imports;
  }

  function getBinary() {
    try {
      if (Module['wasmBinary']) {
        return new Uint8Array(Module['wasmBinary']);
      }
      if (Module['readBinary']) {
        return Module['readBinary'](wasmBinaryFile);
      } else {
        throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";
      }
    }
    catch (err) {
      abort(err);
    }
  }

  function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
        return getBinary();
      });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }

  // do-method functions


  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== 'object') {
      Module['printErr']('no native wasm support detected');
      return false;
    }
    // prepare memory import
    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
      Module['printErr']('no native wasm Memory in use');
      return false;
    }
    env['memory'] = Module['wasmMemory'];
    // Load the wasm module and create an instance of using native support in the JS engine.
    info['global'] = {
      'NaN': NaN,
      'Infinity': Infinity
    };
    info['global.Math'] = Math;
    info['env'] = env;
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance, module) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module['asm'] = exports;
      Module["usingWasm"] = true;
      removeRunDependency('wasm-instantiate');
    }
    addRunDependency('wasm-instantiate');

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        Module['printErr']('Module.instantiateWasm callback failed with error: ' + e);
        return false;
      }
    }

    function receiveInstantiatedSource(output) {
      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
      // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      receiveInstance(output['instance'], output['module']);
    }
    function instantiateArrayBuffer(receiver) {
      getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(receiver).catch(function(reason) {
        Module['printErr']('failed to asynchronously prepare wasm: ' + reason);
        abort(reason);
      });
    }
    // Prefer streaming instantiation if available.
    if (!Module['wasmBinary'] &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
        .then(receiveInstantiatedSource)
        .catch(function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          Module['printErr']('wasm streaming compile failed: ' + reason);
          Module['printErr']('falling back to ArrayBuffer instantiation');
          instantiateArrayBuffer(receiveInstantiatedSource);
        });
    } else {
      instantiateArrayBuffer(receiveInstantiatedSource);
    }
    return {}; // no exports yet; we'll fill them in later
  }


  // We may have a preloaded value in Module.asm, save it
  Module['asmPreload'] = Module['asm'];

  // Memory growth integration code

  var asmjsReallocBuffer = Module['reallocBuffer'];

  var wasmReallocBuffer = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size
    var old = Module['buffer'];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      // native wasm support
      try {
        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size
        if (result !== (-1 | 0)) {
          // success in native wasm memory growth, get the buffer from the memory
          return Module['buffer'] = Module['wasmMemory'].buffer;
        } else {
          return null;
        }
      } catch(e) {
        return null;
      }
    }
  };

  Module['reallocBuffer'] = function(size) {
    if (finalMethod === 'asmjs') {
      return asmjsReallocBuffer(size);
    } else {
      return wasmReallocBuffer(size);
    }
  };

  // we may try more than one; this is the final one, that worked and we are using
  var finalMethod = '';

  // Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
  // the wasm module at that time, and it receives imports and provides exports and so forth, the app
  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.

  Module['asm'] = function(global, env, providedBuffer) {
    env = fixImports(env);

    // import table
    if (!env['table']) {
      var TABLE_SIZE = Module['wasmTableSize'];
      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least
      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
        if (MAX_TABLE_SIZE !== undefined) {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });
        } else {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });
        }
      } else {
        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least
      }
      Module['wasmTable'] = env['table'];
    }

    if (!env['memoryBase']) {
      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves
    }
    if (!env['tableBase']) {
      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change
    }

    // try the methods. each should return the exports if it succeeded

    var exports;
    exports = doNativeWasm(global, env, providedBuffer);

    assert(exports, 'no binaryen method succeeded.');


    return exports;
  };

  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later
}

integrateWasmJS();

// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 115232;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });







var STATIC_BUMP = 115232;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;

/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  
  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }function ___clock_gettime(
  ) {
  return _clock_gettime.apply(null, arguments)
  }

  function ___lock() {}

  function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
    

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function() {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function(name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function(mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function(mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function(path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function(path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function(path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function(store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function(store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function(store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function(src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function(flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function(node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function(parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function(node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function() {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function() {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function(allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function(lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function() {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function() { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function(func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,asyncFinalizers:[],ensureInit:function() {
        if (this.initted) return;
        this.initted = true;
      },setState:function(s) {
        this.ensureInit();
        this.state = s;
        Module['setAsyncState'](s);
      },handle:function(doAsyncOp, yieldDuring) {
        Module['noExitRuntime'] = true;
        if (EmterpreterAsync.state === 0) {
          // save the stack we want to resume. this lets other code run in between
          // XXX this assumes that this stack top never ever leak! exceptions might violate that
          var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2, Module['emtStackSave']()>>2));
          var stacktop = Module['stackSave']();
  
          var resumedCallbacksForYield = false;
          function resumeCallbacksForYield() {
            if (resumedCallbacksForYield) return;
            resumedCallbacksForYield = true;
            // allow async callbacks, and also make sure to call the specified yield callbacks. we must
            // do this when nothing is on the stack, i.e. after it unwound
            EmterpreterAsync.yieldCallbacks.forEach(function(func) {
              func();
            });
            Browser.resumeAsyncCallbacks(); // if we were paused (e.g. we are after a sleep), then since we are now yielding, it is safe to call callbacks
          }
  
          var callingDoAsyncOp = 1; // if resume is called synchronously - during the doAsyncOp - we must make it truly async, for consistency
  
          doAsyncOp(function resume(post) {
            if (ABORT) {
              return;
            }
            if (callingDoAsyncOp) {
              assert(callingDoAsyncOp === 1); // avoid infinite recursion
              callingDoAsyncOp++;
              setTimeout(function() {
                resume(post);
              }, 0);
              return;
            }
  
            assert(EmterpreterAsync.state === 1 || EmterpreterAsync.state === 3);
            EmterpreterAsync.setState(3);
            if (yieldDuring) {
              resumeCallbacksForYield();
            }
            // copy the stack back in and resume
            HEAP32.set(stack, EMTSTACKTOP>>2);
            EmterpreterAsync.setState(2);
            // Resume the main loop
            if (Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            assert(!EmterpreterAsync.postAsync);
            EmterpreterAsync.postAsync = post || null;
            Module['emterpret'](stack[0]); // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
            if (!yieldDuring && EmterpreterAsync.state === 0) {
              // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
              Browser.resumeAsyncCallbacks();
            }
            if (EmterpreterAsync.state === 0) {
              EmterpreterAsync.asyncFinalizers.forEach(function(func) {
                func();
              });
              EmterpreterAsync.asyncFinalizers.length = 0;
            }
          });
  
          callingDoAsyncOp = 0;
  
          EmterpreterAsync.setState(1);
          // Pause the main loop, until we resume
          if (Browser.mainLoop.func) {
            Browser.mainLoop.pause();
          }
          if (yieldDuring) {
            // do this when we are not on the stack, i.e., the stack unwound. we might be too late, in which case we do it in resume()
            setTimeout(function() {
              resumeCallbacksForYield();
            }, 0);
          } else {
            Browser.pauseAsyncCallbacks();
          }
        } else {
          // nothing to do here, the stack was just recreated. reset the state.
          assert(EmterpreterAsync.state === 2);
          EmterpreterAsync.setState(0);
  
          if (EmterpreterAsync.postAsync) {
            var ret = EmterpreterAsync.postAsync();
            EmterpreterAsync.postAsync = null;
            return ret;
          }
        }
      }};function ___syscall118(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fsync
      var stream = SYSCALLS.getStreamFromFD();
      return EmterpreterAsync.handle(function(resume) {
        var mount = stream.node.mount;
        if (!mount.type.syncfs) {
          // We write directly to the file system, so there's nothing to do here.
          resume(function() { return 0 });
          return;
        }
        mount.type.syncfs(mount, false, function(err) {
          if (err) {
            resume(function() { return -ERRNO_CODES.EIO });
            return;
          }
          resume(function() { return 0 });
        });
      });
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall122(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // uname
      var buf = SYSCALLS.get();
      if (!buf) return -ERRNO_CODES.EFAULT
      var layout = {"sysname":0,"nodename":65,"domainname":325,"machine":260,"version":195,"release":130,"__size__":390};
      function copyString(element, value) {
        var offset = layout[element];
        writeAsciiToMemory(value, buf + offset);
      }
      copyString('sysname', 'Emscripten');
      copyString('nodename', 'emscripten');
      copyString('release', '1.0');
      copyString('version', '#1');
      copyString('machine', 'x86-JS');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall133(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchdir
      var stream = SYSCALLS.getStreamFromFD();
      FS.chdir(stream.path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall15(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chmod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall168(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // poll
      var fds = SYSCALLS.get(), nfds = SYSCALLS.get(), timeout = SYSCALLS.get();
      var nonzero = 0;
      for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[((pollfd)>>2)];
        var events = HEAP16[(((pollfd)+(4))>>1)];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
          mask = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            mask = stream.stream_ops.poll(stream);
          }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[(((pollfd)+(6))>>1)]=mask;
      }
      return nonzero;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      var cwdLengthInBytes = lengthBytesUTF8(cwd);
      if (size < cwdLengthInBytes + 1) return -ERRNO_CODES.ERANGE;
      stringToUTF8(cwd, buf, size);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall191(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ugetrlimit
      var resource = SYSCALLS.get(), rlim = SYSCALLS.get();
      HEAP32[((rlim)>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(4))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(8))>>2)]=-1;  // RLIM_INFINITY
      HEAP32[(((rlim)+(12))>>2)]=-1;  // RLIM_INFINITY
      return 0; // just report no limits
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall196(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_lstat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.lstat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___syscall202(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getgid32
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }function ___syscall199(
  ) {
  return ___syscall202.apply(null, arguments)
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall200(
  ) {
  return ___syscall202.apply(null, arguments)
  }

  function ___syscall207(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchown32
      var fd = SYSCALLS.get(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.fchown(fd, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall212(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chown32
      var path = SYSCALLS.getStr(), owner = SYSCALLS.get(), group = SYSCALLS.get();
      FS.chown(path, owner, group);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 <= count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        stringToUTF8(name, dirp + pos + 11, 256);
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall340(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // prlimit64
      var pid = SYSCALLS.get(), resource = SYSCALLS.get(), new_limit = SYSCALLS.get(), old_limit = SYSCALLS.get();
      if (old_limit) { // just report no limits
        HEAP32[((old_limit)>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(4))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(8))>>2)]=-1;  // RLIM_INFINITY
        HEAP32[(((old_limit)+(12))>>2)]=-1;  // RLIM_INFINITY
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall36(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // sync
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall41(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup
      var old = SYSCALLS.getStreamFromFD();
      return FS.open(old.path, old.flags, 0).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall60(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // umask
      var mask = SYSCALLS.get();
      var old = SYSCALLS.umask;
      SYSCALLS.umask = mask;
      return old;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall94(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fchmod
      var fd = SYSCALLS.get(), mode = SYSCALLS.get();
      FS.fchmod(fd, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }  

  function ___unlock() {}

  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }

   

   

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__get_daylight())>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }
  
  
  var ___tm_formatted=STATICTOP; STATICTOP += 48;;
  
  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)]=Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
  
      // asctime_r is specced to behave in an undefined manner if the algorithm would attempt
      // to write out more than 26 bytes (including the null terminator).
      // See http://pubs.opengroup.org/onlinepubs/9699919799/functions/asctime.html
      // Our undefined behavior is to truncate the write to at most 26 bytes, including null terminator.
      stringToUTF8(s, buf, 26);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = stackSave();
      var rv = _asctime_r(_localtime_r(time, stackAlloc(44)), buf);
      stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  function _emscripten_sleep(ms) {
      EmterpreterAsync.handle(function(resume) {
        setTimeout(function() {
          // do this manually; we can't call into Browser.safeSetTimeout, because that is paused/resumed!
          resume();
        }, ms);
      });
    }

  function _exit(status) {
      __exit(status);
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  function _getpwnam() { throw 'getpwnam: TODO' }

  function _getpwuid(uid) {
      return 0; // NULL
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



  function _kill(pid, sig) {
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/kill.html
      // Makes no sense in a single-process environment.
  	  // Should kill itself somtimes depending on `pid`
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

   

  function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

   

  function _setenv(envname, envval, overwrite) {
      // int setenv(const char *envname, const char *envval, int overwrite);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/setenv.html
      if (envname === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = Pointer_stringify(envname);
      var val = Pointer_stringify(envval);
      if (name === '' || name.indexOf('=') !== -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      if (ENV.hasOwnProperty(name) && !overwrite) return 0;
      ENV[name] = val;
      ___buildEnvironment(__get_environ());
      return 0;
    }

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
      }
      return 0;
    }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85:
          var maxHeapSize = 2*1024*1024*1024 - 65536;
          maxHeapSize = HEAPU8.length;
          return maxHeapSize / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  var VW={init:function() {
              // Utilities
              function rgbToHexColor(r, g, b) {
                  return '#' + r.toString(16) + g.toString(16) + b.toString(16);
              }
  
              // TODO: class VimCursor
  
              // TODO: IME support
              // TODO: Handle pre-edit IME state
              // TODO: Follow cursor position
              function VimInput(font) {
                  this.imeRunning = false;
                  this.font = font;
                  this.elem = document.getElementById('vim-input');
                  // TODO: Bind compositionstart event
                  // TODO: Bind compositionend event
                  this.elem.addEventListener('keydown', this.onKeydown.bind(this));
                  this.elem.addEventListener('blur', this.onBlur.bind(this));
                  this.elem.addEventListener('focus', this.onFocus.bind(this));
                  this.focus();
              }
  
              VimInput.prototype.onKeydown = function(event) {
                  event.preventDefault();
                  event.stopPropagation();
                  debug('onKeydown():', event, event.key, event.charCode, event.keyCode);
  
                  var charCode = event.keyCode;
                  var special = null;
  
                  // TODO: Move the conversion logic (key name -> key code) to C
                  // Since strings cannot be passed to C function as char * if Emterpreter is enabled.
                  // Setting { async: true } to ccall() does not help to solve this issue.
                  if (event.key.length > 1) {
                      // Handles special keys. Logic was from gui_mac.c
                      // Key names were from https://www.w3.org/TR/DOM-Level-3-Events-key/
                      switch (event.key) {
                          // Maybe need to handle 'Tab' as <C-i>
                          case 'F1':
                              special = 'k1';
                              break;
                          case 'F2':
                              special = 'k2';
                              break;
                          case 'F3':
                              special = 'k3';
                              break;
                          case 'F4':
                              special = 'k4';
                              break;
                          case 'F5':
                              special = 'k5';
                              break;
                          case 'F6':
                              special = 'k6';
                              break;
                          case 'F7':
                              special = 'k7';
                              break;
                          case 'F8':
                              special = 'k8';
                              break;
                          case 'F9':
                              special = 'k9';
                              break;
                          case 'F10':
                              special = 'F;';
                              break;
                          case 'F11':
                              special = 'F1';
                              break;
                          case 'F12':
                              special = 'F2';
                              break;
                          case 'F13':
                              special = 'F3';
                              break;
                          case 'F14':
                              special = 'F4';
                              break;
                          case 'F15':
                              special = 'F5';
                              break;
                          case 'Backspace':
                              special = 'kb';
                              break;
                          case 'Delete':
                              special = 'kD';
                              break;
                          case 'ArrowLeft':
                              special = 'kl';
                              break;
                          case 'ArrowUp':
                              special = 'ku';
                              break;
                          case 'ArrowRight':
                              special = 'kr';
                              break;
                          case 'ArrowDown':
                              special = 'kd';
                              break;
                          case 'PageUp':
                              special = 'kP';
                              break;
                          case 'PageDown':
                              special = 'kN';
                              break;
                          case 'End':
                              special = '@7';
                              break;
                          case 'Home':
                              special = 'kh';
                              break;
                          case 'Insert':
                              special = 'kI';
                              break;
                          case 'Help':
                              special = '%1';
                              break;
                          case 'Undo':
                              special = '&8';
                              break;
                          case 'Print':
                              special = '%9';
                              break;
                      }
                  } else {
                      // When `key` is one character, get character code from `key`.
                      // KeyboardEvent.charCode is not available on 'keydown'
                      charCode = event.key.charCodeAt(0);
                  }
  
                  if (special === null) {
                      this.sendKeyToVim(charCode, 0, +event.ctrlKey, +event.shiftKey, +event.altKey, +event.metaKey);
                  } else {
                      this.sendKeyToVim(
                          special.charCodeAt(0),
                          special.charCodeAt(1),
                          +event.ctrlKey,
                          +event.shiftKey,
                          +event.altKey,
                          +event.metaKey
                      );
                  }
              };
  
              VimInput.prototype.onFocus = function() {
                  debug('onFocus()');
                  // TODO: Send <FocusGained> special character
              };
  
              VimInput.prototype.onBlur = function(event) {
                  debug('onBlur():', event);
                  event.preventDefault();
                  // TODO: Send <FocusLost> special character
              };
  
              VimInput.prototype.setFont = function(name, size) {
                  this.elem.style.fontFamily = name;
                  this.elem.style.fontSize = size + 'px';
              };
  
              VimInput.prototype.focus = function() {
                  this.elem.focus();
              };
  
              // Origin is at left-above.
              //
              //      O-------------> x
              //      |
              //      |
              //      |
              //      |
              //      V
              //      y
  
              // Editor screen renderer
              function CanvasRenderer() {
                  // TODO: These font metrics were from gui_mac.c
                  // Font metrics should be measured instead of fixed values since monospace font is
                  // different on each platform.
                  this.charWidth = 7;
                  this.charHeight = 11;
                  this.charAscent = 6;
                  // line-height is fixed to 1.2 for <canvas>
                  this.lineHeight = Math.ceil(this.charHeight * 1.2);
                  this.canvas = document.getElementById('vim-screen');
                  this.adjustScreenSize();
                  this.ctx = this.canvas.getContext('2d', { alpha: false });
                  this.canvas.addEventListener('click', this.focus.bind(this));
                  this.resizeListener = this.onResize.bind(this);
                  window.addEventListener('resize', this.resizeListener);
                  this.fontName = 'monospace';
                  this.input = new VimInput();
                  this.input.setFont(this.fontName, this.charHeight);
              }
  
              CanvasRenderer.prototype.onVimInit = function() {
                  // Setup C function here since when VW.init() is called, Module.cwrap is not set yet.
                  //
                  // XXX: Coverting 'boolean' to 'number' does not work if Emterpreter is enabled.
                  // So converting to 'number' from 'boolean' is done in JavaScript.
                  VimInput.prototype.sendKeyToVim = Module.cwrap('gui_wasm_send_key', null, [
                      'number', // key code1
                      'number', // key code2 (used for special otherwise 0)
                      'number', // TRUE iff Ctrl key is pressed
                      'number', // TRUE iff Shift key is pressed
                      'number', // TRUE iff Alt key is pressed
                      'number', // TRUE iff Meta key is pressed
                  ]);
                  // XXX: Even if {async: true} is set for ccall(), passing strings as char * to C function
                  // does not work with Emterpreter
                  //
                  // VW.VimInput.prototype.sendKeyToVim = function(keyCode, ctrl, shift, meta) {
                  //     debug('Send key:', keyCode);
                  //     Module.ccall(
                  //         'gui_wasm_send_key',
                  //         null,
                  //         ['number', 'boolean', 'boolean', 'boolean'],
                  //         [keyCode, ctrl, shift, meta],
                  //         // { async: true },
                  //     );
                  // };
              };
  
              CanvasRenderer.prototype.onVimExit = function() {
                  window.removeEventListener('resize', this.resizeListener);
              };
  
              CanvasRenderer.prototype.screenWidth = function() {
                  return this.cols * this.getCharWidth();
              };
  
              CanvasRenderer.prototype.screenHeight = function() {
                  return this.rows * this.getLineHeight();
              };
  
              CanvasRenderer.prototype.getCharWidth = function() {
                  return this.charWidth * (window.devicePixelRatio || 1);
              };
  
              CanvasRenderer.prototype.getCharHeight = function() {
                  return this.charHeight * (window.devicePixelRatio || 1);
              };
  
              CanvasRenderer.prototype.getCharAscent = function() {
                  return this.charAscent * (window.devicePixelRatio || 1);
              };
  
              CanvasRenderer.prototype.getLineHeight = function() {
                  return this.lineHeight * (window.devicePixelRatio || 1);
              };
  
              CanvasRenderer.prototype.mouseX = function() {
                  return 0; // TODO
              };
  
              CanvasRenderer.prototype.mouseY = function() {
                  return 0; // TODO
              };
  
              CanvasRenderer.prototype.setFG = function(r, g, b) {
                  this.fgColor = rgbToHexColor(r, g, b);
              };
  
              CanvasRenderer.prototype.setBG = function(r, g, b) {
                  this.bgColor = rgbToHexColor(r, g, b);
              };
  
              CanvasRenderer.prototype.setSP = function(r, g, b) {
                  this.spColor = rgbToHexColor(r, g, b);
              };
  
              CanvasRenderer.prototype.setFont = function(fontName) {
                  this.fontName = fontName;
                  this.input.setFont(this.fontName, this.charHeight);
                  // TODO: Font metrics should be measured since monospace font is different on each
                  // platform.
              };
  
              CanvasRenderer.prototype.focus = function() {
                  this.input.focus();
              };
  
              CanvasRenderer.prototype.onResize = function(event) {
                  console.error('TODO: Tells Vim window size was changed');
                  // 'resize' event is called frequently while resizing the window.
                  // Need to debounce events.
              };
  
              CanvasRenderer.prototype.adjustScreenSize = function() {
                  const rect = this.canvas.getBoundingClientRect();
                  const rows = Math.floor(rect.height / this.lineHeight);
                  const cols = Math.floor(rect.width / this.charWidth);
                  if (this.rows === rows && this.cols === cols) {
                      return;
                  }
                  this.rows = rows;
                  this.cols = cols;
                  // Do not use this.screenWidth() and this.screenHeight() because they use values converted via Math.floor().
                  this.canvas.width = rect.width * (window.devicePixelRatio || 1);
                  this.canvas.height = rect.height * (window.devicePixelRatio || 1);
              };
  
              CanvasRenderer.prototype.resizeScreen = function(rows, cols) {
                  if (this.rows === rows && this.cols === cols) {
                      return;
                  }
                  this.rows = rows;
                  this.cols = cols;
                  this.canvas.width = this.screenWidth();
                  this.canvas.height = this.screenHeight();
              };
  
              CanvasRenderer.prototype.invertBlock = function(row, col, rows, cols) {
                  const cw = this.getCharWidth();
                  const ch = this.getLineHeight();
                  const x = Math.floor(cw * col);
                  const y = Math.floor(ch * row);
                  const w = Math.floor(cw * (col2 - col));
                  const h = Math.floor(ch * (row2 - row));
                  const img = this.ctx.getImageData(x, y, w, h);
                  const data = img.data;
                  const len = data.length;
                  for (var i = 0; i < len; ++i) {
                      data[i] = 255 - data[i];
                      ++i;
                      data[i] = 255 - data[i];
                      ++i;
                      data[i] = 255 - data[i];
                      ++i; // Skip alpha
                  }
                  ctx.putImageData(img, x, y);
              };
  
              CanvasRenderer.prototype.drawPartCursor = function(row, col, wpix, hpix) {
                  // hpix and wpix don't consider device pixel ratio
                  const cw = this.getCharWidth();
                  const ch = this.getLineHeight();
                  const x = Math.floor(cw * col);
                  const y = Math.floor(ch * row);
                  const res = window.devicePixelRatio || 1;
                  const w = Math.floor(wpix * res);
                  const h = Math.floor(hpix * res);
                  this.ctx.fillStyle = this.fgColor;
                  this.ctx.fillRect(x, y, w, h);
              };
  
              CanvasRenderer.prototype.rect = function(row, col, row2, col2, color, fill) {
                  const cw = this.getCharWidth();
                  const ch = this.getLineHeight();
                  const x = Math.floor(cw * col);
                  const y = Math.floor(ch * row);
                  const w = Math.floor(cw * (col2 - col + 1));
                  const h = Math.floor(ch * (row2 - row + 1));
                  this.ctx.fillStyle = color;
                  if (fill) {
                      this.ctx.fillRect(x, y, w, h);
                  } else {
                      this.ctx.rect(x, y, w, h);
                  }
              };
  
              CanvasRenderer.prototype.clearBlock = function(row, col, row2, col2) {
                  this.rect(row, col, row2, col2, this.bgColor, true);
              };
  
              CanvasRenderer.prototype.clear = function() {
                  this.ctx.fillStyle = this.bgColor;
                  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
              };
  
              // TODO: Draw character for each cells rather than drawing a string at once.
              // This prevents <canvas> render from doing something like font karning.
              CanvasRenderer.prototype.drawText = function(
                  row,
                  col,
                  str,
                  bgTransparent,
                  bold,
                  underline,
                  undercurl,
                  strike
              ) {
                  if (!bgTransparent) {
                      this.clearBlock(row, col, row, col + str.length - 1);
                  }
  
                  // TODO: Do not render anything when the string is ' '.
                  // Vim renders ' ' with bgTransparent==false for clearing a cursor,
                  // but rendering one space in foreground actually does nothing.
  
                  var font = this.getCharHeight() + 'px ' + this.fontName;
                  if (bold) {
                      font = 'bold ' + font;
                  }
                  this.ctx.font = font;
                  this.ctx.textBaseline = 'top'; // FIXME: Should set 'bottom' from descent of the font
                  this.ctx.fillStyle = this.fgColor;
  
                  const ch = this.getLineHeight();
                  const cw = this.getCharWidth();
                  const x = Math.floor(col * cw);
                  const y = Math.floor(row * ch);
                  this.ctx.fillText(str, x, y);
  
                  const res = window.devicePixelRatio || 1;
                  if (underline) {
                      this.ctx.strokeStyle = this.fgColor;
                      this.ctx.lineWidth = 1 * res;
                      this.ctx.setLineDash([]);
                      this.ctx.beginPath();
                      // Note: 3 is set with considering the width of line.
                      // TODO: Calcurate the position of the underline with descent.
                      const underlineY = y + ch - 3 * res;
                      this.ctx.moveTo(x, underlineY);
                      this.ctx.lineTo(x + cw * str.length, underlineY);
                      this.ctx.stroke();
                  } else if (undercurl) {
                      this.ctx.strokeStyle = this.spColor;
                      this.ctx.lineWidth = 1 * res;
                      this.ctx.setLineDash([cw / 3, cw / 3]);
                      this.ctx.beginPath();
                      // Note: 3 is set with considering the width of line.
                      // TODO: Calcurate the position of the underline with descent.
                      const undercurlY = y + ch - 3 * res;
                      this.ctx.moveTo(x, undercurlY);
                      this.ctx.lineTo(x + cw * str.length, undercurlY);
                      this.ctx.stroke();
                  } else if (strike) {
                      this.ctx.strokeStyle = this.fgColor;
                      this.ctx.lineWidth = 1 * res;
                      this.ctx.beginPath();
                      const strikeY = y + Math.floor(ch / 2);
                      this.ctx.moveTo(x, strikeY);
                      this.ctx.lineTo(x + cw * str.length, strikeY);
                      this.ctx.stroke();
                  }
              };
  
              // Delete the given number of lines from the given row, scrolling up any
              // text further down within the scroll region.
              //
              //  example:
              //    row: 2, num_lines: 2, top: 1, bottom: 4
              //    _: cleared
              //
              //   Before:
              //    1 aaaaa
              //    2 bbbbb
              //    3 ccccc
              //    4 ddddd
              //
              //   After:
              //    1 aaaaa
              //    2 ddddd
              //    3 _____
              //    4 _____
              //
              //                                                1         1     1      23     80
              CanvasRenderer.prototype.deleteLines = function(row, numLines, left, bottom, right) {
                  const cw = this.getCharWidth();
                  const ch = this.getLineHeight();
                  const sx = Math.floor(left * cw);
                  const sy = Math.floor((row + numLines) * ch);
                  const sw = Math.floor((right - left + 1) * cw);
                  const sh = Math.floor((bottom - row - numLines) * ch);
                  const dy = Math.floor(row * ch);
                  this.ctx.drawImage(this.canvas, sx, sy, sw, sh, sx, dy, sw, sh);
                  this.clearBlock(bottom - numLines + 1, left, bottom, right);
              };
  
              // Insert the given number of lines before the given row, scrolling down any
              // following text within the scroll region.
              //
              //  example:
              //    row: 2, num_lines: 2, top: 1, bottom: 4
              //    _: cleared
              //
              //   Before:
              //    1 aaaaa
              //    2 bbbbb
              //    3 ccccc
              //    4 ddddd
              //
              //   After:
              //    1 aaaaa
              //    2 _____
              //    3 _____
              //    4 bbbbb
              //
              CanvasRenderer.prototype.insertLines = function(row, numLines, left, bottom, right) {
                  const cw = this.getCharWidth();
                  const ch = this.getLineHeight();
                  const sx = Math.floor(left * cw);
                  const sy = Math.floor(row * ch);
                  const sw = Math.floor((right - left + 1) * cw);
                  const sh = Math.floor((bottom - (row + numLines) + 1) * ch);
                  const dy = Math.floor((row + numLines) * ch);
                  this.ctx.drawImage(this.canvas, sx, sy, sw, sh, sx, dy, sw, sh);
                  this.clearBlock(row, left, row + numLines - 1, bottom);
              };
  
              VW.VimInput = VimInput;
              VW.CanvasRenderer = CanvasRenderer;
              VW.renderer = new CanvasRenderer();
          }};function _vimwasm_call_shell(command) {
          const c = Pointer_stringify(command);
          debug('call_shell:', c);
          // Shell command may be passed here. Catch the exception
          // eval(c);
      }

  function _vimwasm_clear_all() {
          debug('clear_all:');
          VW.renderer.clear();
      }

  function _vimwasm_clear_block(row1, col1, row2, col2) {
          debug('clear_block:', row1, col1, row2, col2);
          VW.renderer.clearBlock(row1, col1, row2, col2);
      }

  function _vimwasm_delete_lines(row, num_lines, region_left, region_bottom, region_right) {
          debug('delete_lines:', row, num_lines, region_left, region_bottom, region_right);
          VW.renderer.deleteLines(row, num_lines, region_left, region_bottom, region_right);
      }

  function _vimwasm_draw_hollow_cursor(row, col) {
          debug('draw_hollow_cursor:', row, col);
          VW.renderer.rect(row, col, row + 1, col + 1, VW.renderer.fgColor, false);
      }

  function _vimwasm_draw_part_cursor(row, col, width, height) {
          debug('draw_part_cursor:', row, col, width, height);
          VW.renderer.drawPartCursor(row, col, width, height);
      }

  function _vimwasm_draw_string(row, col, ptr, len, is_transparent, is_bold, is_underline, is_undercurl, is_strike) {
          const str = Pointer_stringify(ptr, len);
          debug(
              'draw_string:',
              row,
              col,
              "'" + str + "'",
              is_transparent,
              is_bold,
              is_underline,
              is_undercurl,
              is_strike
          );
          VW.renderer.drawText(row, col, str, !!is_transparent, !!is_bold, !!is_underline, !!is_undercurl, !!is_strike);
      }

  function _vimwasm_get_char_ascent() {
          debug('get_char_ascent:');
          return VW.renderer.charAscent;
      }

  function _vimwasm_get_char_height() {
          debug('get_char_height:');
          return VW.renderer.lineHeight;
      }

  function _vimwasm_get_char_width() {
          debug('get_char_width:');
          return VW.renderer.charWidth;
      }

  function _vimwasm_get_mouse_x() {
          debug('get_mouse_x:');
          return VW.renderer.mouseX();
      }

  function _vimwasm_get_mouse_y() {
          debug('get_mouse_y:');
          return VW.renderer.mouseY();
      }

  function _vimwasm_get_win_height() {
          debug('get_win_height:');
          return VW.renderer.rows * VW.renderer.lineHeight;
      }

  function _vimwasm_get_win_width() {
          debug('get_win_width:');
          return VW.renderer.cols * VW.renderer.charWidth;
      }

  function _vimwasm_insert_lines(row, num_lines, region_left, region_bottom, region_right) {
          debug('insert_lines:', row, num_lines, region_left, region_bottom, region_right);
          VW.renderer.insertLines(row, num_lines, region_left, region_bottom, region_right);
      }

  function _vimwasm_invert_rectangle(row, col, height, width) {
          debug('invert_rectangle:', row, col, height, width);
          VW.renderer.invertBlock(row, col, height, width);
      }

  function _vimwasm_is_font(font_name) {
          font_name = Pointer_stringify(font_name);
          debug('is_font:', font_name);
          // TODO: Check the font name is available. Currently font name is fixed to monospace
          return 1;
      }

  function _vimwasm_is_supported_key(key_name) {
          key_name = Pointer_stringify(key_name);
          debug('is_supported_key:', key_name);
          // TODO: Check the key is supported in the browser
          return 1;
      }

  function _vimwasm_resize(width, height, min_width, min_height, base_width, base_height, direction) {
          debug('resize:', width, height, min_width, min_height, base_width, base_height);
      }

  function _vimwasm_resize_win(rows, columns) {
          debug('resize_win: Rows:', rows, 'Columns:', columns);
          VW.renderer.resizeScreen(rows, columns);
      }

  function _vimwasm_set_bg_color(r, g, b) {
          debug('set_bg_color:', r, g, b);
          VW.renderer.setBG(r, g, b);
      }

  function _vimwasm_set_fg_color(r, g, b) {
          debug('set_fg_color:', r, g, b);
          VW.renderer.setFG(r, g, b);
      }

  function _vimwasm_set_font(font_name) {
          font_name = Pointer_stringify(font_name);
          debug('set_font:', font_name);
          VW.renderer.setFont(font_name);
      }

  function _vimwasm_set_sp_color(r, g, b) {
          debug('set_sp_color:', r, g, b);
          VW.renderer.setSP(r, g, b);
      }

  function _vimwasm_will_exit(exit_status) {
          debug('will_exit:', exit_status);
      }

  function _vimwasm_will_init() {
          debug('will_init:');
          VW.renderer.onVimInit();
      }

if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
VW.init();
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



Module['wasmTableSize'] = 304;

Module['wasmMaxTableSize'] = 304;

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = {};

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___clock_gettime": ___clock_gettime, "___lock": ___lock, "___map_file": ___map_file, "___setErrNo": ___setErrNo, "___syscall10": ___syscall10, "___syscall118": ___syscall118, "___syscall12": ___syscall12, "___syscall122": ___syscall122, "___syscall133": ___syscall133, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall15": ___syscall15, "___syscall168": ___syscall168, "___syscall183": ___syscall183, "___syscall191": ___syscall191, "___syscall194": ___syscall194, "___syscall195": ___syscall195, "___syscall196": ___syscall196, "___syscall197": ___syscall197, "___syscall199": ___syscall199, "___syscall20": ___syscall20, "___syscall200": ___syscall200, "___syscall202": ___syscall202, "___syscall207": ___syscall207, "___syscall212": ___syscall212, "___syscall220": ___syscall220, "___syscall221": ___syscall221, "___syscall3": ___syscall3, "___syscall33": ___syscall33, "___syscall340": ___syscall340, "___syscall36": ___syscall36, "___syscall38": ___syscall38, "___syscall39": ___syscall39, "___syscall4": ___syscall4, "___syscall40": ___syscall40, "___syscall41": ___syscall41, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall60": ___syscall60, "___syscall85": ___syscall85, "___syscall91": ___syscall91, "___syscall94": ___syscall94, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__exit": __exit, "__isLeapYear": __isLeapYear, "_asctime_r": _asctime_r, "_clock_gettime": _clock_gettime, "_ctime": _ctime, "_ctime_r": _ctime_r, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_exit": _exit, "_getenv": _getenv, "_getpwnam": _getpwnam, "_getpwuid": _getpwuid, "_gettimeofday": _gettimeofday, "_kill": _kill, "_llvm_cttz_i32": _llvm_cttz_i32, "_localtime": _localtime, "_localtime_r": _localtime_r, "_mktime": _mktime, "_nanosleep": _nanosleep, "_setenv": _setenv, "_signal": _signal, "_strftime": _strftime, "_sysconf": _sysconf, "_time": _time, "_tzset": _tzset, "_usleep": _usleep, "_vimwasm_call_shell": _vimwasm_call_shell, "_vimwasm_clear_all": _vimwasm_clear_all, "_vimwasm_clear_block": _vimwasm_clear_block, "_vimwasm_delete_lines": _vimwasm_delete_lines, "_vimwasm_draw_hollow_cursor": _vimwasm_draw_hollow_cursor, "_vimwasm_draw_part_cursor": _vimwasm_draw_part_cursor, "_vimwasm_draw_string": _vimwasm_draw_string, "_vimwasm_get_char_ascent": _vimwasm_get_char_ascent, "_vimwasm_get_char_height": _vimwasm_get_char_height, "_vimwasm_get_char_width": _vimwasm_get_char_width, "_vimwasm_get_mouse_x": _vimwasm_get_mouse_x, "_vimwasm_get_mouse_y": _vimwasm_get_mouse_y, "_vimwasm_get_win_height": _vimwasm_get_win_height, "_vimwasm_get_win_width": _vimwasm_get_win_width, "_vimwasm_insert_lines": _vimwasm_insert_lines, "_vimwasm_invert_rectangle": _vimwasm_invert_rectangle, "_vimwasm_is_font": _vimwasm_is_font, "_vimwasm_is_supported_key": _vimwasm_is_supported_key, "_vimwasm_resize": _vimwasm_resize, "_vimwasm_resize_win": _vimwasm_resize_win, "_vimwasm_set_bg_color": _vimwasm_set_bg_color, "_vimwasm_set_fg_color": _vimwasm_set_fg_color, "_vimwasm_set_font": _vimwasm_set_font, "_vimwasm_set_sp_color": _vimwasm_set_sp_color, "_vimwasm_will_exit": _vimwasm_will_exit, "_vimwasm_will_init": _vimwasm_will_init, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___clock_gettime=env.___clock_gettime;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___setErrNo=env.___setErrNo;
  var ___syscall10=env.___syscall10;
  var ___syscall118=env.___syscall118;
  var ___syscall12=env.___syscall12;
  var ___syscall122=env.___syscall122;
  var ___syscall133=env.___syscall133;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall15=env.___syscall15;
  var ___syscall168=env.___syscall168;
  var ___syscall183=env.___syscall183;
  var ___syscall191=env.___syscall191;
  var ___syscall194=env.___syscall194;
  var ___syscall195=env.___syscall195;
  var ___syscall196=env.___syscall196;
  var ___syscall197=env.___syscall197;
  var ___syscall199=env.___syscall199;
  var ___syscall20=env.___syscall20;
  var ___syscall200=env.___syscall200;
  var ___syscall202=env.___syscall202;
  var ___syscall207=env.___syscall207;
  var ___syscall212=env.___syscall212;
  var ___syscall220=env.___syscall220;
  var ___syscall221=env.___syscall221;
  var ___syscall3=env.___syscall3;
  var ___syscall33=env.___syscall33;
  var ___syscall340=env.___syscall340;
  var ___syscall36=env.___syscall36;
  var ___syscall38=env.___syscall38;
  var ___syscall39=env.___syscall39;
  var ___syscall4=env.___syscall4;
  var ___syscall40=env.___syscall40;
  var ___syscall41=env.___syscall41;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall60=env.___syscall60;
  var ___syscall85=env.___syscall85;
  var ___syscall91=env.___syscall91;
  var ___syscall94=env.___syscall94;
  var ___unlock=env.___unlock;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __exit=env.__exit;
  var __isLeapYear=env.__isLeapYear;
  var _asctime_r=env._asctime_r;
  var _clock_gettime=env._clock_gettime;
  var _ctime=env._ctime;
  var _ctime_r=env._ctime_r;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _exit=env._exit;
  var _getenv=env._getenv;
  var _getpwnam=env._getpwnam;
  var _getpwuid=env._getpwuid;
  var _gettimeofday=env._gettimeofday;
  var _kill=env._kill;
  var _llvm_cttz_i32=env._llvm_cttz_i32;
  var _localtime=env._localtime;
  var _localtime_r=env._localtime_r;
  var _mktime=env._mktime;
  var _nanosleep=env._nanosleep;
  var _setenv=env._setenv;
  var _signal=env._signal;
  var _strftime=env._strftime;
  var _sysconf=env._sysconf;
  var _time=env._time;
  var _tzset=env._tzset;
  var _usleep=env._usleep;
  var _vimwasm_call_shell=env._vimwasm_call_shell;
  var _vimwasm_clear_all=env._vimwasm_clear_all;
  var _vimwasm_clear_block=env._vimwasm_clear_block;
  var _vimwasm_delete_lines=env._vimwasm_delete_lines;
  var _vimwasm_draw_hollow_cursor=env._vimwasm_draw_hollow_cursor;
  var _vimwasm_draw_part_cursor=env._vimwasm_draw_part_cursor;
  var _vimwasm_draw_string=env._vimwasm_draw_string;
  var _vimwasm_get_char_ascent=env._vimwasm_get_char_ascent;
  var _vimwasm_get_char_height=env._vimwasm_get_char_height;
  var _vimwasm_get_char_width=env._vimwasm_get_char_width;
  var _vimwasm_get_mouse_x=env._vimwasm_get_mouse_x;
  var _vimwasm_get_mouse_y=env._vimwasm_get_mouse_y;
  var _vimwasm_get_win_height=env._vimwasm_get_win_height;
  var _vimwasm_get_win_width=env._vimwasm_get_win_width;
  var _vimwasm_insert_lines=env._vimwasm_insert_lines;
  var _vimwasm_invert_rectangle=env._vimwasm_invert_rectangle;
  var _vimwasm_is_font=env._vimwasm_is_font;
  var _vimwasm_is_supported_key=env._vimwasm_is_supported_key;
  var _vimwasm_resize=env._vimwasm_resize;
  var _vimwasm_resize_win=env._vimwasm_resize_win;
  var _vimwasm_set_bg_color=env._vimwasm_set_bg_color;
  var _vimwasm_set_fg_color=env._vimwasm_set_fg_color;
  var _vimwasm_set_font=env._vimwasm_set_font;
  var _vimwasm_set_sp_color=env._vimwasm_set_sp_color;
  var _vimwasm_will_exit=env._vimwasm_will_exit;
  var _vimwasm_will_init=env._vimwasm_will_init;
  var tempFloat = Math_fround(0);
  var asyncState = 0;
  const f0 = Math_fround(0);

// EMSCRIPTEN_START_FUNCS
function _nfa_emit_equi_class(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 L1 : do switch (HEAP32[i4 >> 2] | 0) {
 case 197:
 case 196:
 case 195:
 case 194:
 case 193:
 case 192:
 case 65:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 65;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 192;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 193;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 194;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 195;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 196;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 197;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 66:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 66;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 199:
 case 67:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 67;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 199;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 68:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 68;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 203:
 case 202:
 case 201:
 case 200:
 case 69:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 69;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 200;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 201;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 202;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 203;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 70:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 70;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 71:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 71;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 72:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 72;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 207:
 case 206:
 case 205:
 case 204:
 case 73:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 73;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 204;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 205;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 206;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 207;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 74:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 74;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 75:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 75;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 76:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 76;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 77:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 77;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 209:
 case 78:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 78;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 209;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 216:
 case 214:
 case 213:
 case 212:
 case 211:
 case 210:
 case 79:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 79;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 210;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 211;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 212;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 213;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 214;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 216;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 7766:
 case 7764:
 case 80:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 80;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 82:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 82;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 83:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 83;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 84:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 84;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 219:
 case 220:
 case 218:
 case 217:
 case 85:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 85;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 217;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 218;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 220;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 219;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 86:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 86;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 87:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 87;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 88:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 88;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 221:
 case 89:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 89;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 221;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 90:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 90;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 229:
 case 228:
 case 227:
 case 226:
 case 225:
 case 224:
 case 97:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 97;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 224;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 225;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 226;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 227;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 228;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 229;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 98:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 98;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 231:
 case 99:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 99;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 231;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 100:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 100;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 235:
 case 234:
 case 233:
 case 232:
 case 101:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 101;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 232;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 233;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 234;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 235;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 102:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 102;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 103:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 103;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 104:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 104;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 239:
 case 238:
 case 237:
 case 236:
 case 105:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 105;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 236;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 237;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 238;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 239;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 106:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 106;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 107:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 107;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 108:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 108;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 109:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 109;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 241:
 case 110:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 110;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 241;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 248:
 case 246:
 case 245:
 case 244:
 case 243:
 case 242:
 case 111:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 111;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 242;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 243;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 244;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 245;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 246;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 248;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 112:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 112;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 114:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 114;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 115:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 115;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 116:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 116;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 252:
 case 251:
 case 250:
 case 249:
 case 117:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 117;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 249;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 250;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 251;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 252;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 118:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 118;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 119:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 119;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 120:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 120;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 255:
 case 253:
 case 121:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 121;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 253;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 255;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 122:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = 122;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
   break;
  }
 default:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[i4 >> 2] | 0;
   i5 = HEAP32[26382] | 0;
   HEAP32[26382] = i5 + 4;
   HEAP32[i5 >> 2] = i1;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    break L1;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1014;
   HEAP32[i3 >> 2] = 1;
  }
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _buf_write(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0;
 i11 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 1312 | 0;
 i13 = i12 + 56 | 0;
 i14 = i12 + 48 | 0;
 i15 = i12 + 40 | 0;
 i16 = i12 + 32 | 0;
 i17 = i12 + 24 | 0;
 i18 = i12 + 16 | 0;
 i19 = i12 + 8 | 0;
 i20 = i12;
 i21 = i12 + 1036 | 0;
 i22 = i12 + 1032 | 0;
 i23 = i12 + 1028 | 0;
 i24 = i12 + 1024 | 0;
 i25 = i12 + 1020 | 0;
 i26 = i12 + 1016 | 0;
 i27 = i12 + 1012 | 0;
 i28 = i12 + 1008 | 0;
 i29 = i12 + 1004 | 0;
 i30 = i12 + 1e3 | 0;
 i31 = i12 + 996 | 0;
 i32 = i12 + 992 | 0;
 i33 = i12 + 988 | 0;
 i34 = i12 + 984 | 0;
 i35 = i12 + 980 | 0;
 i36 = i12 + 976 | 0;
 i37 = i12 + 972 | 0;
 i38 = i12 + 968 | 0;
 i39 = i12 + 964 | 0;
 i40 = i12 + 1296 | 0;
 i41 = i12 + 960 | 0;
 i42 = i12 + 956 | 0;
 i43 = i12 + 952 | 0;
 i44 = i12 + 948 | 0;
 i45 = i12 + 944 | 0;
 i46 = i12 + 940 | 0;
 i47 = i12 + 936 | 0;
 i48 = i12 + 1040 | 0;
 i49 = i12 + 932 | 0;
 i50 = i12 + 928 | 0;
 i51 = i12 + 924 | 0;
 i52 = i12 + 920 | 0;
 i53 = i12 + 916 | 0;
 i54 = i12 + 912 | 0;
 i55 = i12 + 908 | 0;
 i56 = i12 + 904 | 0;
 i57 = i12 + 900 | 0;
 i58 = i12 + 824 | 0;
 i59 = i12 + 820 | 0;
 i60 = i12 + 816 | 0;
 i61 = i12 + 812 | 0;
 i62 = i12 + 808 | 0;
 i63 = i12 + 804 | 0;
 i64 = i12 + 800 | 0;
 i65 = i12 + 796 | 0;
 i66 = i12 + 792 | 0;
 i67 = i12 + 788 | 0;
 i68 = i12 + 776 | 0;
 i69 = i12 + 772 | 0;
 i70 = i12 + 768 | 0;
 i71 = i12 + 736 | 0;
 i72 = i12 + 732 | 0;
 i73 = i12 + 728 | 0;
 i74 = i12 + 724 | 0;
 i75 = i12 + 720 | 0;
 i76 = i12 + 716 | 0;
 i77 = i12 + 712 | 0;
 i78 = i12 + 708 | 0;
 i79 = i12 + 696 | 0;
 i80 = i12 + 692 | 0;
 i81 = i12 + 616 | 0;
 i82 = i12 + 612 | 0;
 i83 = i12 + 608 | 0;
 i84 = i12 + 604 | 0;
 i85 = i12 + 600 | 0;
 i86 = i12 + 596 | 0;
 i87 = i12 + 592 | 0;
 i88 = i12 + 516 | 0;
 i89 = i12 + 512 | 0;
 i90 = i12 + 508 | 0;
 i91 = i12 + 504 | 0;
 i92 = i12 + 500 | 0;
 i93 = i12 + 496 | 0;
 i94 = i12 + 492 | 0;
 i95 = i12 + 488 | 0;
 i96 = i12 + 412 | 0;
 i97 = i12 + 336 | 0;
 i98 = i12 + 260 | 0;
 i99 = i12 + 184 | 0;
 i100 = i12 + 180 | 0;
 i101 = i12 + 104 | 0;
 i102 = i12 + 100 | 0;
 i103 = i12 + 96 | 0;
 i104 = i12 + 64 | 0;
 HEAP32[i22 >> 2] = i1;
 HEAP32[i23 >> 2] = i2;
 HEAP32[i24 >> 2] = i3;
 HEAP32[i25 >> 2] = i4;
 HEAP32[i26 >> 2] = i5;
 HEAP32[i27 >> 2] = i6;
 HEAP32[i28 >> 2] = i7;
 HEAP32[i29 >> 2] = i8;
 HEAP32[i30 >> 2] = i9;
 HEAP32[i31 >> 2] = i10;
 HEAP32[i33 >> 2] = 0;
 HEAP32[i34 >> 2] = 0;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i44 >> 2] = 0;
 HEAP32[i45 >> 2] = 0;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i52 >> 2] = 1;
 HEAP32[i53 >> 2] = 0;
 HEAP32[i54 >> 2] = HEAP32[26710];
 HEAP32[i56 >> 2] = 0;
 HEAP32[i57 >> 2] = 0;
 HEAP32[i59 >> 2] = HEAP32[26834];
 HEAP32[i61 >> 2] = 0;
 HEAP32[i62 >> 2] = 0;
 if ((HEAP32[i25 >> 2] | 0) == 1) i105 = (HEAP32[i26 >> 2] | 0) == (HEAP32[HEAP32[i22 >> 2] >> 2] | 0); else i105 = 0;
 HEAP32[i63 >> 2] = i105 & 1;
 HEAP32[i64 >> 2] = HEAP32[HEAP32[i22 >> 2] >> 2];
 HEAP32[i69 >> 2] = 0;
 HEAP32[i70 >> 2] = _get_bkc_value(HEAP32[i22 >> 2] | 0) | 0;
 if (HEAP32[i23 >> 2] | 0) if (HEAPU8[HEAP32[i23 >> 2] >> 0] | 0) {
  if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] | 0)) {
   _emsg(94134) | 0;
   HEAP32[i21 >> 2] = 0;
   i106 = HEAP32[i21 >> 2] | 0;
   STACKTOP = i12;
   return i106 | 0;
  }
  if (_check_secure() | 0) {
   HEAP32[i21 >> 2] = 0;
   i106 = HEAP32[i21 >> 2] | 0;
   STACKTOP = i12;
   return i106 | 0;
  }
  if ((_strlen(HEAP32[i23 >> 2] | 0) | 0) >>> 0 >= 4096) {
   _emsg(93784) | 0;
   HEAP32[i21 >> 2] = 0;
   i106 = HEAP32[i21 >> 2] | 0;
   STACKTOP = i12;
   return i106 | 0;
  }
  HEAP32[26799] = 1;
  do if (HEAP32[i63 >> 2] | 0 ? (HEAP32[i30 >> 2] | 0 ? (HEAP32[(HEAP32[i22 >> 2] | 0) + 68 >> 2] | 0) == 0 : 0) : 0) if (!(HEAP32[i31 >> 2] | 0 ? 1 : (HEAP32[i22 >> 2] | 0) != (HEAP32[26773] | 0))) {
   if (HEAP32[i28 >> 2] | 0) if (!(_vim_strchr(HEAP32[26904] | 0, 80) | 0)) break;
   if (_vim_strchr(HEAP32[26904] | 0, 70) | 0) {
    if (_set_rw_fname(HEAP32[i23 >> 2] | 0, HEAP32[i24 >> 2] | 0) | 0) {
     HEAP32[i22 >> 2] = HEAP32[26773];
     break;
    }
    HEAP32[i21 >> 2] = 0;
    i106 = HEAP32[i21 >> 2] | 0;
    STACKTOP = i12;
    return i106 | 0;
   }
  } while (0);
  if (!(HEAP32[i24 >> 2] | 0)) HEAP32[i24 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i36 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i23 >> 2] = HEAP32[i24 >> 2];
  if (HEAP32[(HEAP32[i22 >> 2] | 0) + 68 >> 2] | 0) if (!(_vim_fnamecmp(HEAP32[i36 >> 2] | 0, HEAP32[(HEAP32[i22 >> 2] | 0) + 68 >> 2] | 0) | 0)) HEAP32[i55 >> 2] = 1; else i11 = 25; else i11 = 25;
  if ((i11 | 0) == 25) HEAP32[i55 >> 2] = 0;
  if (HEAP32[26778] | 0) _settmode(0);
  HEAP32[26720] = (HEAP32[26720] | 0) + 1;
  HEAP32[(HEAP32[i22 >> 2] | 0) + 476 >> 2] = HEAP32[i25 >> 2];
  HEAP32[(HEAP32[i22 >> 2] | 0) + 476 + 4 >> 2] = 0;
  HEAP32[(HEAP32[i22 >> 2] | 0) + 492 >> 2] = HEAP32[i26 >> 2];
  HEAP32[(HEAP32[i22 >> 2] | 0) + 492 + 4 >> 2] = 0;
  HEAP32[i72 >> 2] = 0;
  HEAP32[i73 >> 2] = 0;
  HEAP32[i74 >> 2] = 0;
  HEAP32[i75 >> 2] = 0;
  HEAP32[i76 >> 2] = 0;
  HEAP32[i77 >> 2] = 0;
  HEAP32[i78 >> 2] = (HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] | 0) == 0 & 1;
  if ((HEAP32[i36 >> 2] | 0) == (HEAP32[(HEAP32[i22 >> 2] | 0) + 68 >> 2] | 0)) HEAP32[i72 >> 2] = 1;
  if ((HEAP32[i24 >> 2] | 0) == (HEAP32[(HEAP32[i22 >> 2] | 0) + 72 >> 2] | 0)) HEAP32[i73 >> 2] = 1;
  if ((HEAP32[i23 >> 2] | 0) == (HEAP32[(HEAP32[i22 >> 2] | 0) + 68 >> 2] | 0)) HEAP32[i74 >> 2] = 1;
  if ((HEAP32[i23 >> 2] | 0) == (HEAP32[(HEAP32[i22 >> 2] | 0) + 72 >> 2] | 0)) HEAP32[i75 >> 2] = 1;
  _aucmd_prepbuf(i71, HEAP32[i22 >> 2] | 0);
  _set_bufref(i79, HEAP32[i22 >> 2] | 0);
  do if (HEAP32[i28 >> 2] | 0) {
   i105 = HEAP32[i24 >> 2] | 0;
   i10 = _apply_autocmds_exarg(35, i105 | 0, i105 | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
   HEAP32[i76 >> 2] = i10;
   if (!i10) {
    i10 = HEAP32[i24 >> 2] | 0;
    _apply_autocmds_exarg(37, i10 | 0, i10 | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
   }
  } else {
   if (HEAP32[i31 >> 2] | 0) {
    _apply_autocmds_exarg(51, 0, HEAP32[i24 >> 2] | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
    break;
   }
   if (!((HEAP32[i30 >> 2] | 0) != 0 & (HEAP32[i63 >> 2] | 0) != 0)) {
    i10 = HEAP32[i24 >> 2] | 0;
    i105 = _apply_autocmds_exarg(45, i10 | 0, i10 | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
    HEAP32[i76 >> 2] = i105;
    if (i105 | 0) break;
    i105 = HEAP32[i24 >> 2] | 0;
    _apply_autocmds_exarg(47, i105 | 0, i105 | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
    break;
   }
   HEAP32[i80 >> 2] = _curbufIsChanged() | 0;
   i105 = HEAP32[i24 >> 2] | 0;
   HEAP32[i76 >> 2] = _apply_autocmds_exarg(16, i105 | 0, i105 | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
   if (!(HEAP32[i76 >> 2] | 0)) {
    i105 = HEAP32[i24 >> 2] | 0;
    _apply_autocmds_exarg(18, i105 | 0, i105 | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
    break;
   }
   if (!(HEAP32[i80 >> 2] | 0)) break;
   if (_curbufIsChanged() | 0) break;
   _u_unchanged(HEAP32[26773] | 0);
   _u_update_save_nr(HEAP32[26773] | 0);
  } while (0);
  _aucmd_restbuf(i71);
  if (!(_bufref_valid(i79) | 0)) HEAP32[i22 >> 2] = 0;
  if (HEAP32[i22 >> 2] | 0) if (!((HEAP32[i78 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] | 0) != 0) ^ 1 | (HEAP32[i76 >> 2] | 0) != 0 | (HEAP32[i77 >> 2] | 0) != 0)) {
   do if ((HEAP32[HEAP32[i22 >> 2] >> 2] | 0) != (HEAP32[i64 >> 2] | 0)) {
    i78 = HEAP32[HEAP32[i22 >> 2] >> 2] | 0;
    if (HEAP32[i63 >> 2] | 0) {
     HEAP32[i26 >> 2] = i78;
     break;
    }
    if ((i78 | 0) > (HEAP32[i64 >> 2] | 0)) {
     HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + ((HEAP32[HEAP32[i22 >> 2] >> 2] | 0) - (HEAP32[i64 >> 2] | 0));
     break;
    }
    HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - ((HEAP32[i64 >> 2] | 0) - (HEAP32[HEAP32[i22 >> 2] >> 2] | 0));
    if ((HEAP32[i26 >> 2] | 0) >= (HEAP32[i25 >> 2] | 0)) break;
    HEAP32[26720] = (HEAP32[26720] | 0) + -1;
    HEAP32[26710] = HEAP32[i54 >> 2];
    _emsg(54168) | 0;
    HEAP32[i21 >> 2] = 0;
    i106 = HEAP32[i21 >> 2] | 0;
    STACKTOP = i12;
    return i106 | 0;
   } while (0);
   if (HEAP32[i72 >> 2] | 0) HEAP32[i36 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 68 >> 2];
   if (HEAP32[i73 >> 2] | 0) HEAP32[i24 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 72 >> 2];
   if (HEAP32[i74 >> 2] | 0) HEAP32[i23 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 68 >> 2];
   if (HEAP32[i75 >> 2] | 0) HEAP32[i23 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 72 >> 2];
   i75 = (_shortmess(111) | 0) == 0;
   if (i75 | (HEAP32[26778] | 0) != 0) HEAP32[26710] = 1; else HEAP32[26710] = 0;
   if (!(HEAP32[i31 >> 2] | 0)) _filemess(HEAP32[i22 >> 2] | 0, HEAP32[i23 >> 2] | 0, 114072, 0);
   HEAP32[26710] = 0;
   HEAP32[i47 >> 2] = _alloc(8192) | 0;
   if (!(HEAP32[i47 >> 2] | 0)) {
    HEAP32[i47 >> 2] = i48;
    HEAP32[i50 >> 2] = 256;
   } else HEAP32[i50 >> 2] = 8192;
   HEAP32[i58 >> 2] = 0;
   HEAP32[i58 + 72 >> 2] = 0;
   HEAP32[i51 >> 2] = -1;
   do if ((_stat(HEAP32[i23 >> 2] | 0, i58) | 0) < 0) {
    HEAP32[i53 >> 2] = 1;
    i11 = 102;
   } else {
    HEAP32[i51 >> 2] = HEAP32[i58 + 12 >> 2];
    if ((HEAP32[i58 + 12 >> 2] & 61440 | 0) == 32768) {
     i11 = 102;
     break;
    }
    if ((HEAP32[i58 + 12 >> 2] & 61440 | 0) == 16384) {
     HEAP32[i46 >> 2] = 54228;
     HEAP32[i44 >> 2] = 52057;
     i11 = 428;
     break;
    }
    if ((_mch_nodetype(HEAP32[i23 >> 2] | 0) | 0) != 1) {
     HEAP32[i46 >> 2] = 54235;
     HEAP32[i44 >> 2] = 54242;
     i11 = 428;
     break;
    } else {
     HEAP32[i57 >> 2] = 1;
     HEAP32[i53 >> 2] = 1;
     HEAP32[i51 >> 2] = -1;
     i11 = 102;
     break;
    }
   } while (0);
   L122 : do if ((i11 | 0) == 102) {
    do if (!((HEAP32[i57 >> 2] | 0) != 0 | (HEAP32[i53 >> 2] | 0) != 0)) {
     HEAP32[i61 >> 2] = _check_file_readonly(HEAP32[i23 >> 2] | 0, HEAP32[i51 >> 2] | 0) | 0;
     if (!((HEAP32[i29 >> 2] | 0) == 0 & (HEAP32[i61 >> 2] | 0) != 0)) {
      if (!(HEAP32[i55 >> 2] | 0)) break;
      HEAP32[i52 >> 2] = _check_mtime(HEAP32[i22 >> 2] | 0, i58) | 0;
      if (!(HEAP32[i52 >> 2] | 0)) {
       i11 = 428;
       break L122;
      } else break;
     }
     if (_vim_strchr(HEAP32[26904] | 0, 87) | 0) {
      HEAP32[i46 >> 2] = 54275;
      HEAP32[i44 >> 2] = 55230;
      i11 = 428;
      break L122;
     } else {
      HEAP32[i46 >> 2] = 54282;
      HEAP32[i44 >> 2] = 54289;
      i11 = 428;
      break L122;
     }
    } while (0);
    if (!(HEAP32[i53 >> 2] | 0)) HEAP32[i69 >> 2] = _mch_get_acl(HEAP32[i23 >> 2] | 0) | 0;
    if ((HEAP32[27041] | 0) != 0 | (HEAP32[26894] | 0) != 0) i107 = 1; else i107 = (HEAPU8[HEAP32[26963] >> 0] | 0) != 0;
    HEAP32[i35 >> 2] = i107 & 1;
    do if (HEAP32[i35 >> 2] | 0) {
     if (!(HEAPU8[HEAP32[26901] >> 0] | 0)) break;
     if (!(_match_file_list(HEAP32[26901] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i36 >> 2] | 0) | 0)) break;
     HEAP32[i35 >> 2] = 0;
    } while (0);
    HEAP32[i59 >> 2] = HEAP32[26834];
    HEAP32[26834] = 0;
    HEAP32[(HEAP32[i22 >> 2] | 0) + 148 >> 2] = 1;
    if (HEAP32[i28 >> 2] | 0) {
     if ((((HEAPU8[HEAP32[26963] >> 0] | 0) == 0 | (HEAP32[i31 >> 2] | 0) != 0) ^ 1) & (HEAP32[i51 >> 2] | 0) >= 0 & (HEAP32[i35 >> 2] | 0) != 0) i11 = 120;
    } else if ((HEAP32[i31 >> 2] | 0) == 0 & (HEAP32[i51 >> 2] | 0) >= 0 & (HEAP32[i35 >> 2] | 0) != 0) i11 = 120;
    L148 : do if ((i11 | 0) == 120) {
     L150 : do if ((HEAP32[i70 >> 2] & 1 | 0) != 0 | (HEAP32[i28 >> 2] | 0) != 0) HEAP32[i34 >> 2] = 1; else {
      if (!(HEAP32[i70 >> 2] & 2)) break;
      do if ((HEAP32[i58 + 16 >> 2] | 0) >>> 0 <= 1) {
       if ((_lstat(HEAP32[i23 >> 2] | 0, i81) | 0) < 0) break;
       if ((HEAP32[i81 >> 2] | 0) != (HEAP32[i58 >> 2] | 0)) break;
       if ((HEAP32[i81 + 72 >> 2] | 0) != (HEAP32[i58 + 72 >> 2] | 0)) break;
       _strcpy(HEAP32[26882] | 0, HEAP32[i23 >> 2] | 0) | 0;
       HEAP32[i82 >> 2] = 4913;
       while (1) {
        i75 = _gettail(HEAP32[26882] | 0) | 0;
        HEAP32[i20 >> 2] = HEAP32[i82 >> 2];
        _sprintf(i75, 78969, i20) | 0;
        if ((_lstat(HEAP32[26882] | 0, i81) | 0) < 0) break;
        HEAP32[i82 >> 2] = (HEAP32[i82 >> 2] | 0) + 123;
       }
       i75 = HEAP32[26882] | 0;
       HEAP32[i19 >> 2] = HEAP32[i51 >> 2];
       HEAP32[i32 >> 2] = _open(i75, 131265, i19) | 0;
       if ((HEAP32[i32 >> 2] | 0) < 0) {
        HEAP32[i34 >> 2] = 1;
        break L150;
       }
       _fchown(HEAP32[i32 >> 2] | 0, HEAP32[i58 + 20 >> 2] | 0, HEAP32[i58 + 24 >> 2] | 0) | 0;
       do if ((_stat(HEAP32[26882] | 0, i81) | 0) < 0) i11 = 137; else {
        if ((HEAP32[i81 + 20 >> 2] | 0) != (HEAP32[i58 + 20 >> 2] | 0)) {
         i11 = 137;
         break;
        }
        if ((HEAP32[i81 + 24 >> 2] | 0) != (HEAP32[i58 + 24 >> 2] | 0)) {
         i11 = 137;
         break;
        }
        if ((HEAP32[i81 + 12 >> 2] | 0) != (HEAP32[i51 >> 2] | 0)) i11 = 137;
       } while (0);
       if ((i11 | 0) == 137) HEAP32[i34 >> 2] = 1;
       _close(HEAP32[i32 >> 2] | 0) | 0;
       _unlink(HEAP32[26882] | 0) | 0;
       break L150;
      } while (0);
      HEAP32[i34 >> 2] = 1;
     } while (0);
     if (HEAP32[i70 >> 2] & 8 | 0) i11 = 141; else if (HEAP32[i70 >> 2] & 16 | 0) i11 = 141;
     do if ((i11 | 0) == 141) {
      HEAP32[i83 >> 2] = _lstat(HEAP32[i23 >> 2] | 0, i81) | 0;
      do if ((HEAP32[i70 >> 2] & 8 | 0) != 0 & (HEAP32[i83 >> 2] | 0) == 0) {
       if ((HEAP32[i81 + 72 >> 2] | 0) == (HEAP32[i58 + 72 >> 2] | 0)) break;
       HEAP32[i34 >> 2] = 0;
      } while (0);
      if (!(HEAP32[i70 >> 2] & 16)) break;
      if ((HEAP32[i58 + 16 >> 2] | 0) >>> 0 <= 1) break;
      if (!(HEAP32[i83 >> 2] | 0)) if ((HEAP32[i81 + 72 >> 2] | 0) != (HEAP32[i58 + 72 >> 2] | 0)) break;
      HEAP32[i34 >> 2] = 0;
     } while (0);
     if (!(HEAPU8[HEAP32[26898] >> 0] | 0)) HEAP32[i49 >> 2] = 54322; else HEAP32[i49 >> 2] = HEAP32[26898];
     do if (HEAP32[i34 >> 2] | 0) {
      i75 = HEAP32[i23 >> 2] | 0;
      HEAP32[i18 >> 2] = 0;
      i74 = _open(i75, 0, i18) | 0;
      HEAP32[i32 >> 2] = i74;
      if ((i74 | 0) < 0) break;
      HEAP32[i87 >> 2] = 0;
      HEAP32[i85 >> 2] = _alloc(8193) | 0;
      L196 : do if (!(HEAP32[i85 >> 2] | 0)) HEAP32[i87 >> 2] = 1; else {
       HEAP32[i89 >> 2] = HEAP32[26897];
       L199 : while (1) {
        if (!(HEAP8[HEAP32[i89 >> 2] >> 0] | 0)) break L196;
        HEAP32[i88 + 72 >> 2] = 0;
        HEAP32[i88 >> 2] = 0;
        HEAP32[i88 + 24 >> 2] = 0;
        _copy_option_part(i89, HEAP32[i85 >> 2] | 0, 8192, 84434) | 0;
        HEAP32[i90 >> 2] = _get_file_in_dir(HEAP32[i23 >> 2] | 0, HEAP32[i85 >> 2] | 0) | 0;
        if (!(HEAP32[i90 >> 2] | 0)) {
         i11 = 159;
         break;
        }
        HEAP32[i91 >> 2] = 0;
        while (1) {
         if (HEAP32[(HEAP32[i22 >> 2] | 0) + 684 >> 2] | 0) i108 = 1; else i108 = (HEAP32[(HEAP32[i22 >> 2] | 0) + 784 >> 2] | 0) != 0;
         HEAP32[i33 >> 2] = _buf_modname(i108 & 1, HEAP32[i90 >> 2] | 0, HEAP32[i49 >> 2] | 0, 0) | 0;
         if (!(HEAP32[i33 >> 2] | 0)) {
          i11 = 164;
          break L199;
         }
         if ((_stat(HEAP32[i33 >> 2] | 0, i88) | 0) < 0) break;
         if ((HEAP32[i88 >> 2] | 0) != (HEAP32[i58 >> 2] | 0)) {
          i11 = 175;
          break;
         }
         if ((HEAP32[i88 + 72 >> 2] | 0) != (HEAP32[i58 + 72 >> 2] | 0)) {
          i11 = 175;
          break;
         }
         if (HEAP32[i33 >> 2] | 0) {
          _vim_free(HEAP32[i33 >> 2] | 0);
          HEAP32[i33 >> 2] = 0;
         }
         if (HEAP32[(HEAP32[i22 >> 2] | 0) + 784 >> 2] | 0) {
          i11 = 173;
          break;
         }
         if (HEAP32[(HEAP32[i22 >> 2] | 0) + 684 >> 2] | 0) {
          i11 = 173;
          break;
         }
         HEAP32[(HEAP32[i22 >> 2] | 0) + 784 >> 2] = 1;
         HEAP32[i91 >> 2] = 1;
        }
        do if ((i11 | 0) == 173) {
         i11 = 0;
         if (!(HEAP32[i91 >> 2] | 0)) break;
         HEAP32[(HEAP32[i22 >> 2] | 0) + 784 >> 2] = 0;
        } else if ((i11 | 0) == 175) {
         i11 = 0;
         if (HEAP32[26894] | 0) break;
         i74 = HEAP32[i33 >> 2] | 0;
         i75 = i74 + (_strlen(HEAP32[i33 >> 2] | 0) | 0) + -1 | 0;
         HEAP32[i86 >> 2] = i75 + (0 - (_strlen(HEAP32[i49 >> 2] | 0) | 0));
         if ((HEAP32[i86 >> 2] | 0) >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0) HEAP32[i86 >> 2] = HEAP32[i33 >> 2];
         HEAP8[HEAP32[i86 >> 2] >> 0] = 122;
         while (1) {
          if ((HEAPU8[HEAP32[i86 >> 2] >> 0] | 0) > 97) i109 = (_stat(HEAP32[i33 >> 2] | 0, i88) | 0) >= 0; else i109 = 0;
          i75 = HEAP32[i86 >> 2] | 0;
          i110 = HEAP8[i75 >> 0] | 0;
          if (!i109) break;
          HEAP8[i75 >> 0] = i110 + -1 << 24 >> 24;
         }
         if (!((i110 & 255 | 0) == 97 & (HEAP32[i33 >> 2] | 0) != 0)) break;
         _vim_free(HEAP32[i33 >> 2] | 0);
         HEAP32[i33 >> 2] = 0;
        } while (0);
        _vim_free(HEAP32[i90 >> 2] | 0);
        do if (HEAP32[i33 >> 2] | 0) {
         _unlink(HEAP32[i33 >> 2] | 0) | 0;
         HEAP32[i92 >> 2] = _umask(0) | 0;
         i75 = HEAP32[i33 >> 2] | 0;
         HEAP32[i17 >> 2] = HEAP32[i51 >> 2] & 511;
         HEAP32[i84 >> 2] = _open(i75, 131265, i17) | 0;
         _umask(HEAP32[i92 >> 2] | 0) | 0;
         if ((HEAP32[i84 >> 2] | 0) >= 0) {
          i11 = 189;
          break L199;
         }
         if (!(HEAP32[i33 >> 2] | 0)) break;
         _vim_free(HEAP32[i33 >> 2] | 0);
         HEAP32[i33 >> 2] = 0;
        } while (0);
       }
       if ((i11 | 0) == 159) {
        HEAP32[i87 >> 2] = 1;
        break;
       } else if ((i11 | 0) == 164) {
        _vim_free(HEAP32[i90 >> 2] | 0);
        HEAP32[i87 >> 2] = 1;
        break;
       } else if ((i11 | 0) == 189) {
        do if ((HEAP32[i88 + 24 >> 2] | 0) != (HEAP32[i58 + 24 >> 2] | 0)) {
         if (!(_fchown(HEAP32[i84 >> 2] | 0, -1, HEAP32[i58 + 24 >> 2] | 0) | 0)) break;
         _mch_setperm(HEAP32[i33 >> 2] | 0, HEAP32[i51 >> 2] & 455 | (HEAP32[i51 >> 2] & 7) << 3) | 0;
        } while (0);
        HEAP32[i68 >> 2] = HEAP32[i84 >> 2];
        HEAP32[i68 + 4 >> 2] = HEAP32[i85 >> 2];
        while (1) {
         i75 = _read_eintr(HEAP32[i32 >> 2] | 0, HEAP32[i85 >> 2] | 0, 8192) | 0;
         HEAP32[i68 + 8 >> 2] = i75;
         if ((i75 | 0) <= 0) break;
         if (!(_buf_write_bytes(i68) | 0)) {
          i11 = 195;
          break;
         }
         _ui_breakcheck();
         if (HEAP32[26834] | 0) {
          i11 = 197;
          break;
         }
        }
        if ((i11 | 0) == 195) HEAP32[i44 >> 2] = 54327; else if ((i11 | 0) == 197) HEAP32[i44 >> 2] = 92420;
        i75 = (_close(HEAP32[i84 >> 2] | 0) | 0) < 0;
        if (i75 & (HEAP32[i44 >> 2] | 0) == 0) HEAP32[i44 >> 2] = 54380;
        if ((HEAP32[i68 + 8 >> 2] | 0) < 0) HEAP32[i44 >> 2] = 54434;
        _set_file_time(HEAP32[i33 >> 2] | 0, HEAP32[i58 + 48 >> 2] | 0, HEAP32[i58 + 56 >> 2] | 0);
        _mch_set_acl(HEAP32[i33 >> 2] | 0, HEAP32[i69 >> 2] | 0);
        break;
       }
      } while (0);
      _close(HEAP32[i32 >> 2] | 0) | 0;
      _vim_free(HEAP32[i85 >> 2] | 0);
      if ((HEAP32[i33 >> 2] | 0) == 0 & (HEAP32[i44 >> 2] | 0) == 0) HEAP32[i44 >> 2] = 54487;
      if (((HEAP32[i87 >> 2] | 0) != 0 | (HEAP32[i44 >> 2] | 0) != 0) ^ 1 | (HEAP32[i29 >> 2] | 0) != 0) {
       HEAP32[i44 >> 2] = 0;
       break L148;
      } else {
       HEAP32[i52 >> 2] = 0;
       i11 = 428;
       break L122;
      }
     } while (0);
     do if (HEAP32[i61 >> 2] | 0) {
      if (!(_vim_strchr(HEAP32[26904] | 0, 87) | 0)) break;
      HEAP32[i46 >> 2] = 54275;
      HEAP32[i44 >> 2] = 55230;
      i11 = 428;
      break L122;
     } while (0);
     HEAP32[i93 >> 2] = HEAP32[26897];
     L274 : while (1) {
      if (!(HEAP8[HEAP32[i93 >> 2] >> 0] | 0)) break;
      _copy_option_part(i93, HEAP32[26882] | 0, 1025, 84434) | 0;
      HEAP32[i95 >> 2] = _get_file_in_dir(HEAP32[i23 >> 2] | 0, HEAP32[26882] | 0) | 0;
      if (!(HEAP32[i95 >> 2] | 0)) HEAP32[i33 >> 2] = 0; else {
       if (HEAP32[(HEAP32[i22 >> 2] | 0) + 684 >> 2] | 0) i111 = 1; else i111 = (HEAP32[(HEAP32[i22 >> 2] | 0) + 784 >> 2] | 0) != 0;
       HEAP32[i33 >> 2] = _buf_modname(i111 & 1, HEAP32[i95 >> 2] | 0, HEAP32[i49 >> 2] | 0, 0) | 0;
       _vim_free(HEAP32[i95 >> 2] | 0);
      }
      do if (!((HEAP32[i33 >> 2] | 0) == 0 | (HEAP32[26894] | 0) != 0)) {
       if ((_mch_getperm(HEAP32[i33 >> 2] | 0) | 0) < 0) break;
       i75 = HEAP32[i33 >> 2] | 0;
       i74 = i75 + (_strlen(HEAP32[i33 >> 2] | 0) | 0) + -1 | 0;
       HEAP32[i94 >> 2] = i74 + (0 - (_strlen(HEAP32[i49 >> 2] | 0) | 0));
       if ((HEAP32[i94 >> 2] | 0) >>> 0 < (HEAP32[i33 >> 2] | 0) >>> 0) HEAP32[i94 >> 2] = HEAP32[i33 >> 2];
       HEAP8[HEAP32[i94 >> 2] >> 0] = 122;
       while (1) {
        if ((HEAPU8[HEAP32[i94 >> 2] >> 0] | 0) > 97) i112 = (_mch_getperm(HEAP32[i33 >> 2] | 0) | 0) >= 0; else i112 = 0;
        i74 = HEAP32[i94 >> 2] | 0;
        i113 = HEAP8[i74 >> 0] | 0;
        if (!i112) break;
        HEAP8[i74 >> 0] = i113 + -1 << 24 >> 24;
       }
       if (!((i113 & 255 | 0) == 97 & (HEAP32[i33 >> 2] | 0) != 0)) break;
       _vim_free(HEAP32[i33 >> 2] | 0);
       HEAP32[i33 >> 2] = 0;
      } while (0);
      do if (HEAP32[i33 >> 2] | 0) {
       if (!(_vim_rename(HEAP32[i23 >> 2] | 0, HEAP32[i33 >> 2] | 0) | 0)) break L274;
       if (!(HEAP32[i33 >> 2] | 0)) break;
       _vim_free(HEAP32[i33 >> 2] | 0);
       HEAP32[i33 >> 2] = 0;
      } while (0);
     }
     if ((HEAP32[i33 >> 2] | 0) != 0 | (HEAP32[i29 >> 2] | 0) != 0) break;
     HEAP32[i44 >> 2] = 54539;
     i11 = 428;
     break L122;
    } while (0);
    do if ((HEAP32[i29 >> 2] | 0) != 0 & (HEAP32[i51 >> 2] | 0) >= 0) {
     if (HEAP32[i51 >> 2] & 128 | 0) break;
     i74 = HEAP32[i58 + 20 >> 2] | 0;
     if ((i74 | 0) != (_getuid() | 0)) break;
     if (_vim_strchr(HEAP32[26904] | 0, 87) | 0) break;
     HEAP32[i51 >> 2] = HEAP32[i51 >> 2] | 128;
     _mch_setperm(HEAP32[i23 >> 2] | 0, HEAP32[i51 >> 2] | 0) | 0;
     HEAP32[i62 >> 2] = 1;
    } while (0);
    do if ((HEAP32[i29 >> 2] | 0) != 0 & (HEAP32[i55 >> 2] | 0) != 0) {
     if (_vim_strchr(HEAP32[26904] | 0, 90) | 0) break;
     HEAP32[(HEAP32[i22 >> 2] | 0) + 676 >> 2] = 0;
     _status_redraw_all();
    } while (0);
    if ((HEAP32[i26 >> 2] | 0) > (HEAP32[HEAP32[i22 >> 2] >> 2] | 0)) HEAP32[i26 >> 2] = HEAP32[HEAP32[i22 >> 2] >> 2];
    if (HEAP32[(HEAP32[i22 >> 2] | 0) + 8 >> 2] & 1 | 0) HEAP32[i25 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
    do if ((((HEAP32[i30 >> 2] | 0) == 0 | (HEAP32[i53 >> 2] | 0) != 0) ^ 1) & (HEAP32[i55 >> 2] | 0) != 0) {
     if ((HEAP32[26778] | 0) != 0 & (HEAP32[i33 >> 2] | 0) != 0) {
      i11 = 254;
      break;
     }
     _ml_preserve(HEAP32[i22 >> 2] | 0, 0);
     if (!(HEAP32[26834] | 0)) {
      i11 = 254;
      break;
     }
     HEAP32[i44 >> 2] = 92420;
    } else i11 = 254; while (0);
    L327 : do if ((i11 | 0) == 254) {
     HEAP32[i37 >> 2] = HEAP32[i23 >> 2];
     HEAP32[i60 >> 2] = 1;
     L329 : while (1) {
      HEAP32[i60 >> 2] = 0;
      do if (HEAP32[i60 >> 2] | 0) {
       HEAP32[i32 >> 2] = -1;
       HEAP32[i68 >> 2] = HEAP32[i32 >> 2];
      } else {
       while (1) {
        i74 = HEAP32[i37 >> 2] | 0;
        if (HEAP32[i28 >> 2] | 0) i114 = HEAP32[i29 >> 2] | 0 ? 1088 : 1024; else i114 = 64;
        HEAP32[i16 >> 2] = (HEAP32[i51 >> 2] | 0) < 0 ? 438 : HEAP32[i51 >> 2] & 511;
        i75 = _open(i74, 1 | i114, i16) | 0;
        HEAP32[i32 >> 2] = i75;
        if ((i75 | 0) >= 0) break;
        if (HEAP32[i44 >> 2] | 0) break L327;
        if (!(HEAP32[i53 >> 2] | 0)) if ((HEAP32[i58 + 16 >> 2] | 0) >>> 0 > 1) {
         i11 = 267;
         break L329;
        }
        if (!(_lstat(HEAP32[i23 >> 2] | 0, i96) | 0)) {
         if ((HEAP32[i96 >> 2] | 0) != (HEAP32[i58 >> 2] | 0)) {
          i11 = 267;
          break L329;
         }
         if ((HEAP32[i96 + 72 >> 2] | 0) != (HEAP32[i58 + 72 >> 2] | 0)) {
          i11 = 267;
          break L329;
         }
        }
        HEAP32[i44 >> 2] = 54629;
        if (!(HEAP32[i29 >> 2] | 0)) break L327;
        i75 = (_vim_strchr(HEAP32[26904] | 0, 87) | 0) == 0;
        if (!(i75 & (HEAP32[i51 >> 2] | 0) >= 0)) break L327;
        if (!(HEAP32[i51 >> 2] & 128)) HEAP32[i62 >> 2] = 1;
        HEAP32[i51 >> 2] = HEAP32[i51 >> 2] | 128;
        i75 = HEAP32[i58 + 20 >> 2] | 0;
        if ((i75 | 0) != (_getuid() | 0)) i11 = 274; else {
         i75 = HEAP32[i58 + 24 >> 2] | 0;
         if ((i75 | 0) != (_getgid() | 0)) i11 = 274;
        }
        if ((i11 | 0) == 274) {
         i11 = 0;
         HEAP32[i51 >> 2] = HEAP32[i51 >> 2] & 511;
        }
        if (!(HEAP32[i28 >> 2] | 0)) _unlink(HEAP32[i37 >> 2] | 0) | 0;
       }
       HEAP32[i68 >> 2] = HEAP32[i32 >> 2];
       do if (HEAP32[i55 >> 2] | 0) {
        if (!((HEAP32[i35 >> 2] | 0) == 0 | (HEAP32[i34 >> 2] | 0) != 0)) break;
        if (!((HEAP32[i51 >> 2] | 0) >= 0 ? (HEAP32[i23 >> 2] | 0) == (HEAP32[i37 >> 2] | 0) : 0)) break;
        if (_fstat(HEAP32[i32 >> 2] | 0, i98) | 0) break;
        if ((HEAP32[i98 + 72 >> 2] | 0) != (HEAP32[i58 + 72 >> 2] | 0)) {
         i11 = 294;
         break L329;
        }
       } while (0);
       if (HEAP32[i28 >> 2] | 0) break;
       _ftruncate(HEAP32[i32 >> 2] | 0, 0) | 0;
      } while (0);
      HEAP32[i44 >> 2] = 0;
      HEAP32[i68 + 4 >> 2] = HEAP32[i47 >> 2];
      HEAP32[i43 >> 2] = 0;
      do if (HEAP32[i27 >> 2] | 0) {
       if (!(HEAP32[(HEAP32[i27 >> 2] | 0) + 76 >> 2] | 0)) {
        i11 = 300;
        break;
       }
       HEAP32[i67 >> 2] = (HEAP32[(HEAP32[i27 >> 2] | 0) + 76 >> 2] | 0) == 1 & 1;
      } else i11 = 300; while (0);
      if ((i11 | 0) == 300) {
       i11 = 0;
       HEAP32[i67 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 584 >> 2];
      }
      HEAP32[i68 + 8 >> 2] = HEAP32[i50 >> 2];
      HEAP32[i66 >> 2] = _get_fileformat_force(HEAP32[i22 >> 2] | 0, HEAP32[i27 >> 2] | 0) | 0;
      HEAP32[i38 >> 2] = HEAP32[i47 >> 2];
      HEAP32[i41 >> 2] = 0;
      HEAP32[i42 >> 2] = HEAP32[i25 >> 2];
      L376 : while (1) {
       if ((HEAP32[i42 >> 2] | 0) > (HEAP32[i26 >> 2] | 0)) break;
       HEAP32[i39 >> 2] = (_ml_get_buf(HEAP32[i22 >> 2] | 0, HEAP32[i42 >> 2] | 0, 0) | 0) + -1;
       while (1) {
        i75 = (HEAP32[i39 >> 2] | 0) + 1 | 0;
        HEAP32[i39 >> 2] = i75;
        i74 = HEAP8[i75 >> 0] | 0;
        HEAP8[i40 >> 0] = i74;
        if (!(i74 & 255)) break;
        do if ((HEAPU8[i40 >> 0] | 0) == 10) HEAP8[HEAP32[i38 >> 2] >> 0] = 0; else if ((HEAPU8[i40 >> 0] | 0) == 13 & (HEAP32[i66 >> 2] | 0) == 2) {
         HEAP8[HEAP32[i38 >> 2] >> 0] = 10;
         break;
        } else {
         HEAP8[HEAP32[i38 >> 2] >> 0] = HEAP8[i40 >> 0] | 0;
         break;
        } while (0);
        HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
        i74 = (HEAP32[i41 >> 2] | 0) + 1 | 0;
        HEAP32[i41 >> 2] = i74;
        if ((i74 | 0) != (HEAP32[i50 >> 2] | 0)) continue;
        if (!(_buf_write_bytes(i68) | 0)) {
         i11 = 313;
         break;
        }
        HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + (HEAP32[i50 >> 2] | 0);
        HEAP32[i38 >> 2] = HEAP32[i47 >> 2];
        HEAP32[i41 >> 2] = 0;
       }
       if ((i11 | 0) == 313) {
        i11 = 0;
        HEAP32[i26 >> 2] = 0;
       }
       if (!(HEAP32[i26 >> 2] | 0)) {
        i11 = 322;
        break;
       }
       do if ((HEAP32[i42 >> 2] | 0) == (HEAP32[i26 >> 2] | 0)) {
        if (!(HEAP32[i67 >> 2] | 0)) if (HEAP32[(HEAP32[i22 >> 2] | 0) + 604 >> 2] | 0) break;
        if ((HEAP32[i42 >> 2] | 0) == (HEAP32[(HEAP32[i22 >> 2] | 0) + 760 >> 2] | 0)) {
         i11 = 322;
         break L376;
        }
        if ((HEAP32[i42 >> 2] | 0) != (HEAP32[HEAP32[i22 >> 2] >> 2] | 0)) break;
        if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 600 >> 2] | 0)) {
         i11 = 322;
         break L376;
        }
       } while (0);
       i74 = (HEAP32[i66 >> 2] | 0) == 0;
       i75 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i75 + 1;
       do if (i74) HEAP8[i75 >> 0] = 10; else {
        HEAP8[i75 >> 0] = 13;
        if ((HEAP32[i66 >> 2] | 0) != 1) break;
        i73 = (HEAP32[i41 >> 2] | 0) + 1 | 0;
        HEAP32[i41 >> 2] = i73;
        if ((i73 | 0) == (HEAP32[i50 >> 2] | 0)) {
         if (!(_buf_write_bytes(i68) | 0)) {
          i11 = 328;
          break L376;
         }
         HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + (HEAP32[i50 >> 2] | 0);
         HEAP32[i38 >> 2] = HEAP32[i47 >> 2];
         HEAP32[i41 >> 2] = 0;
        }
        i73 = HEAP32[i38 >> 2] | 0;
        HEAP32[i38 >> 2] = i73 + 1;
        HEAP8[i73 >> 0] = 10;
       } while (0);
       i75 = (HEAP32[i41 >> 2] | 0) + 1 | 0;
       HEAP32[i41 >> 2] = i75;
       if (HEAP32[i26 >> 2] | 0 ? (i75 | 0) == (HEAP32[i50 >> 2] | 0) : 0) {
        if (!(_buf_write_bytes(i68) | 0)) {
         i11 = 333;
         break;
        }
        HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + (HEAP32[i50 >> 2] | 0);
        HEAP32[i38 >> 2] = HEAP32[i47 >> 2];
        HEAP32[i41 >> 2] = 0;
        _ui_breakcheck();
        if (HEAP32[26834] | 0) {
         i11 = 335;
         break;
        }
       }
       HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) + 1;
      }
      if ((i11 | 0) == 322) {
       i11 = 0;
       HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) + 1;
       HEAP32[i56 >> 2] = 1;
      } else if ((i11 | 0) == 328) {
       i11 = 0;
       HEAP32[i26 >> 2] = 0;
      } else if ((i11 | 0) == 333) {
       i11 = 0;
       HEAP32[i26 >> 2] = 0;
      } else if ((i11 | 0) == 335) {
       i11 = 0;
       HEAP32[i26 >> 2] = 0;
      }
      if ((HEAP32[i41 >> 2] | 0) > 0 & (HEAP32[i26 >> 2] | 0) > 0) {
       HEAP32[i68 + 8 >> 2] = HEAP32[i41 >> 2];
       if (!(_buf_write_bytes(i68) | 0)) HEAP32[i26 >> 2] = 0;
       HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + (HEAP32[i41 >> 2] | 0);
      }
      if ((HEAP32[i60 >> 2] | 0) == 0 | (HEAP32[i26 >> 2] | 0) == 0) {
       i11 = 343;
       break;
      }
      HEAP32[i60 >> 2] = 0;
     }
     if ((i11 | 0) == 267) {
      HEAP32[i44 >> 2] = 54588;
      break;
     } else if ((i11 | 0) == 294) {
      _close(HEAP32[i32 >> 2] | 0) | 0;
      HEAP32[i44 >> 2] = 54663;
      i11 = 428;
      break L122;
     } else if ((i11 | 0) == 343) {
      do if (!(HEAP32[i60 >> 2] | 0)) {
       do if (HEAP32[26920] | 0) {
        i75 = (_fsync(HEAP32[i32 >> 2] | 0) | 0) == 0;
        if (i75 | (HEAP32[i57 >> 2] | 0) != 0) break;
        HEAP32[i44 >> 2] = 92569;
        HEAP32[i26 >> 2] = 0;
       } while (0);
       do if ((HEAP32[i33 >> 2] | 0) == 0 | (HEAP32[i34 >> 2] | 0) != 0) {
        if (HEAP32[(HEAP32[i22 >> 2] | 0) + 80 >> 2] | 0) break;
        _buf_setino(HEAP32[i22 >> 2] | 0);
       } else {
        do if ((_stat(HEAP32[i37 >> 2] | 0, i99) | 0) < 0) i11 = 351; else {
         if ((HEAP32[i99 + 20 >> 2] | 0) != (HEAP32[i58 + 20 >> 2] | 0)) {
          i11 = 351;
          break;
         }
         if ((HEAP32[i99 + 24 >> 2] | 0) != (HEAP32[i58 + 24 >> 2] | 0)) i11 = 351;
        } while (0);
        do if ((i11 | 0) == 351) {
         _fchown(HEAP32[i32 >> 2] | 0, HEAP32[i58 + 20 >> 2] | 0, -1) | 0;
         i75 = (_fchown(HEAP32[i32 >> 2] | 0, -1, HEAP32[i58 + 24 >> 2] | 0) | 0) == -1;
         if (!(i75 & (HEAP32[i51 >> 2] | 0) > 0)) break;
         HEAP32[i51 >> 2] = HEAP32[i51 >> 2] & -57;
        } while (0);
        _buf_setino(HEAP32[i22 >> 2] | 0);
       } while (0);
       if (HEAP32[i62 >> 2] | 0) HEAP32[i51 >> 2] = HEAP32[i51 >> 2] & -129;
       if ((HEAP32[i51 >> 2] | 0) >= 0) _mch_fsetperm(HEAP32[i32 >> 2] | 0, HEAP32[i51 >> 2] | 0) | 0;
       if (_close(HEAP32[i32 >> 2] | 0) | 0) {
        HEAP32[i44 >> 2] = 54696;
        HEAP32[i26 >> 2] = 0;
       }
       if (HEAP32[i34 >> 2] | 0) break;
       _mch_set_acl(HEAP32[i37 >> 2] | 0, HEAP32[i69 >> 2] | 0);
      } while (0);
      if (!(HEAP32[i26 >> 2] | 0)) {
       do if (!(HEAP32[i44 >> 2] | 0)) if (HEAP32[26834] | 0) {
        HEAP32[i44 >> 2] = 92420;
        break;
       } else {
        HEAP32[i44 >> 2] = 54715;
        break;
       } while (0);
       if (!(HEAP32[i33 >> 2] | 0)) {
        i11 = 428;
        break L122;
       }
       if (!(HEAP32[i34 >> 2] | 0)) {
        if (_vim_rename(HEAP32[i33 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0) {
         i11 = 428;
         break L122;
        }
        HEAP32[i26 >> 2] = 1;
        i11 = 428;
        break L122;
       }
       if (HEAP32[26834] | 0) {
        _msg(92420) | 0;
        _out_flush();
       }
       i75 = HEAP32[i33 >> 2] | 0;
       HEAP32[i15 >> 2] = 0;
       i74 = _open(i75, 0, i15) | 0;
       HEAP32[i32 >> 2] = i74;
       if ((i74 | 0) < 0) {
        i11 = 428;
        break L122;
       }
       i74 = HEAP32[i23 >> 2] | 0;
       HEAP32[i14 >> 2] = HEAP32[i51 >> 2] & 511;
       i75 = _open(i74, 577, i14) | 0;
       HEAP32[i68 >> 2] = i75;
       do if ((i75 | 0) >= 0) {
        HEAP32[i68 + 4 >> 2] = i48;
        do {
         i74 = _read_eintr(HEAP32[i32 >> 2] | 0, i48, 256) | 0;
         HEAP32[i68 + 8 >> 2] = i74;
         if ((i74 | 0) <= 0) break;
        } while ((_buf_write_bytes(i68) | 0) != 0);
        if ((_close(HEAP32[i68 >> 2] | 0) | 0) < 0) break;
        if (HEAP32[i68 + 8 >> 2] | 0) break;
        HEAP32[i26 >> 2] = 1;
       } while (0);
       _close(HEAP32[i32 >> 2] | 0) | 0;
       i11 = 428;
       break L122;
      }
      HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) - (HEAP32[i25 >> 2] | 0);
      HEAP32[26720] = (HEAP32[26720] | 0) + -1;
      if (!(HEAP32[i31 >> 2] | 0)) {
       _msg_add_fname(HEAP32[i22 >> 2] | 0, HEAP32[i23 >> 2] | 0);
       HEAP8[i40 >> 0] = 0;
       do if (HEAP32[i57 >> 2] | 0) {
        _strcat(HEAP32[26882] | 0, 54753) | 0;
        HEAP8[i40 >> 0] = 1;
       } else {
        if (!(HEAP32[i53 >> 2] | 0)) break;
        i75 = HEAP32[26882] | 0;
        i74 = (_shortmess(110) | 0) != 0;
        _strcat(i75, i74 ? 54762 : 52086) | 0;
        HEAP8[i40 >> 0] = 1;
       } while (0);
       if (HEAP32[i56 >> 2] | 0) {
        _msg_add_eol();
        HEAP8[i40 >> 0] = 1;
       }
       if (_msg_add_fileformat(HEAP32[i66 >> 2] | 0) | 0) HEAP8[i40 >> 0] = 1;
       _msg_add_lines(HEAPU8[i40 >> 0] | 0, HEAP32[i42 >> 2] | 0, HEAP32[i43 >> 2] | 0);
       do if (!(_shortmess(87) | 0)) {
        i74 = (HEAP32[i28 >> 2] | 0) != 0;
        i75 = HEAP32[26882] | 0;
        i73 = (_shortmess(119) | 0) != 0;
        if (i74) {
         _strcat(i75, i73 ? 54768 : 54773) | 0;
         break;
        } else {
         _strcat(i75, i73 ? 54783 : 54788) | 0;
         break;
        }
       } while (0);
       _set_keep_msg(_msg_trunc_attr(HEAP32[26882] | 0, 0, 0) | 0, 0);
      }
      do if (!((HEAP32[i30 >> 2] | 0) != 0 & (HEAP32[i63 >> 2] | 0) != 0 ^ 1 | (HEAP32[i28 >> 2] | 0) != 0)) {
       if (!(HEAP32[i55 >> 2] | 0)) if (!(_vim_strchr(HEAP32[26904] | 0, 43) | 0)) break;
       _unchanged(HEAP32[i22 >> 2] | 0, 1);
       if (((HEAP32[(HEAP32[i22 >> 2] | 0) + 144 >> 2] | 0) + 1 | 0) == (HEAP32[(HEAP32[i22 >> 2] | 0) + 112 + 8 >> 2] | 0)) {
        i73 = HEAP32[i22 >> 2] | 0;
        HEAP32[i73 + 144 >> 2] = HEAP32[i73 + 112 + 8 >> 2];
       }
       _u_unchanged(HEAP32[i22 >> 2] | 0);
       _u_update_save_nr(HEAP32[i22 >> 2] | 0);
      } while (0);
      do if (HEAP32[i55 >> 2] | 0) {
       _ml_timestamp(HEAP32[i22 >> 2] | 0);
       i73 = (HEAP32[i22 >> 2] | 0) + 60 | 0;
       i75 = HEAP32[i73 >> 2] | 0;
       if (HEAP32[i28 >> 2] | 0) {
        HEAP32[i73 >> 2] = i75 & -17;
        break;
       } else {
        HEAP32[i73 >> 2] = i75 & -89;
        break;
       }
      } while (0);
      do if ((HEAPU8[HEAP32[26963] >> 0] | 0) != 0 & (HEAP32[i35 >> 2] | 0) != 0) {
       if (HEAP32[(HEAP32[i22 >> 2] | 0) + 684 >> 2] | 0) i115 = 1; else i115 = (HEAP32[(HEAP32[i22 >> 2] | 0) + 784 >> 2] | 0) != 0;
       HEAP32[i100 >> 2] = _buf_modname(i115 & 1, HEAP32[i23 >> 2] | 0, HEAP32[26963] | 0, 0) | 0;
       i75 = (HEAP32[i100 >> 2] | 0) == 0;
       L530 : do if (HEAP32[i33 >> 2] | 0) {
        if (i75) {
         _emsg(54797) | 0;
         break;
        }
        if ((_stat(HEAP32[i100 >> 2] | 0, i101) | 0) >= 0) break;
        _vim_rename(HEAP32[i33 >> 2] | 0, HEAP32[i100 >> 2] | 0) | 0;
        if (HEAP32[i33 >> 2] | 0) {
         _vim_free(HEAP32[i33 >> 2] | 0);
         HEAP32[i33 >> 2] = 0;
        }
        _set_file_time(HEAP32[i100 >> 2] | 0, HEAP32[i58 + 48 >> 2] | 0, HEAP32[i58 + 56 >> 2] | 0);
       } else {
        do if (!i75) {
         i73 = HEAP32[i100 >> 2] | 0;
         HEAP32[i13 >> 2] = (HEAP32[i51 >> 2] | 0) < 0 ? 438 : HEAP32[i51 >> 2] & 511;
         i74 = _open(i73, 131264, i13) | 0;
         HEAP32[i102 >> 2] = i74;
         if ((i74 | 0) < 0) break;
         _close(HEAP32[i102 >> 2] | 0) | 0;
         break L530;
        } while (0);
        _emsg(54839) | 0;
       } while (0);
       if (!(HEAP32[i100 >> 2] | 0)) break;
       i75 = HEAP32[i100 >> 2] | 0;
       _mch_setperm(i75, (_mch_getperm(HEAP32[i23 >> 2] | 0) | 0) & 511) | 0;
       _vim_free(HEAP32[i100 >> 2] | 0);
      } while (0);
      if (!((HEAP32[26894] | 0) == 0 & (HEAP32[i33 >> 2] | 0) != 0)) break L122;
      if (!(_unlink(HEAP32[i33 >> 2] | 0) | 0)) break L122;
      _emsg(54888) | 0;
      break L122;
     }
    } while (0);
    do if (HEAP32[i33 >> 2] | 0) {
     if ((HEAP32[i37 >> 2] | 0) != (HEAP32[i23 >> 2] | 0)) break;
     if (!(HEAP32[i34 >> 2] | 0)) {
      _vim_rename(HEAP32[i33 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0;
      break;
     }
     if ((_stat(HEAP32[i23 >> 2] | 0, i97) | 0) < 0) _vim_rename(HEAP32[i33 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0;
     if ((_stat(HEAP32[i23 >> 2] | 0, i97) | 0) < 0) break;
     _unlink(HEAP32[i33 >> 2] | 0) | 0;
    } while (0);
    if (HEAP32[i53 >> 2] | 0) {
     i11 = 428;
     break;
    }
    if ((_stat(HEAP32[i23 >> 2] | 0, i97) | 0) >= 0) {
     i11 = 428;
     break;
    }
    HEAP32[i26 >> 2] = 0;
    i11 = 428;
   } while (0);
   if ((i11 | 0) == 428) HEAP32[26720] = (HEAP32[26720] | 0) + -1;
   HEAP32[(HEAP32[i22 >> 2] | 0) + 148 >> 2] = 0;
   _vim_free(HEAP32[i33 >> 2] | 0);
   if ((HEAP32[i47 >> 2] | 0) != (i48 | 0)) _vim_free(HEAP32[i47 >> 2] | 0);
   _mch_free_acl(HEAP32[i69 >> 2] | 0);
   do if (HEAP32[i44 >> 2] | 0) {
    if (HEAP32[i46 >> 2] | 0) i116 = _strlen(HEAP32[i46 >> 2] | 0) | 0; else i116 = 0;
    HEAP32[i103 >> 2] = i116;
    HEAP32[i65 >> 2] = HEAP32[27052];
    _msg_add_fname(HEAP32[i22 >> 2] | 0, HEAP32[i23 >> 2] | 0);
    i69 = _strlen(HEAP32[26882] | 0) | 0;
    i47 = i69 + (_strlen(HEAP32[i44 >> 2] | 0) | 0) | 0;
    if ((i47 + (HEAP32[i103 >> 2] | 0) | 0) >>> 0 >= 1025) {
     i47 = HEAP32[26882] | 0;
     i69 = 1025 - (_strlen(HEAP32[i44 >> 2] | 0) | 0) | 0;
     HEAP8[i47 + (i69 - (HEAP32[i103 >> 2] | 0) - 1) >> 0] = 0;
    }
    if (HEAP32[i46 >> 2] | 0) {
     i69 = HEAP32[26882] | 0;
     i47 = i69 + (HEAP32[i103 >> 2] | 0) | 0;
     i48 = i69 | 0;
     _memmove(i47 | 0, i48 | 0, (_strlen(HEAP32[26882] | 0) | 0) + 1 | 0) | 0;
     _memmove(HEAP32[26882] | 0, HEAP32[i46 >> 2] | 0, HEAP32[i103 >> 2] | 0) | 0;
    }
    _strcat(HEAP32[26882] | 0, HEAP32[i44 >> 2] | 0) | 0;
    _emsg(HEAP32[26882] | 0) | 0;
    if (HEAP32[i45 >> 2] | 0) _vim_free(HEAP32[i44 >> 2] | 0);
    HEAP32[i52 >> 2] = 0;
    if (HEAP32[i26 >> 2] | 0) break;
    _msg_puts_attr(54919, HEAP32[i65 >> 2] | 4096);
    _msg_puts_attr(54967, HEAP32[i65 >> 2] | 4096);
    if ((_stat(HEAP32[i23 >> 2] | 0, i58) | 0) < 0) break;
    _buf_store_time(HEAP32[i22 >> 2] | 0, i58, HEAP32[i23 >> 2] | 0);
    i48 = HEAP32[i22 >> 2] | 0;
    HEAP32[i48 + 176 >> 2] = HEAP32[i48 + 172 >> 2];
   } while (0);
   HEAP32[26710] = HEAP32[i54 >> 2];
   if (!(HEAP32[26834] | 0)) {
    HEAP32[(HEAP32[26773] | 0) + 760 >> 2] = 0;
    _aucmd_prepbuf(i104, HEAP32[i22 >> 2] | 0);
    do if (HEAP32[i28 >> 2] | 0) {
     i58 = HEAP32[i23 >> 2] | 0;
     _apply_autocmds_exarg(36, i58 | 0, i58 | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
    } else {
     if (HEAP32[i31 >> 2] | 0) {
      _apply_autocmds_exarg(50, 0, HEAP32[i23 >> 2] | 0, 0, HEAP32[26773] | 0, HEAP32[i27 >> 2] | 0) | 0;
      break;
     }
     i58 = HEAP32[i23 >> 2] | 0;
     i65 = i58 | 0;
     i26 = i58 | 0;
     i58 = HEAP32[26773] | 0;
     i44 = HEAP32[i27 >> 2] | 0;
     if ((HEAP32[i30 >> 2] | 0) != 0 & (HEAP32[i63 >> 2] | 0) != 0) {
      _apply_autocmds_exarg(17, i65, i26, 0, i58, i44) | 0;
      break;
     } else {
      _apply_autocmds_exarg(46, i65, i26, 0, i58, i44) | 0;
      break;
     }
    } while (0);
    _aucmd_restbuf(i104);
   }
   HEAP32[26834] = HEAP32[26834] | HEAP32[i59 >> 2];
   HEAP32[i21 >> 2] = HEAP32[i52 >> 2];
   i106 = HEAP32[i21 >> 2] | 0;
   STACKTOP = i12;
   return i106 | 0;
  }
  HEAP32[26720] = (HEAP32[26720] | 0) + -1;
  HEAP32[26710] = HEAP32[i54 >> 2];
  if (HEAP32[i77 >> 2] | 0) _emsg(54058) | 0;
  if (HEAP32[i77 >> 2] | 0) {
   HEAP32[i21 >> 2] = 0;
   i106 = HEAP32[i21 >> 2] | 0;
   STACKTOP = i12;
   return i106 | 0;
  }
  if (!(HEAP32[i76 >> 2] | 0)) {
   _emsg(54108) | 0;
   HEAP32[i21 >> 2] = 0;
   i106 = HEAP32[i21 >> 2] | 0;
   STACKTOP = i12;
   return i106 | 0;
  }
  if (!(HEAP32[i22 >> 2] | 0)) {
   HEAP32[i21 >> 2] = 1;
   i106 = HEAP32[i21 >> 2] | 0;
   STACKTOP = i12;
   return i106 | 0;
  }
  do if (HEAP32[i55 >> 2] | 0) {
   _ml_timestamp(HEAP32[i22 >> 2] | 0);
   i76 = (HEAP32[i22 >> 2] | 0) + 60 | 0;
   i77 = HEAP32[i76 >> 2] | 0;
   if (HEAP32[i28 >> 2] | 0) {
    HEAP32[i76 >> 2] = i77 & -17;
    break;
   } else {
    HEAP32[i76 >> 2] = i77 & -89;
    break;
   }
  } while (0);
  do if (HEAP32[i30 >> 2] | 0) {
   if (HEAP32[i28 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[i22 >> 2] | 0) + 108 >> 2] | 0) == 0) break;
   if (!(HEAP32[i55 >> 2] | 0)) if (!(_vim_strchr(HEAP32[26904] | 0, 43) | 0)) break;
   HEAP32[i21 >> 2] = 0;
   i106 = HEAP32[i21 >> 2] | 0;
   STACKTOP = i12;
   return i106 | 0;
  } while (0);
  HEAP32[i21 >> 2] = 1;
  i106 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i12;
  return i106 | 0;
 }
 HEAP32[i21 >> 2] = 0;
 i106 = HEAP32[i21 >> 2] | 0;
 STACKTOP = i12;
 return i106 | 0;
}

function _nfa_regatom() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 84 | 0;
 i4 = i2 + 80 | 0;
 i5 = i2 + 76 | 0;
 i6 = i2 + 72 | 0;
 i7 = i2 + 68 | 0;
 i8 = i2 + 64 | 0;
 i9 = i2 + 60 | 0;
 i10 = i2 + 56 | 0;
 i11 = i2 + 52 | 0;
 i12 = i2 + 48 | 0;
 i13 = i2 + 44 | 0;
 i14 = i2 + 40 | 0;
 i15 = i2 + 36 | 0;
 i16 = i2 + 32 | 0;
 i17 = i2 + 28 | 0;
 i18 = i2 + 24 | 0;
 i19 = i2 + 20 | 0;
 i20 = i2 + 16 | 0;
 i21 = i2 + 12 | 0;
 i22 = i2 + 8 | 0;
 i23 = i2 + 4 | 0;
 i24 = i2;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i15 >> 2] = -1;
 HEAP32[i16 >> 2] = -1;
 HEAP32[i17 >> 2] = -1;
 HEAP32[i18 >> 2] = HEAP32[26395];
 HEAP32[i4 >> 2] = _getchr() | 0;
 L1 : do switch (HEAP32[i4 >> 2] | 0) {
 case 0:
  {
   _emsg(73495) | 0;
   HEAP32[26719] = 1;
   HEAP32[i3 >> 2] = 0;
   i25 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i25 | 0;
  }
 case -162:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i26 = HEAP32[26382] | 0;
   HEAP32[26382] = i26 + 4;
   HEAP32[i26 >> 2] = -1008;
   i1 = 410;
   break;
  }
 case -220:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i26 = HEAP32[26382] | 0;
   HEAP32[26382] = i26 + 4;
   HEAP32[i26 >> 2] = -1007;
   i1 = 410;
   break;
  }
 case -196:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i26 = HEAP32[26382] | 0;
   HEAP32[26382] = i26 + 4;
   HEAP32[i26 >> 2] = -1006;
   i1 = 410;
   break;
  }
 case -194:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i26 = HEAP32[26382] | 0;
   HEAP32[26382] = i26 + 4;
   HEAP32[i26 >> 2] = -1005;
   i1 = 410;
   break;
  }
 case -161:
  {
   HEAP32[i4 >> 2] = _no_Magic(_getchr() | 0) | 0;
   if (!(HEAP32[i4 >> 2] | 0)) {
    _emsg(73495) | 0;
    HEAP32[26719] = 1;
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   if ((HEAP32[i4 >> 2] | 0) == 94) {
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
    i26 = HEAP32[26382] | 0;
    HEAP32[26382] = i26 + 4;
    HEAP32[i26 >> 2] = -1008;
    i1 = 410;
    break L1;
   }
   if ((HEAP32[i4 >> 2] | 0) != 36) {
    HEAP32[i11 >> 2] = 31;
    if ((HEAP32[i4 >> 2] | 0) == 91) {
     i1 = 196;
     break L1;
    } else {
     i1 = 32;
     break L1;
    }
   }
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i26 = HEAP32[26382] | 0;
   HEAP32[26382] = i26 + 4;
   HEAP32[i26 >> 2] = -1007;
   i1 = 410;
   break;
  }
 case -171:
 case -139:
 case -180:
 case -148:
 case -191:
 case -159:
 case -184:
 case -152:
 case -169:
 case -137:
 case -177:
 case -145:
 case -168:
 case -136:
 case -188:
 case -156:
 case -173:
 case -141:
 case -176:
 case -144:
 case -186:
 case -154:
 case -181:
 case -149:
 case -183:
 case -151:
 case -210:
  {
   i1 = 32;
   break;
  }
 case -146:
  {
   i26 = (HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0;
   if (HEAP32[26401] | 0) {
    if (i26) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
    i27 = HEAP32[26382] | 0;
    HEAP32[26382] = i27 + 4;
    HEAP32[i27 >> 2] = 10;
    i1 = 410;
    break L1;
   } else {
    if (i26) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
    i26 = HEAP32[26382] | 0;
    HEAP32[26382] = i26 + 4;
    HEAP32[i26 >> 2] = -1002;
    HEAP32[26386] = HEAP32[26386] | 4;
    i1 = 410;
    break L1;
   }
   break;
  }
 case -216:
  {
   if (!(_nfa_reg(1) | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   } else i1 = 410;
   break;
  }
 case -215:
 case -218:
 case -132:
  {
   _emsgn(73586, _no_Magic(HEAP32[i4 >> 2] | 0) | 0) | 0;
   HEAP32[i3 >> 2] = 0;
   i25 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i25 | 0;
  }
 case -133:
 case -214:
 case -192:
 case -213:
 case -193:
 case -195:
  {
   _emsgn(73586, _no_Magic(HEAP32[i4 >> 2] | 0) | 0) | 0;
   HEAP32[i3 >> 2] = 0;
   i25 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i25 | 0;
  }
 case -130:
  {
   if (!(HEAP32[26310] | 0)) {
    _emsg(93083) | 0;
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   HEAP32[i19 >> 2] = HEAP32[26310];
   while (1) {
    i28 = (HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0;
    if (!(HEAPU8[HEAP32[i19 >> 2] >> 0] | 0)) {
     i1 = 73;
     break;
    }
    if (i28) if (!(_realloc_post_list() | 0)) {
     i1 = 66;
     break;
    }
    i26 = HEAPU8[HEAP32[i19 >> 2] >> 0] | 0;
    i27 = HEAP32[26382] | 0;
    HEAP32[26382] = i27 + 4;
    HEAP32[i27 >> 2] = i26;
    if ((HEAP32[i19 >> 2] | 0) != (HEAP32[26310] | 0)) {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      i1 = 70;
      break;
     }
     i26 = HEAP32[26382] | 0;
     HEAP32[26382] = i26 + 4;
     HEAP32[i26 >> 2] = -1014;
    }
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
   if ((i1 | 0) == 66) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   } else if ((i1 | 0) == 70) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   } else if ((i1 | 0) == 73) {
    if (i28) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
    i26 = HEAP32[26382] | 0;
    HEAP32[26382] = i26 + 4;
    HEAP32[i26 >> 2] = -999;
    i1 = 410;
    break L1;
   }
   break;
  }
 case -199:
 case -200:
 case -201:
 case -202:
 case -203:
 case -204:
 case -205:
 case -206:
 case -207:
  {
   HEAP32[i20 >> 2] = (_no_Magic(HEAP32[i4 >> 2] | 0) | 0) - 49;
   if (!(_seen_endbrace((HEAP32[i20 >> 2] | 0) + 1 | 0) | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i26 = (HEAP32[i20 >> 2] | 0) + -976 | 0;
   i27 = HEAP32[26382] | 0;
   HEAP32[26382] = i27 + 4;
   HEAP32[i27 >> 2] = i26;
   HEAP32[26328] = 1;
   i1 = 410;
   break;
  }
 case -134:
  {
   HEAP32[i4 >> 2] = _no_Magic(_getchr() | 0) | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 115:
    {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i26 = HEAP32[26382] | 0;
     HEAP32[26382] = i26 + 4;
     HEAP32[i26 >> 2] = -1001;
     if (_re_mult_next(73618) | 0) {
      i1 = 410;
      break L1;
     }
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
   case 101:
    {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i26 = HEAP32[26382] | 0;
     HEAP32[26382] = i26 + 4;
     HEAP32[i26 >> 2] = -1e3;
     HEAP32[26327] = 1;
     if (_re_mult_next(73622) | 0) {
      i1 = 410;
      break L1;
     }
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
   default:
    {
     _emsgn(73626, _no_Magic(HEAP32[i4 >> 2] | 0) | 0) | 0;
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
   }
   break;
  }
 case -219:
  {
   HEAP32[i4 >> 2] = _no_Magic(_getchr() | 0) | 0;
   switch (HEAP32[i4 >> 2] | 0) {
   case 40:
    {
     if (!(_nfa_reg(3) | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i26 = HEAP32[26382] | 0;
     HEAP32[26382] = i26 + 4;
     HEAP32[i26 >> 2] = -999;
     i1 = 410;
     break L1;
     break;
    }
   case 85:
   case 117:
   case 120:
   case 111:
   case 100:
    {
     switch (HEAP32[i4 >> 2] | 0) {
     case 100:
      {
       HEAP32[i21 >> 2] = _getdecchrs() | 0;
       break;
      }
     case 111:
      {
       HEAP32[i21 >> 2] = _getoctchrs() | 0;
       break;
      }
     case 120:
      {
       HEAP32[i21 >> 2] = _gethexchrs(2) | 0;
       break;
      }
     case 117:
      {
       HEAP32[i21 >> 2] = _gethexchrs(4) | 0;
       break;
      }
     case 85:
      {
       HEAP32[i21 >> 2] = _gethexchrs(8) | 0;
       break;
      }
     default:
      HEAP32[i21 >> 2] = -1;
     }
     if ((HEAP32[i21 >> 2] | 0) < 0) {
      _emsg2(73662, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
      HEAP32[26719] = 1;
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i26 = HEAP32[i21 >> 2] | 0;
     i27 = (i26 | 0) == 0 ? 10 : i26 | 0;
     i26 = HEAP32[26382] | 0;
     HEAP32[26382] = i26 + 4;
     HEAP32[i26 >> 2] = i27;
     i1 = 410;
     break L1;
     break;
    }
   case 94:
    {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i27 = HEAP32[26382] | 0;
     HEAP32[26382] = i27 + 4;
     HEAP32[i27 >> 2] = -1004;
     i1 = 410;
     break L1;
     break;
    }
   case 36:
    {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i27 = HEAP32[26382] | 0;
     HEAP32[26382] = i27 + 4;
     HEAP32[i27 >> 2] = -1003;
     i1 = 410;
     break L1;
     break;
    }
   case 35:
    {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i27 = HEAP32[26382] | 0;
     HEAP32[26382] = i27 + 4;
     HEAP32[i27 >> 2] = -884;
     i1 = 410;
     break L1;
     break;
    }
   case 86:
    {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i27 = HEAP32[26382] | 0;
     HEAP32[26382] = i27 + 4;
     HEAP32[i27 >> 2] = -871;
     i1 = 410;
     break L1;
     break;
    }
   case 67:
    {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i27 = HEAP32[26382] | 0;
     HEAP32[26382] = i27 + 4;
     HEAP32[i27 >> 2] = -983;
     i1 = 410;
     break L1;
     break;
    }
   case 91:
    {
     HEAP32[i22 >> 2] = 0;
     while (1) {
      i27 = _peekchr() | 0;
      HEAP32[i4 >> 2] = i27;
      if ((i27 | 0) == 93) {
       i1 = 142;
       break;
      }
      if (!(HEAP32[i4 >> 2] | 0)) {
       i1 = 138;
       break;
      }
      if (!(_nfa_regatom() | 0)) {
       i1 = 140;
       break;
      }
      HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
     }
     if ((i1 | 0) == 138) {
      _emsg2(73704, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
      HEAP32[26719] = 1;
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     } else if ((i1 | 0) == 140) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     } else if ((i1 | 0) == 142) {
      _getchr() | 0;
      if (!(HEAP32[i22 >> 2] | 0)) {
       _emsg2(73731, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
       HEAP32[26719] = 1;
       HEAP32[i3 >> 2] = 0;
       i25 = HEAP32[i3 >> 2] | 0;
       STACKTOP = i2;
       return i25 | 0;
      }
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       HEAP32[i3 >> 2] = 0;
       i25 = HEAP32[i3 >> 2] | 0;
       STACKTOP = i2;
       return i25 | 0;
      }
      i27 = HEAP32[26382] | 0;
      HEAP32[26382] = i27 + 4;
      HEAP32[i27 >> 2] = -982;
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       HEAP32[i3 >> 2] = 0;
       i25 = HEAP32[i3 >> 2] | 0;
       STACKTOP = i2;
       return i25 | 0;
      }
      i27 = HEAP32[i22 >> 2] | 0;
      i26 = HEAP32[26382] | 0;
      HEAP32[26382] = i26 + 4;
      HEAP32[i26 >> 2] = i27;
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       HEAP32[i3 >> 2] = 0;
       i25 = HEAP32[i3 >> 2] | 0;
       STACKTOP = i2;
       return i25 | 0;
      }
      i27 = HEAP32[26382] | 0;
      HEAP32[26382] = i27 + 4;
      HEAP32[i27 >> 2] = -999;
      i1 = 410;
      break L1;
     }
     break;
    }
   default:
    {
     HEAP32[i23 >> 2] = 0;
     HEAP32[i24 >> 2] = HEAP32[i4 >> 2];
     if ((HEAP32[i4 >> 2] | 0) == 60 | (HEAP32[i4 >> 2] | 0) == 62) HEAP32[i4 >> 2] = _getchr() | 0;
     while (1) {
      if (((HEAP32[i4 >> 2] | 0) - 48 | 0) >>> 0 >= 10) break;
      HEAP32[i23 >> 2] = ((HEAP32[i23 >> 2] | 0) * 10 | 0) + ((HEAP32[i4 >> 2] | 0) - 48);
      HEAP32[i4 >> 2] = _getchr() | 0;
     }
     i27 = HEAP32[i4 >> 2] | 0;
     if (!((HEAP32[i4 >> 2] | 0) == 108 | (HEAP32[i4 >> 2] | 0) == 99 | (HEAP32[i4 >> 2] | 0) == 118)) {
      if (!((i27 | 0) == 39 & (HEAP32[i23 >> 2] | 0) == 0)) {
       _emsgn(73749, _no_Magic(HEAP32[i4 >> 2] | 0) | 0) | 0;
       HEAP32[i3 >> 2] = 0;
       i25 = HEAP32[i3 >> 2] | 0;
       STACKTOP = i2;
       return i25 | 0;
      }
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       HEAP32[i3 >> 2] = 0;
       i25 = HEAP32[i3 >> 2] | 0;
       STACKTOP = i2;
       return i25 | 0;
      }
      if ((HEAP32[i24 >> 2] | 0) == 60) i29 = -872; else i29 = (HEAP32[i24 >> 2] | 0) == 62 ? -873 : -874;
      i26 = HEAP32[26382] | 0;
      HEAP32[26382] = i26 + 4;
      HEAP32[i26 >> 2] = i29;
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       HEAP32[i3 >> 2] = 0;
       i25 = HEAP32[i3 >> 2] | 0;
       STACKTOP = i2;
       return i25 | 0;
      }
      i26 = _getchr() | 0;
      i30 = HEAP32[26382] | 0;
      HEAP32[26382] = i30 + 4;
      HEAP32[i30 >> 2] = i26;
      i1 = 410;
      break L1;
     }
     do if ((i27 | 0) == 108) {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       HEAP32[i3 >> 2] = 0;
       i25 = HEAP32[i3 >> 2] | 0;
       STACKTOP = i2;
       return i25 | 0;
      }
      if ((HEAP32[i24 >> 2] | 0) == 60) i31 = -881; else i31 = (HEAP32[i24 >> 2] | 0) == 62 ? -882 : -883;
      i26 = HEAP32[26382] | 0;
      HEAP32[26382] = i26 + 4;
      HEAP32[i26 >> 2] = i31;
      if (HEAP32[i18 >> 2] | 0) HEAP32[26394] = 1;
     } else {
      i26 = (HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0;
      if ((HEAP32[i4 >> 2] | 0) == 99) {
       if (i26) if (!(_realloc_post_list() | 0)) {
        HEAP32[i3 >> 2] = 0;
        i25 = HEAP32[i3 >> 2] | 0;
        STACKTOP = i2;
        return i25 | 0;
       }
       if ((HEAP32[i24 >> 2] | 0) == 60) i32 = -878; else i32 = (HEAP32[i24 >> 2] | 0) == 62 ? -879 : -880;
       i30 = HEAP32[26382] | 0;
       HEAP32[26382] = i30 + 4;
       HEAP32[i30 >> 2] = i32;
       break;
      } else {
       if (i26) if (!(_realloc_post_list() | 0)) {
        HEAP32[i3 >> 2] = 0;
        i25 = HEAP32[i3 >> 2] | 0;
        STACKTOP = i2;
        return i25 | 0;
       }
       if ((HEAP32[i24 >> 2] | 0) == 60) i33 = -875; else i33 = (HEAP32[i24 >> 2] | 0) == 62 ? -876 : -877;
       i26 = HEAP32[26382] | 0;
       HEAP32[26382] = i26 + 4;
       HEAP32[i26 >> 2] = i33;
       break;
      }
     } while (0);
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i27 = HEAP32[i23 >> 2] | 0;
     i26 = HEAP32[26382] | 0;
     HEAP32[26382] = i26 + 4;
     HEAP32[i26 >> 2] = i27;
     i1 = 410;
     break L1;
    }
   }
   break;
  }
 case -165:
  {
   i1 = 196;
   break;
  }
 default:
  {}
 } while (0);
 do if ((i1 | 0) == 32) {
  HEAP32[i9 >> 2] = _vim_strchr(73964, _no_Magic(HEAP32[i4 >> 2] | 0) | 0) | 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   i23 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i11 >> 2] | 0) == 31) {
    _emsgn(72702, i23) | 0;
    HEAP32[26719] = 1;
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   } else {
    _iemsgn(73542, i23);
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  }
  if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
   HEAP32[i3 >> 2] = 0;
   i25 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i25 | 0;
  }
  i23 = HEAP32[29828 + ((HEAP32[i9 >> 2] | 0) - 73964 << 2) >> 2] | 0;
  i33 = HEAP32[26382] | 0;
  HEAP32[26382] = i33 + 4;
  HEAP32[i33 >> 2] = i23;
  if ((HEAP32[i11 >> 2] | 0) == 31) {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i23 = HEAP32[26382] | 0;
   HEAP32[26382] = i23 + 4;
   HEAP32[i23 >> 2] = -1002;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i23 = HEAP32[26382] | 0;
   HEAP32[26382] = i23 + 4;
   HEAP32[i23 >> 2] = -1013;
   HEAP32[26386] = HEAP32[26386] | 4;
   i1 = 410;
  } else i1 = 410;
 } else if ((i1 | 0) == 196) {
  HEAP32[i9 >> 2] = HEAP32[26392];
  HEAP32[i10 >> 2] = _skip_anyof(HEAP32[i9 >> 2] | 0) | 0;
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) != 93) {
   if (!(HEAP32[26402] | 0)) break;
   _emsg(73874) | 0;
   HEAP32[26719] = 1;
   HEAP32[i3 >> 2] = 0;
   i25 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i25 | 0;
  }
  HEAP32[i14 >> 2] = _nfa_recognize_char_class(HEAP32[26392] | 0, HEAP32[i10 >> 2] | 0, (HEAP32[i11 >> 2] | 0) == 31 & 1) | 0;
  if (HEAP32[i14 >> 2] | 0) {
   i23 = (HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0;
   if ((HEAP32[i14 >> 2] | 0) >= -915 & (HEAP32[i14 >> 2] | 0) <= -885) {
    if (i23) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
    i33 = (HEAP32[i14 >> 2] | 0) - 31 | 0;
    i24 = HEAP32[26382] | 0;
    HEAP32[26382] = i24 + 4;
    HEAP32[i24 >> 2] = i33;
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
    i33 = HEAP32[26382] | 0;
    HEAP32[26382] = i33 + 4;
    HEAP32[i33 >> 2] = -1002;
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
    i33 = HEAP32[26382] | 0;
    HEAP32[26382] = i33 + 4;
    HEAP32[i33 >> 2] = -1013;
   } else {
    if (i23) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i25 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i25 | 0;
    }
    i23 = HEAP32[i14 >> 2] | 0;
    i33 = HEAP32[26382] | 0;
    HEAP32[26382] = i33 + 4;
    HEAP32[i33 >> 2] = i23;
   }
   HEAP32[26392] = HEAP32[i10 >> 2];
   HEAP32[26392] = (HEAP32[26392] | 0) + 1;
   HEAP32[i3 >> 2] = 1;
   i25 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i25 | 0;
  }
  HEAP32[i17 >> 2] = -1;
  HEAP32[i16 >> 2] = -1;
  HEAP32[i15 >> 2] = -1;
  HEAP32[i13 >> 2] = 0;
  if ((HEAPU8[HEAP32[26392] >> 0] | 0) == 94) {
   HEAP32[i13 >> 2] = 1;
   HEAP32[26392] = (HEAP32[26392] | 0) + 1;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i23 = HEAP32[26382] | 0;
   HEAP32[26382] = i23 + 4;
   HEAP32[i23 >> 2] = -1019;
  } else {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i23 = HEAP32[26382] | 0;
   HEAP32[26382] = i23 + 4;
   HEAP32[i23 >> 2] = -1021;
  }
  if ((HEAPU8[HEAP32[26392] >> 0] | 0) == 45) {
   HEAP32[i15 >> 2] = 45;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i23 = HEAP32[i15 >> 2] | 0;
   i33 = HEAP32[26382] | 0;
   HEAP32[26382] = i33 + 4;
   HEAP32[i33 >> 2] = i23;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
   i23 = HEAP32[26382] | 0;
   HEAP32[26382] = i23 + 4;
   HEAP32[i23 >> 2] = -1014;
   HEAP32[26392] = (HEAP32[26392] | 0) + 1;
  }
  HEAP32[i12 >> 2] = 0;
  L346 : while (1) {
   if ((HEAP32[26392] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) {
    i1 = 378;
    break;
   }
   HEAP32[i17 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i15 >> 2] = -1;
   HEAP32[i8 >> 2] = 0;
   do if ((HEAPU8[HEAP32[26392] >> 0] | 0) == 91) {
    HEAP32[i7 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = _get_char_class(105568) | 0;
    if ((HEAP32[i5 >> 2] | 0) == 99) {
     HEAP32[i6 >> 2] = _get_equi_class(105568) | 0;
     if (!(HEAP32[i6 >> 2] | 0)) HEAP32[i7 >> 2] = _get_coll_element(105568) | 0;
    }
    if ((HEAP32[i5 >> 2] | 0) == 99) if (HEAP32[i6 >> 2] | 0) {
     HEAP32[i14 >> 2] = _nfa_emit_equi_class(HEAP32[i6 >> 2] | 0) | 0;
     if (!(HEAP32[i14 >> 2] | 0)) {
      i1 = 309;
      break L346;
     }
     continue L346;
    } else {
     if (!(HEAP32[i7 >> 2] | 0)) break;
     HEAP32[i15 >> 2] = HEAP32[i7 >> 2];
     break;
    }
    do switch (HEAP32[i5 >> 2] | 0) {
    case 0:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 241;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -870;
      break;
     }
    case 1:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 245;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -869;
      break;
     }
    case 2:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 249;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -868;
      break;
     }
    case 3:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 253;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -867;
      break;
     }
    case 4:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 257;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -866;
      break;
     }
    case 5:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 261;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -865;
      break;
     }
    case 6:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 265;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -864;
      break;
     }
    case 7:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 269;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -863;
      break;
     }
    case 8:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 273;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -862;
      break;
     }
    case 9:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 277;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -861;
      break;
     }
    case 10:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 281;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -860;
      break;
     }
    case 11:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 285;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -859;
      break;
     }
    case 12:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 289;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -858;
      break;
     }
    case 13:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 293;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -857;
      break;
     }
    case 14:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 297;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -856;
      break;
     }
    case 15:
     {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 301;
       break L346;
      }
      i23 = HEAP32[26382] | 0;
      HEAP32[26382] = i23 + 4;
      HEAP32[i23 >> 2] = -855;
      break;
     }
    default:
     {}
    } while (0);
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     i1 = 305;
     break L346;
    }
    i23 = HEAP32[26382] | 0;
    HEAP32[26382] = i23 + 4;
    HEAP32[i23 >> 2] = -1014;
    continue L346;
   } while (0);
   if ((HEAP32[i17 >> 2] | 0) != -1 ? (HEAPU8[HEAP32[26392] >> 0] | 0) == 45 : 0) {
    HEAP32[i12 >> 2] = 1;
    HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
    HEAP32[26392] = (HEAP32[26392] | 0) + 1;
    continue;
   }
   do if (!(HEAP32[26308] | 0 ? 1 : (HEAPU8[HEAP32[26392] >> 0] | 0) != 92)) if (((HEAP32[26392] | 0) + 1 | 0) >>> 0 <= (HEAP32[i10 >> 2] | 0) >>> 0) {
    if (!(_vim_strchr(72545, HEAPU8[(HEAP32[26392] | 0) + 1 >> 0] | 0) | 0)) {
     if (HEAP32[26309] | 0) break;
     if (!(_vim_strchr(72551, HEAPU8[(HEAP32[26392] | 0) + 1 >> 0] | 0) | 0)) break;
    }
    HEAP32[26392] = (HEAP32[26392] | 0) + 1;
    if ((HEAPU8[HEAP32[26392] >> 0] | 0) == 110) {
     HEAP32[i15 >> 2] = HEAP32[26401] | 0 ? 10 : -1002;
     break;
    }
    if ((HEAPU8[HEAP32[26392] >> 0] | 0) != 100) if ((HEAPU8[HEAP32[26392] >> 0] | 0) != 111) if ((HEAPU8[HEAP32[26392] >> 0] | 0) != 120) if ((HEAPU8[HEAP32[26392] >> 0] | 0) != 117) if ((HEAPU8[HEAP32[26392] >> 0] | 0) != 85) {
     HEAP32[i15 >> 2] = _backslash_trans(HEAPU8[HEAP32[26392] >> 0] | 0) | 0;
     break;
    }
    HEAP32[i15 >> 2] = _coll_get_char() | 0;
    HEAP32[i8 >> 2] = 1;
    HEAP32[26392] = (HEAP32[26392] | 0) + -1;
   } while (0);
   if ((HEAP32[i15 >> 2] | 0) == -1) HEAP32[i15 >> 2] = HEAPU8[HEAP32[26392] >> 0];
   i23 = HEAP32[i15 >> 2] | 0;
   do if (HEAP32[i12 >> 2] | 0) {
    HEAP32[i16 >> 2] = i23;
    HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
    if ((HEAP32[i15 >> 2] | 0) > (HEAP32[i16 >> 2] | 0)) {
     i1 = 333;
     break L346;
    }
    i33 = HEAP32[i15 >> 2] | 0;
    L460 : do if ((HEAP32[i16 >> 2] | 0) > ((HEAP32[i15 >> 2] | 0) + 2 | 0)) {
     i24 = HEAP32[26382] | 0;
     if (!i33) {
      if (i24 >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 338;
       break L346;
      }
      i32 = HEAP32[26382] | 0;
      HEAP32[26382] = i32 + 4;
      HEAP32[i32 >> 2] = 1;
     } else HEAP32[26382] = i24 + -4;
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      i1 = 343;
      break L346;
     }
     i24 = HEAP32[i16 >> 2] | 0;
     i32 = HEAP32[26382] | 0;
     HEAP32[26382] = i32 + 4;
     HEAP32[i32 >> 2] = i24;
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      i1 = 346;
      break L346;
     }
     i24 = HEAP32[26382] | 0;
     HEAP32[26382] = i24 + 4;
     HEAP32[i24 >> 2] = -1017;
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      i1 = 349;
      break L346;
     }
     i24 = HEAP32[26382] | 0;
     HEAP32[26382] = i24 + 4;
     HEAP32[i24 >> 2] = -1014;
    } else {
     HEAP32[i4 >> 2] = i33 + 1;
     while (1) {
      if ((HEAP32[i4 >> 2] | 0) > (HEAP32[i16 >> 2] | 0)) break L460;
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 355;
       break L346;
      }
      i24 = HEAP32[i4 >> 2] | 0;
      i32 = HEAP32[26382] | 0;
      HEAP32[26382] = i32 + 4;
      HEAP32[i32 >> 2] = i24;
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 358;
       break L346;
      }
      i24 = HEAP32[26382] | 0;
      HEAP32[26382] = i24 + 4;
      HEAP32[i24 >> 2] = -1014;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
     }
    } while (0);
    HEAP32[i12 >> 2] = 0;
    HEAP32[i15 >> 2] = -1;
   } else {
    if ((i23 | 0) == -1002) {
     if (HEAP32[i13 >> 2] | 0) break;
     HEAP32[i11 >> 2] = 31;
     break;
    }
    i33 = (HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0;
    if ((HEAP32[i8 >> 2] | 0) == 1 & (HEAP32[i15 >> 2] | 0) == 0) {
     if (i33) if (!(_realloc_post_list() | 0)) {
      i1 = 367;
      break L346;
     }
     i24 = HEAP32[26382] | 0;
     HEAP32[26382] = i24 + 4;
     HEAP32[i24 >> 2] = 10;
    } else {
     if (i33) if (!(_realloc_post_list() | 0)) {
      i1 = 371;
      break L346;
     }
     i33 = HEAP32[i15 >> 2] | 0;
     i24 = HEAP32[26382] | 0;
     HEAP32[26382] = i24 + 4;
     HEAP32[i24 >> 2] = i33;
    }
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     i1 = 375;
     break L346;
    }
    i33 = HEAP32[26382] | 0;
    HEAP32[26382] = i33 + 4;
    HEAP32[i33 >> 2] = -1014;
   } while (0);
   HEAP32[26392] = (HEAP32[26392] | 0) + 1;
  }
  switch (i1 | 0) {
  case 241:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 245:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 249:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 253:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 257:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 261:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 265:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 269:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 273:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 277:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 281:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 285:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 289:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 293:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 297:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 301:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 305:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 309:
   {
    _emsg(73786) | 0;
    HEAP32[26719] = 1;
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 333:
   {
    _emsg(73835) | 0;
    HEAP32[26719] = 1;
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 338:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 343:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 346:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 349:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 355:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 358:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 367:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 371:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 375:
   {
    HEAP32[i3 >> 2] = 0;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  case 378:
   {
    HEAP32[26392] = (HEAP32[26392] | 0) + -1;
    if ((HEAPU8[HEAP32[26392] >> 0] | 0) == 45) {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i23 = HEAP32[26382] | 0;
     HEAP32[26382] = i23 + 4;
     HEAP32[i23 >> 2] = 45;
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i23 = HEAP32[26382] | 0;
     HEAP32[26382] = i23 + 4;
     HEAP32[i23 >> 2] = -1014;
    }
    HEAP32[26392] = HEAP32[i10 >> 2];
    HEAP32[26392] = (HEAP32[26392] | 0) + 1;
    i23 = (HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0;
    if ((HEAP32[i13 >> 2] | 0) == 1) {
     if (i23) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i33 = HEAP32[26382] | 0;
     HEAP32[26382] = i33 + 4;
     HEAP32[i33 >> 2] = -1018;
    } else {
     if (i23) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i23 = HEAP32[26382] | 0;
     HEAP32[26382] = i23 + 4;
     HEAP32[i23 >> 2] = -1020;
    }
    if ((HEAP32[i11 >> 2] | 0) == 31) {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i23 = HEAP32[26401] | 0 ? 10 : -1002;
     i33 = HEAP32[26382] | 0;
     HEAP32[26382] = i33 + 4;
     HEAP32[i33 >> 2] = i23;
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i25 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i25 | 0;
     }
     i23 = HEAP32[26382] | 0;
     HEAP32[26382] = i23 + 4;
     HEAP32[i23 >> 2] = -1013;
    }
    HEAP32[i3 >> 2] = 1;
    i25 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i25 | 0;
   }
  }
 } while (0);
 if ((i1 | 0) == 410) {
  HEAP32[i3 >> 2] = 1;
  i25 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i25 | 0;
 }
 HEAP32[i4 >> 2] = _no_Magic(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
  HEAP32[i3 >> 2] = 0;
  i25 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i25 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 i4 = HEAP32[26382] | 0;
 HEAP32[26382] = i4 + 4;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = 1;
 i25 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i25 | 0;
}

function _nfa_regmatch(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 i7 = i6 + 564 | 0;
 i8 = i6 + 560 | 0;
 i9 = i6 + 556 | 0;
 i10 = i6 + 552 | 0;
 i11 = i6 + 548 | 0;
 i12 = i6 + 544 | 0;
 i13 = i6 + 540 | 0;
 i14 = i6 + 536 | 0;
 i15 = i6 + 532 | 0;
 i16 = i6 + 528 | 0;
 i17 = i6 + 488 | 0;
 i18 = i6 + 484 | 0;
 i19 = i6 + 480 | 0;
 i20 = i6 + 476 | 0;
 i21 = i6 + 472 | 0;
 i22 = i6 + 468 | 0;
 i23 = i6 + 464 | 0;
 i24 = i6 + 460 | 0;
 i25 = i6 + 456 | 0;
 i26 = i6 + 452 | 0;
 i27 = i6 + 448 | 0;
 i28 = i6 + 444 | 0;
 i29 = i6 + 440 | 0;
 i30 = i6 + 260 | 0;
 i31 = i6 + 256 | 0;
 i32 = i6 + 252 | 0;
 i33 = i6 + 248 | 0;
 i34 = i6 + 244 | 0;
 i35 = i6 + 240 | 0;
 i36 = i6 + 236 | 0;
 i37 = i6 + 232 | 0;
 i38 = i6 + 228 | 0;
 i39 = i6 + 224 | 0;
 i40 = i6 + 220 | 0;
 i41 = i6 + 216 | 0;
 i42 = i6 + 212 | 0;
 i43 = i6 + 208 | 0;
 i44 = i6 + 204 | 0;
 i45 = i6 + 200 | 0;
 i46 = i6 + 196 | 0;
 i47 = i6 + 192 | 0;
 i48 = i6 + 12 | 0;
 i49 = i6 + 8 | 0;
 i50 = i6 + 4 | 0;
 i51 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i26 >> 2] = (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == -966 & 1;
 _fast_breakcheck();
 if (HEAP32[26834] | 0) {
  HEAP32[i7 >> 2] = 0;
  i52 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i52 | 0;
 }
 HEAP32[26335] = 0;
 HEAP32[i13 >> 2] = ((HEAP32[26333] | 0) + 1 | 0) * 352;
 HEAP32[i17 >> 2] = _lalloc(HEAP32[i13 >> 2] | 0, 1) | 0;
 HEAP32[i17 + 8 >> 2] = (HEAP32[26333] | 0) + 1;
 HEAP32[i17 + 20 >> 2] = _lalloc(HEAP32[i13 >> 2] | 0, 1) | 0;
 HEAP32[i17 + 20 + 8 >> 2] = (HEAP32[26333] | 0) + 1;
 L5 : do if (HEAP32[i17 >> 2] | 0) if (HEAP32[i17 + 20 >> 2] | 0) {
  HEAP32[i19 >> 2] = i17;
  HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[i19 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[i20 >> 2] = i17 + 20;
  HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[i20 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[(HEAP32[i19 >> 2] | 0) + 12 >> 2] = (HEAP32[26330] | 0) + 1;
  if (HEAP32[i26 >> 2] | 0) {
   if (!(HEAP32[26312] | 0)) {
    HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] = HEAP32[26326];
    HEAP32[(HEAP32[i11 >> 2] | 0) + 4 + 8 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0);
   } else HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] = HEAP32[26334];
   HEAP32[HEAP32[i11 >> 2] >> 2] = 1;
   _addstate(HEAP32[i19 >> 2] | 0, HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0, 0) | 0;
  } else _addstate(HEAP32[i19 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0, 0) | 0;
  L16 : while (1) {
   HEAP32[i27 >> 2] = HEAPU8[HEAP32[26334] >> 0];
   HEAP32[i28 >> 2] = 1;
   if (!(HEAP32[i27 >> 2] | 0)) {
    HEAP32[i28 >> 2] = 0;
    HEAP32[i15 >> 2] = 0;
   }
   HEAP32[i19 >> 2] = i17 + ((HEAP32[i14 >> 2] | 0) * 20 | 0);
   i13 = HEAP32[i14 >> 2] ^ 1;
   HEAP32[i14 >> 2] = i13;
   HEAP32[i20 >> 2] = i17 + (i13 * 20 | 0);
   HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] = 0;
   HEAP32[(HEAP32[i20 >> 2] | 0) + 16 >> 2] = 0;
   HEAP32[26330] = (HEAP32[26330] | 0) + 1;
   if ((HEAP32[26330] | 0) >= 1e5 ? (HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) == 0 : 0) {
    i5 = 15;
    break;
   }
   HEAP32[(HEAP32[i19 >> 2] | 0) + 12 >> 2] = HEAP32[26330];
   HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] = (HEAP32[26330] | 0) + 1;
   if (!(HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] | 0)) break L5;
   HEAP32[i18 >> 2] = 0;
   L23 : while (1) {
    if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2] | 0)) {
     i5 = 303;
     break;
    }
    _fast_breakcheck();
    if (HEAP32[26834] | 0) {
     i5 = 303;
     break;
    }
    HEAP32[i16 >> 2] = (HEAP32[HEAP32[i19 >> 2] >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) * 352 | 0);
    HEAP32[i22 >> 2] = 0;
    HEAP32[i23 >> 2] = 0;
    HEAP32[i24 >> 2] = 0;
    L27 : do switch (HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) {
    case -1023:
     {
      i5 = 21;
      break L23;
      break;
     }
    case -986:
    case -987:
    case -988:
     {
      if (!(HEAP32[26336] | 0)) {
       i5 = 28;
       break L23;
      }
      if (HEAP32[26312] | 0) if ((HEAP32[26334] | 0) != (HEAP32[HEAP32[26336] >> 2] | 0)) break L27; else {
       i5 = 28;
       break L23;
      }
      if ((HEAP32[26326] | 0) == (HEAP32[HEAP32[26336] >> 2] | 0)) if (((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) == (HEAP32[(HEAP32[26336] | 0) + 4 >> 2] | 0)) {
       i5 = 28;
       break L23;
      }
      break;
     }
    case -990:
    case -991:
    case -992:
    case -993:
    case -994:
    case -995:
    case -996:
    case -997:
     {
      if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) != -996) if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) != -994) if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) != -992) if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) != -990) {
       HEAP32[i30 + 4 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
       HEAP32[i30 >> 2] = 1;
       HEAP32[i30 + 8 >> 2] = 0;
       i13 = HEAP32[26334] | 0;
       if (!(HEAP32[26312] | 0)) {
        HEAP32[i30 + 172 + 4 >> 2] = i13 - (HEAP32[26325] | 0);
        HEAP32[i30 + 172 >> 2] = HEAP32[26326];
       } else HEAP32[i30 + 172 >> 2] = i13;
       _addstate_here(HEAP32[i19 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0, i30, i18);
       break L27;
      }
      HEAP32[i29 >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
      _copy_sub_off(HEAP32[i11 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0);
      HEAP32[i12 >> 2] = _recursive_regmatch(HEAP32[HEAP32[i16 >> 2] >> 2] | 0, 0, HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, i21) | 0;
      i53 = HEAP32[i12 >> 2] | 0;
      if ((HEAP32[i12 >> 2] | 0) == -1) {
       i5 = 38;
       break L16;
      }
      if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) == -995) i54 = 1; else if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) == -994) i54 = 1; else if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) == -991) i54 = 1; else i54 = (HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) == -990;
      if ((i53 | 0) != (i54 & 1 | 0)) {
       _copy_sub_off((HEAP32[i16 >> 2] | 0) + 188 | 0, HEAP32[i11 >> 2] | 0);
       _copy_ze_off((HEAP32[i16 >> 2] | 0) + 188 | 0, HEAP32[i11 >> 2] | 0);
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2];
      }
      HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i29 >> 2];
      break;
     }
    case -989:
     {
      HEAP32[i31 >> 2] = 0;
      do if (_state_in_list(HEAP32[i20 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0) | 0) HEAP32[i31 >> 2] = HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2]; else {
       if (_state_in_list(HEAP32[i20 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0) | 0) {
        HEAP32[i31 >> 2] = HEAP32[(HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2];
        break;
       }
       if (_state_in_list(HEAP32[i19 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0) | 0) HEAP32[i31 >> 2] = HEAP32[(HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2];
      } while (0);
      if (!(HEAP32[i31 >> 2] | 0)) {
       _copy_sub_off(HEAP32[i11 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0);
       HEAP32[i12 >> 2] = _recursive_regmatch(HEAP32[HEAP32[i16 >> 2] >> 2] | 0, 0, HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, i21) | 0;
       i55 = HEAP32[i12 >> 2] | 0;
       if ((HEAP32[i12 >> 2] | 0) == -1) {
        i5 = 58;
        break L16;
       }
       if (i55 | 0) {
        _copy_sub_off((HEAP32[i16 >> 2] | 0) + 188 | 0, HEAP32[i11 >> 2] | 0);
        i13 = (HEAP32[i11 >> 2] | 0) + 4 | 0;
        if (!(HEAP32[26312] | 0)) HEAP32[i32 >> 2] = (HEAP32[i13 + 12 >> 2] | 0) - ((HEAP32[26334] | 0) - (HEAP32[26325] | 0)); else HEAP32[i32 >> 2] = (HEAP32[i13 + 4 >> 2] | 0) - (HEAP32[26334] | 0);
        if (!(HEAP32[i32 >> 2] | 0)) {
         HEAP32[i23 >> 2] = 1;
         HEAP32[i22 >> 2] = HEAP32[(HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2];
         break L27;
        }
        i13 = HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0;
        if ((HEAP32[i32 >> 2] | 0) <= (HEAP32[i28 >> 2] | 0)) {
         HEAP32[i22 >> 2] = HEAP32[i13 + 4 >> 2];
         HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
         break L27;
        } else {
         HEAP32[i22 >> 2] = i13;
         HEAP32[i25 >> 2] = HEAP32[i32 >> 2];
         HEAP32[i24 >> 2] = (HEAP32[i32 >> 2] | 0) - (HEAP32[i28 >> 2] | 0);
         break L27;
        }
       }
      }
      break;
     }
    case -1008:
     {
      if ((HEAP32[26334] | 0) == (HEAP32[26325] | 0)) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -1007:
     {
      if (!(HEAP32[i27 >> 2] | 0)) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -1006:
     {
      HEAP32[i12 >> 2] = 1;
      do if (!(HEAP32[i27 >> 2] | 0)) HEAP32[i12 >> 2] = 0; else {
       if (_vim_iswordc_buf(HEAP32[i27 >> 2] | 0, HEAP32[26319] | 0) | 0) {
        if ((HEAP32[26334] | 0) >>> 0 <= (HEAP32[26325] | 0) >>> 0) break;
        if (!(_vim_iswordc_buf(HEAPU8[(HEAP32[26334] | 0) + -1 >> 0] | 0, HEAP32[26319] | 0) | 0)) break;
       }
       HEAP32[i12 >> 2] = 0;
      } while (0);
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -1005:
     {
      HEAP32[i12 >> 2] = 1;
      do if ((HEAP32[26334] | 0) == (HEAP32[26325] | 0)) HEAP32[i12 >> 2] = 0; else {
       if (_vim_iswordc_buf(HEAPU8[(HEAP32[26334] | 0) + -1 >> 0] | 0, HEAP32[26319] | 0) | 0) {
        if (!(HEAPU8[HEAP32[26334] >> 0] | 0)) break;
        if (!(_vim_iswordc_buf(HEAP32[i27 >> 2] | 0, HEAP32[26319] | 0) | 0)) break;
       }
       HEAP32[i12 >> 2] = 0;
      } while (0);
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -1004:
     {
      if (!(HEAP32[26326] | 0)) if ((HEAP32[26334] | 0) == (HEAP32[26325] | 0)) if ((HEAP32[26312] | 0) != 0 | (HEAP32[26320] | 0) == 1) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -1003:
     {
      if ((HEAP32[i27 >> 2] | 0) == 0 ? (HEAP32[26326] | 0) == (HEAP32[26321] | 0) : 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -1002:
     {
      if ((((HEAP32[i27 >> 2] | 0) != 0 | (HEAP32[26322] | 0) != 0) ^ 1) & (HEAP32[26312] | 0) == 0) if ((HEAP32[26326] | 0) <= (HEAP32[26321] | 0)) {
       HEAP32[i15 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = -1;
       break L27;
      }
      if ((HEAP32[i27 >> 2] | 0) == 10 & (HEAP32[26322] | 0) != 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = 1;
      }
      break;
     }
    case -1019:
    case -1021:
     {
      if (HEAP32[i27 >> 2] | 0) {
       HEAP32[i33 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i34 >> 2] = (HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) == -1021 & 1;
       L120 : while (1) {
        if ((HEAP32[HEAP32[i33 >> 2] >> 2] | 0) == -1020) {
         i5 = 102;
         break;
        }
        i13 = HEAP32[i33 >> 2] | 0;
        do if ((HEAP32[HEAP32[i33 >> 2] >> 2] | 0) == -1016) {
         HEAP32[i35 >> 2] = HEAP32[i13 + 24 >> 2];
         HEAP32[i33 >> 2] = HEAP32[(HEAP32[i33 >> 2] | 0) + 4 >> 2];
         HEAP32[i36 >> 2] = HEAP32[(HEAP32[i33 >> 2] | 0) + 24 >> 2];
         if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[i35 >> 2] | 0)) if ((HEAP32[i27 >> 2] | 0) <= (HEAP32[i36 >> 2] | 0)) {
          i5 = 106;
          break L120;
         }
         if (HEAP32[26323] | 0) {
          HEAP32[i37 >> 2] = _tolower(HEAP32[i27 >> 2] | 0) | 0;
          HEAP32[i38 >> 2] = 0;
          while (1) {
           if ((HEAP32[i35 >> 2] | 0) > (HEAP32[i36 >> 2] | 0)) break;
           i4 = _tolower(HEAP32[i35 >> 2] | 0) | 0;
           if ((i4 | 0) == (HEAP32[i37 >> 2] | 0)) {
            i5 = 111;
            break;
           }
           HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + 1;
          }
          if ((i5 | 0) == 111) {
           i5 = 0;
           HEAP32[i12 >> 2] = HEAP32[i34 >> 2];
           HEAP32[i38 >> 2] = 1;
          }
          if (HEAP32[i38 >> 2] | 0) break L120;
         }
        } else {
         if ((HEAP32[i13 >> 2] | 0) < 0) if (_check_char_class(HEAP32[HEAP32[i33 >> 2] >> 2] | 0, HEAP32[i27 >> 2] | 0) | 0) {
          i5 = 119;
          break L120;
         } else break;
         if ((HEAP32[i27 >> 2] | 0) == (HEAP32[HEAP32[i33 >> 2] >> 2] | 0)) {
          i5 = 119;
          break L120;
         }
         if (!(HEAP32[26323] | 0)) break;
         i4 = _tolower(HEAP32[i27 >> 2] | 0) | 0;
         if ((i4 | 0) == (_tolower(HEAP32[HEAP32[i33 >> 2] >> 2] | 0) | 0)) {
          i5 = 119;
          break L120;
         }
        } while (0);
        HEAP32[i33 >> 2] = HEAP32[(HEAP32[i33 >> 2] | 0) + 4 >> 2];
       }
       if ((i5 | 0) == 102) {
        i5 = 0;
        HEAP32[i12 >> 2] = ((HEAP32[i34 >> 2] | 0) != 0 ^ 1) & 1;
       } else if ((i5 | 0) == 106) {
        i5 = 0;
        HEAP32[i12 >> 2] = HEAP32[i34 >> 2];
       } else if ((i5 | 0) == 119) {
        i5 = 0;
        HEAP32[i12 >> 2] = HEAP32[i34 >> 2];
       }
       if (HEAP32[i12 >> 2] | 0) {
        HEAP32[i22 >> 2] = HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2];
        HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
       }
      }
      break;
     }
    case -946:
     {
      if ((HEAP32[i27 >> 2] | 0) > 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -983:
     {
      HEAP32[i23 >> 2] = 1;
      HEAP32[i25 >> 2] = 0;
      HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      break;
     }
    case -945:
     {
      HEAP32[i12 >> 2] = _vim_isIDc(HEAP32[i27 >> 2] | 0) | 0;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -944:
     {
      if (((HEAP32[i27 >> 2] | 0) - 48 | 0) >>> 0 < 10) i56 = 0; else i56 = (_vim_isIDc(HEAP32[i27 >> 2] | 0) | 0) != 0;
      HEAP32[i12 >> 2] = i56 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -943:
     {
      HEAP32[i12 >> 2] = _vim_iswordp_buf(HEAP32[26334] | 0, HEAP32[26319] | 0) | 0;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -942:
     {
      if (((HEAP32[i27 >> 2] | 0) - 48 | 0) >>> 0 < 10) i57 = 0; else i57 = (_vim_iswordp_buf(HEAP32[26334] | 0, HEAP32[26319] | 0) | 0) != 0;
      HEAP32[i12 >> 2] = i57 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -941:
     {
      HEAP32[i12 >> 2] = _vim_isfilec(HEAP32[i27 >> 2] | 0) | 0;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -940:
     {
      if (((HEAP32[i27 >> 2] | 0) - 48 | 0) >>> 0 < 10) i58 = 0; else i58 = (_vim_isfilec(HEAP32[i27 >> 2] | 0) | 0) != 0;
      HEAP32[i12 >> 2] = i58 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -939:
     {
      HEAP32[i12 >> 2] = _vim_isprintc(HEAPU8[HEAP32[26334] >> 0] | 0) | 0;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -938:
     {
      if (((HEAP32[i27 >> 2] | 0) - 48 | 0) >>> 0 < 10) i59 = 0; else i59 = (_vim_isprintc(HEAPU8[HEAP32[26334] >> 0] | 0) | 0) != 0;
      HEAP32[i12 >> 2] = i59 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -937:
     {
      i13 = HEAP32[i27 >> 2] | 0;
      HEAP32[i12 >> 2] = ((i13 | 0) == 32 ? 1 : (i13 | 0) == 9) & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -936:
     {
      if (HEAP32[i27 >> 2] | 0) {
       i13 = HEAP32[i27 >> 2] | 0;
       i60 = ((i13 | 0) == 32 ? 1 : (i13 | 0) == 9) ^ 1;
      } else i60 = 0;
      HEAP32[i12 >> 2] = i60 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -935:
     {
      HEAP32[i12 >> 2] = HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -934:
     {
      if (HEAP32[i27 >> 2] | 0) i61 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 1 | 0) != 0 ^ 1; else i61 = 0;
      HEAP32[i12 >> 2] = i61 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -933:
     {
      HEAP32[i12 >> 2] = HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 2;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -932:
     {
      if (HEAP32[i27 >> 2] | 0) i62 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 2 | 0) != 0 ^ 1; else i62 = 0;
      HEAP32[i12 >> 2] = i62 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -931:
     {
      HEAP32[i12 >> 2] = HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 4;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -930:
     {
      if (HEAP32[i27 >> 2] | 0) i63 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 4 | 0) != 0 ^ 1; else i63 = 0;
      HEAP32[i12 >> 2] = i63 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -929:
     {
      HEAP32[i12 >> 2] = HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 8;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -928:
     {
      if (HEAP32[i27 >> 2] | 0) i64 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 8 | 0) != 0 ^ 1; else i64 = 0;
      HEAP32[i12 >> 2] = i64 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -927:
     {
      HEAP32[i12 >> 2] = HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 16;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -926:
     {
      if (HEAP32[i27 >> 2] | 0) i65 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 16 | 0) != 0 ^ 1; else i65 = 0;
      HEAP32[i12 >> 2] = i65 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -925:
     {
      HEAP32[i12 >> 2] = HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 32;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -924:
     {
      if (HEAP32[i27 >> 2] | 0) i66 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 32 | 0) != 0 ^ 1; else i66 = 0;
      HEAP32[i12 >> 2] = i66 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -923:
     {
      HEAP32[i12 >> 2] = HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 64;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -922:
     {
      if (HEAP32[i27 >> 2] | 0) i67 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 64 | 0) != 0 ^ 1; else i67 = 0;
      HEAP32[i12 >> 2] = i67 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -921:
     {
      HEAP32[i12 >> 2] = HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 128;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -920:
     {
      if (HEAP32[i27 >> 2] | 0) i68 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 128 | 0) != 0 ^ 1; else i68 = 0;
      HEAP32[i12 >> 2] = i68 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -919:
     {
      if (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 64 | 0) i69 = 1; else if (HEAP32[26323] | 0) i69 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 128 | 0) != 0; else i69 = 0;
      HEAP32[i12 >> 2] = i69 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -918:
     {
      if (HEAP32[i27 >> 2] | 0) {
       if (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 64 | 0) i70 = 1; else if (HEAP32[26323] | 0) i70 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 128 | 0) != 0; else i70 = 0;
       i71 = i70 ^ 1;
      } else i71 = 0;
      HEAP32[i12 >> 2] = i71 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -917:
     {
      if (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 128 | 0) i72 = 1; else if (HEAP32[26323] | 0) i72 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 64 | 0) != 0; else i72 = 0;
      HEAP32[i12 >> 2] = i72 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -916:
     {
      if (HEAP32[i27 >> 2] | 0) {
       if (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 128 | 0) i73 = 1; else if (HEAP32[26323] | 0) i73 = (HEAP16[110026 + (HEAP32[i27 >> 2] << 1) >> 1] & 64 | 0) != 0; else i73 = 0;
       i74 = i73 ^ 1;
      } else i74 = 0;
      HEAP32[i12 >> 2] = i74 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
      break;
     }
    case -968:
    case -969:
    case -970:
    case -971:
    case -972:
    case -973:
    case -974:
    case -975:
    case -976:
     {
      if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) <= -968) {
       HEAP32[i39 >> 2] = (HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) + 976 + 1;
       HEAP32[i12 >> 2] = _match_backref((HEAP32[i16 >> 2] | 0) + 188 | 0, HEAP32[i39 >> 2] | 0, i40) | 0;
      }
      if (HEAP32[i12 >> 2] | 0) {
       if (!(HEAP32[i40 >> 2] | 0)) {
        HEAP32[i23 >> 2] = 1;
        HEAP32[i22 >> 2] = HEAP32[(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2];
        break L27;
       }
       i13 = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2] | 0;
       if ((HEAP32[i40 >> 2] | 0) <= (HEAP32[i28 >> 2] | 0)) {
        HEAP32[i22 >> 2] = HEAP32[i13 + 4 >> 2];
        HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
        break L27;
       } else {
        HEAP32[i22 >> 2] = i13;
        HEAP32[i25 >> 2] = HEAP32[i40 >> 2];
        HEAP32[i24 >> 2] = (HEAP32[i40 >> 2] | 0) - (HEAP32[i28 >> 2] | 0);
        break L27;
       }
      }
      break;
     }
    case -967:
     {
      i13 = HEAP32[HEAP32[i16 >> 2] >> 2] | 0;
      if (((HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i28 >> 2] | 0) | 0) <= 0) {
       HEAP32[i22 >> 2] = HEAP32[i13 + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
       break L27;
      } else {
       HEAP32[i22 >> 2] = i13;
       HEAP32[i25 >> 2] = 0;
       HEAP32[i24 >> 2] = (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i28 >> 2] | 0);
       break L27;
      }
      break;
     }
    case -881:
    case -882:
    case -883:
     {
      if (!(HEAP32[26312] | 0)) i75 = (_nfa_re_num_cmp(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 24 >> 2] | 0, (HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) + 883 | 0, (HEAP32[26326] | 0) + (HEAP32[26320] | 0) | 0) | 0) != 0; else i75 = 0;
      HEAP32[i12 >> 2] = i75 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -878:
    case -879:
    case -880:
     {
      HEAP32[i12 >> 2] = _nfa_re_num_cmp(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 24 >> 2] | 0, (HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) + 880 | 0, (HEAP32[26334] | 0) - (HEAP32[26325] | 0) + 1 | 0) | 0;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -875:
    case -876:
    case -877:
     {
      HEAP32[i41 >> 2] = (HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) + 877;
      HEAP32[i42 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0);
      i13 = HEAP32[26318] | 0;
      HEAP32[i43 >> 2] = (i13 | 0) == 0 ? HEAP32[26881] | 0 : i13 | 0;
      if ((HEAP32[i41 >> 2] | 0) != 1) if ((HEAP32[i42 >> 2] | 0) > (HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 24 >> 2] | 0)) break L27;
      HEAP32[i12 >> 2] = 0;
      if ((HEAP32[i41 >> 2] | 0) == 1) if ((HEAP32[i42 >> 2] | 0) > 100 ? ((HEAP32[i42 >> 2] | 0) - 1 | 0) > (HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 24 >> 2] | 0) : 0) {
       i13 = HEAP32[(HEAP32[(HEAP32[i43 >> 2] | 0) + 4 >> 2] | 0) + 700 >> 2] | 0;
       HEAP32[i44 >> 2] = i13;
       HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) < 4 ? 4 : i13;
       HEAP32[i12 >> 2] = (HEAP32[i42 >> 2] | 0) > (Math_imul(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 24 >> 2] | 0, HEAP32[i44 >> 2] | 0) | 0) & 1;
      }
      if (!(HEAP32[i12 >> 2] | 0)) {
       i13 = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 24 >> 2] | 0;
       i4 = HEAP32[i41 >> 2] | 0;
       HEAP32[i12 >> 2] = _nfa_re_num_cmp(i13, i4, (_win_linetabsize(HEAP32[i43 >> 2] | 0, HEAP32[26325] | 0, HEAP32[i42 >> 2] | 0) | 0) + 1 | 0) | 0;
      }
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -872:
    case -873:
    case -874:
     {
      HEAP32[i45 >> 2] = _getmark_buf(HEAP32[26319] | 0, HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 24 >> 2] | 0, 0) | 0;
      if (HEAP32[i45 >> 2] | 0) if ((HEAP32[HEAP32[i45 >> 2] >> 2] | 0) > 0) {
       i4 = HEAP32[i45 >> 2] | 0;
       do if ((HEAP32[HEAP32[i45 >> 2] >> 2] | 0) == ((HEAP32[26326] | 0) + (HEAP32[26320] | 0) | 0)) if ((HEAP32[i4 + 4 >> 2] | 0) == ((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0)) {
        i76 = (HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) == -874 & 1;
        break;
       } else {
        i13 = HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0;
        i76 = (HEAP32[(HEAP32[i45 >> 2] | 0) + 4 >> 2] | 0) < ((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) ? (i13 | 0) == -873 & 1 : (i13 | 0) == -872 & 1;
        break;
       } else {
        i13 = HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0;
        i76 = (HEAP32[i4 >> 2] | 0) < ((HEAP32[26326] | 0) + (HEAP32[26320] | 0) | 0) ? (i13 | 0) == -873 & 1 : (i13 | 0) == -872 & 1;
       } while (0);
       i77 = (i76 | 0) != 0;
      } else i77 = 0; else i77 = 0;
      HEAP32[i12 >> 2] = i77 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -884:
     {
      if (HEAP32[26318] | 0) if (((HEAP32[26326] | 0) + (HEAP32[26320] | 0) | 0) == (HEAP32[(HEAP32[26318] | 0) + 24 >> 2] | 0)) i78 = ((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) == (HEAP32[(HEAP32[26318] | 0) + 24 + 4 >> 2] | 0); else i78 = 0; else i78 = 0;
      HEAP32[i12 >> 2] = i78 & 1;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -871:
     {
      HEAP32[i12 >> 2] = _reg_match_visual() | 0;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
      }
      break;
     }
    case -1001:
    case -999:
    case -957:
    case -958:
    case -959:
    case -960:
    case -961:
    case -962:
    case -963:
    case -964:
    case -965:
     break;
    default:
     {
      HEAP32[i46 >> 2] = HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2];
      HEAP32[i12 >> 2] = (HEAP32[i46 >> 2] | 0) == (HEAP32[i27 >> 2] | 0) & 1;
      if ((HEAP32[i12 >> 2] | 0) == 0 & (HEAP32[26323] | 0) != 0) {
       i4 = _tolower(HEAP32[i46 >> 2] | 0) | 0;
       HEAP32[i12 >> 2] = (i4 | 0) == (_tolower(HEAP32[i27 >> 2] | 0) | 0) & 1;
      }
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2];
       HEAP32[i25 >> 2] = HEAP32[i28 >> 2];
      }
     }
    } while (0);
    L329 : do if (HEAP32[i22 >> 2] | 0) {
     if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] | 0)) HEAP32[i47 >> 2] = 0; else HEAP32[i47 >> 2] = (HEAP32[i16 >> 2] | 0) + 8;
     do if (HEAP32[i47 >> 2] | 0) {
      if (HEAP32[i28 >> 2] | 0) if (!(_match_follows(HEAP32[i22 >> 2] | 0, 0) | 0)) break;
      i4 = HEAP32[i47 >> 2] | 0;
      do if ((HEAP32[HEAP32[i47 >> 2] >> 2] | 0) == 1) {
       HEAP32[i12 >> 2] = _recursive_regmatch(HEAP32[i4 + 4 >> 2] | 0, HEAP32[i47 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, i21) | 0;
       HEAP32[HEAP32[i47 >> 2] >> 2] = HEAP32[i12 >> 2] | 0 ? 2 : 3;
       i13 = HEAP32[i12 >> 2] | 0;
       do if ((HEAP32[HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -995) i79 = 1; else {
        if ((HEAP32[HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -994) {
         i79 = 1;
         break;
        }
        if ((HEAP32[HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -991) {
         i79 = 1;
         break;
        }
        i79 = (HEAP32[HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -990;
       } while (0);
       if ((i13 | 0) == (i79 & 1 | 0)) break;
       _copy_sub_off((HEAP32[i47 >> 2] | 0) + 8 | 0, HEAP32[i11 >> 2] | 0);
      } else HEAP32[i12 >> 2] = (HEAP32[i4 >> 2] | 0) == 2 & 1; while (0);
      i4 = HEAP32[i12 >> 2] | 0;
      do if ((HEAP32[HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -995) i80 = 1; else {
       if ((HEAP32[HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -994) {
        i80 = 1;
        break;
       }
       if ((HEAP32[HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -991) {
        i80 = 1;
        break;
       }
       i80 = (HEAP32[HEAP32[(HEAP32[i47 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -990;
      } while (0);
      if ((i4 | 0) == (i80 & 1 | 0)) break L329;
      _copy_sub_off((HEAP32[i16 >> 2] | 0) + 188 | 0, (HEAP32[i47 >> 2] | 0) + 8 | 0);
      HEAP32[i47 >> 2] = 0;
     } while (0);
     if ((HEAP32[i47 >> 2] | 0) == ((HEAP32[i16 >> 2] | 0) + 8 | 0)) {
      _copy_pim(i48, HEAP32[i47 >> 2] | 0);
      HEAP32[i47 >> 2] = i48;
     }
     if (HEAP32[i23 >> 2] | 0) {
      _addstate_here(HEAP32[i19 >> 2] | 0, HEAP32[i22 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0, HEAP32[i47 >> 2] | 0, i18);
      break;
     }
     _addstate(HEAP32[i20 >> 2] | 0, HEAP32[i22 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0, HEAP32[i47 >> 2] | 0, HEAP32[i25 >> 2] | 0) | 0;
     if ((HEAP32[i24 >> 2] | 0) > 0) HEAP32[(HEAP32[HEAP32[i20 >> 2] >> 2] | 0) + (((HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] | 0) - 1 | 0) * 352 | 0) + 4 >> 2] = HEAP32[i24 >> 2];
    } while (0);
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   }
   L365 : do if ((i5 | 0) == 21) {
    i5 = 0;
    HEAP32[26335] = 1;
    _copy_sub(HEAP32[i10 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0);
    if (!(HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[i28 >> 2] = 0;
   } else if ((i5 | 0) == 28) {
    i5 = 0;
    if ((HEAP32[HEAP32[HEAP32[i16 >> 2] >> 2] >> 2] | 0) != -987) _copy_sub(HEAP32[i11 >> 2] | 0, (HEAP32[i16 >> 2] | 0) + 188 | 0);
    HEAP32[26335] = 1;
    if (!(HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[i28 >> 2] = 0;
   } else if ((i5 | 0) == 303) {
    i5 = 0;
    if (!(HEAP32[26335] | 0)) {
     if ((HEAP32[i26 >> 2] | 0) != 0 & (HEAP32[26326] | 0) == 0 & (HEAP32[i28 >> 2] | 0) != 0) {
      if (HEAP32[26324] | 0) if (((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) >= (HEAP32[26324] | 0)) i5 = 307;
     } else i5 = 307;
     do if ((i5 | 0) == 307) {
      i5 = 0;
      if (!(HEAP32[26336] | 0)) break L365;
      if (HEAP32[26312] | 0) if ((HEAP32[26334] | 0) >>> 0 < (HEAP32[HEAP32[26336] >> 2] | 0) >>> 0) break; else break L365;
      if ((HEAP32[26326] | 0) >= (HEAP32[HEAP32[26336] >> 2] | 0)) {
       if ((HEAP32[26326] | 0) != (HEAP32[HEAP32[26336] >> 2] | 0)) break L365;
       if (((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) >= (HEAP32[(HEAP32[26336] | 0) + 4 >> 2] | 0)) break L365;
      }
     } while (0);
     if (!(HEAP32[i26 >> 2] | 0)) {
      _addstate(HEAP32[i20 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0, HEAP32[i28 >> 2] | 0) | 0;
      break;
     }
     HEAP32[i49 >> 2] = 1;
     do if (HEAP32[i28 >> 2] | 0 ? (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0) != 0 : 0) {
      i3 = HEAP32[26334] | 0;
      if (!(HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] | 0)) {
       HEAP32[i51 >> 2] = i3 - (HEAP32[26325] | 0) + (HEAP32[i28 >> 2] | 0);
       if (!(_skip_to_start(HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0, i51) | 0)) break L5;
       HEAP32[26334] = (HEAP32[26325] | 0) + (HEAP32[i51 >> 2] | 0) + (0 - (HEAP32[i28 >> 2] | 0));
       break;
      }
      HEAP32[i50 >> 2] = HEAPU8[i3 + (HEAP32[i28 >> 2] | 0) >> 0];
      if ((HEAP32[i50 >> 2] | 0) != (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0)) {
       if (HEAP32[26323] | 0) {
        i3 = _tolower(HEAP32[i50 >> 2] | 0) | 0;
        if ((i3 | 0) == (_tolower(HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0) | 0)) break;
       }
       HEAP32[i49 >> 2] = 0;
      }
     } while (0);
     if (HEAP32[i49 >> 2] | 0) {
      i3 = HEAP32[26334] | 0;
      if (!(HEAP32[26312] | 0)) HEAP32[(HEAP32[i11 >> 2] | 0) + 4 + 8 >> 2] = i3 - (HEAP32[26325] | 0) + (HEAP32[i28 >> 2] | 0); else HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] = i3 + (HEAP32[i28 >> 2] | 0);
      _addstate(HEAP32[i20 >> 2] | 0, HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0, HEAP32[i28 >> 2] | 0) | 0;
     }
    }
   } while (0);
   if (HEAP32[i28 >> 2] | 0) HEAP32[26334] = (HEAP32[26334] | 0) + (HEAP32[i28 >> 2] | 0); else {
    if (!(HEAP32[i15 >> 2] | 0)) {
     if (!((HEAP32[26336] | 0) != 0 & (HEAP32[26312] | 0) == 0)) break L5;
     if ((HEAP32[26326] | 0) >= (HEAP32[HEAP32[26336] >> 2] | 0)) break L5;
    }
    _reg_nextline();
   }
   _line_breakcheck();
   if (HEAP32[26834] | 0) break L5;
  }
  if ((i5 | 0) == 15) {
   HEAP32[26335] = -1;
   break;
  } else if ((i5 | 0) == 38) {
   HEAP32[26335] = i53;
   break;
  } else if ((i5 | 0) == 58) {
   HEAP32[26335] = i55;
   break;
  }
 } while (0);
 _vim_free(HEAP32[i17 >> 2] | 0);
 _vim_free(HEAP32[i17 + 20 >> 2] | 0);
 _vim_free(HEAP32[i21 >> 2] | 0);
 HEAP32[i7 >> 2] = HEAP32[26335];
 i52 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i52 | 0;
}

function _regmatch(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i5 + 96 | 0;
 i7 = i5 + 84 | 0;
 i8 = i5 + 80 | 0;
 i9 = i5 + 76 | 0;
 i10 = i5 + 72 | 0;
 i11 = i5 + 68 | 0;
 i12 = i5 + 64 | 0;
 i13 = i5 + 60 | 0;
 i14 = i5 + 56 | 0;
 i15 = i5 + 52 | 0;
 i16 = i5 + 48 | 0;
 i17 = i5 + 44 | 0;
 i18 = i5 + 40 | 0;
 i19 = i5 + 36 | 0;
 i20 = i5 + 32 | 0;
 i21 = i5 + 28 | 0;
 i22 = i5 + 8 | 0;
 i23 = i5 + 4 | 0;
 i24 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 + 92 >> 2] = i2;
 HEAP32[i5 + 88 >> 2] = i3;
 HEAP32[26408] = 0;
 HEAP32[26413] = 0;
 while (1) {
  _fast_breakcheck();
  while (1) {
   if ((HEAP32[26834] | 0) != 0 | (HEAP32[i6 >> 2] | 0) == 0) {
    i4 = 4;
    break;
   }
   HEAP32[i12 >> 2] = 2;
   HEAP32[i7 >> 2] = _regnext(HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = HEAPU8[HEAP32[i6 >> 2] >> 0];
   if ((HEAP32[26322] | 0) == 0 & (HEAP32[i8 >> 2] | 0) >= 50 & (HEAP32[i8 >> 2] | 0) <= 78 & (HEAP32[26312] | 0) == 0) if (!(HEAPU8[HEAP32[26334] >> 0] | 0)) if ((HEAP32[26326] | 0) <= (HEAP32[26321] | 0)) _reg_nextline(); else i4 = 9; else i4 = 9; else i4 = 9;
   L10 : do if ((i4 | 0) == 9) {
    i4 = 0;
    if ((HEAP32[26322] | 0) != 0 & (HEAP32[i8 >> 2] | 0) >= 50 & (HEAP32[i8 >> 2] | 0) <= 78) if ((HEAPU8[HEAP32[26334] >> 0] | 0) == 10) {
     HEAP32[26334] = (HEAP32[26334] | 0) + 1;
     break;
    }
    if ((HEAP32[i8 >> 2] | 0) >= 50 & (HEAP32[i8 >> 2] | 0) <= 78) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - 30;
    HEAP32[i9 >> 2] = HEAPU8[HEAP32[26334] >> 0];
    do switch (HEAP32[i8 >> 2] | 0) {
    case 6:
    case 209:
     {
      break L10;
      break;
     }
    case 1:
     {
      if ((HEAP32[26334] | 0) == (HEAP32[26325] | 0)) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 2:
     {
      if (!(HEAP32[i9 >> 2] | 0)) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 201:
     {
      if (!(HEAP32[26326] | 0)) if ((HEAP32[26334] | 0) == (HEAP32[26325] | 0)) if (!((HEAP32[26312] | 0) == 0 & (HEAP32[26320] | 0) > 1)) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 202:
     {
      if (!(HEAP32[i9 >> 2] | 0 ? 1 : (HEAP32[26326] | 0) != (HEAP32[26321] | 0))) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 203:
     {
      if (HEAP32[26318] | 0) if (((HEAP32[26326] | 0) + (HEAP32[26320] | 0) | 0) == (HEAP32[(HEAP32[26318] | 0) + 24 >> 2] | 0)) if (((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) == (HEAP32[(HEAP32[26318] | 0) + 24 + 4 >> 2] | 0)) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 207:
     {
      HEAP32[i13 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0];
      HEAP32[i14 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 + 1 >> 0];
      HEAP32[i15 >> 2] = _getmark_buf(HEAP32[26319] | 0, HEAP32[i13 >> 2] | 0, 0) | 0;
      do if (HEAP32[i15 >> 2] | 0) if ((HEAP32[HEAP32[i15 >> 2] >> 2] | 0) > 0) {
       i3 = HEAP32[i15 >> 2] | 0;
       if ((HEAP32[HEAP32[i15 >> 2] >> 2] | 0) != ((HEAP32[26326] | 0) + (HEAP32[26320] | 0) | 0)) {
        i2 = HEAP32[i14 >> 2] | 0;
        if ((HEAP32[i3 >> 2] | 0) < ((HEAP32[26326] | 0) + (HEAP32[26320] | 0) | 0)) if ((i2 | 0) != 62) break; else break L10; else if ((i2 | 0) != 60) break; else break L10;
       }
       if ((HEAP32[i3 + 4 >> 2] | 0) == ((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0)) if ((HEAP32[i14 >> 2] | 0) == 60 | (HEAP32[i14 >> 2] | 0) == 62) break; else break L10;
       i3 = HEAP32[i14 >> 2] | 0;
       if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) < ((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0)) if ((i3 | 0) != 62) break; else break L10; else if ((i3 | 0) != 60) break; else break L10;
      } while (0);
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 208:
     {
      if (_reg_match_visual() | 0) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 204:
     {
      if (!(HEAP32[26312] | 0)) if (_re_num_cmp((HEAP32[26326] | 0) + (HEAP32[26320] | 0) | 0, HEAP32[i6 >> 2] | 0) | 0) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 205:
     {
      if (_re_num_cmp((HEAP32[26334] | 0) - (HEAP32[26325] | 0) + 1 | 0, HEAP32[i6 >> 2] | 0) | 0) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 206:
     {
      if (_re_num_cmp((_win_linetabsize((HEAP32[26318] | 0) == 0 ? HEAP32[26881] | 0 : HEAP32[26318] | 0, HEAP32[26325] | 0, (HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) | 0) + 1 | 0, HEAP32[i6 >> 2] | 0) | 0) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 15:
     {
      if (!(HEAP32[i9 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      if (_vim_iswordc_buf(HEAP32[i9 >> 2] | 0, HEAP32[26319] | 0) | 0) {
       if ((HEAP32[26334] | 0) >>> 0 <= (HEAP32[26325] | 0) >>> 0) break L10;
       if (!(_vim_iswordc_buf(HEAPU8[(HEAP32[26334] | 0) + -1 >> 0] | 0, HEAP32[26319] | 0) | 0)) break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 16:
     {
      if ((HEAP32[26334] | 0) == (HEAP32[26325] | 0)) {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      if (_vim_iswordc_buf(HEAPU8[(HEAP32[26334] | 0) + -1 >> 0] | 0, HEAP32[26319] | 0) | 0) {
       if (!(HEAPU8[HEAP32[26334] >> 0] | 0)) break L10;
       if (!(_vim_iswordc_buf(HEAP32[i9 >> 2] | 0, HEAP32[26319] | 0) | 0)) break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 20:
     {
      if (!(HEAP32[i9 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 5;
       break L10;
      } else {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      break;
     }
    case 23:
     {
      if (_vim_isIDc(HEAP32[i9 >> 2] | 0) | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 24:
     {
      if (((HEAPU8[HEAP32[26334] >> 0] | 0) - 48 | 0) >>> 0 >= 10) if (_vim_isIDc(HEAP32[i9 >> 2] | 0) | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 25:
     {
      if (_vim_iswordp_buf(HEAP32[26334] | 0, HEAP32[26319] | 0) | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 26:
     {
      if (((HEAPU8[HEAP32[26334] >> 0] | 0) - 48 | 0) >>> 0 >= 10) if (_vim_iswordp_buf(HEAP32[26334] | 0, HEAP32[26319] | 0) | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 27:
     {
      if (_vim_isfilec(HEAP32[i9 >> 2] | 0) | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 28:
     {
      if (((HEAPU8[HEAP32[26334] >> 0] | 0) - 48 | 0) >>> 0 >= 10) if (_vim_isfilec(HEAP32[i9 >> 2] | 0) | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 29:
     {
      if (_vim_isprintc(HEAPU8[HEAP32[26334] >> 0] | 0) | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 30:
     {
      if (((HEAPU8[HEAP32[26334] >> 0] | 0) - 48 | 0) >>> 0 >= 10) if (_vim_isprintc(HEAPU8[HEAP32[26334] >> 0] | 0) | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 31:
     {
      if ((HEAP32[i9 >> 2] | 0) == 32 | (HEAP32[i9 >> 2] | 0) == 9) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 32:
     {
      if ((HEAP32[i9 >> 2] | 0) == 0 | (HEAP32[i9 >> 2] | 0) == 32 | (HEAP32[i9 >> 2] | 0) == 9) {
       HEAP32[i12 >> 2] = 5;
       break L10;
      } else {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      break;
     }
    case 33:
     {
      if (HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 1 | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 34:
     {
      if (HEAP32[i9 >> 2] | 0) if (!(HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 1)) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 35:
     {
      if (HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 2 | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 36:
     {
      if (HEAP32[i9 >> 2] | 0) if (!(HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 2)) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 37:
     {
      if (HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 4 | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 38:
     {
      if (HEAP32[i9 >> 2] | 0) if (!(HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 4)) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 39:
     {
      if (HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 8 | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 40:
     {
      if (HEAP32[i9 >> 2] | 0) if (!(HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 8)) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 41:
     {
      if (HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 16 | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 42:
     {
      if (HEAP32[i9 >> 2] | 0) if (!(HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 16)) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 43:
     {
      if (HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 32 | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 44:
     {
      if (HEAP32[i9 >> 2] | 0) if (!(HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 32)) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 45:
     {
      if (HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 64 | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 46:
     {
      if (HEAP32[i9 >> 2] | 0) if (!(HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 64)) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 47:
     {
      if (HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 128 | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      break;
     }
    case 48:
     {
      if (HEAP32[i9 >> 2] | 0) if (!(HEAP16[110026 + (HEAP32[i9 >> 2] << 1) >> 1] & 128)) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 5:
     {
      HEAP32[i17 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
      do if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) != (HEAPU8[HEAP32[26334] >> 0] | 0)) {
       if (HEAP32[26323] | 0) {
        i3 = _tolower(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) | 0;
        if ((i3 | 0) == (_tolower(HEAPU8[HEAP32[26334] >> 0] | 0) | 0)) break;
       }
       HEAP32[i12 >> 2] = 5;
       break L10;
      } while (0);
      if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) break L10;
      if (!(HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0)) HEAP32[i16 >> 2] = 1; else {
       HEAP32[i16 >> 2] = _strlen(HEAP32[i17 >> 2] | 0) | 0;
       if (_cstrncmp(HEAP32[i17 >> 2] | 0, HEAP32[26334] | 0, i16) | 0) HEAP32[i12 >> 2] = 5;
      }
      if ((HEAP32[i12 >> 2] | 0) == 5) break L10;
      HEAP32[26334] = (HEAP32[26334] | 0) + (HEAP32[i16 >> 2] | 0);
      break L10;
      break;
     }
    case 22:
    case 21:
     {
      if (!(HEAP32[i9 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      if (((_cstrchr((HEAP32[i6 >> 2] | 0) + 3 | 0, HEAP32[i9 >> 2] | 0) | 0) == 0 | 0) == ((HEAP32[i8 >> 2] | 0) == 21 | 0)) {
       HEAP32[i12 >> 2] = 5;
       break L10;
      } else {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      }
      break;
     }
    case 4:
     {
      HEAP32[i19 >> 2] = HEAP32[26417];
      HEAP32[i18 >> 2] = 0;
      while (1) {
       if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[26413] | 0)) break;
       if ((HEAP32[(HEAP32[i19 >> 2] | 0) + (HEAP32[i18 >> 2] << 4) >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) break;
       HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
      }
      do if ((HEAP32[i18 >> 2] | 0) == (HEAP32[26413] | 0)) if (!(_ga_grow(105652, 1) | 0)) {
       HEAP32[i12 >> 2] = 1;
       break;
      } else {
       HEAP32[i19 >> 2] = HEAP32[26417];
       HEAP32[(HEAP32[i19 >> 2] | 0) + (HEAP32[i18 >> 2] << 4) >> 2] = HEAP32[i6 >> 2];
       HEAP32[26413] = (HEAP32[26413] | 0) + 1;
       break;
      } else if (_reg_save_equal((HEAP32[i19 >> 2] | 0) + (HEAP32[i18 >> 2] << 4) + 4 | 0) | 0) HEAP32[i12 >> 2] = 5; while (0);
      if (!((HEAP32[i12 >> 2] | 0) != 1 & (HEAP32[i12 >> 2] | 0) != 5)) break L10;
      _reg_save((HEAP32[i19 >> 2] | 0) + (HEAP32[i18 >> 2] << 4) + 4 | 0, 105652);
      break L10;
      break;
     }
    case 89:
    case 88:
    case 87:
    case 86:
    case 85:
    case 84:
    case 83:
    case 82:
    case 81:
    case 80:
     {
      HEAP32[i11 >> 2] = (HEAP32[i8 >> 2] | 0) - 80;
      _cleanup_subexpr();
      HEAP32[i10 >> 2] = _regstack_push(1, HEAP32[i6 >> 2] | 0) | 0;
      if (!(HEAP32[i10 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      }
      HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] = HEAP32[i11 >> 2];
      i3 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
      if (!(HEAP32[26312] | 0)) {
       _save_se_multi(i3, (HEAP32[26316] | 0) + (HEAP32[i11 >> 2] << 3) | 0);
       break L10;
      } else {
       _save_se_one(i3, (HEAP32[26314] | 0) + (HEAP32[i11 >> 2] << 2) | 0);
       break L10;
      }
      break;
     }
    case 151:
    case 150:
     {
      if (_regstack_push(0, HEAP32[i6 >> 2] | 0) | 0) break L10;
      HEAP32[i12 >> 2] = 1;
      break L10;
      break;
     }
    case 99:
    case 98:
    case 97:
    case 96:
    case 95:
    case 94:
    case 93:
    case 92:
    case 91:
    case 90:
     {
      HEAP32[i11 >> 2] = (HEAP32[i8 >> 2] | 0) - 90;
      _cleanup_subexpr();
      HEAP32[i10 >> 2] = _regstack_push(2, HEAP32[i6 >> 2] | 0) | 0;
      if (!(HEAP32[i10 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      }
      HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] = HEAP32[i11 >> 2];
      i3 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
      if (!(HEAP32[26312] | 0)) {
       _save_se_multi(i3, (HEAP32[26317] | 0) + (HEAP32[i11 >> 2] << 3) | 0);
       break L10;
      } else {
       _save_se_one(i3, (HEAP32[26315] | 0) + (HEAP32[i11 >> 2] << 2) | 0);
       break L10;
      }
      break;
     }
    case 109:
    case 108:
    case 107:
    case 106:
    case 105:
    case 104:
    case 103:
    case 102:
    case 101:
     {
      HEAP32[i11 >> 2] = (HEAP32[i8 >> 2] | 0) - 100;
      _cleanup_subexpr();
      do if (!(HEAP32[26312] | 0)) {
       if ((HEAP32[(HEAP32[26316] | 0) + (HEAP32[i11 >> 2] << 3) >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[26317] | 0) + (HEAP32[i11 >> 2] << 3) >> 2] | 0) >= 0) {
        if ((HEAP32[(HEAP32[26316] | 0) + (HEAP32[i11 >> 2] << 3) >> 2] | 0) == (HEAP32[26326] | 0)) if ((HEAP32[(HEAP32[26317] | 0) + (HEAP32[i11 >> 2] << 3) >> 2] | 0) == (HEAP32[26326] | 0)) {
         i3 = HEAP32[i11 >> 2] << 3 | 0;
         HEAP32[i20 >> 2] = (HEAP32[(HEAP32[26317] | 0) + i3 + 4 >> 2] | 0) - (HEAP32[(HEAP32[26316] | 0) + i3 + 4 >> 2] | 0);
         if (!(_cstrncmp((HEAP32[26325] | 0) + (HEAP32[(HEAP32[26316] | 0) + (HEAP32[i11 >> 2] << 3) + 4 >> 2] | 0) | 0, HEAP32[26334] | 0, i20) | 0)) break;
         HEAP32[i12 >> 2] = 5;
         break;
        }
        i3 = (HEAP32[26316] | 0) + (HEAP32[i11 >> 2] << 3) | 0;
        i2 = HEAP32[i11 >> 2] << 3 | 0;
        i2 = (HEAP32[26317] | 0) + (HEAP32[i11 >> 2] << 3) | 0;
        HEAP32[i21 >> 2] = _match_with_backref(HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, i20) | 0;
        if ((HEAP32[i21 >> 2] | 0) == 4) break;
        HEAP32[i12 >> 2] = HEAP32[i21 >> 2];
        break;
       }
       HEAP32[i20 >> 2] = 0;
      } else {
       if (HEAP32[(HEAP32[26314] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) if (HEAP32[(HEAP32[26315] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) {
        i2 = HEAP32[i11 >> 2] << 2 | 0;
        HEAP32[i20 >> 2] = (HEAP32[(HEAP32[26315] | 0) + i2 >> 2] | 0) - (HEAP32[(HEAP32[26314] | 0) + i2 >> 2] | 0);
        if (!(_cstrncmp(HEAP32[(HEAP32[26314] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0, HEAP32[26334] | 0, i20) | 0)) break;
        HEAP32[i12 >> 2] = 5;
        break;
       }
       HEAP32[i20 >> 2] = 0;
      } while (0);
      HEAP32[26334] = (HEAP32[26334] | 0) + (HEAP32[i20 >> 2] | 0);
      break L10;
      break;
     }
    case 3:
     {
      i2 = HEAP32[i6 >> 2] | 0;
      if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) != 3) {
       HEAP32[i7 >> 2] = i2 + 3;
       break L10;
      }
      HEAP32[i10 >> 2] = _regstack_push(3, i2) | 0;
      if (!(HEAP32[i10 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      } else {
       HEAP32[i12 >> 2] = 3;
       break L10;
      }
      break;
     }
    case 17:
     {
      if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 14) {
       i2 = HEAP32[i6 >> 2] | 0;
       HEAP32[26418] = (HEAPU8[i2 + 3 >> 0] << 24) + (HEAPU8[i2 + 4 >> 0] << 16) + (HEAPU8[i2 + 5 >> 0] << 8) + (HEAPU8[i2 + 6 >> 0] | 0);
       i2 = (HEAP32[i6 >> 2] | 0) + 4 | 0;
       HEAP32[26419] = (HEAPU8[i2 + 3 >> 0] << 24) + (HEAPU8[i2 + 4 >> 0] << 16) + (HEAPU8[i2 + 5 >> 0] << 8) + (HEAPU8[i2 + 6 >> 0] | 0);
       break L10;
      }
      if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) >= 140) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) < 150) {
       HEAP32[i11 >> 2] = (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) - 140;
       i2 = HEAP32[i6 >> 2] | 0;
       HEAP32[105680 + (HEAP32[i11 >> 2] << 2) >> 2] = (HEAPU8[i2 + 3 >> 0] << 24) + (HEAPU8[i2 + 4 >> 0] << 16) + (HEAPU8[i2 + 5 >> 0] << 8) + (HEAPU8[i2 + 6 >> 0] | 0);
       i2 = (HEAP32[i6 >> 2] | 0) + 4 | 0;
       HEAP32[105720 + (HEAP32[i11 >> 2] << 2) >> 2] = (HEAPU8[i2 + 3 >> 0] << 24) + (HEAPU8[i2 + 4 >> 0] << 16) + (HEAPU8[i2 + 5 >> 0] << 8) + (HEAPU8[i2 + 6 >> 0] | 0);
       HEAP32[105760 + (HEAP32[i11 >> 2] << 2) >> 2] = 0;
       break L10;
      }
      _internal_error(74079);
      HEAP32[i12 >> 2] = 1;
      break L10;
      break;
     }
    case 149:
    case 148:
    case 147:
    case 146:
    case 145:
    case 144:
    case 143:
    case 142:
    case 141:
    case 140:
     {
      HEAP32[i11 >> 2] = (HEAP32[i8 >> 2] | 0) - 140;
      i2 = 105760 + (HEAP32[i11 >> 2] << 2) | 0;
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
      i2 = HEAP32[i11 >> 2] | 0;
      if ((HEAP32[105680 + (HEAP32[i11 >> 2] << 2) >> 2] | 0) <= (HEAP32[105720 + (HEAP32[i11 >> 2] << 2) >> 2] | 0)) i25 = HEAP32[105680 + (i2 << 2) >> 2] | 0; else i25 = HEAP32[105720 + (i2 << 2) >> 2] | 0;
      if ((HEAP32[105760 + (HEAP32[i11 >> 2] << 2) >> 2] | 0) <= (i25 | 0)) {
       HEAP32[i10 >> 2] = _regstack_push(4, HEAP32[i6 >> 2] | 0) | 0;
       if (!(HEAP32[i10 >> 2] | 0)) {
        HEAP32[i12 >> 2] = 1;
        break L10;
       } else {
        HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] = HEAP32[i11 >> 2];
        _reg_save((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
        HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
        break L10;
       }
      }
      i2 = HEAP32[105760 + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
      i3 = HEAP32[i11 >> 2] | 0;
      if ((HEAP32[105680 + (HEAP32[i11 >> 2] << 2) >> 2] | 0) <= (HEAP32[105720 + (HEAP32[i11 >> 2] << 2) >> 2] | 0)) {
       if ((i2 | 0) > (HEAP32[105720 + (i3 << 2) >> 2] | 0)) break L10;
       HEAP32[i10 >> 2] = _regstack_push(5, HEAP32[i6 >> 2] | 0) | 0;
       if (!(HEAP32[i10 >> 2] | 0)) {
        HEAP32[i12 >> 2] = 1;
        break L10;
       } else {
        HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] = HEAP32[i11 >> 2];
        _reg_save((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
        HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
        break L10;
       }
      } else {
       if ((i2 | 0) > (HEAP32[105680 + (i3 << 2) >> 2] | 0)) break L10;
       HEAP32[i10 >> 2] = _regstack_push(6, HEAP32[i6 >> 2] | 0) | 0;
       if (!(HEAP32[i10 >> 2] | 0)) {
        HEAP32[i12 >> 2] = 1;
        break L10;
       } else {
        _reg_save((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
        break L10;
       }
      }
      break;
     }
    case 8:
    case 7:
    case 14:
     {
      do if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 5) {
       HEAP32[i22 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + 3 >> 0];
       i3 = HEAP32[i22 >> 2] | 0;
       if (!(HEAP32[26323] | 0)) {
        HEAP32[i22 + 4 >> 2] = i3;
        break;
       }
       i2 = (_isupper(i3) | 0) != 0;
       i3 = HEAP32[i22 >> 2] | 0;
       if (i2) {
        HEAP32[i22 + 4 >> 2] = _tolower(i3) | 0;
        break;
       } else {
        HEAP32[i22 + 4 >> 2] = _toupper(i3) | 0;
        break;
       }
      } else {
       HEAP32[i22 >> 2] = 0;
       HEAP32[i22 + 4 >> 2] = 0;
      } while (0);
      if ((HEAP32[i8 >> 2] | 0) != 14) {
       HEAP32[i22 + 12 >> 2] = (HEAP32[i8 >> 2] | 0) == 7 ? 0 : 1;
       HEAP32[i22 + 16 >> 2] = 2147418112;
      } else {
       HEAP32[i22 + 12 >> 2] = HEAP32[26418];
       HEAP32[i22 + 16 >> 2] = HEAP32[26419];
      }
      HEAP32[i22 + 8 >> 2] = _regrepeat((HEAP32[i6 >> 2] | 0) + 3 | 0, HEAP32[i22 + 16 >> 2] | 0) | 0;
      if (HEAP32[26834] | 0) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      }
      i3 = HEAP32[i22 + 8 >> 2] | 0;
      if ((HEAP32[i22 + 12 >> 2] | 0) <= (HEAP32[i22 + 16 >> 2] | 0)) {
       if ((i3 | 0) < (HEAP32[i22 + 12 >> 2] | 0)) i4 = 260;
      } else if ((i3 | 0) < (HEAP32[i22 + 16 >> 2] | 0)) i4 = 260;
      if ((i4 | 0) == 260) {
       i4 = 0;
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      if (((HEAP32[26408] | 0) >>> 10 | 0) >= (HEAP32[26950] | 0)) {
       _emsg(94082) | 0;
       HEAP32[i12 >> 2] = 1;
       break L10;
      }
      if (!(_ga_grow(105632, 20) | 0)) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      }
      HEAP32[26408] = (HEAP32[26408] | 0) + 20;
      HEAP32[i10 >> 2] = _regstack_push((HEAP32[i22 + 12 >> 2] | 0) <= (HEAP32[i22 + 16 >> 2] | 0) ? 10 : 11, HEAP32[i6 >> 2] | 0) | 0;
      if (!(HEAP32[i10 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      } else {
       i3 = (HEAP32[i10 >> 2] | 0) + -20 | 0;
       HEAP32[i3 >> 2] = HEAP32[i22 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i22 + 8 >> 2];
       HEAP32[i3 + 12 >> 2] = HEAP32[i22 + 12 >> 2];
       HEAP32[i3 + 16 >> 2] = HEAP32[i22 + 16 >> 2];
       HEAP32[i12 >> 2] = 3;
       break L10;
      }
      break;
     }
    case 13:
    case 9:
    case 10:
     {
      HEAP32[i10 >> 2] = _regstack_push(7, HEAP32[i6 >> 2] | 0) | 0;
      if (!(HEAP32[i10 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      } else {
       HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] = HEAP32[i8 >> 2];
       _reg_save((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
       HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
       break L10;
      }
      break;
     }
    case 12:
    case 11:
     {
      if (((HEAP32[26408] | 0) >>> 10 | 0) >= (HEAP32[26950] | 0)) {
       _emsg(94082) | 0;
       HEAP32[i12 >> 2] = 1;
       break L10;
      }
      if (!(_ga_grow(105632, 188) | 0)) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      }
      HEAP32[26408] = (HEAP32[26408] | 0) + 188;
      HEAP32[i10 >> 2] = _regstack_push(8, HEAP32[i6 >> 2] | 0) | 0;
      if (!(HEAP32[i10 >> 2] | 0)) {
       HEAP32[i12 >> 2] = 1;
       break L10;
      } else {
       _save_subexpr((HEAP32[i10 >> 2] | 0) + -188 | 0);
       HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] = HEAP32[i8 >> 2];
       _reg_save((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
       break L10;
      }
      break;
     }
    case 19:
     {
      if (HEAP32[26312] | 0) {
       if ((HEAP32[26450] | 0) == (HEAP32[26334] | 0)) break L10;
       HEAP32[i12 >> 2] = 5;
       break L10;
      }
      if ((HEAP32[26451] | 0) == ((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0)) if ((HEAP32[26450] | 0) == (HEAP32[26326] | 0)) break L10;
      HEAP32[i12 >> 2] = 5;
      break L10;
      break;
     }
    case 18:
     {
      if ((HEAP32[i9 >> 2] | 0) == 0 & (HEAP32[26312] | 0) == 0) {
       if (HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) i4 = 279;
      } else i4 = 279;
      if ((i4 | 0) == 279) {
       i4 = 0;
       if (!((HEAP32[i9 >> 2] | 0) == 10 & (HEAP32[26322] | 0) != 0)) {
        HEAP32[i12 >> 2] = 5;
        break L10;
       }
      }
      if (HEAP32[26322] | 0) {
       HEAP32[26334] = (HEAP32[26334] | 0) + 1;
       break L10;
      } else {
       _reg_nextline();
       break L10;
      }
      break;
     }
    case 0:
     {
      HEAP32[i12 >> 2] = 4;
      break L10;
      break;
     }
    default:
     {
      _emsg(93511) | 0;
      HEAP32[i12 >> 2] = 1;
      break L10;
     }
    } while (0);
   } while (0);
   if ((HEAP32[i12 >> 2] | 0) != 2) break;
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  }
  if ((i4 | 0) == 4) {
   i4 = 0;
   HEAP32[i12 >> 2] = 1;
  }
  do {
   if (!((HEAP32[26408] | 0) > 0 ? (HEAP32[i12 >> 2] | 0) != 1 : 0)) break;
   HEAP32[i10 >> 2] = (HEAP32[26412] | 0) + (HEAP32[26408] | 0) + -24;
   L383 : do switch (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) {
   case 0:
    {
     _regstack_pop(i6);
     break;
    }
   case 1:
    {
     do if ((HEAP32[i12 >> 2] | 0) == 5) if (!(HEAP32[26312] | 0)) {
      i3 = HEAP32[i10 >> 2] | 0;
      i2 = (HEAP32[26316] | 0) + (HEAP16[i3 + 20 >> 1] << 3) | 0;
      i1 = i3 + 8 | 0;
      HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
      break;
     } else {
      i1 = HEAP32[i10 >> 2] | 0;
      HEAP32[(HEAP32[26314] | 0) + (HEAP16[i1 + 20 >> 1] << 2) >> 2] = HEAP32[i1 + 8 >> 2];
      break;
     } while (0);
     _regstack_pop(i6);
     break;
    }
   case 2:
    {
     do if ((HEAP32[i12 >> 2] | 0) == 5) if (!(HEAP32[26312] | 0)) {
      i1 = HEAP32[i10 >> 2] | 0;
      i2 = (HEAP32[26317] | 0) + (HEAP16[i1 + 20 >> 1] << 3) | 0;
      i3 = i1 + 8 | 0;
      HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      break;
     } else {
      i3 = HEAP32[i10 >> 2] | 0;
      HEAP32[(HEAP32[26315] | 0) + (HEAP16[i3 + 20 >> 1] << 2) >> 2] = HEAP32[i3 + 8 >> 2];
      break;
     } while (0);
     _regstack_pop(i6);
     break;
    }
   case 3:
    {
     if ((HEAP32[i12 >> 2] | 0) == 4) {
      _regstack_pop(i6);
      break L383;
     }
     if ((HEAP32[i12 >> 2] | 0) != 3) {
      _reg_restore((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
      HEAP32[i6 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2];
     }
     if (HEAP32[i6 >> 2] | 0) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 3) {
      i3 = _regnext(HEAP32[i6 >> 2] | 0) | 0;
      HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] = i3;
      _reg_save((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
      break L383;
     }
     HEAP32[i12 >> 2] = 5;
     _regstack_pop(i6);
     break;
    }
   case 4:
    {
     if ((HEAP32[i12 >> 2] | 0) == 5) {
      _reg_restore((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
      i3 = 105760 + (HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] << 2) | 0;
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
     }
     _regstack_pop(i6);
     break;
    }
   case 5:
    {
     if ((HEAP32[i12 >> 2] | 0) == 5) {
      _reg_restore((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
      i3 = 105760 + (HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] << 2) | 0;
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
      HEAP32[i12 >> 2] = 2;
     }
     _regstack_pop(i6);
     if ((HEAP32[i12 >> 2] | 0) == 2) HEAP32[i6 >> 2] = _regnext(HEAP32[i6 >> 2] | 0) | 0;
     break;
    }
   case 6:
    {
     if ((HEAP32[i12 >> 2] | 0) == 5) _reg_restore((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
     _regstack_pop(i6);
     if ((HEAP32[i12 >> 2] | 0) == 5) {
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
      HEAP32[i12 >> 2] = 2;
     }
     break;
    }
   case 7:
    {
     if ((HEAP32[i12 >> 2] | 0) == (((HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] | 0) == 10 ? 4 : 5) | 0)) HEAP32[i12 >> 2] = 5; else {
      HEAP32[i12 >> 2] = 2;
      if ((HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] | 0) != 13) _reg_restore((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
     }
     _regstack_pop(i6);
     if ((HEAP32[i12 >> 2] | 0) == 2) HEAP32[i6 >> 2] = _regnext(HEAP32[i6 >> 2] | 0) | 0;
     break;
    }
   case 8:
    {
     if ((HEAP32[i12 >> 2] | 0) == 5) {
      _regstack_pop(i6);
      HEAP32[26408] = (HEAP32[26408] | 0) - 188;
      break L383;
     } else {
      _reg_save((HEAP32[i10 >> 2] | 0) + -188 | 0, 105652);
      i3 = (HEAP32[i10 >> 2] | 0) + -188 + 12 | 0;
      HEAP32[i3 >> 2] = HEAP32[26450];
      HEAP32[i3 + 4 >> 2] = HEAP32[26451];
      HEAP32[i3 + 8 >> 2] = HEAP32[26452];
      i3 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
      HEAP32[26450] = HEAP32[i3 >> 2];
      HEAP32[26451] = HEAP32[i3 + 4 >> 2];
      HEAP32[26452] = HEAP32[i3 + 8 >> 2];
      HEAP32[HEAP32[i10 >> 2] >> 2] = 9;
      _reg_restore((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
      HEAP32[i6 >> 2] = (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + 3 + 4;
      break L383;
     }
     break;
    }
   case 9:
    {
     if ((HEAP32[i12 >> 2] | 0) == 4) if (_reg_save_equal(105800) | 0) {
      i3 = (HEAP32[i10 >> 2] | 0) + -188 + 12 | 0;
      HEAP32[26450] = HEAP32[i3 >> 2];
      HEAP32[26451] = HEAP32[i3 + 4 >> 2];
      HEAP32[26452] = HEAP32[i3 + 8 >> 2];
      if ((HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] | 0) == 11) _reg_restore((HEAP32[i10 >> 2] | 0) + -188 | 0, 105652); else {
       HEAP32[i12 >> 2] = 5;
       _restore_subexpr((HEAP32[i10 >> 2] | 0) + -188 | 0);
      }
      _regstack_pop(i6);
      HEAP32[26408] = (HEAP32[26408] | 0) - 188;
      break L383;
     }
     HEAP32[i11 >> 2] = 1;
     i3 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
     HEAP32[i23 >> 2] = (HEAPU8[i3 + 3 >> 0] << 24) + (HEAPU8[i3 + 4 >> 0] << 16) + (HEAPU8[i3 + 5 >> 0] << 8) + (HEAPU8[i3 + 6 >> 0] | 0);
     do if (!(HEAP32[26312] | 0)) {
      if ((HEAP32[i23 >> 2] | 0) > 0) {
       if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) < (HEAP32[26450] | 0)) i26 = _strlen(HEAP32[26325] | 0) | 0; else i26 = HEAP32[26451] | 0;
       if ((i26 - (HEAP32[(HEAP32[i10 >> 2] | 0) + 8 + 4 >> 2] | 0) | 0) >= (HEAP32[i23 >> 2] | 0)) {
        HEAP32[i11 >> 2] = 0;
        break;
       }
      }
      i3 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
      if (HEAP32[(HEAP32[i10 >> 2] | 0) + 8 + 4 >> 2] | 0) {
       i2 = i3 + 4 | 0;
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       break;
      }
      if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[26450] | 0)) {
       i3 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
       i2 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
       HEAP32[i3 >> 2] = i2;
       if (_reg_getline(i2) | 0) {
        _reg_restore((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
        i2 = _strlen(HEAP32[26325] | 0) | 0;
        HEAP32[(HEAP32[i10 >> 2] | 0) + 8 + 4 >> 2] = i2;
        break;
       }
      }
      HEAP32[i11 >> 2] = 0;
     } else {
      if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[26325] | 0)) {
       HEAP32[i11 >> 2] = 0;
       break;
      }
      i2 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
      if ((HEAP32[i23 >> 2] | 0) > 0) if (((HEAP32[26450] | 0) - (HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) | 0) > (HEAP32[i23 >> 2] | 0)) HEAP32[i11 >> 2] = 0;
     } while (0);
     i2 = HEAP32[i10 >> 2] | 0;
     if ((HEAP32[i11 >> 2] | 0) == 1) {
      _reg_restore(i2 + 8 | 0, 105652);
      HEAP32[i6 >> 2] = (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + 3 + 4;
      if ((HEAP32[i12 >> 2] | 0) != 4) break L383;
      HEAP32[i12 >> 2] = 5;
      _restore_subexpr((HEAP32[i10 >> 2] | 0) + -188 | 0);
      break L383;
     }
     i3 = i2 + -188 + 12 | 0;
     HEAP32[26450] = HEAP32[i3 >> 2];
     HEAP32[26451] = HEAP32[i3 + 4 >> 2];
     HEAP32[26452] = HEAP32[i3 + 8 >> 2];
     if ((HEAP16[(HEAP32[i10 >> 2] | 0) + 20 >> 1] | 0) == 12) {
      _reg_restore((HEAP32[i10 >> 2] | 0) + -188 | 0, 105652);
      HEAP32[i12 >> 2] = 4;
     } else if ((HEAP32[i12 >> 2] | 0) == 4) {
      HEAP32[i12 >> 2] = 5;
      _restore_subexpr((HEAP32[i10 >> 2] | 0) + -188 | 0);
     }
     _regstack_pop(i6);
     HEAP32[26408] = (HEAP32[26408] | 0) - 188;
     break;
    }
   case 11:
   case 10:
    {
     HEAP32[i24 >> 2] = (HEAP32[i10 >> 2] | 0) + -20;
     if ((HEAP32[i12 >> 2] | 0) == 4) {
      _regstack_pop(i6);
      HEAP32[26408] = (HEAP32[26408] | 0) - 20;
      break L383;
     }
     if ((HEAP32[i12 >> 2] | 0) != 3) _reg_restore((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
     L484 : while (1) {
      if ((HEAP32[i12 >> 2] | 0) != 3) {
       i3 = (HEAP32[i24 >> 2] | 0) + 8 | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       do if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == 10) {
        i1 = i2 + -1 | 0;
        HEAP32[i3 >> 2] = i1;
        if ((i1 | 0) < (HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0)) break L484;
        if ((HEAP32[26334] | 0) != (HEAP32[26325] | 0)) {
         HEAP32[26334] = (HEAP32[26334] | 0) + -1;
         break;
        }
        HEAP32[26326] = (HEAP32[26326] | 0) + -1;
        HEAP32[26325] = _reg_getline(HEAP32[26326] | 0) | 0;
        if (!(HEAP32[26325] | 0)) break L484;
        i1 = HEAP32[26325] | 0;
        HEAP32[26334] = i1 + (_strlen(HEAP32[26325] | 0) | 0);
        _fast_breakcheck();
       } else {
        if ((i2 | 0) == (HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0)) break L484;
        if (!(_regrepeat((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + 3 | 0, 1) | 0)) break L484;
        i1 = (HEAP32[i24 >> 2] | 0) + 8 | 0;
        HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
       } while (0);
       if (HEAP32[26834] | 0) break;
      } else HEAP32[i12 >> 2] = 5;
      if (!(HEAP32[HEAP32[i24 >> 2] >> 2] | 0)) {
       i4 = 382;
       break;
      }
      if ((HEAPU8[HEAP32[26334] >> 0] | 0) == (HEAP32[HEAP32[i24 >> 2] >> 2] | 0)) {
       i4 = 382;
       break;
      }
      if ((HEAPU8[HEAP32[26334] >> 0] | 0) == (HEAP32[(HEAP32[i24 >> 2] | 0) + 4 >> 2] | 0)) {
       i4 = 382;
       break;
      }
     }
     if ((i4 | 0) == 382) {
      i4 = 0;
      _reg_save((HEAP32[i10 >> 2] | 0) + 8 | 0, 105652);
      HEAP32[i6 >> 2] = _regnext(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) | 0;
      HEAP32[i12 >> 2] = 2;
     }
     if ((HEAP32[i12 >> 2] | 0) != 2) {
      _regstack_pop(i6);
      HEAP32[26408] = (HEAP32[26408] | 0) - 20;
      HEAP32[i12 >> 2] = 5;
     }
     break;
    }
   default:
    {}
   } while (0);
   if ((HEAP32[i12 >> 2] | 0) == 2) break;
  } while ((HEAP32[i10 >> 2] | 0) != ((HEAP32[26412] | 0) + (HEAP32[26408] | 0) + -24 | 0));
  if ((HEAP32[i12 >> 2] | 0) == 2) continue;
  if ((HEAP32[26408] | 0) == 0 | (HEAP32[i12 >> 2] | 0) == 1) break;
 }
 if (HEAP32[i6 >> 2] | 0) {
  i27 = HEAP32[i12 >> 2] | 0;
  i28 = (i27 | 0) == 4;
  i29 = i28 & 1;
  STACKTOP = i5;
  return i29 | 0;
 }
 _emsg(93511) | 0;
 i27 = HEAP32[i12 >> 2] | 0;
 i28 = (i27 | 0) == 4;
 i29 = i28 & 1;
 STACKTOP = i5;
 return i29 | 0;
}

function _readfile(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 i10 = i9 + 24 | 0;
 i11 = i9 + 16 | 0;
 i12 = i9 + 8 | 0;
 i13 = i9;
 i14 = i9 + 432 | 0;
 i15 = i9 + 428 | 0;
 i16 = i9 + 424 | 0;
 i17 = i9 + 420 | 0;
 i18 = i9 + 416 | 0;
 i19 = i9 + 412 | 0;
 i20 = i9 + 408 | 0;
 i21 = i9 + 404 | 0;
 i22 = i9 + 400 | 0;
 i23 = i9 + 396 | 0;
 i24 = i9 + 392 | 0;
 i25 = i9 + 388 | 0;
 i26 = i9 + 384 | 0;
 i27 = i9 + 380 | 0;
 i28 = i9 + 376 | 0;
 i29 = i9 + 372 | 0;
 i30 = i9 + 368 | 0;
 i31 = i9 + 364 | 0;
 i32 = i9 + 436 | 0;
 i33 = i9 + 360 | 0;
 i34 = i9 + 356 | 0;
 i35 = i9 + 352 | 0;
 i36 = i9 + 348 | 0;
 i37 = i9 + 344 | 0;
 i38 = i9 + 340 | 0;
 i39 = i9 + 336 | 0;
 i40 = i9 + 332 | 0;
 i41 = i9 + 328 | 0;
 i42 = i9 + 324 | 0;
 i43 = i9 + 320 | 0;
 i44 = i9 + 316 | 0;
 i45 = i9 + 312 | 0;
 i46 = i9 + 308 | 0;
 i47 = i9 + 304 | 0;
 i48 = i9 + 300 | 0;
 i49 = i9 + 296 | 0;
 i50 = i9 + 292 | 0;
 i51 = i9 + 288 | 0;
 i52 = i9 + 284 | 0;
 i53 = i9 + 208 | 0;
 i54 = i9 + 204 | 0;
 i55 = i9 + 200 | 0;
 i56 = i9 + 196 | 0;
 i57 = i9 + 192 | 0;
 i58 = i9 + 188 | 0;
 i59 = i9 + 184 | 0;
 i60 = i9 + 180 | 0;
 i61 = i9 + 176 | 0;
 i62 = i9 + 172 | 0;
 i63 = i9 + 168 | 0;
 i64 = i9 + 164 | 0;
 i65 = i9 + 160 | 0;
 i66 = i9 + 156 | 0;
 i67 = i9 + 152 | 0;
 i68 = i9 + 144 | 0;
 i69 = i9 + 140 | 0;
 i70 = i9 + 136 | 0;
 i71 = i9 + 60 | 0;
 i72 = i9 + 56 | 0;
 i73 = i9 + 52 | 0;
 i74 = i9 + 48 | 0;
 i75 = i9 + 44 | 0;
 i76 = i9 + 40 | 0;
 i77 = i9 + 36 | 0;
 i78 = i9 + 32 | 0;
 i79 = i9 + 28 | 0;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i17 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 HEAP32[i19 >> 2] = i5;
 HEAP32[i20 >> 2] = i6;
 HEAP32[i21 >> 2] = i7;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i23 >> 2] = HEAP32[i21 >> 2] & 1;
 HEAP32[i25 >> 2] = HEAP32[i21 >> 2] & 2;
 HEAP32[i26 >> 2] = HEAP32[i21 >> 2] & 4;
 HEAP32[i27 >> 2] = HEAP32[i21 >> 2] & 8;
 HEAP32[i28 >> 2] = HEAP32[i21 >> 2] & 64;
 if ((HEAP32[i23 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) != 0) i80 = 1; else if (HEAP32[i20 >> 2] | 0) i80 = (HEAP32[(HEAP32[i20 >> 2] | 0) + 80 >> 2] | 0) != 0; else i80 = 0;
 HEAP32[i29 >> 2] = i80 & 1;
 HEAP32[i30 >> 2] = 1;
 HEAP32[i31 >> 2] = 0;
 HEAP32[i33 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i34 >> 2] = 0;
 HEAP32[i35 >> 2] = 0;
 HEAP32[i36 >> 2] = 0;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i40 >> 2] = 0;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i43 >> 2] = 0;
 HEAP32[i44 >> 2] = 0;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i47 >> 2] = -1;
 HEAP32[i48 >> 2] = 0;
 HEAP32[i49 >> 2] = 0;
 HEAP32[i50 >> 2] = -1;
 HEAP32[i51 >> 2] = 0;
 HEAP32[i52 >> 2] = 0;
 HEAP32[i55 >> 2] = 0;
 HEAP32[i56 >> 2] = 0;
 HEAP32[i57 >> 2] = HEAP32[26710];
 HEAP32[i58 >> 2] = 0;
 HEAP32[i62 >> 2] = 0;
 HEAP32[25266] = 0;
 HEAP32[(HEAP32[26773] | 0) + 760 >> 2] = 0;
 if (((HEAP32[i25 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) != 0) ^ 1) & (HEAP32[i15 >> 2] | 0) != 0) if (_vim_strchr(HEAP32[26904] | 0, 102) | 0) if (!(HEAP32[i21 >> 2] & 16)) if (!(_set_rw_fname(HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0)) {
  HEAP32[i14 >> 2] = 0;
  i81 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i9;
  return i81 | 0;
 }
 HEAP32[i63 >> 2] = HEAP32[26773];
 HEAP32[i64 >> 2] = HEAP32[(HEAP32[26773] | 0) + 68 >> 2];
 HEAP32[i65 >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2];
 if ((HEAP32[i15 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) i82 = 1; else i82 = (HEAP32[i16 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0);
 HEAP32[i66 >> 2] = i82 & 1;
 if ((HEAP32[i15 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0)) i83 = 1; else i83 = (HEAP32[i16 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0);
 HEAP32[i67 >> 2] = i83 & 1;
 HEAP32[26799] = 1;
 HEAP32[26709] = 0;
 if (!(HEAP32[i16 >> 2] | 0)) HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
 if (!((HEAP32[i25 >> 2] | 0) != 0 | (HEAP32[i26 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) != 0)) {
  i83 = (HEAP32[26773] | 0) + 476 | 0;
  HEAP32[i68 >> 2] = HEAP32[i83 >> 2];
  HEAP32[i68 + 4 >> 2] = HEAP32[i83 + 4 >> 2];
  i83 = HEAP32[i17 >> 2] | 0;
  HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = (i83 | 0) == 0 ? 1 : i83 | 0;
  HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
  i83 = HEAP32[i16 >> 2] | 0;
  if (HEAP32[i23 >> 2] | 0) {
   if (_apply_autocmds_exarg(9, 0, i83, 0, HEAP32[26773] | 0, HEAP32[i20 >> 2] | 0) | 0) {
    HEAP32[i14 >> 2] = 1;
    i81 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i9;
    return i81 | 0;
   }
  } else if (_apply_autocmds_exarg(41, i83, HEAP32[i16 >> 2] | 0, 0, 0, HEAP32[i20 >> 2] | 0) | 0) {
   HEAP32[i14 >> 2] = 1;
   i81 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i9;
   return i81 | 0;
  }
  i83 = (HEAP32[26773] | 0) + 476 | 0;
  HEAP32[i83 >> 2] = HEAP32[i68 >> 2];
  HEAP32[i83 + 4 >> 2] = HEAP32[i68 + 4 >> 2];
 }
 if (_shortmess(111) | 0) if (!(HEAP32[26888] | 0)) i8 = 25; else i8 = 26; else if ((HEAP32[26888] | 0) == 0 ? (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) != 0 : 0) i8 = 25; else i8 = 26;
 if ((i8 | 0) == 25) HEAP32[26710] = 0; else if ((i8 | 0) == 26) HEAP32[26710] = 1;
 do if (HEAP32[i15 >> 2] | 0) if (HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) {
  i68 = HEAP32[i15 >> 2] | 0;
  HEAP32[i41 >> 2] = i68 + (_strlen(HEAP32[i15 >> 2] | 0) | 0);
  if (!(_vim_ispathsep(HEAPU8[(HEAP32[i41 >> 2] | 0) + -1 >> 0] | 0) | 0)) if ((_strlen(HEAP32[i15 >> 2] | 0) | 0) >>> 0 < 4096) break;
  _filemess(HEAP32[26773] | 0, HEAP32[i15 >> 2] | 0, 52039, 0);
  _msg_end() | 0;
  HEAP32[26710] = HEAP32[i57 >> 2];
  HEAP32[i14 >> 2] = 0;
  i81 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i9;
  return i81 | 0;
 } while (0);
 if (!((HEAP32[i26 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) != 0 | (HEAP32[i28 >> 2] | 0) != 0)) {
  HEAP32[i49 >> 2] = _mch_getperm(HEAP32[i15 >> 2] | 0) | 0;
  if ((HEAP32[i49 >> 2] | 0) >= 0) if ((HEAP32[i49 >> 2] & 61440 | 0) != 32768) if ((HEAP32[i49 >> 2] & 61440 | 0) != 4096) if ((HEAP32[i49 >> 2] & 61440 | 0) != 49152) {
   HEAP32[i69 >> 2] = 0;
   i68 = HEAP32[26773] | 0;
   i83 = HEAP32[i15 >> 2] | 0;
   if ((HEAP32[i49 >> 2] & 61440 | 0) == 16384) {
    _filemess(i68, i83, 52057, 0);
    HEAP32[i69 >> 2] = 2;
   } else _filemess(i68, i83, 52072, 0);
   _msg_end() | 0;
   HEAP32[26710] = HEAP32[i57 >> 2];
   HEAP32[i14 >> 2] = HEAP32[i69 >> 2];
   i81 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i9;
   return i81 | 0;
  }
 }
 _set_file_options(HEAP32[i29 >> 2] | 0, HEAP32[i20 >> 2] | 0);
 if (HEAP32[i23 >> 2] | 0) i84 = (HEAP32[(HEAP32[26773] | 0) + 60 >> 2] & 2 | 0) != 0; else i84 = 0;
 HEAP32[i24 >> 2] = i84 & 1;
 if (!((HEAP32[i24 >> 2] | 0) == 0 | (HEAP32[26815] | 0) != 0)) HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 0;
 if (!((HEAP32[i23 >> 2] | 0) == 0 | (HEAP32[i26 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) != 0 | (HEAP32[i28 >> 2] | 0) != 0)) {
  i84 = (_stat(HEAP32[i15 >> 2] | 0, i53) | 0) >= 0;
  i69 = HEAP32[26773] | 0;
  if (i84) {
   _buf_store_time(i69, i53, HEAP32[i15 >> 2] | 0);
   i84 = HEAP32[26773] | 0;
   HEAP32[i84 + 176 >> 2] = HEAP32[i84 + 172 >> 2];
   HEAP32[i50 >> 2] = HEAP32[i53 + 12 >> 2] & 420 | 384;
  } else {
   HEAP32[i69 + 172 >> 2] = 0;
   HEAP32[(HEAP32[26773] | 0) + 176 >> 2] = 0;
   HEAP32[(HEAP32[26773] | 0) + 180 >> 2] = 0;
   HEAP32[(HEAP32[26773] | 0) + 184 >> 2] = 0;
  }
  i69 = (HEAP32[26773] | 0) + 60 | 0;
  HEAP32[i69 >> 2] = HEAP32[i69 >> 2] & -49;
 }
 HEAP32[i54 >> 2] = 0;
 if (!((HEAP32[i26 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) != 0)) {
  if (HEAP32[i49 >> 2] & 146 | 0) {
   if (_access(HEAP32[i15 >> 2] | 0, 2) | 0) i8 = 53;
  } else i8 = 53;
  if ((i8 | 0) == 53) HEAP32[i54 >> 2] = 1;
  i69 = HEAP32[i15 >> 2] | 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i22 >> 2] = _open(i69, 0, i13) | 0;
 }
 if ((HEAP32[i22 >> 2] | 0) < 0) {
  HEAP32[26710] = HEAP32[i57 >> 2];
  if (HEAP32[i23 >> 2] | 0) {
   if ((HEAP32[i49 >> 2] | 0) < 0) if ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 2) {
    i13 = (HEAP32[26773] | 0) + 60 | 0;
    HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 16;
    _check_need_swap(HEAP32[i23 >> 2] | 0);
    do if ((HEAP32[26773] | 0) == (HEAP32[i63 >> 2] | 0)) {
     if (HEAP32[i66 >> 2] | 0) if ((HEAP32[i64 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) break;
     if (HEAP32[i67 >> 2] | 0) if ((HEAP32[i65 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0)) break;
     i13 = (_dir_of_file_exists(HEAP32[i15 >> 2] | 0) | 0) != 0;
     i69 = HEAP32[26773] | 0;
     i84 = HEAP32[i16 >> 2] | 0;
     if (i13) _filemess(i69, i84, 52086, 0); else _filemess(i69, i84, 52097, 0);
     i84 = HEAP32[i16 >> 2] | 0;
     _apply_autocmds_exarg(8, i84 | 0, i84 | 0, 0, HEAP32[26773] | 0, HEAP32[i20 >> 2] | 0) | 0;
     _save_file_ff(HEAP32[26773] | 0);
     HEAP32[i14 >> 2] = 1;
     i81 = HEAP32[i14 >> 2] | 0;
     STACKTOP = i9;
     return i81 | 0;
    } while (0);
    _emsg(53793) | 0;
    HEAP32[i14 >> 2] = 0;
    i81 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i9;
    return i81 | 0;
   }
   i84 = HEAP32[26773] | 0;
   i69 = HEAP32[i16 >> 2] | 0;
   if ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 27) i85 = 52113; else {
    i13 = (HEAP32[(___errno_location() | 0) >> 2] | 0) == 75;
    i85 = i13 ? 52113 : 52128;
   }
   _filemess(i84, i69, i85, 0);
   HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1;
  }
  HEAP32[i14 >> 2] = 0;
  i81 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i9;
  return i81 | 0;
 }
 if ((HEAP32[i24 >> 2] | 0) != 0 & (HEAP32[i54 >> 2] | 0) != 0) i8 = 75; else if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) i8 = 75;
 if ((i8 | 0) == 75) HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1;
 if (!((HEAP32[i29 >> 2] | 0) == 0 | (HEAP32[i27 >> 2] | 0) != 0)) {
  HEAP32[(HEAP32[26773] | 0) + 600 >> 2] = 1;
  HEAP32[(HEAP32[26773] | 0) + 764 >> 2] = 1;
 }
 _check_need_swap(HEAP32[i23 >> 2] | 0);
 L117 : do if (!(HEAP32[i26 >> 2] | 0)) {
  do if ((HEAP32[26773] | 0) == (HEAP32[i63 >> 2] | 0)) {
   if (HEAP32[i66 >> 2] | 0) if ((HEAP32[i64 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) break;
   if (!(HEAP32[i67 >> 2] | 0)) break L117;
   if ((HEAP32[i65 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0)) break L117;
  } while (0);
  _emsg(53793) | 0;
  if (!(HEAP32[i27 >> 2] | 0)) _close(HEAP32[i22 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = 0;
  i81 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i9;
  return i81 | 0;
 } while (0);
 do if ((HEAP32[i50 >> 2] | 0) > 0) if (HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0) {
  if (!(HEAP32[HEAP32[(HEAP32[26773] | 0) + 4 >> 2] >> 2] | 0)) break;
  HEAP32[i70 >> 2] = HEAP32[HEAP32[(HEAP32[26773] | 0) + 4 >> 2] >> 2];
  do if ((HEAP32[i50 >> 2] & 36 | 0) == 32) {
   if ((_stat(HEAP32[i70 >> 2] | 0, i71) | 0) < 0) break;
   if ((HEAP32[i53 + 24 >> 2] | 0) == (HEAP32[i71 + 24 >> 2] | 0)) break;
   if ((_fchown(HEAP32[(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0) + 8 >> 2] | 0, -1, HEAP32[i53 + 24 >> 2] | 0) | 0) != -1) break;
   HEAP32[i50 >> 2] = HEAP32[i50 >> 2] & 384;
  } while (0);
  _mch_setperm(HEAP32[i70 >> 2] | 0, HEAP32[i50 >> 2] | 0) | 0;
 } while (0);
 if ((HEAP32[26812] | 0) == 2) {
  if (!((HEAP32[i27 >> 2] | 0) != 0 | (HEAP32[i26 >> 2] | 0) != 0)) _close(HEAP32[i22 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = 0;
  i81 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i9;
  return i81 | 0;
 }
 HEAP32[26720] = (HEAP32[26720] | 0) + 1;
 i50 = HEAP32[i17 >> 2] | 0;
 HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = (i50 | 0) == 0 ? 1 : i50 | 0;
 HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
 HEAP32[i59 >> 2] = (_vim_strchr(HEAP32[26917] | 0, 109) | 0) != 0 & 1;
 HEAP32[i60 >> 2] = (_vim_strchr(HEAP32[26917] | 0, 100) | 0) != 0 & 1;
 HEAP32[i61 >> 2] = (_vim_strchr(HEAP32[26917] | 0, 120) | 0) != 0 & 1;
 L149 : do if (!(HEAP32[i27 >> 2] | 0)) {
  HEAP32[i72 >> 2] = HEAP32[26710];
  HEAP32[i73 >> 2] = HEAP32[27044];
  if (!(HEAP32[i26 >> 2] | 0)) _close(HEAP32[i22 >> 2] | 0) | 0;
  HEAP32[26710] = 1;
  do if (HEAP32[i25 >> 2] | 0) _apply_autocmds_exarg(49, 0, HEAP32[i16 >> 2] | 0, 0, HEAP32[26773] | 0, HEAP32[i20 >> 2] | 0) | 0; else {
   if (HEAP32[i26 >> 2] | 0) {
    _apply_autocmds_exarg(74, 0, HEAP32[i16 >> 2] | 0, 0, HEAP32[26773] | 0, HEAP32[i20 >> 2] | 0) | 0;
    break;
   }
   i50 = HEAP32[i16 >> 2] | 0;
   if (HEAP32[i23 >> 2] | 0) {
    _apply_autocmds_exarg(11, 0, i50, 0, HEAP32[26773] | 0, HEAP32[i20 >> 2] | 0) | 0;
    break;
   } else {
    _apply_autocmds_exarg(43, i50, HEAP32[i16 >> 2] | 0, 0, 0, HEAP32[i20 >> 2] | 0) | 0;
    break;
   }
  } while (0);
  HEAP32[i59 >> 2] = (_vim_strchr(HEAP32[26917] | 0, 109) | 0) != 0 & 1;
  HEAP32[i60 >> 2] = (_vim_strchr(HEAP32[26917] | 0, 100) | 0) != 0 & 1;
  HEAP32[i61 >> 2] = (_vim_strchr(HEAP32[26917] | 0, 120) | 0) != 0 & 1;
  if ((HEAP32[27044] | 0) == (HEAP32[i73 >> 2] | 0)) HEAP32[26710] = HEAP32[i72 >> 2];
  if (HEAP32[i26 >> 2] | 0) break;
  do if ((HEAP32[26773] | 0) == (HEAP32[i63 >> 2] | 0)) {
   if (HEAP32[i66 >> 2] | 0) if ((HEAP32[i64 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) break;
   if (HEAP32[i67 >> 2] | 0) if ((HEAP32[i65 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0)) break;
   i50 = HEAP32[i15 >> 2] | 0;
   HEAP32[i12 >> 2] = 0;
   i70 = _open(i50, 0, i12) | 0;
   HEAP32[i22 >> 2] = i70;
   if ((i70 | 0) >= 0) break L149;
  } while (0);
  HEAP32[26720] = (HEAP32[26720] | 0) + -1;
  HEAP32[26710] = HEAP32[i57 >> 2];
  if ((HEAP32[i22 >> 2] | 0) < 0) _emsg(52148) | 0; else _emsg(52201) | 0;
  HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1;
  HEAP32[i14 >> 2] = 0;
  i81 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i9;
  return i81 | 0;
 } while (0);
 HEAP32[i38 >> 2] = HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1;
 do if (!((HEAP32[26816] | 0) != 0 | (HEAP32[i25 >> 2] | 0) != 0)) {
  if (HEAP32[i21 >> 2] & 16 | 0) break;
  if (!(HEAP32[i26 >> 2] | 0)) {
   if (HEAP32[i27 >> 2] | 0) break;
   _filemess(HEAP32[26773] | 0, HEAP32[i16 >> 2] | 0, 114072, 0);
   break;
  }
  if (_is_not_a_term() | 0) break;
  if ((HEAP32[26627] | 0) == 0 | (HEAP32[26630] | 0) != 0 | (HEAP32[26628] | 0) != 0) break;
  HEAP32[i41 >> 2] = 52260;
  i12 = HEAP32[i41 >> 2] | 0;
  _gui_write(i12, _strlen(HEAP32[i41 >> 2] | 0) | 0);
 } while (0);
 HEAP32[26710] = 0;
 HEAP32[i45 >> 2] = HEAP32[HEAP32[26773] >> 2];
 L193 : while (1) {
  if (HEAP32[i62 >> 2] | 0) {
   if (HEAP32[i27 >> 2] | 0) {
    HEAP32[i30 >> 2] = 1;
    HEAP32[i31 >> 2] = 0;
   } else {
    if (HEAP32[i26 >> 2] | 0) {
     i8 = 137;
     break;
    }
    if (_lseek(HEAP32[i22 >> 2] | 0, 0, 0) | 0) {
     i8 = 137;
     break;
    }
   }
   while (1) {
    if ((HEAP32[i33 >> 2] | 0) <= (HEAP32[i17 >> 2] | 0)) break;
    i12 = HEAP32[i33 >> 2] | 0;
    HEAP32[i33 >> 2] = i12 + -1;
    _ml_delete(i12, 0) | 0;
   }
   HEAP32[i62 >> 2] = 0;
  }
  L207 : do if (HEAP32[i52 >> 2] | 0) HEAP32[i52 >> 2] = 0; else {
   do if (HEAP32[i20 >> 2] | 0) {
    if (!(HEAP32[(HEAP32[i20 >> 2] | 0) + 84 >> 2] | 0)) break;
    HEAP32[i51 >> 2] = _get_fileformat_force(HEAP32[26773] | 0, HEAP32[i20 >> 2] | 0) | 0;
    HEAP32[i59 >> 2] = 0;
    HEAP32[i60 >> 2] = 0;
    HEAP32[i61 >> 2] = 0;
    break L207;
   } while (0);
   if (HEAP32[(HEAP32[26773] | 0) + 584 >> 2] | 0) {
    HEAP32[i51 >> 2] = 0;
    break;
   }
   if (!(HEAPU8[HEAP32[26917] >> 0] | 0)) {
    HEAP32[i51 >> 2] = _get_fileformat(HEAP32[26773] | 0) | 0;
    break;
   } else {
    HEAP32[i51 >> 2] = -1;
    break;
   }
  } while (0);
  if (!(HEAP32[i43 >> 2] | 0)) {
   HEAP32[i48 >> 2] = 0;
   HEAP32[i42 >> 2] = 0;
   HEAP32[i55 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i56 >> 2] = HEAP32[i19 >> 2];
  }
  L224 : while (1) {
   if (HEAP32[i46 >> 2] | 0) break L193;
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break L193;
   if (!(HEAP32[i43 >> 2] | 0)) {
    i12 = 65536 + (HEAP32[i48 >> 2] | 0) | 0;
    HEAP32[i40 >> 2] = i12;
    HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) > 1048576 ? 1048576 : i12;
   }
   do if ((HEAP32[i40 >> 2] | 0) < 0) i8 = 161; else {
    if ((HEAP32[i48 >> 2] | 0) >= 2147483647 ? 1 : ((HEAP32[i40 >> 2] | 0) + (HEAP32[i48 >> 2] | 0) + 1 | 0) < 0) {
     i8 = 161;
     break;
    }
    do if (!(HEAP32[i43 >> 2] | 0)) {
     while (1) {
      if ((HEAP32[i40 >> 2] | 0) < 10) break;
      i12 = _lalloc((HEAP32[i40 >> 2] | 0) + (HEAP32[i48 >> 2] | 0) + 1 | 0, 0) | 0;
      HEAP32[i36 >> 2] = i12;
      if (i12 | 0) break;
      HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) >>> 1;
     }
     if (!(HEAP32[i36 >> 2] | 0)) {
      i8 = 168;
      break L193;
     }
     if (HEAP32[i48 >> 2] | 0) {
      i12 = HEAP32[i48 >> 2] | 0;
      _memmove(HEAP32[i36 >> 2] | 0, (HEAP32[i34 >> 2] | 0) + (0 - i12) | 0, i12 | 0) | 0;
     }
     _vim_free(HEAP32[i35 >> 2] | 0);
     HEAP32[i35 >> 2] = HEAP32[i36 >> 2];
     HEAP32[i34 >> 2] = (HEAP32[i35 >> 2] | 0) + (HEAP32[i48 >> 2] | 0);
     HEAP32[i37 >> 2] = HEAP32[i35 >> 2];
     do if (HEAP32[i27 >> 2] | 0) {
      if ((HEAP32[i30 >> 2] | 0) > (HEAP32[i17 >> 2] | 0)) {
       HEAP32[i40 >> 2] = 0;
       break;
      }
      HEAP32[i76 >> 2] = 0;
      while (1) {
       i12 = _ml_get(HEAP32[i30 >> 2] | 0) | 0;
       HEAP32[i41 >> 2] = i12 + (HEAP32[i31 >> 2] | 0);
       HEAP32[i74 >> 2] = _strlen(HEAP32[i41 >> 2] | 0) | 0;
       if (((HEAP32[i76 >> 2] | 0) + (HEAP32[i74 >> 2] | 0) + 1 | 0) > (HEAP32[i40 >> 2] | 0)) break;
       HEAP32[i75 >> 2] = 0;
       while (1) {
        if ((HEAP32[i75 >> 2] | 0) >= (HEAP32[i74 >> 2] | 0)) break;
        if ((HEAPU8[(HEAP32[i41 >> 2] | 0) + (HEAP32[i75 >> 2] | 0) >> 0] | 0) == 10) {
         i12 = HEAP32[i34 >> 2] | 0;
         i15 = HEAP32[i76 >> 2] | 0;
         HEAP32[i76 >> 2] = i15 + 1;
         HEAP8[i12 + i15 >> 0] = 0;
        } else {
         i15 = HEAP8[(HEAP32[i41 >> 2] | 0) + (HEAP32[i75 >> 2] | 0) >> 0] | 0;
         i12 = HEAP32[i34 >> 2] | 0;
         i65 = HEAP32[i76 >> 2] | 0;
         HEAP32[i76 >> 2] = i65 + 1;
         HEAP8[i12 + i65 >> 0] = i15;
        }
        HEAP32[i75 >> 2] = (HEAP32[i75 >> 2] | 0) + 1;
       }
       i15 = HEAP32[i34 >> 2] | 0;
       i65 = HEAP32[i76 >> 2] | 0;
       HEAP32[i76 >> 2] = i65 + 1;
       HEAP8[i15 + i65 >> 0] = 10;
       HEAP32[i31 >> 2] = 0;
       i65 = (HEAP32[i30 >> 2] | 0) + 1 | 0;
       HEAP32[i30 >> 2] = i65;
       if ((i65 | 0) > (HEAP32[i17 >> 2] | 0)) {
        i8 = 190;
        break;
       }
      }
      if ((i8 | 0) == 190) {
       i8 = 0;
       if (!(HEAP32[(HEAP32[26773] | 0) + 600 >> 2] | 0)) HEAP32[i76 >> 2] = (HEAP32[i76 >> 2] | 0) + -1;
       HEAP32[i40 >> 2] = HEAP32[i76 >> 2];
       break;
      }
      HEAP32[i74 >> 2] = (HEAP32[i40 >> 2] | 0) - (HEAP32[i76 >> 2] | 0);
      HEAP32[i75 >> 2] = 0;
      while (1) {
       if ((HEAP32[i75 >> 2] | 0) >= (HEAP32[i74 >> 2] | 0)) break;
       if ((HEAPU8[(HEAP32[i41 >> 2] | 0) + (HEAP32[i75 >> 2] | 0) >> 0] | 0) == 10) {
        i65 = HEAP32[i34 >> 2] | 0;
        i15 = HEAP32[i76 >> 2] | 0;
        HEAP32[i76 >> 2] = i15 + 1;
        HEAP8[i65 + i15 >> 0] = 0;
       } else {
        i15 = HEAP8[(HEAP32[i41 >> 2] | 0) + (HEAP32[i75 >> 2] | 0) >> 0] | 0;
        i65 = HEAP32[i34 >> 2] | 0;
        i12 = HEAP32[i76 >> 2] | 0;
        HEAP32[i76 >> 2] = i12 + 1;
        HEAP8[i65 + i12 >> 0] = i15;
       }
       HEAP32[i75 >> 2] = (HEAP32[i75 >> 2] | 0) + 1;
      }
      HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[i74 >> 2] | 0);
     } else HEAP32[i40 >> 2] = _read_eintr(HEAP32[i22 >> 2] | 0, HEAP32[i34 >> 2] | 0, HEAP32[i40 >> 2] | 0) | 0; while (0);
     if (!((HEAP32[i40 >> 2] | 0) <= 0 & (HEAP32[i40 >> 2] | 0) < 0)) break;
     HEAP32[i46 >> 2] = 1;
    } while (0);
    HEAP32[i43 >> 2] = 0;
    if ((HEAP32[i40 >> 2] | 0) <= 0) break L193;
    HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) + (HEAP32[i40 >> 2] | 0);
    if ((HEAP32[i51 >> 2] | 0) != -1) break;
    do if ((HEAP32[i60 >> 2] | 0) != 0 | (HEAP32[i61 >> 2] | 0) != 0) {
     if (HEAP32[i59 >> 2] | 0) HEAP32[i59 >> 2] = 1;
     HEAP32[i41 >> 2] = HEAP32[i34 >> 2];
     while (1) {
      if ((HEAP32[i41 >> 2] | 0) >>> 0 >= ((HEAP32[i34 >> 2] | 0) + (HEAP32[i40 >> 2] | 0) | 0) >>> 0) break;
      if ((HEAPU8[HEAP32[i41 >> 2] >> 0] | 0) == 10) {
       i8 = 205;
       break;
      }
      if (HEAP32[i59 >> 2] | 0 ? (HEAPU8[HEAP32[i41 >> 2] >> 0] | 0) == 13 : 0) HEAP32[i59 >> 2] = (HEAP32[i59 >> 2] | 0) + 1;
      HEAP32[i41 >> 2] = (HEAP32[i41 >> 2] | 0) + 1;
     }
     L294 : do if ((i8 | 0) == 205) {
      i8 = 0;
      L296 : do if (HEAP32[i61 >> 2] | 0) {
       do if (HEAP32[i60 >> 2] | 0) {
        if ((HEAP32[i41 >> 2] | 0) >>> 0 <= (HEAP32[i34 >> 2] | 0) >>> 0) break;
        if ((HEAPU8[(HEAP32[i41 >> 2] | 0) + -1 >> 0] | 0) == 13) break L296;
       } while (0);
       HEAP32[i51 >> 2] = 0;
       break L294;
      } while (0);
      HEAP32[i51 >> 2] = 1;
     } while (0);
     if (!((HEAP32[i51 >> 2] | 0) == 0 & (HEAP32[i59 >> 2] | 0) != 0)) {
      if (!((HEAP32[i51 >> 2] | 0) == -1 & (HEAP32[i59 >> 2] | 0) == 1)) break;
      HEAP32[i51 >> 2] = _default_fileformat() | 0;
      break;
     }
     HEAP32[i59 >> 2] = 1;
     HEAP32[i61 >> 2] = 1;
     while (1) {
      if ((HEAP32[i41 >> 2] | 0) >>> 0 < (HEAP32[i34 >> 2] | 0) >>> 0) break;
      if ((HEAPU8[HEAP32[i41 >> 2] >> 0] | 0) == 13) break;
      HEAP32[i41 >> 2] = (HEAP32[i41 >> 2] | 0) + -1;
     }
     if ((HEAP32[i41 >> 2] | 0) >>> 0 < (HEAP32[i34 >> 2] | 0) >>> 0) break;
     HEAP32[i41 >> 2] = HEAP32[i34 >> 2];
     while (1) {
      if ((HEAP32[i41 >> 2] | 0) >>> 0 >= ((HEAP32[i34 >> 2] | 0) + (HEAP32[i40 >> 2] | 0) | 0) >>> 0) break;
      do if ((HEAPU8[HEAP32[i41 >> 2] >> 0] | 0) == 10) HEAP32[i61 >> 2] = (HEAP32[i61 >> 2] | 0) + 1; else {
       if ((HEAPU8[HEAP32[i41 >> 2] >> 0] | 0) != 13) break;
       HEAP32[i59 >> 2] = (HEAP32[i59 >> 2] | 0) + 1;
      } while (0);
      HEAP32[i41 >> 2] = (HEAP32[i41 >> 2] | 0) + 1;
     }
     if ((HEAP32[i59 >> 2] | 0) <= (HEAP32[i61 >> 2] | 0)) break;
     HEAP32[i51 >> 2] = 2;
    } while (0);
    if ((HEAP32[i51 >> 2] | 0) == -1 & (HEAP32[i59 >> 2] | 0) != 0) HEAP32[i51 >> 2] = 2;
    if ((HEAP32[i51 >> 2] | 0) == -1) HEAP32[i51 >> 2] = _default_fileformat() | 0;
    if (!(HEAP32[i29 >> 2] | 0)) break;
    _set_fileformat(HEAP32[i51 >> 2] | 0, 4);
   } while (0);
   if ((i8 | 0) == 161) {
    i8 = 0;
    HEAP32[i44 >> 2] = (HEAP32[i44 >> 2] | 0) + 1;
    HEAP8[HEAP32[i34 >> 2] >> 0] = 10;
    HEAP32[i40 >> 2] = 1;
   }
   i15 = (HEAP32[i51 >> 2] | 0) == 2;
   HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + -1;
   L335 : do if (i15) {
    L337 : while (1) {
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
     i12 = (HEAP32[i40 >> 2] | 0) + -1 | 0;
     HEAP32[i40 >> 2] = i12;
     if ((i12 | 0) < 0) break L335;
     i12 = HEAP8[HEAP32[i34 >> 2] >> 0] | 0;
     HEAP8[i32 >> 0] = i12;
     do if (i12 & 255 | 0) {
      if ((HEAPU8[i32 >> 0] | 0) == 13) break;
      if ((HEAPU8[i32 >> 0] | 0) == 10) break;
      continue L337;
     } while (0);
     do if (!(HEAPU8[i32 >> 0] | 0)) HEAP8[HEAP32[i34 >> 2] >> 0] = 10; else {
      if ((HEAPU8[i32 >> 0] | 0) == 10) {
       HEAP8[HEAP32[i34 >> 2] >> 0] = 13;
       break;
      }
      if (!(HEAP32[i55 >> 2] | 0)) {
       HEAP8[HEAP32[i34 >> 2] >> 0] = 0;
       HEAP32[i39 >> 2] = (HEAP32[i34 >> 2] | 0) - (HEAP32[i37 >> 2] | 0) + 1;
       if (!(_ml_append(HEAP32[i33 >> 2] | 0, HEAP32[i37 >> 2] | 0, HEAP32[i39 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0)) {
        i8 = 250;
        break L337;
       }
       HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) + 1;
       i12 = (HEAP32[i56 >> 2] | 0) + -1 | 0;
       HEAP32[i56 >> 2] = i12;
       if (!i12) {
        i8 = 252;
        break L337;
       }
      } else HEAP32[i55 >> 2] = (HEAP32[i55 >> 2] | 0) + -1;
      HEAP32[i37 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
     } while (0);
    }
    if ((i8 | 0) == 250) {
     i8 = 0;
     HEAP32[i46 >> 2] = 1;
     break;
    } else if ((i8 | 0) == 252) {
     i8 = 0;
     HEAP32[i46 >> 2] = 1;
     HEAP32[i37 >> 2] = HEAP32[i34 >> 2];
     break;
    }
   } else {
    L361 : while (1) {
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
     i12 = (HEAP32[i40 >> 2] | 0) + -1 | 0;
     HEAP32[i40 >> 2] = i12;
     if ((i12 | 0) < 0) break L335;
     i12 = HEAP8[HEAP32[i34 >> 2] >> 0] | 0;
     HEAP8[i32 >> 0] = i12;
     do if (i12 & 255 | 0) {
      if ((HEAPU8[i32 >> 0] | 0) == 10) break;
      continue L361;
     } while (0);
     if (!(HEAPU8[i32 >> 0] | 0)) HEAP8[HEAP32[i34 >> 2] >> 0] = 10; else {
      if (!(HEAP32[i55 >> 2] | 0)) {
       HEAP8[HEAP32[i34 >> 2] >> 0] = 0;
       HEAP32[i39 >> 2] = (HEAP32[i34 >> 2] | 0) - (HEAP32[i37 >> 2] | 0) + 1;
       L373 : do if ((HEAP32[i51 >> 2] | 0) == 1) {
        do if ((HEAP32[i34 >> 2] | 0) >>> 0 > (HEAP32[i37 >> 2] | 0) >>> 0) {
         if ((HEAPU8[(HEAP32[i34 >> 2] | 0) + -1 >> 0] | 0) != 13) break;
         HEAP8[(HEAP32[i34 >> 2] | 0) + -1 >> 0] = 0;
         HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + -1;
         break L373;
        } while (0);
        if ((HEAP32[i47 >> 2] | 0) == 1) break;
        if (!((HEAP32[i61 >> 2] | 0) == 0 | (HEAP32[i26 >> 2] | 0) != 0)) {
         if (HEAP32[i27 >> 2] | 0) break L224;
         if (!(_lseek(HEAP32[i22 >> 2] | 0, 0, 0) | 0)) break L224;
        }
        HEAP32[i47 >> 2] = 1;
       } while (0);
       if (!(_ml_append(HEAP32[i33 >> 2] | 0, HEAP32[i37 >> 2] | 0, HEAP32[i39 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0)) {
        i8 = 277;
        break;
       }
       HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) + 1;
       i12 = (HEAP32[i56 >> 2] | 0) + -1 | 0;
       HEAP32[i56 >> 2] = i12;
       if (!i12) {
        i8 = 279;
        break;
       }
      } else HEAP32[i55 >> 2] = (HEAP32[i55 >> 2] | 0) + -1;
      HEAP32[i37 >> 2] = (HEAP32[i34 >> 2] | 0) + 1;
     }
    }
    if ((i8 | 0) == 277) {
     i8 = 0;
     HEAP32[i46 >> 2] = 1;
     break;
    } else if ((i8 | 0) == 279) {
     i8 = 0;
     HEAP32[i46 >> 2] = 1;
     HEAP32[i37 >> 2] = HEAP32[i34 >> 2];
     break;
    }
   } while (0);
   HEAP32[i48 >> 2] = (HEAP32[i34 >> 2] | 0) - (HEAP32[i37 >> 2] | 0);
   _ui_breakcheck();
  }
  HEAP32[i51 >> 2] = 0;
  if (HEAP32[i29 >> 2] | 0) _set_fileformat(0, 4);
  HEAP32[i62 >> 2] = 1;
  HEAP32[i52 >> 2] = 1;
 }
 if ((i8 | 0) == 137) HEAP32[i46 >> 2] = 1; else if ((i8 | 0) == 168) {
  _do_outofmem_msg((HEAP32[i40 >> 2] << 1) + (HEAP32[i48 >> 2] | 0) + 1 | 0);
  HEAP32[i46 >> 2] = 1;
 }
 if ((HEAP32[i46 >> 2] | 0) != 0 & (HEAP32[i56 >> 2] | 0) == 0) HEAP32[i46 >> 2] = 0;
 L404 : do if (!(HEAP32[i46 >> 2] | 0)) {
  if (!((HEAP32[26834] | 0) == 0 & (HEAP32[i48 >> 2] | 0) != 0)) break;
  do if ((HEAP32[i51 >> 2] | 0) == 1 ? (HEAP32[(HEAP32[26773] | 0) + 584 >> 2] | 0) == 0 : 0) {
   if ((HEAPU8[HEAP32[i37 >> 2] >> 0] | 0) != 26) break;
   if ((HEAP32[i34 >> 2] | 0) == ((HEAP32[i37 >> 2] | 0) + 1 | 0)) break L404;
  } while (0);
  if (HEAP32[i29 >> 2] | 0) HEAP32[(HEAP32[26773] | 0) + 600 >> 2] = 0;
  HEAP8[HEAP32[i34 >> 2] >> 0] = 0;
  HEAP32[i39 >> 2] = (HEAP32[i34 >> 2] | 0) - (HEAP32[i37 >> 2] | 0) + 1;
  if (!(_ml_append(HEAP32[i33 >> 2] | 0, HEAP32[i37 >> 2] | 0, HEAP32[i39 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0)) {
   HEAP32[i46 >> 2] = 1;
   break;
  } else {
   i56 = (HEAP32[i33 >> 2] | 0) + 1 | 0;
   HEAP32[i33 >> 2] = i56;
   HEAP32[i58 >> 2] = i56;
   break;
  }
 } while (0);
 if (HEAP32[i29 >> 2] | 0) _save_file_ff(HEAP32[26773] | 0);
 i33 = HEAP32[i22 >> 2] | 0;
 do if ((HEAP32[i27 >> 2] | 0) != 0 | (HEAP32[i26 >> 2] | 0) != 0) {
  HEAP32[i77 >> 2] = _fcntl(i33, 1, i11) | 0;
  if ((HEAP32[i77 >> 2] | 0) < 0) break;
  if (HEAP32[i77 >> 2] & 1 | 0) break;
  i39 = HEAP32[i22 >> 2] | 0;
  HEAP32[i10 >> 2] = HEAP32[i77 >> 2] | 1;
  _fcntl(i39, 2, i10) | 0;
 } else _close(i33) | 0; while (0);
 _vim_free(HEAP32[i35 >> 2] | 0);
 if (HEAP32[i26 >> 2] | 0) {
  _close(0) | 0;
  _dup(2) | 0;
 }
 HEAP32[26720] = (HEAP32[26720] | 0) + -1;
 if (!(HEAP32[26816] | 0)) {
  do if ((HEAP32[i23 >> 2] | 0) != 0 & (HEAP32[i38 >> 2] | 0) != 0) {
   if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) break;
   _ml_delete(HEAP32[HEAP32[26773] >> 2] | 0, 0) | 0;
   HEAP32[i45 >> 2] = (HEAP32[i45 >> 2] | 0) + -1;
  } while (0);
  i38 = (HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i45 >> 2] | 0) | 0;
  HEAP32[i45 >> 2] = i38;
  HEAP32[i45 >> 2] = (HEAP32[i42 >> 2] | 0) == 0 ? 0 : i38;
  do if ((HEAP32[i23 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) != 0) _redraw_curbuf_later(40); else {
   if (!(HEAP32[i45 >> 2] | 0)) break;
   _appended_lines_mark(HEAP32[i17 >> 2] | 0, HEAP32[i45 >> 2] | 0);
  } while (0);
  if (HEAP32[26834] | 0) {
   do if (!(HEAP32[i21 >> 2] & 16)) {
    _filemess(HEAP32[26773] | 0, HEAP32[i16 >> 2] | 0, 92420, 0);
    if (!(HEAP32[i23 >> 2] | 0)) break;
    HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1;
   } while (0);
   HEAP32[26710] = HEAP32[i57 >> 2];
   HEAP32[i14 >> 2] = 1;
   i81 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i9;
   return i81 | 0;
  }
  do if (!(HEAP32[i25 >> 2] | 0)) {
   if (HEAP32[i21 >> 2] & 16 | 0) break;
   _msg_add_fname(HEAP32[26773] | 0, HEAP32[i16 >> 2] | 0);
   HEAP8[i32 >> 0] = 0;
   if ((HEAP32[i49 >> 2] & 61440 | 0) == 4096) {
    _strcat(HEAP32[26882] | 0, 52282) | 0;
    HEAP8[i32 >> 0] = 1;
   }
   if (HEAP32[(HEAP32[26773] | 0) + 676 >> 2] | 0) {
    i38 = HEAP32[26882] | 0;
    i35 = (_shortmess(114) | 0) != 0;
    _strcat(i38, i35 ? 74545 : 52296) | 0;
    HEAP8[i32 >> 0] = 1;
   }
   if (HEAP32[i58 >> 2] | 0) {
    _msg_add_eol();
    HEAP8[i32 >> 0] = 1;
   }
   if ((HEAP32[i47 >> 2] | 0) == 1) {
    _strcat(HEAP32[26882] | 0, 52307) | 0;
    HEAP8[i32 >> 0] = 1;
   }
   if (HEAP32[i44 >> 2] | 0) {
    _strcat(HEAP32[26882] | 0, 52320) | 0;
    HEAP8[i32 >> 0] = 1;
   }
   if (HEAP32[i46 >> 2] | 0) {
    _strcat(HEAP32[26882] | 0, 52339) | 0;
    HEAP8[i32 >> 0] = 1;
   }
   if (_msg_add_fileformat(HEAP32[i51 >> 2] | 0) | 0) HEAP8[i32 >> 0] = 1;
   _msg_add_lines(HEAPU8[i32 >> 0] | 0, HEAP32[i45 >> 2] | 0, HEAP32[i42 >> 2] | 0);
   if (HEAP32[26706] | 0) {
    _vim_free(HEAP32[26706] | 0);
    HEAP32[26706] = 0;
   }
   HEAP32[26705] = 1;
   i35 = HEAP32[26882] | 0;
   if ((HEAP32[i26 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) != 0) HEAP32[i41 >> 2] = _msg_may_trunc(0, i35) | 0; else HEAP32[i41 >> 2] = _msg_trunc_attr(i35, 0, 0) | 0;
   if ((HEAP32[i26 >> 2] | 0) != 0 | (HEAP32[i27 >> 2] | 0) != 0 | (HEAP32[26806] | 0) != 0) i8 = 341; else if (!((HEAP32[27044] | 0) == 0 | (HEAP32[26721] | 0) != 0)) i8 = 341;
   if ((i8 | 0) == 341) _set_keep_msg(HEAP32[i41 >> 2] | 0, 0);
   HEAP32[26705] = 0;
  } while (0);
  if ((HEAP32[i23 >> 2] | 0) != 0 & (HEAP32[i46 >> 2] | 0) != 0) HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1;
  _u_clearline();
  i41 = HEAP32[i17 >> 2] | 0;
  if (HEAP32[26798] | 0) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i41 + (HEAP32[i45 >> 2] | 0); else HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i41 + 1;
  _check_cursor_lnum();
  _beginline(5);
  HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
  HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
  HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i45 >> 2] | 0);
  HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = 0;
 }
 HEAP32[26710] = HEAP32[i57 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 760 >> 2] = HEAP32[i58 >> 2];
 if (HEAP32[i21 >> 2] & 32 | 0) _u_find_first_changed();
 do if (!((HEAP32[i26 >> 2] | 0) != 0 | (HEAP32[i28 >> 2] | 0) != 0)) {
  if (!((HEAP32[i27 >> 2] | 0) == 0 | (HEAP32[i16 >> 2] | 0) != 0)) break;
  HEAP32[i78 >> 2] = HEAP32[26710];
  HEAP32[i79 >> 2] = HEAP32[27044];
  if (HEAP32[i29 >> 2] | 0) _save_file_ff(HEAP32[26773] | 0);
  HEAP32[26710] = 1;
  L503 : do if (HEAP32[i25 >> 2] | 0) _apply_autocmds_exarg(48, 0, HEAP32[i16 >> 2] | 0, 0, HEAP32[26773] | 0, HEAP32[i20 >> 2] | 0) | 0; else {
   do if (!(HEAP32[i23 >> 2] | 0)) {
    if ((HEAP32[i27 >> 2] | 0) != 0 & (HEAP32[i16 >> 2] | 0) != 0) break;
    i21 = HEAP32[i16 >> 2] | 0;
    _apply_autocmds_exarg(42, i21 | 0, i21 | 0, 0, 0, HEAP32[i20 >> 2] | 0) | 0;
    break L503;
   } while (0);
   _apply_autocmds_exarg(10, 0, HEAP32[i16 >> 2] | 0, 0, HEAP32[26773] | 0, HEAP32[i20 >> 2] | 0) | 0;
   if (HEAP32[25266] | 0) break;
   if (!(HEAPU8[HEAP32[(HEAP32[26773] | 0) + 624 >> 2] >> 0] | 0)) break;
   i21 = HEAP32[26773] | 0;
   _apply_autocmds(44, HEAP32[i21 + 624 >> 2] | 0, HEAP32[i21 + 76 >> 2] | 0, 1, i21 | 0) | 0;
  } while (0);
  if ((HEAP32[27044] | 0) != (HEAP32[i79 >> 2] | 0)) break;
  HEAP32[26710] = HEAP32[i78 >> 2];
 } while (0);
 if ((HEAP32[26816] | 0) != 0 & (HEAP32[i46 >> 2] | 0) != 0) {
  HEAP32[i14 >> 2] = 0;
  i81 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i9;
  return i81 | 0;
 } else {
  HEAP32[i14 >> 2] = 1;
  i81 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i9;
  return i81 | 0;
 }
 return 0;
}

function _do_one_cmd(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i7 = i6 + 316 | 0;
 i8 = i6 + 312 | 0;
 i9 = i6 + 308 | 0;
 i10 = i6 + 304 | 0;
 i11 = i6 + 300 | 0;
 i12 = i6 + 296 | 0;
 i13 = i6 + 292 | 0;
 i14 = i6 + 288 | 0;
 i15 = i6 + 284 | 0;
 i16 = i6 + 184 | 0;
 i17 = i6 + 180 | 0;
 i18 = i6 + 176 | 0;
 i19 = i6 + 172 | 0;
 i20 = i6 + 168 | 0;
 i21 = i6 + 36 | 0;
 i22 = i6 + 32 | 0;
 i23 = i6 + 28 | 0;
 i24 = i6 + 24 | 0;
 i25 = i6 + 20 | 0;
 i26 = i6 + 16 | 0;
 i27 = i6 + 12 | 0;
 i28 = i6 + 8 | 0;
 i29 = i6 + 4 | 0;
 i30 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i17 >> 2] = -1;
 HEAP32[i18 >> 2] = HEAP32[26710];
 HEAP32[i19 >> 2] = -1;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i24 >> 2] = 1;
 i4 = i16;
 i3 = i4 + 100 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i3 | 0));
 HEAP32[i16 + 36 >> 2] = 1;
 HEAP32[i16 + 40 >> 2] = 1;
 if (HEAP32[25230] | 0) if (!(_getline_equal(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, 8) | 0)) HEAP32[25230] = (HEAP32[25230] | 0) + -1;
 _memcpy(i21 | 0, 108508, 132) | 0;
 _memset(108508, 0, 132) | 0;
 if ((HEAPU8[HEAP32[HEAP32[i7 >> 2] >> 2] >> 0] | 0) == 35) {
  if ((HEAPU8[(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + 1 >> 0] | 0) != 33) i5 = 6;
 } else i5 = 6;
 L7 : do if ((i5 | 0) == 6) {
  HEAP32[i16 + 8 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
  L9 : while (1) {
   while (1) {
    if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) == 32) i31 = 1; else if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) == 9) i31 = 1; else i31 = (HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) == 58;
    i4 = i16 + 8 | 0;
    i32 = HEAP32[i4 >> 2] | 0;
    if (!i31) break;
    HEAP32[i4 >> 2] = i32 + 1;
   }
   do if ((HEAPU8[i32 >> 0] | 0) == 0 & (HEAP32[26798] | 0) != 0) {
    if (!(_getline_equal(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, 7) | 0)) if (!(_getline_equal(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, 6) | 0)) break;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
     HEAP32[i16 + 8 >> 2] = 74578;
     HEAP32[25226] = 1;
    }
   } while (0);
   if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) == 34) break L7;
   if (!(HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0)) {
    i5 = 20;
    break;
   }
   HEAP32[i11 >> 2] = _skip_range(HEAP32[i16 + 8 >> 2] | 0, 0) | 0;
   do switch (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) {
   case 97:
    {
     if (!(_checkforcmd(i16 + 8 | 0, 45696, 3) | 0)) {
      i5 = 100;
      break L9;
     }
     HEAP32[27128] = HEAP32[27128] | 64;
     continue L9;
     break;
    }
   case 98:
    {
     if (_checkforcmd(i16 + 8 | 0, 45706, 3) | 0) {
      HEAP32[27128] = HEAP32[27128] | 32;
      continue L9;
     }
     if (_checkforcmd(i16 + 8 | 0, 45717, 3) | 0) continue L9;
     if (!(_checkforcmd(i16 + 8 | 0, 45724, 2) | 0)) {
      i5 = 100;
      break L9;
     }
     HEAP32[27128] = HEAP32[27128] | 8;
     continue L9;
     break;
    }
   case 99:
    {
     if (!(_checkforcmd(i16 + 8 | 0, 65110, 4) | 0)) {
      i5 = 100;
      break L9;
     }
     continue L9;
     break;
    }
   case 107:
    {
     if (_checkforcmd(i16 + 8 | 0, 45733, 3) | 0) {
      HEAP32[27131] = 1;
      continue L9;
     }
     if (_checkforcmd(i16 + 8 | 0, 45743, 5) | 0) {
      HEAP32[27130] = 1;
      continue L9;
     }
     if (_checkforcmd(i16 + 8 | 0, 45751, 5) | 0) {
      HEAP32[27134] = 1;
      continue L9;
     }
     if (!(_checkforcmd(i16 + 8 | 0, 45764, 5) | 0)) {
      i5 = 100;
      break L9;
     }
     HEAP32[27132] = 1;
     continue L9;
     break;
    }
   case 102:
    {
     if (!(_checkforcmd(i11, 45774, 4) | 0)) {
      i5 = 100;
      break L9;
     }
     if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) {
      i5 = 100;
      break L9;
     }
     if (_ends_excmd(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0) {
      i5 = 100;
      break L9;
     }
     if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 33) {
      HEAP32[27159] = 1;
      HEAP32[i11 >> 2] = _skipwhite((HEAP32[i11 >> 2] | 0) + 1 | 0) | 0;
      if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) {
       i5 = 100;
       break L9;
      }
      if (_ends_excmd(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0) {
       i5 = 100;
       break L9;
      }
     }
     HEAP32[i11 >> 2] = _skip_vimgrep_pat(HEAP32[i11 >> 2] | 0, i25, 0) | 0;
     if (!(HEAP32[i11 >> 2] | 0)) {
      i5 = 100;
      break L9;
     }
     if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) {
      i5 = 100;
      break L9;
     }
     HEAP32[27137] = _vim_regcomp(HEAP32[i25 >> 2] | 0, 1) | 0;
     if (!(HEAP32[27137] | 0)) {
      i5 = 100;
      break L9;
     }
     HEAP32[i16 + 8 >> 2] = HEAP32[i11 >> 2];
     continue L9;
     break;
    }
   case 104:
    {
     if ((HEAP32[i11 >> 2] | 0) != (HEAP32[i16 + 8 >> 2] | 0)) {
      i5 = 100;
      break L9;
     }
     if (!(_checkforcmd(i11, 64137, 3) | 0)) {
      i5 = 100;
      break L9;
     }
     if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) {
      i5 = 100;
      break L9;
     }
     if (_ends_excmd(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0) {
      i5 = 100;
      break L9;
     }
     HEAP32[i16 + 8 >> 2] = HEAP32[i11 >> 2];
     HEAP32[27127] = 1;
     continue L9;
     break;
    }
   case 108:
    {
     if (_checkforcmd(i16 + 8 | 0, 45781, 3) | 0) {
      HEAP32[27133] = 1;
      continue L9;
     }
     if (!(_checkforcmd(i16 + 8 | 0, 45791, 5) | 0)) {
      i5 = 100;
      break L9;
     }
     HEAP32[27128] = HEAP32[27128] | 64;
     continue L9;
     break;
    }
   case 110:
    {
     if (!(_checkforcmd(i16 + 8 | 0, 45801, 3) | 0)) {
      if (!(_checkforcmd(i16 + 8 | 0, 45811, 3) | 0)) {
       i5 = 100;
       break L9;
      }
      HEAP32[27135] = 1;
      continue L9;
     }
     if (!(HEAP32[27136] | 0)) {
      HEAP32[27136] = _vim_strsave(HEAP32[26914] | 0) | 0;
      _set_string_option_direct(65703, -1, 63367, 1, -6);
     }
     continue L9;
     break;
    }
   case 114:
    {
     if (!(_checkforcmd(i16 + 8 | 0, 45822, 6) | 0)) {
      i5 = 100;
      break L9;
     }
     HEAP32[27128] = HEAP32[27128] | 32;
     continue L9;
     break;
    }
   case 115:
    {
     if (_checkforcmd(i16 + 8 | 0, 45833, 3) | 0) continue L9;
     if (!(_checkforcmd(i16 + 8 | 0, 45841, 3) | 0)) {
      i5 = 100;
      break L9;
     }
     if ((HEAP32[i19 >> 2] | 0) == -1) HEAP32[i19 >> 2] = HEAP32[26809];
     HEAP32[26809] = (HEAP32[26809] | 0) + 1;
     if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) == 33) if ((HEAPU8[(HEAP32[i16 + 8 >> 2] | 0) + -1 >> 0] | 0) != 32) if ((HEAPU8[(HEAP32[i16 + 8 >> 2] | 0) + -1 >> 0] | 0) != 9) {
      HEAP32[i16 + 8 >> 2] = _skipwhite((HEAP32[i16 + 8 >> 2] | 0) + 1 | 0) | 0;
      HEAP32[26810] = (HEAP32[26810] | 0) + 1;
      HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
     }
     continue L9;
     break;
    }
   case 116:
    {
     i4 = i16 + 8 | 0;
     if (!(_checkforcmd(i11, 63227, 3) | 0)) {
      if (!(_checkforcmd(i4, 45848, 2) | 0)) {
       i5 = 100;
       break L9;
      }
      HEAP32[27128] = HEAP32[27128] | 4;
      continue L9;
     }
     HEAP32[i26 >> 2] = _get_address(i16, i4, 5, HEAP32[i16 + 24 >> 2] | 0, 0, 1) | 0;
     if ((HEAP32[i26 >> 2] | 0) == 2147483647) HEAP32[27129] = (_tabpage_index(HEAP32[26886] | 0) | 0) + 1; else {
      if ((HEAP32[i26 >> 2] | 0) < 0) {
       i5 = 82;
       break L9;
      }
      i4 = HEAP32[i26 >> 2] | 0;
      if ((i4 | 0) > (_current_tab_nr(0) | 0)) {
       i5 = 82;
       break L9;
      }
      HEAP32[27129] = (HEAP32[i26 >> 2] | 0) + 1;
     }
     HEAP32[i16 + 8 >> 2] = HEAP32[i11 >> 2];
     continue L9;
     break;
    }
   case 117:
    {
     if (!(_checkforcmd(i16 + 8 | 0, 45856, 3) | 0)) {
      i5 = 100;
      break L9;
     }
     if ((HEAP32[i19 >> 2] | 0) == -1) HEAP32[i19 >> 2] = HEAP32[26809];
     HEAP32[26809] = 0;
     continue L9;
     break;
    }
   case 118:
    {
     if (_checkforcmd(i16 + 8 | 0, 45865, 4) | 0) {
      HEAP32[27128] = HEAP32[27128] | 2;
      continue L9;
     }
     if (!(_checkforcmd(i11, 70404, 4) | 0)) {
      i5 = 100;
      break L9;
     }
     if ((HEAP32[i17 >> 2] | 0) < 0) HEAP32[i17 >> 2] = HEAP32[26888];
     if (_vim_isdigit(HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) | 0) HEAP32[26888] = _atoi(HEAP32[i16 + 8 >> 2] | 0) | 0; else HEAP32[26888] = 1;
     HEAP32[i16 + 8 >> 2] = HEAP32[i11 >> 2];
     continue L9;
     break;
    }
   default:
    {
     i5 = 100;
     break L9;
    }
   } while (0);
  }
  if ((i5 | 0) == 20) {
   HEAP32[25226] = 1;
   break;
  } else if ((i5 | 0) == 82) {
   HEAP32[i14 >> 2] = 92503;
   break;
  } else if ((i5 | 0) == 100) {
   HEAP32[i15 >> 2] = HEAP32[i16 + 8 >> 2];
   HEAP32[i16 + 24 >> 2] = (HEAP32[25229] | 0) > 0 & 1;
   HEAP32[i23 >> 2] = HEAP32[i16 + 8 >> 2];
   HEAP32[i16 + 8 >> 2] = _skip_range(HEAP32[i16 + 8 >> 2] | 0, 0) | 0;
   if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) == 42) if (!(_vim_strchr(HEAP32[26904] | 0, 42) | 0)) HEAP32[i16 + 8 >> 2] = _skipwhite((HEAP32[i16 + 8 >> 2] | 0) + 1 | 0) | 0;
   HEAP32[i11 >> 2] = _find_command(i16, 0) | 0;
   if ((HEAP32[i16 + 16 >> 2] | 0) != 544) HEAP32[i16 + 44 >> 2] = HEAP32[1336 + (HEAP32[i16 + 16 >> 2] << 4) + 12 >> 2]; else HEAP32[i16 + 44 >> 2] = 0;
   if (HEAP32[i11 >> 2] | 0 ? (HEAP32[i16 + 16 >> 2] | 0) == 511 : 0) _get_wincmd_addr_type(_skipwhite(HEAP32[i11 >> 2] | 0) | 0, i16);
   HEAP32[i16 + 8 >> 2] = HEAP32[i23 >> 2];
   L137 : while (1) {
    HEAP32[i16 + 36 >> 2] = HEAP32[i16 + 40 >> 2];
    switch (HEAP32[i16 + 44 >> 2] | 0) {
    case 0:
     {
      HEAP32[i16 + 40 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
      break;
     }
    case 1:
     {
      HEAP32[i16 + 40 >> 2] = _current_win_nr(HEAP32[26881] | 0) | 0;
      break;
     }
    case 2:
     {
      HEAP32[i16 + 40 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) + 1;
      if ((HEAP32[i16 + 40 >> 2] | 0) > (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) HEAP32[i16 + 40 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2];
      break;
     }
    case 4:
    case 3:
     {
      HEAP32[i16 + 40 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
      break;
     }
    case 5:
     {
      HEAP32[i16 + 40 >> 2] = _current_tab_nr(HEAP32[26886] | 0) | 0;
      break;
     }
    case 6:
     {
      HEAP32[i16 + 40 >> 2] = 1;
      break;
     }
    default:
     {}
    }
    HEAP32[i16 + 8 >> 2] = _skipwhite(HEAP32[i16 + 8 >> 2] | 0) | 0;
    i4 = HEAP32[i16 + 44 >> 2] | 0;
    i3 = HEAP32[i16 + 24 >> 2] | 0;
    i2 = (HEAP32[i16 + 32 >> 2] | 0) == 0 & 1;
    i1 = HEAP32[i24 >> 2] | 0;
    HEAP32[i24 >> 2] = i1 + 1;
    HEAP32[i12 >> 2] = _get_address(i16, i16 + 8 | 0, i4, i3, i2, i1) | 0;
    if (!(HEAP32[i16 + 8 >> 2] | 0)) break L7;
    do if ((HEAP32[i12 >> 2] | 0) == 2147483647) {
     i1 = i16 + 8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) != 37) {
      if ((HEAPU8[i2 >> 0] | 0) != 42) break;
      if (_vim_strchr(HEAP32[26904] | 0, 42) | 0) break;
      if (HEAP32[i16 + 44 >> 2] | 0) {
       i5 = 143;
       break L137;
      }
      i3 = i16 + 8 | 0;
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
      if (HEAP32[i16 + 24 >> 2] | 0) break;
      HEAP32[i28 >> 2] = _getmark(60, 0) | 0;
      if (!(_check_mark(HEAP32[i28 >> 2] | 0) | 0)) break L7;
      HEAP32[i16 + 36 >> 2] = HEAP32[HEAP32[i28 >> 2] >> 2];
      HEAP32[i28 >> 2] = _getmark(62, 0) | 0;
      if (!(_check_mark(HEAP32[i28 >> 2] | 0) | 0)) break L7;
      HEAP32[i16 + 40 >> 2] = HEAP32[HEAP32[i28 >> 2] >> 2];
      i3 = i16 + 32 | 0;
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
      break;
     }
     HEAP32[i1 >> 2] = i2 + 1;
     L160 : do switch (HEAP32[i16 + 44 >> 2] | 0) {
     case 5:
     case 1:
      {
       i5 = 134;
       break L137;
       break;
      }
     case 6:
      {
       i5 = 135;
       break L137;
       break;
      }
     case 0:
      {
       HEAP32[i16 + 36 >> 2] = 1;
       HEAP32[i16 + 40 >> 2] = HEAP32[HEAP32[26773] >> 2];
       break;
      }
     case 3:
      {
       HEAP32[i27 >> 2] = HEAP32[26771];
       while (1) {
        if (HEAP32[(HEAP32[i27 >> 2] | 0) + 48 >> 2] | 0) i33 = (HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) == 0; else i33 = 0;
        i34 = HEAP32[i27 >> 2] | 0;
        if (!i33) break;
        HEAP32[i27 >> 2] = HEAP32[i34 + 48 >> 2];
       }
       HEAP32[i16 + 36 >> 2] = HEAP32[i34 + 92 >> 2];
       HEAP32[i27 >> 2] = HEAP32[26772];
       while (1) {
        if (HEAP32[(HEAP32[i27 >> 2] | 0) + 52 >> 2] | 0) i35 = (HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) == 0; else i35 = 0;
        i36 = HEAP32[i27 >> 2] | 0;
        if (!i35) break;
        HEAP32[i27 >> 2] = HEAP32[i36 + 52 >> 2];
       }
       HEAP32[i16 + 40 >> 2] = HEAP32[i36 + 92 >> 2];
       break;
      }
     case 4:
      {
       HEAP32[i16 + 36 >> 2] = HEAP32[(HEAP32[26771] | 0) + 92 >> 2];
       HEAP32[i16 + 40 >> 2] = HEAP32[(HEAP32[26772] | 0) + 92 >> 2];
       break;
      }
     case 2:
      {
       if (!(HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
        HEAP32[i16 + 40 >> 2] = 0;
        HEAP32[i16 + 36 >> 2] = 0;
        break L160;
       } else {
        HEAP32[i16 + 36 >> 2] = 1;
        HEAP32[i16 + 40 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2];
        break L160;
       }
       break;
      }
     default:
      {}
     } while (0);
     i2 = i16 + 32 | 0;
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
    } else HEAP32[i16 + 40 >> 2] = HEAP32[i12 >> 2]; while (0);
    i2 = i16 + 32 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
    if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) == 59) {
     if (!(HEAP32[i16 + 24 >> 2] | 0)) {
      HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i16 + 40 >> 2];
      _check_cursor();
     }
    } else if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) != 44) {
     i5 = 154;
     break;
    }
    i2 = i16 + 8 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
   }
   if ((i5 | 0) == 134) {
    HEAP32[i14 >> 2] = 92503;
    break;
   } else if ((i5 | 0) == 135) {
    HEAP32[i14 >> 2] = 92503;
    break;
   } else if ((i5 | 0) == 143) {
    HEAP32[i14 >> 2] = 92503;
    break;
   } else if ((i5 | 0) == 154) {
    if ((HEAP32[i16 + 32 >> 2] | 0) == 1) {
     HEAP32[i16 + 36 >> 2] = HEAP32[i16 + 40 >> 2];
     if ((HEAP32[i12 >> 2] | 0) == 2147483647) HEAP32[i16 + 32 >> 2] = 0;
    }
    HEAP32[i16 + 8 >> 2] = _skipwhite(HEAP32[i16 + 8 >> 2] | 0) | 0;
    while (1) {
     i37 = HEAP32[i16 + 8 >> 2] | 0;
     if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) != 58) break;
     HEAP32[i16 + 8 >> 2] = _skipwhite(i37 + 1 | 0) | 0;
    }
    if (HEAPU8[i37 >> 0] | 0) if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) != 34) {
     i2 = _check_nextcmd(HEAP32[i16 + 8 >> 2] | 0) | 0;
     HEAP32[i16 + 4 >> 2] = i2;
     if (!i2) {
      if (HEAP32[i11 >> 2] | 0) if ((HEAP32[i16 + 16 >> 2] | 0) == 544) if (!(HEAP32[i16 + 24 >> 2] | 0)) if (((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) - 65 | 0) >>> 0 < 26) if (_has_cmdundefined() | 0) {
       HEAP32[i11 >> 2] = HEAP32[i16 + 8 >> 2];
       L210 : while (1) {
        do if (((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) {
         if (((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) - 97 | 0) >>> 0 < 26) break;
         if (((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break L210;
        } while (0);
        HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
       }
       i2 = HEAP32[i16 + 8 >> 2] | 0;
       HEAP32[i11 >> 2] = _vim_strnsave(i2 | 0, (HEAP32[i11 >> 2] | 0) - i2 | 0) | 0;
       i2 = HEAP32[i11 >> 2] | 0;
       HEAP32[i29 >> 2] = _apply_autocmds(22, i2 | 0, i2 | 0, 1, 0) | 0;
       _vim_free(HEAP32[i11 >> 2] | 0);
       if (HEAP32[i29 >> 2] | 0) i38 = _find_command(i16, 0) | 0; else i38 = HEAP32[i16 + 8 >> 2] | 0;
       HEAP32[i11 >> 2] = i38;
      }
      if ((HEAP32[i16 + 16 >> 2] | 0) == 544) {
       if (HEAP32[i16 + 24 >> 2] | 0) break;
       _strcpy(HEAP32[26882] | 0, 45874) | 0;
       do if (!(HEAP32[i8 >> 2] | 0)) if (HEAP32[i15 >> 2] | 0) {
        _append_command(HEAP32[i15 >> 2] | 0);
        break;
       } else {
        _append_command(HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
        break;
       } while (0);
       HEAP32[i14 >> 2] = HEAP32[26882];
       break;
      }
      if ((HEAP32[1336 + (HEAP32[i16 + 16 >> 2] << 4) + 4 >> 2] | 0) == 6) i39 = 1; else i39 = (HEAP32[1336 + (HEAP32[i16 + 16 >> 2] << 4) + 4 >> 2] | 0) == 65;
      HEAP32[i22 >> 2] = i39 & 1;
      if ((HEAP32[i16 + 16 >> 2] | 0) == 179) HEAP32[25229] = (HEAP32[25229] | 0) + 1;
      if (HEAP32[25229] | 0) {
       if ((HEAP32[i16 + 16 >> 2] | 0) != 135) break;
       HEAP32[25229] = (HEAP32[25229] | 0) + -1;
       break;
      }
      do if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 33) {
       if ((HEAP32[i16 + 16 >> 2] | 0) == 370) {
        i5 = 213;
        break;
       }
       if ((HEAP32[i16 + 16 >> 2] | 0) == 400) {
        i5 = 213;
        break;
       }
       if ((HEAP32[i16 + 16 >> 2] | 0) == 405) {
        i5 = 213;
        break;
       }
       HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
       HEAP32[i16 + 28 >> 2] = 1;
      } else i5 = 213; while (0);
      if ((i5 | 0) == 213) HEAP32[i16 + 28 >> 2] = 0;
      HEAP32[i16 + 20 >> 2] = HEAP32[1336 + (HEAP32[i16 + 16 >> 2] << 4) + 8 >> 2];
      do if (!(HEAP32[i16 + 24 >> 2] | 0)) {
       do if (!(HEAP32[(HEAP32[26773] | 0) + 664 >> 2] | 0)) {
        if (!(HEAP32[i16 + 20 >> 2] & 2097152)) break;
        HEAP32[i14 >> 2] = 92640;
        break L7;
       } while (0);
       do if (_text_locked() | 0) {
        if (HEAP32[i16 + 20 >> 2] & 1048576 | 0) break;
        HEAP32[i14 >> 2] = _get_text_locked_msg() | 0;
        break L7;
       } while (0);
       do if (!(HEAP32[i16 + 20 >> 2] & 1048576)) {
        if ((HEAP32[i16 + 16 >> 2] | 0) == 125) break;
        if ((HEAP32[i16 + 16 >> 2] | 0) == 69) break;
        if (_curbuf_locked() | 0) break L7;
       } while (0);
       if (HEAP32[i22 >> 2] | 0) break;
       if (HEAP32[i16 + 20 >> 2] & 1 | 0) break;
       if ((HEAP32[i16 + 32 >> 2] | 0) <= 0) break;
       HEAP32[i14 >> 2] = 93191;
       break L7;
      } while (0);
      do if (!(HEAP32[i22 >> 2] | 0)) {
       if (HEAP32[i16 + 20 >> 2] & 2 | 0) break;
       if (!(HEAP32[i16 + 28 >> 2] | 0)) break;
       HEAP32[i14 >> 2] = 92764;
       break L7;
      } while (0);
      if (!((HEAP32[i16 + 24 >> 2] | 0) != 0 | (HEAP32[i22 >> 2] | 0) != 0)) {
       do if (!(HEAP32[26841] | 0)) {
        if ((HEAP32[i16 + 36 >> 2] | 0) <= (HEAP32[i16 + 40 >> 2] | 0)) break;
        do if (!(HEAP32[26809] | 0)) if ((HEAP32[i8 >> 2] | 0) != 0 | (HEAP32[26798] | 0) != 0) {
         HEAP32[i14 >> 2] = 45902;
         break L7;
        } else if ((_ask_yesno(45930, 0) | 0) != 121) break L7; else break; while (0);
        HEAP32[i12 >> 2] = HEAP32[i16 + 36 >> 2];
        HEAP32[i16 + 36 >> 2] = HEAP32[i16 + 40 >> 2];
        HEAP32[i16 + 40 >> 2] = HEAP32[i12 >> 2];
       } while (0);
       i2 = _invalid_range(i16) | 0;
       HEAP32[i14 >> 2] = i2;
       if (i2 | 0) break;
      }
      do if (HEAP32[i16 + 20 >> 2] & 16384 | 0) {
       if (HEAP32[i16 + 32 >> 2] | 0) break;
       HEAP32[i16 + 40 >> 2] = 1;
      } while (0);
      _correct_range(i16);
      i2 = HEAP32[i11 >> 2] | 0;
      if ((HEAP32[i16 + 16 >> 2] | 0) == 532) HEAP32[i16 >> 2] = i2; else HEAP32[i16 >> 2] = _skipwhite(i2) | 0;
      L295 : do if (HEAP32[i16 + 20 >> 2] & 262144 | 0) {
       do {
        if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) != 43) break L295;
        if ((HEAPU8[(HEAP32[i16 >> 2] | 0) + 1 >> 0] | 0) != 43) break L295;
        i2 = (_getargopt(i16) | 0) != 0;
       } while (i2 | (HEAP32[i22 >> 2] | 0) != 0);
       HEAP32[i14 >> 2] = 92453;
       break L7;
      } while (0);
      if ((HEAP32[i16 + 16 >> 2] | 0) == 506) i5 = 257; else if ((HEAP32[i16 + 16 >> 2] | 0) == 487) i5 = 257;
      do if ((i5 | 0) == 257) {
       i2 = HEAP32[i16 >> 2] | 0;
       if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) == 62) {
        i1 = i2 + 1 | 0;
        HEAP32[i16 >> 2] = i1;
        if ((HEAPU8[i1 >> 0] | 0) != 62) {
         HEAP32[i14 >> 2] = 45964;
         break L7;
        } else {
         HEAP32[i16 >> 2] = _skipwhite((HEAP32[i16 >> 2] | 0) + 1 | 0) | 0;
         HEAP32[i16 + 60 >> 2] = 1;
         break;
        }
       } else {
        if ((HEAPU8[i2 >> 0] | 0) != 33) break;
        if ((HEAP32[i16 + 16 >> 2] | 0) != 506) break;
        HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
        HEAP32[i16 + 64 >> 2] = 1;
        break;
       }
      } while (0);
      do if ((HEAP32[i16 + 16 >> 2] | 0) == 351) {
       if (HEAP32[i16 + 28 >> 2] | 0) {
        HEAP32[i16 + 64 >> 2] = 1;
        HEAP32[i16 + 28 >> 2] = 0;
        break;
       }
       if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) != 33) break;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
       HEAP32[i16 + 64 >> 2] = 1;
      } while (0);
      if ((HEAP32[i16 + 16 >> 2] | 0) == 536) i5 = 271; else if ((HEAP32[i16 + 16 >> 2] | 0) == 538) i5 = 271;
      if ((i5 | 0) == 271) {
       HEAP32[i16 + 68 >> 2] = 1;
       while (1) {
        i40 = HEAP32[i16 >> 2] | 0;
        if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) != (HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0)) break;
        HEAP32[i16 >> 2] = i40 + 1;
        i2 = i16 + 68 | 0;
        HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
       }
       HEAP32[i16 >> 2] = _skipwhite(i40) | 0;
      }
      do if (HEAP32[i16 + 20 >> 2] & 32768 | 0) {
       if (HEAP32[i16 + 64 >> 2] | 0) break;
       HEAP32[i16 + 52 >> 2] = _getargcmd(i16) | 0;
      } while (0);
      do if (HEAP32[i16 + 20 >> 2] & 256 | 0) {
       if (HEAP32[i16 + 64 >> 2] | 0) {
        i5 = 281;
        break;
       }
       _separate_nextcmd(i16);
      } else i5 = 281; while (0);
      L340 : do if ((i5 | 0) == 281) {
       do if ((HEAP32[i16 + 16 >> 2] | 0) != 532) {
        if ((HEAP32[i16 + 16 >> 2] | 0) == 460) break;
        if ((HEAP32[i16 + 16 >> 2] | 0) == 161) break;
        if ((HEAP32[i16 + 16 >> 2] | 0) == 488) break;
        if (!(HEAP32[i16 + 64 >> 2] | 0)) break L340;
       } while (0);
       HEAP32[i11 >> 2] = HEAP32[i16 >> 2];
       while (1) {
        if (!(HEAP8[HEAP32[i11 >> 2] >> 0] | 0)) break L340;
        do if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 92) {
         if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) != 10) {
          i5 = 291;
          break;
         }
         i2 = HEAP32[i11 >> 2] | 0;
         i1 = i2 | 0;
         i3 = i2 + 1 | 0;
         _memmove(i1 | 0, i3 | 0, (_strlen((HEAP32[i11 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
        } else i5 = 291; while (0);
        if ((i5 | 0) == 291) {
         i5 = 0;
         if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 10) break;
        }
        HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
       }
       HEAP32[i16 + 4 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
       HEAP8[HEAP32[i11 >> 2] >> 0] = 0;
      } while (0);
      L359 : do if (HEAP32[i16 + 20 >> 2] & 32 | 0) {
       if (HEAP32[i16 + 32 >> 2] | 0) break;
       HEAP32[i16 + 36 >> 2] = 1;
       switch (HEAP32[i16 + 44 >> 2] | 0) {
       case 0:
        {
         HEAP32[i16 + 40 >> 2] = HEAP32[HEAP32[26773] >> 2];
         break L359;
         break;
        }
       case 3:
        {
         HEAP32[i30 >> 2] = HEAP32[26771];
         while (1) {
          if (HEAP32[(HEAP32[i30 >> 2] | 0) + 48 >> 2] | 0) i41 = (HEAP32[(HEAP32[i30 >> 2] | 0) + 4 >> 2] | 0) == 0; else i41 = 0;
          i42 = HEAP32[i30 >> 2] | 0;
          if (!i41) break;
          HEAP32[i30 >> 2] = HEAP32[i42 + 48 >> 2];
         }
         HEAP32[i16 + 36 >> 2] = HEAP32[i42 + 92 >> 2];
         HEAP32[i30 >> 2] = HEAP32[26772];
         while (1) {
          if (HEAP32[(HEAP32[i30 >> 2] | 0) + 52 >> 2] | 0) i43 = (HEAP32[(HEAP32[i30 >> 2] | 0) + 4 >> 2] | 0) == 0; else i43 = 0;
          i44 = HEAP32[i30 >> 2] | 0;
          if (!i43) break;
          HEAP32[i30 >> 2] = HEAP32[i44 + 52 >> 2];
         }
         HEAP32[i16 + 40 >> 2] = HEAP32[i44 + 92 >> 2];
         break L359;
         break;
        }
       case 4:
        {
         HEAP32[i16 + 36 >> 2] = HEAP32[(HEAP32[26771] | 0) + 92 >> 2];
         HEAP32[i16 + 40 >> 2] = HEAP32[(HEAP32[26772] | 0) + 92 >> 2];
         break L359;
         break;
        }
       case 1:
        {
         HEAP32[i16 + 40 >> 2] = _current_win_nr(0) | 0;
         break L359;
         break;
        }
       case 5:
        {
         HEAP32[i16 + 40 >> 2] = _current_tab_nr(0) | 0;
         break L359;
         break;
        }
       case 6:
        {
         HEAP32[i16 + 40 >> 2] = 1;
         break L359;
         break;
        }
       case 2:
        {
         if (!(HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
          HEAP32[i16 + 40 >> 2] = 0;
          HEAP32[i16 + 36 >> 2] = 0;
          break L359;
         } else {
          HEAP32[i16 + 40 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2];
          break L359;
         }
         break;
        }
       default:
        break L359;
       }
      } while (0);
      do if (HEAP32[i16 + 20 >> 2] & 512 | 0) {
       if (!(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0)) break;
       if (HEAP32[i16 + 20 >> 2] & 1024 | 0) if (((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) break;
       if (!(_valid_yank_reg(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0, ((HEAP32[i16 + 16 >> 2] | 0) != 335 ? 1 : 0) & 1) | 0)) break;
       i3 = HEAP32[i16 >> 2] | 0;
       HEAP32[i16 >> 2] = i3 + 1;
       HEAP32[i16 + 72 >> 2] = HEAPU8[i3 >> 0];
       HEAP32[i16 >> 2] = _skipwhite(HEAP32[i16 >> 2] | 0) | 0;
      } while (0);
      L396 : do if (HEAP32[i16 + 20 >> 2] & 1024 | 0) {
       if (((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break;
       do if (HEAP32[i16 + 20 >> 2] & 65536 | 0) {
        i3 = _skipdigits(HEAP32[i16 >> 2] | 0) | 0;
        HEAP32[i11 >> 2] = i3;
        if (!(HEAPU8[i3 >> 0] | 0)) break;
        if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 32) break;
        if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) != 9) break L396;
       } while (0);
       HEAP32[i13 >> 2] = _getdigits(i16) | 0;
       HEAP32[i16 >> 2] = _skipwhite(HEAP32[i16 >> 2] | 0) | 0;
       do if (!((HEAP32[i13 >> 2] | 0) > 0 | (HEAP32[i22 >> 2] | 0) != 0)) {
        if (HEAP32[i16 + 20 >> 2] & 4096 | 0) break;
        HEAP32[i14 >> 2] = 94052;
        break L7;
       } while (0);
       if (HEAP32[i16 + 20 >> 2] & 16384 | 0) {
        HEAP32[i16 + 40 >> 2] = HEAP32[i13 >> 2];
        if (HEAP32[i16 + 32 >> 2] | 0) break;
        HEAP32[i16 + 32 >> 2] = 1;
        break;
       }
       HEAP32[i16 + 36 >> 2] = HEAP32[i16 + 40 >> 2];
       i3 = i16 + 40 | 0;
       HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) - 1);
       i3 = i16 + 32 | 0;
       HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
       if (HEAP32[i16 + 44 >> 2] | 0) break;
       if ((HEAP32[i16 + 40 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) break;
       HEAP32[i16 + 40 >> 2] = HEAP32[HEAP32[26773] >> 2];
      } while (0);
      if (HEAP32[i16 + 20 >> 2] & 4194304 | 0) _get_flags(i16);
      do if (!(HEAP32[i22 >> 2] | 0)) {
       if (HEAP32[i16 + 20 >> 2] & 4 | 0) break;
       if (!(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0)) break;
       if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) == 34) break;
       if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) == 124) if (HEAP32[i16 + 20 >> 2] & 256 | 0) break;
       HEAP32[i14 >> 2] = 93844;
       break L7;
      } while (0);
      do if (!(HEAP32[i22 >> 2] | 0)) {
       if (!(HEAP32[i16 + 20 >> 2] & 128)) break;
       if (HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) break;
       HEAP32[i14 >> 2] = 92160;
       break L7;
      } while (0);
      if (HEAP32[i16 + 20 >> 2] & 8 | 0) if (!(_expand_filename(i16, HEAP32[i7 >> 2] | 0, i14) | 0)) break;
      do if (HEAP32[i16 + 20 >> 2] & 65536 | 0) {
       if (!(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0)) break;
       if (HEAP32[i16 + 32 >> 2] | 0) break;
       L439 : do if ((HEAP32[i16 + 16 >> 2] | 0) == 23) i5 = 358; else {
        if ((HEAP32[i16 + 16 >> 2] | 0) == 41) {
         i5 = 358;
         break;
        }
        if ((HEAP32[i16 + 16 >> 2] | 0) == 40) {
         i5 = 358;
         break;
        }
        i3 = HEAP32[i16 >> 2] | 0;
        HEAP32[i11 >> 2] = i3 + (_strlen(HEAP32[i16 >> 2] | 0) | 0);
        while (1) {
         if ((HEAP32[i11 >> 2] | 0) >>> 0 <= (HEAP32[i16 >> 2] | 0) >>> 0) break L439;
         if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + -1 >> 0] | 0) != 32) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + -1 >> 0] | 0) != 9) break L439;
         HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
        }
       } while (0);
       if ((i5 | 0) == 358) HEAP32[i11 >> 2] = _skiptowhite_esc(HEAP32[i16 >> 2] | 0) | 0;
       HEAP32[i16 + 40 >> 2] = _buflist_findpat(HEAP32[i16 >> 2] | 0, HEAP32[i11 >> 2] | 0, (HEAP32[i16 + 20 >> 2] & 131072 | 0) != 0 & 1, 0, 0) | 0;
       if ((HEAP32[i16 + 40 >> 2] | 0) < 0) break L7;
       HEAP32[i16 + 32 >> 2] = 1;
       HEAP32[i16 >> 2] = _skipwhite(HEAP32[i11 >> 2] | 0) | 0;
      } while (0);
      if ((HEAP32[i20 >> 2] | 0) > 0 ? (HEAP32[i16 + 16 >> 2] | 0) == 473 : 0) {
       i3 = (HEAP32[26810] | 0) - (HEAP32[i20 >> 2] | 0) | 0;
       HEAP32[26810] = i3;
       HEAP32[26810] = (HEAP32[26810] | 0) < 0 ? 0 : i3;
       HEAP32[i20 >> 2] = 0;
      }
      HEAP32[i16 + 12 >> 2] = HEAP32[i7 >> 2];
      HEAP32[i16 + 92 >> 2] = HEAP32[i9 >> 2];
      HEAP32[i16 + 96 >> 2] = HEAP32[i10 >> 2];
      HEAP32[i16 + 88 >> 2] = 0;
      FUNCTION_TABLE_vi[HEAP32[1336 + (HEAP32[i16 + 16 >> 2] << 4) + 4 >> 2] & 255](i16);
      if (!(HEAP32[i16 + 88 >> 2] | 0)) break;
      HEAP32[i14 >> 2] = HEAP32[i16 + 88 >> 2];
      break;
     }
    }
    if (HEAP32[i16 + 24 >> 2] | 0) break;
    do if ((HEAPU8[HEAP32[i16 + 8 >> 2] >> 0] | 0) != 124) {
     if (HEAP32[26798] | 0) if ((HEAP32[i16 + 36 >> 2] | 0) != (HEAP32[i16 + 40 >> 2] | 0)) break;
     if (!(HEAP32[i16 + 32 >> 2] | 0)) break L7;
     do if ((HEAP32[i16 + 40 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) if (_vim_strchr(HEAP32[26904] | 0, 45) | 0) {
      HEAP32[i16 + 40 >> 2] = -1;
      break;
     } else {
      HEAP32[i16 + 40 >> 2] = HEAP32[HEAP32[26773] >> 2];
      break;
     } while (0);
     if ((HEAP32[i16 + 40 >> 2] | 0) < 0) {
      HEAP32[i14 >> 2] = 92503;
      break L7;
     }
     if (!(HEAP32[i16 + 40 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1; else HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i16 + 40 >> 2];
     _beginline(6);
     break L7;
    } while (0);
    HEAP32[i16 + 16 >> 2] = 309;
    HEAP32[i16 + 20 >> 2] = 1281;
    i3 = _invalid_range(i16) | 0;
    HEAP32[i14 >> 2] = i3;
    if (i3 | 0) break;
    _correct_range(i16);
    _ex_print(i16);
    break;
   }
  }
 } while (0);
 if (!(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 }
 if (HEAP32[i14 >> 2] | 0) if (!(HEAP32[26880] | 0 ? 1 : (HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) == 0)) {
  if (HEAP32[i8 >> 2] | 0) {
   if ((HEAP32[i14 >> 2] | 0) != (HEAP32[26882] | 0)) {
    _strcpy(HEAP32[26882] | 0, HEAP32[i14 >> 2] | 0) | 0;
    HEAP32[i14 >> 2] = HEAP32[26882];
   }
   _append_command(HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
  }
  _emsg(HEAP32[i14 >> 2] | 0) | 0;
 }
 if ((HEAP32[i17 >> 2] | 0) >= 0) HEAP32[26888] = HEAP32[i17 >> 2];
 if (HEAP32[27136] | 0) {
  _set_string_option_direct(65703, -1, HEAP32[27136] | 0, 1, -6);
  _free_string_option(HEAP32[27136] | 0);
 }
 if (HEAP32[27137] | 0) _vim_regfree(HEAP32[27137] | 0);
 _memcpy(108508, i21 | 0, 132) | 0;
 if ((HEAP32[i19 >> 2] | 0) != -1) {
  if (HEAP32[26880] | 0) {
   if ((HEAP32[26809] | 0) > (HEAP32[i19 >> 2] | 0)) i5 = 388;
  } else i5 = 388;
  if ((i5 | 0) == 388) HEAP32[26809] = HEAP32[i19 >> 2];
  i19 = (HEAP32[26810] | 0) - (HEAP32[i20 >> 2] | 0) | 0;
  HEAP32[26810] = i19;
  HEAP32[26810] = (HEAP32[26810] | 0) < 0 ? 0 : i19;
  HEAP32[26710] = HEAP32[i18 >> 2];
  if (_redirecting() | 0) HEAP32[27043] = 0;
 }
 if (!(HEAP32[i16 + 4 >> 2] | 0)) {
  i45 = i16 + 4 | 0;
  i46 = HEAP32[i45 >> 2] | 0;
  STACKTOP = i6;
  return i46 | 0;
 }
 if (HEAPU8[HEAP32[i16 + 4 >> 2] >> 0] | 0) {
  i45 = i16 + 4 | 0;
  i46 = HEAP32[i45 >> 2] | 0;
  STACKTOP = i6;
  return i46 | 0;
 }
 HEAP32[i16 + 4 >> 2] = 0;
 i45 = i16 + 4 | 0;
 i46 = HEAP32[i45 >> 2] | 0;
 STACKTOP = i6;
 return i46 | 0;
}

function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 do if (i1 >>> 0 < 245) {
  i5 = i1 >>> 0 < 11 ? 16 : i1 + 11 & -8;
  i6 = i5 >>> 3;
  i7 = HEAP32[27238] | 0;
  i8 = i7 >>> i6;
  if (i8 & 3 | 0) {
   i9 = (i8 & 1 ^ 1) + i6 | 0;
   i10 = 108992 + (i9 << 1 << 2) | 0;
   i11 = i10 + 8 | 0;
   i12 = HEAP32[i11 >> 2] | 0;
   i13 = i12 + 8 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   if ((i14 | 0) == (i10 | 0)) HEAP32[27238] = i7 & ~(1 << i9); else {
    HEAP32[i14 + 12 >> 2] = i10;
    HEAP32[i11 >> 2] = i14;
   }
   i14 = i9 << 3;
   HEAP32[i12 + 4 >> 2] = i14 | 3;
   i9 = i12 + i14 + 4 | 0;
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 1;
   i15 = i13;
   STACKTOP = i3;
   return i15 | 0;
  }
  i13 = HEAP32[27240] | 0;
  if (i5 >>> 0 > i13 >>> 0) {
   if (i8 | 0) {
    i9 = 2 << i6;
    i14 = i8 << i6 & (i9 | 0 - i9);
    i9 = (i14 & 0 - i14) + -1 | 0;
    i14 = i9 >>> 12 & 16;
    i6 = i9 >>> i14;
    i9 = i6 >>> 5 & 8;
    i8 = i6 >>> i9;
    i6 = i8 >>> 2 & 4;
    i12 = i8 >>> i6;
    i8 = i12 >>> 1 & 2;
    i11 = i12 >>> i8;
    i12 = i11 >>> 1 & 1;
    i10 = (i9 | i14 | i6 | i8 | i12) + (i11 >>> i12) | 0;
    i12 = 108992 + (i10 << 1 << 2) | 0;
    i11 = i12 + 8 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i6 = i8 + 8 | 0;
    i14 = HEAP32[i6 >> 2] | 0;
    if ((i14 | 0) == (i12 | 0)) {
     i9 = i7 & ~(1 << i10);
     HEAP32[27238] = i9;
     i16 = i9;
    } else {
     HEAP32[i14 + 12 >> 2] = i12;
     HEAP32[i11 >> 2] = i14;
     i16 = i7;
    }
    i14 = i10 << 3;
    i10 = i14 - i5 | 0;
    HEAP32[i8 + 4 >> 2] = i5 | 3;
    i11 = i8 + i5 | 0;
    HEAP32[i11 + 4 >> 2] = i10 | 1;
    HEAP32[i8 + i14 >> 2] = i10;
    if (i13 | 0) {
     i14 = HEAP32[27243] | 0;
     i8 = i13 >>> 3;
     i12 = 108992 + (i8 << 1 << 2) | 0;
     i9 = 1 << i8;
     if (!(i16 & i9)) {
      HEAP32[27238] = i16 | i9;
      i17 = i12;
      i18 = i12 + 8 | 0;
     } else {
      i9 = i12 + 8 | 0;
      i17 = HEAP32[i9 >> 2] | 0;
      i18 = i9;
     }
     HEAP32[i18 >> 2] = i14;
     HEAP32[i17 + 12 >> 2] = i14;
     HEAP32[i14 + 8 >> 2] = i17;
     HEAP32[i14 + 12 >> 2] = i12;
    }
    HEAP32[27240] = i10;
    HEAP32[27243] = i11;
    i15 = i6;
    STACKTOP = i3;
    return i15 | 0;
   }
   i6 = HEAP32[27239] | 0;
   if (!i6) i19 = i5; else {
    i11 = (i6 & 0 - i6) + -1 | 0;
    i10 = i11 >>> 12 & 16;
    i12 = i11 >>> i10;
    i11 = i12 >>> 5 & 8;
    i14 = i12 >>> i11;
    i12 = i14 >>> 2 & 4;
    i9 = i14 >>> i12;
    i14 = i9 >>> 1 & 2;
    i8 = i9 >>> i14;
    i9 = i8 >>> 1 & 1;
    i20 = HEAP32[109256 + ((i11 | i10 | i12 | i14 | i9) + (i8 >>> i9) << 2) >> 2] | 0;
    i9 = i20;
    i8 = i20;
    i14 = (HEAP32[i20 + 4 >> 2] & -8) - i5 | 0;
    while (1) {
     i20 = HEAP32[i9 + 16 >> 2] | 0;
     if (!i20) {
      i12 = HEAP32[i9 + 20 >> 2] | 0;
      if (!i12) break; else i21 = i12;
     } else i21 = i20;
     i20 = (HEAP32[i21 + 4 >> 2] & -8) - i5 | 0;
     i12 = i20 >>> 0 < i14 >>> 0;
     i9 = i21;
     i8 = i12 ? i21 : i8;
     i14 = i12 ? i20 : i14;
    }
    i9 = i8 + i5 | 0;
    if (i9 >>> 0 > i8 >>> 0) {
     i20 = HEAP32[i8 + 24 >> 2] | 0;
     i12 = HEAP32[i8 + 12 >> 2] | 0;
     do if ((i12 | 0) == (i8 | 0)) {
      i10 = i8 + 20 | 0;
      i11 = HEAP32[i10 >> 2] | 0;
      if (!i11) {
       i22 = i8 + 16 | 0;
       i23 = HEAP32[i22 >> 2] | 0;
       if (!i23) {
        i24 = 0;
        break;
       } else {
        i25 = i23;
        i26 = i22;
       }
      } else {
       i25 = i11;
       i26 = i10;
      }
      i10 = i25;
      i11 = i26;
      while (1) {
       i22 = i10 + 20 | 0;
       i23 = HEAP32[i22 >> 2] | 0;
       if (!i23) {
        i27 = i10 + 16 | 0;
        i28 = HEAP32[i27 >> 2] | 0;
        if (!i28) break; else {
         i29 = i28;
         i30 = i27;
        }
       } else {
        i29 = i23;
        i30 = i22;
       }
       i10 = i29;
       i11 = i30;
      }
      HEAP32[i11 >> 2] = 0;
      i24 = i10;
     } else {
      i22 = HEAP32[i8 + 8 >> 2] | 0;
      HEAP32[i22 + 12 >> 2] = i12;
      HEAP32[i12 + 8 >> 2] = i22;
      i24 = i12;
     } while (0);
     do if (i20 | 0) {
      i12 = HEAP32[i8 + 28 >> 2] | 0;
      i22 = 109256 + (i12 << 2) | 0;
      if ((i8 | 0) == (HEAP32[i22 >> 2] | 0)) {
       HEAP32[i22 >> 2] = i24;
       if (!i24) {
        HEAP32[27239] = i6 & ~(1 << i12);
        break;
       }
      } else {
       i12 = i20 + 16 | 0;
       HEAP32[((HEAP32[i12 >> 2] | 0) == (i8 | 0) ? i12 : i20 + 20 | 0) >> 2] = i24;
       if (!i24) break;
      }
      HEAP32[i24 + 24 >> 2] = i20;
      i12 = HEAP32[i8 + 16 >> 2] | 0;
      if (i12 | 0) {
       HEAP32[i24 + 16 >> 2] = i12;
       HEAP32[i12 + 24 >> 2] = i24;
      }
      i12 = HEAP32[i8 + 20 >> 2] | 0;
      if (i12 | 0) {
       HEAP32[i24 + 20 >> 2] = i12;
       HEAP32[i12 + 24 >> 2] = i24;
      }
     } while (0);
     if (i14 >>> 0 < 16) {
      i20 = i14 + i5 | 0;
      HEAP32[i8 + 4 >> 2] = i20 | 3;
      i6 = i8 + i20 + 4 | 0;
      HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 1;
     } else {
      HEAP32[i8 + 4 >> 2] = i5 | 3;
      HEAP32[i9 + 4 >> 2] = i14 | 1;
      HEAP32[i9 + i14 >> 2] = i14;
      if (i13 | 0) {
       i6 = HEAP32[27243] | 0;
       i20 = i13 >>> 3;
       i12 = 108992 + (i20 << 1 << 2) | 0;
       i22 = 1 << i20;
       if (!(i22 & i7)) {
        HEAP32[27238] = i22 | i7;
        i31 = i12;
        i32 = i12 + 8 | 0;
       } else {
        i22 = i12 + 8 | 0;
        i31 = HEAP32[i22 >> 2] | 0;
        i32 = i22;
       }
       HEAP32[i32 >> 2] = i6;
       HEAP32[i31 + 12 >> 2] = i6;
       HEAP32[i6 + 8 >> 2] = i31;
       HEAP32[i6 + 12 >> 2] = i12;
      }
      HEAP32[27240] = i14;
      HEAP32[27243] = i9;
     }
     i15 = i8 + 8 | 0;
     STACKTOP = i3;
     return i15 | 0;
    } else i19 = i5;
   }
  } else i19 = i5;
 } else if (i1 >>> 0 > 4294967231) i19 = -1; else {
  i12 = i1 + 11 | 0;
  i6 = i12 & -8;
  i22 = HEAP32[27239] | 0;
  if (!i22) i19 = i6; else {
   i20 = 0 - i6 | 0;
   i23 = i12 >>> 8;
   if (!i23) i33 = 0; else if (i6 >>> 0 > 16777215) i33 = 31; else {
    i12 = (i23 + 1048320 | 0) >>> 16 & 8;
    i27 = i23 << i12;
    i23 = (i27 + 520192 | 0) >>> 16 & 4;
    i28 = i27 << i23;
    i27 = (i28 + 245760 | 0) >>> 16 & 2;
    i34 = 14 - (i23 | i12 | i27) + (i28 << i27 >>> 15) | 0;
    i33 = i6 >>> (i34 + 7 | 0) & 1 | i34 << 1;
   }
   i34 = HEAP32[109256 + (i33 << 2) >> 2] | 0;
   L79 : do if (!i34) {
    i35 = 0;
    i36 = 0;
    i37 = i20;
    i2 = 61;
   } else {
    i27 = 0;
    i28 = i20;
    i12 = i34;
    i23 = i6 << ((i33 | 0) == 31 ? 0 : 25 - (i33 >>> 1) | 0);
    i38 = 0;
    while (1) {
     i39 = (HEAP32[i12 + 4 >> 2] & -8) - i6 | 0;
     if (i39 >>> 0 < i28 >>> 0) if (!i39) {
      i40 = i12;
      i41 = 0;
      i42 = i12;
      i2 = 65;
      break L79;
     } else {
      i43 = i12;
      i44 = i39;
     } else {
      i43 = i27;
      i44 = i28;
     }
     i39 = HEAP32[i12 + 20 >> 2] | 0;
     i12 = HEAP32[i12 + 16 + (i23 >>> 31 << 2) >> 2] | 0;
     i45 = (i39 | 0) == 0 | (i39 | 0) == (i12 | 0) ? i38 : i39;
     if (!i12) {
      i35 = i45;
      i36 = i43;
      i37 = i44;
      i2 = 61;
      break;
     } else {
      i27 = i43;
      i28 = i44;
      i23 = i23 << 1;
      i38 = i45;
     }
    }
   } while (0);
   if ((i2 | 0) == 61) {
    if ((i35 | 0) == 0 & (i36 | 0) == 0) {
     i34 = 2 << i33;
     i20 = (i34 | 0 - i34) & i22;
     if (!i20) {
      i19 = i6;
      break;
     }
     i34 = (i20 & 0 - i20) + -1 | 0;
     i20 = i34 >>> 12 & 16;
     i5 = i34 >>> i20;
     i34 = i5 >>> 5 & 8;
     i8 = i5 >>> i34;
     i5 = i8 >>> 2 & 4;
     i9 = i8 >>> i5;
     i8 = i9 >>> 1 & 2;
     i14 = i9 >>> i8;
     i9 = i14 >>> 1 & 1;
     i46 = 0;
     i47 = HEAP32[109256 + ((i34 | i20 | i5 | i8 | i9) + (i14 >>> i9) << 2) >> 2] | 0;
    } else {
     i46 = i36;
     i47 = i35;
    }
    if (!i47) {
     i48 = i46;
     i49 = i37;
    } else {
     i40 = i46;
     i41 = i37;
     i42 = i47;
     i2 = 65;
    }
   }
   if ((i2 | 0) == 65) {
    i9 = i40;
    i14 = i41;
    i8 = i42;
    while (1) {
     i5 = (HEAP32[i8 + 4 >> 2] & -8) - i6 | 0;
     i20 = i5 >>> 0 < i14 >>> 0;
     i34 = i20 ? i5 : i14;
     i5 = i20 ? i8 : i9;
     i20 = HEAP32[i8 + 16 >> 2] | 0;
     if (!i20) i50 = HEAP32[i8 + 20 >> 2] | 0; else i50 = i20;
     if (!i50) {
      i48 = i5;
      i49 = i34;
      break;
     } else {
      i9 = i5;
      i14 = i34;
      i8 = i50;
     }
    }
   }
   if (!i48) i19 = i6; else if (i49 >>> 0 < ((HEAP32[27240] | 0) - i6 | 0) >>> 0) {
    i8 = i48 + i6 | 0;
    if (i8 >>> 0 > i48 >>> 0) {
     i14 = HEAP32[i48 + 24 >> 2] | 0;
     i9 = HEAP32[i48 + 12 >> 2] | 0;
     do if ((i9 | 0) == (i48 | 0)) {
      i34 = i48 + 20 | 0;
      i5 = HEAP32[i34 >> 2] | 0;
      if (!i5) {
       i20 = i48 + 16 | 0;
       i7 = HEAP32[i20 >> 2] | 0;
       if (!i7) {
        i51 = 0;
        break;
       } else {
        i52 = i7;
        i53 = i20;
       }
      } else {
       i52 = i5;
       i53 = i34;
      }
      i34 = i52;
      i5 = i53;
      while (1) {
       i20 = i34 + 20 | 0;
       i7 = HEAP32[i20 >> 2] | 0;
       if (!i7) {
        i13 = i34 + 16 | 0;
        i38 = HEAP32[i13 >> 2] | 0;
        if (!i38) break; else {
         i54 = i38;
         i55 = i13;
        }
       } else {
        i54 = i7;
        i55 = i20;
       }
       i34 = i54;
       i5 = i55;
      }
      HEAP32[i5 >> 2] = 0;
      i51 = i34;
     } else {
      i20 = HEAP32[i48 + 8 >> 2] | 0;
      HEAP32[i20 + 12 >> 2] = i9;
      HEAP32[i9 + 8 >> 2] = i20;
      i51 = i9;
     } while (0);
     do if (!i14) i56 = i22; else {
      i9 = HEAP32[i48 + 28 >> 2] | 0;
      i20 = 109256 + (i9 << 2) | 0;
      if ((i48 | 0) == (HEAP32[i20 >> 2] | 0)) {
       HEAP32[i20 >> 2] = i51;
       if (!i51) {
        i20 = i22 & ~(1 << i9);
        HEAP32[27239] = i20;
        i56 = i20;
        break;
       }
      } else {
       i20 = i14 + 16 | 0;
       HEAP32[((HEAP32[i20 >> 2] | 0) == (i48 | 0) ? i20 : i14 + 20 | 0) >> 2] = i51;
       if (!i51) {
        i56 = i22;
        break;
       }
      }
      HEAP32[i51 + 24 >> 2] = i14;
      i20 = HEAP32[i48 + 16 >> 2] | 0;
      if (i20 | 0) {
       HEAP32[i51 + 16 >> 2] = i20;
       HEAP32[i20 + 24 >> 2] = i51;
      }
      i20 = HEAP32[i48 + 20 >> 2] | 0;
      if (!i20) i56 = i22; else {
       HEAP32[i51 + 20 >> 2] = i20;
       HEAP32[i20 + 24 >> 2] = i51;
       i56 = i22;
      }
     } while (0);
     L128 : do if (i49 >>> 0 < 16) {
      i22 = i49 + i6 | 0;
      HEAP32[i48 + 4 >> 2] = i22 | 3;
      i14 = i48 + i22 + 4 | 0;
      HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
     } else {
      HEAP32[i48 + 4 >> 2] = i6 | 3;
      HEAP32[i8 + 4 >> 2] = i49 | 1;
      HEAP32[i8 + i49 >> 2] = i49;
      i14 = i49 >>> 3;
      if (i49 >>> 0 < 256) {
       i22 = 108992 + (i14 << 1 << 2) | 0;
       i20 = HEAP32[27238] | 0;
       i9 = 1 << i14;
       if (!(i20 & i9)) {
        HEAP32[27238] = i20 | i9;
        i57 = i22;
        i58 = i22 + 8 | 0;
       } else {
        i9 = i22 + 8 | 0;
        i57 = HEAP32[i9 >> 2] | 0;
        i58 = i9;
       }
       HEAP32[i58 >> 2] = i8;
       HEAP32[i57 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i57;
       HEAP32[i8 + 12 >> 2] = i22;
       break;
      }
      i22 = i49 >>> 8;
      if (!i22) i59 = 0; else if (i49 >>> 0 > 16777215) i59 = 31; else {
       i9 = (i22 + 1048320 | 0) >>> 16 & 8;
       i20 = i22 << i9;
       i22 = (i20 + 520192 | 0) >>> 16 & 4;
       i14 = i20 << i22;
       i20 = (i14 + 245760 | 0) >>> 16 & 2;
       i7 = 14 - (i22 | i9 | i20) + (i14 << i20 >>> 15) | 0;
       i59 = i49 >>> (i7 + 7 | 0) & 1 | i7 << 1;
      }
      i7 = 109256 + (i59 << 2) | 0;
      HEAP32[i8 + 28 >> 2] = i59;
      i20 = i8 + 16 | 0;
      HEAP32[i20 + 4 >> 2] = 0;
      HEAP32[i20 >> 2] = 0;
      i20 = 1 << i59;
      if (!(i56 & i20)) {
       HEAP32[27239] = i56 | i20;
       HEAP32[i7 >> 2] = i8;
       HEAP32[i8 + 24 >> 2] = i7;
       HEAP32[i8 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i8;
       break;
      }
      i20 = HEAP32[i7 >> 2] | 0;
      L145 : do if ((HEAP32[i20 + 4 >> 2] & -8 | 0) == (i49 | 0)) i60 = i20; else {
       i7 = i49 << ((i59 | 0) == 31 ? 0 : 25 - (i59 >>> 1) | 0);
       i14 = i20;
       while (1) {
        i61 = i14 + 16 + (i7 >>> 31 << 2) | 0;
        i9 = HEAP32[i61 >> 2] | 0;
        if (!i9) break;
        if ((HEAP32[i9 + 4 >> 2] & -8 | 0) == (i49 | 0)) {
         i60 = i9;
         break L145;
        } else {
         i7 = i7 << 1;
         i14 = i9;
        }
       }
       HEAP32[i61 >> 2] = i8;
       HEAP32[i8 + 24 >> 2] = i14;
       HEAP32[i8 + 12 >> 2] = i8;
       HEAP32[i8 + 8 >> 2] = i8;
       break L128;
      } while (0);
      i20 = i60 + 8 | 0;
      i34 = HEAP32[i20 >> 2] | 0;
      HEAP32[i34 + 12 >> 2] = i8;
      HEAP32[i20 >> 2] = i8;
      HEAP32[i8 + 8 >> 2] = i34;
      HEAP32[i8 + 12 >> 2] = i60;
      HEAP32[i8 + 24 >> 2] = 0;
     } while (0);
     i15 = i48 + 8 | 0;
     STACKTOP = i3;
     return i15 | 0;
    } else i19 = i6;
   } else i19 = i6;
  }
 } while (0);
 i48 = HEAP32[27240] | 0;
 if (i48 >>> 0 >= i19 >>> 0) {
  i60 = i48 - i19 | 0;
  i61 = HEAP32[27243] | 0;
  if (i60 >>> 0 > 15) {
   i49 = i61 + i19 | 0;
   HEAP32[27243] = i49;
   HEAP32[27240] = i60;
   HEAP32[i49 + 4 >> 2] = i60 | 1;
   HEAP32[i61 + i48 >> 2] = i60;
   HEAP32[i61 + 4 >> 2] = i19 | 3;
  } else {
   HEAP32[27240] = 0;
   HEAP32[27243] = 0;
   HEAP32[i61 + 4 >> 2] = i48 | 3;
   i60 = i61 + i48 + 4 | 0;
   HEAP32[i60 >> 2] = HEAP32[i60 >> 2] | 1;
  }
  i15 = i61 + 8 | 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 i61 = HEAP32[27241] | 0;
 if (i61 >>> 0 > i19 >>> 0) {
  i60 = i61 - i19 | 0;
  HEAP32[27241] = i60;
  i48 = HEAP32[27244] | 0;
  i49 = i48 + i19 | 0;
  HEAP32[27244] = i49;
  HEAP32[i49 + 4 >> 2] = i60 | 1;
  HEAP32[i48 + 4 >> 2] = i19 | 3;
  i15 = i48 + 8 | 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 if (!(HEAP32[27356] | 0)) {
  HEAP32[27358] = 4096;
  HEAP32[27357] = 4096;
  HEAP32[27359] = -1;
  HEAP32[27360] = -1;
  HEAP32[27361] = 0;
  HEAP32[27349] = 0;
  HEAP32[27356] = i4 & -16 ^ 1431655768;
  i62 = 4096;
 } else i62 = HEAP32[27358] | 0;
 i4 = i19 + 48 | 0;
 i48 = i19 + 47 | 0;
 i60 = i62 + i48 | 0;
 i49 = 0 - i62 | 0;
 i62 = i60 & i49;
 if (i62 >>> 0 <= i19 >>> 0) {
  i15 = 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 i59 = HEAP32[27348] | 0;
 if (i59 | 0) {
  i56 = HEAP32[27346] | 0;
  i57 = i56 + i62 | 0;
  if (i57 >>> 0 <= i56 >>> 0 | i57 >>> 0 > i59 >>> 0) {
   i15 = 0;
   STACKTOP = i3;
   return i15 | 0;
  }
 }
 L178 : do if (!(HEAP32[27349] & 4)) {
  i59 = HEAP32[27244] | 0;
  L180 : do if (!i59) i2 = 128; else {
   i57 = 109400;
   while (1) {
    i56 = HEAP32[i57 >> 2] | 0;
    if (i56 >>> 0 <= i59 >>> 0) if ((i56 + (HEAP32[i57 + 4 >> 2] | 0) | 0) >>> 0 > i59 >>> 0) break;
    i56 = HEAP32[i57 + 8 >> 2] | 0;
    if (!i56) {
     i2 = 128;
     break L180;
    } else i57 = i56;
   }
   i56 = i60 - i61 & i49;
   if (i56 >>> 0 < 2147483647) {
    i58 = _sbrk(i56 | 0) | 0;
    if ((i58 | 0) == ((HEAP32[i57 >> 2] | 0) + (HEAP32[i57 + 4 >> 2] | 0) | 0)) if ((i58 | 0) == (-1 | 0)) i63 = i56; else {
     i64 = i56;
     i65 = i58;
     i2 = 145;
     break L178;
    } else {
     i66 = i58;
     i67 = i56;
     i2 = 136;
    }
   } else i63 = 0;
  } while (0);
  do if ((i2 | 0) == 128) {
   i59 = _sbrk(0) | 0;
   if ((i59 | 0) == (-1 | 0)) i63 = 0; else {
    i6 = i59;
    i56 = HEAP32[27357] | 0;
    i58 = i56 + -1 | 0;
    i51 = ((i58 & i6 | 0) == 0 ? 0 : (i58 + i6 & 0 - i56) - i6 | 0) + i62 | 0;
    i6 = HEAP32[27346] | 0;
    i56 = i51 + i6 | 0;
    if (i51 >>> 0 > i19 >>> 0 & i51 >>> 0 < 2147483647) {
     i58 = HEAP32[27348] | 0;
     if (i58 | 0) if (i56 >>> 0 <= i6 >>> 0 | i56 >>> 0 > i58 >>> 0) {
      i63 = 0;
      break;
     }
     i58 = _sbrk(i51 | 0) | 0;
     if ((i58 | 0) == (i59 | 0)) {
      i64 = i51;
      i65 = i59;
      i2 = 145;
      break L178;
     } else {
      i66 = i58;
      i67 = i51;
      i2 = 136;
     }
    } else i63 = 0;
   }
  } while (0);
  do if ((i2 | 0) == 136) {
   i51 = 0 - i67 | 0;
   if (!(i4 >>> 0 > i67 >>> 0 & (i67 >>> 0 < 2147483647 & (i66 | 0) != (-1 | 0)))) if ((i66 | 0) == (-1 | 0)) {
    i63 = 0;
    break;
   } else {
    i64 = i67;
    i65 = i66;
    i2 = 145;
    break L178;
   }
   i58 = HEAP32[27358] | 0;
   i59 = i48 - i67 + i58 & 0 - i58;
   if (i59 >>> 0 >= 2147483647) {
    i64 = i67;
    i65 = i66;
    i2 = 145;
    break L178;
   }
   if ((_sbrk(i59 | 0) | 0) == (-1 | 0)) {
    _sbrk(i51 | 0) | 0;
    i63 = 0;
    break;
   } else {
    i64 = i59 + i67 | 0;
    i65 = i66;
    i2 = 145;
    break L178;
   }
  } while (0);
  HEAP32[27349] = HEAP32[27349] | 4;
  i68 = i63;
  i2 = 143;
 } else {
  i68 = 0;
  i2 = 143;
 } while (0);
 if ((i2 | 0) == 143) if (i62 >>> 0 < 2147483647) {
  i63 = _sbrk(i62 | 0) | 0;
  i62 = _sbrk(0) | 0;
  i66 = i62 - i63 | 0;
  i67 = i66 >>> 0 > (i19 + 40 | 0) >>> 0;
  if (!((i63 | 0) == (-1 | 0) | i67 ^ 1 | i63 >>> 0 < i62 >>> 0 & ((i63 | 0) != (-1 | 0) & (i62 | 0) != (-1 | 0)) ^ 1)) {
   i64 = i67 ? i66 : i68;
   i65 = i63;
   i2 = 145;
  }
 }
 if ((i2 | 0) == 145) {
  i63 = (HEAP32[27346] | 0) + i64 | 0;
  HEAP32[27346] = i63;
  if (i63 >>> 0 > (HEAP32[27347] | 0) >>> 0) HEAP32[27347] = i63;
  i63 = HEAP32[27244] | 0;
  L215 : do if (!i63) {
   i68 = HEAP32[27242] | 0;
   if ((i68 | 0) == 0 | i65 >>> 0 < i68 >>> 0) HEAP32[27242] = i65;
   HEAP32[27350] = i65;
   HEAP32[27351] = i64;
   HEAP32[27353] = 0;
   HEAP32[27247] = HEAP32[27356];
   HEAP32[27246] = -1;
   HEAP32[27251] = 108992;
   HEAP32[27250] = 108992;
   HEAP32[27253] = 109e3;
   HEAP32[27252] = 109e3;
   HEAP32[27255] = 109008;
   HEAP32[27254] = 109008;
   HEAP32[27257] = 109016;
   HEAP32[27256] = 109016;
   HEAP32[27259] = 109024;
   HEAP32[27258] = 109024;
   HEAP32[27261] = 109032;
   HEAP32[27260] = 109032;
   HEAP32[27263] = 109040;
   HEAP32[27262] = 109040;
   HEAP32[27265] = 109048;
   HEAP32[27264] = 109048;
   HEAP32[27267] = 109056;
   HEAP32[27266] = 109056;
   HEAP32[27269] = 109064;
   HEAP32[27268] = 109064;
   HEAP32[27271] = 109072;
   HEAP32[27270] = 109072;
   HEAP32[27273] = 109080;
   HEAP32[27272] = 109080;
   HEAP32[27275] = 109088;
   HEAP32[27274] = 109088;
   HEAP32[27277] = 109096;
   HEAP32[27276] = 109096;
   HEAP32[27279] = 109104;
   HEAP32[27278] = 109104;
   HEAP32[27281] = 109112;
   HEAP32[27280] = 109112;
   HEAP32[27283] = 109120;
   HEAP32[27282] = 109120;
   HEAP32[27285] = 109128;
   HEAP32[27284] = 109128;
   HEAP32[27287] = 109136;
   HEAP32[27286] = 109136;
   HEAP32[27289] = 109144;
   HEAP32[27288] = 109144;
   HEAP32[27291] = 109152;
   HEAP32[27290] = 109152;
   HEAP32[27293] = 109160;
   HEAP32[27292] = 109160;
   HEAP32[27295] = 109168;
   HEAP32[27294] = 109168;
   HEAP32[27297] = 109176;
   HEAP32[27296] = 109176;
   HEAP32[27299] = 109184;
   HEAP32[27298] = 109184;
   HEAP32[27301] = 109192;
   HEAP32[27300] = 109192;
   HEAP32[27303] = 109200;
   HEAP32[27302] = 109200;
   HEAP32[27305] = 109208;
   HEAP32[27304] = 109208;
   HEAP32[27307] = 109216;
   HEAP32[27306] = 109216;
   HEAP32[27309] = 109224;
   HEAP32[27308] = 109224;
   HEAP32[27311] = 109232;
   HEAP32[27310] = 109232;
   HEAP32[27313] = 109240;
   HEAP32[27312] = 109240;
   i68 = i64 + -40 | 0;
   i66 = i65 + 8 | 0;
   i67 = (i66 & 7 | 0) == 0 ? 0 : 0 - i66 & 7;
   i66 = i65 + i67 | 0;
   i62 = i68 - i67 | 0;
   HEAP32[27244] = i66;
   HEAP32[27241] = i62;
   HEAP32[i66 + 4 >> 2] = i62 | 1;
   HEAP32[i65 + i68 + 4 >> 2] = 40;
   HEAP32[27245] = HEAP32[27360];
  } else {
   i68 = 109400;
   while (1) {
    i69 = HEAP32[i68 >> 2] | 0;
    i70 = HEAP32[i68 + 4 >> 2] | 0;
    if ((i65 | 0) == (i69 + i70 | 0)) {
     i2 = 154;
     break;
    }
    i62 = HEAP32[i68 + 8 >> 2] | 0;
    if (!i62) break; else i68 = i62;
   }
   if ((i2 | 0) == 154) {
    i62 = i68 + 4 | 0;
    if (!(HEAP32[i68 + 12 >> 2] & 8)) if (i65 >>> 0 > i63 >>> 0 & i69 >>> 0 <= i63 >>> 0) {
     HEAP32[i62 >> 2] = i70 + i64;
     i62 = (HEAP32[27241] | 0) + i64 | 0;
     i66 = i63 + 8 | 0;
     i67 = (i66 & 7 | 0) == 0 ? 0 : 0 - i66 & 7;
     i66 = i63 + i67 | 0;
     i48 = i62 - i67 | 0;
     HEAP32[27244] = i66;
     HEAP32[27241] = i48;
     HEAP32[i66 + 4 >> 2] = i48 | 1;
     HEAP32[i63 + i62 + 4 >> 2] = 40;
     HEAP32[27245] = HEAP32[27360];
     break;
    }
   }
   if (i65 >>> 0 < (HEAP32[27242] | 0) >>> 0) HEAP32[27242] = i65;
   i62 = i65 + i64 | 0;
   i48 = 109400;
   while (1) {
    if ((HEAP32[i48 >> 2] | 0) == (i62 | 0)) {
     i2 = 162;
     break;
    }
    i66 = HEAP32[i48 + 8 >> 2] | 0;
    if (!i66) break; else i48 = i66;
   }
   if ((i2 | 0) == 162) if (!(HEAP32[i48 + 12 >> 2] & 8)) {
    HEAP32[i48 >> 2] = i65;
    i68 = i48 + 4 | 0;
    HEAP32[i68 >> 2] = (HEAP32[i68 >> 2] | 0) + i64;
    i68 = i65 + 8 | 0;
    i66 = i65 + ((i68 & 7 | 0) == 0 ? 0 : 0 - i68 & 7) | 0;
    i68 = i62 + 8 | 0;
    i67 = i62 + ((i68 & 7 | 0) == 0 ? 0 : 0 - i68 & 7) | 0;
    i68 = i66 + i19 | 0;
    i4 = i67 - i66 - i19 | 0;
    HEAP32[i66 + 4 >> 2] = i19 | 3;
    L238 : do if ((i63 | 0) == (i67 | 0)) {
     i49 = (HEAP32[27241] | 0) + i4 | 0;
     HEAP32[27241] = i49;
     HEAP32[27244] = i68;
     HEAP32[i68 + 4 >> 2] = i49 | 1;
    } else {
     if ((HEAP32[27243] | 0) == (i67 | 0)) {
      i49 = (HEAP32[27240] | 0) + i4 | 0;
      HEAP32[27240] = i49;
      HEAP32[27243] = i68;
      HEAP32[i68 + 4 >> 2] = i49 | 1;
      HEAP32[i68 + i49 >> 2] = i49;
      break;
     }
     i49 = HEAP32[i67 + 4 >> 2] | 0;
     if ((i49 & 3 | 0) == 1) {
      i61 = i49 & -8;
      i60 = i49 >>> 3;
      L246 : do if (i49 >>> 0 < 256) {
       i59 = HEAP32[i67 + 8 >> 2] | 0;
       i51 = HEAP32[i67 + 12 >> 2] | 0;
       if ((i51 | 0) == (i59 | 0)) {
        HEAP32[27238] = HEAP32[27238] & ~(1 << i60);
        break;
       } else {
        HEAP32[i59 + 12 >> 2] = i51;
        HEAP32[i51 + 8 >> 2] = i59;
        break;
       }
      } else {
       i59 = HEAP32[i67 + 24 >> 2] | 0;
       i51 = HEAP32[i67 + 12 >> 2] | 0;
       do if ((i51 | 0) == (i67 | 0)) {
        i58 = i67 + 16 | 0;
        i56 = i58 + 4 | 0;
        i6 = HEAP32[i56 >> 2] | 0;
        if (!i6) {
         i55 = HEAP32[i58 >> 2] | 0;
         if (!i55) {
          i71 = 0;
          break;
         } else {
          i72 = i55;
          i73 = i58;
         }
        } else {
         i72 = i6;
         i73 = i56;
        }
        i56 = i72;
        i6 = i73;
        while (1) {
         i58 = i56 + 20 | 0;
         i55 = HEAP32[i58 >> 2] | 0;
         if (!i55) {
          i54 = i56 + 16 | 0;
          i53 = HEAP32[i54 >> 2] | 0;
          if (!i53) break; else {
           i74 = i53;
           i75 = i54;
          }
         } else {
          i74 = i55;
          i75 = i58;
         }
         i56 = i74;
         i6 = i75;
        }
        HEAP32[i6 >> 2] = 0;
        i71 = i56;
       } else {
        i58 = HEAP32[i67 + 8 >> 2] | 0;
        HEAP32[i58 + 12 >> 2] = i51;
        HEAP32[i51 + 8 >> 2] = i58;
        i71 = i51;
       } while (0);
       if (!i59) break;
       i51 = HEAP32[i67 + 28 >> 2] | 0;
       i14 = 109256 + (i51 << 2) | 0;
       do if ((HEAP32[i14 >> 2] | 0) == (i67 | 0)) {
        HEAP32[i14 >> 2] = i71;
        if (i71 | 0) break;
        HEAP32[27239] = HEAP32[27239] & ~(1 << i51);
        break L246;
       } else {
        i58 = i59 + 16 | 0;
        HEAP32[((HEAP32[i58 >> 2] | 0) == (i67 | 0) ? i58 : i59 + 20 | 0) >> 2] = i71;
        if (!i71) break L246;
       } while (0);
       HEAP32[i71 + 24 >> 2] = i59;
       i51 = i67 + 16 | 0;
       i14 = HEAP32[i51 >> 2] | 0;
       if (i14 | 0) {
        HEAP32[i71 + 16 >> 2] = i14;
        HEAP32[i14 + 24 >> 2] = i71;
       }
       i14 = HEAP32[i51 + 4 >> 2] | 0;
       if (!i14) break;
       HEAP32[i71 + 20 >> 2] = i14;
       HEAP32[i14 + 24 >> 2] = i71;
      } while (0);
      i76 = i67 + i61 | 0;
      i77 = i61 + i4 | 0;
     } else {
      i76 = i67;
      i77 = i4;
     }
     i60 = i76 + 4 | 0;
     HEAP32[i60 >> 2] = HEAP32[i60 >> 2] & -2;
     HEAP32[i68 + 4 >> 2] = i77 | 1;
     HEAP32[i68 + i77 >> 2] = i77;
     i60 = i77 >>> 3;
     if (i77 >>> 0 < 256) {
      i49 = 108992 + (i60 << 1 << 2) | 0;
      i57 = HEAP32[27238] | 0;
      i14 = 1 << i60;
      if (!(i57 & i14)) {
       HEAP32[27238] = i57 | i14;
       i78 = i49;
       i79 = i49 + 8 | 0;
      } else {
       i14 = i49 + 8 | 0;
       i78 = HEAP32[i14 >> 2] | 0;
       i79 = i14;
      }
      HEAP32[i79 >> 2] = i68;
      HEAP32[i78 + 12 >> 2] = i68;
      HEAP32[i68 + 8 >> 2] = i78;
      HEAP32[i68 + 12 >> 2] = i49;
      break;
     }
     i49 = i77 >>> 8;
     do if (!i49) i80 = 0; else {
      if (i77 >>> 0 > 16777215) {
       i80 = 31;
       break;
      }
      i14 = (i49 + 1048320 | 0) >>> 16 & 8;
      i57 = i49 << i14;
      i60 = (i57 + 520192 | 0) >>> 16 & 4;
      i51 = i57 << i60;
      i57 = (i51 + 245760 | 0) >>> 16 & 2;
      i58 = 14 - (i60 | i14 | i57) + (i51 << i57 >>> 15) | 0;
      i80 = i77 >>> (i58 + 7 | 0) & 1 | i58 << 1;
     } while (0);
     i49 = 109256 + (i80 << 2) | 0;
     HEAP32[i68 + 28 >> 2] = i80;
     i61 = i68 + 16 | 0;
     HEAP32[i61 + 4 >> 2] = 0;
     HEAP32[i61 >> 2] = 0;
     i61 = HEAP32[27239] | 0;
     i58 = 1 << i80;
     if (!(i61 & i58)) {
      HEAP32[27239] = i61 | i58;
      HEAP32[i49 >> 2] = i68;
      HEAP32[i68 + 24 >> 2] = i49;
      HEAP32[i68 + 12 >> 2] = i68;
      HEAP32[i68 + 8 >> 2] = i68;
      break;
     }
     i58 = HEAP32[i49 >> 2] | 0;
     L291 : do if ((HEAP32[i58 + 4 >> 2] & -8 | 0) == (i77 | 0)) i81 = i58; else {
      i49 = i77 << ((i80 | 0) == 31 ? 0 : 25 - (i80 >>> 1) | 0);
      i61 = i58;
      while (1) {
       i82 = i61 + 16 + (i49 >>> 31 << 2) | 0;
       i57 = HEAP32[i82 >> 2] | 0;
       if (!i57) break;
       if ((HEAP32[i57 + 4 >> 2] & -8 | 0) == (i77 | 0)) {
        i81 = i57;
        break L291;
       } else {
        i49 = i49 << 1;
        i61 = i57;
       }
      }
      HEAP32[i82 >> 2] = i68;
      HEAP32[i68 + 24 >> 2] = i61;
      HEAP32[i68 + 12 >> 2] = i68;
      HEAP32[i68 + 8 >> 2] = i68;
      break L238;
     } while (0);
     i58 = i81 + 8 | 0;
     i49 = HEAP32[i58 >> 2] | 0;
     HEAP32[i49 + 12 >> 2] = i68;
     HEAP32[i58 >> 2] = i68;
     HEAP32[i68 + 8 >> 2] = i49;
     HEAP32[i68 + 12 >> 2] = i81;
     HEAP32[i68 + 24 >> 2] = 0;
    } while (0);
    i15 = i66 + 8 | 0;
    STACKTOP = i3;
    return i15 | 0;
   }
   i68 = 109400;
   while (1) {
    i4 = HEAP32[i68 >> 2] | 0;
    if (i4 >>> 0 <= i63 >>> 0) {
     i83 = i4 + (HEAP32[i68 + 4 >> 2] | 0) | 0;
     if (i83 >>> 0 > i63 >>> 0) break;
    }
    i68 = HEAP32[i68 + 8 >> 2] | 0;
   }
   i68 = i83 + -47 | 0;
   i66 = i68 + 8 | 0;
   i4 = i68 + ((i66 & 7 | 0) == 0 ? 0 : 0 - i66 & 7) | 0;
   i66 = i63 + 16 | 0;
   i68 = i4 >>> 0 < i66 >>> 0 ? i63 : i4;
   i4 = i68 + 8 | 0;
   i67 = i64 + -40 | 0;
   i62 = i65 + 8 | 0;
   i48 = (i62 & 7 | 0) == 0 ? 0 : 0 - i62 & 7;
   i62 = i65 + i48 | 0;
   i49 = i67 - i48 | 0;
   HEAP32[27244] = i62;
   HEAP32[27241] = i49;
   HEAP32[i62 + 4 >> 2] = i49 | 1;
   HEAP32[i65 + i67 + 4 >> 2] = 40;
   HEAP32[27245] = HEAP32[27360];
   i67 = i68 + 4 | 0;
   HEAP32[i67 >> 2] = 27;
   HEAP32[i4 >> 2] = HEAP32[27350];
   HEAP32[i4 + 4 >> 2] = HEAP32[27351];
   HEAP32[i4 + 8 >> 2] = HEAP32[27352];
   HEAP32[i4 + 12 >> 2] = HEAP32[27353];
   HEAP32[27350] = i65;
   HEAP32[27351] = i64;
   HEAP32[27353] = 0;
   HEAP32[27352] = i4;
   i4 = i68 + 24 | 0;
   do {
    i49 = i4;
    i4 = i4 + 4 | 0;
    HEAP32[i4 >> 2] = 7;
   } while ((i49 + 8 | 0) >>> 0 < i83 >>> 0);
   if ((i68 | 0) != (i63 | 0)) {
    i4 = i68 - i63 | 0;
    HEAP32[i67 >> 2] = HEAP32[i67 >> 2] & -2;
    HEAP32[i63 + 4 >> 2] = i4 | 1;
    HEAP32[i68 >> 2] = i4;
    i49 = i4 >>> 3;
    if (i4 >>> 0 < 256) {
     i62 = 108992 + (i49 << 1 << 2) | 0;
     i48 = HEAP32[27238] | 0;
     i58 = 1 << i49;
     if (!(i48 & i58)) {
      HEAP32[27238] = i48 | i58;
      i84 = i62;
      i85 = i62 + 8 | 0;
     } else {
      i58 = i62 + 8 | 0;
      i84 = HEAP32[i58 >> 2] | 0;
      i85 = i58;
     }
     HEAP32[i85 >> 2] = i63;
     HEAP32[i84 + 12 >> 2] = i63;
     HEAP32[i63 + 8 >> 2] = i84;
     HEAP32[i63 + 12 >> 2] = i62;
     break;
    }
    i62 = i4 >>> 8;
    if (!i62) i86 = 0; else if (i4 >>> 0 > 16777215) i86 = 31; else {
     i58 = (i62 + 1048320 | 0) >>> 16 & 8;
     i48 = i62 << i58;
     i62 = (i48 + 520192 | 0) >>> 16 & 4;
     i49 = i48 << i62;
     i48 = (i49 + 245760 | 0) >>> 16 & 2;
     i59 = 14 - (i62 | i58 | i48) + (i49 << i48 >>> 15) | 0;
     i86 = i4 >>> (i59 + 7 | 0) & 1 | i59 << 1;
    }
    i59 = 109256 + (i86 << 2) | 0;
    HEAP32[i63 + 28 >> 2] = i86;
    HEAP32[i63 + 20 >> 2] = 0;
    HEAP32[i66 >> 2] = 0;
    i48 = HEAP32[27239] | 0;
    i49 = 1 << i86;
    if (!(i48 & i49)) {
     HEAP32[27239] = i48 | i49;
     HEAP32[i59 >> 2] = i63;
     HEAP32[i63 + 24 >> 2] = i59;
     HEAP32[i63 + 12 >> 2] = i63;
     HEAP32[i63 + 8 >> 2] = i63;
     break;
    }
    i49 = HEAP32[i59 >> 2] | 0;
    L325 : do if ((HEAP32[i49 + 4 >> 2] & -8 | 0) == (i4 | 0)) i87 = i49; else {
     i59 = i4 << ((i86 | 0) == 31 ? 0 : 25 - (i86 >>> 1) | 0);
     i48 = i49;
     while (1) {
      i88 = i48 + 16 + (i59 >>> 31 << 2) | 0;
      i58 = HEAP32[i88 >> 2] | 0;
      if (!i58) break;
      if ((HEAP32[i58 + 4 >> 2] & -8 | 0) == (i4 | 0)) {
       i87 = i58;
       break L325;
      } else {
       i59 = i59 << 1;
       i48 = i58;
      }
     }
     HEAP32[i88 >> 2] = i63;
     HEAP32[i63 + 24 >> 2] = i48;
     HEAP32[i63 + 12 >> 2] = i63;
     HEAP32[i63 + 8 >> 2] = i63;
     break L215;
    } while (0);
    i4 = i87 + 8 | 0;
    i49 = HEAP32[i4 >> 2] | 0;
    HEAP32[i49 + 12 >> 2] = i63;
    HEAP32[i4 >> 2] = i63;
    HEAP32[i63 + 8 >> 2] = i49;
    HEAP32[i63 + 12 >> 2] = i87;
    HEAP32[i63 + 24 >> 2] = 0;
   }
  } while (0);
  i63 = HEAP32[27241] | 0;
  if (i63 >>> 0 > i19 >>> 0) {
   i87 = i63 - i19 | 0;
   HEAP32[27241] = i87;
   i63 = HEAP32[27244] | 0;
   i88 = i63 + i19 | 0;
   HEAP32[27244] = i88;
   HEAP32[i88 + 4 >> 2] = i87 | 1;
   HEAP32[i63 + 4 >> 2] = i19 | 3;
   i15 = i63 + 8 | 0;
   STACKTOP = i3;
   return i15 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i15 = 0;
 STACKTOP = i3;
 return i15 | 0;
}

function _do_set(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i5 = i4 + 120 | 0;
 i6 = i4 + 116 | 0;
 i7 = i4 + 112 | 0;
 i8 = i4 + 108 | 0;
 i9 = i4 + 104 | 0;
 i10 = i4 + 128 | 0;
 i11 = i4 + 100 | 0;
 i12 = i4 + 96 | 0;
 i13 = i4 + 92 | 0;
 i14 = i4 + 88 | 0;
 i15 = i4 + 84 | 0;
 i16 = i4 + 80 | 0;
 i17 = i4 + 76 | 0;
 i18 = i4 + 72 | 0;
 i19 = i4 + 68 | 0;
 i20 = i4 + 64 | 0;
 i21 = i4 + 60 | 0;
 i22 = i4 + 56 | 0;
 i23 = i4 + 52 | 0;
 i24 = i4 + 48 | 0;
 i25 = i4 + 44 | 0;
 i26 = i4 + 124 | 0;
 i27 = i4 + 40 | 0;
 i28 = i4 + 36 | 0;
 i29 = i4 + 32 | 0;
 i30 = i4 + 28 | 0;
 i31 = i4 + 24 | 0;
 i32 = i4 + 20 | 0;
 i33 = i4 + 16 | 0;
 i34 = i4 + 12 | 0;
 i35 = i4 + 8 | 0;
 i36 = i4 + 4 | 0;
 i37 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 L1 : do if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
  _showoptions(0, HEAP32[i7 >> 2] | 0);
  HEAP32[i21 >> 2] = 1;
 } else {
  while (1) {
   if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break L1;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
   do if (!(_strncmp(HEAP32[i6 >> 2] | 0, 63367, 3) | 0)) if (_isalpha(HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] | 0) | 0) i3 = 11; else if (HEAP32[i7 >> 2] & 8 | 0) i3 = 11; else {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
    if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 38) {
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     _set_options_default(1 | HEAP32[i7 >> 2]);
     _didset_options();
     _didset_options2();
     _redraw_all_later(50);
     break;
    } else {
     _showoptions(1, HEAP32[i7 >> 2] | 0);
     HEAP32[i21 >> 2] = 1;
     break;
    }
   } else i3 = 11; while (0);
   L14 : do if ((i3 | 0) == 11) {
    i3 = 0;
    if (!(_strncmp(HEAP32[i6 >> 2] | 0, 71324, 7) | 0)) if (!(HEAP32[i7 >> 2] & 8)) {
     _showoptions(2, HEAP32[i7 >> 2] | 0);
     _show_termcodes();
     HEAP32[i21 >> 2] = 1;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 7;
     break;
    }
    HEAP32[i12 >> 2] = 1;
    if (!(_strncmp(HEAP32[i6 >> 2] | 0, 63495, 2) | 0)) if (_strncmp(HEAP32[i6 >> 2] | 0, 68175, 6) | 0) {
     HEAP32[i12 >> 2] = 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
    } else i3 = 17; else i3 = 17;
    if ((i3 | 0) == 17) {
     i3 = 0;
     if (!(_strncmp(HEAP32[i6 >> 2] | 0, 71332, 3) | 0)) {
      HEAP32[i12 >> 2] = 2;
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
     }
    }
    HEAP32[i18 >> 2] = 0;
    do if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 60) {
     HEAP32[i13 >> 2] = 0;
     HEAP32[i8 >> 2] = -1;
     if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 116) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0) == 95) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] | 0) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 4 >> 0] | 0) HEAP32[i15 >> 2] = 5; else i3 = 25; else i3 = 25; else i3 = 25; else i3 = 25;
     L34 : do if ((i3 | 0) == 25) {
      i3 = 0;
      HEAP32[i15 >> 2] = 1;
      while (1) {
       if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0)) break L34;
       if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) == 62) break L34;
       HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
      }
     } while (0);
     if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 62) {
      HEAP32[i9 >> 2] = 92453;
      break;
     }
     HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = 0;
     if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 116) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0) == 95) HEAP32[i8 >> 2] = _findoption((HEAP32[i6 >> 2] | 0) + 1 | 0) | 0;
     i2 = HEAP32[i6 >> 2] | 0;
     i1 = HEAP32[i15 >> 2] | 0;
     HEAP32[i15 >> 2] = i1 + 1;
     HEAP8[i2 + i1 >> 0] = 62;
     if ((HEAP32[i8 >> 2] | 0) == -1) {
      HEAP32[i18 >> 2] = _find_key_option((HEAP32[i6 >> 2] | 0) + 1 | 0) | 0;
      i3 = 49;
     } else i3 = 49;
    } else {
     HEAP32[i15 >> 2] = 0;
     if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 116) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 95) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] | 0) HEAP32[i15 >> 2] = 4; else i3 = 41; else i3 = 41; else i3 = 41; else i3 = 41;
     L55 : do if ((i3 | 0) == 41) {
      i3 = 0;
      while (1) {
       if (((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 97 | 0) >>> 0 >= 26) if (((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 48 | 0) >>> 0 >= 10) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 95) break L55;
       HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
      }
     } while (0);
     HEAP32[i13 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0];
     HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = 0;
     HEAP32[i8 >> 2] = _findoption(HEAP32[i6 >> 2] | 0) | 0;
     HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = HEAP32[i13 >> 2];
     if ((HEAP32[i8 >> 2] | 0) == -1) {
      HEAP32[i18 >> 2] = _find_key_option(HEAP32[i6 >> 2] | 0) | 0;
      i3 = 49;
     } else i3 = 49;
    } while (0);
    L66 : do if ((i3 | 0) == 49) {
     i3 = 0;
     HEAP32[i14 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0];
     while (1) {
      if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 32) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 9) break;
      HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     }
     HEAP32[i22 >> 2] = 0;
     HEAP32[i23 >> 2] = 0;
     HEAP32[i24 >> 2] = 0;
     do if (HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 1) >> 0] | 0) == 61) {
      if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) == 43) {
       HEAP32[i22 >> 2] = 1;
       HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
       break;
      }
      if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) == 94) {
       HEAP32[i23 >> 2] = 1;
       HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
       break;
      }
      if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) == 45) {
       HEAP32[i24 >> 2] = 1;
       HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
      }
     } while (0);
     HEAP32[i13 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0];
     if ((HEAP32[i8 >> 2] | 0) == -1 & (HEAP32[i18 >> 2] | 0) == 0) {
      HEAP32[i9 >> 2] = 71336;
      break;
     }
     do if ((HEAP32[i8 >> 2] | 0) >= 0) {
      if (HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) {
       HEAP32[i19 >> 2] = HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 8 >> 2];
       HEAP32[i20 >> 2] = _get_varp_scope(15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) | 0, HEAP32[i7 >> 2] | 0) | 0;
       break;
      }
      if (_vim_strchr(71357, HEAP32[i13 >> 2] | 0) | 0) break L66;
      if (!((HEAP32[i13 >> 2] | 0) == 63 ? 1 : (HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 8 >> 2] & 1 | 0) == 0)) break L66;
      HEAP32[i9 >> 2] = 71363;
      break L66;
     } else {
      HEAP32[i19 >> 2] = 4;
      if ((HEAP32[i18 >> 2] | 0) < 0) {
       HEAP8[i26 >> 0] = 0 - (HEAP32[i18 >> 2] | 0);
       HEAP8[i26 + 1 >> 0] = (0 - (HEAP32[i18 >> 2] | 0) | 0) >>> 8;
       break;
      } else {
       HEAP8[i26 >> 0] = -14;
       HEAP8[i26 + 1 >> 0] = HEAP32[i18 >> 2];
       break;
      }
     } while (0);
     if (HEAP32[i7 >> 2] & 16 | 0) {
      if ((HEAP32[i8 >> 2] | 0) < 0) break;
      if ((HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) != (-1 | 0)) break;
     }
     if ((HEAP32[i7 >> 2] & 32 | 0) != 0 & (HEAP32[i8 >> 2] | 0) >= 0) if ((HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) == (-1 | 0)) break;
     if (HEAP32[i7 >> 2] & 8 | 0) if (HEAP32[i19 >> 2] & 34078720 | 0) {
      HEAP32[i9 >> 2] = 71390;
      break;
     }
     do if (_vim_strchr(71422, HEAP32[i13 >> 2] | 0) | 0) {
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
      HEAP32[i25 >> 2] = HEAP32[26903];
      do if ((HEAP32[i13 >> 2] | 0) == 38) {
       if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) != 118) break;
       if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0) != 105) break;
       if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] | 0) == 109) {
        HEAP32[i25 >> 2] = 0;
        HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
        break;
       } else {
        HEAP32[i25 >> 2] = 1;
        HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
        break;
       }
      } while (0);
      if (_vim_strchr(71429, HEAP32[i13 >> 2] | 0) | 0) {
       if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0)) break;
       if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 32) break;
       if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 9) break;
       HEAP32[i9 >> 2] = 93844;
       break L66;
      }
     } while (0);
     L126 : do if ((HEAP32[i13 >> 2] | 0) != 63) {
      do if ((HEAP32[i12 >> 2] | 0) == 1) {
       if (_vim_strchr(71434, HEAP32[i13 >> 2] | 0) | 0) break;
       if (!(HEAP32[i19 >> 2] & 1)) break L126;
      } while (0);
      i1 = HEAP32[i13 >> 2] | 0;
      do if (HEAP32[i19 >> 2] & 1 | 0) {
       if ((i1 | 0) == 61 | (HEAP32[i13 >> 2] | 0) == 58) {
        HEAP32[i9 >> 2] = 92453;
        break L66;
       }
       do if ((HEAP32[i13 >> 2] | 0) == 33) HEAP32[i17 >> 2] = HEAP32[HEAP32[i20 >> 2] >> 2] ^ 1; else {
        if ((HEAP32[i13 >> 2] | 0) == 38) {
         HEAP32[i17 >> 2] = HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 20 + (((HEAP32[i19 >> 2] & 1024 | 0 ? 1 : (HEAP32[i25 >> 2] | 0) != 0) ? 0 : 1) << 2) >> 2];
         break;
        }
        if ((HEAP32[i13 >> 2] | 0) == 60) if ((HEAP32[i7 >> 2] | 0) == 4 ? (HEAP32[i20 >> 2] | 0) == ((HEAP32[26773] | 0) + 740 | 0) : 0) {
         HEAP32[i17 >> 2] = -1;
         break;
        } else {
         HEAP32[i17 >> 2] = HEAP32[(_get_varp_scope(15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) | 0, 2) | 0) >> 2];
         break;
        }
        if (!((HEAP32[i13 >> 2] | 0) == 0 | (HEAP32[i14 >> 2] | 0) == 32 | (HEAP32[i14 >> 2] | 0) == 9)) {
         HEAP32[i9 >> 2] = 93844;
         break L66;
        }
        if ((HEAP32[i12 >> 2] | 0) == 2) {
         HEAP32[i17 >> 2] = HEAP32[HEAP32[i20 >> 2] >> 2] ^ 1;
         break;
        } else {
         HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
         break;
        }
       } while (0);
       HEAP32[i9 >> 2] = _set_bool_option(HEAP32[i8 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
       i3 = 308;
      } else {
       i2 = (_vim_strchr(71434, i1) | 0) == 0;
       if (i2 | (HEAP32[i12 >> 2] | 0) != 1) {
        HEAP32[i9 >> 2] = 92453;
        break L66;
       }
       if (HEAP32[i19 >> 2] & 2 | 0) {
        HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
        L162 : do if ((HEAP32[i13 >> 2] | 0) == 38) HEAP32[i17 >> 2] = HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 20 + (((HEAP32[i19 >> 2] & 1024 | 0 ? 1 : (HEAP32[i25 >> 2] | 0) != 0) ? 0 : 1) << 2) >> 2]; else {
         i2 = HEAP32[i20 >> 2] | 0;
         if ((HEAP32[i13 >> 2] | 0) == 60) if ((i2 | 0) == ((HEAP32[26773] | 0) + 756 | 0) & (HEAP32[i7 >> 2] | 0) == 4) {
          HEAP32[i17 >> 2] = -123456;
          break;
         } else {
          HEAP32[i17 >> 2] = HEAP32[(_get_varp_scope(15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) | 0, 2) | 0) >> 2];
          break;
         }
         if ((i2 | 0) == 108120) i3 = 134; else if ((HEAP32[i20 >> 2] | 0) == 108124) i3 = 134;
         L173 : do if ((i3 | 0) == 134) {
          i3 = 0;
          do if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 60) {
           if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 94) break;
           if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break L173;
           do if (HEAP8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) {
            if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 32) break;
            if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) != 9) break L173;
           } while (0);
           if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) break L173;
          } while (0);
          HEAP32[i17 >> 2] = _string_to_key(HEAP32[i6 >> 2] | 0, 0) | 0;
          if (HEAP32[i17 >> 2] | 0) break L162;
          if ((HEAP32[i20 >> 2] | 0) == 108124) break L162;
          HEAP32[i9 >> 2] = 92453;
          break L66;
         } while (0);
         do if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 45) {
          if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) break;
          HEAP32[i9 >> 2] = 71462;
          break L66;
         } while (0);
         _vim_str2nr(HEAP32[i6 >> 2] | 0, 0, i16, 7, i17, 0, 0);
         if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0)) break;
         if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0) == 32) break;
         if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0) == 9) break;
         HEAP32[i9 >> 2] = 92453;
         break L66;
        } while (0);
        if (HEAP32[i22 >> 2] | 0) HEAP32[i17 >> 2] = (HEAP32[HEAP32[i20 >> 2] >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
        if (HEAP32[i23 >> 2] | 0) HEAP32[i17 >> 2] = Math_imul(HEAP32[HEAP32[i20 >> 2] >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
        if (HEAP32[i24 >> 2] | 0) HEAP32[i17 >> 2] = (HEAP32[HEAP32[i20 >> 2] >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
        HEAP32[i9 >> 2] = _set_num_option(HEAP32[i8 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i17 >> 2] | 0, i10, 80, HEAP32[i7 >> 2] | 0) | 0;
        i3 = 308;
        break;
       }
       if ((HEAP32[i8 >> 2] | 0) < 0) {
        do if ((HEAP32[i13 >> 2] | 0) == 38) {
         if (_add_termcap_entry(i26, 1) | 0) break;
         HEAP32[i9 >> 2] = 63861;
        } else {
         HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
         HEAP32[i37 >> 2] = HEAP32[i6 >> 2];
         while (1) {
          if (HEAPU8[HEAP32[i37 >> 2] >> 0] | 0) {
           if ((HEAPU8[HEAP32[i37 >> 2] >> 0] | 0) == 32) i38 = 1; else i38 = (HEAPU8[HEAP32[i37 >> 2] >> 0] | 0) == 9;
           i39 = i38 ^ 1;
          } else i39 = 0;
          i40 = HEAPU8[HEAP32[i37 >> 2] >> 0] | 0;
          if (!i39) break;
          do if ((i40 | 0) == 92) {
           if (!(HEAPU8[(HEAP32[i37 >> 2] | 0) + 1 >> 0] | 0)) break;
           HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + 1;
          } while (0);
          HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + 1;
         }
         HEAP32[i13 >> 2] = i40;
         HEAP8[HEAP32[i37 >> 2] >> 0] = 0;
         _add_termcode(i26, HEAP32[i6 >> 2] | 0, 0);
         HEAP8[HEAP32[i37 >> 2] >> 0] = HEAP32[i13 >> 2];
        } while (0);
        if (HEAP32[26781] | 0) _ttest(0);
        _redraw_all_later(50);
        i3 = 308;
        break;
       }
       HEAP32[i28 >> 2] = 0;
       HEAP32[i29 >> 2] = 0;
       HEAP32[i30 >> 2] = 0;
       HEAP32[i32 >> 2] = 0;
       do if (!(HEAP32[i7 >> 2] & 6)) {
        if (!(HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 16 >> 2] & 4096)) break;
        HEAP32[i20 >> 2] = HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 12 >> 2];
       } while (0);
       HEAP32[i30 >> 2] = HEAP32[HEAP32[i20 >> 2] >> 2];
       do if (HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 16 >> 2] & 4096 | 0) {
        if (!(HEAP32[i7 >> 2] & 4)) {
         i3 = 165;
         break;
        }
        HEAP32[i32 >> 2] = HEAP32[(_get_varp(15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) | 0) | 0) >> 2];
       } else i3 = 165; while (0);
       if ((i3 | 0) == 165) {
        i3 = 0;
        HEAP32[i32 >> 2] = HEAP32[i30 >> 2];
       }
       do if ((HEAP32[i13 >> 2] | 0) == 38) {
        HEAP32[i31 >> 2] = HEAP32[15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) + 20 + (((HEAP32[i19 >> 2] & 1024 | 0 ? 1 : (HEAP32[i25 >> 2] | 0) != 0) ? 0 : 1) << 2) >> 2];
        do if ((HEAP32[i20 >> 2] | 0) == 107572) if (HEAP32[26627] | 0) {
         HEAP32[i31 >> 2] = _gui_bg_default() | 0;
         break;
        } else {
         HEAP32[i31 >> 2] = _term_bg_default() | 0;
         break;
        } while (0);
        if (!(HEAP32[i31 >> 2] | 0)) HEAP32[i31 >> 2] = 114072; else {
         HEAP32[i29 >> 2] = _option_expand(HEAP32[i8 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0;
         if (!(HEAP32[i29 >> 2] | 0)) HEAP32[i29 >> 2] = HEAP32[i31 >> 2];
         HEAP32[i31 >> 2] = _vim_strsave(HEAP32[i29 >> 2] | 0) | 0;
        }
        HEAP32[i36 >> 2] = 1;
       } else {
        if ((HEAP32[i13 >> 2] | 0) == 60) {
         HEAP32[i31 >> 2] = _vim_strsave(HEAP32[(_get_varp_scope(15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) | 0, 2) | 0) >> 2] | 0) | 0;
         HEAP32[i36 >> 2] = 1;
         break;
        }
        HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
        do if ((HEAP32[i20 >> 2] | 0) == 107756) {
         if (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 32) {
          i3 = 183;
          break;
         }
         _strcpy(i10, 71492) | 0;
         HEAP32[i28 >> 2] = HEAP32[i6 >> 2];
         HEAP32[i6 >> 2] = i10;
        } else i3 = 183; while (0);
        L264 : do if ((i3 | 0) == 183) {
         i3 = 0;
         do if ((HEAP32[i20 >> 2] | 0) == 107568) {
          if (((HEAPU8[HEAP32[HEAP32[i20 >> 2] >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break;
          HEAP32[i16 >> 2] = _getdigits(HEAP32[i20 >> 2] | 0) | 0;
          switch (HEAP32[i16 >> 2] | 0) {
          case 0:
           {
            HEAP32[HEAP32[i20 >> 2] >> 2] = 114072;
            break;
           }
          case 1:
           {
            i2 = _vim_strsave(71498) | 0;
            HEAP32[HEAP32[i20 >> 2] >> 2] = i2;
            break;
           }
          case 2:
           {
            i2 = _vim_strsave(71509) | 0;
            HEAP32[HEAP32[i20 >> 2] >> 2] = i2;
            break;
           }
          default:
           {}
          }
          _vim_free(HEAP32[i30 >> 2] | 0);
          if ((HEAP32[i32 >> 2] | 0) == (HEAP32[i30 >> 2] | 0)) HEAP32[i32 >> 2] = HEAP32[HEAP32[i20 >> 2] >> 2];
          HEAP32[i30 >> 2] = HEAP32[HEAP32[i20 >> 2] >> 2];
          break L264;
         } while (0);
         do if ((HEAP32[i20 >> 2] | 0) == 108116) {
          if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break;
          HEAP8[i10 >> 0] = 0;
          HEAP32[i16 >> 2] = _getdigits(i6) | 0;
          if (HEAP32[i16 >> 2] & 1 | 0) _strcat(i10, 71526) | 0;
          if (HEAP32[i16 >> 2] & 2 | 0) _strcat(i10, 71529) | 0;
          if (HEAP32[i16 >> 2] & 4 | 0) _strcat(i10, 71532) | 0;
          if (HEAP32[i16 >> 2] & 8 | 0) _strcat(i10, 71537) | 0;
          if (HEAP32[i16 >> 2] & 16 | 0) _strcat(i10, 71542) | 0;
          if (HEAPU8[i10 >> 0] | 0) HEAP8[i10 + ((_strlen(i10) | 0) - 1) >> 0] = 0;
          HEAP32[i28 >> 2] = HEAP32[i6 >> 2];
          HEAP32[i6 >> 2] = i10;
          break L264;
         } while (0);
         if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 62) break;
         if (!((HEAP32[i20 >> 2] | 0) == 107624 | (HEAP32[i20 >> 2] | 0) == 107588)) break;
         HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
        } while (0);
        HEAP32[i33 >> 2] = (_strlen(HEAP32[i6 >> 2] | 0) | 0) + 1;
        if ((HEAP32[i22 >> 2] | 0) != 0 | (HEAP32[i23 >> 2] | 0) != 0 | (HEAP32[i24 >> 2] | 0) != 0) {
         i2 = (_strlen(HEAP32[i32 >> 2] | 0) | 0) + 1 | 0;
         HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) + i2;
        }
        HEAP32[i31 >> 2] = _alloc(HEAP32[i33 >> 2] | 0) | 0;
        if (!(HEAP32[i31 >> 2] | 0)) break L1;
        HEAP32[i29 >> 2] = HEAP32[i31 >> 2];
        while (1) {
         if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
         if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 32) i41 = 1; else i41 = (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 9;
         if (!(i41 ^ 1)) break;
         do if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 92) {
          if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0)) break;
          HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
         } while (0);
         i2 = HEAP32[i6 >> 2] | 0;
         HEAP32[i6 >> 2] = i2 + 1;
         i42 = HEAP8[i2 >> 0] | 0;
         i2 = HEAP32[i29 >> 2] | 0;
         HEAP32[i29 >> 2] = i2 + 1;
         HEAP8[i2 >> 0] = i42;
        }
        HEAP8[HEAP32[i29 >> 2] >> 0] = 0;
        if ((HEAP32[i22 >> 2] | 0) != 0 | (HEAP32[i23 >> 2] | 0) != 0 | (HEAP32[i24 >> 2] | 0) != 0) {
         if (HEAP32[i19 >> 2] & 32768 | 0) i3 = 224;
        } else i3 = 224;
        do if ((i3 | 0) == 224) {
         i3 = 0;
         HEAP32[i29 >> 2] = _option_expand(HEAP32[i8 >> 2] | 0, HEAP32[i31 >> 2] | 0) | 0;
         if (!(HEAP32[i29 >> 2] | 0)) break;
         _vim_free(HEAP32[i31 >> 2] | 0);
         HEAP32[i33 >> 2] = (_strlen(HEAP32[i29 >> 2] | 0) | 0) + 1;
         if ((HEAP32[i22 >> 2] | 0) != 0 | (HEAP32[i23 >> 2] | 0) != 0 | (HEAP32[i24 >> 2] | 0) != 0) {
          i42 = (_strlen(HEAP32[i32 >> 2] | 0) | 0) + 1 | 0;
          HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) + i42;
         }
         HEAP32[i31 >> 2] = _alloc(HEAP32[i33 >> 2] | 0) | 0;
         if (!(HEAP32[i31 >> 2] | 0)) break L1;
         _strcpy(HEAP32[i31 >> 2] | 0, HEAP32[i29 >> 2] | 0) | 0;
        } while (0);
        HEAP32[i16 >> 2] = 0;
        if (HEAP32[i24 >> 2] | 0) i3 = 231; else if (HEAP32[i19 >> 2] & 131072 | 0) i3 = 231;
        do if ((i3 | 0) == 231) {
         i3 = 0;
         HEAP32[i16 >> 2] = _strlen(HEAP32[i31 >> 2] | 0) | 0;
         HEAP32[i35 >> 2] = 0;
         HEAP32[i29 >> 2] = HEAP32[i32 >> 2];
         L333 : while (1) {
          if (!(HEAP8[HEAP32[i29 >> 2] >> 0] | 0)) break;
          do if (HEAP32[i19 >> 2] & 32768 | 0) {
           if ((HEAP32[i29 >> 2] | 0) == (HEAP32[i32 >> 2] | 0)) {
            i3 = 237;
            break;
           }
           if ((HEAPU8[(HEAP32[i29 >> 2] | 0) + -1 >> 0] | 0) != 44) break;
           if (!(HEAP32[i35 >> 2] & 1)) i3 = 237;
          } else i3 = 237; while (0);
          do if ((i3 | 0) == 237) {
           i3 = 0;
           if (_strncmp(HEAP32[i29 >> 2] | 0, HEAP32[i31 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0) break;
           if (!(HEAP32[i19 >> 2] & 32768)) break L333;
           if ((HEAPU8[(HEAP32[i29 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0) == 44) break L333;
           if (!(HEAPU8[(HEAP32[i29 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0)) break L333;
          } while (0);
          do if ((HEAP32[i29 >> 2] | 0) >>> 0 > ((HEAP32[i32 >> 2] | 0) + 1 | 0) >>> 0) {
           if ((HEAPU8[(HEAP32[i29 >> 2] | 0) + -1 >> 0] | 0) != 92) {
            i3 = 244;
            break;
           }
           if ((HEAPU8[(HEAP32[i29 >> 2] | 0) + -2 >> 0] | 0) != 44) i3 = 246; else i3 = 244;
          } else i3 = 244; while (0);
          do if ((i3 | 0) == 244) {
           i3 = 0;
           if ((HEAP32[i29 >> 2] | 0) == ((HEAP32[i32 >> 2] | 0) + 1 | 0)) if ((HEAPU8[(HEAP32[i29 >> 2] | 0) + -1 >> 0] | 0) == 92) {
            i3 = 246;
            break;
           }
           HEAP32[i35 >> 2] = 0;
          } while (0);
          if ((i3 | 0) == 246) {
           i3 = 0;
           HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + 1;
          }
          HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
         }
         if (!((HEAP32[i22 >> 2] | 0) != 0 | (HEAP32[i23 >> 2] | 0) != 0)) break;
         if (!(HEAPU8[HEAP32[i29 >> 2] >> 0] | 0)) break;
         HEAP32[i23 >> 2] = 0;
         HEAP32[i22 >> 2] = 0;
         _strcpy(HEAP32[i31 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
        } while (0);
        do if ((HEAP32[i22 >> 2] | 0) != 0 | (HEAP32[i23 >> 2] | 0) != 0) {
         do if (HEAP32[i19 >> 2] & 32768 | 0) {
          if (!(HEAPU8[HEAP32[i32 >> 2] >> 0] | 0)) {
           i43 = 0;
           break;
          }
          i43 = (HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) != 0;
         } else i43 = 0; while (0);
         HEAP32[i34 >> 2] = i43 & 1;
         if (HEAP32[i22 >> 2] | 0) {
          HEAP32[i16 >> 2] = _strlen(HEAP32[i32 >> 2] | 0) | 0;
          do if ((HEAP32[i34 >> 2] | 0) != 0 & (HEAP32[i16 >> 2] | 0) > 1) {
           if ((HEAP32[i19 >> 2] & 98304 | 0) != 98304) break;
           if ((HEAPU8[(HEAP32[i32 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) - 1) >> 0] | 0) != 44) break;
           if ((HEAPU8[(HEAP32[i32 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) - 2) >> 0] | 0) == 92) break;
           HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
          } while (0);
          i42 = HEAP32[i31 >> 2] | 0;
          i2 = i42 + (HEAP32[i16 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0;
          i44 = i42 | 0;
          _memmove(i2 | 0, i44 | 0, (_strlen(HEAP32[i31 >> 2] | 0) | 0) + 1 | 0) | 0;
          _memmove(HEAP32[i31 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
         } else {
          HEAP32[i16 >> 2] = _strlen(HEAP32[i31 >> 2] | 0) | 0;
          i44 = (HEAP32[i31 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) + (HEAP32[i34 >> 2] | 0) | 0;
          i2 = HEAP32[i32 >> 2] | 0;
          _memmove(i44 | 0, i2 | 0, (_strlen(HEAP32[i32 >> 2] | 0) | 0) + 1 | 0) | 0;
         }
         if (!(HEAP32[i34 >> 2] | 0)) break;
         HEAP8[(HEAP32[i31 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] = 44;
        } while (0);
        do if (HEAP32[i24 >> 2] | 0) {
         _strcpy(HEAP32[i31 >> 2] | 0, HEAP32[i32 >> 2] | 0) | 0;
         if (!(HEAP8[HEAP32[i29 >> 2] >> 0] | 0)) break;
         do if (HEAP32[i19 >> 2] & 32768 | 0) {
          i2 = HEAP32[i29 >> 2] | 0;
          if ((HEAP32[i29 >> 2] | 0) != (HEAP32[i32 >> 2] | 0)) {
           HEAP32[i29 >> 2] = i2 + -1;
           HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
           break;
          }
          if ((HEAPU8[i2 + (HEAP32[i16 >> 2] | 0) >> 0] | 0) != 44) break;
          HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
         } while (0);
         i2 = HEAP32[i29 >> 2] | 0;
         i44 = (HEAP32[i31 >> 2] | 0) + (i2 - (HEAP32[i32 >> 2] | 0)) | 0;
         i42 = i2 + (HEAP32[i16 >> 2] | 0) | 0;
         _memmove(i44 | 0, i42 | 0, (_strlen((HEAP32[i29 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) | 0) | 0) + 1 | 0) | 0;
        } while (0);
        L390 : do if (HEAP32[i19 >> 2] & 262144 | 0) {
         HEAP32[i29 >> 2] = HEAP32[i31 >> 2];
         L392 : while (1) {
          if (!(HEAP8[HEAP32[i29 >> 2] >> 0] | 0)) break L390;
          do if (HEAP32[i19 >> 2] & 98304 | 0) {
           if ((HEAPU8[HEAP32[i29 >> 2] >> 0] | 0) == 44) break;
           if ((HEAPU8[(HEAP32[i29 >> 2] | 0) + 1 >> 0] | 0) != 44) break;
           if (!(_vim_strchr((HEAP32[i29 >> 2] | 0) + 2 | 0, HEAPU8[HEAP32[i29 >> 2] >> 0] | 0) | 0)) break;
           i42 = HEAP32[i29 >> 2] | 0;
           i44 = i42 | 0;
           i2 = i42 + 2 | 0;
           _memmove(i44 | 0, i2 | 0, (_strlen((HEAP32[i29 >> 2] | 0) + 2 | 0) | 0) + 1 | 0) | 0;
           continue L392;
          } else {
           if (HEAP32[i19 >> 2] & 32768 | 0) if ((HEAPU8[HEAP32[i29 >> 2] >> 0] | 0) == 44) break;
           if (!(_vim_strchr((HEAP32[i29 >> 2] | 0) + 1 | 0, HEAPU8[HEAP32[i29 >> 2] >> 0] | 0) | 0)) break;
           i2 = HEAP32[i29 >> 2] | 0;
           i44 = i2 | 0;
           i42 = i2 + 1 | 0;
           _memmove(i44 | 0, i42 | 0, (_strlen((HEAP32[i29 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
           continue L392;
          } while (0);
          HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
         }
        } while (0);
        if (HEAP32[i28 >> 2] | 0) HEAP32[i6 >> 2] = HEAP32[i28 >> 2];
        HEAP32[i36 >> 2] = 1;
       } while (0);
       HEAP32[HEAP32[i20 >> 2] >> 2] = HEAP32[i31 >> 2];
       HEAP32[i9 >> 2] = _did_set_string_option(HEAP32[i8 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i36 >> 2] | 0, HEAP32[i30 >> 2] | 0, i10, HEAP32[i7 >> 2] | 0) | 0;
       if (!((HEAP32[i9 >> 2] | 0) == 0 & (HEAP32[i8 >> 2] | 0) >= 0)) break L66;
      } while (0);
      if ((i3 | 0) == 308) {
       i3 = 0;
       if ((HEAP32[i8 >> 2] | 0) < 0) break L66;
      }
      if ((HEAP32[i23 >> 2] | 0) != 0 | (HEAP32[i22 >> 2] | 0) != 0) i45 = 0; else i45 = (HEAP32[i24 >> 2] | 0) != 0 ^ 1;
      _did_set_option(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, i45 & 1);
      break L66;
     } while (0);
     if (HEAP32[i21 >> 2] | 0) _msg_putchar(10); else {
      _gotocmdline(1);
      HEAP32[i21 >> 2] = 1;
     }
     do if ((HEAP32[i8 >> 2] | 0) >= 0) _showoneopt(15328 + ((HEAP32[i8 >> 2] | 0) * 28 | 0) | 0, HEAP32[i7 >> 2] | 0); else {
      HEAP32[i27 >> 2] = _find_termcode(i26) | 0;
      if (!(HEAP32[i27 >> 2] | 0)) {
       HEAP32[i9 >> 2] = 71439;
       break L66;
      } else {
       _show_one_termcode(i26, HEAP32[i27 >> 2] | 0, 1) | 0;
       break;
      }
     } while (0);
     if ((HEAP32[i13 >> 2] | 0) != 63 & (HEAP32[i13 >> 2] | 0) != 0 ^ 1 | (HEAP32[i14 >> 2] | 0) == 32 | (HEAP32[i14 >> 2] | 0) == 9) break;
     HEAP32[i9 >> 2] = 93844;
    } while (0);
    HEAP32[i16 >> 2] = 0;
    while (1) {
     if ((HEAP32[i16 >> 2] | 0) >= 2) break L14;
     while (1) {
      if (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) {
       if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 32) i46 = 1; else i46 = (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 9;
       i47 = i46 ^ 1;
      } else i47 = 0;
      i48 = HEAP32[i6 >> 2] | 0;
      if (!i47) break;
      HEAP32[i6 >> 2] = i48 + 1;
      if ((HEAPU8[i48 >> 0] | 0) == 92) if (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     }
     HEAP32[i6 >> 2] = _skipwhite(i48) | 0;
     if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 61) break L14;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
   } while (0);
   if (HEAP32[i9 >> 2] | 0) break;
   HEAP32[i6 >> 2] = _skipwhite(HEAP32[i6 >> 2] | 0) | 0;
  }
  _vim_strncpy(HEAP32[26882] | 0, HEAP32[i9 >> 2] | 0, 1024);
  HEAP32[i16 >> 2] = (_strlen(HEAP32[26882] | 0) | 0) + 2;
  if (((HEAP32[i16 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - (HEAP32[i11 >> 2] | 0)) | 0) < 1025) {
   _strcat(HEAP32[26882] | 0, 71547) | 0;
   i1 = HEAP32[i11 >> 2] | 0;
   _memmove((HEAP32[26882] | 0) + (HEAP32[i16 >> 2] | 0) | 0, i1 | 0, (HEAP32[i6 >> 2] | 0) - i1 | 0) | 0;
   HEAP8[(HEAP32[26882] | 0) + ((HEAP32[i16 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - (HEAP32[i11 >> 2] | 0))) >> 0] = 0;
  }
  _trans_characters(HEAP32[26882] | 0, 1025);
  HEAP32[26720] = (HEAP32[26720] | 0) + 1;
  _emsg(HEAP32[26882] | 0) | 0;
  HEAP32[26720] = (HEAP32[26720] | 0) + -1;
  HEAP32[i5 >> 2] = 0;
  i49 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i49 | 0;
 } while (0);
 if ((HEAP32[26787] | 0) != 0 & (HEAP32[i21 >> 2] | 0) != 0) {
  HEAP32[26787] = 0;
  HEAP32[26715] = 1;
  _msg_putchar(10);
  _cursor_on();
  _out_flush();
  HEAP32[26787] = 1;
  HEAP32[26715] = 0;
 }
 HEAP32[i5 >> 2] = 1;
 i49 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i49 | 0;
}

function _win_update(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i4 = i3 + 112 | 0;
 i5 = i3 + 108 | 0;
 i6 = i3 + 104 | 0;
 i7 = i3 + 100 | 0;
 i8 = i3 + 96 | 0;
 i9 = i3 + 92 | 0;
 i10 = i3 + 88 | 0;
 i11 = i3 + 84 | 0;
 i12 = i3 + 80 | 0;
 i13 = i3 + 76 | 0;
 i14 = i3 + 72 | 0;
 i15 = i3 + 68 | 0;
 i16 = i3 + 64 | 0;
 i17 = i3 + 60 | 0;
 i18 = i3 + 56 | 0;
 i19 = i3 + 52 | 0;
 i20 = i3 + 48 | 0;
 i21 = i3 + 44 | 0;
 i22 = i3 + 40 | 0;
 i23 = i3 + 36 | 0;
 i24 = i3 + 32 | 0;
 i25 = i3 + 28 | 0;
 i26 = i3 + 24 | 0;
 i27 = i3 + 20 | 0;
 i28 = i3 + 16 | 0;
 i29 = i3 + 12 | 0;
 i30 = i3 + 8 | 0;
 i31 = i3 + 4 | 0;
 i32 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 999;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 999;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i20 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2];
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2];
 if ((HEAP32[i6 >> 2] | 0) == 40) {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 176 >> 2] = 1;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 if (!((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) + 0 | 0)) {
  HEAP32[i1 + 160 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[i1 + 100 >> 2] | 0)) {
  _draw_vsep_win(HEAP32[i4 >> 2] | 0, 0);
  HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 152 >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 164 >> 2] | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 168 >> 2] | 0) HEAP32[i6 >> 2] = 40; else i2 = 11; else i2 = 11; else i2 = 11;
 if ((i2 | 0) == 11) {
  HEAP32[i21 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 168 >> 2];
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 172 >> 2] | 0) HEAP32[i22 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 172 >> 2] | 0) + 1; else HEAP32[i22 >> 2] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 168 >> 2] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 172 >> 2] = 0;
  do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 152 >> 2] | 0) {
   if (!(HEAP32[i21 >> 2] | 0)) i2 = 17; else if ((HEAP32[i21 >> 2] | 0) > (HEAP32[(HEAP32[i5 >> 2] | 0) + 156 >> 2] | 0)) i2 = 17;
   if ((i2 | 0) == 17) HEAP32[i21 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 156 >> 2];
   if (HEAP32[i22 >> 2] | 0) if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[(HEAP32[i5 >> 2] | 0) + 160 >> 2] | 0)) break;
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 160 >> 2];
  } while (0);
  if (HEAP32[i21 >> 2] | 0) if ((HEAP32[i21 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) if ((HEAP32[i22 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) HEAP32[i21 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2];
  if (HEAP32[i21 >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 164 >> 2] | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 200 + 4 >> 2] | 0) HEAP32[i22 >> 2] = 2147483647;
 }
 do if ((HEAP32[i6 >> 2] | 0) == 30) {
  HEAP32[i19 >> 2] = 0;
  HEAP32[i18 >> 2] = 0;
  while (1) {
   if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) break;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) + 4 >> 1] | 0);
   if ((HEAP32[i19 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 164 >> 2] | 0)) {
    i2 = 33;
    break;
   }
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  }
  if ((i2 | 0) == 33) HEAP32[i7 >> 2] = HEAP32[i19 >> 2];
  if (!(HEAP32[i7 >> 2] | 0)) {
   HEAP32[i6 >> 2] = 40;
   break;
  } else {
   HEAP32[i6 >> 2] = 10;
   break;
  }
 } while (0);
 if (HEAP32[26704] | 0) HEAP32[26704] = 2;
 if ((HEAP32[i6 >> 2] | 0) == 10 | (HEAP32[i6 >> 2] | 0) == 35 | (HEAP32[i6 >> 2] | 0) == 20 | (HEAP32[i6 >> 2] | 0) == 25) {
  if (HEAP32[i21 >> 2] | 0) {
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0) != (HEAP32[i21 >> 2] | 0)) i2 = 43;
  } else i2 = 43;
  L62 : do if ((i2 | 0) == 43) {
   if (HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + 6 >> 0] | 0) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0) < (HEAP32[HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] >> 2] | 0)) {
    i1 = HEAP32[i4 >> 2] | 0;
    HEAP32[i19 >> 2] = (HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0) - (HEAP32[i1 + 68 >> 2] | 0);
    if ((HEAP32[i19 >> 2] | 0) >= ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) - 2 | 0)) {
     HEAP32[i8 >> 2] = 0;
     break;
    }
    i1 = HEAP32[i4 >> 2] | 0;
    HEAP32[i18 >> 2] = _plines_m_win(i1 | 0, HEAP32[i1 + 68 >> 2] | 0, (HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0) - 1 | 0) | 0;
    if ((HEAP32[i18 >> 2] | 0) >= ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) - 2 | 0)) {
     HEAP32[i8 >> 2] = 0;
     break;
    }
    if ((HEAP32[i18 >> 2] | 0) > 0) _check_for_delay(0);
    if ((_win_ins_lines(HEAP32[i4 >> 2] | 0, 0, HEAP32[i18 >> 2] | 0, 0, (HEAP32[i4 >> 2] | 0) == (HEAP32[26887] | 0) & 1) | 0) != 1) {
     HEAP32[i8 >> 2] = 0;
     break;
    }
    if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) break;
    HEAP32[i7 >> 2] = HEAP32[i18 >> 2];
    HEAP32[i11 >> 2] = 1;
    i1 = (HEAP32[i4 >> 2] | 0) + 152 | 0;
    i33 = (HEAP32[i1 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) | 0;
    HEAP32[i1 >> 2] = i33;
    if ((i33 | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
     i33 = HEAP32[i4 >> 2] | 0;
     HEAP32[i33 + 152 >> 2] = HEAP32[i33 + 88 >> 2];
    }
    HEAP32[i14 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2];
    while (1) {
     if (((HEAP32[i14 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0) < 0) break;
     i33 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
     i1 = i33 + (HEAP32[i14 >> 2] << 3) | 0;
     i34 = i33 + ((HEAP32[i14 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) << 3) | 0;
     HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
     HEAP32[i1 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
    }
    while (1) {
     if ((HEAP32[i14 >> 2] | 0) < 0) break L62;
     i34 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
     i1 = HEAP32[i14 >> 2] | 0;
     HEAP32[i14 >> 2] = i1 + -1;
     HEAP8[i34 + (i1 << 3) + 6 >> 0] = 0;
    }
   }
   HEAP32[i19 >> 2] = -1;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i18 >> 2] = 0;
   while (1) {
    if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) break;
    if (HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) + 6 >> 0] | 0) if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) {
     i2 = 66;
     break;
    }
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) + 4 >> 1] | 0);
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   }
   if ((i2 | 0) == 66) HEAP32[i19 >> 2] = HEAP32[i18 >> 2];
   if ((HEAP32[i19 >> 2] | 0) == -1) {
    HEAP32[i8 >> 2] = 0;
    break;
   }
   do if ((HEAP32[i12 >> 2] | 0) > 0) {
    _check_for_delay(0);
    if ((_win_del_lines(HEAP32[i4 >> 2] | 0, 0, HEAP32[i12 >> 2] | 0, 0, (HEAP32[i4 >> 2] | 0) == (HEAP32[26887] | 0) & 1, 0) | 0) == 1) {
     HEAP32[i10 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
     break;
    } else {
     HEAP32[i8 >> 2] = 0;
     break;
    }
   } while (0);
   if ((HEAP32[i12 >> 2] | 0) == 0 | (HEAP32[i10 >> 2] | 0) < 999) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0) {
    HEAP32[i10 >> 2] = 0;
    HEAP32[i14 >> 2] = 0;
    while (1) {
     i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
     i34 = i1 + (HEAP32[i14 >> 2] << 3) | 0;
     i33 = i1 + (HEAP32[i19 >> 2] << 3) | 0;
     HEAP32[i34 >> 2] = HEAP32[i33 >> 2];
     HEAP32[i34 + 4 >> 2] = HEAP32[i33 + 4 >> 2];
     if ((HEAP32[i12 >> 2] | 0) > 0) if (((HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i19 >> 2] << 3) + 4 >> 1] | 0) | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
      i2 = 79;
      break;
     }
     i33 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
     i34 = HEAP32[i14 >> 2] | 0;
     HEAP32[i14 >> 2] = i34 + 1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAPU16[i33 + (i34 << 3) + 4 >> 1] | 0);
     i34 = (HEAP32[i19 >> 2] | 0) + 1 | 0;
     HEAP32[i19 >> 2] = i34;
     if ((i34 | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) {
      i2 = 81;
      break;
     }
    }
    if ((i2 | 0) == 79) {
     HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
     break;
    } else if ((i2 | 0) == 81) {
     HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = HEAP32[i14 >> 2];
     break;
    }
   }
  } while (0);
  if (!(HEAP32[i8 >> 2] | 0)) {
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2];
   if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) {
    if ((HEAP32[26704] | 0) != 1) _screenclear();
    if (HEAP32[26770] | 0) _draw_tabline();
   }
  }
  if ((HEAP32[26704] | 0) == 1) HEAP32[26828] = 0;
 } else {
  HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2];
 }
 if ((HEAP32[i6 >> 2] | 0) == 35) {
  HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2];
  HEAP32[i6 >> 2] = 40;
 }
 if (HEAP32[26788] | 0) if ((HEAP32[i5 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0)) i2 = 97; else i2 = 96; else i2 = 96;
 if ((i2 | 0) == 96) if ((HEAP32[i6 >> 2] | 0) != 40 ? (HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0) != 0 : 0) i2 = 97;
 L139 : do if ((i2 | 0) == 97) {
  do if (HEAP32[26788] | 0) {
   if (HEAP32[26788] | 0) if ((HEAP32[i6 >> 2] | 0) == 25 ? 1 : (HEAP32[10179] | 0) != (HEAP8[(HEAP32[i4 >> 2] | 0) + 40 >> 0] | 0)) {
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[27117] | 0)) {
     HEAP32[i23 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     HEAP32[i24 >> 2] = HEAP32[27117];
    } else {
     HEAP32[i23 >> 2] = HEAP32[27117];
     HEAP32[i24 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
    }
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0) < (HEAP32[i23 >> 2] | 0)) HEAP32[i23 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2];
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0) > (HEAP32[i24 >> 2] | 0)) HEAP32[i24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2];
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] | 0) < (HEAP32[i23 >> 2] | 0)) HEAP32[i23 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2];
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] | 0) > (HEAP32[i24 >> 2] | 0)) HEAP32[i24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2];
   } else i2 = 111; else i2 = 111;
   do if ((i2 | 0) == 111) {
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0)) {
     HEAP32[i23 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     HEAP32[i24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2];
    } else {
     HEAP32[i23 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2];
     HEAP32[i24 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     if (!(HEAP32[i23 >> 2] | 0)) HEAP32[i23 >> 2] = HEAP32[i24 >> 2];
    }
    if ((HEAP32[27117] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] | 0)) if ((HEAP32[27118] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 60 >> 2] | 0)) break;
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] | 0) < (HEAP32[i23 >> 2] | 0)) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] | 0) HEAP32[i23 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2];
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] | 0) > (HEAP32[i24 >> 2] | 0)) HEAP32[i24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2];
    if ((HEAP32[27117] | 0) < (HEAP32[i23 >> 2] | 0)) HEAP32[i23 >> 2] = HEAP32[27117];
    if ((HEAP32[27117] | 0) > (HEAP32[i24 >> 2] | 0)) HEAP32[i24 >> 2] = HEAP32[27117];
   } while (0);
   if ((HEAP32[10179] | 0) == 22) {
    _getvcols(HEAP32[i4 >> 2] | 0, 108468, (HEAP32[26881] | 0) + 24 | 0, i25, i26);
    i34 = (HEAP32[i26 >> 2] | 0) + 1 | 0;
    HEAP32[i26 >> 2] = i34;
    HEAP32[i26 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) == 2147483647 ? 2147483647 : i34;
    if ((HEAP32[i25 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] | 0)) i2 = 129; else if ((HEAP32[i26 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] | 0)) i2 = 129;
    if ((i2 | 0) == 129) {
     if ((HEAP32[i23 >> 2] | 0) > (HEAP32[27117] | 0)) HEAP32[i23 >> 2] = HEAP32[27117];
     if ((HEAP32[i24 >> 2] | 0) < (HEAP32[27117] | 0)) HEAP32[i24 >> 2] = HEAP32[27117];
    }
    HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2] = HEAP32[i25 >> 2];
    HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] = HEAP32[i26 >> 2];
   }
  } else {
   i34 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] | 0)) {
    HEAP32[i23 >> 2] = HEAP32[i34 + 44 >> 2];
    HEAP32[i24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2];
    break;
   } else {
    HEAP32[i23 >> 2] = HEAP32[i34 + 56 >> 2];
    HEAP32[i24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2];
    break;
   }
  } while (0);
  if ((HEAP32[i23 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) HEAP32[i23 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2];
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 108 >> 2] & 32 | 0) {
   if ((HEAP32[i23 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] | 0)) HEAP32[i23 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] | 0) - 1;
   if ((HEAP32[i24 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] | 0)) HEAP32[i24 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] | 0) - 1;
  }
  if ((HEAP32[i8 >> 2] | 0) > 0) {
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2];
   HEAP32[i14 >> 2] = 0;
   HEAP32[i15 >> 2] = 0;
   if (HEAP32[i11 >> 2] | 0) HEAP32[i8 >> 2] = HEAP32[i7 >> 2]; else HEAP32[i8 >> 2] = 0;
   while (1) {
    if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i23 >> 2] | 0)) break;
    if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) break;
    do if (HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 6 >> 0] | 0) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 4 >> 1] | 0); else {
     if (HEAP32[i11 >> 2] | 0) break;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 4 >> 1] | 0);
    } while (0);
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2];
   while (1) {
    if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) break L139;
    if (HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 6 >> 0] | 0) if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) >> 2] | 0) >= ((HEAP32[i24 >> 2] | 0) + 1 | 0)) break;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 4 >> 1] | 0);
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   }
   HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
  }
 } while (0);
 if (HEAP32[26788] | 0) if ((HEAP32[i5 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0)) {
  HEAP8[(HEAP32[i4 >> 2] | 0) + 40 >> 0] = HEAP32[10179];
  HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] = HEAP32[27117];
  HEAP32[(HEAP32[i4 >> 2] | 0) + 60 >> 2] = HEAP32[27118];
  HEAP32[(HEAP32[i4 >> 2] | 0) + 64 >> 2] = HEAP32[(HEAP32[26881] | 0) + 32 >> 2];
 } else i2 = 165; else i2 = 165;
 if ((i2 | 0) == 165) {
  HEAP8[(HEAP32[i4 >> 2] | 0) + 40 >> 0] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 60 >> 2] = 0;
 }
 HEAP32[i14 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2];
 L236 : while (1) {
  if ((HEAP32[i12 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
   i2 = 168;
   break;
  }
  if ((HEAP32[i13 >> 2] | 0) > (HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
   i2 = 170;
   break;
  }
  HEAP32[i15 >> 2] = HEAP32[i12 >> 2];
  L240 : do if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) i2 = 180; else {
   if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) {
    i2 = 180;
    break;
   }
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) i2 = 180; else if (((HEAP32[i12 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 4 >> 1] | 0) | 0) > (HEAP32[i10 >> 2] | 0)) i2 = 180; else {
    do if (HEAP32[i21 >> 2] | 0) {
     if ((HEAP32[i13 >> 2] | 0) == (HEAP32[i21 >> 2] | 0)) {
      i2 = 180;
      break L240;
     }
     if ((HEAP32[i13 >> 2] | 0) < (HEAP32[i21 >> 2] | 0)) break;
     if ((HEAP32[i13 >> 2] | 0) < (HEAP32[i22 >> 2] | 0)) {
      i2 = 180;
      break L240;
     }
    } while (0);
    i24 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
    i11 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i11 + 1;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAPU16[i24 + (i11 << 3) + 4 >> 1] | 0);
    if ((HEAP32[i12 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) break L236;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
  } while (0);
  if ((i2 | 0) == 180) {
   i2 = 0;
   L255 : do if ((HEAP32[i22 >> 2] | 0) != 2147483647 ? (HEAP32[i13 >> 2] | 0) == (HEAP32[i21 >> 2] | 0) : 0) {
    if ((HEAP32[10175] | 0) >= 0) if ((HEAP32[i22 >> 2] | 0) == ((HEAP32[i21 >> 2] | 0) + 1 | 0)) break;
    HEAP32[i27 >> 2] = 0;
    HEAP32[i28 >> 2] = 0;
    HEAP32[i18 >> 2] = HEAP32[i14 >> 2];
    while (1) {
     if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) break;
     if (HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) + 6 >> 0] | 0) if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) >> 2] | 0) == (HEAP32[i22 >> 2] | 0)) break;
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) + 4 >> 1] | 0);
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
    }
    if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) {
     HEAP32[i10 >> 2] = 0;
     break;
    }
    HEAP32[i19 >> 2] = HEAP32[i14 >> 2];
    HEAP32[i30 >> 2] = HEAP32[i13 >> 2];
    while (1) {
     if ((HEAP32[i30 >> 2] | 0) >= (HEAP32[i22 >> 2] | 0)) break;
     i11 = _plines_win(HEAP32[i4 >> 2] | 0, HEAP32[i30 >> 2] | 0, 1) | 0;
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + i11;
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
     if ((HEAP32[i28 >> 2] | 0) > ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) - 2 | 0)) {
      i2 = 193;
      break;
     }
     HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
    }
    if ((i2 | 0) == 193) {
     i2 = 0;
     HEAP32[i28 >> 2] = 9999;
    }
    HEAP32[i29 >> 2] = (HEAP32[i28 >> 2] | 0) - (HEAP32[i27 >> 2] | 0);
    do if ((HEAP32[i29 >> 2] | 0) < 0) {
     if (((HEAP32[i12 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0) >= ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) - 2 | 0)) {
      HEAP32[i22 >> 2] = 2147483647;
      break;
     }
     _check_for_delay(0);
     if (!(_win_del_lines(HEAP32[i4 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0 - (HEAP32[i29 >> 2] | 0) | 0, 0, 0, 0) | 0)) {
      HEAP32[i22 >> 2] = 2147483647;
      break;
     } else {
      HEAP32[i10 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) + (HEAP32[i29 >> 2] | 0);
      break;
     }
    } else {
     if ((HEAP32[i29 >> 2] | 0) <= 0) break;
     if (((HEAP32[i12 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) | 0) >= ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) - 2 | 0)) {
      HEAP32[i22 >> 2] = 2147483647;
      break;
     }
     _check_for_delay(0);
     if (!(_win_ins_lines(HEAP32[i4 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) | 0, HEAP32[i29 >> 2] | 0, 0, 0) | 0)) {
      HEAP32[i22 >> 2] = 2147483647;
      break;
     }
     if ((HEAP32[i7 >> 2] | 0) <= ((HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) | 0)) break;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i29 >> 2] | 0);
    } while (0);
    if ((HEAP32[i22 >> 2] | 0) == 2147483647) break;
    if ((HEAP32[i18 >> 2] | 0) == (HEAP32[i19 >> 2] | 0)) break;
    if ((HEAP32[i19 >> 2] | 0) < (HEAP32[i18 >> 2] | 0)) {
     HEAP32[i31 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i28 >> 2] | 0);
     while (1) {
      if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) {
       i2 = 213;
       break;
      }
      i11 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
      i24 = i11 + (HEAP32[i19 >> 2] << 3) | 0;
      i23 = i11 + (HEAP32[i18 >> 2] << 3) | 0;
      HEAP32[i24 >> 2] = HEAP32[i23 >> 2];
      HEAP32[i24 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
      if (((HEAP32[i31 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i19 >> 2] << 3) + 4 >> 1] | 0) | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
       i2 = 215;
       break;
      }
      i23 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
      i24 = HEAP32[i19 >> 2] | 0;
      HEAP32[i19 >> 2] = i24 + 1;
      HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAPU16[i23 + (i24 << 3) + 4 >> 1] | 0);
      HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
     }
     if ((i2 | 0) == 213) {
      i2 = 0;
      HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = HEAP32[i19 >> 2];
     } else if ((i2 | 0) == 215) {
      i2 = 0;
      HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
     }
     if ((HEAP32[i10 >> 2] | 0) <= (HEAP32[i31 >> 2] | 0)) break;
     HEAP32[i10 >> 2] = HEAP32[i31 >> 2];
     break;
    } else {
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
     i24 = (HEAP32[i4 >> 2] | 0) + 152 | 0;
     HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
     if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
      i24 = HEAP32[i4 >> 2] | 0;
      HEAP32[i24 + 152 >> 2] = HEAP32[i24 + 88 >> 2];
     }
     HEAP32[i18 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2];
     while (1) {
      if (((HEAP32[i18 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0) < (HEAP32[i14 >> 2] | 0)) break;
      i24 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
      i23 = i24 + (HEAP32[i18 >> 2] << 3) | 0;
      i11 = i24 + ((HEAP32[i18 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) << 3) | 0;
      HEAP32[i23 >> 2] = HEAP32[i11 >> 2];
      HEAP32[i23 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
      HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
     }
     while (1) {
      if ((HEAP32[i18 >> 2] | 0) < (HEAP32[i14 >> 2] | 0)) break L255;
      HEAP16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i18 >> 2] << 3) + 4 >> 1] = 0;
      i11 = HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0;
      i23 = HEAP32[i18 >> 2] | 0;
      HEAP32[i18 >> 2] = i23 + -1;
      HEAP8[i11 + (i23 << 3) + 6 >> 0] = 0;
     }
    }
   } while (0);
   do if ((HEAP32[i14 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) if (HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 6 >> 0] | 0) if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) {
    if ((HEAP32[i13 >> 2] | 0) <= (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) {
     i2 = 234;
     break;
    }
    if (HEAP32[26908] & 3 | 0) {
     i2 = 234;
     break;
    }
    if (((HEAP32[i15 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 4 >> 1] | 0) | 0) <= (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
     i2 = 234;
     break;
    }
    HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) + 1;
   } else i2 = 234; else i2 = 234; else i2 = 234; while (0);
   if ((i2 | 0) == 234) {
    i2 = 0;
    i23 = HEAP32[i4 >> 2] | 0;
    HEAP32[i12 >> 2] = _win_line(i23 | 0, HEAP32[i13 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i23 + 88 >> 2] | 0, (HEAP32[i21 >> 2] | 0) == 0 & 1) | 0;
   }
   HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) >> 2] = HEAP32[i13 >> 2];
   HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 6 >> 0] = 1;
   if ((HEAP32[i12 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
    i2 = 237;
    break;
   }
   if (((HEAP32[i12 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 84 >> 2] | 0) | 0) >= (HEAP32[10173] | 0)) {
    i2 = 237;
    break;
   }
   if ((HEAP32[10175] | 0) == -1) HEAP16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 4 >> 1] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  if ((HEAP32[i13 >> 2] | 0) > (HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
   i2 = 246;
   break;
  }
 }
 if ((i2 | 0) == 168) HEAP32[i17 >> 2] = 1; else if ((i2 | 0) == 170) HEAP32[i16 >> 2] = 1; else if ((i2 | 0) == 237) {
  if ((HEAP32[10175] | 0) == -1) {
   i21 = (_plines_win(HEAP32[i4 >> 2] | 0, HEAP32[i13 >> 2] | 0, 1) | 0) & 65535;
   HEAP16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i14 >> 2] << 3) + 4 >> 1] = i21;
  }
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 } else if ((i2 | 0) == 246) HEAP32[i16 >> 2] = 1;
 if ((HEAP32[i14 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = HEAP32[i14 >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 148 >> 2] = 0;
 do if ((HEAP32[i16 >> 2] | 0) != 0 | (HEAP32[i17 >> 2] | 0) != 0) {
  _draw_vsep_win(HEAP32[i4 >> 2] | 0, HEAP32[i12 >> 2] | 0);
  if (HEAP32[i16 >> 2] | 0) HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 1; else if ((HEAP32[10175] | 0) == -1) HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] = HEAP32[i13 >> 2];
  i14 = HEAP32[i4 >> 2] | 0;
  _win_draw_end(i14 | 0, 126, 32, HEAP32[i12 >> 2] | 0, HEAP32[i14 + 88 >> 2] | 0, 1);
 } else {
  if ((HEAP32[i13 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   break;
  }
  if (HEAP32[26908] & 2 | 0) {
   i14 = HEAP32[i4 >> 2] | 0;
   HEAP32[i32 >> 2] = (HEAP32[i14 + 84 >> 2] | 0) + (HEAP32[i14 + 88 >> 2] | 0) - 1;
   _screen_puts_len(74562, 2, HEAP32[i32 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] | 0, HEAP32[27050] | 0);
   i14 = HEAP32[i32 >> 2] | 0;
   i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] | 0;
   i21 = HEAP32[i4 >> 2] | 0;
   _screen_fill(i14 | 0, i14 + 1 | 0, i2 + 2 | 0, i2 + (HEAP32[i21 + 100 >> 2] | 0) | 0, 64, 32, HEAP32[27050] | 0);
   _set_empty_rows(HEAP32[i4 >> 2] | 0, HEAP32[i15 >> 2] | 0);
   HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] = HEAP32[i13 >> 2];
   break;
  }
  i21 = HEAP32[i4 >> 2] | 0;
  if (HEAP32[26908] & 1 | 0) {
   i2 = HEAP32[i4 >> 2] | 0;
   i14 = HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0;
   i19 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0) | 0;
   _screen_fill((HEAP32[i21 + 84 >> 2] | 0) + i14 - 1 | 0, (HEAP32[i2 + 84 >> 2] | 0) + i14 | 0, i19 - 3 | 0, i19 | 0, 64, 64, HEAP32[27050] | 0);
   _set_empty_rows(HEAP32[i4 >> 2] | 0, HEAP32[i15 >> 2] | 0);
   HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] = HEAP32[i13 >> 2];
   break;
  } else {
   _win_draw_end(i21, 64, 32, HEAP32[i15 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0, 2);
   HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] = HEAP32[i13 >> 2];
   break;
  }
 } while (0);
 HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] = 0;
 if ((HEAP32[10175] | 0) != -1) {
  STACKTOP = i3;
  return;
 }
 i13 = (HEAP32[i4 >> 2] | 0) + 108 | 0;
 HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 32;
 if ((HEAP32[i4 >> 2] | 0) != (HEAP32[26881] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[26462] | 0 ? 1 : (HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] | 0) == (HEAP32[i20 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26462] = 1;
 i20 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i20 >> 2] = HEAP32[i20 >> 2] & -129;
 _update_topline();
 if (HEAP32[26828] | 0) {
  HEAP32[i18 >> 2] = HEAP32[(HEAP32[26773] | 0) + 152 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 152 >> 2] = 0;
  _win_update(HEAP32[26881] | 0);
  HEAP32[26828] = 0;
  HEAP32[(HEAP32[26773] | 0) + 152 >> 2] = HEAP32[i18 >> 2];
 }
 HEAP32[26462] = 0;
 STACKTOP = i3;
 return;
}

function _do_sub(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 i4 = i3;
 i5 = i3 + 376 | 0;
 i6 = i3 + 372 | 0;
 i7 = i3 + 368 | 0;
 i8 = i3 + 196 | 0;
 i9 = i3 + 192 | 0;
 i10 = i3 + 188 | 0;
 i11 = i3 + 184 | 0;
 i12 = i3 + 180 | 0;
 i13 = i3 + 176 | 0;
 i14 = i3 + 172 | 0;
 i15 = i3 + 168 | 0;
 i16 = i3 + 164 | 0;
 i17 = i3 + 160 | 0;
 i18 = i3 + 156 | 0;
 i19 = i3 + 152 | 0;
 i20 = i3 + 148 | 0;
 i21 = i3 + 144 | 0;
 i22 = i3 + 140 | 0;
 i23 = i3 + 136 | 0;
 i24 = i3 + 132 | 0;
 i25 = i3 + 128 | 0;
 i26 = i3 + 124 | 0;
 i27 = i3 + 120 | 0;
 i28 = i3 + 112 | 0;
 i29 = i3 + 104 | 0;
 i30 = i3 + 100 | 0;
 i31 = i3 + 96 | 0;
 i32 = i3 + 92 | 0;
 i33 = i3 + 88 | 0;
 i34 = i3 + 84 | 0;
 i35 = i3 + 80 | 0;
 i36 = i3 + 76 | 0;
 i37 = i3 + 72 | 0;
 i38 = i3 + 68 | 0;
 i39 = i3 + 64 | 0;
 i40 = i3 + 60 | 0;
 i41 = i3 + 56 | 0;
 i42 = i3 + 52 | 0;
 i43 = i3 + 48 | 0;
 i44 = i3 + 44 | 0;
 i45 = i3 + 40 | 0;
 i46 = i3 + 36 | 0;
 i47 = i3 + 32 | 0;
 i48 = i3 + 28 | 0;
 i49 = i3 + 24 | 0;
 i50 = i3 + 20 | 0;
 i51 = i3 + 16 | 0;
 i52 = i3 + 12 | 0;
 i53 = i3 + 8 | 0;
 i54 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i23 >> 2] = HEAP32[HEAP32[26773] >> 2];
 HEAP32[i27 >> 2] = 0;
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i28 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i28 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i19 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 if (!(HEAP32[26841] | 0)) {
  HEAP32[27181] = 0;
  HEAP32[27182] = 0;
 }
 HEAP32[i29 >> 2] = HEAP32[27181];
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 543) HEAP32[i18 >> 2] = 2; else HEAP32[i18 >> 2] = 1;
 do if ((HEAPU8[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] >> 0] | 0) == 115) if (HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 32) i2 = 36; else if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 9) i2 = 36; else if (!(_vim_strchr(43349, HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) | 0)) {
  if (_isalpha(HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) | 0) {
   _emsg(43369) | 0;
   STACKTOP = i3;
   return;
  }
  if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 92) {
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   if (!(_vim_strchr(43425, HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) | 0)) {
    _emsg(92184) | 0;
    STACKTOP = i3;
    return;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 38) HEAP32[i18 >> 2] = 0;
   HEAP32[i11 >> 2] = 114072;
   i1 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i1 + 1;
   HEAP32[i13 >> 2] = HEAPU8[i1 >> 0];
  } else {
   HEAP32[i18 >> 2] = 2;
   i1 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i1 + 1;
   HEAP32[i13 >> 2] = HEAPU8[i1 >> 0];
   HEAP32[i11 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i19 >> 2] = _skip_regexp(HEAP32[i19 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[26946] | 0, HEAP32[i5 >> 2] | 0) | 0;
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == (HEAP32[i13 >> 2] | 0)) {
    i1 = HEAP32[i19 >> 2] | 0;
    HEAP32[i19 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = 0;
   }
  }
  HEAP32[i12 >> 2] = HEAP32[i19 >> 2];
  while (1) {
   if (!(HEAP8[HEAP32[i19 >> 2] >> 0] | 0)) break;
   i55 = HEAP32[i19 >> 2] | 0;
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == (HEAP32[i13 >> 2] | 0)) {
    i2 = 24;
    break;
   }
   if ((HEAPU8[i55 >> 0] | 0) == 92) if (HEAPU8[(HEAP32[i19 >> 2] | 0) + 1 >> 0] | 0) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  }
  if ((i2 | 0) == 24) {
   HEAP32[i19 >> 2] = i55 + 1;
   HEAP8[i55 >> 0] = 0;
  }
  if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0)) {
   if (!(_strcmp(HEAP32[i12 >> 2] | 0, 46467) | 0)) if (_vim_strchr(HEAP32[26904] | 0, 47) | 0) {
    if (HEAP32[25224] | 0) {
     HEAP32[i12 >> 2] = HEAP32[25224];
     break;
    }
    _emsg(93083) | 0;
    STACKTOP = i3;
    return;
   }
   _vim_free(HEAP32[25224] | 0);
   HEAP32[25224] = _vim_strsave(HEAP32[i12 >> 2] | 0) | 0;
  }
 } else i2 = 36; else i2 = 36; else i2 = 36; while (0);
 do if ((i2 | 0) == 36) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0)) {
  if (HEAP32[25224] | 0) {
   HEAP32[i11 >> 2] = 0;
   HEAP32[i12 >> 2] = HEAP32[25224];
   HEAP32[i27 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) == 2147483647 & 1;
   break;
  }
  _emsg(93083) | 0;
  STACKTOP = i3;
  return;
 } while (0);
 do if (HEAP32[i11 >> 2] | 0) if (!(_strcmp(HEAP32[i11 >> 2] | 0, 43429) | 0)) if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) {
  if (HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) {
   if (HEAPU8[(HEAP32[i19 >> 2] | 0) + 1 >> 0] | 0) break;
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 103) if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 108) if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 112) if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 35) break;
  }
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2];
  do if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 108) HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] = 1; else {
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 35) {
    HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] = 2;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 112) HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2] = 4;
  } while (0);
  i55 = HEAP32[i5 >> 2] | 0;
  HEAP32[i30 >> 2] = (HEAP32[i55 + 40 >> 2] | 0) - (HEAP32[i55 + 36 >> 2] | 0) + 1;
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
  if ((HEAP32[i30 >> 2] | 0) > 1) {
   _do_join(HEAP32[i30 >> 2] | 0, 0, 1, 0, 1) | 0;
   HEAP32[27181] = (HEAP32[i30 >> 2] | 0) - 1;
   HEAP32[27182] = 1;
   _do_sub_msg(0) | 0;
   _ex_may_print(HEAP32[i5 >> 2] | 0);
  }
  if (HEAP32[27134] | 0) {
   STACKTOP = i3;
   return;
  }
  _save_re_pat(1, HEAP32[i11 >> 2] | 0, HEAP32[26946] | 0);
  STACKTOP = i3;
  return;
 } while (0);
 if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 38) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1; else {
  if (!(HEAP32[26909] | 0)) {
   if (HEAP32[26921] | 0) HEAP32[27392] = 1; else HEAP32[27392] = 0;
   HEAP32[27393] = 0;
  }
  HEAP32[10368] = 1;
  HEAP32[27395] = 0;
  HEAP32[27394] = 0;
  HEAP32[27397] = 0;
  HEAP32[27398] = 0;
 }
 L99 : while (1) {
  if (!(HEAP8[HEAP32[i19 >> 2] >> 0] | 0)) break;
  do if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 103) HEAP32[27392] = ((HEAP32[27392] | 0) != 0 ^ 1) & 1; else {
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 99) {
    HEAP32[27393] = ((HEAP32[27393] | 0) != 0 ^ 1) & 1;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 110) {
    HEAP32[27394] = 1;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 101) {
    HEAP32[10368] = ((HEAP32[10368] | 0) != 0 ^ 1) & 1;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 114) {
    HEAP32[i18 >> 2] = 2;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 112) {
    HEAP32[27395] = 1;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 35) {
    HEAP32[27395] = 1;
    HEAP32[27397] = 1;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 108) {
    HEAP32[27395] = 1;
    HEAP32[27396] = 1;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 105) {
    HEAP32[27398] = 105;
    break;
   }
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 73) break L99;
   HEAP32[27398] = 73;
  } while (0);
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 }
 if (HEAP32[27394] | 0) HEAP32[27393] = 0;
 HEAP32[i9 >> 2] = HEAP32[27392];
 HEAP32[i10 >> 2] = HEAP32[27393];
 HEAP32[i19 >> 2] = _skipwhite(HEAP32[i19 >> 2] | 0) | 0;
 if (((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) {
  HEAP32[i7 >> 2] = _getdigits(i19) | 0;
  if ((HEAP32[i7 >> 2] | 0) <= 0) if (HEAP32[10368] | 0 ? (HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) == 0 : 0) {
   _emsg(94052) | 0;
   STACKTOP = i3;
   return;
  }
  i30 = HEAP32[i5 >> 2] | 0;
  HEAP32[i30 + 36 >> 2] = HEAP32[i30 + 40 >> 2];
  i30 = (HEAP32[i5 >> 2] | 0) + 40 | 0;
  HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1);
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] = HEAP32[HEAP32[26773] >> 2];
 }
 HEAP32[i19 >> 2] = _skipwhite(HEAP32[i19 >> 2] | 0) | 0;
 if (HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 34) {
  i30 = _check_nextcmd(HEAP32[i19 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = i30;
  if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) {
   _emsg(93844) | 0;
   STACKTOP = i3;
   return;
  }
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[27394] | 0)) if (!(HEAP32[(HEAP32[26773] | 0) + 664 >> 2] | 0)) {
  _emsg(92640) | 0;
  STACKTOP = i3;
  return;
 }
 if (!(_search_regcomp(HEAP32[i11 >> 2] | 0, 1, HEAP32[i18 >> 2] | 0, 32, i8) | 0)) {
  if (!(HEAP32[10368] | 0)) {
   STACKTOP = i3;
   return;
  }
  _emsg(92522) | 0;
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[27398] | 0) == 105) HEAP32[i8 + 164 >> 2] = 1; else if ((HEAP32[27398] | 0) == 73) HEAP32[i8 + 164 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 92) {
  if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) != 61) i2 = 117;
 } else i2 = 117;
 if ((i2 | 0) == 117) HEAP32[i12 >> 2] = _regtilde(HEAP32[i12 >> 2] | 0, HEAP32[26946] | 0) | 0;
 HEAP32[i24 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2];
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2];
 L175 : while (1) {
  if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i24 >> 2] | 0)) {
   i2 = 256;
   break;
  }
  if (!((HEAP32[i15 >> 2] | 0) != 0 ^ 1)) {
   i2 = 256;
   break;
  }
  HEAP32[i25 >> 2] = _vim_regexec_multi(i8, HEAP32[26881] | 0, HEAP32[26773] | 0, HEAP32[i6 >> 2] | 0, 0, 0, 0) | 0;
  do if (HEAP32[i25 >> 2] | 0) {
   HEAP32[i33 >> 2] = 2147483647;
   HEAP32[i35 >> 2] = 0;
   HEAP32[i36 >> 2] = 0;
   HEAP32[i38 >> 2] = 0;
   HEAP32[i43 >> 2] = 0;
   HEAP32[i45 >> 2] = 0;
   HEAP32[i46 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i31 >> 2] = 0;
   HEAP32[i32 >> 2] = 0;
   if (!(HEAP32[i16 >> 2] | 0)) {
    _setpcmark();
    HEAP32[i16 >> 2] = 1;
   }
   while (1) {
    do if ((HEAP32[i8 + 4 >> 2] | 0) > 0) {
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i8 + 4 >> 2] | 0);
     HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + (HEAP32[i8 + 4 >> 2] | 0);
     HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0);
     if (!(HEAP32[i26 >> 2] | 0)) break;
     _vim_free(HEAP32[i26 >> 2] | 0);
     HEAP32[i26 >> 2] = 0;
    } while (0);
    if (!(HEAP32[i26 >> 2] | 0)) {
     HEAP32[i26 >> 2] = _vim_strsave(_ml_get(HEAP32[i46 >> 2] | 0) | 0) | 0;
     if (!(HEAP32[i26 >> 2] | 0)) {
      i2 = 130;
      break L175;
     }
    }
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i44 >> 2] = 0;
    do if ((HEAP32[i32 >> 2] | 0) == (HEAP32[i33 >> 2] | 0)) {
     if (HEAP32[i8 + 84 >> 2] | 0) {
      i2 = 137;
      break;
     }
     if ((HEAP32[i32 >> 2] | 0) != (HEAP32[i8 + 84 + 4 >> 2] | 0)) {
      i2 = 137;
      break;
     }
     if (!(HEAPU8[(HEAP32[i26 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] | 0)) {
      HEAP32[i45 >> 2] = 1;
      break;
     } else {
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
      break;
     }
    } else i2 = 137; while (0);
    L200 : do if ((i2 | 0) == 137) {
     i2 = 0;
     HEAP32[i32 >> 2] = HEAP32[i8 + 84 + 4 >> 2];
     HEAP32[i33 >> 2] = HEAP32[i32 >> 2];
     if (HEAP32[27394] | 0) {
      if ((HEAP32[i25 >> 2] | 0) > 1) {
       HEAP32[i32 >> 2] = _strlen(HEAP32[i26 >> 2] | 0) | 0;
       HEAP32[i25 >> 2] = 1;
       HEAP32[i45 >> 2] = 1;
      }
      HEAP32[27181] = (HEAP32[27181] | 0) + 1;
      HEAP32[i38 >> 2] = 1;
      break;
     }
     do if (HEAP32[27393] | 0) {
      HEAP32[i47 >> 2] = 0;
      HEAP32[i20 >> 2] = HEAP32[10180];
      HEAP32[10180] = 2048;
      _setmouse();
      HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i8 + 4 + 4 >> 2];
      if (HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] | 0) _do_check_cursorbind();
      if (_vim_strchr(HEAP32[26904] | 0, 117) | 0) HEAP32[26805] = (HEAP32[26805] | 0) + 1;
      while (1) {
       if (!(HEAP32[27393] | 0)) break;
       do if (HEAP32[26798] | 0) {
        _print_line_no_prefix(HEAP32[i6 >> 2] | 0, HEAP32[27397] | 0, HEAP32[27396] | 0);
        i18 = HEAP32[26881] | 0;
        _getvcol(i18 | 0, i18 + 24 | 0, i49, 0, 0);
        HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = (HEAP32[i8 + 84 + 4 >> 2] | 0) - 1;
        if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) < 0) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
        i18 = HEAP32[26881] | 0;
        _getvcol(i18 | 0, i18 + 24 | 0, 0, 0, i50);
        if (HEAP32[27397] | 0) i2 = 153; else if (HEAP32[(HEAP32[26881] | 0) + 200 + 4 >> 2] | 0) i2 = 153;
        if ((i2 | 0) == 153) {
         i2 = 0;
         HEAP32[i51 >> 2] = 8;
         HEAP32[i49 >> 2] = (HEAP32[i49 >> 2] | 0) + (HEAP32[i51 >> 2] | 0);
         HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + (HEAP32[i51 >> 2] | 0);
        }
        _msg_start();
        HEAP32[i7 >> 2] = 0;
        while (1) {
         if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i49 >> 2] | 0)) break;
         _msg_putchar(32);
         HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
        }
        while (1) {
         if ((HEAP32[i7 >> 2] | 0) > (HEAP32[i50 >> 2] | 0)) break;
         _msg_putchar(94);
         HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
        }
        HEAP32[i48 >> 2] = _getexmodeline(63, 0, 0) | 0;
        if (!(HEAP32[i48 >> 2] | 0)) break;
        HEAP32[i47 >> 2] = HEAPU8[HEAP32[i48 >> 2] >> 0];
        _vim_free(HEAP32[i48 >> 2] | 0);
       } else {
        HEAP32[i52 >> 2] = 0;
        HEAP32[i53 >> 2] = 0;
        HEAP32[i17 >> 2] = HEAP32[26814];
        HEAP32[26814] = 0;
        do if (HEAP32[i35 >> 2] | 0) {
         HEAP32[i52 >> 2] = _vim_strsave(_ml_get(HEAP32[i6 >> 2] | 0) | 0) | 0;
         if (!(HEAP32[i52 >> 2] | 0)) break;
         HEAP32[i54 >> 2] = _concat_str(HEAP32[i35 >> 2] | 0, (HEAP32[i26 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0) | 0;
         if (HEAP32[i54 >> 2] | 0) {
          i18 = _strlen(HEAP32[i54 >> 2] | 0) | 0;
          HEAP32[i53 >> 2] = i18 - (_strlen(HEAP32[i52 >> 2] | 0) | 0);
          i18 = (HEAP32[26881] | 0) + 24 + 4 | 0;
          HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i53 >> 2] | 0);
          _ml_replace(HEAP32[i6 >> 2] | 0, HEAP32[i54 >> 2] | 0, 0) | 0;
          break;
         }
         if (!(HEAP32[i52 >> 2] | 0)) break;
         _vim_free(HEAP32[i52 >> 2] | 0);
         HEAP32[i52 >> 2] = 0;
        } while (0);
        HEAP32[27046] = (HEAP32[i8 + 84 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0);
        HEAP32[27047] = (HEAP32[i8 + 84 + 4 >> 2] | 0) + (HEAP32[i53 >> 2] | 0);
        HEAP32[26735] = 1;
        _update_topline();
        _validate_cursor();
        _update_screen(35) | 0;
        HEAP32[26735] = 0;
        _redraw_later(35);
        if ((HEAP32[26877] | 0) == ((HEAP32[10173] | 0) - 1 | 0)) HEAP32[26711] = 0;
        _msg_starthere();
        HEAP32[i7 >> 2] = HEAP32[26710];
        HEAP32[26710] = 0;
        HEAP32[26730] = 1;
        i18 = HEAP32[27060] | 0;
        HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
        _smsg_attr(i18, 43432, i4) | 0;
        HEAP32[26730] = 0;
        HEAP32[26710] = HEAP32[i7 >> 2];
        _showruler(1);
        _windgoto(HEAP32[26877] | 0, HEAP32[27043] | 0);
        HEAP32[26814] = HEAP32[i17 >> 2];
        HEAP32[26802] = (HEAP32[26802] | 0) + 1;
        HEAP32[26804] = (HEAP32[26804] | 0) + 1;
        HEAP32[i47 >> 2] = _plain_vgetc() | 0;
        HEAP32[26804] = (HEAP32[26804] | 0) + -1;
        HEAP32[26802] = (HEAP32[26802] | 0) + -1;
        HEAP32[26711] = 0;
        HEAP32[27043] = 0;
        _gotocmdline(1);
        if (!(HEAP32[i52 >> 2] | 0)) break;
        _ml_replace(HEAP32[i6 >> 2] | 0, HEAP32[i52 >> 2] | 0, 0) | 0;
       } while (0);
       HEAP32[26721] = 0;
       if ((HEAP32[i47 >> 2] | 0) == 113 | (HEAP32[i47 >> 2] | 0) == 27 | (HEAP32[i47 >> 2] | 0) == 3) {
        i2 = 174;
        break;
       }
       if ((HEAP32[i47 >> 2] | 0) == (HEAP32[26725] | 0)) {
        i2 = 174;
        break;
       }
       if ((HEAP32[i47 >> 2] | 0) == 110 | (HEAP32[i47 >> 2] | 0) == 121) break;
       if ((HEAP32[i47 >> 2] | 0) == 108) {
        i2 = 177;
        break;
       }
       if ((HEAP32[i47 >> 2] | 0) == 97) {
        i2 = 179;
        break;
       }
      }
      if ((i2 | 0) == 174) {
       i2 = 0;
       HEAP32[i15 >> 2] = 1;
      } else if ((i2 | 0) == 177) {
       i2 = 0;
       HEAP32[27392] = 0;
       HEAP32[i24 >> 2] = HEAP32[i6 >> 2];
      } else if ((i2 | 0) == 179) {
       i2 = 0;
       HEAP32[27393] = 0;
      }
      HEAP32[10180] = HEAP32[i20 >> 2];
      _setmouse();
      if (_vim_strchr(HEAP32[26904] | 0, 117) | 0) HEAP32[26805] = (HEAP32[26805] | 0) + -1;
      if ((HEAP32[i47 >> 2] | 0) != 110) if (HEAP32[i15 >> 2] | 0) break L200; else break;
      if ((HEAP32[i25 >> 2] | 0) <= 1) break L200;
      HEAP32[i32 >> 2] = _strlen(HEAP32[i26 >> 2] | 0) | 0;
      HEAP32[i45 >> 2] = 1;
      break L200;
     } while (0);
     HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i8 + 4 + 4 >> 2];
     HEAP32[i14 >> 2] = _vim_regsub_multi(i8, (HEAP32[i46 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0, HEAP32[i26 >> 2] | 0, 0, HEAP32[26946] | 0, 1) | 0;
     if ((HEAP32[i25 >> 2] | 0) > ((HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i46 >> 2] | 0) + 1 | 0)) {
      HEAP32[i25 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i46 >> 2] | 0) + 1;
      HEAP32[i45 >> 2] = 1;
     }
     if ((HEAP32[i25 >> 2] | 0) == 1) HEAP32[i37 >> 2] = HEAP32[i26 >> 2]; else {
      HEAP32[i37 >> 2] = _ml_get((HEAP32[i46 >> 2] | 0) + (HEAP32[i25 >> 2] | 0) - 1 | 0) | 0;
      HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) - 1);
     }
     HEAP32[i41 >> 2] = (HEAP32[i8 + 4 + 4 >> 2] | 0) - (HEAP32[i31 >> 2] | 0);
     i18 = HEAP32[i41 >> 2] | 0;
     i11 = _strlen(HEAP32[i37 >> 2] | 0) | 0;
     HEAP32[i42 >> 2] = i18 + (i11 - (HEAP32[i8 + 84 + 4 >> 2] | 0)) + (HEAP32[i14 >> 2] | 0) + 1;
     if (!(HEAP32[i35 >> 2] | 0)) {
      HEAP32[i36 >> 2] = (HEAP32[i42 >> 2] | 0) + 50;
      i11 = _alloc_check(HEAP32[i36 >> 2] | 0) | 0;
      HEAP32[i35 >> 2] = i11;
      if (!i11) break L175;
      HEAP8[HEAP32[i35 >> 2] >> 0] = 0;
      HEAP32[i34 >> 2] = HEAP32[i35 >> 2];
     } else {
      HEAP32[i40 >> 2] = _strlen(HEAP32[i35 >> 2] | 0) | 0;
      HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) + (HEAP32[i40 >> 2] | 0);
      if ((HEAP32[i42 >> 2] | 0) > (HEAP32[i36 >> 2] | 0)) {
       HEAP32[i36 >> 2] = (HEAP32[i42 >> 2] | 0) + 50;
       i11 = _alloc_check(HEAP32[i36 >> 2] | 0) | 0;
       HEAP32[i37 >> 2] = i11;
       if (!i11) {
        i2 = 197;
        break L175;
       }
       _memmove(HEAP32[i37 >> 2] | 0, HEAP32[i35 >> 2] | 0, (HEAP32[i40 >> 2] | 0) + 1 | 0) | 0;
       _vim_free(HEAP32[i35 >> 2] | 0);
       HEAP32[i35 >> 2] = HEAP32[i37 >> 2];
      }
      HEAP32[i34 >> 2] = (HEAP32[i35 >> 2] | 0) + (HEAP32[i40 >> 2] | 0);
     }
     _memmove(HEAP32[i34 >> 2] | 0, (HEAP32[i26 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0, HEAP32[i41 >> 2] | 0) | 0;
     HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + (HEAP32[i41 >> 2] | 0);
     _vim_regsub_multi(i8, (HEAP32[i46 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0, HEAP32[i34 >> 2] | 0, 1, HEAP32[26946] | 0, 1) | 0;
     HEAP32[27181] = (HEAP32[27181] | 0) + 1;
     HEAP32[i38 >> 2] = 1;
     HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
     do if ((HEAP32[i25 >> 2] | 0) > 1) {
      HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) - 1);
      _vim_free(HEAP32[i26 >> 2] | 0);
      HEAP32[i26 >> 2] = _vim_strsave(_ml_get(HEAP32[i46 >> 2] | 0) | 0) | 0;
      if ((HEAP32[i46 >> 2] | 0) <= (HEAP32[i24 >> 2] | 0)) {
       HEAP32[i44 >> 2] = 1;
       break;
      } else {
       HEAP32[27392] = 0;
       break;
      }
     } while (0);
     HEAP32[i31 >> 2] = HEAP32[i8 + 84 + 4 >> 2];
     if (HEAP32[i45 >> 2] | 0) {
      _vim_free(HEAP32[i26 >> 2] | 0);
      HEAP32[i26 >> 2] = _vim_strsave(114072) | 0;
      HEAP32[i31 >> 2] = 0;
     }
     HEAP32[i37 >> 2] = HEAP32[i34 >> 2];
     while (1) {
      if (!(HEAP8[HEAP32[i37 >> 2] >> 0] | 0)) break L200;
      do if ((HEAPU8[HEAP32[i37 >> 2] >> 0] | 0) == 92) {
       if (!(HEAPU8[(HEAP32[i37 >> 2] | 0) + 1 >> 0] | 0)) {
        i2 = 211;
        break;
       }
       i11 = HEAP32[i37 >> 2] | 0;
       i18 = i11 | 0;
       i30 = i11 + 1 | 0;
       _memmove(i18 | 0, i30 | 0, (_strlen((HEAP32[i37 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
      } else i2 = 211; while (0);
      do if ((i2 | 0) == 211) {
       i2 = 0;
       if ((HEAPU8[HEAP32[i37 >> 2] >> 0] | 0) != 13) break;
       if ((_u_inssub(HEAP32[i6 >> 2] | 0) | 0) != 1) break;
       HEAP8[HEAP32[i37 >> 2] >> 0] = 0;
       i30 = HEAP32[i35 >> 2] | 0;
       _ml_append((HEAP32[i6 >> 2] | 0) - 1 | 0, i30 | 0, (HEAP32[i37 >> 2] | 0) - i30 + 1 | 0, 0) | 0;
       _mark_adjust((HEAP32[i6 >> 2] | 0) + 1 | 0, 2147483647, 1, 0);
       if (HEAP32[27393] | 0) _appended_lines((HEAP32[i6 >> 2] | 0) - 1 | 0, 1); else {
        if (!(HEAP32[i21 >> 2] | 0)) HEAP32[i21 >> 2] = HEAP32[i6 >> 2];
        HEAP32[i22 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
       }
       HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + 1;
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
       HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
       i30 = (HEAP32[26881] | 0) + 24 | 0;
       HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
       i30 = HEAP32[i35 >> 2] | 0;
       i18 = (HEAP32[i37 >> 2] | 0) + 1 | 0;
       _memmove(i30 | 0, i18 | 0, (_strlen((HEAP32[i37 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
       HEAP32[i37 >> 2] = (HEAP32[i35 >> 2] | 0) + -1;
      } while (0);
      HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + 1;
     }
    } while (0);
    do if (HEAP32[i45 >> 2] | 0) i56 = 1; else {
     if ((HEAP32[26834] | 0) != 0 | (HEAP32[i15 >> 2] | 0) != 0) {
      i56 = 1;
      break;
     }
     if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i24 >> 2] | 0)) {
      i56 = 1;
      break;
     }
     if (!((HEAP32[27392] | 0) != 0 | (HEAP32[i44 >> 2] | 0) != 0)) {
      i56 = 1;
      break;
     }
     if (!((HEAP32[i25 >> 2] | 0) <= 1 ? (HEAPU8[(HEAP32[i26 >> 2] | 0) + (HEAP32[i32 >> 2] | 0) >> 0] | 0) == 0 : 0)) {
      i56 = 0;
      break;
     }
     i56 = (_re_multiline(HEAP32[i8 >> 2] | 0) | 0) != 0 ^ 1;
    } while (0);
    HEAP32[i39 >> 2] = i56 & 1;
    HEAP32[i25 >> 2] = -1;
    do if ((HEAP32[i39 >> 2] | 0) != 0 | (HEAP32[i43 >> 2] | 0) > 0) i2 = 229; else {
     i18 = _vim_regexec_multi(i8, HEAP32[26881] | 0, HEAP32[26773] | 0, HEAP32[i46 >> 2] | 0, HEAP32[i32 >> 2] | 0, 0, 0) | 0;
     HEAP32[i25 >> 2] = i18;
     if (!i18) {
      i2 = 229;
      break;
     }
     if ((HEAP32[i8 + 4 >> 2] | 0) > 0) i2 = 229;
    } while (0);
    if ((i2 | 0) == 229) {
     i2 = 0;
     if (HEAP32[i35 >> 2] | 0) {
      _strcat(HEAP32[i35 >> 2] | 0, (HEAP32[i26 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0) | 0;
      i18 = _strlen(HEAP32[i26 >> 2] | 0) | 0;
      HEAP32[i32 >> 2] = i18 - (HEAP32[i32 >> 2] | 0);
      i18 = _strlen(HEAP32[i26 >> 2] | 0) | 0;
      HEAP32[i33 >> 2] = i18 - (HEAP32[i33 >> 2] | 0);
      if ((_u_savesub(HEAP32[i6 >> 2] | 0) | 0) != 1) break;
      _ml_replace(HEAP32[i6 >> 2] | 0, HEAP32[i35 >> 2] | 0, 1) | 0;
      if ((HEAP32[i43 >> 2] | 0) > 0) {
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
       if ((_u_savedel(HEAP32[i6 >> 2] | 0, HEAP32[i43 >> 2] | 0) | 0) != 1) break;
       HEAP32[i7 >> 2] = 0;
       while (1) {
        i57 = HEAP32[i6 >> 2] | 0;
        if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i43 >> 2] | 0)) break;
        _ml_delete(i57, 0) | 0;
        HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
       }
       i18 = HEAP32[i43 >> 2] | 0;
       _mark_adjust(i57, (HEAP32[i6 >> 2] | 0) + i18 - 1 | 0, 2147483647, 0 - i18 | 0);
       if (HEAP32[27393] | 0) _deleted_lines(HEAP32[i6 >> 2] | 0, HEAP32[i43 >> 2] | 0);
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
       HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) - (HEAP32[i43 >> 2] | 0);
       HEAP32[i43 >> 2] = 0;
      }
      if (HEAP32[27393] | 0) _changed_bytes(HEAP32[i6 >> 2] | 0, 0); else {
       if (!(HEAP32[i21 >> 2] | 0)) HEAP32[i21 >> 2] = HEAP32[i6 >> 2];
       HEAP32[i22 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
      }
      HEAP32[i46 >> 2] = HEAP32[i6 >> 2];
      _vim_free(HEAP32[i26 >> 2] | 0);
      HEAP32[i26 >> 2] = HEAP32[i35 >> 2];
      HEAP32[i35 >> 2] = 0;
      i18 = _strlen(HEAP32[i26 >> 2] | 0) | 0;
      HEAP32[i32 >> 2] = i18 - (HEAP32[i32 >> 2] | 0);
      i18 = _strlen(HEAP32[i26 >> 2] | 0) | 0;
      HEAP32[i33 >> 2] = i18 - (HEAP32[i33 >> 2] | 0);
      HEAP32[i31 >> 2] = 0;
     }
     if (!((HEAP32[i25 >> 2] | 0) != -1 | (HEAP32[i39 >> 2] | 0) != 0)) HEAP32[i25 >> 2] = _vim_regexec_multi(i8, HEAP32[26881] | 0, HEAP32[26773] | 0, HEAP32[i46 >> 2] | 0, HEAP32[i32 >> 2] | 0, 0, 0) | 0;
     if ((HEAP32[i25 >> 2] | 0) <= 0) {
      i2 = 248;
      break;
     }
    }
    _line_breakcheck();
   }
   do if ((i2 | 0) == 248) {
    i2 = 0;
    if ((HEAP32[i25 >> 2] | 0) != -1) break;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0);
   } while (0);
   if (HEAP32[i38 >> 2] | 0) HEAP32[27182] = (HEAP32[27182] | 0) + 1;
   _vim_free(HEAP32[i35 >> 2] | 0);
   if (!(HEAP32[i26 >> 2] | 0)) break;
   _vim_free(HEAP32[i26 >> 2] | 0);
   HEAP32[i26 >> 2] = 0;
  } while (0);
  _line_breakcheck();
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 130) _vim_free(HEAP32[i35 >> 2] | 0); else if ((i2 | 0) == 197) _vim_free(HEAP32[i35 >> 2] | 0); else if ((i2 | 0) == 256) if (HEAP32[i21 >> 2] | 0) {
  HEAP32[i7 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i23 >> 2] | 0);
  i23 = HEAP32[i7 >> 2] | 0;
  _changed_lines(HEAP32[i21 >> 2] | 0, 0, (HEAP32[i22 >> 2] | 0) - i23 | 0, i23 | 0);
 }
 _vim_free(HEAP32[i26 >> 2] | 0);
 if (HEAP32[27394] | 0) {
  i26 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i26 >> 2] = HEAP32[i28 >> 2];
  HEAP32[i26 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
 }
 do if ((HEAP32[27181] | 0) > (HEAP32[i29 >> 2] | 0)) {
  HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = HEAP32[i24 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = 0;
  HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
  if (HEAP32[26841] | 0) HEAP32[25225] = 1; else {
   do if (!(HEAP32[27393] | 0)) if (HEAP32[i27 >> 2] | 0) {
    _coladvance(2147483647) | 0;
    break;
   } else {
    _beginline(5);
    break;
   } while (0);
   i28 = (_do_sub_msg(HEAP32[27394] | 0) | 0) == 0;
   if (i28 & (HEAP32[27393] | 0) != 0) _msg(114072) | 0;
  }
  if (HEAP32[27395] | 0) _print_line(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[27397] | 0, HEAP32[27396] | 0);
 } else if (!(HEAP32[26841] | 0)) {
  if (HEAP32[26834] | 0) {
   _emsg(92420) | 0;
   break;
  }
  if (HEAP32[i16 >> 2] | 0) {
   _msg(114072) | 0;
   break;
  }
  if (HEAP32[10368] | 0) _emsg2(93382, _get_search_pat() | 0) | 0;
 } while (0);
 _vim_regfree(HEAP32[i8 >> 2] | 0);
 HEAP32[27392] = HEAP32[i9 >> 2];
 HEAP32[27393] = HEAP32[i10 >> 2];
 STACKTOP = i3;
 return;
}

function _do_highlight(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i6 = i5 + 244 | 0;
 i7 = i5 + 240 | 0;
 i8 = i5 + 236 | 0;
 i9 = i5 + 232 | 0;
 i10 = i5 + 228 | 0;
 i11 = i5 + 224 | 0;
 i12 = i5 + 220 | 0;
 i13 = i5 + 216 | 0;
 i14 = i5 + 212 | 0;
 i15 = i5 + 208 | 0;
 i16 = i5 + 204 | 0;
 i17 = i5 + 200 | 0;
 i18 = i5 + 196 | 0;
 i19 = i5 + 192 | 0;
 i20 = i5 + 188 | 0;
 i21 = i5 + 184 | 0;
 i22 = i5 + 88 | 0;
 i23 = i5 + 80 | 0;
 i24 = i5 + 76 | 0;
 i25 = i5 + 72 | 0;
 i26 = i5 + 68 | 0;
 i27 = i5 + 64 | 0;
 i28 = i5 + 60 | 0;
 i29 = i5 + 56 | 0;
 i30 = i5 + 52 | 0;
 i31 = i5 + 48 | 0;
 i32 = i5 + 44 | 0;
 i33 = i5 + 40 | 0;
 i34 = i5 + 36 | 0;
 i35 = i5 + 32 | 0;
 i36 = i5 + 28 | 0;
 i37 = i5 + 24 | 0;
 i38 = i5 + 20 | 0;
 i39 = i5 + 16 | 0;
 i40 = i5 + 12 | 0;
 i41 = i5 + 8 | 0;
 i42 = i5 + 4 | 0;
 i43 = i5 + 248 | 0;
 i44 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i29 >> 2] = 0;
 HEAP32[i30 >> 2] = 0;
 if (_ends_excmd(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) {
  HEAP32[i16 >> 2] = 1;
  while (1) {
   if ((HEAP32[i16 >> 2] | 0) > (HEAP32[26486] | 0)) {
    i4 = 274;
    break;
   }
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
    i4 = 274;
    break;
   }
   _highlight_list_one(HEAP32[i16 >> 2] | 0);
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  }
  if ((i4 | 0) == 274) {
   STACKTOP = i5;
   return;
  }
 }
 HEAP32[i9 >> 2] = _skiptowhite(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = _skipwhite(HEAP32[i9 >> 2] | 0) | 0;
 if (!(_strncmp(HEAP32[i6 >> 2] | 0, 76313, (HEAP32[i9 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) | 0)) {
  HEAP32[i24 >> 2] = 1;
  HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 >> 2] = _skiptowhite(HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i11 >> 2] = _skipwhite(HEAP32[i9 >> 2] | 0) | 0;
 }
 if (!(_strncmp(HEAP32[i6 >> 2] | 0, 97712, (HEAP32[i9 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) | 0)) HEAP32[i25 >> 2] = 1;
 if (!(_strncmp(HEAP32[i6 >> 2] | 0, 76321, (HEAP32[i9 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) | 0)) HEAP32[i26 >> 2] = 1;
 if (!((HEAP32[i25 >> 2] | 0) != 0 | (HEAP32[i26 >> 2] | 0) != 0)) if (_ends_excmd(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0) {
  i3 = HEAP32[i6 >> 2] | 0;
  HEAP32[i20 >> 2] = _syn_namen2id(i3 | 0, (HEAP32[i9 >> 2] | 0) - i3 | 0) | 0;
  if (!(HEAP32[i20 >> 2] | 0)) {
   _emsg2(76326, HEAP32[i6 >> 2] | 0) | 0;
   STACKTOP = i5;
   return;
  } else {
   _highlight_list_one(HEAP32[i20 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 }
 if (HEAP32[i26 >> 2] | 0) {
  HEAP32[i31 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i32 >> 2] = _skiptowhite(HEAP32[i31 >> 2] | 0) | 0;
  HEAP32[i33 >> 2] = _skipwhite(HEAP32[i32 >> 2] | 0) | 0;
  HEAP32[i34 >> 2] = _skiptowhite(HEAP32[i33 >> 2] | 0) | 0;
  if (!(_ends_excmd(HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) | 0)) if (!(_ends_excmd(HEAPU8[HEAP32[i33 >> 2] >> 0] | 0) | 0)) {
   i26 = (_ends_excmd(HEAPU8[(_skipwhite(HEAP32[i34 >> 2] | 0) | 0) >> 0] | 0) | 0) != 0;
   i3 = HEAP32[i31 >> 2] | 0;
   if (!i26) {
    _emsg2(76411, i3) | 0;
    STACKTOP = i5;
    return;
   }
   HEAP32[i35 >> 2] = _syn_check_group(i3, (HEAP32[i32 >> 2] | 0) - (HEAP32[i31 >> 2] | 0) | 0) | 0;
   if (!(_strncmp(HEAP32[i33 >> 2] | 0, 94449, 4) | 0)) HEAP32[i36 >> 2] = 0; else {
    i32 = HEAP32[i33 >> 2] | 0;
    HEAP32[i36 >> 2] = _syn_check_group(i32 | 0, (HEAP32[i34 >> 2] | 0) - i32 | 0) | 0;
   }
   if ((HEAP32[i35 >> 2] | 0) <= 0) {
    STACKTOP = i5;
    return;
   }
   if (HEAP32[i8 >> 2] | 0) if (HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i35 >> 2] | 0) - 1 | 0) * 96 | 0) + 92 >> 2] | 0) {
    STACKTOP = i5;
    return;
   }
   if (!((HEAP32[i36 >> 2] | 0) <= 0 | (HEAP32[i7 >> 2] | 0) != 0 | (HEAP32[i8 >> 2] | 0) != 0)) if (_hl_has_settings((HEAP32[i35 >> 2] | 0) - 1 | 0, HEAP32[i24 >> 2] | 0) | 0) {
    if ((HEAP32[26731] | 0) != 0 | (HEAP32[i24 >> 2] | 0) != 0) {
     STACKTOP = i5;
     return;
    }
    _emsg(76458) | 0;
    STACKTOP = i5;
    return;
   }
   if ((HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i35 >> 2] | 0) - 1 | 0) * 96 | 0) + 88 >> 2] | 0) == (HEAP32[i36 >> 2] | 0)) if (!(HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i35 >> 2] | 0) - 1 | 0) * 96 | 0) + 8 >> 2] | 0)) {
    STACKTOP = i5;
    return;
   }
   if (!(HEAP32[i8 >> 2] | 0)) {
    i32 = (HEAP32[26490] | 0) + (((HEAP32[i35 >> 2] | 0) - 1 | 0) * 96 | 0) + 92 | 0;
    HEAP32[i32 >> 2] = HEAP32[i32 >> 2] | 8;
   }
   HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i35 >> 2] | 0) - 1 | 0) * 96 | 0) + 88 >> 2] = HEAP32[i36 >> 2];
   HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i35 >> 2] | 0) - 1 | 0) * 96 | 0) + 8 >> 2] = 0;
   _redraw_all_later(35);
   HEAP32[10183] = 1;
   STACKTOP = i5;
   return;
  }
  _emsg2(76362, HEAP32[i31 >> 2] | 0) | 0;
  STACKTOP = i5;
  return;
 }
 do if (HEAP32[i25 >> 2] | 0) {
  HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
  if (!(_ends_excmd(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0)) {
   HEAP32[i9 >> 2] = _skiptowhite(HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i11 >> 2] = _skipwhite(HEAP32[i9 >> 2] | 0) | 0;
   break;
  }
  _restore_cterm_colors();
  HEAP32[i21 >> 2] = 0;
  while (1) {
   if ((HEAP32[i21 >> 2] | 0) >= (HEAP32[26486] | 0)) break;
   _highlight_clear(HEAP32[i21 >> 2] | 0);
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
  }
  _init_highlight(1, 1);
  if (HEAP32[26627] | 0) _highlight_gui_started(); else _highlight_changed() | 0;
  _redraw_later_clear();
  STACKTOP = i5;
  return;
 } while (0);
 i31 = HEAP32[i6 >> 2] | 0;
 HEAP32[i20 >> 2] = _syn_check_group(i31 | 0, (HEAP32[i9 >> 2] | 0) - i31 | 0) | 0;
 if (!(HEAP32[i20 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i21 >> 2] = (HEAP32[i20 >> 2] | 0) - 1;
 if (HEAP32[i24 >> 2] | 0) if (_hl_has_settings(HEAP32[i21 >> 2] | 0, 1) | 0) {
  STACKTOP = i5;
  return;
 }
 i24 = i22;
 i20 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) | 0;
 i31 = i24 + 96 | 0;
 do {
  HEAP32[i24 >> 2] = HEAP32[i20 >> 2];
  i24 = i24 + 4 | 0;
  i20 = i20 + 4 | 0;
 } while ((i24 | 0) < (i31 | 0));
 if (!(_strcmp(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 4 >> 2] | 0, 76507) | 0)) HEAP32[i29 >> 2] = 1;
 if (HEAP32[i25 >> 2] | 0) i4 = 55; else if ((HEAP32[i7 >> 2] | 0) != 0 & (HEAP32[i8 >> 2] | 0) != 0) i4 = 55;
 if ((i4 | 0) == 55) {
  _highlight_clear(HEAP32[i21 >> 2] | 0);
  if (!(HEAP32[i25 >> 2] | 0)) HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] = 0;
 }
 L99 : do if (!(HEAP32[i25 >> 2] | 0)) {
  L101 : while (1) {
   if (!((_ends_excmd(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0) != 0 ^ 1)) break L99;
   HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 61) {
    i4 = 61;
    break;
   }
   while (1) {
    if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) break;
    if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 32) break;
    if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 9) break;
    if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 61) break;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
   }
   _vim_free(HEAP32[i14 >> 2] | 0);
   i7 = HEAP32[i12 >> 2] | 0;
   HEAP32[i14 >> 2] = _vim_strnsave_up(i7 | 0, (HEAP32[i11 >> 2] | 0) - i7 | 0) | 0;
   if (!(HEAP32[i14 >> 2] | 0)) {
    i4 = 69;
    break;
   }
   HEAP32[i11 >> 2] = _skipwhite(HEAP32[i11 >> 2] | 0) | 0;
   if (!(_strcmp(HEAP32[i14 >> 2] | 0, 94449) | 0)) {
    if (HEAP32[i8 >> 2] | 0) {
     if (!(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] | 0)) i4 = 73;
    } else i4 = 73;
    if ((i4 | 0) == 73) {
     i4 = 0;
     if (!(HEAP32[i8 >> 2] | 0)) {
      i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
      HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 7;
     }
     _highlight_clear(HEAP32[i21 >> 2] | 0);
    }
    continue;
   }
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) != 61) {
    i4 = 78;
    break;
   }
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
   HEAP32[i11 >> 2] = _skipwhite(HEAP32[i11 >> 2] | 0) | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 39) {
    i20 = i7 + 1 | 0;
    HEAP32[i11 >> 2] = i20;
    HEAP32[i13 >> 2] = i20;
    HEAP32[i11 >> 2] = _vim_strchr(HEAP32[i11 >> 2] | 0, 39) | 0;
    if (!(HEAP32[i11 >> 2] | 0)) {
     i4 = 81;
     break;
    }
   } else {
    HEAP32[i13 >> 2] = i7;
    HEAP32[i11 >> 2] = _skiptowhite(HEAP32[i11 >> 2] | 0) | 0;
   }
   if ((HEAP32[i11 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) {
    i4 = 84;
    break;
   }
   _vim_free(HEAP32[i15 >> 2] | 0);
   i7 = HEAP32[i13 >> 2] | 0;
   HEAP32[i15 >> 2] = _vim_strnsave(i7 | 0, (HEAP32[i11 >> 2] | 0) - i7 | 0) | 0;
   if (!(HEAP32[i15 >> 2] | 0)) {
    i4 = 86;
    break;
   }
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 39) HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
   L134 : do if (!(_strcmp(HEAP32[i14 >> 2] | 0, 80460) | 0)) i4 = 92; else {
    if (!(_strcmp(HEAP32[i14 >> 2] | 0, 76602) | 0)) {
     i4 = 92;
     break;
    }
    if (!(_strcmp(HEAP32[i14 >> 2] | 0, 76608) | 0)) {
     i4 = 92;
     break;
    }
    if (!(_strcmp(HEAP32[i14 >> 2] | 0, 76636) | 0)) {
     if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 64 >> 2] | 0) if (!(_strcmp(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 64 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0)) break;
     i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) | 0;
     if (!(HEAP32[26629] | 0)) {
      _vim_free(HEAP32[i7 + 64 >> 2] | 0);
      i20 = _vim_strsave(HEAP32[i15 >> 2] | 0) | 0;
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 64 >> 2] = i20;
      HEAP32[i23 >> 2] = 1;
      break;
     }
     HEAP32[i37 >> 2] = HEAP32[i7 + 60 >> 2];
     HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 60 >> 2] = 0;
     _hl_do_font(HEAP32[i21 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i29 >> 2] | 0, 0, 0, 0);
     i7 = HEAP32[i37 >> 2] | 0;
     if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 60 >> 2] | 0) {
      _gui_mch_free_font(i7);
      _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 64 >> 2] | 0);
      i20 = _vim_strsave(HEAP32[i15 >> 2] | 0) | 0;
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 64 >> 2] = i20;
      HEAP32[i23 >> 2] = 1;
      break;
     } else {
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 60 >> 2] = i7;
      break;
     }
    }
    do if (_strcmp(HEAP32[i14 >> 2] | 0, 76641) | 0) {
     if (!(_strcmp(HEAP32[i14 >> 2] | 0, 76649) | 0)) break;
     if (!(_strcmp(HEAP32[i14 >> 2] | 0, 76766) | 0)) {
      HEAP32[i40 >> 2] = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 76;
      if (HEAP32[i8 >> 2] | 0) if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] & 4 | 0) break L134;
      if (!(HEAP32[i8 >> 2] | 0)) {
       i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4;
      }
      HEAP32[i16 >> 2] = _color_name2handle(HEAP32[i15 >> 2] | 0) | 0;
      if ((HEAP32[i16 >> 2] | 0) == -11111) {
       i7 = (_strcmp(HEAP32[i15 >> 2] | 0, 94449) | 0) != 0;
       if (i7 & (HEAP32[26627] | 0) != 0) break L134;
      }
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 48 >> 2] = HEAP32[i16 >> 2];
      if (HEAP32[HEAP32[i40 >> 2] >> 2] | 0) if (!(_strcmp(HEAP32[HEAP32[i40 >> 2] >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0)) break L134;
      _vim_free(HEAP32[HEAP32[i40 >> 2] >> 2] | 0);
      if (_strcmp(HEAP32[i15 >> 2] | 0, 94449) | 0) {
       i7 = _vim_strsave(HEAP32[i15 >> 2] | 0) | 0;
       HEAP32[HEAP32[i40 >> 2] >> 2] = i7;
      } else HEAP32[HEAP32[i40 >> 2] >> 2] = 0;
      HEAP32[i23 >> 2] = 1;
      break L134;
     }
     if (!(_strcmp(HEAP32[i14 >> 2] | 0, 76772) | 0)) {
      HEAP32[i41 >> 2] = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 80;
      if (HEAP32[i8 >> 2] | 0) if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] & 4 | 0) break L134;
      if (!(HEAP32[i8 >> 2] | 0)) {
       i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4;
      }
      HEAP32[i16 >> 2] = _color_name2handle(HEAP32[i15 >> 2] | 0) | 0;
      if ((HEAP32[i16 >> 2] | 0) == -11111) {
       i7 = (_strcmp(HEAP32[i15 >> 2] | 0, 94449) | 0) != 0;
       if (i7 & (HEAP32[26627] | 0) != 0) break L134;
      }
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 52 >> 2] = HEAP32[i16 >> 2];
      if (HEAP32[HEAP32[i41 >> 2] >> 2] | 0) if (!(_strcmp(HEAP32[HEAP32[i41 >> 2] >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0)) break L134;
      _vim_free(HEAP32[HEAP32[i41 >> 2] >> 2] | 0);
      if (_strcmp(HEAP32[i15 >> 2] | 0, 94449) | 0) {
       i7 = _vim_strsave(HEAP32[i15 >> 2] | 0) | 0;
       HEAP32[HEAP32[i41 >> 2] >> 2] = i7;
      } else HEAP32[HEAP32[i41 >> 2] >> 2] = 0;
      HEAP32[i23 >> 2] = 1;
      break L134;
     }
     if (!(_strcmp(HEAP32[i14 >> 2] | 0, 76778) | 0)) {
      HEAP32[i42 >> 2] = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 84;
      if (HEAP32[i8 >> 2] | 0) if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] & 4 | 0) break L134;
      if (!(HEAP32[i8 >> 2] | 0)) {
       i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4;
      }
      HEAP32[i16 >> 2] = _color_name2handle(HEAP32[i15 >> 2] | 0) | 0;
      if ((HEAP32[i16 >> 2] | 0) == -11111) {
       i7 = (_strcmp(HEAP32[i15 >> 2] | 0, 94449) | 0) != 0;
       if (i7 & (HEAP32[26627] | 0) != 0) break L134;
      }
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 56 >> 2] = HEAP32[i16 >> 2];
      if (HEAP32[HEAP32[i42 >> 2] >> 2] | 0) if (!(_strcmp(HEAP32[HEAP32[i42 >> 2] >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0)) break L134;
      _vim_free(HEAP32[HEAP32[i42 >> 2] >> 2] | 0);
      if (_strcmp(HEAP32[i15 >> 2] | 0, 94449) | 0) {
       i7 = _vim_strsave(HEAP32[i15 >> 2] | 0) | 0;
       HEAP32[HEAP32[i42 >> 2] >> 2] = i7;
      } else HEAP32[HEAP32[i42 >> 2] >> 2] = 0;
      HEAP32[i23 >> 2] = 1;
      break L134;
     }
     if (_strcmp(HEAP32[i14 >> 2] | 0, 76784) | 0) if (_strcmp(HEAP32[i14 >> 2] | 0, 76790) | 0) {
      i4 = 256;
      break L101;
     }
     if (!(HEAP32[i8 >> 2] | 0)) {
      i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
      HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 1;
     }
     L216 : do if (!(_strncmp(HEAP32[i15 >> 2] | 0, 76795, 2) | 0)) {
      HEAP32[i17 >> 2] = 0;
      HEAP8[i43 >> 0] = 0;
      while (1) {
       if (!(HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] | 0)) break L216;
       HEAP32[i18 >> 2] = 0;
       while (1) {
        if (!(HEAPU8[(HEAP32[i15 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] | 0)) >> 0] | 0)) break;
        if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] | 0)) >> 0] | 0) == 44) break;
        HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
       }
       HEAP32[i44 >> 2] = _vim_strnsave((HEAP32[i15 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0;
       if (!(HEAP32[i44 >> 2] | 0)) {
        i4 = 233;
        break;
       }
       HEAP32[i10 >> 2] = _get_term_code(HEAP32[i44 >> 2] | 0) | 0;
       _vim_free(HEAP32[i44 >> 2] | 0);
       if (!(HEAP32[i10 >> 2] | 0)) HEAP32[i10 >> 2] = 114072;
       i7 = _strlen(i43) | 0;
       if ((i7 + (_strlen(HEAP32[i10 >> 2] | 0) | 0) | 0) >= 99) {
        i4 = 237;
        break;
       }
       _strcat(i43, HEAP32[i10 >> 2] | 0) | 0;
       HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
       if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] | 0) == 44) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
      }
      if ((i4 | 0) == 233) {
       i4 = 0;
       HEAP32[i27 >> 2] = 1;
       break;
      } else if ((i4 | 0) == 237) {
       i4 = 0;
       _emsg2(76798, HEAP32[i15 >> 2] | 0) | 0;
       HEAP32[i27 >> 2] = 1;
       break;
      }
     } else {
      HEAP32[i10 >> 2] = HEAP32[i15 >> 2];
      HEAP32[i17 >> 2] = 0;
      while (1) {
       if ((HEAP32[i17 >> 2] | 0) >= 94) break;
       if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
       HEAP32[i18 >> 2] = _trans_special(i10, i43 + (HEAP32[i17 >> 2] | 0) | 0, 0, 0) | 0;
       if ((HEAP32[i18 >> 2] | 0) > 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] | 0); else {
        i7 = HEAP32[i10 >> 2] | 0;
        HEAP32[i10 >> 2] = i7 + 1;
        i20 = HEAP8[i7 >> 0] | 0;
        i7 = HEAP32[i17 >> 2] | 0;
        HEAP32[i17 >> 2] = i7 + 1;
        HEAP8[i43 + i7 >> 0] = i20;
       }
      }
      HEAP8[i43 + (HEAP32[i17 >> 2] | 0) >> 0] = 0;
     } while (0);
     if (HEAP32[i27 >> 2] | 0) break L99;
     if (!(_strcmp(i43, 94449) | 0)) HEAP32[i10 >> 2] = 0; else HEAP32[i10 >> 2] = _vim_strsave(i43) | 0;
     i20 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) | 0;
     if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + 2 >> 0] | 0) == 65) {
      _vim_free(HEAP32[i20 + 16 >> 2] | 0);
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 16 >> 2] = HEAP32[i10 >> 2];
      break L134;
     } else {
      _vim_free(HEAP32[i20 + 20 >> 2] | 0);
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 20 >> 2] = HEAP32[i10 >> 2];
      break L134;
     }
    } while (0);
    if (HEAP32[i8 >> 2] | 0) if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] & 2 | 0) break;
    if (!(HEAP32[i8 >> 2] | 0)) {
     i20 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
     HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 2;
    }
    do if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + 5 >> 0] | 0) == 70) {
     if (!(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 32 >> 2] | 0)) break;
     i20 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 28 | 0;
     HEAP32[i20 >> 2] = HEAP32[i20 >> 2] & -3;
     HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 32 >> 2] = 0;
    } while (0);
    i20 = HEAP32[i15 >> 2] | 0;
    do if (((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i28 >> 2] = _atoi(i20) | 0; else {
     if (!(_strcasecmp(i20, 76657) | 0)) {
      if (!(HEAP32[26741] | 0)) {
       i4 = 144;
       break L101;
      }
      HEAP32[i28 >> 2] = (HEAP32[26741] | 0) - 1;
      break;
     }
     if (!(_strcasecmp(HEAP32[i15 >> 2] | 0, 76683) | 0)) {
      if ((HEAP32[26743] | 0) <= 0) {
       i4 = 148;
       break L101;
      }
      HEAP32[i28 >> 2] = (HEAP32[26743] | 0) - 1;
      break;
     }
     HEAP32[i38 >> 2] = 2;
     do if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) < 97) i4 = 151; else {
      if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) > 122) {
       i4 = 151;
       break;
      }
      i45 = (HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) - 32 | 0;
     } while (0);
     if ((i4 | 0) == 151) {
      i4 = 0;
      i45 = HEAPU8[HEAP32[i15 >> 2] >> 0] | 0;
     }
     HEAP32[i17 >> 2] = i45;
     HEAP32[i16 >> 2] = 28;
     while (1) {
      i7 = (HEAP32[i16 >> 2] | 0) + -1 | 0;
      HEAP32[i16 >> 2] = i7;
      if ((i7 | 0) < 0) break;
      if ((HEAP32[i17 >> 2] | 0) == (HEAP8[HEAP32[30380 + (HEAP32[i16 >> 2] << 2) >> 2] >> 0] | 0)) if (!(_strcasecmp((HEAP32[i15 >> 2] | 0) + 1 | 0, (HEAP32[30380 + (HEAP32[i16 >> 2] << 2) >> 2] | 0) + 1 | 0) | 0)) break;
     }
     if ((HEAP32[i16 >> 2] | 0) < 0) {
      i4 = 159;
      break L101;
     }
     HEAP32[i28 >> 2] = _lookup_color(HEAP32[i16 >> 2] | 0, (HEAPU8[(HEAP32[i14 >> 2] | 0) + 5 >> 0] | 0) == 70 & 1, i38) | 0;
     if ((HEAP32[i38 >> 2] | 0) == 1) {
      i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 28 | 0;
      HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
      HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 32 >> 2] = 1;
      break;
     }
     if (HEAP32[i38 >> 2] | 0) break;
     i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 28 | 0;
     HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -3;
    } while (0);
    i20 = (HEAP32[i28 >> 2] | 0) + 1 | 0;
    i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) | 0;
    if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + 5 >> 0] | 0) == 70) {
     HEAP32[i7 + 36 >> 2] = i20;
     if (!(HEAP32[i29 >> 2] | 0)) break;
     HEAP32[26741] = (HEAP32[i28 >> 2] | 0) + 1;
     HEAP32[26742] = HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 28 >> 2] & 2;
     if ((HEAP32[26627] | 0) != 0 | (HEAP32[26628] | 0) != 0) break;
     HEAP32[26828] = 50;
     if (!((HEAP32[26835] | 0) != 0 & (HEAP32[i28 >> 2] | 0) >= 0)) break;
     _term_fg_color(HEAP32[i28 >> 2] | 0);
     break;
    }
    HEAP32[i7 + 40 >> 2] = i20;
    if (!(HEAP32[i29 >> 2] | 0)) break;
    HEAP32[26743] = (HEAP32[i28 >> 2] | 0) + 1;
    if ((HEAP32[26627] | 0) != 0 | (HEAP32[26628] | 0) != 0) break;
    HEAP32[26828] = 50;
    if ((HEAP32[i28 >> 2] | 0) < 0) break;
    HEAP32[i39 >> 2] = -1;
    if (HEAP32[26835] | 0) _term_bg_color(HEAP32[i28 >> 2] | 0);
    i20 = HEAP32[i28 >> 2] | 0;
    do if ((HEAP32[26734] | 0) < 16) HEAP32[i39 >> 2] = ((i20 | 0) == 0 ? 1 : (HEAP32[i28 >> 2] | 0) == 4) & 1; else {
     if ((i20 | 0) >= 16) break;
     i7 = HEAP32[i28 >> 2] | 0;
     HEAP32[i39 >> 2] = ((i7 | 0) < 7 ? 1 : (i7 | 0) == 8) & 1;
    } while (0);
    if ((HEAP32[i39 >> 2] | 0) == -1) break;
    if ((HEAP32[i39 >> 2] | 0) == ((HEAPU8[HEAP32[26893] >> 0] | 0) == 100 | 0)) break;
    if (_option_was_set(76683) | 0) break;
    _set_option_value(76683, 0, HEAP32[i39 >> 2] | 0 ? 76755 : 76760, 0) | 0;
    _reset_option_was_set(76683);
   } while (0);
   do if ((i4 | 0) == 92) {
    i4 = 0;
    HEAP32[i19 >> 2] = 0;
    HEAP32[i17 >> 2] = 0;
    while (1) {
     if (!(HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] | 0)) break;
     HEAP32[i16 >> 2] = 10;
     while (1) {
      i20 = (HEAP32[i16 >> 2] | 0) + -1 | 0;
      HEAP32[i16 >> 2] = i20;
      if ((i20 | 0) < 0) break;
      HEAP32[i18 >> 2] = _strlen(HEAP32[30300 + (HEAP32[i16 >> 2] << 2) >> 2] | 0) | 0;
      if (!(_strncasecmp((HEAP32[i15 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0, HEAP32[30300 + (HEAP32[i16 >> 2] << 2) >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0)) {
       i4 = 97;
       break;
      }
     }
     if ((i4 | 0) == 97) {
      i4 = 0;
      HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | HEAP32[30340 + (HEAP32[i16 >> 2] << 2) >> 2];
      HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
     }
     i46 = HEAP32[i15 >> 2] | 0;
     if ((HEAP32[i16 >> 2] | 0) < 0) {
      i4 = 100;
      break;
     }
     if ((HEAPU8[i46 + (HEAP32[i17 >> 2] | 0) >> 0] | 0) == 44) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
    }
    if ((i4 | 0) == 100) {
     i4 = 0;
     _emsg2(76612, i46) | 0;
     HEAP32[i27 >> 2] = 1;
    }
    if (HEAP32[i27 >> 2] | 0) break L99;
    if ((HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) == 84) {
     if (HEAP32[i8 >> 2] | 0) if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] & 1 | 0) break;
     if (!(HEAP32[i8 >> 2] | 0)) {
      i20 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
      HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 1;
     }
     HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 12 >> 2] = HEAP32[i19 >> 2];
     break;
    }
    i20 = (HEAP32[i8 >> 2] | 0) != 0;
    if ((HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) == 67) {
     if (i20) if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] & 2 | 0) break;
     if (!(HEAP32[i8 >> 2] | 0)) {
      i7 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
      HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
     }
     HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 28 >> 2] = HEAP32[i19 >> 2];
     HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 32 >> 2] = 0;
     break;
    } else {
     if (i20) if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] & 4 | 0) break;
     if (!(HEAP32[i8 >> 2] | 0)) {
      i20 = (HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 | 0;
      HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 4;
     }
     HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 72 >> 2] = HEAP32[i19 >> 2];
     break;
    }
   } while (0);
   HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 8 >> 2] = 0;
   if (HEAP32[i8 >> 2] | 0) {
    if (!(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 92 >> 2] & 8)) i4 = 259;
   } else i4 = 259;
   if ((i4 | 0) == 259) {
    i4 = 0;
    HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 88 >> 2] = 0;
   }
   HEAP32[i11 >> 2] = _skipwhite(HEAP32[i11 >> 2] | 0) | 0;
  }
  switch (i4 | 0) {
  case 61:
   {
    _emsg2(76514, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 69:
   {
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 78:
   {
    _emsg2(76546, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 81:
   {
    _emsg2(92476, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 84:
   {
    _emsg2(76575, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 86:
   {
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 144:
   {
    _emsg(76660) | 0;
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 148:
   {
    _emsg(76686) | 0;
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 159:
   {
    _emsg2(76709, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  case 256:
   {
    _emsg2(76831, HEAP32[i12 >> 2] | 0) | 0;
    HEAP32[i27 >> 2] = 1;
    break L99;
    break;
   }
  }
 } while (0);
 if (HEAP32[i27 >> 2] | 0) if ((HEAP32[i21 >> 2] | 0) == (HEAP32[26486] | 0)) _syn_unadd_group(); else i4 = 264; else i4 = 264;
 do if ((i4 | 0) == 264) {
  if (!(HEAP32[i29 >> 2] | 0)) {
   _set_hl_attr(HEAP32[i21 >> 2] | 0);
   break;
  }
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 24 >> 2] = 0;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 44 >> 2] = 0;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) + 68 >> 2] = 0;
  if (HEAP32[26627] | 0) {
   _highlight_gui_started();
   HEAP32[i30 >> 2] = 1;
   _redraw_all_later(40);
  }
 } while (0);
 _vim_free(HEAP32[i14 >> 2] | 0);
 _vim_free(HEAP32[i15 >> 2] | 0);
 if (HEAP32[i23 >> 2] | 0) {
  if (HEAP32[i30 >> 2] | 0) {
   STACKTOP = i5;
   return;
  }
 } else {
  i23 = (_memcmp((HEAP32[26490] | 0) + ((HEAP32[i21 >> 2] | 0) * 96 | 0) | 0, i22, 96) | 0) == 0;
  if (i23 | (HEAP32[i30 >> 2] | 0) != 0) {
   STACKTOP = i5;
   return;
  }
 }
 if (!(HEAP32[26758] | 0)) _redraw_all_later(40);
 HEAP32[10183] = 1;
 STACKTOP = i5;
 return;
}

function _find_tags(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 3184 | 0;
 i9 = i8 + 8 | 0;
 i10 = i8;
 i11 = i8 + 3180 | 0;
 i12 = i8 + 3176 | 0;
 i13 = i8 + 3172 | 0;
 i14 = i8 + 3168 | 0;
 i15 = i8 + 3164 | 0;
 i16 = i8 + 3160 | 0;
 i17 = i8 + 3156 | 0;
 i18 = i8 + 3152 | 0;
 i19 = i8 + 3148 | 0;
 i20 = i8 + 3144 | 0;
 i21 = i8 + 3124 | 0;
 i22 = i8 + 3120 | 0;
 i23 = i8 + 3084 | 0;
 i24 = i8 + 3080 | 0;
 i25 = i8 + 3076 | 0;
 i26 = i8 + 3072 | 0;
 i27 = i8 + 3068 | 0;
 i28 = i8 + 3064 | 0;
 i29 = i8 + 3060 | 0;
 i30 = i8 + 3056 | 0;
 i31 = i8 + 3052 | 0;
 i32 = i8 + 3048 | 0;
 i33 = i8 + 3044 | 0;
 i34 = i8 + 3016 | 0;
 i35 = i8 + 3012 | 0;
 i36 = i8 + 3008 | 0;
 i37 = i8 + 3004 | 0;
 i38 = i8 + 3e3 | 0;
 i39 = i8 + 2996 | 0;
 i40 = i8 + 2992 | 0;
 i41 = i8 + 2988 | 0;
 i42 = i8 + 2984 | 0;
 i43 = i8 + 2980 | 0;
 i44 = i8 + 2976 | 0;
 i45 = i8 + 2972 | 0;
 i46 = i8 + 2968 | 0;
 i47 = i8 + 2648 | 0;
 i48 = i8 + 216 | 0;
 i49 = i8 + 208 | 0;
 i50 = i8 + 204 | 0;
 i51 = i8 + 200 | 0;
 i52 = i8 + 196 | 0;
 i53 = i8 + 192 | 0;
 i54 = i8 + 88 | 0;
 i55 = i8 + 80 | 0;
 i56 = i8 + 76 | 0;
 i57 = i8 + 72 | 0;
 i58 = i8 + 68 | 0;
 i59 = i8 + 64 | 0;
 i60 = i8 + 60 | 0;
 i61 = i8 + 56 | 0;
 i62 = i8 + 52 | 0;
 i63 = i8 + 48 | 0;
 i64 = i8 + 44 | 0;
 i65 = i8 + 40 | 0;
 i66 = i8 + 36 | 0;
 i67 = i8 + 32 | 0;
 i68 = i8 + 28 | 0;
 i69 = i8 + 24 | 0;
 i70 = i8 + 20 | 0;
 i71 = i8 + 16 | 0;
 i72 = i8 + 12 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i19 >> 2] = 512;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i29 >> 2] = 0;
 HEAP32[i33 >> 2] = 0;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i44 >> 2] = 0;
 HEAP32[i49 >> 2] = 0;
 HEAP32[i50 >> 2] = 0;
 i6 = HEAP32[i15 >> 2] | 0;
 HEAP32[i55 >> 2] = ((i6 | 0) == 2147483647 ? 1 : (i6 | 0) == 300) & 1;
 HEAP32[i56 >> 2] = 0;
 HEAP32[i58 >> 2] = 0;
 HEAP32[i59 >> 2] = 0;
 HEAP32[i60 >> 2] = HEAP32[i14 >> 2] & 4;
 HEAP32[i61 >> 2] = HEAP32[i14 >> 2] & 1;
 HEAP32[i62 >> 2] = HEAP32[i14 >> 2] & 2;
 HEAP32[i63 >> 2] = HEAP32[i14 >> 2] & 8;
 HEAP32[i64 >> 2] = 0;
 HEAP32[i65 >> 2] = HEAP32[i14 >> 2] & 32;
 HEAP32[i66 >> 2] = HEAP32[26933];
 if (HEAP32[(HEAP32[26773] | 0) + 752 >> 2] | 0) i73 = HEAP32[(HEAP32[26773] | 0) + 752 >> 2] | 0; else i73 = HEAP32[27003] | 0;
 i14 = i73 - 2 | 0;
 switch (i14 >>> 1 | i14 << 31 | 0) {
 case 7:
  {
   HEAP32[26933] = _ignorecase_opt(HEAP32[i11 >> 2] | 0, 1, 1) | 0;
   break;
  }
 case 0:
  {
   HEAP32[26933] = 1;
   break;
  }
 case 1:
  {
   HEAP32[26933] = 0;
   break;
  }
 case 3:
  {
   HEAP32[26933] = _ignorecase(HEAP32[i11 >> 2] | 0) | 0;
   break;
  }
 default:
  {}
 }
 HEAP32[i53 >> 2] = HEAP32[(HEAP32[26773] | 0) + 780 >> 2];
 HEAP32[i54 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i18 >> 2] = _alloc(HEAP32[i19 >> 2] | 0) | 0;
 HEAP32[i20 >> 2] = _alloc(4097) | 0;
 HEAP32[i52 >> 2] = 0;
 while (1) {
  if ((HEAP32[i52 >> 2] | 0) >= 16) break;
  _ga_init2(i47 + ((HEAP32[i52 >> 2] | 0) * 20 | 0) | 0, 4, 100);
  _hash_init(i48 + ((HEAP32[i52 >> 2] | 0) * 152 | 0) | 0);
  HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
 }
 do if (!((HEAP32[i18 >> 2] | 0) == 0 | (HEAP32[i20 >> 2] | 0) == 0)) {
  if (HEAP32[i61 >> 2] | 0) HEAP32[(HEAP32[26773] | 0) + 780 >> 2] = 1;
  HEAP32[i54 + 4 >> 2] = _strlen(HEAP32[i11 >> 2] | 0) | 0;
  if (HEAP32[27004] | 0) if ((HEAP32[i54 + 4 >> 2] | 0) > (HEAP32[27004] | 0)) HEAP32[i54 + 4 >> 2] = HEAP32[27004];
  HEAP32[i45 >> 2] = HEAP32[26714];
  HEAP32[26714] = 1;
  _prepare_pats(i54, HEAP32[i60 >> 2] | 0);
  HEAP32[26714] = HEAP32[i45 >> 2];
  if (HEAP32[i60 >> 2] | 0) if (!(HEAP32[i54 + 16 >> 2] | 0)) break;
  HEAP8[i34 >> 0] = 0;
  if ((HEAP32[26933] | 0) == 0 & (HEAP32[i63 >> 2] | 0) != 0) i74 = 0; else if (HEAP32[i55 >> 2] | 0) i74 = 1; else if (!(HEAP32[i54 + 12 >> 2] | 0)) i74 = 1; else i74 = (HEAP32[27001] | 0) != 0 ^ 1;
  HEAP32[i54 + 16 + 84 >> 2] = i74 & 1;
  HEAP32[i38 >> 2] = 1;
  while (1) {
   if ((HEAP32[i38 >> 2] | 0) > 2) break;
   if ((HEAP32[i54 + 12 >> 2] | 0) != 0 & (HEAP32[27001] | 0) != 0) i75 = (HEAP32[i38 >> 2] | 0) == 2; else i75 = 1;
   HEAP32[i57 >> 2] = i75 & 1;
   HEAP32[i22 >> 2] = 1;
   while (1) {
    if ((_get_tagfname(i21, HEAP32[i22 >> 2] | 0, HEAP32[i20 >> 2] | 0) | 0) != 1) break;
    i19 = _fopen(HEAP32[i20 >> 2] | 0, 94911) | 0;
    HEAP32[i17 >> 2] = i19;
    if (i19 | 0) {
     if ((HEAP32[26888] | 0) >= 5) {
      _verbose_enter();
      HEAP32[i10 >> 2] = HEAP32[i20 >> 2];
      _smsg(78545, i10) | 0;
      _verbose_leave();
     }
     HEAP32[i24 >> 2] = 1;
     HEAP32[i39 >> 2] = 0;
     L46 : while (1) {
      if ((HEAP32[i39 >> 2] | 0) == 2 | (HEAP32[i39 >> 2] | 0) == 3) _line_breakcheck(); else _fast_breakcheck();
      if (HEAP32[26834] | 0) {
       i7 = 38;
       break;
      }
      if ((HEAP32[i15 >> 2] | 0) == 300 & (HEAP32[i50 >> 2] | 0) >= 300) {
       i7 = 40;
       break;
      }
      do if (!(HEAP32[i64 >> 2] | 0)) {
       do if ((HEAP32[i39 >> 2] | 0) == 2) {
        i19 = HEAP32[i34 >> 2] | 0;
        HEAP32[i37 >> 2] = (i19 | 0) + (((HEAP32[i34 + 4 >> 2] | 0) - i19 | 0) / 2 | 0);
        if ((HEAP32[i37 >> 2] | 0) == (HEAP32[i34 + 8 >> 2] | 0)) break L46;
        HEAP32[i34 + 8 >> 2] = HEAP32[i37 >> 2];
       } else {
        if ((HEAP32[i39 >> 2] | 0) != 3) break;
        i19 = i34 + 8 | 0;
        HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) - 1024;
        if ((HEAP32[i34 + 8 >> 2] | 0) >= 0) break;
        HEAP32[i34 + 8 >> 2] = 0;
        _rewind(HEAP32[i17 >> 2] | 0);
        HEAP32[i39 >> 2] = 4;
       } while (0);
       if (!((HEAP32[i39 >> 2] | 0) == 2 | (HEAP32[i39 >> 2] | 0) == 3)) {
        do {
         HEAP32[i29 >> 2] = _vim_fgets(HEAP32[i18 >> 2] | 0, 512, HEAP32[i17 >> 2] | 0) | 0;
         if (HEAP32[i29 >> 2] | 0) break;
        } while ((_vim_isblankline(HEAP32[i18 >> 2] | 0) | 0) != 0);
        if (HEAP32[i29 >> 2] | 0) break L46; else break;
       }
       HEAP32[i34 + 12 >> 2] = HEAP32[i34 + 8 >> 2];
       ___fseeko(HEAP32[i17 >> 2] | 0, HEAP32[i34 + 8 >> 2] | 0, 0) | 0;
       HEAP32[i29 >> 2] = _vim_fgets(HEAP32[i18 >> 2] | 0, 512, HEAP32[i17 >> 2] | 0) | 0;
       do if (!(HEAP32[i29 >> 2] | 0)) {
        if (!(HEAP32[i34 + 8 >> 2] | 0)) break;
        HEAP32[i34 + 8 >> 2] = ___ftello(HEAP32[i17 >> 2] | 0) | 0;
        if ((HEAP32[i34 + 8 >> 2] | 0) == (HEAP32[i34 + 4 >> 2] | 0)) {
         ___fseeko(HEAP32[i17 >> 2] | 0, HEAP32[i34 >> 2] | 0, 0) | 0;
         HEAP32[i34 + 8 >> 2] = HEAP32[i34 >> 2];
        }
        HEAP32[i29 >> 2] = _vim_fgets(HEAP32[i18 >> 2] | 0, 512, HEAP32[i17 >> 2] | 0) | 0;
       } while (0);
       while (1) {
        if (HEAP32[i29 >> 2] | 0) break;
        if (!(_vim_isblankline(HEAP32[i18 >> 2] | 0) | 0)) break;
        HEAP32[i34 + 8 >> 2] = ___ftello(HEAP32[i17 >> 2] | 0) | 0;
        HEAP32[i29 >> 2] = _vim_fgets(HEAP32[i18 >> 2] | 0, 512, HEAP32[i17 >> 2] | 0) | 0;
       }
       if (!(HEAP32[i29 >> 2] | 0)) break;
       HEAP32[i39 >> 2] = 3;
       HEAP32[i34 + 16 >> 2] = ___ftello(HEAP32[i17 >> 2] | 0) | 0;
       HEAP32[i34 + 8 >> 2] = HEAP32[i34 + 12 >> 2];
       continue L46;
      } while (0);
      L84 : do if (!(HEAP32[i39 >> 2] | 0)) {
       do if ((_strncmp(HEAP32[i18 >> 2] | 0, 78568, 6) | 0) > 0) {
        if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) == 33) if (((HEAPU8[(HEAP32[i18 >> 2] | 0) + 1 >> 0] | 0) - 97 | 0) >>> 0 < 26) break;
        do if (HEAP32[i57 >> 2] | 0) HEAP32[i39 >> 2] = 1; else {
         if (!(HEAP32[i33 >> 2] | 0)) {
          HEAP32[i39 >> 2] = 2;
          break;
         }
         if ((HEAP32[i33 >> 2] | 0) == 49) {
          HEAP32[i39 >> 2] = 2;
          break;
         }
         if ((HEAP32[i33 >> 2] | 0) != 50) {
          HEAP32[i39 >> 2] = 1;
          break;
         }
         HEAP32[i39 >> 2] = 2;
         HEAP32[i58 >> 2] = 1;
         if (HEAP32[26933] | 0) i76 = 1; else i76 = (HEAP32[i63 >> 2] | 0) != 0 ^ 1;
         HEAP32[i54 + 16 + 84 >> 2] = i76 & 1;
        } while (0);
        do if ((HEAP32[i39 >> 2] | 0) == 2) {
         if (HEAP32[i58 >> 2] | 0 ? 1 : (HEAP32[i54 + 16 + 84 >> 2] | 0) == 0) break;
         HEAP32[i57 >> 2] = 1;
         HEAP32[i39 >> 2] = 1;
        } while (0);
        if ((HEAP32[i39 >> 2] | 0) != 2) break L84;
        i19 = _lseek(_fileno(HEAP32[i17 >> 2] | 0) | 0, 0, 2) | 0;
        HEAP32[i35 >> 2] = i19;
        if ((i19 | 0) <= 0) HEAP32[i39 >> 2] = 1; else {
         _lseek(_fileno(HEAP32[i17 >> 2] | 0) | 0, 0, 0) | 0;
         HEAP32[i34 >> 2] = 0;
         HEAP32[i34 + 20 >> 2] = 0;
         HEAP32[i34 + 4 >> 2] = HEAP32[i35 >> 2];
         HEAP32[i34 + 8 >> 2] = 0;
         HEAP32[i34 + 24 >> 2] = 255;
        }
        continue L46;
       } while (0);
       if (_strncmp(HEAP32[i18 >> 2] | 0, 78568, 6) | 0) break;
       if (!(_strncmp(HEAP32[i18 >> 2] | 0, 78575, 18) | 0)) HEAP32[i33 >> 2] = HEAPU8[(HEAP32[i18 >> 2] | 0) + 18 >> 0];
       continue L46;
      } while (0);
      do if (HEAP32[i54 + 12 >> 2] | 0) {
       i19 = i23;
       i14 = i19 + 36 | 0;
       do {
        HEAP32[i19 >> 2] = 0;
        i19 = i19 + 4 | 0;
       } while ((i19 | 0) < (i14 | 0));
       HEAP32[i23 >> 2] = HEAP32[i18 >> 2];
       HEAP32[i23 + 4 >> 2] = _vim_strchr(HEAP32[i18 >> 2] | 0, 9) | 0;
       if (!(HEAP32[i23 + 4 >> 2] | 0)) {
        if (_vim_strchr(HEAP32[i18 >> 2] | 0, 10) | 0) {
         i7 = 99;
         break L46;
        }
        if ((HEAP32[26888] | 0) >= 5) {
         _verbose_enter();
         _msg(78594) | 0;
         _verbose_leave();
        }
        if ((HEAP32[i39 >> 2] | 0) != 1) {
         HEAP32[i57 >> 2] = 1;
         HEAP32[i39 >> 2] = 1;
         ___fseeko(HEAP32[i17 >> 2] | 0, HEAP32[i34 >> 2] | 0, 0) | 0;
        }
        continue L46;
       }
       HEAP32[i40 >> 2] = (HEAP32[i23 + 4 >> 2] | 0) - (HEAP32[i23 >> 2] | 0);
       do if (HEAP32[27004] | 0) {
        if ((HEAP32[i40 >> 2] | 0) <= (HEAP32[27004] | 0)) break;
        HEAP32[i40 >> 2] = HEAP32[27004];
       } while (0);
       do if (HEAP32[i60 >> 2] | 0) {
        if ((HEAP32[i54 + 12 >> 2] | 0) >= (HEAP32[i40 >> 2] | 0)) {
         i7 = 106;
         break;
        }
        HEAP32[i40 >> 2] = HEAP32[i54 + 12 >> 2];
       } else i7 = 106; while (0);
       do if ((i7 | 0) == 106) {
        i7 = 0;
        if ((HEAP32[i39 >> 2] | 0) != 1) break;
        if ((HEAP32[i54 + 12 >> 2] | 0) == (HEAP32[i40 >> 2] | 0)) break;
        continue L46;
       } while (0);
       if ((HEAP32[i39 >> 2] | 0) != 2) {
        if ((HEAP32[i39 >> 2] | 0) == 3) {
         if (_strncasecmp(HEAP32[i23 >> 2] | 0, HEAP32[i54 + 8 >> 2] | 0, HEAP32[i40 >> 2] | 0) | 0) HEAP32[i39 >> 2] = 4; else HEAP32[i34 + 8 >> 2] = HEAP32[i34 + 12 >> 2];
         continue L46;
        }
        i19 = (HEAP32[i39 >> 2] | 0) == 4;
        i14 = (_strncasecmp(HEAP32[i23 >> 2] | 0, HEAP32[i54 + 8 >> 2] | 0, HEAP32[i40 >> 2] | 0) | 0) != 0;
        do if (i19) {
         if (!i14) break;
         i73 = ___ftello(HEAP32[i17 >> 2] | 0) | 0;
         if ((i73 | 0) > (HEAP32[i34 + 16 >> 2] | 0)) break L46;
         continue L46;
        } else {
         if (!i14) break;
         continue L46;
        } while (0);
        HEAP32[i23 + 8 >> 2] = (HEAP32[i23 + 4 >> 2] | 0) + 1;
        HEAP32[i23 + 12 >> 2] = _vim_strchr(HEAP32[i23 + 8 >> 2] | 0, 9) | 0;
        HEAP32[i23 + 16 >> 2] = (HEAP32[i23 + 12 >> 2] | 0) + 1;
        if (!(HEAP32[i23 + 12 >> 2] | 0)) {
         HEAP32[i32 >> 2] = 0;
         break;
        } else {
         HEAP32[i32 >> 2] = 1;
         break;
        }
       }
       HEAP32[i32 >> 2] = HEAPU8[HEAP32[i23 >> 2] >> 0];
       if (HEAP32[i58 >> 2] | 0) {
        do if ((HEAPU8[HEAP32[i23 >> 2] >> 0] | 0) < 97) i7 = 113; else {
         if ((HEAPU8[HEAP32[i23 >> 2] >> 0] | 0) > 122) {
          i7 = 113;
          break;
         }
         i77 = (HEAPU8[HEAP32[i23 >> 2] >> 0] | 0) - 32 | 0;
        } while (0);
        if ((i7 | 0) == 113) {
         i7 = 0;
         i77 = HEAPU8[HEAP32[i23 >> 2] >> 0] | 0;
        }
        HEAP32[i32 >> 2] = i77;
       }
       if ((HEAP32[i32 >> 2] | 0) < (HEAP32[i34 + 20 >> 2] | 0)) i7 = 118; else if ((HEAP32[i32 >> 2] | 0) > (HEAP32[i34 + 24 >> 2] | 0)) i7 = 118;
       if ((i7 | 0) == 118) {
        i7 = 0;
        HEAP32[i56 >> 2] = 1;
       }
       i14 = HEAP32[i23 >> 2] | 0;
       i19 = HEAP32[i54 + 8 >> 2] | 0;
       i73 = HEAP32[i40 >> 2] | 0;
       if (HEAP32[i58 >> 2] | 0) HEAP32[i36 >> 2] = _tag_strnicmp(i14, i19, i73) | 0; else HEAP32[i36 >> 2] = _strncmp(i14, i19, i73) | 0;
       do if (!(HEAP32[i36 >> 2] | 0)) {
        if ((HEAP32[i40 >> 2] | 0) < (HEAP32[i54 + 12 >> 2] | 0)) {
         HEAP32[i36 >> 2] = -1;
         break;
        }
        if ((HEAP32[i40 >> 2] | 0) <= (HEAP32[i54 + 12 >> 2] | 0)) break;
        HEAP32[i36 >> 2] = 1;
       } while (0);
       if (!(HEAP32[i36 >> 2] | 0)) {
        HEAP32[i39 >> 2] = 3;
        HEAP32[i34 + 16 >> 2] = HEAP32[i34 + 8 >> 2];
        continue L46;
       }
       do if ((HEAP32[i36 >> 2] | 0) < 0) {
        HEAP32[i34 + 8 >> 2] = ___ftello(HEAP32[i17 >> 2] | 0) | 0;
        if ((HEAP32[i34 + 8 >> 2] | 0) >= (HEAP32[i34 + 4 >> 2] | 0)) break;
        HEAP32[i34 >> 2] = HEAP32[i34 + 8 >> 2];
        i73 = HEAPU8[HEAP32[i23 >> 2] >> 0] | 0;
        if (HEAP32[i58 >> 2] | 0) {
         do if ((i73 | 0) < 97) i7 = 134; else {
          if ((HEAPU8[HEAP32[i23 >> 2] >> 0] | 0) > 122) {
           i7 = 134;
           break;
          }
          i78 = (HEAPU8[HEAP32[i23 >> 2] >> 0] | 0) - 32 | 0;
         } while (0);
         if ((i7 | 0) == 134) {
          i7 = 0;
          i78 = HEAPU8[HEAP32[i23 >> 2] >> 0] | 0;
         }
         HEAP32[i34 + 20 >> 2] = i78;
        } else HEAP32[i34 + 20 >> 2] = i73;
        continue L46;
       } while (0);
       if ((HEAP32[i36 >> 2] | 0) <= 0) break L46;
       if ((HEAP32[i34 + 8 >> 2] | 0) == (HEAP32[i34 + 4 >> 2] | 0)) break L46;
       HEAP32[i34 + 4 >> 2] = HEAP32[i34 + 8 >> 2];
       i19 = HEAPU8[HEAP32[i23 >> 2] >> 0] | 0;
       if (HEAP32[i58 >> 2] | 0) {
        do if ((i19 | 0) < 97) i7 = 144; else {
         if ((HEAPU8[HEAP32[i23 >> 2] >> 0] | 0) > 122) {
          i7 = 144;
          break;
         }
         i79 = (HEAPU8[HEAP32[i23 >> 2] >> 0] | 0) - 32 | 0;
        } while (0);
        if ((i7 | 0) == 144) {
         i7 = 0;
         i79 = HEAPU8[HEAP32[i23 >> 2] >> 0] | 0;
        }
        HEAP32[i34 + 24 >> 2] = i79;
       } else HEAP32[i34 + 24 >> 2] = i19;
       continue L46;
      } else HEAP32[i32 >> 2] = _parse_tag_line(HEAP32[i18 >> 2] | 0, i23) | 0; while (0);
      if (!(HEAP32[i32 >> 2] | 0)) {
       i7 = 165;
       break;
      }
      HEAP32[i40 >> 2] = (HEAP32[i23 + 4 >> 2] | 0) - (HEAP32[i23 >> 2] | 0);
      do if (HEAP32[27004] | 0) {
       if ((HEAP32[i40 >> 2] | 0) <= (HEAP32[27004] | 0)) break;
       HEAP32[i40 >> 2] = HEAP32[27004];
      } while (0);
      do if ((HEAP32[i54 + 4 >> 2] | 0) != (HEAP32[i40 >> 2] | 0)) HEAP32[i41 >> 2] = 0; else {
       i14 = HEAP32[i23 >> 2] | 0;
       i6 = HEAP32[i54 >> 2] | 0;
       i5 = HEAP32[i40 >> 2] | 0;
       if (!(HEAP32[i54 + 16 + 84 >> 2] | 0)) {
        HEAP32[i41 >> 2] = (_strncmp(i14, i6, i5) | 0) == 0 & 1;
        break;
       }
       HEAP32[i41 >> 2] = (_strncasecmp(i14, i6, i5) | 0) == 0 & 1;
       if (!(HEAP32[i41 >> 2] | 0)) break;
       HEAP32[i42 >> 2] = (_strncmp(HEAP32[i23 >> 2] | 0, HEAP32[i54 >> 2] | 0, HEAP32[i40 >> 2] | 0) | 0) == 0 & 1;
      } while (0);
      HEAP32[i43 >> 2] = 0;
      do if (!(HEAP32[i41 >> 2] | 0)) {
       if (!(HEAP32[i54 + 16 >> 2] | 0)) break;
       HEAP32[i67 >> 2] = HEAPU8[HEAP32[i23 + 4 >> 2] >> 0];
       HEAP8[HEAP32[i23 + 4 >> 2] >> 0] = 0;
       HEAP32[i41 >> 2] = _vim_regexec(i54 + 16 | 0, HEAP32[i23 >> 2] | 0, 0) | 0;
       do if (HEAP32[i41 >> 2] | 0) {
        HEAP32[i44 >> 2] = (HEAP32[i54 + 16 + 4 >> 2] | 0) - (HEAP32[i23 >> 2] | 0);
        if (!(HEAP32[i54 + 16 + 84 >> 2] | 0)) break;
        i5 = i54 + 16 + 84 | 0;
        HEAP32[i5 >> 2] = 0;
        HEAP32[i42 >> 2] = _vim_regexec(i54 + 16 | 0, HEAP32[i23 >> 2] | 0, 0) | 0;
        HEAP32[i5 >> 2] = 1;
       } while (0);
       HEAP8[HEAP32[i23 + 4 >> 2] >> 0] = HEAP32[i67 >> 2];
       HEAP32[i43 >> 2] = 1;
      } while (0);
      L243 : do if (HEAP32[i41 >> 2] | 0) {
       HEAP32[i68 >> 2] = 0;
       HEAP32[i28 >> 2] = _test_for_current(HEAP32[i23 + 8 >> 2] | 0, HEAP32[i23 + 12 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
       HEAP32[i27 >> 2] = _test_for_static(i23) | 0;
       i19 = (HEAP32[i28 >> 2] | 0) != 0;
       do if (HEAP32[i27 >> 2] | 0) if (i19) {
        HEAP32[i52 >> 2] = 0;
        break;
       } else {
        HEAP32[i52 >> 2] = 3;
        break;
       } else if (i19) {
        HEAP32[i52 >> 2] = 1;
        break;
       } else {
        HEAP32[i52 >> 2] = 2;
        break;
       } while (0);
       if (!(HEAP32[i42 >> 2] | 0 ? 1 : (HEAP32[i54 + 16 + 84 >> 2] | 0) == 0)) HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 4;
       if (HEAP32[i43 >> 2] | 0) HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 8;
       do if (HEAP32[i61 >> 2] | 0) {
        HEAP8[HEAP32[i23 + 4 >> 2] >> 0] = 0;
        HEAP32[i68 >> 2] = (HEAP32[i23 + 4 >> 2] | 0) - (HEAP32[i23 >> 2] | 0);
        HEAP32[i46 >> 2] = _alloc(1 + (HEAP32[i68 >> 2] | 0) + 10 + 0 + 1 | 0) | 0;
        if (HEAP32[i46 >> 2] | 0) {
         HEAP32[i30 >> 2] = HEAP32[i46 >> 2];
         _strcpy(HEAP32[i30 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0;
         HEAP32[i69 >> 2] = _help_heuristic(HEAP32[i23 >> 2] | 0, HEAP32[i43 >> 2] | 0 ? HEAP32[i44 >> 2] | 0 : 0, ((HEAP32[i42 >> 2] | 0) != 0 ^ 1) & 1) | 0;
         i19 = (HEAP32[i30 >> 2] | 0) + (HEAP32[i68 >> 2] | 0) + 1 | 0;
         HEAP32[i9 >> 2] = HEAP32[i69 >> 2];
         _sprintf(i19, 78626, i9) | 0;
        }
        HEAP8[HEAP32[i23 + 4 >> 2] >> 0] = 9;
       } else {
        if (!(HEAP32[i62 >> 2] | 0)) {
         HEAP32[i71 >> 2] = _strlen(HEAP32[i20 >> 2] | 0) | 0;
         i19 = HEAP32[i71 >> 2] | 0;
         HEAP32[i68 >> 2] = i19 + (_strlen(HEAP32[i18 >> 2] | 0) | 0) + 3;
         HEAP32[i46 >> 2] = _alloc(1 + (HEAP32[i68 >> 2] | 0) + 1 | 0) | 0;
         if (!(HEAP32[i46 >> 2] | 0)) break;
         HEAP32[i30 >> 2] = HEAP32[i46 >> 2];
         HEAP8[HEAP32[i30 >> 2] >> 0] = (HEAP32[i52 >> 2] | 0) + 1;
         _strcpy((HEAP32[i30 >> 2] | 0) + 1 | 0, HEAP32[i20 >> 2] | 0) | 0;
         HEAP8[(HEAP32[i30 >> 2] | 0) + ((HEAP32[i71 >> 2] | 0) + 1) >> 0] = 2;
         HEAP32[i31 >> 2] = (HEAP32[i30 >> 2] | 0) + 1 + (HEAP32[i71 >> 2] | 0) + 1;
         _strcpy(HEAP32[i31 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0;
         break;
        }
        if (!(HEAP32[i64 >> 2] | 0)) {
         HEAP32[i68 >> 2] = (HEAP32[i23 + 4 >> 2] | 0) - (HEAP32[i23 >> 2] | 0);
         HEAP32[i46 >> 2] = _alloc(1 + (HEAP32[i68 >> 2] | 0) + 1 | 0) | 0;
         if (HEAP32[i46 >> 2] | 0) _vim_strncpy(HEAP32[i46 >> 2] | 0, HEAP32[i23 >> 2] | 0, HEAP32[i68 >> 2] | 0);
         if (!(HEAP32[10180] & 16)) break;
         HEAP32[i64 >> 2] = HEAP32[26986];
         break;
        }
        HEAP32[i70 >> 2] = HEAP32[i23 + 16 >> 2];
        L278 : do if ((HEAPU8[HEAP32[i70 >> 2] >> 0] | 0) == 47) while (1) {
         if (!(HEAPU8[HEAP32[i70 >> 2] >> 0] | 0)) break L278;
         if ((HEAPU8[HEAP32[i70 >> 2] >> 0] | 0) == 13) break L278;
         if ((HEAPU8[HEAP32[i70 >> 2] >> 0] | 0) == 10) break L278;
         if ((HEAPU8[HEAP32[i70 >> 2] >> 0] | 0) == 36) break L278;
         HEAP32[i70 >> 2] = (HEAP32[i70 >> 2] | 0) + 1;
        } while (0);
        do if (((HEAP32[i23 + 16 >> 2] | 0) + 2 | 0) >>> 0 < (HEAP32[i70 >> 2] | 0) >>> 0) {
         HEAP32[i68 >> 2] = (HEAP32[i70 >> 2] | 0) - (HEAP32[i23 + 16 >> 2] | 0) - 2;
         HEAP32[i46 >> 2] = _alloc((HEAP32[i68 >> 2] | 0) + 2 | 0) | 0;
         if (!(HEAP32[i46 >> 2] | 0)) break;
         _vim_strncpy(HEAP32[i46 >> 2] | 0, (HEAP32[i23 + 16 >> 2] | 0) + 2 | 0, HEAP32[i68 >> 2] | 0);
        } else HEAP32[i46 >> 2] = 0; while (0);
        HEAP32[i64 >> 2] = 0;
       } while (0);
       if (!(HEAP32[i46 >> 2] | 0)) break;
       HEAP32[i49 >> 2] = _hash_hash(HEAP32[i46 >> 2] | 0) | 0;
       HEAP32[i72 >> 2] = _hash_lookup(i48 + ((HEAP32[i52 >> 2] | 0) * 152 | 0) | 0, HEAP32[i46 >> 2] | 0, HEAP32[i49 >> 2] | 0) | 0;
       do if (HEAP32[(HEAP32[i72 >> 2] | 0) + 4 >> 2] | 0) {
        if ((HEAP32[(HEAP32[i72 >> 2] | 0) + 4 >> 2] | 0) == 113987) break;
        _vim_free(HEAP32[i46 >> 2] | 0);
        break L243;
       } while (0);
       if (!(_hash_add_item(i48 + ((HEAP32[i52 >> 2] | 0) * 152 | 0) | 0, HEAP32[i72 >> 2] | 0, HEAP32[i46 >> 2] | 0, HEAP32[i49 >> 2] | 0) | 0)) {
        i7 = 222;
        break L46;
       }
       if ((_ga_grow(i47 + ((HEAP32[i52 >> 2] | 0) * 20 | 0) | 0, 1) | 0) != 1) {
        i7 = 222;
        break L46;
       }
       i73 = HEAP32[i46 >> 2] | 0;
       i19 = i47 + ((HEAP32[i52 >> 2] | 0) * 20 | 0) | 0;
       i5 = HEAP32[i19 + 16 >> 2] | 0;
       i6 = i19 | 0;
       i19 = HEAP32[i6 >> 2] | 0;
       HEAP32[i6 >> 2] = i19 + 1;
       HEAP32[i5 + (i19 << 2) >> 2] = i73;
       HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
      } while (0);
     }
     if ((i7 | 0) == 38) {
      i7 = 0;
      HEAP32[i25 >> 2] = 1;
     } else if ((i7 | 0) == 40) {
      i7 = 0;
      HEAP32[i25 >> 2] = 1;
      HEAP32[i26 >> 2] = 1;
     } else if ((i7 | 0) == 99) {
      i7 = 0;
      HEAP32[i59 >> 2] = 1;
     } else if ((i7 | 0) == 165) {
      i7 = 0;
      HEAP32[i59 >> 2] = 1;
     } else if ((i7 | 0) == 222) {
      i7 = 0;
      HEAP32[i26 >> 2] = 1;
      HEAP32[i25 >> 2] = 1;
     }
     if (HEAP32[i59 >> 2] | 0) {
      _emsg2(78631, HEAP32[i20 >> 2] | 0) | 0;
      _emsgn(78668, ___ftello(HEAP32[i17 >> 2] | 0) | 0) | 0;
      HEAP32[i25 >> 2] = 1;
      HEAP32[i59 >> 2] = 0;
     }
     _fclose(HEAP32[i17 >> 2] | 0) | 0;
     HEAP32[i33 >> 2] = 0;
     if (HEAP32[i56 >> 2] | 0) {
      _emsg2(78684, HEAP32[i20 >> 2] | 0) | 0;
      HEAP32[i56 >> 2] = 0;
     }
     if ((HEAP32[i50 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) {
      HEAP32[i26 >> 2] = 1;
      HEAP32[i25 >> 2] = 1;
     }
     if (HEAP32[i25 >> 2] | 0) break;
    }
    HEAP32[i22 >> 2] = 0;
   }
   _tagname_free(i21);
   if ((HEAP32[i25 >> 2] | 0) != 0 | (HEAP32[i57 >> 2] | 0) != 0) break;
   if ((HEAP32[26933] | 0) == 0 & (HEAP32[i63 >> 2] | 0) != 0) break;
   if (HEAP32[i54 + 16 + 84 >> 2] | 0) break;
   HEAP32[i54 + 16 + 84 >> 2] = 1;
   HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
  }
  if (!(HEAP32[i25 >> 2] | 0)) {
   if ((HEAP32[i24 >> 2] | 0) == 0 & (HEAP32[i65 >> 2] | 0) != 0) _emsg(78715) | 0;
   HEAP32[i26 >> 2] = 1;
  }
 } while (0);
 _vim_free(HEAP32[i18 >> 2] | 0);
 _vim_regfree(HEAP32[i54 + 16 >> 2] | 0);
 _vim_free(HEAP32[i20 >> 2] | 0);
 if (!(HEAP32[i26 >> 2] | 0)) HEAP32[i50 >> 2] = 0;
 if ((HEAP32[i50 >> 2] | 0) > 0) HEAP32[i51 >> 2] = _lalloc(HEAP32[i50 >> 2] << 2, 1) | 0; else HEAP32[i51 >> 2] = 0;
 HEAP32[i50 >> 2] = 0;
 HEAP32[i52 >> 2] = 0;
 while (1) {
  if ((HEAP32[i52 >> 2] | 0) >= 16) break;
  HEAP32[i32 >> 2] = 0;
  while (1) {
   i80 = i47 + ((HEAP32[i52 >> 2] | 0) * 20 | 0) | 0;
   if ((HEAP32[i32 >> 2] | 0) >= (HEAP32[i47 + ((HEAP32[i52 >> 2] | 0) * 20 | 0) >> 2] | 0)) break;
   HEAP32[i46 >> 2] = HEAP32[(HEAP32[i80 + 16 >> 2] | 0) + (HEAP32[i32 >> 2] << 2) >> 2];
   if (!(HEAP32[i51 >> 2] | 0)) _vim_free(HEAP32[i46 >> 2] | 0); else {
    L344 : do if (!(HEAP32[i62 >> 2] | 0)) {
     HEAP8[HEAP32[i46 >> 2] >> 0] = (HEAPU8[HEAP32[i46 >> 2] >> 0] | 0) - 1;
     HEAP32[i30 >> 2] = (HEAP32[i46 >> 2] | 0) + 1;
     while (1) {
      if (!(HEAPU8[HEAP32[i30 >> 2] >> 0] | 0)) break L344;
      if ((HEAPU8[HEAP32[i30 >> 2] >> 0] | 0) == 2) HEAP8[HEAP32[i30 >> 2] >> 0] = 0;
      HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
     }
    } while (0);
    i20 = HEAP32[i46 >> 2] | 0;
    i54 = HEAP32[i51 >> 2] | 0;
    i18 = HEAP32[i50 >> 2] | 0;
    HEAP32[i50 >> 2] = i18 + 1;
    HEAP32[i54 + (i18 << 2) >> 2] = i20;
   }
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
  _ga_clear(i80);
  _hash_clear(i48 + ((HEAP32[i52 >> 2] | 0) * 152 | 0) | 0);
  HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[i51 >> 2];
 HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i50 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 780 >> 2] = HEAP32[i53 >> 2];
 HEAP32[26933] = HEAP32[i66 >> 2];
 STACKTOP = i8;
 return HEAP32[i26 >> 2] | 0;
}

function _win_line(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i8 = i7;
 i9 = i7 + 228 | 0;
 i10 = i7 + 224 | 0;
 i11 = i7 + 220 | 0;
 i12 = i7 + 216 | 0;
 i13 = i7 + 212 | 0;
 i14 = i7 + 204 | 0;
 i15 = i7 + 200 | 0;
 i16 = i7 + 196 | 0;
 i17 = i7 + 192 | 0;
 i18 = i7 + 188 | 0;
 i19 = i7 + 184 | 0;
 i20 = i7 + 180 | 0;
 i21 = i7 + 176 | 0;
 i22 = i7 + 172 | 0;
 i23 = i7 + 232 | 0;
 i24 = i7 + 168 | 0;
 i25 = i7 + 164 | 0;
 i26 = i7 + 160 | 0;
 i27 = i7 + 156 | 0;
 i28 = i7 + 152 | 0;
 i29 = i7 + 148 | 0;
 i30 = i7 + 144 | 0;
 i31 = i7 + 140 | 0;
 i32 = i7 + 136 | 0;
 i33 = i7 + 132 | 0;
 i34 = i7 + 128 | 0;
 i35 = i7 + 124 | 0;
 i36 = i7 + 120 | 0;
 i37 = i7 + 116 | 0;
 i38 = i7 + 112 | 0;
 i39 = i7 + 108 | 0;
 i40 = i7 + 104 | 0;
 i41 = i7 + 100 | 0;
 i42 = i7 + 96 | 0;
 i43 = i7 + 92 | 0;
 i44 = i7 + 88 | 0;
 i45 = i7 + 84 | 0;
 i46 = i7 + 80 | 0;
 i47 = i7 + 72 | 0;
 i48 = i7 + 64 | 0;
 i49 = i7 + 60 | 0;
 i50 = i7 + 56 | 0;
 i51 = i7 + 52 | 0;
 i52 = i7 + 48 | 0;
 i53 = i7 + 44 | 0;
 i54 = i7 + 40 | 0;
 i55 = i7 + 36 | 0;
 i56 = i7 + 32 | 0;
 i57 = i7 + 28 | 0;
 i58 = i7 + 24 | 0;
 i59 = i7 + 20 | 0;
 i60 = i7 + 16 | 0;
 i61 = i7 + 12 | 0;
 i62 = i7 + 8 | 0;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i7 + 208 >> 2] = i5;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i18 >> 2] = -1;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i29 >> 2] = HEAP32[10184];
 HEAP32[i30 >> 2] = HEAP32[26859];
 HEAP32[i31 >> 2] = 0;
 HEAP32[i32 >> 2] = 0;
 HEAP32[i33 >> 2] = 0;
 HEAP32[i34 >> 2] = 0;
 HEAP32[i35 >> 2] = 0;
 HEAP32[i36 >> 2] = 0;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i38 >> 2] = 0;
 HEAP32[i39 >> 2] = 0;
 HEAP32[i42 >> 2] = -2;
 HEAP32[i43 >> 2] = 0;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i49 >> 2] = 0;
 HEAP32[i50 >> 2] = 0;
 HEAP32[i51 >> 2] = 0;
 HEAP32[i52 >> 2] = 0;
 HEAP32[i53 >> 2] = 0;
 HEAP32[i54 >> 2] = 0;
 HEAP32[i56 >> 2] = 2147483647;
 HEAP32[i57 >> 2] = 0;
 i5 = HEAP32[i12 >> 2] | 0;
 if ((HEAP32[i12 >> 2] | 0) > (HEAP32[i13 >> 2] | 0)) {
  HEAP32[i9 >> 2] = i5;
  i63 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i7;
  return i63 | 0;
 }
 HEAP32[i21 >> 2] = i5;
 HEAP32[i22 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[(HEAP32[i10 >> 2] | 0) + 84 >> 2] | 0);
 HEAP32[i55 >> 2] = 0;
 HEAP32[i40 >> 2] = -10;
 HEAP32[i41 >> 2] = 2147483647;
 if (HEAP32[26788] | 0) if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0)) {
  i5 = (HEAP32[26881] | 0) + 24 | 0;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27117] | 0)) if ((HEAP32[i5 >> 2] | 0) < (HEAP32[27117] | 0)) i6 = 10; else i6 = 8; else if ((HEAP32[i5 + 4 >> 2] | 0) < (HEAP32[27118] | 0)) i6 = 10; else i6 = 8;
  do if ((i6 | 0) == 8) {
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27117] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) == (HEAP32[27118] | 0)) {
    i6 = 10;
    break;
   }
   HEAP32[i44 >> 2] = 108468;
   HEAP32[i45 >> 2] = (HEAP32[26881] | 0) + 24;
  } while (0);
  if ((i6 | 0) == 10) {
   HEAP32[i44 >> 2] = (HEAP32[26881] | 0) + 24;
   HEAP32[i45 >> 2] = 108468;
  }
  if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[HEAP32[i44 >> 2] >> 2] | 0)) i64 = (HEAP32[i11 >> 2] | 0) <= (HEAP32[HEAP32[i45 >> 2] >> 2] | 0); else i64 = 0;
  HEAP32[i46 >> 2] = i64 & 1;
  do if ((HEAP32[10179] | 0) == 22) {
   if (HEAP32[i46 >> 2] | 0) {
    HEAP32[i40 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2];
    HEAP32[i41 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2];
   }
  } else {
   if ((HEAP32[i11 >> 2] | 0) > (HEAP32[HEAP32[i44 >> 2] >> 2] | 0)) if ((HEAP32[i11 >> 2] | 0) <= (HEAP32[HEAP32[i45 >> 2] >> 2] | 0)) HEAP32[i40 >> 2] = 0; else i6 = 20; else i6 = 20;
   do if ((i6 | 0) == 20) if ((HEAP32[i11 >> 2] | 0) == (HEAP32[HEAP32[i44 >> 2] >> 2] | 0)) {
    if ((HEAP32[10179] | 0) == 86) {
     HEAP32[i40 >> 2] = 0;
     break;
    }
    _getvcol(HEAP32[i10 >> 2] | 0, HEAP32[i44 >> 2] | 0, i40, 0, 0);
    if (!(_gchar_pos(HEAP32[i44 >> 2] | 0) | 0)) HEAP32[i41 >> 2] = (HEAP32[i40 >> 2] | 0) + 1;
   } while (0);
   if ((HEAP32[10179] | 0) != 86) if ((HEAP32[i11 >> 2] | 0) == (HEAP32[HEAP32[i45 >> 2] >> 2] | 0)) {
    if ((HEAPU8[HEAP32[26975] >> 0] | 0) == 101) if (!(HEAP32[(HEAP32[i45 >> 2] | 0) + 4 >> 2] | 0)) {
     HEAP32[i40 >> 2] = -10;
     HEAP32[i41 >> 2] = 2147483647;
     break;
    }
    if ((HEAP32[(HEAP32[i45 >> 2] | 0) + 4 >> 2] | 0) == 2147483647) {
     HEAP32[i41 >> 2] = 2147483647;
     break;
    }
    i64 = HEAP32[i45 >> 2] | 0;
    HEAP32[i47 >> 2] = HEAP32[i64 >> 2];
    HEAP32[i47 + 4 >> 2] = HEAP32[i64 + 4 >> 2];
    i64 = HEAP32[i10 >> 2] | 0;
    if ((HEAPU8[HEAP32[26975] >> 0] | 0) == 101) {
     _getvcol(i64, i47, i41, 0, 0);
     break;
    } else {
     _getvcol(i64, i47, 0, 0, i41);
     HEAP32[i41 >> 2] = (HEAP32[i41 >> 2] | 0) + 1;
     break;
    }
   }
  } while (0);
  if (!(HEAP32[26735] | 0)) if ((HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if (!(HEAP32[26627] | 0 ? 1 : (HEAP32[i10 >> 2] | 0) != (HEAP32[26881] | 0))) HEAP32[i43 >> 2] = 1;
  if ((HEAP32[i40 >> 2] | 0) >= 0) {
   HEAP32[i51 >> 2] = 1;
   HEAP32[i52 >> 2] = HEAP32[27065];
  }
 } else i6 = 41; else i6 = 41;
 if ((i6 | 0) == 41) if (HEAP32[26735] | 0) if ((HEAP32[i10 >> 2] | 0) == (HEAP32[26881] | 0)) if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[i11 >> 2] | 0) <= ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + (HEAP32[27046] | 0) | 0)) {
  if ((HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
   i45 = HEAP32[26881] | 0;
   _getvcol(i45 | 0, i45 + 24 | 0, i40, 0, 0);
  } else HEAP32[i40 >> 2] = 0;
  if ((HEAP32[i11 >> 2] | 0) == ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + (HEAP32[27046] | 0) | 0)) {
   HEAP32[i47 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i47 + 4 >> 2] = HEAP32[27047];
   _getvcol(HEAP32[26881] | 0, i47, i41, 0, 0);
  } else HEAP32[i41 >> 2] = 2147483647;
  if ((HEAP32[i40 >> 2] | 0) == (HEAP32[i41 >> 2] | 0)) HEAP32[i41 >> 2] = (HEAP32[i40 >> 2] | 0) + 1;
  HEAP32[i51 >> 2] = 1;
  HEAP32[i52 >> 2] = HEAP32[27054];
 }
 HEAP32[i19 >> 2] = _ml_get_buf(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0) | 0;
 HEAP32[i20 >> 2] = HEAP32[i19 >> 2];
 if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) {
  if ((HEAP32[26861] | 0) != 0 | (HEAP32[26864] | 0) != 0) HEAP32[i55 >> 2] = 1;
  if (HEAP32[26864] | 0) {
   HEAP32[i56 >> 2] = _strlen(HEAP32[i20 >> 2] | 0) | 0;
   while (1) {
    if ((HEAP32[i56 >> 2] | 0) <= 0) break;
    if ((HEAPU8[(HEAP32[i20 >> 2] | 0) + ((HEAP32[i56 >> 2] | 0) - 1) >> 0] | 0) != 32) if ((HEAPU8[(HEAP32[i20 >> 2] | 0) + ((HEAP32[i56 >> 2] | 0) - 1) >> 0] | 0) != 9) break;
    HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + -1;
   }
   HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - (HEAP32[i19 >> 2] | 0));
  }
 }
 i47 = HEAP32[i10 >> 2] | 0;
 if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 36 >> 2] | 0) HEAP32[i48 >> 2] = HEAP32[i47 + 80 >> 2]; else HEAP32[i48 >> 2] = HEAP32[i47 + 76 >> 2];
 do if ((HEAP32[i48 >> 2] | 0) > 0) {
  while (1) {
   if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[i48 >> 2] | 0)) break;
   if (!(HEAPU8[HEAP32[i20 >> 2] >> 0] | 0)) break;
   HEAP32[i16 >> 2] = _win_lbr_chartabsize(HEAP32[i10 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i17 >> 2] | 0, 0) | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
  if (HEAP32[26788] | 0 ? (HEAP32[i17 >> 2] | 0) < (HEAP32[i48 >> 2] | 0) : 0) if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0)) HEAP32[i17 >> 2] = HEAP32[i48 >> 2];
  if ((HEAP32[i17 >> 2] | 0) > (HEAP32[i48 >> 2] | 0)) {
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i16 >> 2] | 0);
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
   if ((HEAP32[i14 >> 2] | 0) == 0 ? (HEAPU8[HEAP32[i20 >> 2] >> 0] | 0) == 9 : 0) HEAP32[i39 >> 2] = (HEAP32[i48 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
  }
  if ((HEAP32[i41 >> 2] | 0) <= (HEAP32[i17 >> 2] | 0)) {
   HEAP32[i40 >> 2] = 0;
   break;
  }
  if ((HEAP32[i40 >> 2] | 0) >= 0) if ((HEAP32[i40 >> 2] | 0) < (HEAP32[i17 >> 2] | 0)) HEAP32[i40 >> 2] = HEAP32[i17 >> 2];
 } while (0);
 if ((HEAP32[i40 >> 2] | 0) >= 0) {
  do if (HEAP32[i43 >> 2] | 0) {
   i48 = HEAP32[i40 >> 2] | 0;
   if ((HEAP32[i40 >> 2] | 0) == (HEAP32[(HEAP32[i10 >> 2] | 0) + 132 >> 2] | 0)) {
    HEAP32[i42 >> 2] = i48;
    HEAP32[i40 >> 2] = -1;
    break;
   }
   if ((i48 | 0) < (HEAP32[(HEAP32[i10 >> 2] | 0) + 132 >> 2] | 0)) HEAP32[i42 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 132 >> 2];
  } while (0);
  if ((HEAP32[i40 >> 2] | 0) >= (HEAP32[i41 >> 2] | 0)) HEAP32[i40 >> 2] = -1;
 }
 HEAP32[i15 >> 2] = (HEAP32[26456] | 0) - (HEAP32[26691] | 0);
 HEAP32[i14 >> 2] = 0;
 L124 : while (1) {
  do if ((HEAP32[i57 >> 2] | 0) != 2) {
   do if ((HEAP32[i57 >> 2] | 0) == 0 & (HEAP32[i24 >> 2] | 0) == 0) {
    HEAP32[i57 >> 2] = 1;
    if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 4 >> 2] | 0)) if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 8 >> 2] | 0)) break;
    if ((HEAP32[i21 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) if (_vim_strchr(HEAP32[26904] | 0, 110) | 0) break;
    if ((HEAP32[i21 >> 2] | 0) == (HEAP32[i12 >> 2] | 0)) {
     HEAP32[i59 >> 2] = 74565;
     if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 4 >> 2] | 0) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 8 >> 2] | 0) i6 = 102; else HEAP32[i58 >> 2] = HEAP32[i11 >> 2]; else i6 = 102;
     if ((i6 | 0) == 102) {
      i6 = 0;
      HEAP32[i58 >> 2] = _labs(_get_cursor_rel_lnum(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) | 0;
      if (!(HEAP32[i58 >> 2] | 0)) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 4 >> 2] | 0) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 8 >> 2] | 0) {
       HEAP32[i58 >> 2] = HEAP32[i11 >> 2];
       HEAP32[i59 >> 2] = 74571;
      }
     }
     i48 = HEAP32[i59 >> 2] | 0;
     i47 = HEAP32[i58 >> 2] | 0;
     HEAP32[i8 >> 2] = 7;
     HEAP32[i8 + 4 >> 2] = i47;
     _sprintf(i23, i48, i8) | 0;
     L147 : do if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 80 >> 2] | 0) > 0) {
      HEAP32[i25 >> 2] = i23;
      while (1) {
       if ((HEAPU8[HEAP32[i25 >> 2] >> 0] | 0) != 32) break L147;
       HEAP8[HEAP32[i25 >> 2] >> 0] = 45;
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
     } while (0);
     HEAP32[i25 >> 2] = i23;
     HEAP32[i27 >> 2] = 0;
    } else HEAP32[i27 >> 2] = 32;
    HEAP32[i24 >> 2] = 8;
    HEAP32[i49 >> 2] = HEAP32[27058];
   } while (0);
   if ((HEAP32[i57 >> 2] | 0) == 1 & (HEAP32[i24 >> 2] | 0) == 0) {
    HEAP32[i57 >> 2] = 2;
    if (HEAP32[i31 >> 2] | 0) {
     HEAP32[i24 >> 2] = HEAP32[i31 >> 2];
     HEAP32[i27 >> 2] = HEAP32[i33 >> 2];
     HEAP32[i25 >> 2] = HEAP32[i32 >> 2];
     HEAP32[i49 >> 2] = HEAP32[i34 >> 2];
     break;
    } else {
     HEAP32[i49 >> 2] = 0;
     break;
    }
   }
  } while (0);
  if ((HEAP32[10175] | 0) >= 0) if ((HEAP32[i10 >> 2] | 0) == (HEAP32[26881] | 0)) if ((HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0)) if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 132 >> 2] | 0)) {
   i6 = 121;
   break;
  }
  do if ((HEAP32[i57 >> 2] | 0) == 2 & (HEAP32[i51 >> 2] | 0) != 0) {
   do if ((HEAP32[i17 >> 2] | 0) == (HEAP32[i40 >> 2] | 0)) i6 = 127; else {
    if ((HEAP32[i18 >> 2] | 0) == (HEAP32[i42 >> 2] | 0)) if ((HEAP32[i18 >> 2] | 0) < (HEAP32[i17 >> 2] | 0)) if ((HEAP32[i17 >> 2] | 0) < (HEAP32[i41 >> 2] | 0)) {
     i6 = 127;
     break;
    }
    if (HEAP32[i53 >> 2] | 0) {
     if ((HEAP32[i17 >> 2] | 0) != (HEAP32[i41 >> 2] | 0)) {
      if (!(HEAP32[i43 >> 2] | 0)) break;
      if ((HEAP32[i17 >> 2] | 0) != (HEAP32[(HEAP32[i10 >> 2] | 0) + 132 >> 2] | 0)) break;
     }
     HEAP32[i53 >> 2] = 0;
    }
   } while (0);
   if ((i6 | 0) == 127) {
    i6 = 0;
    HEAP32[i53 >> 2] = HEAP32[i52 >> 2];
   }
   HEAP32[i50 >> 2] = 1;
   if (HEAP32[i53 >> 2] | 0) {
    HEAP32[i49 >> 2] = HEAP32[i53 >> 2];
    break;
   }
   if (HEAP32[i54 >> 2] | 0) {
    HEAP32[i49 >> 2] = HEAP32[i54 >> 2];
    break;
   } else {
    HEAP32[i50 >> 2] = 0;
    HEAP32[i49 >> 2] = 0;
    break;
   }
  } while (0);
  L189 : do if ((HEAP32[i24 >> 2] | 0) > 0) {
   if (HEAP32[i27 >> 2] | 0) HEAP32[i16 >> 2] = HEAP32[i27 >> 2]; else {
    HEAP32[i16 >> 2] = HEAPU8[HEAP32[i25 >> 2] >> 0];
    HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
   }
   HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + -1;
  } else {
   if ((HEAP32[i26 >> 2] | 0) != 0 & (HEAP32[i26 >> 2] | 0) != 0) {
    _vim_free(HEAP32[i26 >> 2] | 0);
    HEAP32[i26 >> 2] = 0;
   }
   HEAP32[i16 >> 2] = HEAPU8[HEAP32[i20 >> 2] >> 0];
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
   if (HEAP32[i55 >> 2] | 0) {
    do if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) {
     if (!((HEAP32[i16 >> 2] | 0) == 160 & (HEAP32[26860] | 0) != 0)) {
      if (!((HEAP32[i16 >> 2] | 0) == 32 & (HEAP32[26861] | 0) != 0)) break;
      if (((HEAP32[i20 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0) > (HEAP32[i56 >> 2] | 0)) break;
     }
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) == 32 ? HEAP32[26861] | 0 : HEAP32[26860] | 0;
     if ((HEAP32[i53 >> 2] | 0) == 0 & (HEAP32[i54 >> 2] | 0) == 0) {
      HEAP32[i35 >> 2] = 1;
      HEAP32[i28 >> 2] = HEAP32[27048];
      HEAP32[i36 >> 2] = HEAP32[i49 >> 2];
     }
    } while (0);
    if ((HEAP32[i56 >> 2] | 0) != 2147483647) if ((HEAP32[i16 >> 2] | 0) == 32 ? (HEAP32[i20 >> 2] | 0) >>> 0 > ((HEAP32[i19 >> 2] | 0) + (HEAP32[i56 >> 2] | 0) | 0) >>> 0 : 0) {
     HEAP32[i16 >> 2] = HEAP32[26864];
     if (!(HEAP32[i50 >> 2] | 0)) {
      HEAP32[i35 >> 2] = 1;
      HEAP32[i28 >> 2] = HEAP32[27048];
      HEAP32[i36 >> 2] = HEAP32[i49 >> 2];
     }
    }
   }
   if (!(_vim_isprintc(HEAP32[i16 >> 2] | 0) | 0)) {
    if ((HEAP32[i16 >> 2] | 0) == 9) if (HEAP32[26862] | 0 ? 1 : (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) == 0) {
     HEAP32[i60 >> 2] = 0;
     HEAP32[i61 >> 2] = HEAP32[i17 >> 2];
     i48 = HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + 700 >> 2] | 0;
     HEAP32[i60 >> 2] = (i48 | 0) - ((HEAP32[i61 >> 2] | 0) % (i48 | 0) | 0) - 1;
     HEAP32[i24 >> 2] = HEAP32[i60 >> 2];
     if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) {
      HEAP32[i16 >> 2] = HEAP32[26862];
      HEAP32[i27 >> 2] = HEAP32[26863];
      HEAP32[i35 >> 2] = (HEAP32[i60 >> 2] | 0) + 1;
      HEAP32[i28 >> 2] = HEAP32[27048];
      HEAP32[i36 >> 2] = HEAP32[i49 >> 2];
      break;
     } else {
      HEAP32[i27 >> 2] = 32;
      HEAP32[i16 >> 2] = 32;
      break;
     }
    }
    L221 : do if (!(HEAP32[i16 >> 2] | 0)) {
     do if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) i6 = 170; else {
      if (!((HEAP32[i40 >> 2] | 0) >= 0 | (HEAP32[i42 >> 2] | 0) >= 0)) break L221;
      if (!((HEAP32[10179] | 0) != 22 ? (HEAP32[i41 >> 2] | 0) > (HEAP32[i17 >> 2] | 0) : 0)) break L221;
      if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0)) break L221;
      if (!(HEAP32[i43 >> 2] | 0)) {
       i6 = 170;
       break;
      }
      if ((HEAP32[i11 >> 2] | 0) != (HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0)) {
       i6 = 170;
       break;
      }
      if (!((HEAP32[i29 >> 2] | 0) > 0 ? (HEAP32[i17 >> 2] | 0) != (HEAP32[(HEAP32[i10 >> 2] | 0) + 132 >> 2] | 0) : 0)) break L221;
     } while (0);
     if ((i6 | 0) == 170) {
      i6 = 0;
      if ((HEAP32[i29 >> 2] | 0) <= 0) break;
     }
     HEAP32[i25 >> 2] = 114072;
     HEAP32[i24 >> 2] = 1;
     HEAP32[i27 >> 2] = 0;
     if ((HEAP32[10184] | 0) > 0 ? (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) != 0 : 0) HEAP32[i16 >> 2] = HEAP32[10184]; else HEAP32[i16 >> 2] = 32;
     HEAP32[i29 >> 2] = -1;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
     if (HEAP32[i50 >> 2] | 0) break L189;
     HEAP32[i28 >> 2] = HEAP32[27050];
     HEAP32[i35 >> 2] = 1;
     break L189;
    } while (0);
    if (HEAP32[i16 >> 2] | 0) {
     HEAP32[i25 >> 2] = _transchar(HEAP32[i16 >> 2] | 0) | 0;
     if (!(HEAP32[i24 >> 2] | 0)) HEAP32[i24 >> 2] = (_byte2cells(HEAP32[i16 >> 2] | 0) | 0) - 1;
     HEAP32[i27 >> 2] = 0;
     HEAP32[i24 >> 2] = (_byte2cells(HEAP32[i16 >> 2] | 0) | 0) - 1;
     i48 = HEAP32[i25 >> 2] | 0;
     HEAP32[i25 >> 2] = i48 + 1;
     HEAP32[i16 >> 2] = HEAPU8[i48 >> 0];
     if (!(HEAP32[i50 >> 2] | 0)) {
      HEAP32[i35 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
      HEAP32[i28 >> 2] = HEAP32[27048];
      HEAP32[i36 >> 2] = HEAP32[i49 >> 2];
     }
    }
   }
  } while (0);
  if (!((HEAP32[i35 >> 2] | 0) > 0 & (HEAP32[i57 >> 2] | 0) == 2 ^ 1 | (HEAP32[i50 >> 2] | 0) != 0)) HEAP32[i49 >> 2] = HEAP32[i28 >> 2];
  do if (HEAP32[i30 >> 2] | 0) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) {
   i48 = HEAP32[i10 >> 2] | 0;
   if (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 36 >> 2] | 0) {
    if (!((HEAP32[i48 + 80 >> 2] | 0) > 0 & (HEAP32[i57 >> 2] | 0) > 1 & (HEAP32[i16 >> 2] | 0) != 0)) break;
   } else if (!((HEAP32[i48 + 76 >> 2] | 0) > 0 & (HEAP32[i57 >> 2] | 0) > 1 & (HEAP32[i16 >> 2] | 0) != 0)) break;
   HEAP32[i16 >> 2] = HEAP32[26859];
   HEAP32[i30 >> 2] = 0;
   if (!(HEAP32[i50 >> 2] | 0)) {
    HEAP32[i38 >> 2] = HEAP32[i49 >> 2];
    HEAP32[i49 >> 2] = HEAP32[27050];
    HEAP32[i37 >> 2] = 1;
   }
  } while (0);
  do if (!(HEAP32[i16 >> 2] | 0)) if (HEAP32[i53 >> 2] | 0 ? (HEAP32[10184] | 0) == (HEAP32[i29 >> 2] | 0) : 0) if ((HEAP32[i17 >> 2] | 0) == (HEAP32[i40 >> 2] | 0)) {
   if ((HEAP32[10179] | 0) != 22) i6 = 196; else if ((HEAP32[i11 >> 2] | 0) == (HEAP32[27117] | 0)) i6 = 196; else if (!((HEAP32[i16 >> 2] | 0) == 0 ? (HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) : 0)) break;
   if ((i6 | 0) == 196) {
    i6 = 0;
    if (HEAP32[i16 >> 2] | 0) break;
   }
   HEAP32[i62 >> 2] = 0;
   HEAP32[i62 >> 2] = (HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0) ? -1 : 0;
   if (HEAP32[i62 >> 2] | 0) {
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i62 >> 2] | 0);
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i62 >> 2] | 0);
   } else HEAP8[(HEAP32[26691] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = 32;
   HEAP16[(HEAP32[26692] | 0) + (HEAP32[i15 >> 2] << 1) >> 1] = HEAP32[i49 >> 2];
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
  } while (0);
  if (!(HEAP32[i16 >> 2] | 0)) {
   i6 = 202;
   break;
  }
  L273 : do if (HEAP32[26858] | 0) if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 36 >> 2] | 0)) if ((HEAP32[i14 >> 2] | 0) == ((HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0) - 1 | 0)) {
   do if (!(HEAPU8[HEAP32[i20 >> 2] >> 0] | 0)) {
    if ((HEAP32[i29 >> 2] | 0) > 0 ? (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) != 0 : 0) break;
    if (!(HEAP32[i24 >> 2] | 0)) break L273;
    if (HEAP32[i27 >> 2] | 0) break;
    if (!(HEAPU8[HEAP32[i25 >> 2] >> 0] | 0)) break L273;
   } while (0);
   HEAP32[i16 >> 2] = HEAP32[26858];
   HEAP32[i49 >> 2] = HEAP32[27050];
  } while (0);
  HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
  if ((HEAP32[i57 >> 2] | 0) < 2 | (HEAP32[i39 >> 2] | 0) <= 0) {
   HEAP8[(HEAP32[26691] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = HEAP32[i16 >> 2];
   HEAP16[(HEAP32[26692] | 0) + (HEAP32[i15 >> 2] << 1) >> 1] = HEAP32[i49 >> 2];
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  } else HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + -1;
  if ((HEAP32[i57 >> 2] | 0) > 1) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
  do if ((HEAP32[i57 >> 2] | 0) > 1 & (HEAP32[i37 >> 2] | 0) > 0) {
   i48 = (HEAP32[i37 >> 2] | 0) + -1 | 0;
   HEAP32[i37 >> 2] = i48;
   if (i48 | 0) break;
   HEAP32[i49 >> 2] = HEAP32[i38 >> 2];
  } while (0);
  do if ((HEAP32[i35 >> 2] | 0) > 0 & (HEAP32[i57 >> 2] | 0) == 2) {
   i48 = (HEAP32[i35 >> 2] | 0) + -1 | 0;
   HEAP32[i35 >> 2] = i48;
   if (i48 | 0) break;
   HEAP32[i49 >> 2] = HEAP32[i36 >> 2];
  } while (0);
  L299 : do if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0)) {
   do if (!(HEAPU8[HEAP32[i20 >> 2] >> 0] | 0)) {
    if ((HEAP32[i25 >> 2] | 0) != 114072 ? (HEAP32[10184] | 0 ? (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 >> 2] | 0) != 0 : 0) : 0) break;
    if (!(HEAP32[i24 >> 2] | 0)) break L299;
    if (HEAP32[i27 >> 2] | 0) break;
    if (!(HEAPU8[HEAP32[i25 >> 2] >> 0] | 0)) break L299;
   } while (0);
   i48 = HEAP32[i10 >> 2] | 0;
   _screen_line(HEAP32[i22 >> 2] | 0, HEAP32[i48 + 96 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i48 + 100 >> 2] | 0, 0);
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
   if ((HEAP32[i29 >> 2] | 0) == -1 ? 1 : (HEAP32[(HEAP32[i10 >> 2] | 0) + 200 + 36 >> 2] | 0) == 0) break L124;
   if ((HEAP32[i57 >> 2] | 0) != 2) {
    i48 = HEAP32[i10 >> 2] | 0;
    _win_draw_end(i48 | 0, 64, 32, HEAP32[i21 >> 2] | 0, HEAP32[i48 + 88 >> 2] | 0, 2);
    _draw_vsep_win(HEAP32[i10 >> 2] | 0, HEAP32[i21 >> 2] | 0);
    HEAP32[i21 >> 2] = HEAP32[i13 >> 2];
   }
   if ((HEAP32[i21 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) {
    i6 = 235;
    break L124;
   }
   do if ((HEAP32[26458] | 0) == ((HEAP32[i22 >> 2] | 0) - 1 | 0)) {
    if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) break;
    HEAP8[(HEAP32[26694] | 0) + ((HEAP32[i22 >> 2] | 0) - 1) >> 0] = 1;
    if ((HEAP32[27016] | 0) == 0 | (HEAP32[26627] | 0) != 0) break;
    if ((HEAP32[26457] | 0) != (HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0)) {
     i48 = (HEAP32[i22 >> 2] | 0) - 1 | 0;
     i47 = HEAP32[10174] | 0;
     _screen_char((HEAP32[(HEAP32[26693] | 0) + (i48 << 2) >> 2] | 0) + i47 - 1 | 0, i48 | 0, i47 - 1 | 0);
    }
    _out_char(HEAPU8[(HEAP32[26691] | 0) + ((HEAP32[(HEAP32[26693] | 0) + ((HEAP32[i22 >> 2] | 0) - 1 << 2) >> 2] | 0) + ((HEAP32[10174] | 0) - 1)) >> 0] | 0);
    HEAP16[(HEAP32[26692] | 0) + (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i22 >> 2] << 2) >> 2] << 1) >> 1] = -1;
    _screen_start();
   } while (0);
   HEAP32[i14 >> 2] = 0;
   HEAP32[i15 >> 2] = (HEAP32[26456] | 0) - (HEAP32[26691] | 0);
   HEAP32[i57 >> 2] = 0;
   HEAP32[i31 >> 2] = HEAP32[i24 >> 2];
   HEAP32[i32 >> 2] = HEAP32[i25 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i34 >> 2] = HEAP32[i49 >> 2];
   HEAP32[i24 >> 2] = 0;
   HEAP32[i30 >> 2] = HEAP32[26859];
  } while (0);
 }
 if ((i6 | 0) == 121) {
  i30 = HEAP32[i10 >> 2] | 0;
  _screen_line(HEAP32[i22 >> 2] | 0, HEAP32[i30 + 96 >> 2] | 0, HEAP32[i14 >> 2] | 0, 0 - (HEAP32[i30 + 100 >> 2] | 0) | 0, 0);
  HEAP32[i21 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 88 >> 2];
 } else if ((i6 | 0) == 202) {
  i30 = HEAP32[i10 >> 2] | 0;
  _screen_line(HEAP32[i22 >> 2] | 0, HEAP32[i30 + 96 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i30 + 100 >> 2] | 0, 0);
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
  if ((HEAP32[i10 >> 2] | 0) == (HEAP32[26881] | 0)) if ((HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 128 >> 2] = HEAP32[i12 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 124 >> 2] = (HEAP32[i21 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
   i12 = (HEAP32[26881] | 0) + 108 | 0;
   HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 24;
  }
 } else if ((i6 | 0) == 235) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
 _vim_free(HEAP32[i26 >> 2] | 0);
 HEAP32[i9 >> 2] = HEAP32[i21 >> 2];
 i63 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i7;
 return i63 | 0;
}

function _post2nfa(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 i6 = i5 + 384 | 0;
 i7 = i5 + 380 | 0;
 i8 = i5 + 376 | 0;
 i9 = i5 + 372 | 0;
 i10 = i5 + 368 | 0;
 i11 = i5 + 364 | 0;
 i12 = i5 + 360 | 0;
 i13 = i5 + 356 | 0;
 i14 = i5 + 352 | 0;
 i15 = i5 + 348 | 0;
 i16 = i5 + 344 | 0;
 i17 = i5 + 336 | 0;
 i18 = i5 + 328 | 0;
 i19 = i5 + 320 | 0;
 i20 = i5 + 316 | 0;
 i21 = i5 + 312 | 0;
 i22 = i5 + 308 | 0;
 i23 = i5 + 304 | 0;
 i24 = i5 + 296 | 0;
 i25 = i5 + 288 | 0;
 i26 = i5 + 280 | 0;
 i27 = i5 + 272 | 0;
 i28 = i5 + 264 | 0;
 i29 = i5 + 256 | 0;
 i30 = i5 + 248 | 0;
 i31 = i5 + 240 | 0;
 i32 = i5 + 232 | 0;
 i33 = i5 + 224 | 0;
 i34 = i5 + 216 | 0;
 i35 = i5 + 208 | 0;
 i36 = i5 + 200 | 0;
 i37 = i5 + 192 | 0;
 i38 = i5 + 184 | 0;
 i39 = i5 + 176 | 0;
 i40 = i5 + 168 | 0;
 i41 = i5 + 160 | 0;
 i42 = i5 + 152 | 0;
 i43 = i5 + 144 | 0;
 i44 = i5 + 136 | 0;
 i45 = i5 + 128 | 0;
 i46 = i5 + 120 | 0;
 i47 = i5 + 112 | 0;
 i48 = i5 + 108 | 0;
 i49 = i5 + 104 | 0;
 i50 = i5 + 100 | 0;
 i51 = i5 + 96 | 0;
 i52 = i5 + 92 | 0;
 i53 = i5 + 88 | 0;
 i54 = i5 + 80 | 0;
 i55 = i5 + 72 | 0;
 i56 = i5 + 64 | 0;
 i57 = i5 + 56 | 0;
 i58 = i5 + 48 | 0;
 i59 = i5 + 40 | 0;
 i60 = i5 + 32 | 0;
 i61 = i5 + 24 | 0;
 i62 = i5 + 16 | 0;
 i63 = i5 + 8 | 0;
 i64 = i5;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i7 >> 2] = 0;
  i65 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i65 | 0;
 }
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i14 >> 2] = _lalloc((HEAP32[26333] | 0) + 1 << 3, 1) | 0;
  HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i16 >> 2] = (HEAP32[i14 >> 2] | 0) + ((HEAP32[26333] | 0) + 1 << 3);
 }
 HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 L8 : while (1) {
  if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) {
   i4 = 125;
   break;
  }
  L11 : do switch (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) {
  case -1014:
   {
    if ((HEAP32[i10 >> 2] | 0) != 1) {
     _st_pop(i24, i15, HEAP32[i14 >> 2] | 0);
     HEAP32[i18 >> 2] = HEAP32[i24 >> 2];
     HEAP32[i18 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
     if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      i4 = 10;
      break L8;
     }
     _st_pop(i25, i15, HEAP32[i14 >> 2] | 0);
     HEAP32[i17 >> 2] = HEAP32[i25 >> 2];
     HEAP32[i17 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
     if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      i4 = 12;
      break L8;
     }
     _patch(HEAP32[i17 + 4 >> 2] | 0, HEAP32[i18 >> 2] | 0);
     _frag(i26, HEAP32[i17 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0);
     i3 = HEAP32[i16 >> 2] | 0;
     HEAP32[i6 >> 2] = HEAP32[i26 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
     _st_push(i6, i15, i3);
    }
    break;
   }
  case -1013:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    _st_pop(i27, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i18 >> 2] = HEAP32[i27 >> 2];
    HEAP32[i18 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 17;
     break L8;
    }
    _st_pop(i28, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i17 >> 2] = HEAP32[i28 >> 2];
    HEAP32[i17 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 19;
     break L8;
    }
    HEAP32[i20 >> 2] = _alloc_state(-1024, HEAP32[i17 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    _frag(i29, HEAP32[i20 >> 2] | 0, _append(HEAP32[i17 + 4 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i29 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -1012:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    _st_pop(i30, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i19 >> 2] = HEAP32[i30 >> 2];
    HEAP32[i19 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 25;
     break L8;
    }
    HEAP32[i20 >> 2] = _alloc_state(-1024, HEAP32[i19 >> 2] | 0, 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    _patch(HEAP32[i19 + 4 >> 2] | 0, HEAP32[i20 >> 2] | 0);
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i31, i3 | 0, _list1(i3 + 8 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i31 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i31 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -1011:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    _st_pop(i32, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i19 >> 2] = HEAP32[i32 >> 2];
    HEAP32[i19 + 4 >> 2] = HEAP32[i32 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 31;
     break L8;
    }
    HEAP32[i20 >> 2] = _alloc_state(-1024, 0, HEAP32[i19 >> 2] | 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    _patch(HEAP32[i19 + 4 >> 2] | 0, HEAP32[i20 >> 2] | 0);
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i33, i3 | 0, _list1(i3 + 4 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i33 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i33 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -1010:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    _st_pop(i34, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i19 >> 2] = HEAP32[i34 >> 2];
    HEAP32[i19 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 37;
     break L8;
    }
    HEAP32[i20 >> 2] = _alloc_state(-1024, HEAP32[i19 >> 2] | 0, 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i35, i3 | 0, _append(HEAP32[i19 + 4 >> 2] | 0, _list1(i3 + 8 | 0) | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i35 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -1009:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    _st_pop(i36, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
    HEAP32[i19 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 43;
     break L8;
    }
    HEAP32[i20 >> 2] = _alloc_state(-1024, 0, HEAP32[i19 >> 2] | 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i37, i3 | 0, _append(HEAP32[i19 + 4 >> 2] | 0, _list1(i3 + 4 | 0) | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i37 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -1018:
  case -1020:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    _st_pop(i38, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i19 >> 2] = HEAP32[i38 >> 2];
    HEAP32[i19 + 4 >> 2] = HEAP32[i38 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 49;
     break L8;
    }
    HEAP32[i20 >> 2] = _alloc_state(-1020, 0, 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    _patch(HEAP32[i19 + 4 >> 2] | 0, HEAP32[i20 >> 2] | 0);
    HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] = HEAP32[i20 >> 2];
    _frag(i39, HEAP32[i19 >> 2] | 0, _list1((HEAP32[i20 >> 2] | 0) + 4 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i39 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i39 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -1017:
   {
    if ((HEAP32[i10 >> 2] | 0) != 1) {
     _st_pop(i40, i15, HEAP32[i14 >> 2] | 0);
     HEAP32[i18 >> 2] = HEAP32[i40 >> 2];
     HEAP32[i18 + 4 >> 2] = HEAP32[i40 + 4 >> 2];
     if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      i4 = 54;
      break L8;
     }
     _st_pop(i41, i15, HEAP32[i14 >> 2] | 0);
     HEAP32[i17 >> 2] = HEAP32[i41 >> 2];
     HEAP32[i17 + 4 >> 2] = HEAP32[i41 + 4 >> 2];
     if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      i4 = 56;
      break L8;
     }
     HEAP32[(HEAP32[i18 >> 2] | 0) + 24 >> 2] = HEAP32[HEAP32[i18 >> 2] >> 2];
     HEAP32[HEAP32[i18 >> 2] >> 2] = -1015;
     HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] = HEAP32[HEAP32[i17 >> 2] >> 2];
     HEAP32[HEAP32[i17 >> 2] >> 2] = -1016;
     _patch(HEAP32[i17 + 4 >> 2] | 0, HEAP32[i18 >> 2] | 0);
     _frag(i42, HEAP32[i17 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0);
     i3 = HEAP32[i16 >> 2] | 0;
     HEAP32[i6 >> 2] = HEAP32[i42 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
     _st_push(i6, i15, i3);
    }
    break;
   }
  case -1022:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    HEAP32[i20 >> 2] = _alloc_state(-1022, 0, 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i43, i3 | 0, _list1(i3 + 4 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i43 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i43 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -982:
   {
    i3 = (HEAP32[i11 >> 2] | 0) + 4 | 0;
    HEAP32[i11 >> 2] = i3;
    HEAP32[i44 >> 2] = HEAP32[i3 >> 2];
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + (HEAP32[i44 >> 2] | 0);
     break L11;
    }
    HEAP32[i20 >> 2] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
    HEAP32[i21 >> 2] = 0;
    while (1) {
     i3 = HEAP32[i44 >> 2] | 0;
     HEAP32[i44 >> 2] = i3 + -1;
     if ((i3 | 0) <= 0) break;
     _st_pop(i45, i15, HEAP32[i14 >> 2] | 0);
     HEAP32[i19 >> 2] = HEAP32[i45 >> 2];
     HEAP32[i19 + 4 >> 2] = HEAP32[i45 + 4 >> 2];
     if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      i4 = 67;
      break L8;
     }
     HEAP32[i20 >> 2] = _alloc_state(-1024, HEAP32[i19 >> 2] | 0, 0) | 0;
     if (!(HEAP32[i20 >> 2] | 0)) break L8;
     if (!(HEAP32[i17 + 4 >> 2] | 0)) {
      HEAP32[i17 >> 2] = HEAP32[i19 >> 2];
      HEAP32[i17 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
     }
     _patch(HEAP32[i19 + 4 >> 2] | 0, HEAP32[i21 >> 2] | 0);
     i3 = HEAP32[i17 + 4 >> 2] | 0;
     _append(i3, _list1((HEAP32[i20 >> 2] | 0) + 8 | 0) | 0) | 0;
     HEAP32[i21 >> 2] = HEAP32[i20 >> 2];
    }
    _frag(i46, HEAP32[i20 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i46 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i46 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -977:
  case -978:
  case -979:
  case -980:
  case -981:
   {
    if ((HEAP32[HEAP32[i11 >> 2] >> 2] | 0) == -979) i66 = 1; else i66 = (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) == -978;
    HEAP32[i47 >> 2] = i66 & 1;
    HEAP32[i48 >> 2] = (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) == -977 & 1;
    HEAP32[i51 >> 2] = 0;
    switch (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) {
    case -981:
     {
      HEAP32[i49 >> 2] = -997;
      HEAP32[i50 >> 2] = -988;
      break;
     }
    case -980:
     {
      HEAP32[i49 >> 2] = -995;
      HEAP32[i50 >> 2] = -987;
      break;
     }
    case -979:
     {
      HEAP32[i49 >> 2] = -993;
      HEAP32[i50 >> 2] = -988;
      break;
     }
    case -978:
     {
      HEAP32[i49 >> 2] = -991;
      HEAP32[i50 >> 2] = -987;
      break;
     }
    default:
     {
      HEAP32[i49 >> 2] = -989;
      HEAP32[i50 >> 2] = -986;
     }
    }
    if (HEAP32[i47 >> 2] | 0) {
     i3 = (HEAP32[i11 >> 2] | 0) + 4 | 0;
     HEAP32[i11 >> 2] = i3;
     HEAP32[i51 >> 2] = HEAP32[i3 >> 2];
    }
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + (HEAP32[i48 >> 2] | 0 ? 4 : 2);
     break L11;
    }
    _st_pop(i54, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i19 >> 2] = HEAP32[i54 >> 2];
    HEAP32[i19 + 4 >> 2] = HEAP32[i54 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 86;
     break L8;
    }
    HEAP32[i21 >> 2] = _alloc_state(HEAP32[i50 >> 2] | 0, 0, 0) | 0;
    if (!(HEAP32[i21 >> 2] | 0)) break L8;
    HEAP32[i20 >> 2] = _alloc_state(HEAP32[i49 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i21 >> 2] | 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    if (HEAP32[i48 >> 2] | 0) {
     HEAP32[i53 >> 2] = _alloc_state(-967, 0, 0) | 0;
     if (!(HEAP32[i53 >> 2] | 0)) break L8;
     HEAP32[i52 >> 2] = _alloc_state(-1e3, HEAP32[i21 >> 2] | 0, 0) | 0;
     if (!(HEAP32[i52 >> 2] | 0)) break L8;
     HEAP32[(HEAP32[i21 >> 2] | 0) + 4 >> 2] = HEAP32[i53 >> 2];
     _patch(HEAP32[i19 + 4 >> 2] | 0, HEAP32[i52 >> 2] | 0);
     i3 = HEAP32[i20 >> 2] | 0;
     _frag(i55, i3, _list1((HEAP32[i53 >> 2] | 0) + 4 | 0) | 0);
     i3 = HEAP32[i16 >> 2] | 0;
     HEAP32[i6 >> 2] = HEAP32[i55 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i55 + 4 >> 2];
     _st_push(i6, i15, i3);
     break L11;
    }
    _patch(HEAP32[i19 + 4 >> 2] | 0, HEAP32[i21 >> 2] | 0);
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i56, i3, _list1((HEAP32[i21 >> 2] | 0) + 4 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i56 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i56 + 4 >> 2];
    _st_push(i6, i15, i3);
    if (HEAP32[i47 >> 2] | 0) {
     if ((HEAP32[i51 >> 2] | 0) <= 0) HEAP32[i51 >> 2] = _nfa_max_width(HEAP32[i19 >> 2] | 0, 0) | 0;
     HEAP32[(HEAP32[i20 >> 2] | 0) + 24 >> 2] = HEAP32[i51 >> 2];
    }
    break;
   }
  case -999:
  case -957:
  case -958:
  case -959:
  case -960:
  case -961:
  case -962:
  case -963:
  case -964:
  case -965:
  case -966:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 2;
     break L11;
    }
    HEAP32[i12 >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
    if ((HEAP32[HEAP32[i11 >> 2] >> 2] | 0) == -999) HEAP32[i13 >> 2] = -998; else HEAP32[i13 >> 2] = (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + 10;
    if ((HEAP32[i15 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) {
     HEAP32[i20 >> 2] = _alloc_state(HEAP32[i12 >> 2] | 0, 0, 0) | 0;
     if (!(HEAP32[i20 >> 2] | 0)) break L8;
     HEAP32[i21 >> 2] = _alloc_state(HEAP32[i13 >> 2] | 0, 0, 0) | 0;
     if (!(HEAP32[i21 >> 2] | 0)) break L8;
     i3 = _list1((HEAP32[i20 >> 2] | 0) + 4 | 0) | 0;
     _patch(i3, HEAP32[i21 >> 2] | 0);
     i3 = HEAP32[i20 >> 2] | 0;
     _frag(i57, i3, _list1((HEAP32[i21 >> 2] | 0) + 4 | 0) | 0);
     i3 = HEAP32[i16 >> 2] | 0;
     HEAP32[i6 >> 2] = HEAP32[i57 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i57 + 4 >> 2];
     _st_push(i6, i15, i3);
     break L11;
    }
    _st_pop(i58, i15, HEAP32[i14 >> 2] | 0);
    HEAP32[i19 >> 2] = HEAP32[i58 >> 2];
    HEAP32[i19 + 4 >> 2] = HEAP32[i58 + 4 >> 2];
    if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     i4 = 107;
     break L8;
    }
    HEAP32[i20 >> 2] = _alloc_state(HEAP32[i12 >> 2] | 0, HEAP32[i19 >> 2] | 0, 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    HEAP32[i21 >> 2] = _alloc_state(HEAP32[i13 >> 2] | 0, 0, 0) | 0;
    if (!(HEAP32[i21 >> 2] | 0)) break L8;
    _patch(HEAP32[i19 + 4 >> 2] | 0, HEAP32[i21 >> 2] | 0);
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i59, i3, _list1((HEAP32[i21 >> 2] | 0) + 4 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i59 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i59 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -968:
  case -969:
  case -970:
  case -971:
  case -972:
  case -973:
  case -974:
  case -975:
  case -976:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 2;
     break L11;
    }
    HEAP32[i20 >> 2] = _alloc_state(HEAP32[HEAP32[i11 >> 2] >> 2] | 0, 0, 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    HEAP32[i21 >> 2] = _alloc_state(-967, 0, 0) | 0;
    if (!(HEAP32[i21 >> 2] | 0)) break L8;
    i3 = _list1((HEAP32[i20 >> 2] | 0) + 4 | 0) | 0;
    _patch(i3, HEAP32[i21 >> 2] | 0);
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i60, i3, _list1((HEAP32[i21 >> 2] | 0) + 4 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i60 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i60 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  case -872:
  case -873:
  case -874:
  case -878:
  case -879:
  case -880:
  case -875:
  case -876:
  case -877:
  case -881:
  case -882:
  case -883:
   {
    i3 = (HEAP32[i11 >> 2] | 0) + 4 | 0;
    HEAP32[i11 >> 2] = i3;
    HEAP32[i61 >> 2] = HEAP32[i3 >> 2];
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    HEAP32[i20 >> 2] = _alloc_state(HEAP32[(HEAP32[i11 >> 2] | 0) + -4 >> 2] | 0, 0, 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    HEAP32[(HEAP32[i20 >> 2] | 0) + 24 >> 2] = HEAP32[i61 >> 2];
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i62, i3, _list1((HEAP32[i20 >> 2] | 0) + 4 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i62 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i62 + 4 >> 2];
    _st_push(i6, i15, i3);
    break;
   }
  default:
   {
    if ((HEAP32[i10 >> 2] | 0) == 1) {
     HEAP32[26333] = (HEAP32[26333] | 0) + 1;
     break L11;
    }
    HEAP32[i20 >> 2] = _alloc_state(HEAP32[HEAP32[i11 >> 2] >> 2] | 0, 0, 0) | 0;
    if (!(HEAP32[i20 >> 2] | 0)) break L8;
    i3 = HEAP32[i20 >> 2] | 0;
    _frag(i63, i3, _list1((HEAP32[i20 >> 2] | 0) + 4 | 0) | 0);
    i3 = HEAP32[i16 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i63 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i63 + 4 >> 2];
    _st_push(i6, i15, i3);
   }
  } while (0);
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
 }
 switch (i4 | 0) {
 case 10:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 12:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 17:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 19:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 25:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 31:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 37:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 43:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 49:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 54:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 56:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 67:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 86:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 107:
  {
   _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 case 125:
  {
   if ((HEAP32[i10 >> 2] | 0) == 1) {
    HEAP32[26333] = (HEAP32[26333] | 0) + 1;
    break;
   }
   _st_pop(i64, i15, HEAP32[i14 >> 2] | 0);
   HEAP32[i19 >> 2] = HEAP32[i64 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i64 + 4 >> 2];
   if ((HEAP32[i15 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    _st_error(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0);
    _vim_free(HEAP32[i14 >> 2] | 0);
    HEAP32[i7 >> 2] = 0;
    i65 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i5;
    return i65 | 0;
   }
   if ((HEAP32[i15 >> 2] | 0) != (HEAP32[i14 >> 2] | 0)) {
    _vim_free(HEAP32[i14 >> 2] | 0);
    _emsg(72875) | 0;
    HEAP32[26719] = 1;
    HEAP32[i7 >> 2] = 0;
    i65 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i5;
    return i65 | 0;
   }
   if ((HEAP32[26388] | 0) < (HEAP32[26333] | 0)) {
    i15 = HEAP32[26385] | 0;
    i11 = HEAP32[26388] | 0;
    HEAP32[26388] = i11 + 1;
    HEAP32[i22 >> 2] = i15 + (i11 * 28 | 0);
    HEAP32[HEAP32[i22 >> 2] >> 2] = -1023;
    HEAP32[(HEAP32[i22 >> 2] | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] = 0;
    HEAP32[(HEAP32[i22 >> 2] | 0) + 12 >> 2] = 0;
    _patch(HEAP32[i19 + 4 >> 2] | 0, HEAP32[i22 >> 2] | 0);
    HEAP32[i23 >> 2] = HEAP32[i19 >> 2];
    break;
   }
   _vim_free(HEAP32[i14 >> 2] | 0);
   _emsg(72964) | 0;
   HEAP32[26719] = 1;
   HEAP32[i7 >> 2] = 0;
   i65 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i5;
   return i65 | 0;
  }
 }
 _vim_free(HEAP32[i14 >> 2] | 0);
 HEAP32[i7 >> 2] = HEAP32[i23 >> 2];
 i65 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i5;
 return i65 | 0;
}

function _do_tag(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i8 = i7 + 16 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7;
 i11 = i7 + 248 | 0;
 i12 = i7 + 244 | 0;
 i13 = i7 + 240 | 0;
 i14 = i7 + 236 | 0;
 i15 = i7 + 232 | 0;
 i16 = i7 + 228 | 0;
 i17 = i7 + 224 | 0;
 i18 = i7 + 220 | 0;
 i19 = i7 + 216 | 0;
 i20 = i7 + 212 | 0;
 i21 = i7 + 208 | 0;
 i22 = i7 + 204 | 0;
 i23 = i7 + 200 | 0;
 i24 = i7 + 196 | 0;
 i25 = i7 + 192 | 0;
 i26 = i7 + 188 | 0;
 i27 = i7 + 184 | 0;
 i28 = i7 + 180 | 0;
 i29 = i7 + 176 | 0;
 i30 = i7 + 172 | 0;
 i31 = i7 + 168 | 0;
 i32 = i7 + 164 | 0;
 i33 = i7 + 160 | 0;
 i34 = i7 + 156 | 0;
 i35 = i7 + 152 | 0;
 i36 = i7 + 148 | 0;
 i37 = i7 + 136 | 0;
 i38 = i7 + 132 | 0;
 i39 = i7 + 96 | 0;
 i40 = i7 + 60 | 0;
 i41 = i7 + 56 | 0;
 i42 = i7 + 52 | 0;
 i43 = i7 + 48 | 0;
 i44 = i7 + 44 | 0;
 i45 = i7 + 40 | 0;
 i46 = i7 + 36 | 0;
 i47 = i7 + 32 | 0;
 i48 = i7 + 28 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = (HEAP32[26881] | 0) + 316;
 HEAP32[i17 >> 2] = HEAP32[(HEAP32[26881] | 0) + 796 >> 2];
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[26881] | 0) + 800 >> 2];
 HEAP32[i19 >> 2] = 0;
 HEAP32[i20 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
 HEAP32[i21 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i22 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i24 >> 2] = 0;
 HEAP32[i33 >> 2] = 0;
 HEAP32[i34 >> 2] = 0;
 HEAP32[i36 >> 2] = 0;
 HEAP32[i45 >> 2] = 0;
 HEAP32[i46 >> 2] = HEAP32[(HEAP32[26773] | 0) + 68 >> 2];
 if ((HEAP32[i12 >> 2] | 0) == 8) {
  HEAP32[i12 >> 2] = 1;
  HEAP32[i33 >> 2] = 1;
 }
 HEAP32[i23 >> 2] = HEAP32[26508];
 _free_string_option(HEAP32[26509] | 0);
 HEAP32[26509] = 0;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i37 + 4 >> 2] = 0;
 HEAP32[i37 + 8 >> 2] = 0;
 if (HEAP32[27007] | 0) i6 = 6; else if (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) {
  HEAP32[i44 >> 2] = 0;
  HEAP32[i24 >> 2] = 1;
  i6 = 51;
 } else i6 = 6;
 L7 : do if ((i6 | 0) == 6) {
  HEAP32[i44 >> 2] = 1;
  do if (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) if ((HEAP32[i12 >> 2] | 0) == 1 | (HEAP32[i12 >> 2] | 0) == 7 | (HEAP32[i12 >> 2] | 0) == 9) {
   while (1) {
    if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break;
    i5 = HEAP32[i16 >> 2] | 0;
    i4 = (HEAP32[i18 >> 2] | 0) + -1 | 0;
    HEAP32[i18 >> 2] = i4;
    _vim_free(HEAP32[i5 + (i4 * 24 | 0) >> 2] | 0);
   }
   i4 = (HEAP32[i18 >> 2] | 0) + 1 | 0;
   HEAP32[i18 >> 2] = i4;
   if ((i4 | 0) > 20) {
    HEAP32[i18 >> 2] = 20;
    _vim_free(HEAP32[HEAP32[i16 >> 2] >> 2] | 0);
    HEAP32[i26 >> 2] = 1;
    while (1) {
     if ((HEAP32[i26 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break;
     i4 = HEAP32[i16 >> 2] | 0;
     i5 = HEAP32[i26 >> 2] | 0;
     i3 = i4 + ((i5 - 1 | 0) * 24 | 0) | 0;
     i2 = i4 + ((i5 | 0) * 24 | 0) | 0;
     HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
     HEAP32[i3 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
     HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
    }
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
   }
   i2 = _vim_strsave(HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) >> 2] = i2;
   i3 = HEAP32[i18 >> 2] | 0;
   if (!i2) {
    HEAP32[(HEAP32[26881] | 0) + 800 >> 2] = i3 - 1;
    break L7;
   } else {
    HEAP32[(HEAP32[26881] | 0) + 800 >> 2] = i3;
    HEAP32[i36 >> 2] = 1;
    HEAP32[i24 >> 2] = 1;
    break;
   }
  } else i6 = 19; else i6 = 19; while (0);
  do if ((i6 | 0) == 19) {
   if (!(HEAP32[i18 >> 2] | 0)) {
    _emsg(93738) | 0;
    break L7;
   }
   if ((HEAP32[i12 >> 2] | 0) == 2) {
    i3 = (HEAP32[i17 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0;
    HEAP32[i17 >> 2] = i3;
    if ((i3 | 0) < 0) {
     _emsg(78787) | 0;
     i3 = ((HEAP32[i17 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0) == 0;
     HEAP32[i17 >> 2] = 0;
     if (i3) break L7;
    } else if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) {
     _emsg(78761) | 0;
     break L7;
    }
    i3 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 4 | 0;
    HEAP32[i37 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i37 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i37 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    do if ((HEAP32[i37 + 8 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0)) if (!(_buflist_getfile(HEAP32[i37 + 8 >> 2] | 0, HEAP32[i37 >> 2] | 0, 1, HEAP32[i14 >> 2] | 0) | 0)) {
     HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
     break L7;
    } else {
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i37 >> 2];
     break;
    } else {
     _setpcmark();
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i37 >> 2];
    } while (0);
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
    HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
    _check_cursor();
    _FreeWild(HEAP32[26508] | 0, HEAP32[26510] | 0);
    HEAP32[26508] = 0;
    _tag_freematch();
    break L7;
   }
   if ((HEAP32[i12 >> 2] | 0) == 1) {
    HEAP32[i36 >> 2] = 1;
    i3 = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) - 1) | 0;
    HEAP32[i17 >> 2] = i3;
    if ((i3 | 0) >= (HEAP32[i18 >> 2] | 0)) {
     HEAP32[i17 >> 2] = (HEAP32[i18 >> 2] | 0) - 1;
     _emsg(78761) | 0;
     HEAP32[i36 >> 2] = 0;
    } else if ((HEAP32[i17 >> 2] | 0) < 0) {
     _emsg(78787) | 0;
     HEAP32[i17 >> 2] = 0;
     break L7;
    }
    HEAP32[i19 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 16 >> 2];
    HEAP32[i20 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 20 >> 2];
    HEAP32[i24 >> 2] = 1;
    break;
   }
   HEAP32[i22 >> 2] = HEAP32[i17 >> 2];
   i3 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
   HEAP32[i17 >> 2] = i3;
   HEAP32[i17 >> 2] = (i3 | 0) < 0 ? 0 : i3;
   HEAP32[i19 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 16 >> 2];
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 20 >> 2];
   switch (HEAP32[i12 >> 2] | 0) {
   case 5:
    {
     HEAP32[i19 >> 2] = (HEAP32[i13 >> 2] | 0) - 1;
     break;
    }
   case 6:
   case 9:
   case 7:
    {
     HEAP32[i19 >> 2] = 2147483646;
     break;
    }
   case 3:
    {
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
     break;
    }
   case 4:
    {
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
     break;
    }
   default:
    {}
   }
   if ((HEAP32[i19 >> 2] | 0) >= 2147483647) {
    HEAP32[i19 >> 2] = 2147483646;
    break;
   }
   if ((HEAP32[i19 >> 2] | 0) < 0) {
    _emsg(78110) | 0;
    HEAP32[i45 >> 2] = 1;
    HEAP32[i19 >> 2] = 0;
    HEAP32[i20 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
   }
  } while (0);
  i3 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 4 | 0;
  HEAP32[i37 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i37 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i37 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  if (HEAP32[i36 >> 2] | 0) {
   i3 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 4 | 0;
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 4 + 8 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
  }
  HEAP32[(HEAP32[26881] | 0) + 796 >> 2] = HEAP32[i17 >> 2];
  if ((HEAP32[i12 >> 2] | 0) != 7 & (HEAP32[i12 >> 2] | 0) != 9) {
   HEAP32[(HEAP32[26881] | 0) + 316 + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 16 >> 2] = HEAP32[i19 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 316 + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 20 >> 2] = HEAP32[i20 >> 2];
   i6 = 51;
  } else i6 = 51;
 } while (0);
 do if ((i6 | 0) == 51) {
  if ((HEAP32[i20 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0)) {
   HEAP32[i47 >> 2] = _buflist_findnr(HEAP32[i20 >> 2] | 0) | 0;
   if (HEAP32[i47 >> 2] | 0) HEAP32[i46 >> 2] = HEAP32[(HEAP32[i47 >> 2] | 0) + 68 >> 2];
  }
  while (1) {
   if (HEAP32[i44 >> 2] | 0) HEAP32[i32 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) >> 2]; else HEAP32[i32 >> 2] = HEAP32[i11 >> 2];
   if (!(HEAP32[26511] | 0)) i49 = 1; else i49 = (_strcmp(HEAP32[26511] | 0, HEAP32[i32 >> 2] | 0) | 0) != 0;
   HEAP32[i25 >> 2] = i49 & 1;
   if (HEAP32[i24 >> 2] | 0) i6 = 62; else if (HEAP32[i25 >> 2] | 0 ? 1 : (HEAP32[26512] | 0) != 2147483647 ? (HEAP32[i19 >> 2] | 0) >= (HEAP32[26508] | 0) : 0) i6 = 62;
   if ((i6 | 0) == 62) {
    i6 = 0;
    if (HEAP32[i25 >> 2] | 0) {
     _vim_free(HEAP32[26511] | 0);
     HEAP32[26511] = _vim_strsave(HEAP32[i32 >> 2] | 0) | 0;
    }
    if ((HEAP32[i12 >> 2] | 0) == 1 | (HEAP32[i12 >> 2] | 0) == 7 | (HEAP32[i12 >> 2] | 0) == 9) HEAP32[i19 >> 2] = 2147483646;
    HEAP32[26512] = (HEAP32[i19 >> 2] | 0) + 1;
    if (HEAP32[i33 >> 2] | 0) i6 = 69; else if ((HEAPU8[HEAP32[i32 >> 2] >> 0] | 0) == 47) {
     HEAP32[26513] = 4;
     HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
    } else i6 = 69;
    if ((i6 | 0) == 69) {
     i6 = 0;
     HEAP32[26513] = 8;
    }
    if (HEAP32[i15 >> 2] | 0) HEAP32[26513] = HEAP32[26513] | 32;
    if ((_find_tags(HEAP32[i32 >> 2] | 0, i41, i42, HEAP32[26513] | 0, HEAP32[26512] | 0, HEAP32[i46 >> 2] | 0) | 0) == 1) if ((HEAP32[i41 >> 2] | 0) < (HEAP32[26512] | 0)) HEAP32[26512] = 2147483647;
    L107 : do if (!((HEAP32[i24 >> 2] | 0) != 0 | (HEAP32[i25 >> 2] | 0) != 0)) {
     HEAP32[i29 >> 2] = 0;
     HEAP32[i27 >> 2] = 0;
     while (1) {
      if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[26508] | 0)) break L107;
      _parse_match(HEAP32[(HEAP32[26510] | 0) + (HEAP32[i27 >> 2] << 2) >> 2] | 0, i39) | 0;
      HEAP32[i26 >> 2] = HEAP32[i29 >> 2];
      while (1) {
       if ((HEAP32[i26 >> 2] | 0) >= (HEAP32[i41 >> 2] | 0)) break;
       _parse_match(HEAP32[(HEAP32[i42 >> 2] | 0) + (HEAP32[i26 >> 2] << 2) >> 2] | 0, i40) | 0;
       if (!(_strcmp(HEAP32[i39 >> 2] | 0, HEAP32[i40 >> 2] | 0) | 0)) {
        i6 = 81;
        break;
       }
       HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
      }
      if ((i6 | 0) == 81) {
       i6 = 0;
       HEAP32[i31 >> 2] = HEAP32[(HEAP32[i42 >> 2] | 0) + (HEAP32[i26 >> 2] << 2) >> 2];
       HEAP32[i28 >> 2] = HEAP32[i26 >> 2];
       while (1) {
        if ((HEAP32[i28 >> 2] | 0) <= (HEAP32[i29 >> 2] | 0)) break;
        i36 = HEAP32[i42 >> 2] | 0;
        HEAP32[i36 + (HEAP32[i28 >> 2] << 2) >> 2] = HEAP32[i36 + ((HEAP32[i28 >> 2] | 0) - 1 << 2) >> 2];
        HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + -1;
       }
       i36 = HEAP32[i31 >> 2] | 0;
       i18 = HEAP32[i42 >> 2] | 0;
       i21 = HEAP32[i29 >> 2] | 0;
       HEAP32[i29 >> 2] = i21 + 1;
       HEAP32[i18 + (i21 << 2) >> 2] = i36;
      }
      HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
     }
    } while (0);
    _FreeWild(HEAP32[26508] | 0, HEAP32[26510] | 0);
    HEAP32[26508] = HEAP32[i41 >> 2];
    HEAP32[26510] = HEAP32[i42 >> 2];
   }
   if ((HEAP32[26508] | 0) <= 0) {
    i6 = 89;
    break;
   }
   HEAP32[i48 >> 2] = 0;
   do if ((HEAP32[i12 >> 2] | 0) == 1) {
    i36 = HEAP32[i13 >> 2] | 0;
    HEAP32[i19 >> 2] = (i36 | 0) > 0 ? i36 - 1 | 0 : 0;
   } else {
    if ((HEAP32[i12 >> 2] | 0) != 7) if (!((HEAP32[i12 >> 2] | 0) == 9 & (HEAP32[26508] | 0) > 1)) break;
    _parse_match(HEAP32[HEAP32[26510] >> 2] | 0, i39) | 0;
    i36 = (HEAP32[i39 + 4 >> 2] | 0) - (HEAP32[i39 >> 2] | 0) + 2 | 0;
    HEAP32[i38 >> 2] = i36;
    i21 = (HEAP32[i38 >> 2] | 0) < 18 ? 18 : i36;
    HEAP32[i38 >> 2] = i21;
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) > ((HEAP32[10174] | 0) - 25 | 0) ? 2147483647 : i21;
    if (!(HEAP32[27043] | 0)) HEAP32[26711] = 0;
    _msg_start();
    _msg_puts_attr(78176, HEAP32[27064] | 0);
    _msg_clr_eos();
    _taglen_advance(HEAP32[i38 >> 2] | 0);
    _msg_puts_attr(78193, HEAP32[27064] | 0);
    HEAP32[i26 >> 2] = 0;
    L135 : while (1) {
     if ((HEAP32[i26 >> 2] | 0) >= (HEAP32[26508] | 0)) break;
     if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
     _parse_match(HEAP32[(HEAP32[26510] | 0) + (HEAP32[i26 >> 2] << 2) >> 2] | 0, i39) | 0;
     if ((HEAP32[i24 >> 2] | 0) == 0 & (HEAP32[i44 >> 2] | 0) != 0) if ((HEAP32[i26 >> 2] | 0) == (HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 16 >> 2] | 0)) HEAP8[HEAP32[26882] >> 0] = 62; else i6 = 103; else i6 = 103;
     if ((i6 | 0) == 103) {
      i6 = 0;
      HEAP8[HEAP32[26882] >> 0] = 32;
     }
     i21 = (HEAP32[26882] | 0) + 1 | 0;
     i36 = HEAP32[31124 + ((HEAPU8[HEAP32[(HEAP32[26510] | 0) + (HEAP32[i26 >> 2] << 2) >> 2] >> 0] & 7) << 2) >> 2] | 0;
     HEAP32[i10 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
     HEAP32[i10 + 4 >> 2] = i36;
     _vim_snprintf(i21, 1024, 78199, i10) | 0;
     _msg_puts(HEAP32[26882] | 0);
     if (HEAP32[i39 + 28 >> 2] | 0) {
      i21 = HEAP32[i39 + 28 >> 2] | 0;
      _msg_outtrans_len(i21 | 0, (HEAP32[i39 + 32 >> 2] | 0) - i21 | 0) | 0;
     }
     _msg_advance(13);
     i21 = HEAP32[i39 >> 2] | 0;
     _msg_outtrans_len_attr(i21 | 0, (HEAP32[i39 + 4 >> 2] | 0) - i21 | 0, HEAP32[27064] | 0) | 0;
     _msg_putchar(32);
     _taglen_advance(HEAP32[i38 >> 2] | 0);
     HEAP32[i31 >> 2] = _tag_full_fname(i39) | 0;
     if (HEAP32[i31 >> 2] | 0) {
      _msg_puts_long_attr(HEAP32[i31 >> 2] | 0, HEAP32[27051] | 0);
      _vim_free(HEAP32[i31 >> 2] | 0);
     }
     if ((HEAP32[27043] | 0) > 0) _msg_putchar(10);
     if (HEAP32[26834] | 0) break;
     _msg_advance(15);
     HEAP32[i35 >> 2] = HEAP32[i39 + 20 >> 2];
     do if (HEAP32[i35 >> 2] | 0) {
      HEAP32[i31 >> 2] = (HEAP32[i35 >> 2] | 0) + 3;
      L157 : while (1) {
       if (!(HEAPU8[HEAP32[i31 >> 2] >> 0] | 0)) break;
       if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 13) break;
       if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 10) break;
       while (1) {
        i50 = HEAP32[i31 >> 2] | 0;
        if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) != 9) break;
        HEAP32[i31 >> 2] = i50 + 1;
       }
       do if (!(_strncmp(i50, 78207, 5) | 0)) {
        if (!(_vim_isspace(HEAPU8[(HEAP32[i31 >> 2] | 0) + 5 >> 0] | 0) | 0)) break;
        HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 5;
        continue L157;
       } while (0);
       do if ((HEAP32[i31 >> 2] | 0) != (HEAP32[i39 + 28 >> 2] | 0)) {
        if (((HEAP32[i31 >> 2] | 0) + 5 | 0) == (HEAP32[i39 + 28 >> 2] | 0)) if (!(_strncmp(HEAP32[i31 >> 2] | 0, 78213, 5) | 0)) break;
        HEAP32[i43 >> 2] = HEAP32[27057];
        while (1) {
         if (!(HEAPU8[HEAP32[i31 >> 2] >> 0] | 0)) break;
         if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 13) break;
         if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 10) break;
         i21 = HEAP32[27043] | 0;
         i36 = i21 + (_ptr2cells(HEAP32[i31 >> 2] | 0) | 0) | 0;
         if ((i36 | 0) >= (HEAP32[10174] | 0)) {
          _msg_putchar(10);
          if (HEAP32[26834] | 0) break;
          _msg_advance(15);
         }
         HEAP32[i31 >> 2] = _msg_outtrans_one(HEAP32[i31 >> 2] | 0, HEAP32[i43 >> 2] | 0) | 0;
         if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 9) {
          i6 = 134;
          break;
         }
         if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 58) HEAP32[i43 >> 2] = 0;
        }
        if ((i6 | 0) == 134) {
         i6 = 0;
         _msg_puts_attr(97452, HEAP32[i43 >> 2] | 0);
        }
        continue L157;
       } while (0);
       HEAP32[i31 >> 2] = HEAP32[i39 + 32 >> 2];
      }
      if ((HEAP32[27043] | 0) <= 15) break;
      _msg_putchar(10);
      if (HEAP32[26834] | 0) break L135;
      _msg_advance(15);
     } else {
      HEAP32[i31 >> 2] = HEAP32[i39 + 16 >> 2];
      while (1) {
       if (!(HEAPU8[HEAP32[i31 >> 2] >> 0] | 0)) break;
       if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 13) break;
       if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 10) break;
       HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
      }
      HEAP32[i35 >> 2] = HEAP32[i31 >> 2];
     } while (0);
     HEAP32[i31 >> 2] = HEAP32[i39 + 16 >> 2];
     if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 47) i6 = 150; else if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 63) i6 = 150;
     do if ((i6 | 0) == 150) {
      i6 = 0;
      HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
      if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) != 94) break;
      HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
     } while (0);
     while (1) {
      if ((HEAP32[i31 >> 2] | 0) == (HEAP32[i35 >> 2] | 0)) break;
      if (!(_vim_isspace(HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) | 0)) break;
      HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
     }
     L214 : while (1) {
      if ((HEAP32[i31 >> 2] | 0) == (HEAP32[i35 >> 2] | 0)) break;
      i36 = HEAP32[27043] | 0;
      if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 9) i51 = 1; else i51 = _ptr2cells(HEAP32[i31 >> 2] | 0) | 0;
      if ((i36 + i51 | 0) > (HEAP32[10174] | 0)) _msg_putchar(10);
      if (HEAP32[26834] | 0) break;
      _msg_advance(15);
      do if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 92) {
       if ((HEAPU8[(HEAP32[i31 >> 2] | 0) + 1 >> 0] | 0) != (HEAPU8[HEAP32[i39 + 16 >> 2] >> 0] | 0)) if ((HEAPU8[(HEAP32[i31 >> 2] | 0) + 1 >> 0] | 0) != 92) break;
       HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
      } while (0);
      if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 9) {
       _msg_putchar(32);
       HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
      } else HEAP32[i31 >> 2] = _msg_outtrans_one(HEAP32[i31 >> 2] | 0, 0) | 0;
      do if ((HEAP32[i31 >> 2] | 0) == ((HEAP32[i35 >> 2] | 0) + -2 | 0)) {
       if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) != 36) break;
       if ((HEAPU8[(HEAP32[i31 >> 2] | 0) + 1 >> 0] | 0) == (HEAPU8[HEAP32[i39 + 16 >> 2] >> 0] | 0)) break L214;
      } while (0);
      do if ((HEAP32[i31 >> 2] | 0) == ((HEAP32[i35 >> 2] | 0) + -1 | 0)) {
       if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) != (HEAPU8[HEAP32[i39 + 16 >> 2] >> 0] | 0)) break;
       if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 47) break L214;
       if ((HEAPU8[HEAP32[i31 >> 2] >> 0] | 0) == 63) break L214;
      } while (0);
     }
     if (HEAP32[27043] | 0) _msg_putchar(10);
     _ui_breakcheck();
     HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
    }
    if (HEAP32[26834] | 0) HEAP32[26834] = 0;
    HEAP32[i48 >> 2] = 1;
   } while (0);
   if ((HEAP32[i48 >> 2] | 0) == 1) {
    HEAP32[i26 >> 2] = _prompt_for_number(0) | 0;
    if ((HEAP32[i26 >> 2] | 0) <= 0) {
     i6 = 188;
     break;
    }
    if ((HEAP32[i26 >> 2] | 0) > (HEAP32[26508] | 0)) {
     i6 = 188;
     break;
    }
    if (HEAP32[26834] | 0) {
     i6 = 188;
     break;
    }
    HEAP32[i19 >> 2] = (HEAP32[i26 >> 2] | 0) - 1;
   }
   if ((HEAP32[i19 >> 2] | 0) >= (HEAP32[26508] | 0)) {
    if (((HEAP32[i12 >> 2] | 0) == 3 | (HEAP32[i12 >> 2] | 0) == 5) & (HEAP32[26509] | 0) == 0) {
     if ((HEAP32[26508] | 0) == 1) _emsg(78219) | 0; else _emsg(78256) | 0;
     HEAP32[i45 >> 2] = 1;
    }
    HEAP32[i19 >> 2] = (HEAP32[26508] | 0) - 1;
   }
   if (HEAP32[i44 >> 2] | 0) {
    HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 16 >> 2] = HEAP32[i19 >> 2];
    HEAP32[(HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 20 >> 2] = HEAP32[i20 >> 2];
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   }
   if (HEAP32[26509] | 0) if ((HEAP32[i34 >> 2] | 0) != (HEAP32[i19 >> 2] | 0)) {
    HEAP32[i9 >> 2] = HEAP32[26509];
    _smsg(78297, i9) | 0;
   }
   HEAP32[i30 >> 2] = HEAPU8[HEAP32[(HEAP32[26510] | 0) + (HEAP32[i19 >> 2] << 2) >> 2] >> 0] & 4;
   if ((HEAP32[i12 >> 2] | 0) != 1 & (HEAP32[i12 >> 2] | 0) != 7 & (HEAP32[i12 >> 2] | 0) != 9) if (!(((HEAP32[26508] | 0) > 1 | (HEAP32[i30 >> 2] | 0) != 0) ^ 1 | (HEAP32[i45 >> 2] | 0) != 0)) {
    i36 = HEAP32[26882] | 0;
    i21 = HEAP32[26508] | 0;
    i18 = (HEAP32[26512] | 0) != 2147483647 ? 78322 : 114072;
    HEAP32[i8 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    HEAP32[i8 + 4 >> 2] = i21;
    HEAP32[i8 + 8 >> 2] = i18;
    _sprintf(i36, 78331, i8) | 0;
    if (HEAP32[i30 >> 2] | 0) _strcat(HEAP32[26882] | 0, 78346) | 0;
    if ((HEAP32[26508] | 0) > 1 ? (HEAP32[i24 >> 2] | 0 ? 1 : (HEAP32[26508] | 0) > (HEAP32[i23 >> 2] | 0)) : 0) {
     i36 = HEAP32[26882] | 0;
     if (HEAP32[i30 >> 2] | 0) _msg_attr(i36, HEAP32[27067] | 0) | 0; else _msg(i36) | 0;
     HEAP32[26710] = 1;
    } else _give_warning(HEAP32[26882] | 0, HEAP32[i30 >> 2] | 0);
    if ((((HEAP32[i30 >> 2] | 0) == 0 | (HEAP32[27044] | 0) != 0) ^ 1) & (HEAP32[26809] | 0) == 0) {
     _out_flush();
     _ui_delay(1e3, 1);
    }
   }
   HEAP32[i26 >> 2] = _jumpto_tag(HEAP32[(HEAP32[26510] | 0) + (HEAP32[i19 >> 2] << 2) >> 2] | 0, HEAP32[i14 >> 2] | 0, (HEAP32[i12 >> 2] | 0) != 10 & 1) | 0;
   if ((HEAP32[i26 >> 2] | 0) != 99) {
    i6 = 227;
    break;
   }
   if (!((HEAP32[i12 >> 2] | 0) == 4 & (HEAP32[i19 >> 2] | 0) > 0)) {
    if (!((HEAP32[i12 >> 2] | 0) == 1 | (HEAP32[i12 >> 2] | 0) == 3 | (HEAP32[i12 >> 2] | 0) == 5)) {
     i6 = 226;
     break;
    }
    if ((HEAP32[26512] | 0) == 2147483647) if ((HEAP32[i19 >> 2] | 0) >= ((HEAP32[26508] | 0) - 1 | 0)) {
     i6 = 226;
     break;
    }
   }
   HEAP32[i34 >> 2] = HEAP32[i19 >> 2];
   if (HEAP32[i44 >> 2] | 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
   if ((HEAP32[i12 >> 2] | 0) == 4) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + -1; else {
    HEAP32[i12 >> 2] = 3;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
  }
  if ((i6 | 0) == 89) {
   if (!(HEAP32[i15 >> 2] | 0)) break;
   _emsg2(78152, HEAP32[i32 >> 2] | 0) | 0;
   break;
  } else if ((i6 | 0) == 188) {
   if (!(HEAP32[i44 >> 2] | 0)) break;
   i36 = (HEAP32[i16 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) * 24 | 0) + 4 | 0;
   HEAP32[i36 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i36 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
   HEAP32[i36 + 8 >> 2] = HEAP32[i37 + 8 >> 2];
   HEAP32[i17 >> 2] = HEAP32[i22 >> 2];
   break;
  } else if ((i6 | 0) == 226) {
   _emsg2(78379, HEAP32[26509] | 0) | 0;
   break;
  } else if ((i6 | 0) == 227) {
   if (!(HEAP32[i44 >> 2] | 0)) break;
   if ((HEAP32[i17 >> 2] | 0) <= (HEAP32[(HEAP32[26881] | 0) + 800 >> 2] | 0)) break;
   HEAP32[i17 >> 2] = HEAP32[(HEAP32[26881] | 0) + 796 >> 2];
   break;
  }
 } while (0);
 if (!(HEAP32[i44 >> 2] | 0)) {
  HEAP32[26851] = 0;
  STACKTOP = i7;
  return 0;
 }
 if ((HEAP32[i17 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 800 >> 2] | 0)) {
  HEAP32[26851] = 0;
  STACKTOP = i7;
  return 0;
 }
 HEAP32[(HEAP32[26881] | 0) + 796 >> 2] = HEAP32[i17 >> 2];
 HEAP32[26851] = 0;
 STACKTOP = i7;
 return 0;
}
function _regatom(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i3;
 i5 = i3 + 92 | 0;
 i6 = i3 + 88 | 0;
 i7 = i3 + 84 | 0;
 i8 = i3 + 80 | 0;
 i9 = i3 + 76 | 0;
 i10 = i3 + 72 | 0;
 i11 = i3 + 68 | 0;
 i12 = i3 + 64 | 0;
 i13 = i3 + 60 | 0;
 i14 = i3 + 56 | 0;
 i15 = i3 + 52 | 0;
 i16 = i3 + 48 | 0;
 i17 = i3 + 44 | 0;
 i18 = i3 + 40 | 0;
 i19 = i3 + 36 | 0;
 i20 = i3 + 32 | 0;
 i21 = i3 + 28 | 0;
 i22 = i3 + 24 | 0;
 i23 = i3 + 20 | 0;
 i24 = i3 + 16 | 0;
 i25 = i3 + 12 | 0;
 i26 = i3 + 8 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = HEAP32[26395];
 HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
 HEAP32[i9 >> 2] = _getchr() | 0;
 L1 : do switch (HEAP32[i9 >> 2] | 0) {
 case -162:
  {
   HEAP32[i7 >> 2] = _regnode(1) | 0;
   break;
  }
 case -220:
  {
   HEAP32[i7 >> 2] = _regnode(2) | 0;
   break;
  }
 case -196:
  {
   HEAP32[i7 >> 2] = _regnode(15) | 0;
   break;
  }
 case -194:
  {
   HEAP32[i7 >> 2] = _regnode(16) | 0;
   break;
  }
 case -161:
  {
   HEAP32[i9 >> 2] = _no_Magic(_getchr() | 0) | 0;
   if ((HEAP32[i9 >> 2] | 0) == 94) {
    HEAP32[i7 >> 2] = _regnode(1) | 0;
    break L1;
   }
   if ((HEAP32[i9 >> 2] | 0) == 36) {
    HEAP32[i7 >> 2] = _regnode(2) | 0;
    break L1;
   } else {
    HEAP32[i11 >> 2] = 30;
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8;
    if ((HEAP32[i9 >> 2] | 0) == 91) {
     i2 = 110;
     break L1;
    } else {
     i2 = 11;
     break L1;
    }
   }
   break;
  }
 case -171:
 case -139:
 case -180:
 case -148:
 case -191:
 case -159:
 case -184:
 case -152:
 case -169:
 case -137:
 case -177:
 case -145:
 case -168:
 case -136:
 case -188:
 case -156:
 case -173:
 case -141:
 case -176:
 case -144:
 case -186:
 case -154:
 case -181:
 case -149:
 case -183:
 case -151:
 case -210:
  {
   i2 = 11;
   break;
  }
 case -146:
  {
   if (HEAP32[26401] | 0) {
    HEAP32[i7 >> 2] = _regnode(5) | 0;
    _regc(10);
    _regc(0);
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 3;
    break L1;
   } else {
    HEAP32[i7 >> 2] = _regnode(18) | 0;
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 9;
    break L1;
   }
   break;
  }
 case -216:
  {
   if (HEAP32[26454] | 0) {
    _emsg2(74253, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
    HEAP32[26719] = 1;
    HEAP32[i5 >> 2] = 0;
    i27 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i3;
    return i27 | 0;
   }
   HEAP32[i7 >> 2] = _reg(1, i8) | 0;
   if (HEAP32[i7 >> 2] | 0) {
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | HEAP32[i8 >> 2] & 29;
    break L1;
   }
   HEAP32[i5 >> 2] = 0;
   i27 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i3;
   return i27 | 0;
  }
 case -215:
 case -218:
 case -132:
 case 0:
  {
   if (HEAP32[26454] | 0) {
    _emsg2(74253, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
    HEAP32[26719] = 1;
    HEAP32[i5 >> 2] = 0;
    i27 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i3;
    return i27 | 0;
   } else {
    _iemsg(92374);
    HEAP32[26719] = 1;
    HEAP32[i5 >> 2] = 0;
    i27 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i3;
    return i27 | 0;
   }
   break;
  }
 case -214:
 case -133:
 case -192:
 case -213:
 case -193:
 case -195:
  {
   HEAP32[i9 >> 2] = _no_Magic(HEAP32[i9 >> 2] | 0) | 0;
   i1 = HEAP32[26882] | 0;
   i28 = HEAP32[26391] | 0;
   i29 = HEAP32[i9 >> 2] | 0;
   HEAP32[i4 >> 2] = ((HEAP32[i9 >> 2] | 0) == 42 ? (i28 | 0) >= 3 & 1 : (i28 | 0) == 4 & 1) | 0 ? 114072 : 73093;
   HEAP32[i4 + 4 >> 2] = i29;
   _sprintf(i1, 74282, i4) | 0;
   _emsg(HEAP32[26882] | 0) | 0;
   HEAP32[26719] = 1;
   HEAP32[i5 >> 2] = 0;
   i27 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i3;
   return i27 | 0;
  }
 case -130:
  {
   if (!(HEAP32[26310] | 0)) {
    _emsg(93083) | 0;
    HEAP32[26719] = 1;
    HEAP32[i5 >> 2] = 0;
    i27 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i3;
    return i27 | 0;
   }
   HEAP32[i7 >> 2] = _regnode(5) | 0;
   HEAP32[i13 >> 2] = HEAP32[26310];
   while (1) {
    if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) break;
    i1 = HEAP32[i13 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 1;
    _regc(HEAPU8[i1 >> 0] | 0);
   }
   _regc(0);
   if (HEAPU8[HEAP32[26310] >> 0] | 0 | 0) {
    i1 = HEAP32[i6 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
    if (((HEAP32[i13 >> 2] | 0) - (HEAP32[26310] | 0) | 0) == 1) {
     i1 = HEAP32[i6 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 2;
    }
   }
   break;
  }
 case -199:
 case -200:
 case -201:
 case -202:
 case -203:
 case -204:
 case -205:
 case -206:
 case -207:
  {
   HEAP32[i14 >> 2] = (HEAP32[i9 >> 2] | 0) + 208;
   if (_seen_endbrace(HEAP32[i14 >> 2] | 0) | 0) {
    HEAP32[i7 >> 2] = _regnode(100 + (HEAP32[i14 >> 2] | 0) | 0) | 0;
    break L1;
   }
   HEAP32[i5 >> 2] = 0;
   i27 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i3;
   return i27 | 0;
  }
 case -134:
  {
   HEAP32[i9 >> 2] = _no_Magic(_getchr() | 0) | 0;
   switch (HEAP32[i9 >> 2] | 0) {
   case 115:
    {
     HEAP32[i7 >> 2] = _regnode(80) | 0;
     if (_re_mult_next(73618) | 0) break L1;
     HEAP32[i5 >> 2] = 0;
     i27 = HEAP32[i5 >> 2] | 0;
     STACKTOP = i3;
     return i27 | 0;
    }
   case 101:
    {
     HEAP32[i7 >> 2] = _regnode(90) | 0;
     if (_re_mult_next(73622) | 0) break L1;
     HEAP32[i5 >> 2] = 0;
     i27 = HEAP32[i5 >> 2] | 0;
     STACKTOP = i3;
     return i27 | 0;
    }
   default:
    {
     _emsg(74308) | 0;
     HEAP32[26719] = 1;
     HEAP32[i5 >> 2] = 0;
     i27 = HEAP32[i5 >> 2] | 0;
     STACKTOP = i3;
     return i27 | 0;
    }
   }
   break;
  }
 case -219:
  {
   HEAP32[i9 >> 2] = _no_Magic(_getchr() | 0) | 0;
   switch (HEAP32[i9 >> 2] | 0) {
   case 40:
    {
     if (HEAP32[26454] | 0) {
      _emsg2(74253, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
      HEAP32[26719] = 1;
      HEAP32[i5 >> 2] = 0;
      i27 = HEAP32[i5 >> 2] | 0;
      STACKTOP = i3;
      return i27 | 0;
     }
     HEAP32[i7 >> 2] = _reg(3, i8) | 0;
     if (HEAP32[i7 >> 2] | 0) {
      i1 = HEAP32[i6 >> 2] | 0;
      HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | HEAP32[i8 >> 2] & 29;
      break L1;
     }
     HEAP32[i5 >> 2] = 0;
     i27 = HEAP32[i5 >> 2] | 0;
     STACKTOP = i3;
     return i27 | 0;
    }
   case 94:
    {
     HEAP32[i7 >> 2] = _regnode(201) | 0;
     break L1;
     break;
    }
   case 36:
    {
     HEAP32[i7 >> 2] = _regnode(202) | 0;
     break L1;
     break;
    }
   case 35:
    {
     HEAP32[i7 >> 2] = _regnode(203) | 0;
     break L1;
     break;
    }
   case 86:
    {
     HEAP32[i7 >> 2] = _regnode(208) | 0;
     break L1;
     break;
    }
   case 67:
    {
     HEAP32[i7 >> 2] = _regnode(209) | 0;
     break L1;
     break;
    }
   case 91:
    {
     if (HEAP32[26454] | 0) {
      _emsg2(74253, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
      HEAP32[26719] = 1;
      HEAP32[i5 >> 2] = 0;
      i27 = HEAP32[i5 >> 2] | 0;
      STACKTOP = i3;
      return i27 | 0;
     }
     HEAP32[i16 >> 2] = 0;
     HEAP32[i7 >> 2] = 0;
     while (1) {
      i1 = _getchr() | 0;
      HEAP32[i9 >> 2] = i1;
      if ((i1 | 0) == 93) {
       i2 = 66;
       break;
      }
      if (!(HEAP32[i9 >> 2] | 0)) {
       i2 = 59;
       break;
      }
      HEAP32[i17 >> 2] = _regnode(3) | 0;
      if (!(HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i17 >> 2]; else _regtail(HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0);
      _ungetchr();
      HEAP32[26454] = 1;
      HEAP32[i16 >> 2] = _regatom(HEAP32[i6 >> 2] | 0) | 0;
      HEAP32[26454] = 0;
      if (!(HEAP32[i16 >> 2] | 0)) {
       i2 = 64;
       break;
      }
     }
     if ((i2 | 0) == 59) {
      _emsg2(73704, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
      HEAP32[26719] = 1;
      HEAP32[i5 >> 2] = 0;
      i27 = HEAP32[i5 >> 2] | 0;
      STACKTOP = i3;
      return i27 | 0;
     } else if ((i2 | 0) == 64) {
      HEAP32[i5 >> 2] = 0;
      i27 = HEAP32[i5 >> 2] | 0;
      STACKTOP = i3;
      return i27 | 0;
     } else if ((i2 | 0) == 66) {
      if (!(HEAP32[i7 >> 2] | 0)) {
       _emsg2(73731, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
       HEAP32[26719] = 1;
       HEAP32[i5 >> 2] = 0;
       i27 = HEAP32[i5 >> 2] | 0;
       STACKTOP = i3;
       return i27 | 0;
      }
      HEAP32[i15 >> 2] = _regnode(3) | 0;
      HEAP32[i17 >> 2] = _regnode(6) | 0;
      L126 : do if ((HEAP32[i7 >> 2] | 0) != (-1 | 0)) {
       _regtail(HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0);
       _regtail(HEAP32[i15 >> 2] | 0, HEAP32[i17 >> 2] | 0);
       HEAP32[i17 >> 2] = HEAP32[i7 >> 2];
       while (1) {
        if ((HEAP32[i17 >> 2] | 0) == (HEAP32[i16 >> 2] | 0)) break L126;
        i1 = HEAP32[i17 >> 2] | 0;
        if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 3) {
         _regtail(i1, HEAP32[i15 >> 2] | 0);
         HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 3;
        } else HEAP32[i17 >> 2] = _regnext(i1) | 0;
       }
      } while (0);
      i1 = HEAP32[i6 >> 2] | 0;
      HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -4;
      break L1;
     }
     break;
    }
   case 85:
   case 117:
   case 120:
   case 111:
   case 100:
    {
     switch (HEAP32[i9 >> 2] | 0) {
     case 100:
      {
       HEAP32[i18 >> 2] = _getdecchrs() | 0;
       break;
      }
     case 111:
      {
       HEAP32[i18 >> 2] = _getoctchrs() | 0;
       break;
      }
     case 120:
      {
       HEAP32[i18 >> 2] = _gethexchrs(2) | 0;
       break;
      }
     case 117:
      {
       HEAP32[i18 >> 2] = _gethexchrs(4) | 0;
       break;
      }
     case 85:
      {
       HEAP32[i18 >> 2] = _gethexchrs(8) | 0;
       break;
      }
     default:
      HEAP32[i18 >> 2] = -1;
     }
     if ((HEAP32[i18 >> 2] | 0) < 0) {
      _emsg2(73662, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
      HEAP32[26719] = 1;
      HEAP32[i5 >> 2] = 0;
      i27 = HEAP32[i5 >> 2] | 0;
      STACKTOP = i3;
      return i27 | 0;
     }
     HEAP32[i7 >> 2] = _regnode(5) | 0;
     if (!(HEAP32[i18 >> 2] | 0)) _regc(10); else _regc(HEAP32[i18 >> 2] | 0);
     _regc(0);
     i1 = HEAP32[i6 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
     break L1;
     break;
    }
   default:
    {
     if (((HEAP32[i9 >> 2] | 0) == 60 ? 1 : ((HEAP32[i9 >> 2] | 0) - 48 | 0) >>> 0 < 10) | (HEAP32[i9 >> 2] | 0) == 62 | (HEAP32[i9 >> 2] | 0) == 39) {
      HEAP32[i19 >> 2] = 0;
      HEAP32[i20 >> 2] = HEAP32[i9 >> 2];
      if ((HEAP32[i20 >> 2] | 0) == 60 | (HEAP32[i20 >> 2] | 0) == 62) HEAP32[i9 >> 2] = _getchr() | 0;
      while (1) {
       if (((HEAP32[i9 >> 2] | 0) - 48 | 0) >>> 0 >= 10) break;
       HEAP32[i19 >> 2] = ((HEAP32[i19 >> 2] | 0) * 10 | 0) + ((HEAP32[i9 >> 2] | 0) - 48);
       HEAP32[i9 >> 2] = _getchr() | 0;
      }
      if ((HEAP32[i9 >> 2] | 0) == 39 & (HEAP32[i19 >> 2] | 0) == 0) {
       HEAP32[i9 >> 2] = _getchr() | 0;
       HEAP32[i7 >> 2] = _regnode(207) | 0;
       if ((HEAP32[i7 >> 2] | 0) == (-1 | 0)) {
        HEAP32[26404] = (HEAP32[26404] | 0) + 2;
        break L1;
       } else {
        i1 = HEAP32[i9 >> 2] & 255;
        i29 = HEAP32[26453] | 0;
        HEAP32[26453] = i29 + 1;
        HEAP8[i29 >> 0] = i1;
        i1 = HEAP32[i20 >> 2] & 255;
        i29 = HEAP32[26453] | 0;
        HEAP32[26453] = i29 + 1;
        HEAP8[i29 >> 0] = i1;
        break L1;
       }
      }
      if ((HEAP32[i9 >> 2] | 0) == 108 | (HEAP32[i9 >> 2] | 0) == 99 | (HEAP32[i9 >> 2] | 0) == 118) {
       do if ((HEAP32[i9 >> 2] | 0) == 108) {
        HEAP32[i7 >> 2] = _regnode(204) | 0;
        if (HEAP32[i12 >> 2] | 0) HEAP32[26394] = 1;
       } else if ((HEAP32[i9 >> 2] | 0) == 99) {
        HEAP32[i7 >> 2] = _regnode(205) | 0;
        break;
       } else {
        HEAP32[i7 >> 2] = _regnode(206) | 0;
        break;
       } while (0);
       if ((HEAP32[i7 >> 2] | 0) == (-1 | 0)) {
        HEAP32[26404] = (HEAP32[26404] | 0) + 5;
        break L1;
       } else {
        HEAP32[26453] = _re_put_long(HEAP32[26453] | 0, HEAP32[i19 >> 2] | 0) | 0;
        i1 = HEAP32[i20 >> 2] & 255;
        i29 = HEAP32[26453] | 0;
        HEAP32[26453] = i29 + 1;
        HEAP8[i29 >> 0] = i1;
        break L1;
       }
      }
     }
     _emsg2(74340, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
     HEAP32[26719] = 1;
     HEAP32[i5 >> 2] = 0;
     i27 = HEAP32[i5 >> 2] | 0;
     STACKTOP = i3;
     return i27 | 0;
    }
   }
   break;
  }
 case -165:
  {
   i2 = 110;
   break;
  }
 default:
  i2 = 229;
 } while (0);
 do if ((i2 | 0) == 11) {
  HEAP32[i10 >> 2] = _vim_strchr(73964, _no_Magic(HEAP32[i9 >> 2] | 0) | 0) | 0;
  if (HEAP32[i10 >> 2] | 0) {
   HEAP32[i7 >> 2] = _regnode((HEAP32[29956 + ((HEAP32[i10 >> 2] | 0) - 73964 << 2) >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) | 0;
   i20 = HEAP32[i6 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 3;
   break;
  }
  _emsg(74230) | 0;
  HEAP32[26719] = 1;
  HEAP32[i5 >> 2] = 0;
  i27 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i27 | 0;
 } else if ((i2 | 0) == 110) {
  HEAP32[i21 >> 2] = _skip_anyof(HEAP32[26392] | 0) | 0;
  if ((HEAPU8[HEAP32[i21 >> 2] >> 0] | 0 | 0) != 93) {
   if (!(HEAP32[26402] | 0)) {
    i2 = 229;
    break;
   }
   _emsg2(73874, (HEAP32[26391] | 0) > 2 ? 114072 : 73093) | 0;
   HEAP32[26719] = 1;
   HEAP32[i5 >> 2] = 0;
   i27 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i3;
   return i27 | 0;
  }
  HEAP32[i22 >> 2] = -1;
  i20 = HEAP32[i11 >> 2] | 0;
  if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 94) {
   HEAP32[i7 >> 2] = _regnode(22 + i20 | 0) | 0;
   HEAP32[26392] = (HEAP32[26392] | 0) + 1;
  } else HEAP32[i7 >> 2] = _regnode(21 + i20 | 0) | 0;
  if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 93) i2 = 116; else if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 45) i2 = 116;
  if ((i2 | 0) == 116) {
   HEAP32[i22 >> 2] = HEAPU8[HEAP32[26392] >> 0];
   i20 = HEAP32[26392] | 0;
   HEAP32[26392] = i20 + 1;
   _regc(HEAPU8[i20 >> 0] | 0);
  }
  L173 : while (1) {
   if (!(HEAPU8[HEAP32[26392] >> 0] | 0)) break;
   if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 93) break;
   i20 = HEAP32[26392] | 0;
   L177 : do if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 45) {
    HEAP32[26392] = i20 + 1;
    do if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) != 93) if (!((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 0 | (HEAP32[i22 >> 2] | 0) == -1)) {
     if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 92) if ((HEAPU8[(HEAP32[26392] | 0) + 1 >> 0] | 0 | 0) == 110) break;
     HEAP32[i23 >> 2] = 0;
     if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 91) HEAP32[i23 >> 2] = _get_coll_element(105568) | 0;
     if (!(HEAP32[i23 >> 2] | 0)) {
      i19 = HEAP32[26392] | 0;
      HEAP32[26392] = i19 + 1;
      HEAP32[i23 >> 2] = HEAPU8[i19 >> 0];
     }
     if (!((HEAP32[i23 >> 2] | 0) != 92 | (HEAP32[26309] | 0) != 0 | (HEAP32[26308] | 0) != 0)) HEAP32[i23 >> 2] = _coll_get_char() | 0;
     if ((HEAP32[i22 >> 2] | 0) > (HEAP32[i23 >> 2] | 0)) {
      i2 = 133;
      break L173;
     }
     while (1) {
      i19 = (HEAP32[i22 >> 2] | 0) + 1 | 0;
      HEAP32[i22 >> 2] = i19;
      if ((i19 | 0) > (HEAP32[i23 >> 2] | 0)) break;
      _regc(HEAP32[i22 >> 2] | 0);
     }
     HEAP32[i22 >> 2] = -1;
     break L177;
    } while (0);
    _regc(45);
    HEAP32[i22 >> 2] = 45;
   } else {
    do if (!((HEAPU8[i20 >> 0] | 0 | 0) != 92 | (HEAP32[26308] | 0) != 0)) {
     if (!(_vim_strchr(72545, HEAPU8[(HEAP32[26392] | 0) + 1 >> 0] | 0) | 0)) {
      if (HEAP32[26309] | 0) break;
      if (!(_vim_strchr(72551, HEAPU8[(HEAP32[26392] | 0) + 1 >> 0] | 0) | 0)) break;
     }
     HEAP32[26392] = (HEAP32[26392] | 0) + 1;
     if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 110) {
      if ((HEAP32[i7 >> 2] | 0) != (-1 | 0)) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 21) {
       HEAP8[HEAP32[i7 >> 2] >> 0] = 51;
       i19 = HEAP32[i6 >> 2] | 0;
       HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 8;
      }
      HEAP32[26392] = (HEAP32[26392] | 0) + 1;
      HEAP32[i22 >> 2] = -1;
      break L177;
     }
     if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) != 100) if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) != 111) if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) != 120) if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) != 117) if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) != 85) {
      i19 = HEAP32[26392] | 0;
      HEAP32[26392] = i19 + 1;
      HEAP32[i22 >> 2] = _backslash_trans(HEAPU8[i19 >> 0] | 0) | 0;
      _regc(HEAP32[i22 >> 2] | 0);
      break L177;
     }
     HEAP32[i22 >> 2] = _coll_get_char() | 0;
     if (!(HEAP32[i22 >> 2] | 0)) {
      _regc(10);
      break L177;
     } else {
      _regc(HEAP32[i22 >> 2] | 0);
      break L177;
     }
    } while (0);
    if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) != 91) {
     i19 = HEAP32[26392] | 0;
     HEAP32[26392] = i19 + 1;
     HEAP32[i22 >> 2] = HEAPU8[i19 >> 0];
     _regc(HEAP32[i22 >> 2] | 0);
     break;
    }
    HEAP32[i24 >> 2] = _get_char_class(105568) | 0;
    HEAP32[i22 >> 2] = -1;
    do switch (HEAP32[i24 >> 2] | 0) {
    case 99:
     {
      HEAP32[i24 >> 2] = _get_equi_class(105568) | 0;
      if (HEAP32[i24 >> 2] | 0) {
       _reg_equi_class(HEAP32[i24 >> 2] | 0);
       break L177;
      }
      i19 = _get_coll_element(105568) | 0;
      HEAP32[i24 >> 2] = i19;
      if (i19 | 0) {
       _regc(HEAP32[i24 >> 2] | 0);
       break L177;
      } else {
       i19 = HEAP32[26392] | 0;
       HEAP32[26392] = i19 + 1;
       HEAP32[i22 >> 2] = HEAPU8[i19 >> 0];
       _regc(HEAP32[i22 >> 2] | 0);
       break L177;
      }
      break;
     }
    case 0:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) >= 128) break L177;
       if (_isalnum(HEAP32[i25 >> 2] | 0) | 0) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 1:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) >= 128) break L177;
       if (_isalpha(HEAP32[i25 >> 2] | 0) | 0) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 2:
     {
      _regc(32);
      _regc(9);
      break L177;
      break;
     }
    case 3:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) > 127) break L177;
       if (_iscntrl(HEAP32[i25 >> 2] | 0) | 0) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 4:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) > 127) break L177;
       if (((HEAP32[i25 >> 2] | 0) - 48 | 0) >>> 0 < 10) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 5:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) > 127) break L177;
       if (_isgraph(HEAP32[i25 >> 2] | 0) | 0) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 6:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) > 255) break L177;
       i19 = (_islower(HEAP32[i25 >> 2] | 0) | 0) != 0;
       if (i19 & (HEAP32[i25 >> 2] | 0) != 170 & (HEAP32[i25 >> 2] | 0) != 186) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 7:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) > 255) break L177;
       if (_vim_isprintc(HEAP32[i25 >> 2] | 0) | 0) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 8:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) >= 128) break L177;
       if (_ispunct(HEAP32[i25 >> 2] | 0) | 0) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 9:
     {
      HEAP32[i25 >> 2] = 9;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) > 13) break;
       _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      _regc(32);
      break L177;
      break;
     }
    case 10:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) > 255) break L177;
       if (_isupper(HEAP32[i25 >> 2] | 0) | 0) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 11:
     {
      HEAP32[i25 >> 2] = 1;
      while (1) {
       if ((HEAP32[i25 >> 2] | 0) > 255) break L177;
       if (_vim_isxdigit(HEAP32[i25 >> 2] | 0) | 0) _regc(HEAP32[i25 >> 2] | 0);
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      }
      break;
     }
    case 12:
     {
      _regc(9);
      break L177;
      break;
     }
    case 13:
     {
      _regc(13);
      break L177;
      break;
     }
    case 14:
     {
      _regc(8);
      break L177;
      break;
     }
    case 15:
     {
      _regc(27);
      break L177;
      break;
     }
    default:
     break L177;
    } while (0);
   } while (0);
  }
  if ((i2 | 0) == 133) {
   _emsg(73835) | 0;
   HEAP32[26719] = 1;
   HEAP32[i5 >> 2] = 0;
   i27 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i3;
   return i27 | 0;
  }
  _regc(0);
  HEAP32[26393] = 1;
  if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 93) {
   _skipchr();
   i20 = HEAP32[i6 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 3;
   break;
  }
  _emsg(93803) | 0;
  HEAP32[26719] = 1;
  HEAP32[i5 >> 2] = 0;
  i27 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i27 | 0;
 } while (0);
 if ((i2 | 0) == 229) {
  HEAP32[i7 >> 2] = _regnode(5) | 0;
  HEAP32[i26 >> 2] = 0;
  while (1) {
   if (!(HEAP32[i9 >> 2] | 0)) break;
   if (HEAP32[i26 >> 2] | 0) {
    i2 = (_re_multi_type(_peekchr() | 0) | 0) != 0;
    if (i2 | (HEAP32[26454] | 0) != 0) break;
    if (!((HEAP32[i9 >> 2] | 0) < 0 ^ 1)) break;
   }
   HEAP32[i9 >> 2] = _no_Magic(HEAP32[i9 >> 2] | 0) | 0;
   _regc(HEAP32[i9 >> 2] | 0);
   HEAP32[i9 >> 2] = _getchr() | 0;
   HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
  }
  _ungetchr();
  _regc(0);
  i9 = HEAP32[i6 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 1;
  if ((HEAP32[i26 >> 2] | 0) == 1) {
   i26 = HEAP32[i6 >> 2] | 0;
   HEAP32[i26 >> 2] = HEAP32[i26 >> 2] | 2;
  }
 }
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 i27 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i3;
 return i27 | 0;
}

function _vim_vsnprintf_typval(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 i8 = i7 + 32 | 0;
 i9 = i7 + 24 | 0;
 i10 = i7 + 16 | 0;
 i11 = i7 + 8 | 0;
 i12 = i7;
 i13 = i7 + 276 | 0;
 i14 = i7 + 272 | 0;
 i15 = i7 + 268 | 0;
 i16 = i7 + 264 | 0;
 i17 = i7 + 260 | 0;
 i18 = i7 + 256 | 0;
 i19 = i7 + 252 | 0;
 i20 = i7 + 248 | 0;
 i21 = i7 + 244 | 0;
 i22 = i7 + 240 | 0;
 i23 = i7 + 236 | 0;
 i24 = i7 + 232 | 0;
 i25 = i7 + 228 | 0;
 i26 = i7 + 224 | 0;
 i27 = i7 + 220 | 0;
 i28 = i7 + 216 | 0;
 i29 = i7 + 212 | 0;
 i30 = i7 + 208 | 0;
 i31 = i7 + 204 | 0;
 i32 = i7 + 354 | 0;
 i33 = i7 + 320 | 0;
 i34 = i7 + 200 | 0;
 i35 = i7 + 196 | 0;
 i36 = i7 + 319 | 0;
 i37 = i7 + 192 | 0;
 i38 = i7 + 188 | 0;
 i39 = i7 + 318 | 0;
 i40 = i7 + 184 | 0;
 i41 = i7 + 180 | 0;
 i42 = i7 + 176 | 0;
 i43 = i7 + 172 | 0;
 i44 = i7 + 168 | 0;
 i45 = i7 + 164 | 0;
 i46 = i7 + 160 | 0;
 i47 = i7 + 156 | 0;
 i48 = i7 + 152 | 0;
 i49 = i7 + 148 | 0;
 i50 = i7 + 144 | 0;
 i51 = i7 + 140 | 0;
 i52 = i7 + 136 | 0;
 i53 = i7 + 132 | 0;
 i54 = i7 + 128 | 0;
 i55 = i7 + 124 | 0;
 i56 = i7 + 120 | 0;
 i57 = i7 + 116 | 0;
 i58 = i7 + 112 | 0;
 i59 = i7 + 108 | 0;
 i60 = i7 + 104 | 0;
 i61 = i7 + 100 | 0;
 i62 = i7 + 96 | 0;
 i63 = i7 + 92 | 0;
 i64 = i7 + 312 | 0;
 i65 = i7 + 88 | 0;
 i66 = i7 + 280 | 0;
 i67 = i7 + 84 | 0;
 i68 = i7 + 80 | 0;
 i69 = i7 + 76 | 0;
 i70 = i7 + 72 | 0;
 i71 = i7 + 68 | 0;
 i72 = i7 + 64 | 0;
 i73 = i7 + 60 | 0;
 i74 = i7 + 56 | 0;
 i75 = i7 + 52 | 0;
 i76 = i7 + 48 | 0;
 i77 = i7 + 44 | 0;
 i78 = i7 + 40 | 0;
 i79 = i7 + 36 | 0;
 HEAP32[i13 >> 2] = i1;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i16 >> 2] = i4;
 HEAP32[i17 >> 2] = i5;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i20 >> 2] = 1;
 if (!(HEAP32[i19 >> 2] | 0)) HEAP32[i19 >> 2] = 114072;
 while (1) {
  if (!(HEAP8[HEAP32[i19 >> 2] >> 0] | 0)) break;
  if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) != 37) {
   HEAP32[i21 >> 2] = _strchr((HEAP32[i19 >> 2] | 0) + 1 | 0, 37) | 0;
   if (!(HEAP32[i21 >> 2] | 0)) i80 = _strlen(HEAP32[i19 >> 2] | 0) | 0; else i80 = (HEAP32[i21 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0;
   HEAP32[i22 >> 2] = i80;
   if ((HEAP32[i18 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i23 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
    i15 = HEAP32[i23 >> 2] | 0;
    i5 = HEAP32[i22 >> 2] | 0;
    _memmove((HEAP32[i13 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0, HEAP32[i19 >> 2] | 0, ((i5 | 0) >>> 0 > (i15 | 0) >>> 0 ? i15 | 0 : i5 | 0) | 0) | 0;
   }
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
  } else {
   HEAP32[i24 >> 2] = 0;
   HEAP32[i25 >> 2] = 0;
   HEAP32[i26 >> 2] = 0;
   HEAP32[i27 >> 2] = 0;
   HEAP32[i28 >> 2] = 0;
   HEAP32[i29 >> 2] = 0;
   HEAP32[i30 >> 2] = 0;
   HEAP32[i31 >> 2] = 1;
   HEAP8[i32 >> 0] = 0;
   HEAP32[i37 >> 2] = 0;
   HEAP32[i38 >> 2] = 0;
   HEAP8[i39 >> 0] = 0;
   HEAP32[i40 >> 2] = 0;
   HEAP32[i34 >> 2] = 0;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   while (1) {
    if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 48) i81 = 1; else if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 45) i81 = 1; else if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 43) i81 = 1; else if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 32) i81 = 1; else if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 35) i81 = 1; else i81 = (HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 39;
    i82 = HEAP8[HEAP32[i19 >> 2] >> 0] | 0;
    if (!i81) break;
    switch (i82 | 0) {
    case 48:
     {
      HEAP32[i26 >> 2] = 1;
      break;
     }
    case 45:
     {
      HEAP32[i28 >> 2] = 1;
      break;
     }
    case 43:
     {
      HEAP32[i30 >> 2] = 1;
      HEAP32[i31 >> 2] = 0;
      break;
     }
    case 32:
     {
      HEAP32[i30 >> 2] = 1;
      break;
     }
    case 35:
     {
      HEAP32[i29 >> 2] = 1;
      break;
     }
    default:
     {}
    }
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
   i5 = HEAP32[i19 >> 2] | 0;
   do if ((i82 | 0) == 42) {
    HEAP32[i19 >> 2] = i5 + 1;
    i15 = HEAP32[i16 >> 2] | 0;
    i4 = (HEAP32[i15 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i3 = HEAP32[i4 >> 2] | 0;
    HEAP32[i15 >> 2] = i4 + 4;
    HEAP32[i42 >> 2] = i3;
    HEAP32[i41 >> 2] = HEAP32[i42 >> 2];
    i3 = HEAP32[i41 >> 2] | 0;
    if ((HEAP32[i41 >> 2] | 0) >= 0) {
     HEAP32[i24 >> 2] = i3;
     break;
    } else {
     HEAP32[i24 >> 2] = 0 - i3;
     HEAP32[i28 >> 2] = 1;
     break;
    }
   } else if (((HEAP8[i5 >> 0] | 0) - 48 | 0) >>> 0 < 10) {
    i3 = HEAP32[i19 >> 2] | 0;
    HEAP32[i19 >> 2] = i3 + 1;
    HEAP32[i43 >> 2] = (HEAP8[i3 >> 0] | 0) - 48;
    while (1) {
     i83 = HEAP32[i43 >> 2] | 0;
     if (((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break;
     i3 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = i3 + 1;
     HEAP32[i43 >> 2] = (i83 * 10 | 0) + ((HEAP8[i3 >> 0] | 0) - 48);
    }
    HEAP32[i24 >> 2] = i83;
   } while (0);
   do if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 46) {
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    HEAP32[i27 >> 2] = 1;
    if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 42) {
     i5 = HEAP32[i16 >> 2] | 0;
     i3 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     i4 = HEAP32[i3 >> 2] | 0;
     HEAP32[i5 >> 2] = i3 + 4;
     HEAP32[i45 >> 2] = i4;
     HEAP32[i44 >> 2] = HEAP32[i45 >> 2];
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
     if ((HEAP32[i44 >> 2] | 0) >= 0) {
      HEAP32[i25 >> 2] = HEAP32[i44 >> 2];
      break;
     } else {
      HEAP32[i27 >> 2] = 0;
      HEAP32[i25 >> 2] = 0;
      break;
     }
    }
    if (((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) {
     i4 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = i4 + 1;
     HEAP32[i46 >> 2] = (HEAP8[i4 >> 0] | 0) - 48;
     while (1) {
      i84 = HEAP32[i46 >> 2] | 0;
      if (((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break;
      i4 = HEAP32[i19 >> 2] | 0;
      HEAP32[i19 >> 2] = i4 + 1;
      HEAP32[i46 >> 2] = (i84 * 10 | 0) + ((HEAP8[i4 >> 0] | 0) - 48);
     }
     HEAP32[i25 >> 2] = i84;
    }
   } while (0);
   if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 104) i6 = 48; else if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 108) i6 = 48;
   if ((i6 | 0) == 48) {
    i6 = 0;
    HEAP8[i32 >> 0] = HEAP8[HEAP32[i19 >> 2] >> 0] | 0;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    if ((HEAP8[i32 >> 0] | 0) == 108) if ((HEAP8[HEAP32[i19 >> 2] >> 0] | 0) == 108) {
     HEAP8[i32 >> 0] = 108;
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   }
   HEAP8[i39 >> 0] = HEAP8[HEAP32[i19 >> 2] >> 0] | 0;
   switch (HEAP8[i39 >> 0] | 0) {
   case 105:
    {
     HEAP8[i39 >> 0] = 100;
     break;
    }
   case 68:
    {
     HEAP8[i39 >> 0] = 100;
     HEAP8[i32 >> 0] = 108;
     break;
    }
   case 85:
    {
     HEAP8[i39 >> 0] = 117;
     HEAP8[i32 >> 0] = 108;
     break;
    }
   case 79:
    {
     HEAP8[i39 >> 0] = 111;
     HEAP8[i32 >> 0] = 108;
     break;
    }
   default:
    {}
   }
   L74 : do switch (HEAP8[i39 >> 0] | 0) {
   case 83:
   case 115:
   case 99:
   case 37:
    {
     HEAP8[i32 >> 0] = 0;
     HEAP32[i35 >> 2] = 1;
     switch (HEAP8[i39 >> 0] | 0) {
     case 37:
      {
       HEAP32[i34 >> 2] = HEAP32[i19 >> 2];
       break L74;
       break;
      }
     case 99:
      {
       i4 = HEAP32[i16 >> 2] | 0;
       i3 = (HEAP32[i4 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i5 = HEAP32[i3 >> 2] | 0;
       HEAP32[i4 >> 2] = i3 + 4;
       HEAP32[i48 >> 2] = i5;
       HEAP32[i47 >> 2] = HEAP32[i48 >> 2];
       HEAP8[i36 >> 0] = HEAP32[i47 >> 2];
       HEAP32[i34 >> 2] = i36;
       break L74;
       break;
      }
     case 83:
     case 115:
      {
       i5 = HEAP32[i16 >> 2] | 0;
       i3 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i4 = HEAP32[i3 >> 2] | 0;
       HEAP32[i5 >> 2] = i3 + 4;
       HEAP32[i49 >> 2] = i4;
       HEAP32[i34 >> 2] = HEAP32[i49 >> 2];
       if (!(HEAP32[i34 >> 2] | 0)) {
        HEAP32[i34 >> 2] = 97630;
        HEAP32[i35 >> 2] = 6;
        break L74;
       }
       if (!(HEAP32[i27 >> 2] | 0)) {
        HEAP32[i35 >> 2] = _strlen(HEAP32[i34 >> 2] | 0) | 0;
        break L74;
       }
       if (!(HEAP32[i25 >> 2] | 0)) {
        HEAP32[i35 >> 2] = 0;
        break L74;
       }
       i4 = HEAP32[i25 >> 2] | 0;
       HEAP32[i50 >> 2] = _memchr(HEAP32[i34 >> 2] | 0, 0, (i4 | 0) >>> 0 <= 2147483647 ? i4 | 0 : 2147483647) | 0;
       if (!(HEAP32[i50 >> 2] | 0)) i85 = HEAP32[i25 >> 2] | 0; else i85 = (HEAP32[i50 >> 2] | 0) - (HEAP32[i34 >> 2] | 0) | 0;
       HEAP32[i35 >> 2] = i85;
       break L74;
       break;
      }
     default:
      break L74;
     }
     break;
    }
   case 112:
   case 88:
   case 120:
   case 111:
   case 66:
   case 98:
   case 117:
   case 100:
    {
     HEAP32[i51 >> 2] = 0;
     HEAP32[i52 >> 2] = 0;
     HEAP32[i53 >> 2] = 0;
     HEAP32[i54 >> 2] = 0;
     HEAP32[i55 >> 2] = 0;
     HEAP32[i56 >> 2] = 0;
     HEAP32[i57 >> 2] = 0;
     L96 : do if ((HEAP8[i39 >> 0] | 0) == 112) {
      HEAP8[i32 >> 0] = 0;
      i4 = HEAP32[i16 >> 2] | 0;
      i3 = (HEAP32[i4 >> 2] | 0) + (4 - 1) & ~(4 - 1);
      i5 = HEAP32[i3 >> 2] | 0;
      HEAP32[i4 >> 2] = i3 + 4;
      HEAP32[i58 >> 2] = i5;
      HEAP32[i57 >> 2] = HEAP32[i58 >> 2];
      if (HEAP32[i57 >> 2] | 0) HEAP32[i51 >> 2] = 1;
     } else {
      if ((HEAP8[i39 >> 0] | 0) != 98) if ((HEAP8[i39 >> 0] | 0) != 66) {
       i5 = HEAP8[i32 >> 0] | 0;
       if ((HEAP8[i39 >> 0] | 0) != 100) switch (i5 | 0) {
       case 104:
       case 0:
        {
         i3 = HEAP32[i16 >> 2] | 0;
         i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
         i15 = HEAP32[i4 >> 2] | 0;
         HEAP32[i3 >> 2] = i4 + 4;
         HEAP32[i62 >> 2] = i15;
         HEAP32[i53 >> 2] = HEAP32[i62 >> 2];
         if (!(HEAP32[i53 >> 2] | 0)) break L96;
         HEAP32[i51 >> 2] = 1;
         break L96;
         break;
        }
       case 108:
        {
         i15 = HEAP32[i16 >> 2] | 0;
         i4 = (HEAP32[i15 >> 2] | 0) + (4 - 1) & ~(4 - 1);
         i3 = HEAP32[i4 >> 2] | 0;
         HEAP32[i15 >> 2] = i4 + 4;
         HEAP32[i63 >> 2] = i3;
         HEAP32[i55 >> 2] = HEAP32[i63 >> 2];
         if (!(HEAP32[i55 >> 2] | 0)) break L96;
         HEAP32[i51 >> 2] = 1;
         break L96;
         break;
        }
       default:
        break L96;
       }
       switch (i5 | 0) {
       case 104:
       case 0:
        {
         i5 = HEAP32[i16 >> 2] | 0;
         i3 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
         i4 = HEAP32[i3 >> 2] | 0;
         HEAP32[i5 >> 2] = i3 + 4;
         HEAP32[i60 >> 2] = i4;
         HEAP32[i52 >> 2] = HEAP32[i60 >> 2];
         if ((HEAP32[i52 >> 2] | 0) > 0) {
          HEAP32[i51 >> 2] = 1;
          break L96;
         }
         if ((HEAP32[i52 >> 2] | 0) >= 0) break L96;
         HEAP32[i51 >> 2] = -1;
         break L96;
         break;
        }
       case 108:
        {
         i4 = HEAP32[i16 >> 2] | 0;
         i3 = (HEAP32[i4 >> 2] | 0) + (4 - 1) & ~(4 - 1);
         i5 = HEAP32[i3 >> 2] | 0;
         HEAP32[i4 >> 2] = i3 + 4;
         HEAP32[i61 >> 2] = i5;
         HEAP32[i54 >> 2] = HEAP32[i61 >> 2];
         if ((HEAP32[i54 >> 2] | 0) > 0) {
          HEAP32[i51 >> 2] = 1;
          break L96;
         }
         if ((HEAP32[i54 >> 2] | 0) >= 0) break L96;
         HEAP32[i51 >> 2] = -1;
         break L96;
         break;
        }
       default:
        break L96;
       }
      }
      i5 = HEAP32[i16 >> 2] | 0;
      i3 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
      i4 = HEAP32[i3 >> 2] | 0;
      HEAP32[i5 >> 2] = i3 + 4;
      HEAP32[i59 >> 2] = i4;
      HEAP32[i56 >> 2] = HEAP32[i59 >> 2];
      if (HEAP32[i56 >> 2] | 0) HEAP32[i51 >> 2] = 1;
     } while (0);
     HEAP32[i34 >> 2] = i33;
     HEAP32[i35 >> 2] = 0;
     if (HEAP32[i27 >> 2] | 0) HEAP32[i26 >> 2] = 0;
     do if ((HEAP8[i39 >> 0] | 0) == 100) {
      if ((HEAP32[i30 >> 2] | 0) != 0 & (HEAP32[i51 >> 2] | 0) >= 0) {
       i4 = (HEAP32[i31 >> 2] | 0 ? 32 : 43) & 255;
       i3 = HEAP32[i35 >> 2] | 0;
       HEAP32[i35 >> 2] = i3 + 1;
       HEAP8[i33 + i3 >> 0] = i4;
      }
     } else if ((HEAP32[i29 >> 2] | 0) != 0 & (HEAP32[i51 >> 2] | 0) != 0) {
      if ((HEAP8[i39 >> 0] | 0) != 98) if ((HEAP8[i39 >> 0] | 0) != 66) if ((HEAP8[i39 >> 0] | 0) != 120) if ((HEAP8[i39 >> 0] | 0) != 88) break;
      i4 = HEAP32[i35 >> 2] | 0;
      HEAP32[i35 >> 2] = i4 + 1;
      HEAP8[i33 + i4 >> 0] = 48;
      i4 = HEAP8[i39 >> 0] | 0;
      i3 = HEAP32[i35 >> 2] | 0;
      HEAP32[i35 >> 2] = i3 + 1;
      HEAP8[i33 + i3 >> 0] = i4;
     } while (0);
     HEAP32[i38 >> 2] = HEAP32[i35 >> 2];
     if (!(HEAP32[i27 >> 2] | 0)) HEAP32[i25 >> 2] = 1;
     do if (!((HEAP32[i25 >> 2] | 0) == 0 & (HEAP32[i51 >> 2] | 0) == 0)) {
      HEAP32[i65 >> 2] = 0;
      i4 = HEAP32[i65 >> 2] | 0;
      HEAP32[i65 >> 2] = i4 + 1;
      HEAP8[i64 + i4 >> 0] = 37;
      do if (HEAP8[i32 >> 0] | 0) if ((HEAP8[i32 >> 0] | 0) == 76) {
       i4 = HEAP32[i65 >> 2] | 0;
       HEAP32[i65 >> 2] = i4 + 1;
       HEAP8[i64 + i4 >> 0] = 108;
       break;
      } else {
       i4 = HEAP8[i32 >> 0] | 0;
       i3 = HEAP32[i65 >> 2] | 0;
       HEAP32[i65 >> 2] = i3 + 1;
       HEAP8[i64 + i3 >> 0] = i4;
       break;
      } while (0);
      i4 = HEAP8[i39 >> 0] | 0;
      i3 = HEAP32[i65 >> 2] | 0;
      HEAP32[i65 >> 2] = i3 + 1;
      HEAP8[i64 + i3 >> 0] = i4;
      i4 = HEAP32[i65 >> 2] | 0;
      HEAP32[i65 >> 2] = i4 + 1;
      HEAP8[i64 + i4 >> 0] = 0;
      L150 : do if ((HEAP8[i39 >> 0] | 0) == 112) {
       i4 = i33 + (HEAP32[i35 >> 2] | 0) | 0;
       HEAP32[i12 >> 2] = HEAP32[i57 >> 2];
       i3 = _sprintf(i4, i64, i12) | 0;
       HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + i3;
      } else {
       do if ((HEAP8[i39 >> 0] | 0) != 98) {
        if ((HEAP8[i39 >> 0] | 0) == 66) break;
        i3 = HEAP8[i32 >> 0] | 0;
        if ((HEAP8[i39 >> 0] | 0) == 100) switch (i3 | 0) {
        case 104:
        case 0:
         {
          i4 = i33 + (HEAP32[i35 >> 2] | 0) | 0;
          HEAP32[i11 >> 2] = HEAP32[i52 >> 2];
          HEAP32[i35 >> 2] = (_sprintf(i4, i64, i11) | 0) + (HEAP32[i35 >> 2] | 0);
          break L150;
          break;
         }
        case 108:
         {
          i4 = i33 + (HEAP32[i35 >> 2] | 0) | 0;
          HEAP32[i10 >> 2] = HEAP32[i54 >> 2];
          HEAP32[i35 >> 2] = (_sprintf(i4, i64, i10) | 0) + (HEAP32[i35 >> 2] | 0);
          break L150;
          break;
         }
        default:
         break L150;
        } else switch (i3 | 0) {
        case 104:
        case 0:
         {
          i3 = i33 + (HEAP32[i35 >> 2] | 0) | 0;
          HEAP32[i9 >> 2] = HEAP32[i53 >> 2];
          HEAP32[i35 >> 2] = (_sprintf(i3, i64, i9) | 0) + (HEAP32[i35 >> 2] | 0);
          break L150;
          break;
         }
        case 108:
         {
          i3 = i33 + (HEAP32[i35 >> 2] | 0) | 0;
          HEAP32[i8 >> 2] = HEAP32[i55 >> 2];
          HEAP32[i35 >> 2] = (_sprintf(i3, i64, i8) | 0) + (HEAP32[i35 >> 2] | 0);
          break L150;
          break;
         }
        default:
         break L150;
        }
       } while (0);
       HEAP32[i67 >> 2] = 0;
       HEAP32[i68 >> 2] = HEAP32[i56 >> 2];
       do {
        i3 = 48 + (HEAP32[i68 >> 2] & 1) & 255;
        i4 = (HEAP32[i67 >> 2] | 0) + 1 | 0;
        HEAP32[i67 >> 2] = i4;
        HEAP8[i66 + (32 - i4) >> 0] = i3;
        HEAP32[i68 >> 2] = (HEAP32[i68 >> 2] | 0) >>> 1;
       } while ((HEAP32[i68 >> 2] | 0) != 0);
       i3 = HEAP32[i67 >> 2] | 0;
       _memcpy(i33 + (HEAP32[i35 >> 2] | 0) | 0, i66 + 32 + (0 - i3) | 0, i3 | 0) | 0;
       HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + (HEAP32[i67 >> 2] | 0);
      } while (0);
      if ((HEAP32[i38 >> 2] | 0) >>> 0 < (HEAP32[i35 >> 2] | 0) >>> 0) if ((HEAP8[i33 + (HEAP32[i38 >> 2] | 0) >> 0] | 0) == 45) HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 1;
      if (((HEAP32[i38 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i35 >> 2] | 0) >>> 0) if ((HEAP8[i33 + (HEAP32[i38 >> 2] | 0) >> 0] | 0) == 48) {
       if ((HEAP8[i33 + ((HEAP32[i38 >> 2] | 0) + 1) >> 0] | 0) != 120) if ((HEAP8[i33 + ((HEAP32[i38 >> 2] | 0) + 1) >> 0] | 0) != 88) break;
       HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + 2;
      }
     } while (0);
     HEAP32[i69 >> 2] = (HEAP32[i35 >> 2] | 0) - (HEAP32[i38 >> 2] | 0);
     do if (HEAP32[i29 >> 2] | 0) if ((HEAP8[i39 >> 0] | 0) == 111) {
      if ((HEAP32[i38 >> 2] | 0) >>> 0 < (HEAP32[i35 >> 2] | 0) >>> 0) if ((HEAP8[i33 + (HEAP32[i38 >> 2] | 0) >> 0] | 0) == 48) break;
      if (HEAP32[i27 >> 2] | 0) if ((HEAP32[i25 >> 2] | 0) >>> 0 >= ((HEAP32[i69 >> 2] | 0) + 1 | 0) >>> 0) break;
      HEAP32[i25 >> 2] = (HEAP32[i69 >> 2] | 0) + 1;
      HEAP32[i27 >> 2] = 1;
     } while (0);
     if ((HEAP32[i69 >> 2] | 0) >>> 0 < (HEAP32[i25 >> 2] | 0) >>> 0) HEAP32[i37 >> 2] = (HEAP32[i25 >> 2] | 0) - (HEAP32[i69 >> 2] | 0);
     if ((HEAP32[i28 >> 2] | 0) == 0 & (HEAP32[i26 >> 2] | 0) != 0) {
      HEAP32[i70 >> 2] = (HEAP32[i24 >> 2] | 0) - ((HEAP32[i35 >> 2] | 0) + (HEAP32[i37 >> 2] | 0));
      if ((HEAP32[i70 >> 2] | 0) > 0) HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + (HEAP32[i70 >> 2] | 0);
     }
     break;
    }
   default:
    {
     HEAP32[i26 >> 2] = 0;
     HEAP32[i28 >> 2] = 1;
     HEAP32[i24 >> 2] = 0;
     HEAP32[i34 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i35 >> 2] = 0;
     if (HEAP8[HEAP32[i19 >> 2] >> 0] | 0) HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + 1;
    }
   } while (0);
   if (HEAP8[HEAP32[i19 >> 2] >> 0] | 0) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   if (!(HEAP32[i28 >> 2] | 0)) {
    HEAP32[i71 >> 2] = (HEAP32[i24 >> 2] | 0) - ((HEAP32[i35 >> 2] | 0) + (HEAP32[i37 >> 2] | 0));
    if ((HEAP32[i71 >> 2] | 0) > 0) {
     if ((HEAP32[i18 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i72 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
      i3 = HEAP32[i72 >> 2] | 0;
      i4 = HEAP32[i71 >> 2] | 0;
      _memset((HEAP32[i13 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0, (HEAP32[i26 >> 2] | 0 ? 48 : 32) & 255 | 0, ((i4 | 0) >>> 0 > (i3 | 0) >>> 0 ? i3 | 0 : i4 | 0) | 0) | 0;
     }
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i71 >> 2] | 0);
    }
   }
   if (!(HEAP32[i37 >> 2] | 0)) HEAP32[i38 >> 2] = 0; else {
    HEAP32[i73 >> 2] = HEAP32[i38 >> 2];
    if ((HEAP32[i73 >> 2] | 0) > 0) {
     if ((HEAP32[i18 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i74 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
      i4 = HEAP32[i74 >> 2] | 0;
      i3 = HEAP32[i73 >> 2] | 0;
      _memmove((HEAP32[i13 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0, HEAP32[i34 >> 2] | 0, ((i3 | 0) >>> 0 > (i4 | 0) >>> 0 ? i4 | 0 : i3 | 0) | 0) | 0;
     }
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i73 >> 2] | 0);
    }
    HEAP32[i73 >> 2] = HEAP32[i37 >> 2];
    if ((HEAP32[i73 >> 2] | 0) > 0) {
     if ((HEAP32[i18 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i75 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
      i3 = HEAP32[i75 >> 2] | 0;
      i4 = HEAP32[i73 >> 2] | 0;
      _memset((HEAP32[i13 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0, 48, ((i4 | 0) >>> 0 > (i3 | 0) >>> 0 ? i3 | 0 : i4 | 0) | 0) | 0;
     }
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i73 >> 2] | 0);
    }
   }
   HEAP32[i76 >> 2] = (HEAP32[i35 >> 2] | 0) - (HEAP32[i38 >> 2] | 0);
   if ((HEAP32[i76 >> 2] | 0) > 0) {
    if ((HEAP32[i18 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i77 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
     i4 = HEAP32[i77 >> 2] | 0;
     i3 = HEAP32[i76 >> 2] | 0;
     _memmove((HEAP32[i13 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0, (HEAP32[i34 >> 2] | 0) + (HEAP32[i38 >> 2] | 0) | 0, ((i3 | 0) >>> 0 > (i4 | 0) >>> 0 ? i4 | 0 : i3 | 0) | 0) | 0;
    }
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i76 >> 2] | 0);
   }
   if (HEAP32[i28 >> 2] | 0) {
    HEAP32[i78 >> 2] = (HEAP32[i24 >> 2] | 0) - ((HEAP32[i35 >> 2] | 0) + (HEAP32[i37 >> 2] | 0));
    if ((HEAP32[i78 >> 2] | 0) > 0) {
     if ((HEAP32[i18 >> 2] | 0) >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i79 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
      i3 = HEAP32[i79 >> 2] | 0;
      i4 = HEAP32[i78 >> 2] | 0;
      _memset((HEAP32[i13 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0, 32, ((i4 | 0) >>> 0 > (i3 | 0) >>> 0 ? i3 | 0 : i4 | 0) | 0) | 0;
     }
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i78 >> 2] | 0);
    }
   }
   _vim_free(HEAP32[i40 >> 2] | 0);
  }
 }
 if ((HEAP32[i14 >> 2] | 0) >>> 0 > 0) {
  i40 = HEAP32[i18 >> 2] | 0;
  i78 = (HEAP32[i14 >> 2] | 0) - 1 | 0;
  HEAP8[(HEAP32[i13 >> 2] | 0) + ((i40 | 0) >>> 0 <= (i78 | 0) >>> 0 ? i40 | 0 : i78 | 0) >> 0] = 0;
 }
 if (!(HEAP32[i17 >> 2] | 0)) {
  i86 = HEAP32[i18 >> 2] | 0;
  STACKTOP = i7;
  return i86 | 0;
 }
 if (!(HEAP32[(HEAP32[i17 >> 2] | 0) + (((HEAP32[i20 >> 2] | 0) - 1 | 0) * 12 | 0) >> 2] | 0)) {
  i86 = HEAP32[i18 >> 2] | 0;
  STACKTOP = i7;
  return i86 | 0;
 }
 _emsg(97637) | 0;
 i86 = HEAP32[i18 >> 2] | 0;
 STACKTOP = i7;
 return i86 | 0;
}

function _getcmdline(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i6 = i5 + 124 | 0;
 i7 = i5 + 120 | 0;
 i8 = i5 + 112 | 0;
 i9 = i5 + 108 | 0;
 i10 = i5 + 104 | 0;
 i11 = i5 + 100 | 0;
 i12 = i5 + 96 | 0;
 i13 = i5 + 92 | 0;
 i14 = i5 + 88 | 0;
 i15 = i5 + 84 | 0;
 i16 = i5 + 80 | 0;
 i17 = i5 + 76 | 0;
 i18 = i5 + 72 | 0;
 i19 = i5 + 68 | 0;
 i20 = i5 + 64 | 0;
 i21 = i5 + 28 | 0;
 i22 = i5 + 24 | 0;
 i23 = i5 + 20 | 0;
 i24 = i5 + 16 | 0;
 i25 = i5 + 12 | 0;
 i26 = i5 + 8 | 0;
 i27 = i5 + 4 | 0;
 i28 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i5 + 116 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i17 >> 2] = HEAP32[26710];
 HEAP32[i18 >> 2] = HEAP32[10180];
 HEAP32[i19 >> 2] = 0;
 HEAP32[i20 >> 2] = 1;
 HEAP32[i22 >> 2] = 0;
 HEAP32[25245] = 0;
 i3 = HEAP32[i7 >> 2] | 0;
 HEAP32[25241] = (i3 | 0) == 64 ? 0 : i3 | 0;
 HEAP32[25242] = (HEAP32[i7 >> 2] | 0) > 0 ? HEAP32[i8 >> 2] | 0 : 0;
 _alloc_cmdbuff(HEAP32[26798] | 0 ? 250 : (HEAP32[i8 >> 2] | 0) + 1 | 0);
 if (!(HEAP32[25236] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i29 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i29 | 0;
 }
 HEAP32[25239] = 0;
 HEAP32[25238] = 0;
 HEAP8[HEAP32[25236] >> 0] = 0;
 _sb_text_start_cmdline();
 if ((HEAP32[i7 >> 2] | 0) <= 0) {
  _memset(HEAP32[25236] | 0, 32, HEAP32[i8 >> 2] | 0) | 0;
  HEAP8[(HEAP32[25236] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = 0;
  HEAP32[25239] = HEAP32[i8 >> 2];
  HEAP32[25240] = HEAP32[i8 >> 2];
  HEAP32[25238] = HEAP32[i8 >> 2];
 }
 _ExpandInit(i21);
 HEAP32[25246] = i21;
 HEAP32[26855] = 1;
 if (!(HEAP32[26811] | 0)) {
  HEAP32[i10 >> 2] = HEAP32[27044];
  HEAP32[27044] = 0;
  _gotocmdline(1);
  HEAP32[27044] = (HEAP32[27044] | 0) + (HEAP32[i10 >> 2] | 0);
  _redrawcmdprompt();
  _set_cmdspos();
 }
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 12 >> 2] = 0;
 HEAP32[i21 + 16 >> 2] = 0;
 HEAP32[26710] = 0;
 HEAP32[10180] = 8;
 if ((HEAP32[i7 >> 2] | 0) == 47 | (HEAP32[i7 >> 2] | 0) == 63 | (HEAP32[i7 >> 2] | 0) == 64) {
  i3 = HEAP32[26773] | 0;
  if ((HEAP32[(HEAP32[26773] | 0) + 556 >> 2] | 0) == -1) HEAP32[i22 >> 2] = i3 + 552; else HEAP32[i22 >> 2] = i3 + 556;
  if ((HEAP32[HEAP32[i22 >> 2] >> 2] | 0) == 1) HEAP32[10180] = HEAP32[10180] | 32;
 }
 _setmouse();
 _ui_cursor_shape();
 _settmode(2);
 i3 = HEAP32[i7 >> 2] | 0;
 HEAP32[i23 >> 2] = (i3 | 0) == 0 ? 45 : i3 | 0;
 _trigger_cmd_autocmd(HEAP32[i23 >> 2] | 0, 20);
 if (HEAP32[26880] | 0) _redrawcmd();
 HEAP32[26880] = 0;
 HEAP32[26834] = 0;
 L22 : while (1) {
  HEAP32[26855] = 1;
  HEAP32[26723] = 0;
  HEAP32[26880] = 0;
  _cursorcmd();
  do HEAP32[i9 >> 2] = _safe_vgetc() | 0; while ((HEAP32[i9 >> 2] | 0) == -13821 ? 1 : (HEAP32[i9 >> 2] | 0) == -25085);
  if (HEAP32[27161] | 0) HEAP32[i19 >> 2] = 1;
  if ((HEAP32[i9 >> 2] | 0) == 3) {
   if (!(HEAP32[26841] | 0)) i4 = 23;
  } else if (!(HEAP32[26841] | 0 ? 1 : (HEAP32[i9 >> 2] | 0) != (HEAP32[26725] | 0))) i4 = 23;
  if ((i4 | 0) == 23) {
   i4 = 0;
   HEAP32[26834] = 0;
  }
  if ((HEAP32[i9 >> 2] | 0) == -17003 ? (HEAP32[i9 >> 2] | 0) != (HEAP32[27030] | 0) : 0) if ((HEAP32[i21 + 20 >> 2] | 0) > 0) HEAP32[i9 >> 2] = 16;
  if ((HEAP32[i21 + 20 >> 2] | 0) != -1) if (!(HEAP32[27161] | 0 ? (HEAP32[i9 >> 2] | 0) == (HEAP32[27030] | 0) : 0)) if (((HEAP32[i9 >> 2] | 0) != 16 ? ((HEAP32[i9 >> 2] | 0) != 14 ? (HEAP32[i9 >> 2] | 0) != (HEAP32[27031] | 0) : 0) : 0) & (HEAP32[i9 >> 2] | 0) != 1 & (HEAP32[i9 >> 2] | 0) != 12) {
   _ExpandOne(i21, 0, 0, 0, 1) | 0;
   HEAP32[i14 >> 2] = 0;
   HEAP32[i21 >> 2] = 0;
   HEAP32[i15 >> 2] = 0;
  }
  if ((HEAP32[i9 >> 2] | 0) == 28) {
   HEAP32[26802] = (HEAP32[26802] | 0) + 1;
   HEAP32[26804] = (HEAP32[26804] | 0) + 1;
   HEAP32[i9 >> 2] = _plain_vgetc() | 0;
   HEAP32[26802] = (HEAP32[26802] | 0) + -1;
   HEAP32[26804] = (HEAP32[26804] | 0) + -1;
   if (!((HEAP32[i9 >> 2] | 0) != 14 & (HEAP32[i9 >> 2] | 0) != 7)) {
    i4 = 36;
    break;
   }
   if ((HEAP32[i9 >> 2] | 0) == 101) if (!((HEAP32[25241] | 0) == 61 & (HEAP32[27161] | 0) != 0)) {
    i4 = 36;
    break;
   }
   _vungetc(HEAP32[i9 >> 2] | 0);
   HEAP32[i9 >> 2] = 28;
  }
  if ((HEAP32[i9 >> 2] | 0) == 10 | (HEAP32[i9 >> 2] | 0) == 13 | (HEAP32[i9 >> 2] | 0) == -16715) i4 = 43; else if ((HEAP32[i9 >> 2] | 0) == 27) if (HEAP32[27161] | 0) if (_vim_strchr(HEAP32[26904] | 0, 120) | 0) i4 = 43; else i4 = 51; else i4 = 43; else i4 = 51;
  do if ((i4 | 0) == 43) {
   i4 = 0;
   if ((HEAP32[26798] | 0) != 0 & (HEAP32[i9 >> 2] | 0) != 27) if ((HEAP32[25239] | 0) > 0 ? (HEAP32[25239] | 0) == (HEAP32[25238] | 0) : 0) if ((HEAPU8[(HEAP32[25236] | 0) + ((HEAP32[25239] | 0) - 1) >> 0] | 0) == 92) {
    if ((HEAP32[i9 >> 2] | 0) != -16715) {
     i4 = 51;
     break;
    }
    HEAP32[i9 >> 2] = 10;
    i4 = 51;
    break;
   }
   HEAP32[i12 >> 2] = 0;
   if (!(_ccheck_abbr((HEAP32[i9 >> 2] | 0) + 256 | 0) | 0)) {
    i4 = 49;
    break L22;
   }
  } while (0);
  L64 : do if ((i4 | 0) == 51) {
   i4 = 0;
   if (((HEAP32[i12 >> 2] | 0 ? 1 : (HEAP32[i9 >> 2] | 0) != (HEAP32[27030] | 0)) ^ 1) & (HEAP32[27161] | 0) != 0) i4 = 53; else if ((HEAP32[i9 >> 2] | 0) == (HEAP32[27031] | 0)) i4 = 53;
   if ((i4 | 0) == 53) {
    i4 = 0;
    do if ((HEAP32[i21 + 20 >> 2] | 0) > 0) {
     if (!(HEAP32[i14 >> 2] | 0 ? 1 : (HEAP32[i21 + 20 >> 2] | 0) <= 1)) if (HEAPU8[114068 + (HEAP32[i15 >> 2] | 0) >> 0] & 4 | 0) {
      _showmatches(i21, 0) | 0;
      _redrawcmd();
      HEAP32[i14 >> 2] = 1;
     }
     if (HEAPU8[114068 + (HEAP32[i15 >> 2] | 0) >> 0] & 2 | 0) {
      HEAP32[i16 >> 2] = _nextwild(i21, 7, 8, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0;
      break;
     }
     if (HEAPU8[114068 + (HEAP32[i15 >> 2] | 0) >> 0] & 1 | 0) {
      HEAP32[i16 >> 2] = _nextwild(i21, 4, 8, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0;
      break;
     } else {
      HEAP32[i16 >> 2] = 1;
      break;
     }
    } else {
     HEAP32[i15 >> 2] = 0;
     HEAP32[i11 >> 2] = HEAP32[25239];
     i3 = (HEAP32[i7 >> 2] | 0) != 64 & 1;
     if (HEAPU8[114068] & 2 | 0) HEAP32[i16 >> 2] = _nextwild(i21, 7, 8, i3) | 0; else HEAP32[i16 >> 2] = _nextwild(i21, 3, 8, i3) | 0;
     if (HEAP32[26834] | 0) {
      _vpeekc() | 0;
      HEAP32[26834] = 0;
      _ExpandOne(i21, 0, 0, 0, 1) | 0;
      break L64;
     }
     if ((HEAP32[i16 >> 2] | 0) == 1) {
      if ((HEAP32[i21 + 20 >> 2] | 0) <= 1) break;
      do if ((HEAPU8[114068] | 0) == 2) {
       if ((HEAP32[25239] | 0) != (HEAP32[i11 >> 2] | 0)) break;
       HEAP32[i15 >> 2] = 1;
      } while (0);
      if (!(HEAPU8[114068 + (HEAP32[i15 >> 2] | 0) >> 0] & 4)) {
       _vim_beep(262144);
       break;
      }
      if (!(HEAPU8[114068] & 2)) _nextwild(i21, 5, 0, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0;
      _showmatches(i21, 0) | 0;
      _redrawcmd();
      HEAP32[i14 >> 2] = 1;
      if (HEAPU8[114068 + (HEAP32[i15 >> 2] | 0) >> 0] & 2 | 0) {
       _nextwild(i21, 7, 8, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0;
       break;
      }
      if (!(HEAPU8[114068 + (HEAP32[i15 >> 2] | 0) >> 0] & 1)) break;
      _nextwild(i21, 4, 8, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0;
     }
    } while (0);
    if ((HEAP32[i15 >> 2] | 0) < 3) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    if ((HEAP32[i9 >> 2] | 0) == 27) HEAP32[i12 >> 2] = 1;
    if ((HEAP32[i16 >> 2] | 0) == 1) break;
   }
   HEAP32[i12 >> 2] = 0;
   if ((HEAP32[i9 >> 2] | 0) == -17003 & (HEAP32[27161] | 0) != 0) if ((_nextwild(i21, 3, 0, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0) == 1) if ((_nextwild(i21, 5, 0, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0) == 1) if ((_nextwild(i21, 5, 0, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0) == 1) break;
   if ((HEAP32[i9 >> 2] | 0) == 0 | (HEAP32[i9 >> 2] | 0) == -22783) HEAP32[i9 >> 2] = 10;
   HEAP32[i13 >> 2] = 1;
   i3 = HEAP32[i9 >> 2] | 0;
   L122 : do if ((i3 | 0) < -14122) {
    L124 : do if ((i3 | 0) < -22773) switch (i3 | 0) {
    case -25853:
    case -24317:
    case -24061:
    case -23805:
    case -23549:
    case -23293:
    case -23037:
     {
      break L64;
      break;
     }
    case -25195:
     {
      i4 = 92;
      break L122;
      break;
     }
    case -27755:
     {
      i4 = 155;
      break L122;
      break;
     }
    case -26731:
     {
      i4 = 187;
      break L122;
      break;
     }
    case -22781:
     {
      i4 = 188;
      break L122;
      break;
     }
    case -26917:
    case -29291:
     {
      break L124;
      break;
     }
    case -22777:
     {
      if (HEAP32[27044] | 0) break L64;
      _gui_do_scroll() | 0;
      _redrawcmd();
      break L64;
      break;
     }
    case -22776:
     {
      if (HEAP32[27044] | 0) break L64;
      _gui_do_horiz_scroll(HEAP32[27098] | 0, 0) | 0;
      _redrawcmd();
      break L64;
      break;
     }
    default:
     {
      i4 = 195;
      break L122;
     }
    } else switch (i3 | 0) {
    case -22773:
    case -18173:
    case -17917:
    case -20221:
    case -19965:
    case -19709:
    case -19453:
     {
      break L64;
      break;
     }
    case -20733:
    case -17515:
     {
      i4 = 92;
      break L122;
      break;
     }
    case -22013:
     {
      i4 = 155;
      break L122;
      break;
     }
    case -22525:
     {
      i4 = 187;
      break L122;
      break;
     }
    case -14144:
     {
      i4 = 188;
      break L122;
      break;
     }
    case -22269:
     {
      break L124;
      break;
     }
    case -20477:
    case -18795:
     {
      HEAP32[25245] = ((HEAP32[25245] | 0) != 0 ^ 1) & 1;
      _ui_cursor_shape();
      break L64;
      break;
     }
    case -21328:
     {
      _bracketed_paste(1, 0, 0) | 0;
      break L64;
      break;
     }
    default:
     {
      i4 = 195;
      break L122;
     }
    } while (0);
    while (1) {
     if ((HEAP32[25239] | 0) >= (HEAP32[25238] | 0)) break L64;
     HEAP32[i10 >> 2] = _cmdline_charsize(HEAP32[25239] | 0) | 0;
     if (HEAP32[27161] | 0) if (((HEAP32[25240] | 0) + (HEAP32[i10 >> 2] | 0) | 0) >= (Math_imul(HEAP32[10174] | 0, HEAP32[10173] | 0) | 0)) break L64;
     HEAP32[25240] = (HEAP32[25240] | 0) + (HEAP32[i10 >> 2] | 0);
     HEAP32[25239] = (HEAP32[25239] | 0) + 1;
     if (!((HEAP32[i9 >> 2] | 0) == -26917 | (HEAP32[i9 >> 2] | 0) == -22269)) if (!(HEAP32[26698] & 6)) break L64;
     if ((HEAPU8[(HEAP32[25236] | 0) + (HEAP32[25239] | 0) >> 0] | 0) == 32) break L64;
    }
   } else {
    if ((i3 | 0) >= 2) switch (i3 | 0) {
    case 23:
    case 8:
     {
      i4 = 92;
      break L122;
      break;
     }
    case 2:
     {
      i4 = 187;
      break L122;
      break;
     }
    case 5:
     {
      i4 = 188;
      break L122;
      break;
     }
    case 30:
     {
      do if (_map_to_exists_mode(114072, 32, 0) | 0) {
       HEAP32[10180] = HEAP32[10180] ^ 32;
       if (!(HEAP32[i22 >> 2] | 0)) break;
       i2 = HEAP32[i22 >> 2] | 0;
       if (HEAP32[10180] & 32 | 0) {
        HEAP32[i2 >> 2] = 1;
        break;
       } else {
        HEAP32[i2 >> 2] = 0;
        break;
       }
      } while (0);
      do if (HEAP32[i22 >> 2] | 0) if ((HEAP32[i22 >> 2] | 0) == ((HEAP32[26773] | 0) + 552 | 0)) {
       _set_iminsert_global();
       break;
      } else {
       _set_imsearch_global();
       break;
      } while (0);
      _ui_cursor_shape();
      break L64;
      break;
     }
    case 21:
     {
      HEAP32[i11 >> 2] = HEAP32[25239];
      HEAP32[25238] = (HEAP32[25238] | 0) - (HEAP32[i11 >> 2] | 0);
      HEAP32[25239] = 0;
      HEAP32[i10 >> 2] = 0;
      while (1) {
       i30 = HEAP32[25236] | 0;
       if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[25238] | 0)) break;
       i2 = HEAP32[i11 >> 2] | 0;
       HEAP32[i11 >> 2] = i2 + 1;
       i1 = HEAP8[i30 + i2 >> 0] | 0;
       i2 = HEAP32[25236] | 0;
       i31 = HEAP32[i10 >> 2] | 0;
       HEAP32[i10 >> 2] = i31 + 1;
       HEAP8[i2 + i31 >> 0] = i1;
      }
      HEAP8[i30 + (HEAP32[25238] | 0) >> 0] = 0;
      _redrawcmd();
      break L64;
      break;
     }
    case 25:
     {
      if (!(HEAPU16[54222] | 0)) break L122;
      if ((HEAPU16[54222] | 0) != 2) break L64;
      _clip_copy_modeless_selection(1);
      break L64;
      break;
     }
    case 3:
    case 27:
     {
      if (!(HEAP32[26798] | 0)) {
       i4 = 140;
       break L22;
      }
      if ((HEAP32[26826] | 0) == 0 | (HEAP32[26821] | 0) > 0) break L64; else {
       i4 = 140;
       break L22;
      }
      break;
     }
    case 18:
     {
      _putcmdline(34, 1);
      HEAP32[26802] = (HEAP32[26802] | 0) + 1;
      i1 = _plain_vgetc() | 0;
      HEAP32[i9 >> 2] = i1;
      HEAP32[i10 >> 2] = i1;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) == 15 ? 18 : i1;
      if ((HEAP32[i10 >> 2] | 0) == 18) HEAP32[i9 >> 2] = _plain_vgetc() | 0;
      HEAP32[25248] = 0;
      HEAP32[26802] = (HEAP32[26802] | 0) + -1;
      if ((HEAP32[i9 >> 2] | 0) != 27) {
       _cmdline_paste(HEAP32[i9 >> 2] | 0, (HEAP32[i10 >> 2] | 0) == 18 & 1, 0) | 0;
       HEAP32[27161] = 0;
      }
      _redrawcmd();
      break L64;
      break;
     }
    case 4:
     {
      if (!(_showmatches(i21, 0) | 0)) break L122;
      _redrawcmd();
      continue L22;
      break;
     }
    case 12:
     {
      if (!(_nextwild(i21, 7, 0, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0)) break L122; else break L64;
      break;
     }
    case 16:
    case 14:
     {
      if ((HEAP32[i21 + 20 >> 2] | 0) <= 0) break L64;
      if (!(_nextwild(i21, (HEAP32[i9 >> 2] | 0) == 16 ? 5 : 4, 0, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0)) break L122; else break L64;
      break;
     }
    case 17:
    case 22:
     {
      HEAP32[i20 >> 2] = 1;
      _putcmdline(94, 1);
      HEAP32[i9 >> 2] = _get_literal() | 0;
      HEAP32[i13 >> 2] = 0;
      HEAP32[25248] = 0;
      break L122;
      break;
     }
    default:
     {
      i4 = 195;
      break L122;
     }
    }
    L187 : do if ((i3 | 0) < -12797) switch (i3 | 0) {
    case -13821:
     {
      break L64;
      break;
     }
    case -12835:
     {
      i4 = 187;
      break L122;
      break;
     }
    case -14122:
    case -13387:
     {
      i4 = 188;
      break L122;
      break;
     }
    case -13347:
     {
      i4 = 155;
      break L122;
      break;
     }
    case -13565:
    case -13309:
     {
      i4 = 167;
      break;
     }
    case -13053:
     break;
    default:
     {
      i4 = 195;
      break L122;
     }
    } else {
     if ((i3 | 0) >= -12029) {
      if ((i3 | 0) < -11517) switch (i3 | 0) {
      case -12029:
      case -11773:
       {
        i4 = 167;
        break L187;
        break;
       }
      default:
       {
        i4 = 195;
        break L122;
       }
      }
      if ((i3 | 0) < 1) switch (i3 | 0) {
      case -11517:
       {
        break L187;
        break;
       }
      default:
       {
        i4 = 195;
        break L122;
       }
      }
      switch (i3 | 0) {
      case 1:
       break;
      default:
       {
        i4 = 195;
        break L122;
       }
      }
      if (!(_nextwild(i21, 6, 0, (HEAP32[i7 >> 2] | 0) != 64 & 1) | 0)) break L122; else break L64;
     }
     switch (i3 | 0) {
     case -12797:
     case -12541:
      {
       break L64;
       break;
      }
     case -12619:
      {
       i4 = 187;
       break L122;
       break;
      }
     case -12285:
      break;
     default:
      {
       i4 = 195;
       break L122;
      }
     }
     if (!(HEAP32[26627] | 0)) if (!(_mouse_has(99) | 0)) break L64;
     if (HEAP32[27099] | 0) _cmdline_paste(42, 1, 1) | 0; else _cmdline_paste(0, 1, 1) | 0;
     _redrawcmd();
     break L64;
    } while (0);
    if ((i4 | 0) == 167) {
     i4 = 0;
     if (HEAP32[i20 >> 2] | 0) break L64;
    }
    if ((HEAP32[i9 >> 2] | 0) == -12029 | (HEAP32[i9 >> 2] | 0) == -13565) HEAP32[i20 >> 2] = 1; else HEAP32[i20 >> 2] = 0;
    if (!(HEAP32[26627] | 0)) if (!(_mouse_has(99) | 0)) break L64;
    if (HEAP32[27099] | 0 ? (HEAP32[27095] | 0) < (HEAP32[26876] | 0) : 0) {
     HEAP32[i25 >> 2] = _get_mouse_button((0 - (HEAP32[i9 >> 2] | 0) | 0) >>> 8 & 255, i26, i27) | 0;
     i1 = (_mouse_model_popup() | 0) != 0;
     do if (i1 & (HEAP32[i25 >> 2] | 0) == 0) {
      if (!(HEAP32[26698] & 2)) break;
      HEAP32[i25 >> 2] = 2;
      HEAP32[26698] = HEAP32[26698] & -3;
     } while (0);
     _clip_modeless(HEAP32[i25 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i27 >> 2] | 0);
     break L64;
    }
    _set_cmdspos();
    HEAP32[25239] = 0;
    while (1) {
     if ((HEAP32[25239] | 0) >= (HEAP32[25238] | 0)) break L64;
     HEAP32[i10 >> 2] = _cmdline_charsize(HEAP32[25239] | 0) | 0;
     if ((HEAP32[27095] | 0) <= ((HEAP32[26876] | 0) + ((HEAP32[25240] | 0) / (HEAP32[10174] | 0) | 0) | 0)) if ((HEAP32[27096] | 0) < (((HEAP32[25240] | 0) % (HEAP32[10174] | 0) | 0) + (HEAP32[i10 >> 2] | 0) | 0)) break L64;
     HEAP32[25240] = (HEAP32[25240] | 0) + (HEAP32[i10 >> 2] | 0);
     HEAP32[25239] = (HEAP32[25239] | 0) + 1;
    }
   } while (0);
   if ((i4 | 0) == 92) {
    i4 = 0;
    if ((HEAP32[i9 >> 2] | 0) == -20733) HEAP32[i9 >> 2] = -17515;
    do if ((HEAP32[i9 >> 2] | 0) == -17515) {
     if ((HEAP32[25239] | 0) == (HEAP32[25238] | 0)) break;
     HEAP32[25239] = (HEAP32[25239] | 0) + 1;
    } while (0);
    if ((HEAP32[25239] | 0) <= 0) if ((HEAP32[25238] | 0) == 0 & (HEAP32[i9 >> 2] | 0) != 23 & (HEAP32[25243] | 0) == 0 & (HEAP32[i8 >> 2] | 0) == 0 ^ 1 | (HEAP32[26798] | 0) != 0) break; else {
     i4 = 115;
     break L22;
    }
    HEAP32[i11 >> 2] = HEAP32[25239];
    HEAP32[i24 >> 2] = (HEAP32[25236] | 0) + (HEAP32[i11 >> 2] | 0);
    L246 : do if ((HEAP32[i9 >> 2] | 0) == 23) {
     while (1) {
      if ((HEAP32[i24 >> 2] | 0) >>> 0 > (HEAP32[25236] | 0) >>> 0) i32 = (_vim_isspace(HEAPU8[(HEAP32[i24 >> 2] | 0) + -1 >> 0] | 0) | 0) != 0; else i32 = 0;
      i33 = (HEAP32[i24 >> 2] | 0) + -1 | 0;
      if (!i32) break;
      HEAP32[i24 >> 2] = i33;
     }
     HEAP32[i10 >> 2] = _vim_iswordc(HEAPU8[i33 >> 0] | 0) | 0;
     while (1) {
      if ((HEAP32[i24 >> 2] | 0) >>> 0 <= (HEAP32[25236] | 0) >>> 0) break L246;
      if (_vim_isspace(HEAPU8[(HEAP32[i24 >> 2] | 0) + -1 >> 0] | 0) | 0) break L246;
      i3 = _vim_iswordc(HEAPU8[(HEAP32[i24 >> 2] | 0) + -1 >> 0] | 0) | 0;
      if ((i3 | 0) != (HEAP32[i10 >> 2] | 0)) break L246;
      HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + -1;
     }
    } else HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + -1; while (0);
    HEAP32[25239] = (HEAP32[i24 >> 2] | 0) - (HEAP32[25236] | 0);
    HEAP32[25238] = (HEAP32[25238] | 0) - ((HEAP32[i11 >> 2] | 0) - (HEAP32[25239] | 0));
    HEAP32[i10 >> 2] = HEAP32[25239];
    while (1) {
     i34 = HEAP32[25236] | 0;
     if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[25238] | 0)) break;
     i3 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i3 + 1;
     i1 = HEAP8[i34 + i3 >> 0] | 0;
     i3 = HEAP32[25236] | 0;
     i31 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i31 + 1;
     HEAP8[i3 + i31 >> 0] = i1;
    }
    HEAP8[i34 + (HEAP32[25238] | 0) >> 0] = 0;
    _redrawcmd();
    break;
   } else if ((i4 | 0) == 155) {
    i4 = 0;
    if (!(HEAP32[25239] | 0)) break;
    while (1) {
     HEAP32[25239] = (HEAP32[25239] | 0) + -1;
     i1 = _cmdline_charsize(HEAP32[25239] | 0) | 0;
     HEAP32[25240] = (HEAP32[25240] | 0) - i1;
     if ((HEAP32[25239] | 0) <= 0) break L64;
     if (!((HEAP32[i9 >> 2] | 0) == -13347 | (HEAP32[i9 >> 2] | 0) == -22013)) if (!(HEAP32[26698] & 6)) break L64;
     if ((HEAPU8[(HEAP32[25236] | 0) + ((HEAP32[25239] | 0) - 1) >> 0] | 0) == 32) break L64;
    }
   } else if ((i4 | 0) == 187) {
    i4 = 0;
    HEAP32[25239] = 0;
    _set_cmdspos();
    break;
   } else if ((i4 | 0) == 188) {
    i4 = 0;
    HEAP32[25239] = HEAP32[25238];
    _set_cmdspos_cursor();
    break;
   } else if ((i4 | 0) == 195) {
    i4 = 0;
    if ((HEAP32[i9 >> 2] | 0) == (HEAP32[26725] | 0)) {
     i4 = 196;
     break L22;
    }
    if ((HEAP32[i9 >> 2] | 0) >= 0) HEAP32[26698] = 0;
   }
   do if (HEAP32[i13 >> 2] | 0) {
    if ((HEAP32[i9 >> 2] | 0) >= 0) if (_vim_iswordc(HEAP32[i9 >> 2] | 0) | 0) break;
    i1 = (_ccheck_abbr(HEAP32[i9 >> 2] | 0) | 0) != 0;
    if (i1 | (HEAP32[i9 >> 2] | 0) == 29) break L64;
   } while (0);
   i1 = HEAP32[i9 >> 2] | 0;
   if ((HEAP32[i9 >> 2] | 0) < 0 | (HEAP32[26698] | 0) != 0) {
    _put_on_cmdline(_get_special_key_name(i1, HEAP32[26698] | 0) | 0, -1, 1) | 0;
    break;
   } else {
    HEAP8[HEAP32[26882] >> 0] = i1;
    _put_on_cmdline(HEAP32[26882] | 0, 1, 1) | 0;
    break;
   }
  } while (0);
  _trigger_cmd_autocmd(HEAP32[i23 >> 2] | 0, 19);
 }
 if ((i4 | 0) == 36) {
  if ((HEAP32[i9 >> 2] | 0) == 7 & (HEAP32[26883] | 0) != 0 & (HEAP32[26806] | 0) == 0) HEAP32[26806] = 97;
  HEAP32[i12 >> 2] = 1;
 } else if ((i4 | 0) == 49) {
  if (!(HEAP32[26811] | 0)) {
   _windgoto(HEAP32[26877] | 0, 0);
   _out_flush();
  }
 } else if ((i4 | 0) == 115) {
  if (HEAP32[25236] | 0) {
   _vim_free(HEAP32[25236] | 0);
   HEAP32[25236] = 0;
  }
  if (!(HEAP32[26811] | 0)) {
   HEAP32[27043] = 0;
   _msg_putchar(32);
  }
  HEAP32[26699] = 1;
 } else if ((i4 | 0) == 140) HEAP32[i12 >> 2] = 1; else if ((i4 | 0) == 196) HEAP32[i12 >> 2] = 1;
 _ExpandCleanup(i21);
 HEAP32[25246] = 0;
 if ((HEAP32[25236] | 0) != 0 & (HEAP32[i12 >> 2] | 0) != 0) _abandon_cmdline();
 _msg_check();
 HEAP32[26710] = HEAP32[i17 >> 2];
 HEAP32[26855] = 0;
 if (HEAP32[i19 >> 2] | 0) HEAP32[26721] = 0;
 _trigger_cmd_autocmd(HEAP32[i23 >> 2] | 0, 21);
 HEAP32[10180] = HEAP32[i18 >> 2];
 _setmouse();
 _ui_cursor_shape();
 _sb_text_end_cmdline();
 HEAP32[i28 >> 2] = HEAP32[25236];
 HEAP32[25236] = 0;
 HEAP32[i6 >> 2] = HEAP32[i28 >> 2];
 i29 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i29 | 0;
}

function _do_put(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i7 = i6 + 196 | 0;
 i8 = i6 + 192 | 0;
 i9 = i6 + 188 | 0;
 i10 = i6 + 184 | 0;
 i11 = i6 + 180 | 0;
 i12 = i6 + 176 | 0;
 i13 = i6 + 172 | 0;
 i14 = i6 + 168 | 0;
 i15 = i6 + 164 | 0;
 i16 = i6 + 160 | 0;
 i17 = i6 + 156 | 0;
 i18 = i6 + 152 | 0;
 i19 = i6 + 148 | 0;
 i20 = i6 + 144 | 0;
 i21 = i6 + 140 | 0;
 i22 = i6 + 136 | 0;
 i23 = i6 + 132 | 0;
 i24 = i6 + 128 | 0;
 i25 = i6 + 124 | 0;
 i26 = i6 + 120 | 0;
 i27 = i6 + 88 | 0;
 i28 = i6 + 84 | 0;
 i29 = i6 + 80 | 0;
 i30 = i6 + 72 | 0;
 i31 = i6 + 64 | 0;
 i32 = i6 + 60 | 0;
 i33 = i6 + 56 | 0;
 i34 = i6 + 52 | 0;
 i35 = i6 + 48 | 0;
 i36 = i6 + 40 | 0;
 i37 = i6 + 32 | 0;
 i38 = i6 + 28 | 0;
 i39 = i6 + 24 | 0;
 i40 = i6 + 20 | 0;
 i41 = i6 + 16 | 0;
 i42 = i6 + 12 | 0;
 i43 = i6 + 8 | 0;
 i44 = i6 + 200 | 0;
 i45 = i6 + 4 | 0;
 i46 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i29 >> 2] = 0;
 HEAP32[i32 >> 2] = 0;
 HEAP32[i33 >> 2] = 0;
 HEAP32[i34 >> 2] = 1;
 HEAP32[i35 >> 2] = 0;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i38 >> 2] = 0;
 _adjust_clip_reg(i7);
 _may_get_selection(HEAP32[i7 >> 2] | 0) | 0;
 if (HEAP32[i10 >> 2] & 1 | 0) HEAP32[i32 >> 2] = _get_indent() | 0;
 i4 = (HEAP32[26773] | 0) + 476 | 0;
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 i3 = (HEAP32[26773] | 0) + 492 | 0;
 i4 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 if ((HEAP32[i7 >> 2] | 0) == 46) {
  if (HEAP32[26788] | 0) _stuffcharReadbuff(HEAP32[10179] | 0);
  i4 = (HEAP32[i9 >> 2] | 0) == -1;
  _stuff_inserted((HEAP32[i8 >> 2] | 0) == 1 ? (i4 ? 111 : 97) : i4 ? 79 : 105, HEAP32[i9 >> 2] | 0, 0) | 0;
  if (!(HEAP32[i10 >> 2] & 2)) {
   STACKTOP = i6;
   return;
  }
  if (!(_gchar_cursor() | 0)) {
   STACKTOP = i6;
   return;
  }
  _stuffcharReadbuff(108);
  STACKTOP = i6;
  return;
 }
 i4 = (_get_spec_reg(HEAP32[i7 >> 2] | 0, i37, i38, 1) | 0) != 0;
 if (i4 & (HEAP32[i37 >> 2] | 0) == 0) {
  STACKTOP = i6;
  return;
 }
 L20 : do if (_u_save(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0) | 0) {
  if (HEAP32[i37 >> 2] | 0) {
   HEAP32[i19 >> 2] = 0;
   HEAP32[i20 >> 2] = 1;
   HEAP32[i28 >> 2] = i37;
  } else {
   _get_yank_register(HEAP32[i7 >> 2] | 0, 0) | 0;
   HEAP32[i19 >> 2] = HEAPU8[(HEAP32[26084] | 0) + 8 >> 0];
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[26084] | 0) + 12 >> 2];
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[26084] | 0) + 4 >> 2];
   HEAP32[i28 >> 2] = HEAP32[HEAP32[26084] >> 2];
  }
  if ((HEAP32[i19 >> 2] | 0) == 1) {
   if (HEAP32[i10 >> 2] & 16 | 0) {
    if (!(_u_save_cursor() | 0)) break;
    HEAP32[i40 >> 2] = _ml_get_cursor() | 0;
    if ((HEAP32[i8 >> 2] | 0) == 1) if (HEAPU8[HEAP32[i40 >> 2] >> 0] | 0) HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + 1;
    HEAP32[i11 >> 2] = _vim_strsave(HEAP32[i40 >> 2] | 0) | 0;
    if (!(HEAP32[i11 >> 2] | 0)) break;
    _ml_append(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0, 0) | 0;
    _vim_free(HEAP32[i11 >> 2] | 0);
    HEAP32[i13 >> 2] = _ml_get_curline() | 0;
    HEAP32[i40 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
    if ((HEAP32[i8 >> 2] | 0) == 1) if (HEAPU8[HEAP32[i40 >> 2] >> 0] | 0) HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + 1;
    i4 = HEAP32[i13 >> 2] | 0;
    HEAP32[i11 >> 2] = _vim_strnsave(i4 | 0, (HEAP32[i40 >> 2] | 0) - i4 | 0) | 0;
    if (!(HEAP32[i11 >> 2] | 0)) break;
    _ml_replace(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0) | 0;
    HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
    HEAP32[i8 >> 2] = 1;
   }
   if (HEAP32[i10 >> 2] & 32 | 0) {
    i4 = (HEAP32[26881] | 0) + 24 | 0;
    i3 = (HEAP32[26773] | 0) + 396 + 8 | 0;
    HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i8 >> 2] = 1;
   }
   i3 = (HEAP32[26773] | 0) + 476 | 0;
   i4 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   i4 = (HEAP32[26773] | 0) + 492 | 0;
   i3 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  }
  if (HEAP32[i10 >> 2] & 8 | 0) HEAP32[i19 >> 2] = 1;
  if ((HEAP32[i20 >> 2] | 0) == 0 | (HEAP32[i28 >> 2] | 0) == 0) {
   if (!(HEAP32[i7 >> 2] | 0)) i47 = 96890; else i47 = _transchar(HEAP32[i7 >> 2] | 0) | 0;
   _emsg2(62495, i47) | 0;
   break;
  }
  do if ((HEAP32[i19 >> 2] | 0) == 2) {
   HEAP32[i16 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) + 1;
   if ((HEAP32[i16 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i16 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) + 1;
   if (!(_u_save((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1 | 0, HEAP32[i16 >> 2] | 0) | 0)) break L20;
  } else {
   if ((HEAP32[i19 >> 2] | 0) != 1) if (!(_u_save_cursor() | 0)) break L20; else break;
   HEAP32[i16 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
   if ((HEAP32[i8 >> 2] | 0) == 1) HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) if (!(HEAPU8[(_ml_get(1) | 0) >> 0] | 0)) i48 = _u_save(0, 2) | 0; else i5 = 45; else i5 = 45;
   if ((i5 | 0) == 45) {
    i3 = HEAP32[i16 >> 2] | 0;
    i48 = _u_save(i3 - 1 | 0, i3 | 0) | 0;
   }
   if (!i48) break L20;
  } while (0);
  HEAP32[i14 >> 2] = _strlen(HEAP32[HEAP32[i28 >> 2] >> 2] | 0) | 0;
  HEAP32[i16 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  HEAP32[i17 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
  do if ((HEAP32[i19 >> 2] | 0) == 2) {
   HEAP32[i41 >> 2] = _gchar_cursor() | 0;
   HEAP32[i42 >> 2] = 0;
   i3 = HEAP32[26881] | 0;
   i4 = i3 | 0;
   i2 = i3 + 24 | 0;
   if ((HEAP32[i8 >> 2] | 0) == 1 & (HEAP32[i41 >> 2] | 0) != 0) {
    _getvcol(i4, i2, 0, 0, i17);
    i3 = (HEAP32[26881] | 0) + 24 + 4 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   } else _getvcol(i4, i2, i17, 0, i42);
   HEAP32[i27 + 16 >> 2] = 0;
   HEAP32[i18 >> 2] = 0;
   while (1) {
    if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i20 >> 2] | 0)) break;
    HEAP32[i27 >> 2] = 0;
    HEAP32[i27 + 4 >> 2] = 0;
    HEAP32[i23 >> 2] = 0;
    HEAP32[i24 >> 2] = 0;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
     if (!(_ml_append(HEAP32[HEAP32[26773] >> 2] | 0, 114072, 1, 0) | 0)) break;
     HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
    }
    HEAP32[i13 >> 2] = _ml_get_curline() | 0;
    HEAP32[i21 >> 2] = _strlen(HEAP32[i13 >> 2] | 0) | 0;
    HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
    while (1) {
     if ((HEAP32[i23 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
     if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) break;
     HEAP32[i25 >> 2] = _lbr_chartabsize_adv(HEAP32[i13 >> 2] | 0, i11, HEAP32[i23 >> 2] | 0) | 0;
     HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + (HEAP32[i25 >> 2] | 0);
    }
    HEAP32[i27 + 16 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
    if ((HEAP32[i23 >> 2] | 0) < (HEAP32[i17 >> 2] | 0)) i49 = 1; else if ((HEAP32[i23 >> 2] | 0) == (HEAP32[i17 >> 2] | 0)) i49 = (HEAP8[HEAP32[i11 >> 2] >> 0] | 0) != 0 ^ 1; else i49 = 0;
    HEAP8[i44 >> 0] = i49 & 1;
    do if ((HEAP32[i23 >> 2] | 0) < (HEAP32[i17 >> 2] | 0)) HEAP32[i27 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i23 >> 2] | 0); else if ((HEAP32[i23 >> 2] | 0) > (HEAP32[i17 >> 2] | 0)) {
     HEAP32[i27 + 4 >> 2] = (HEAP32[i23 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
     HEAP32[i27 >> 2] = (HEAP32[i25 >> 2] | 0) - (HEAP32[i27 + 4 >> 2] | 0);
     i2 = i27 + 16 | 0;
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
     HEAP32[i24 >> 2] = 1;
     if ((HEAPU8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i27 + 16 >> 2] | 0) >> 0] | 0) == 9) break;
     HEAP32[i24 >> 2] = 0;
     HEAP32[i27 + 4 >> 2] = 0;
    } while (0);
    HEAP32[i14 >> 2] = _strlen(HEAP32[(HEAP32[i28 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[i43 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    HEAP32[i26 >> 2] = 0;
    while (1) {
     if ((HEAP32[i26 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) break;
     i2 = _lbr_chartabsize(0, (HEAP32[(HEAP32[i28 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0) + (HEAP32[i26 >> 2] | 0) | 0, 0) | 0;
     HEAP32[i43 >> 2] = (HEAP32[i43 >> 2] | 0) - i2;
     HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
    }
    if ((HEAP32[i43 >> 2] | 0) < 0) HEAP32[i43 >> 2] = 0;
    i2 = Math_imul(HEAP32[i9 >> 2] | 0, (HEAP32[i14 >> 2] | 0) + (HEAP32[i43 >> 2] | 0) | 0) | 0;
    HEAP32[i15 >> 2] = i2 + (HEAP32[i27 >> 2] | 0) + (HEAP32[i27 + 4 >> 2] | 0);
    HEAP32[i12 >> 2] = _alloc_check((HEAP32[i15 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) + 1 | 0) | 0;
    if (!(HEAP32[i12 >> 2] | 0)) break;
    HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
    _memmove(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i27 + 16 >> 2] | 0) | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i27 + 16 >> 2] | 0);
    _memset(HEAP32[i11 >> 2] | 0, 32, HEAP32[i27 >> 2] | 0) | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
    HEAP32[i26 >> 2] = 0;
    while (1) {
     i50 = HEAP32[i11 >> 2] | 0;
     if ((HEAP32[i26 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
     _memmove(i50 | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
     if (((HEAP8[i44 >> 0] | 0 ? (HEAP32[i26 >> 2] | 0) >= ((HEAP32[i9 >> 2] | 0) - 1 | 0) : 0) ^ 1) & (HEAP32[i43 >> 2] | 0) != 0) {
      _memset(HEAP32[i11 >> 2] | 0, 32, HEAP32[i43 >> 2] | 0) | 0;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i43 >> 2] | 0);
     }
     HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
    }
    _memset(i50 | 0, 32, HEAP32[i27 + 4 >> 2] | 0) | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i27 + 4 >> 2] | 0);
    i2 = HEAP32[i27 + 16 >> 2] | 0;
    i4 = HEAP32[i24 >> 2] | 0;
    _memmove(HEAP32[i11 >> 2] | 0, (HEAP32[i13 >> 2] | 0) + i2 + i4 | 0, (HEAP32[i21 >> 2] | 0) - i2 - i4 + 1 | 0) | 0;
    _ml_replace(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0) | 0;
    i4 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
    if (!(HEAP32[i18 >> 2] | 0)) {
     i4 = (HEAP32[26881] | 0) + 24 + 4 | 0;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
    }
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   }
   _changed_lines(HEAP32[i16 >> 2] | 0, 0, HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i29 >> 2] | 0);
   i4 = (HEAP32[26773] | 0) + 476 | 0;
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = HEAP32[i16 >> 2];
   HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1;
   HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = (HEAP32[i27 + 16 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) - 1;
   if (!(HEAP32[i10 >> 2] & 2)) {
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i16 >> 2];
    break;
   }
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   i4 = (HEAP32[26773] | 0) + 492 | 0;
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   i4 = (HEAP32[26881] | 0) + 24 + 4 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP32[i45 >> 2] = _strlen(_ml_get_curline() | 0) | 0;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > (HEAP32[i45 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i45 >> 2];
  } else {
   i4 = HEAP32[i8 >> 2] | 0;
   if (!(HEAP32[i19 >> 2] | 0)) {
    if ((i4 | 0) == 1) if (_gchar_cursor() | 0) {
     HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
     if (HEAP32[i14 >> 2] | 0) {
      i2 = (HEAP32[26881] | 0) + 24 + 4 | 0;
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
      i2 = (HEAP32[26773] | 0) + 492 + 4 | 0;
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
     }
    }
    i2 = (HEAP32[26773] | 0) + 476 | 0;
    i3 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   } else if ((i4 | 0) == -1) HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
   i4 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i30 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i30 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   if ((HEAP32[i19 >> 2] | 0) == 0 & (HEAP32[i20 >> 2] | 0) == 1) {
    HEAP32[i46 >> 2] = 0;
    if (HEAP32[26788] | 0) {
     HEAP32[i46 >> 2] = HEAP32[(HEAP32[26773] | 0) + 396 + 8 >> 2];
     if ((HEAP32[i46 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 396 >> 2] | 0)) HEAP32[i46 >> 2] = HEAP32[(HEAP32[26773] | 0) + 396 >> 2];
    }
    do {
     HEAP32[i15 >> 2] = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
     L144 : do if ((HEAP32[i15 >> 2] | 0) > 0) {
      HEAP32[i13 >> 2] = _ml_get(HEAP32[i16 >> 2] | 0) | 0;
      do if (HEAP32[26788] | 0) {
       i4 = HEAP32[i17 >> 2] | 0;
       if ((i4 | 0) <= (_strlen(HEAP32[i13 >> 2] | 0) | 0)) break;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
       break L144;
      } while (0);
      i4 = _strlen(HEAP32[i13 >> 2] | 0) | 0;
      HEAP32[i12 >> 2] = _alloc_check(i4 + (HEAP32[i15 >> 2] | 0) + 1 | 0) | 0;
      if (!(HEAP32[i12 >> 2] | 0)) break L20;
      _memmove(HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
      HEAP32[i11 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
      HEAP32[i18 >> 2] = 0;
      while (1) {
       i51 = HEAP32[i11 >> 2] | 0;
       if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
       _memmove(i51 | 0, HEAP32[HEAP32[i28 >> 2] >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
       HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
       HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
      }
      i4 = (HEAP32[i13 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0;
      _memmove(i51 | 0, i4 | 0, (_strlen((HEAP32[i13 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0) | 0) + 1 | 0) | 0;
      _ml_replace(HEAP32[i16 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0) | 0;
      if ((HEAP32[i16 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
       i5 = 110;
       break;
      }
      _changed_cline_bef_curs();
      i4 = (HEAP32[26881] | 0) + 24 + 4 | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1);
      i5 = 110;
     } else i5 = 110; while (0);
     if ((i5 | 0) == 110) {
      i5 = 0;
      if (HEAP32[26788] | 0) HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     }
     if (!(HEAP32[26788] | 0)) break;
    } while ((HEAP32[i16 >> 2] | 0) <= (HEAP32[i46 >> 2] | 0));
    if (HEAP32[26788] | 0) HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
    i4 = (HEAP32[26773] | 0) + 492 | 0;
    i3 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    do if (HEAP32[i15 >> 2] | 0) {
     if (!(HEAP32[26806] | 0)) if (!(HEAP32[i10 >> 2] & 2)) break;
     i3 = (HEAP32[26881] | 0) + 24 + 4 | 0;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    } while (0);
    _changed_bytes(HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0);
    break;
   }
   HEAP32[i39 >> 2] = 1;
   L172 : while (1) {
    if ((HEAP32[i39 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) break;
    HEAP32[i18 >> 2] = 0;
    if (!(HEAP32[i19 >> 2] | 0)) {
     HEAP32[i16 >> 2] = HEAP32[i30 >> 2];
     i3 = _ml_get(HEAP32[i16 >> 2] | 0) | 0;
     HEAP32[i11 >> 2] = i3 + (HEAP32[i17 >> 2] | 0);
     HEAP32[i15 >> 2] = _strlen(HEAP32[(HEAP32[i28 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 1 << 2) >> 2] | 0) | 0;
     i3 = _strlen(HEAP32[i11 >> 2] | 0) | 0;
     HEAP32[i12 >> 2] = _alloc_check(i3 + (HEAP32[i15 >> 2] | 0) + 1 | 0) | 0;
     if (!(HEAP32[i12 >> 2] | 0)) break;
     _strcpy(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 1 << 2) >> 2] | 0) | 0;
     _strcat(HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
     _ml_append(HEAP32[i16 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, 0) | 0;
     _vim_free(HEAP32[i12 >> 2] | 0);
     HEAP32[i13 >> 2] = _ml_get(HEAP32[i16 >> 2] | 0) | 0;
     HEAP32[i12 >> 2] = _alloc_check((HEAP32[i17 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) + 1 | 0) | 0;
     if (!(HEAP32[i12 >> 2] | 0)) break;
     _memmove(HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
     _memmove((HEAP32[i12 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0, HEAP32[HEAP32[i28 >> 2] >> 2] | 0, (HEAP32[i14 >> 2] | 0) + 1 | 0) | 0;
     _ml_replace(HEAP32[i16 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0) | 0;
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i16 >> 2];
     HEAP32[i18 >> 2] = 1;
    }
    while (1) {
     if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i20 >> 2] | 0)) break;
     if (HEAP32[i19 >> 2] | 0) i5 = 131; else if ((HEAP32[i18 >> 2] | 0) < ((HEAP32[i20 >> 2] | 0) - 1 | 0)) i5 = 131;
     if ((i5 | 0) == 131) {
      i5 = 0;
      if (!(_ml_append(HEAP32[i16 >> 2] | 0, HEAP32[(HEAP32[i28 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0, 0, 0) | 0)) break L172;
     }
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
     do if (HEAP32[i10 >> 2] & 1 | 0) {
      i3 = (HEAP32[26881] | 0) + 24 | 0;
      HEAP32[i36 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i36 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i16 >> 2];
      HEAP32[i11 >> 2] = _ml_get(HEAP32[i16 >> 2] | 0) | 0;
      do if ((HEAP32[i39 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
       if ((HEAP32[i18 >> 2] | 0) != ((HEAP32[i20 >> 2] | 0) - 1 | 0)) break;
       HEAP32[i35 >> 2] = _strlen(HEAP32[i11 >> 2] | 0) | 0;
      } while (0);
      do if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) HEAP32[i31 >> 2] = 0; else if (HEAP32[i34 >> 2] | 0) {
       i3 = HEAP32[i32 >> 2] | 0;
       HEAP32[i33 >> 2] = i3 - (_get_indent() | 0);
       HEAP32[i31 >> 2] = HEAP32[i32 >> 2];
       HEAP32[i34 >> 2] = 0;
       break;
      } else {
       i3 = _get_indent() | 0;
       i4 = i3 + (HEAP32[i33 >> 2] | 0) | 0;
       HEAP32[i31 >> 2] = i4;
       HEAP32[i31 >> 2] = (i4 | 0) < 0 ? 0 : i4;
       break;
      } while (0);
      _set_indent(HEAP32[i31 >> 2] | 0, 0) | 0;
      i4 = (HEAP32[26881] | 0) + 24 | 0;
      HEAP32[i4 >> 2] = HEAP32[i36 >> 2];
      HEAP32[i4 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
      if ((HEAP32[i39 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) break;
      if ((HEAP32[i18 >> 2] | 0) != ((HEAP32[i20 >> 2] | 0) - 1 | 0)) break;
      i4 = _strlen(_ml_get(HEAP32[i16 >> 2] | 0) | 0) | 0;
      HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) - i4;
     } while (0);
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
    }
    HEAP32[i39 >> 2] = (HEAP32[i39 >> 2] | 0) + 1;
   }
   if ((HEAP32[i19 >> 2] | 0) == 1) {
    HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
    if ((HEAP32[i8 >> 2] | 0) == 1) {
     i4 = (HEAP32[26773] | 0) + 476 | 0;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
    }
   }
   if (((HEAP32[(HEAP32[26773] | 0) + 476 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) == 0 & 1) - 1 + (HEAP32[i29 >> 2] | 0) | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) _mark_adjust((HEAP32[(HEAP32[26773] | 0) + 476 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) == 0 & 1) | 0, 2147483647, HEAP32[i29 >> 2] | 0, 0);
   if (!(HEAP32[i19 >> 2] | 0)) {
    i4 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
    _changed_lines(i4 | 0, HEAP32[i17 >> 2] | 0, i4 + 1 | 0, HEAP32[i29 >> 2] | 0);
   } else {
    i4 = HEAP32[(HEAP32[26773] | 0) + 476 >> 2] | 0;
    _changed_lines(i4 | 0, 0, i4 | 0, HEAP32[i29 >> 2] | 0);
   }
   HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = HEAP32[i16 >> 2];
   i4 = _strlen(HEAP32[(HEAP32[i28 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 1 << 2) >> 2] | 0) | 0;
   HEAP32[i17 >> 2] = i4 - (HEAP32[i35 >> 2] | 0);
   if ((HEAP32[i17 >> 2] | 0) > 1) HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = (HEAP32[i17 >> 2] | 0) - 1; else HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = 0;
   if (HEAP32[i10 >> 2] & 4 | 0) {
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i16 >> 2];
    _beginline(5);
    break;
   }
   i4 = (HEAP32[i19 >> 2] | 0) == 1;
   if (!(HEAP32[i10 >> 2] & 2)) {
    i3 = (HEAP32[26881] | 0) + 24 | 0;
    if (!i4) {
     HEAP32[i3 >> 2] = HEAP32[i30 >> 2];
     HEAP32[i3 + 4 >> 2] = HEAP32[i30 + 4 >> 2];
     break;
    }
    HEAP32[i3 + 4 >> 2] = 0;
    if ((HEAP32[i8 >> 2] | 0) == 1) {
     i3 = (HEAP32[26881] | 0) + 24 | 0;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
    _beginline(5);
    break;
   }
   i3 = HEAP32[i16 >> 2] | 0;
   if (!i4) {
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i3;
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i17 >> 2];
    break;
   }
   if ((i3 | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2]; else HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
  } while (0);
  _msgmore(HEAP32[i29 >> 2] | 0);
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 } while (0);
 if (HEAP32[i38 >> 2] | 0) _vim_free(HEAP32[i37 >> 2] | 0);
 if ((HEAP32[i7 >> 2] | 0) == 61) _vim_free(HEAP32[i28 >> 2] | 0);
 HEAP32[26788] = 0;
 _adjust_cursor_eol();
 STACKTOP = i6;
 return;
}

function _check_termcode(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i7 = i6 + 132 | 0;
 i8 = i6 + 128 | 0;
 i9 = i6 + 124 | 0;
 i10 = i6 + 120 | 0;
 i11 = i6 + 116 | 0;
 i12 = i6 + 112 | 0;
 i13 = i6 + 108 | 0;
 i14 = i6 + 104 | 0;
 i15 = i6 + 100 | 0;
 i16 = i6 + 96 | 0;
 i17 = i6 + 92 | 0;
 i18 = i6 + 88 | 0;
 i19 = i6 + 150 | 0;
 i20 = i6 + 84 | 0;
 i21 = i6 + 80 | 0;
 i22 = i6 + 76 | 0;
 i23 = i6 + 72 | 0;
 i24 = i6 + 68 | 0;
 i25 = i6 + 142 | 0;
 i26 = i6 + 64 | 0;
 i27 = i6 + 60 | 0;
 i28 = i6 + 56 | 0;
 i29 = i6 + 136 | 0;
 i30 = i6 + 52 | 0;
 i31 = i6 + 48 | 0;
 i32 = i6 + 44 | 0;
 i33 = i6 + 40 | 0;
 i34 = i6 + 36 | 0;
 i35 = i6 + 32 | 0;
 i36 = i6 + 24 | 0;
 i37 = i6 + 16 | 0;
 i38 = i6 + 12 | 0;
 i39 = i6 + 8 | 0;
 i40 = i6 + 4 | 0;
 i41 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i28 >> 2] = 0;
 HEAP32[i31 >> 2] = 0;
 HEAP32[i34 >> 2] = 0;
 HEAP32[i38 >> 2] = (_vim_strchr(HEAP32[26904] | 0, 75) | 0) != 0 & 1;
 if (HEAP32[26599] | 0) _gather_termleader();
 HEAP32[i18 >> 2] = 0;
 L4 : while (1) {
  if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
   i5 = 204;
   break;
  }
  i4 = HEAP32[i18 >> 2] | 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   if ((i4 | 0) >= (HEAP32[26821] | 0)) {
    i5 = 204;
    break;
   }
   HEAP32[i12 >> 2] = (HEAP32[26817] | 0) + (HEAP32[26820] | 0) + (HEAP32[i18 >> 2] | 0);
   HEAP32[i16 >> 2] = (HEAP32[26821] | 0) - (HEAP32[i18 >> 2] | 0);
  } else {
   if ((i4 | 0) >= (HEAP32[HEAP32[i11 >> 2] >> 2] | 0)) {
    i5 = 204;
    break;
   }
   HEAP32[i12 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
   HEAP32[i16 >> 2] = (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
  }
  do if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 128) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 2; else {
   HEAP32[i26 >> 2] = HEAPU8[HEAP32[i12 >> 2] >> 0];
   HEAP32[i13 >> 2] = 113211;
   while (1) {
    if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) break;
    if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) == (HEAP32[i26 >> 2] | 0)) break;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
   if (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) {
    if (!(HEAP32[26915] | 0 ? 1 : (HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) != 27)) if (HEAP32[10180] & 16 | 0) break;
    HEAP8[i19 >> 0] = 0;
    HEAP8[i19 + 1 >> 0] = 0;
    HEAP32[i20 >> 2] = 0;
    L25 : do if (HEAP32[26627] | 0) {
     if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 155) {
      if ((HEAP32[i16 >> 2] | 0) < 3) {
       i5 = 22;
       break L4;
      }
      HEAP32[i14 >> 2] = 3;
      HEAP8[i19 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0;
      HEAP8[i19 + 1 >> 0] = HEAP8[(HEAP32[i12 >> 2] | 0) + 2 >> 0] | 0;
     }
    } else {
     HEAP32[i28 >> 2] = 0;
     L30 : while (1) {
      if ((HEAP32[i28 >> 2] | 0) >= (HEAP32[26600] | 0)) break L25;
      HEAP32[i14 >> 2] = HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 8 >> 2];
      HEAP32[i21 >> 2] = 0;
      if ((HEAP32[i38 >> 2] | 0) != 0 & (HEAP32[i18 >> 2] | 0) != 0) {
       if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) i5 = 28;
      } else i5 = 28;
      do if ((i5 | 0) == 28) {
       i5 = 0;
       if (!(_strncmp(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 4 >> 2] | 0, HEAP32[i12 >> 2] | 0, (HEAP32[i14 >> 2] | 0) > (HEAP32[i16 >> 2] | 0) ? HEAP32[i16 >> 2] | 0 : HEAP32[i14 >> 2] | 0) | 0)) {
        i5 = 29;
        break L30;
       }
       if ((HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 12 >> 2] | 0) > 0) {
        HEAP32[i15 >> 2] = HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 12 >> 2];
        if ((HEAP32[i38 >> 2] | 0) != 0 & (HEAP32[i18 >> 2] | 0) != 0) if ((HEAP32[i16 >> 2] | 0) < (HEAP32[i15 >> 2] | 0)) break;
        if (!(_strncmp(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 4 >> 2] | 0, HEAP32[i12 >> 2] | 0, (HEAP32[i15 >> 2] | 0) > (HEAP32[i16 >> 2] | 0) ? HEAP32[i16 >> 2] | 0 : HEAP32[i15 >> 2] | 0) | 0)) {
         if ((HEAP32[i16 >> 2] | 0) <= (HEAP32[i15 >> 2] | 0)) {
          i5 = 45;
          break L4;
         }
         if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) == (HEAPU8[(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 4 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) - 1) >> 0] | 0)) {
          i5 = 47;
          break L30;
         }
         if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 59) if ((HEAP32[i15 >> 2] | 0) == ((HEAP32[i14 >> 2] | 0) - 3 | 0)) break;
         HEAP32[i27 >> 2] = (HEAP32[i14 >> 2] | 0) - 2;
         while (1) {
          if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[i16 >> 2] | 0)) break;
          if (!(_isdigit(HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) >> 0] | 0) | 0)) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) >> 0] | 0) != 59) break;
          HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
         }
         HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
         if ((HEAP32[i16 >> 2] | 0) < (HEAP32[i27 >> 2] | 0)) {
          i5 = 56;
          break L4;
         }
         if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i27 >> 2] | 0) - 1) >> 0] | 0) == (HEAPU8[(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 4 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) - 1) >> 0] | 0)) {
          i5 = 58;
          break L30;
         }
        }
       }
      } while (0);
      HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
     }
     if ((i5 | 0) == 29) {
      i5 = 0;
      if ((HEAP32[i16 >> 2] | 0) < (HEAP32[i14 >> 2] | 0)) {
       i5 = 30;
       break L4;
      }
      L73 : do if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) >> 0] | 0) == 75) if (((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 1 >> 0] | 0) - 48 | 0) >>> 0 < 10) {
       HEAP32[i27 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
       while (1) {
        if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[26600] | 0)) break L73;
        if ((HEAP32[(HEAP32[26602] | 0) + (HEAP32[i27 >> 2] << 4) + 8 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) if (!(_strncmp(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 4 >> 2] | 0, HEAP32[(HEAP32[26602] | 0) + (HEAP32[i27 >> 2] << 4) + 4 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0)) break;
        HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
       }
       HEAP32[i28 >> 2] = HEAP32[i27 >> 2];
      } while (0);
      HEAP8[i19 >> 0] = HEAP8[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) >> 0] | 0;
      HEAP8[i19 + 1 >> 0] = HEAP8[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 1 >> 0] | 0;
      break;
     } else if ((i5 | 0) == 47) {
      i5 = 0;
      HEAP32[i14 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     } else if ((i5 | 0) == 58) {
      i5 = 0;
      HEAP32[i21 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) + -2;
      HEAP32[i39 >> 2] = (_atoi(HEAP32[i21 >> 2] | 0) | 0) - 1;
      if (HEAP32[i39 >> 2] & 1 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 2;
      if (HEAP32[i39 >> 2] & 2 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 8;
      if (HEAP32[i39 >> 2] & 4 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 4;
      if (HEAP32[i39 >> 2] & 8 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 16;
      HEAP32[i14 >> 2] = HEAP32[i27 >> 2];
     }
     HEAP8[i19 >> 0] = HEAP8[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) >> 0] | 0;
     HEAP8[i19 + 1 >> 0] = HEAP8[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 1 >> 0] | 0;
    } while (0);
    if (HEAPU8[i19 >> 0] | 0) {
     i5 = 70;
     break L4;
    }
   }
  } while (0);
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 22) {
  HEAP32[i7 >> 2] = -1;
  i42 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 } else if ((i5 | 0) == 30) {
  HEAP32[i7 >> 2] = -1;
  i42 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 } else if ((i5 | 0) == 45) {
  HEAP32[i7 >> 2] = -1;
  i42 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 } else if ((i5 | 0) == 56) {
  HEAP32[i7 >> 2] = -1;
  i42 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 } else if ((i5 | 0) == 70) {
  do if (HEAP32[26627] | 0) if ((HEAPU8[i19 >> 0] | 0) == 253) {
   if ((HEAPU8[i19 + 1 >> 0] | 0) != 89) if ((HEAPU8[i19 + 1 >> 0] | 0) != 92) if ((HEAPU8[i19 + 1 >> 0] | 0) != 77) if ((HEAPU8[i19 + 1 >> 0] | 0) != 78) if ((HEAPU8[i19 + 1 >> 0] | 0) != 75) if ((HEAPU8[i19 + 1 >> 0] | 0) != 76) {
    i5 = 81;
    break;
   }
   HEAP32[i30 >> 2] = _get_bytes_from_buf((HEAP32[i12 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0, i29, 4) | 0;
   if ((HEAP32[i30 >> 2] | 0) != -1) {
    HEAP32[27096] = ((HEAPU8[i29 >> 0] | 0) - 32 - 1 << 7) + (HEAPU8[i29 + 1 >> 0] | 0) - 32 - 1;
    HEAP32[27095] = ((HEAPU8[i29 + 2 >> 0] | 0) - 32 - 1 << 7) + (HEAPU8[i29 + 3 >> 0] | 0) - 32 - 1;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i30 >> 2] | 0);
    break;
   }
   HEAP32[i7 >> 2] = -1;
   i42 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i42 | 0;
  } else i5 = 81; else i5 = 81; while (0);
  do if ((i5 | 0) == 81) {
   if ((HEAPU8[i19 >> 0] | 0) != 251) {
    if ((HEAPU8[i19 >> 0] | 0) != 249) {
     if ((HEAPU8[i19 >> 0] | 0) != 248) break;
     HEAP32[i27 >> 2] = 0;
     HEAP32[i26 >> 2] = 0;
     while (1) {
      if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) >> 0] | 0) != 155) break;
      if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i27 >> 2] | 0) + 1) >> 0] | 0) != 248) break;
      if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i27 >> 2] | 0) + 2) >> 0] | 0)) break;
      HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 3;
      HEAP32[i30 >> 2] = _get_long_from_buf((HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) | 0, i41) | 0;
      if ((HEAP32[i30 >> 2] | 0) == -1) break;
      HEAP32[27098] = HEAP32[i41 >> 2];
      HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i30 >> 2] | 0);
      HEAP32[i14 >> 2] = HEAP32[i27 >> 2];
      HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
     }
     if (HEAP32[i26 >> 2] | 0) break;
     HEAP32[i7 >> 2] = -1;
     i42 = HEAP32[i7 >> 2] | 0;
     STACKTOP = i6;
     return i42 | 0;
    }
    HEAP32[i27 >> 2] = 0;
    HEAP32[i26 >> 2] = 0;
    while (1) {
     if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) >> 0] | 0) != 155) break;
     if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i27 >> 2] | 0) + 1) >> 0] | 0) != 249) break;
     if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i27 >> 2] | 0) + 2) >> 0] | 0)) break;
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 3;
     HEAP32[i30 >> 2] = _get_bytes_from_buf((HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) | 0, i29, 1) | 0;
     if ((HEAP32[i30 >> 2] | 0) == -1) break;
     if (!(HEAP32[i26 >> 2] | 0)) HEAP32[27097] = HEAPU8[i29 >> 0]; else if ((HEAP32[27097] | 0) != (HEAPU8[i29 >> 0] | 0)) break;
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i30 >> 2] | 0);
     HEAP32[i30 >> 2] = _get_long_from_buf((HEAP32[i12 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) | 0, i40) | 0;
     if ((HEAP32[i30 >> 2] | 0) == -1) break;
     HEAP32[27098] = HEAP32[i40 >> 2];
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i30 >> 2] | 0);
     HEAP32[i14 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
    }
    if (HEAP32[i26 >> 2] | 0) break;
    HEAP32[i7 >> 2] = -1;
    i42 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   }
   HEAP32[i33 >> 2] = 0;
   HEAP32[i32 >> 2] = 0;
   L138 : do if ((HEAPU8[i19 >> 0] | 0) == 251) {
    while (1) {
     i39 = (HEAP32[i12 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0;
     if (HEAP32[26627] | 0) {
      HEAP32[i30 >> 2] = _get_bytes_from_buf(i39, i29, 5) | 0;
      if ((HEAP32[i30 >> 2] | 0) == -1) {
       i5 = 86;
       break;
      }
      HEAP32[i31 >> 2] = HEAPU8[i29 >> 0];
      HEAP32[27096] = ((HEAPU8[i29 + 1 >> 0] | 0) - 32 - 1 << 7) + (HEAPU8[i29 + 2 >> 0] | 0) - 32 - 1;
      HEAP32[27095] = ((HEAPU8[i29 + 3 >> 0] | 0) - 32 - 1 << 7) + (HEAPU8[i29 + 4 >> 0] | 0) - 32 - 1;
     } else {
      HEAP32[i30 >> 2] = _get_bytes_from_buf(i39, i29, 3) | 0;
      if ((HEAP32[i30 >> 2] | 0) == -1) {
       i5 = 89;
       break;
      }
      HEAP32[i31 >> 2] = HEAPU8[i29 >> 0];
      HEAP32[27096] = (HEAPU8[i29 + 1 >> 0] | 0) - 32 - 1;
      HEAP32[27095] = (HEAPU8[i29 + 2 >> 0] | 0) - 32 - 1;
     }
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i30 >> 2] | 0);
     if (HEAP32[26627] | 0) HEAP32[i27 >> 2] = 3; else HEAP32[i27 >> 2] = HEAP32[(HEAP32[26602] | 0) + (HEAP32[i28 >> 2] << 4) + 8 >> 2];
     if (_strncmp(HEAP32[i12 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0, HEAP32[i27 >> 2] | 0) | 0) break L138;
     if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (HEAP32[i27 >> 2] | 0)) >> 0] | 0) != (HEAP32[i31 >> 2] | 0)) break L138;
     if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) + 1) >> 0] | 0)) break L138;
     if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) + 2) >> 0] | 0)) break L138;
     if (HEAP32[26627] | 0) {
      if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) + 3) >> 0] | 0)) break L138;
      if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) + 4) >> 0] | 0)) break L138;
     }
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
    }
    if ((i5 | 0) == 86) {
     HEAP32[i7 >> 2] = -1;
     i42 = HEAP32[i7 >> 2] | 0;
     STACKTOP = i6;
     return i42 | 0;
    } else if ((i5 | 0) == 89) {
     HEAP32[i7 >> 2] = -1;
     i42 = HEAP32[i7 >> 2] | 0;
     STACKTOP = i6;
     return i42 | 0;
    }
   } while (0);
   if ((HEAPU8[i19 >> 0] | 0) == 251) if (!((HEAP32[i31 >> 2] | 0) < 96 | (HEAP32[26627] | 0) != 0)) HEAP32[i34 >> 2] = HEAP32[i31 >> 2];
   HEAP32[i35 >> 2] = HEAP32[i31 >> 2] & 3;
   if ((HEAP32[i35 >> 2] | 0) == 3) {
    if ((HEAP32[i31 >> 2] & 67 | 0) == 67) HEAP32[i33 >> 2] = 1;
    HEAP32[i35 >> 2] = HEAP32[8290];
   } else if (!(HEAP32[i34 >> 2] | 0)) {
    if (HEAP32[26627] | 0) HEAP32[8291] = ((HEAP32[i31 >> 2] & 192) >>> 6) + 1; else {
     _gettimeofday(i36 | 0, 0) | 0;
     if (!(HEAP32[26606] | 0)) HEAP32[i37 >> 2] = HEAP32[26957]; else {
      HEAP32[i37 >> 2] = ((HEAP32[i36 + 4 >> 2] | 0) - (HEAP32[26607] | 0) | 0) / 1e3 | 0;
      if ((HEAP32[i37 >> 2] | 0) < 0) HEAP32[26606] = (HEAP32[26606] | 0) + -1;
      HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + (((HEAP32[i36 >> 2] | 0) - (HEAP32[26606] | 0) | 0) * 1e3 | 0);
     };
     HEAP32[26606] = HEAP32[i36 >> 2];
     HEAP32[26607] = HEAP32[i36 + 4 >> 2];
     do if ((HEAP32[i31 >> 2] | 0) == (HEAP32[26608] | 0)) if ((HEAP32[8291] | 0) != 4 ? (HEAP32[i37 >> 2] | 0) < (HEAP32[26957] | 0) : 0) if ((HEAP32[26609] | 0) == (HEAP32[27096] | 0)) if ((HEAP32[26610] | 0) == (HEAP32[27095] | 0)) {
      if ((HEAP32[26605] | 0) != (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) {
       if (HEAP32[27095] | 0) {
        i5 = 124;
        break;
       }
       if ((HEAP32[(HEAP32[26887] | 0) + 84 >> 2] | 0) <= 0) {
        i5 = 124;
        break;
       }
      }
      HEAP32[8291] = (HEAP32[8291] | 0) + 1;
     } else i5 = 124; else i5 = 124; else i5 = 124; else i5 = 124; while (0);
     if ((i5 | 0) == 124) HEAP32[8291] = 1;
     HEAP32[26609] = HEAP32[27096];
     HEAP32[26610] = HEAP32[27095];
     HEAP32[26605] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
    }
    HEAP32[i32 >> 2] = 1;
    HEAP32[26608] = HEAP32[i31 >> 2];
   }
   if (!(HEAP32[i33 >> 2] | 0)) HEAP32[8290] = HEAP32[i31 >> 2] & 3;
   if (HEAP32[26608] & 4 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 2;
   if (HEAP32[26608] & 16 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 4;
   if (HEAP32[26608] & 8 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 8;
   do if ((HEAP32[8291] | 0) == 2) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 32; else {
    if ((HEAP32[8291] | 0) == 3) {
     HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 64;
     break;
    }
    if ((HEAP32[8291] | 0) == 4) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 96;
   } while (0);
   HEAP8[i19 >> 0] = -3;
   if (HEAP32[i34 >> 2] | 0) if ((HEAP32[i34 >> 2] & 3 | 0) != 3) {
    if (HEAP32[i34 >> 2] & 16 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 4;
    if (HEAP32[i34 >> 2] & 8 | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 8;
    HEAP8[i19 + 1 >> 0] = HEAP32[i34 >> 2] & 1 | 0 ? 76 : 75;
    HEAP32[8290] = 3;
   } else i5 = 149; else i5 = 149;
   if ((i5 | 0) == 149) HEAP8[i19 + 1 >> 0] = _get_pseudo_mouse_code(HEAP32[i35 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i33 >> 2] | 0) | 0;
   if ((HEAP32[27096] | 0) >= (HEAP32[10174] | 0)) HEAP32[27096] = (HEAP32[10174] | 0) - 1;
   if ((HEAP32[27095] | 0) >= (HEAP32[10173] | 0)) HEAP32[27095] = (HEAP32[10173] | 0) - 1;
  } while (0);
  HEAP32[i22 >> 2] = _handle_x_keys(0 - ((HEAPU8[i19 >> 0] | 0) + (HEAPU8[i19 + 1 >> 0] << 8)) | 0) | 0;
  HEAP32[i23 >> 2] = 0;
  if (HEAP32[i20 >> 2] | 0) {
   HEAP32[i22 >> 2] = _simplify_key(HEAP32[i22 >> 2] | 0, i20) | 0;
   if (HEAP32[i20 >> 2] | 0) {
    i33 = HEAP32[i23 >> 2] | 0;
    HEAP32[i23 >> 2] = i33 + 1;
    HEAP8[i25 + i33 >> 0] = -128;
    i33 = HEAP32[i23 >> 2] | 0;
    HEAP32[i23 >> 2] = i33 + 1;
    HEAP8[i25 + i33 >> 0] = -4;
    i33 = HEAP32[i20 >> 2] & 255;
    i20 = HEAP32[i23 >> 2] | 0;
    HEAP32[i23 >> 2] = i20 + 1;
    HEAP8[i25 + i20 >> 0] = i33;
   }
  }
  HEAP8[i19 >> 0] = 0 - (HEAP32[i22 >> 2] | 0);
  HEAP8[i19 + 1 >> 0] = (0 - (HEAP32[i22 >> 2] | 0) | 0) >>> 8;
  do if ((HEAPU8[i19 >> 0] | 0) == 242) {
   i22 = HEAP8[i19 + 1 >> 0] | 0;
   i33 = HEAP32[i23 >> 2] | 0;
   HEAP32[i23 >> 2] = i33 + 1;
   HEAP8[i25 + i33 >> 0] = i22;
  } else {
   if (!(HEAP32[i23 >> 2] | 0)) if ((HEAPU8[i19 >> 0] | 0) == 253) if ((HEAPU8[i19 + 1 >> 0] | 0) == 53) {
    HEAP32[i17 >> 2] = 9999;
    break;
   }
   i22 = HEAP32[i23 >> 2] | 0;
   HEAP32[i23 >> 2] = i22 + 1;
   HEAP8[i25 + i22 >> 0] = -128;
   i22 = HEAP8[i19 >> 0] | 0;
   i33 = HEAP32[i23 >> 2] | 0;
   HEAP32[i23 >> 2] = i33 + 1;
   HEAP8[i25 + i33 >> 0] = i22;
   i22 = HEAP8[i19 + 1 >> 0] | 0;
   i33 = HEAP32[i23 >> 2] | 0;
   HEAP32[i23 >> 2] = i33 + 1;
   HEAP8[i25 + i33 >> 0] = i22;
  } while (0);
  HEAP8[i25 + (HEAP32[i23 >> 2] | 0) >> 0] = 0;
  HEAP32[i24 >> 2] = (HEAP32[i23 >> 2] | 0) - (HEAP32[i14 >> 2] | 0);
  i19 = (HEAP32[i24 >> 2] | 0) < 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   i22 = HEAP32[i24 >> 2] | 0;
   if (i19) _del_typebuf(0 - i22 | 0, HEAP32[i18 >> 2] | 0); else if ((i22 | 0) > 0) _ins_typebuf(i25 + (HEAP32[i14 >> 2] | 0) | 0, 0, HEAP32[i18 >> 2] | 0, 0, 0) | 0;
   _memmove((HEAP32[26817] | 0) + (HEAP32[26820] | 0) + (HEAP32[i18 >> 2] | 0) | 0, i25 | 0, HEAP32[i23 >> 2] | 0) | 0;
  } else {
   do if (i19) {
    i14 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0;
    i22 = HEAP32[i18 >> 2] | 0;
    i33 = HEAP32[i24 >> 2] | 0;
    _memmove(i14 | 0, i14 + (0 - i33) | 0, (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + i22 + i33 | 0) | 0;
   } else if ((HEAP32[i24 >> 2] | 0) > 0) {
    if (((HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + (HEAP32[i24 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) | 0) < (HEAP32[i10 >> 2] | 0)) {
     i33 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0;
     i22 = HEAP32[i18 >> 2] | 0;
     _memmove(i33 + (HEAP32[i24 >> 2] | 0) | 0, i33 | 0, (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) - i22 | 0) | 0;
     break;
    }
    HEAP32[i7 >> 2] = -1;
    i42 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   } while (0);
   _memmove((HEAP32[i9 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0, i25 | 0, HEAP32[i23 >> 2] | 0) | 0;
   HEAP32[HEAP32[i11 >> 2] >> 2] = (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + (HEAP32[i24 >> 2] | 0) + (HEAP32[i23 >> 2] | 0);
  }
  if (!(HEAP32[i17 >> 2] | 0)) i43 = (HEAP32[i16 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0; else i43 = HEAP32[i17 >> 2] | 0;
  HEAP32[i7 >> 2] = i43;
  i42 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 } else if ((i5 | 0) == 204) {
  HEAP32[i7 >> 2] = 0;
  i42 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 }
 return 0;
}

function _do_mouse(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i7 + 124 | 0;
 i9 = i7 + 120 | 0;
 i10 = i7 + 116 | 0;
 i11 = i7 + 112 | 0;
 i12 = i7 + 108 | 0;
 i13 = i7 + 104 | 0;
 i14 = i7 + 100 | 0;
 i15 = i7 + 96 | 0;
 i16 = i7 + 92 | 0;
 i17 = i7 + 88 | 0;
 i18 = i7 + 80 | 0;
 i19 = i7 + 76 | 0;
 i20 = i7 + 72 | 0;
 i21 = i7 + 68 | 0;
 i22 = i7 + 64 | 0;
 i23 = i7 + 60 | 0;
 i24 = i7 + 56 | 0;
 i25 = i7 + 52 | 0;
 i26 = i7 + 48 | 0;
 i27 = i7 + 40 | 0;
 i28 = i7 + 36 | 0;
 i29 = i7 + 32 | 0;
 i30 = i7 + 28 | 0;
 i31 = i7 + 24 | 0;
 i32 = i7 + 20 | 0;
 i33 = i7 + 16 | 0;
 i34 = i7 + 12 | 0;
 i35 = i7 + 8 | 0;
 i36 = i7 + 4 | 0;
 i37 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i24 >> 2] = HEAP32[26881];
 HEAP32[i29 >> 2] = HEAP32[26788];
 HEAP32[i30 >> 2] = HEAP32[10179];
 do if (HEAP32[26061] | 0) HEAP32[26061] = 0; else if (!(HEAP32[26627] | 0)) {
  if (HEAP32[26788] | 0) {
   if (_mouse_has(118) | 0) break;
   HEAP32[i8 >> 2] = 0;
   i38 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i38 | 0;
  }
  if ((HEAP32[10180] | 0) == 1) if (!(_mouse_has(110) | 0)) {
   HEAP32[i8 >> 2] = 0;
   i38 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i38 | 0;
  }
 } while (0);
 while (1) {
  HEAP32[i14 >> 2] = _get_mouse_button((0 - (HEAP32[i10 >> 2] | 0) | 0) >>> 8 & 255, i15, i16) | 0;
  if (!(HEAP32[i16 >> 2] | 0)) break;
  if (!(_vpeekc() | 0)) break;
  HEAP32[i33 >> 2] = HEAP32[27095];
  HEAP32[i34 >> 2] = HEAP32[27096];
  HEAP32[i32 >> 2] = _safe_vgetc() | 0;
  if ((HEAP32[i10 >> 2] | 0) != (HEAP32[i32 >> 2] | 0)) {
   i6 = 15;
   break;
  }
 }
 if ((i6 | 0) == 15) {
  _vungetc(HEAP32[i32 >> 2] | 0);
  HEAP32[27095] = HEAP32[i33 >> 2];
  HEAP32[27096] = HEAP32[i34 >> 2];
 }
 if ((HEAP32[i10 >> 2] | 0) == -25853) {
  HEAP32[i8 >> 2] = 0;
  i38 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i38 | 0;
 }
 if (HEAP32[i15 >> 2] | 0) HEAP32[26062] = 1; else {
  if (!(HEAP32[26062] | 0)) {
   HEAP32[i8 >> 2] = 0;
   i38 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i38 | 0;
  }
  if (!(HEAP32[i16 >> 2] | 0)) {
   HEAP32[26062] = 0;
   if (HEAP32[26063] | 0) {
    HEAP32[26063] = 0;
    HEAP32[i8 >> 2] = 0;
    i38 = HEAP32[i8 >> 2] | 0;
    STACKTOP = i7;
    return i38 | 0;
   }
  }
 }
 if (HEAP32[i15 >> 2] | 0) if ((HEAP32[26698] & 4 | 0) != 0 & (HEAP32[i14 >> 2] | 0) == 2) {
  if (HEAP32[10180] & 16 | 0) _stuffcharReadbuff(15);
  if ((HEAP32[i12 >> 2] | 0) > 1) _stuffnumReadbuff(HEAP32[i12 >> 2] | 0);
  _stuffcharReadbuff(20);
  HEAP32[26062] = 0;
  HEAP32[i8 >> 2] = 0;
  i38 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i38 | 0;
 }
 if ((HEAP32[26698] & 4 | 0) != 0 & (HEAP32[i14 >> 2] | 0) != 0) {
  HEAP32[i8 >> 2] = 0;
  i38 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i38 | 0;
 }
 do if (HEAP32[26698] & 30 | 0) {
  if (HEAP32[i15 >> 2] | 0) if (!((HEAP32[26698] & 96 | 0) != 0 | (HEAP32[i14 >> 2] | 0) == 1)) break;
  if (HEAP32[26698] & 10 | 0) {
   i10 = (_mouse_model_popup() | 0) != 0;
   if (i10 & (HEAP32[i14 >> 2] | 0) == 0) break;
  }
  if (HEAP32[26698] & 8 | 0) {
   i10 = (_mouse_model_popup() | 0) == 0;
   if (i10 & (HEAP32[i14 >> 2] | 0) == 2) break;
  }
  HEAP32[i8 >> 2] = 0;
  i38 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i38 | 0;
 } while (0);
 if ((HEAP32[i15 >> 2] | 0) == 0 & (HEAP32[i14 >> 2] | 0) == 1) {
  HEAP32[i8 >> 2] = 0;
  i38 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i38 | 0;
 }
 if (HEAP32[i9 >> 2] | 0) HEAP32[i31 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2]; else HEAP32[i31 >> 2] = 0;
 do if ((HEAP32[i14 >> 2] | 0) == 1) {
  if ((HEAP32[10180] | 0) == 1) {
   if (HEAP32[i9 >> 2] | 0) if (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) {
    _clearopbeep(HEAP32[i9 >> 2] | 0);
    HEAP32[i8 >> 2] = 0;
    i38 = HEAP32[i8 >> 2] | 0;
    STACKTOP = i7;
    return i38 | 0;
   }
   if (HEAP32[26788] | 0) {
    if (HEAP32[26789] | 0) {
     _stuffcharReadbuff(7);
     _stuffReadbuff(61664);
    } else {
     _stuffcharReadbuff(121);
     _stuffcharReadbuff(-12285);
    }
    HEAP32[26061] = 1;
    HEAP32[i8 >> 2] = 0;
    i38 = HEAP32[i8 >> 2] | 0;
    STACKTOP = i7;
    return i38 | 0;
   }
  } else if (!(HEAP32[10180] & 16)) {
   HEAP32[i8 >> 2] = 0;
   i38 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i38 | 0;
  }
  if (!(HEAP32[10180] & 16)) if (_mouse_has(110) | 0) break;
  do if ((HEAP32[i31 >> 2] | 0) == 46) _insert_reg(HEAP32[i31 >> 2] | 0, 1) | 0; else {
   if ((HEAP32[27099] | 0) != 0 & (HEAP32[i31 >> 2] | 0) == 0) HEAP32[i31 >> 2] = 42;
   if (HEAP32[10180] & 64 | 0) if (!(_yank_register_mline(HEAP32[i31 >> 2] | 0) | 0)) {
    _insert_reg(HEAP32[i31 >> 2] | 0, 1) | 0;
    break;
   }
   _do_put(HEAP32[i31 >> 2] | 0, -1, 1, HEAP32[i13 >> 2] | 2);
   _AppendCharToRedobuff(18);
   _AppendCharToRedobuff(HEAP32[i13 >> 2] | 0 ? 16 : 15);
   i10 = HEAP32[i31 >> 2] | 0;
   _AppendCharToRedobuff((i10 | 0) == 0 ? 34 : i10 | 0);
  } while (0);
  HEAP32[i8 >> 2] = 0;
  i38 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i38 | 0;
 } while (0);
 if (!(HEAP32[i15 >> 2] | 0)) HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 5;
 HEAP32[i18 >> 2] = 0;
 if (!(HEAP32[27095] | 0)) if ((HEAP32[(HEAP32[26887] | 0) + 84 >> 2] | 0) > 0) {
  if (HEAP32[i16 >> 2] | 0) {
   if (HEAP32[26063] | 0) {
    HEAP32[i22 >> 2] = HEAP16[(HEAP32[26695] | 0) + (HEAP32[27096] << 1) >> 1];
    if ((HEAP32[i22 >> 2] | 0) <= 0) i39 = 9999; else {
     i10 = HEAP32[i22 >> 2] | 0;
     i34 = (i10 | 0) < (_tabpage_index(HEAP32[26886] | 0) | 0);
     i10 = HEAP32[i22 >> 2] | 0;
     i39 = i34 ? i10 - 1 | 0 : i10;
    }
    _tabpage_move(i39);
   }
   HEAP32[i8 >> 2] = 0;
   i38 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i38 | 0;
  }
  do if (HEAP32[i15 >> 2] | 0) if ((HEAP32[27096] | 0) < (HEAP32[10174] | 0)) {
   HEAP32[26063] = 1;
   HEAP32[i22 >> 2] = HEAP16[(HEAP32[26695] | 0) + (HEAP32[27096] << 1) >> 1];
   if ((HEAP32[i22 >> 2] | 0) >= 0) {
    if ((HEAP32[26698] & 96 | 0) == 32) {
     _end_visual_mode();
     _tabpage_new();
     i39 = HEAP32[i22 >> 2] | 0;
     _tabpage_move((i39 | 0) == 0 ? 9999 : i39 - 1 | 0);
     break;
    }
    _goto_tabpage(HEAP32[i22 >> 2] | 0);
    if ((HEAP32[26881] | 0) == (HEAP32[i24 >> 2] | 0)) break;
    _end_visual_mode();
    break;
   }
   if ((HEAP32[i22 >> 2] | 0) == -999) HEAP32[i35 >> 2] = HEAP32[26886]; else HEAP32[i35 >> 2] = _find_tabpage(0 - (HEAP32[i22 >> 2] | 0) | 0) | 0;
   if ((HEAP32[i35 >> 2] | 0) == (HEAP32[26886] | 0)) {
    if (!(HEAP32[HEAP32[26884] >> 2] | 0)) break;
    _tabpage_close(0);
    break;
   } else {
    if (!(HEAP32[i35 >> 2] | 0)) break;
    _tabpage_close_other(HEAP32[i35 >> 2] | 0, 0);
    break;
   }
  } while (0);
  HEAP32[i8 >> 2] = 1;
  i38 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i38 | 0;
 }
 if ((HEAP32[i16 >> 2] | 0) != 0 & (HEAP32[26063] | 0) != 0) {
  HEAP32[i22 >> 2] = HEAP16[(HEAP32[26695] | 0) + (HEAP32[27096] << 1) >> 1];
  i35 = HEAP32[i22 >> 2] | 0;
  _tabpage_move((i35 | 0) <= 0 ? 9999 : i35 - 1 | 0);
  HEAP32[i8 >> 2] = 0;
  i38 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i38 | 0;
 }
 if (_mouse_model_popup() | 0) {
  if ((HEAP32[i14 >> 2] | 0) == 2) if (!(HEAP32[26698] & 6)) {
   HEAP32[i8 >> 2] = 0;
   i38 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i38 | 0;
  }
  if (!(HEAP32[i14 >> 2] | 0)) if (HEAP32[26698] & 10 | 0) {
   HEAP32[i14 >> 2] = 2;
   HEAP32[26698] = HEAP32[26698] & -3;
  }
 }
 do if (HEAP32[10180] & 17 | 0) if (!(HEAP32[26698] & 6)) {
  if (!(HEAP32[i14 >> 2] | 0)) if (HEAP32[i15 >> 2] | 0) {
   if (!(HEAP32[26788] | 0)) break;
   HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 16;
   break;
  } else {
   if (!(_mouse_has(118) | 0)) break;
   HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 2;
   break;
  }
  if ((HEAP32[i14 >> 2] | 0) == 2) {
   do if ((HEAP32[i15 >> 2] | 0) != 0 & (HEAP32[26788] | 0) != 0) {
    i35 = (HEAP32[26881] | 0) + 24 | 0;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27117] | 0)) if ((HEAP32[i35 >> 2] | 0) < (HEAP32[27117] | 0)) i6 = 118; else i6 = 119; else if ((HEAP32[i35 + 4 >> 2] | 0) < (HEAP32[27118] | 0)) i6 = 118; else i6 = 119;
    if ((i6 | 0) == 118) {
     i35 = (HEAP32[26881] | 0) + 24 | 0;
     HEAP32[i18 >> 2] = HEAP32[i35 >> 2];
     HEAP32[i18 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
     HEAP32[i27 >> 2] = HEAP32[27117];
     HEAP32[i27 + 4 >> 2] = HEAP32[27118];
     break;
    } else if ((i6 | 0) == 119) {
     HEAP32[i18 >> 2] = HEAP32[27117];
     HEAP32[i18 + 4 >> 2] = HEAP32[27118];
     i35 = (HEAP32[26881] | 0) + 24 | 0;
     HEAP32[i27 >> 2] = HEAP32[i35 >> 2];
     HEAP32[i27 + 4 >> 2] = HEAP32[i35 + 4 >> 2];
     break;
    }
   } while (0);
   HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
   if (_mouse_has(118) | 0) HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 2;
  }
 } while (0);
 if ((HEAP32[i16 >> 2] | 0) == 0 & (HEAP32[i9 >> 2] | 0) != 0) if (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) {
  HEAP32[26062] = 0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = 0;
 }
 if (!((HEAP32[i15 >> 2] | 0) != 0 | (HEAP32[i16 >> 2] | 0) != 0)) HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 32;
 i35 = HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = _jump_to_mouse(HEAP32[i17 >> 2] | 0, (i35 | 0) == 0 ? 0 : i35 + 20 | 0, HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i19 >> 2] = HEAP32[i17 >> 2] & 256;
 HEAP32[i20 >> 2] = HEAP32[i17 >> 2] & 2;
 HEAP32[i21 >> 2] = HEAP32[i17 >> 2] & 4;
 if (HEAP32[i9 >> 2] | 0 ? (HEAP32[26881] | 0) != (HEAP32[i24 >> 2] | 0) : 0) if (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) _clearop(HEAP32[i9 >> 2] | 0);
 do if ((HEAP32[26788] | 0) != 0 & (HEAP32[i16 >> 2] | 0) != 0 & (HEAP32[26971] | 0) != 0) if (!(HEAP32[27095] | 0)) {
  HEAP32[26756] = 2;
  break;
 } else {
  HEAP32[26756] = 1;
  break;
 } while (0);
 if (!((HEAP32[i16 >> 2] | 0) != 0 & (HEAP32[27095] | 0) < 0 ^ 1 | (HEAP32[i20 >> 2] | 0) != 0)) {
  _scroll_redraw(0, 1);
  HEAP32[27095] = 0;
 }
 do if (HEAP32[i18 >> 2] | 0) {
  if (HEAP32[26698] & 8 | 0) HEAP32[10179] = 22;
  i24 = HEAP32[26881] | 0;
  if ((HEAP32[10179] | 0) == 22) {
   _getvcols(i24, i18, i27, i25, i26);
   if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) > (((HEAP32[i25 >> 2] | 0) + (HEAP32[i26 >> 2] | 0) | 0) / 2 | 0 | 0)) HEAP32[i27 + 4 >> 2] = HEAP32[i25 >> 2]; else HEAP32[i27 + 4 >> 2] = HEAP32[i26 >> 2];
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (((HEAP32[i18 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) | 0) / 2 | 0 | 0)) HEAP32[i27 >> 2] = HEAP32[i18 >> 2];
   i17 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i18 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   i17 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i17 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
   _coladvance(HEAP32[i27 + 4 >> 2] | 0) | 0;
   i17 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[27117] = HEAP32[i17 >> 2];
   HEAP32[27118] = HEAP32[i17 + 4 >> 2];
   i17 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i17 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
   break;
  }
  i17 = (HEAP32[26881] | 0) + 24 | 0;
  if ((HEAP32[i24 + 24 >> 2] | 0) != (HEAP32[i18 >> 2] | 0)) {
   if ((HEAP32[i17 >> 2] | 0) < (HEAP32[i18 >> 2] | 0)) i6 = 149;
  } else if ((HEAP32[i17 + 4 >> 2] | 0) < (HEAP32[i18 + 4 >> 2] | 0)) i6 = 149;
  if ((i6 | 0) == 149) {
   HEAP32[27117] = HEAP32[i27 >> 2];
   HEAP32[27118] = HEAP32[i27 + 4 >> 2];
   break;
  }
  if ((HEAP32[i27 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
   if ((HEAP32[i27 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i6 = 153;
  } else if ((HEAP32[i27 + 4 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i6 = 153;
  if ((i6 | 0) == 153) {
   HEAP32[27117] = HEAP32[i18 >> 2];
   HEAP32[27118] = HEAP32[i18 + 4 >> 2];
   break;
  }
  i17 = (HEAP32[26881] | 0) + 24 | 0;
  if ((HEAP32[i27 >> 2] | 0) == (HEAP32[i18 >> 2] | 0)) if (((HEAP32[i17 + 4 >> 2] | 0) - (HEAP32[i18 + 4 >> 2] | 0) | 0) > ((HEAP32[i27 + 4 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) | 0)) {
   HEAP32[27117] = HEAP32[i18 >> 2];
   HEAP32[27118] = HEAP32[i18 + 4 >> 2];
   break;
  } else {
   HEAP32[27117] = HEAP32[i27 >> 2];
   HEAP32[27118] = HEAP32[i27 + 4 >> 2];
   break;
  }
  HEAP32[i28 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) - ((HEAP32[i27 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0));
  if ((HEAP32[i28 >> 2] | 0) > 0) {
   HEAP32[27117] = HEAP32[i18 >> 2];
   HEAP32[27118] = HEAP32[i18 + 4 >> 2];
   break;
  }
  if ((HEAP32[i28 >> 2] | 0) < 0) {
   HEAP32[27117] = HEAP32[i27 >> 2];
   HEAP32[27118] = HEAP32[i27 + 4 >> 2];
   break;
  }
  if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) < (((HEAP32[i18 + 4 >> 2] | 0) + (HEAP32[i27 + 4 >> 2] | 0) | 0) / 2 | 0 | 0)) {
   HEAP32[27117] = HEAP32[i27 >> 2];
   HEAP32[27118] = HEAP32[i27 + 4 >> 2];
   break;
  } else {
   HEAP32[27117] = HEAP32[i18 >> 2];
   HEAP32[27118] = HEAP32[i18 + 4 >> 2];
   break;
  }
 } else {
  if (!((HEAP32[10180] & 16 | 0) != 0 & (HEAP32[26788] | 0) != 0)) break;
  _stuffcharReadbuff(15);
 } while (0);
 L248 : do if ((HEAP32[i14 >> 2] | 0) == 1) {
  if ((HEAP32[27099] | 0) != 0 & (HEAP32[i31 >> 2] | 0) == 0) HEAP32[i31 >> 2] = 42;
  do if (_yank_register_mline(HEAP32[i31 >> 2] | 0) | 0) {
   if (!(HEAP32[26754] | 0)) break;
   HEAP32[i11 >> 2] = 1;
  } else {
   if (!(HEAP32[26755] | 0)) break;
   HEAP32[i11 >> 2] = 1;
  } while (0);
  i18 = HEAP32[i11 >> 2] | 0;
  if (HEAP32[i13 >> 2] | 0) {
   HEAP32[i22 >> 2] = (i18 | 0) == -1 ? 91 : 93;
   HEAP32[i23 >> 2] = 112;
  } else {
   HEAP32[i22 >> 2] = (i18 | 0) == 1 ? 112 : 80;
   HEAP32[i23 >> 2] = 0;
  }
  _prep_redo(HEAP32[i31 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, HEAP32[i22 >> 2] | 0, 0, HEAP32[i23 >> 2] | 0, 0);
  if (HEAP32[26806] | 0) {
   i18 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[27120] = HEAP32[i18 >> 2];
   HEAP32[27121] = HEAP32[i18 + 4 >> 2];
  }
  _do_put(HEAP32[i31 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 2);
 } else {
  do if (!(HEAP32[26698] & 4)) {
   if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) if ((HEAP32[26698] & 96 | 0) == 32) break;
   if (HEAP32[26698] & 2 | 0) {
    if (HEAP32[10180] & 16 | 0) i6 = 190; else if ((HEAP32[26788] | 0) != 0 & (HEAP32[26789] | 0) != 0) i6 = 190;
    if ((i6 | 0) == 190) _stuffcharReadbuff(15);
    if (!(HEAP32[i14 >> 2] | 0)) {
     _stuffcharReadbuff(42);
     break L248;
    } else {
     _stuffcharReadbuff(35);
     break L248;
    }
   }
   if ((HEAP32[i20 >> 2] | 0) != 0 | (HEAP32[i21 >> 2] | 0) != 0) break L248;
   do if (HEAP32[26698] & 96 | 0) {
    if (!(HEAP32[10180] & 17)) break;
    if (!(_mouse_has(118) | 0)) break;
    if (!((HEAP32[i15 >> 2] | 0) == 0 & (HEAP32[26788] | 0) != 0)) {
     if (HEAP32[26788] | 0) {
      HEAP32[26064] = HEAP32[27117];
      HEAP32[26065] = HEAP32[27118];
     } else {
      _check_visual_highlight();
      i18 = (HEAP32[26881] | 0) + 24 | 0;
      HEAP32[27117] = HEAP32[i18 >> 2];
      HEAP32[27118] = HEAP32[i18 + 4 >> 2];
      HEAP32[26064] = HEAP32[27117];
      HEAP32[26065] = HEAP32[27118];
      HEAP32[26788] = 1;
      HEAP32[27119] = 1;
      _may_start_select(111);
      _setmouse();
     }
     i18 = HEAP32[26698] | 0;
     do if ((HEAP32[26698] & 96 | 0) == 32) if (i18 & 8 | 0) {
      HEAP32[10179] = 22;
      break;
     } else {
      HEAP32[10179] = 118;
      break;
     } else {
      if ((i18 & 96 | 0) == 64) {
       HEAP32[10179] = 86;
       break;
      }
      if ((HEAP32[26698] & 96 | 0) != 96) break;
      HEAP32[10179] = 22;
     } while (0);
     HEAP32[27105] = 0;
    }
    if ((HEAP32[26698] & 96 | 0) == 32) {
     HEAP32[i36 >> 2] = 0;
     do if (HEAP32[i15 >> 2] | 0) {
      i18 = (HEAP32[26881] | 0) + 24 | 0;
      HEAP32[i27 >> 2] = HEAP32[i18 >> 2];
      HEAP32[i27 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
      while (1) {
       HEAP32[i37 >> 2] = _gchar_pos(i27) | 0;
       if (!((HEAP32[i37 >> 2] | 0) == 32 ? 1 : (HEAP32[i37 >> 2] | 0) == 9)) break;
       _inc(i27) | 0;
      }
      if (HEAP32[i9 >> 2] | 0) HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = 0;
      if (!((HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[10179] | 0) == 118)) break;
      if (_vim_iswordc(_gchar_pos(i27) | 0) | 0) break;
      if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27117] | 0)) break;
      if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) != (HEAP32[27118] | 0)) break;
      i18 = _findmatch(HEAP32[i9 >> 2] | 0, 0) | 0;
      HEAP32[i36 >> 2] = i18;
      if (!i18) break;
      i18 = (HEAP32[26881] | 0) + 24 | 0;
      i28 = HEAP32[i36 >> 2] | 0;
      HEAP32[i18 >> 2] = HEAP32[i28 >> 2];
      HEAP32[i18 + 4 >> 2] = HEAP32[i28 + 4 >> 2];
      if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) == 1) {
       HEAP32[10179] = 86;
       break;
      }
      if ((HEAPU8[HEAP32[26975] >> 0] | 0) != 101) break;
      i28 = (HEAP32[26881] | 0) + 24 | 0;
      if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27117] | 0)) if ((HEAP32[i28 >> 2] | 0) < (HEAP32[27117] | 0)) i6 = 229; else i6 = 230; else if ((HEAP32[i28 + 4 >> 2] | 0) < (HEAP32[27118] | 0)) i6 = 229; else i6 = 230;
      if ((i6 | 0) == 229) {
       HEAP32[27118] = (HEAP32[27118] | 0) + 1;
       break;
      } else if ((i6 | 0) == 230) {
       i28 = (HEAP32[26881] | 0) + 24 + 4 | 0;
       HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
       break;
      }
     } while (0);
     do if (!(HEAP32[i36 >> 2] | 0)) {
      if (!((HEAP32[i15 >> 2] | 0) != 0 | (HEAP32[i16 >> 2] | 0) != 0)) break;
      i28 = (HEAP32[26881] | 0) + 24 | 0;
      if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[26064] | 0)) {
       if ((HEAP32[i28 >> 2] | 0) < (HEAP32[26064] | 0)) i6 = 236;
      } else if ((HEAP32[i28 + 4 >> 2] | 0) < (HEAP32[26065] | 0)) i6 = 236;
      if ((i6 | 0) == 236) {
       _find_start_of_word((HEAP32[26881] | 0) + 24 | 0);
       _find_end_of_word(108468);
       break;
      }
      _find_start_of_word(108468);
      do if ((HEAPU8[HEAP32[26975] >> 0] | 0) == 101) {
       if (!(HEAPU8[(_ml_get_cursor() | 0) >> 0] | 0)) break;
       i28 = (HEAP32[26881] | 0) + 24 + 4 | 0;
       HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
      } while (0);
      _find_end_of_word((HEAP32[26881] | 0) + 24 | 0);
     } while (0);
     HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
    }
    if (!(HEAP32[i15 >> 2] | 0)) break L248;
    _redraw_curbuf_later(20);
    break L248;
   } while (0);
   if ((HEAP32[26788] | 0) == 0 | (HEAP32[i29 >> 2] | 0) != 0) break L248;
   if (HEAP32[26698] & 8 | 0) {
    HEAP32[10179] = 22;
    break L248;
   } else {
    HEAP32[10179] = 118;
    break L248;
   }
  } while (0);
  if (HEAP32[10180] & 16 | 0) _stuffcharReadbuff(15);
  _stuffcharReadbuff(29);
  HEAP32[26062] = 0;
 } while (0);
 do if ((HEAP32[26788] | 0) == 0 & (HEAP32[i29 >> 2] | 0) != 0 & (HEAP32[26701] | 0) != 0) i6 = 252; else {
  if (!((HEAP32[26788] | 0) != 0 & (HEAP32[26988] | 0) != 0 & (HEAP32[26809] | 0) == 0)) break;
  if (!(HEAP32[i29 >> 2] | 0)) {
   i6 = 252;
   break;
  }
  if ((HEAP32[10179] | 0) != (HEAP32[i30 >> 2] | 0)) i6 = 252;
 } while (0);
 if ((i6 | 0) == 252) HEAP32[26699] = 1;
 HEAP32[i8 >> 2] = HEAP32[i19 >> 2];
 i38 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i38 | 0;
}

function _vgetorpeek(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i3 + 104 | 0;
 i5 = i3 + 100 | 0;
 i6 = i3 + 96 | 0;
 i7 = i3 + 92 | 0;
 i8 = i3 + 88 | 0;
 i9 = i3 + 84 | 0;
 i10 = i3 + 80 | 0;
 i11 = i3 + 76 | 0;
 i12 = i3 + 72 | 0;
 i13 = i3 + 68 | 0;
 i14 = i3 + 64 | 0;
 i15 = i3 + 60 | 0;
 i16 = i3 + 56 | 0;
 i17 = i3 + 52 | 0;
 i18 = i3 + 48 | 0;
 i19 = i3 + 44 | 0;
 i20 = i3 + 40 | 0;
 i21 = i3 + 36 | 0;
 i22 = i3 + 32 | 0;
 i23 = i3 + 28 | 0;
 i24 = i3 + 24 | 0;
 i25 = i3 + 20 | 0;
 i26 = i3 + 16 | 0;
 i27 = i3 + 12 | 0;
 i28 = i3 + 8 | 0;
 i29 = i3 + 4 | 0;
 i30 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 if ((HEAP32[26727] | 0) > 0 & (HEAP32[26826] | 0) == 0) {
  HEAP32[i4 >> 2] = 0;
  i31 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i31 | 0;
 }
 HEAP32[i16 >> 2] = _get_real_state() | 0;
 HEAP32[26727] = (HEAP32[26727] | 0) + 1;
 if (HEAP32[i5 >> 2] | 0) HEAP32[27162] = 0;
 _init_typebuf();
 _start_stuff();
 if ((HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[26822] | 0) == 0) HEAP32[26801] = 0;
 while (1) {
  if (HEAP32[25492] | 0) {
   HEAP32[i6 >> 2] = HEAP32[25492];
   if (HEAP32[i5 >> 2] | 0) HEAP32[25492] = 0;
  } else HEAP32[i6 >> 2] = _read_readbuffers(HEAP32[i5 >> 2] | 0) | 0;
  if (HEAP32[i6 >> 2] | 0) if (HEAP32[26834] | 0) i2 = 19; else {
   if (HEAP32[i5 >> 2] | 0) HEAP32[27162] = 1;
   if (!(HEAP32[26824] | 0)) HEAP32[26824] = 1;
  } else i2 = 19;
  L25 : do if ((i2 | 0) == 19) {
   i2 = 0;
   L27 : while (1) {
    if (HEAP32[26822] | 0) _line_breakcheck(); else _ui_breakcheck();
    HEAP32[i8 >> 2] = 0;
    if (HEAP32[26834] | 0) {
     i2 = 24;
     break;
    }
    if ((HEAP32[26821] | 0) > 0) {
     HEAP32[i10 >> 2] = 0;
     HEAP32[i18 >> 2] = 0;
     HEAP32[i7 >> 2] = HEAPU8[(HEAP32[26817] | 0) + (HEAP32[26820] | 0) >> 0];
     do if ((HEAP32[26802] | 0) == 0 & (HEAP32[25638] | 0) != 0) if ((HEAP32[26803] | 0) == 0 | (HEAP32[i7 >> 2] | 0) != 48) {
      if (HEAP32[26822] | 0) {
       if (!(HEAP32[26965] | 0)) break;
       if (HEAPU8[(HEAP32[26818] | 0) + (HEAP32[26820] | 0) >> 0] & 5 | 0) break;
      }
      if (HEAP32[26961] | 0) if (HEAP32[10180] & 24 | 0) break;
      if ((HEAP32[10180] | 0) == 513) {
       if (!((((HEAP32[i7 >> 2] | 0) == 13 | (HEAP32[i7 >> 2] | 0) == 32) ^ 1) & (HEAP32[10180] | 0) != 768 & (HEAP32[10180] | 0) != 2048)) break;
      } else if (!((HEAP32[10180] | 0) != 768 & (HEAP32[10180] | 0) != 2048)) break;
      i1 = HEAP32[i7 >> 2] | 0;
      HEAP32[i10 >> 2] = HEAP32[102556 + ((HEAP32[i16 >> 2] & 12295 | 0 ? i1 : i1 ^ 128) << 2) >> 2];
      HEAP32[i11 >> 2] = 0;
      HEAP32[i12 >> 2] = 0;
      L50 : while (1) {
       if (!(HEAP32[i10 >> 2] | 0)) break;
       L53 : do if ((HEAPU8[HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] >> 0] | 0) == (HEAP32[i7 >> 2] | 0)) {
        if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & HEAP32[i16 >> 2])) break;
        if (!((HEAP32[26822] | 0) == 0 ? 1 : (HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & 32 | 0) == 0)) break;
        HEAP32[i17 >> 2] = 1;
        while (1) {
         if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[26821] | 0)) break;
         if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] | 0) != (HEAPU8[(HEAP32[26817] | 0) + ((HEAP32[26820] | 0) + (HEAP32[i17 >> 2] | 0)) >> 0] | 0)) break;
         HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
        }
        HEAP32[i8 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2];
        do if ((HEAP32[i17 >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) {
         if ((HEAP32[i17 >> 2] | 0) == (HEAP32[26821] | 0)) if ((HEAP32[26821] | 0) < (HEAP32[i8 >> 2] | 0)) break;
         if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break L53;
         HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
         break L53;
        } while (0);
        HEAP32[i9 >> 2] = (HEAP32[26818] | 0) + (HEAP32[26820] | 0);
        if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 2) {
         if ((HEAPU8[HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] >> 0] | 0) != 128) break;
         if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + 1 >> 0] | 0) != 253) break;
         if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + 2 >> 0] | 0) != 82) break;
        }
        HEAP32[i21 >> 2] = HEAP32[i17 >> 2];
        do {
         i1 = (HEAP32[i21 >> 2] | 0) + -1 | 0;
         HEAP32[i21 >> 2] = i1;
         if ((i1 | 0) < 0) break;
         i1 = HEAP32[i9 >> 2] | 0;
         HEAP32[i9 >> 2] = i1 + 1;
        } while (!(HEAPU8[i1 >> 0] & 5 | 0));
        if ((HEAP32[i21 >> 2] | 0) >= 0) break;
        if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[26821] | 0)) {
         if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[i12 >> 2] | 0)) break;
         HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
         HEAP32[i12 >> 2] = HEAP32[i8 >> 2];
         break;
        }
        if (HEAP32[i13 >> 2] | 0) break;
        if (!(HEAP32[i11 >> 2] | 0)) {
         i2 = 67;
         break L50;
        }
        if (!(HEAP8[(HEAP32[i11 >> 2] | 0) + 29 >> 0] | 0)) {
         i2 = 67;
         break L50;
        }
       } while (0);
       HEAP32[i10 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
      }
      if ((i2 | 0) == 67) {
       i2 = 0;
       HEAP32[i8 >> 2] = -2;
      }
      if ((HEAP32[i8 >> 2] | 0) != -2) {
       HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
       HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
      }
     } while (0);
     do if ((HEAPU8[HEAP32[26962] >> 0] | 0) != 0 & (HEAP32[i10 >> 2] | 0) == 0) if (HEAP32[10180] & 17 | 0) {
      HEAP32[i17 >> 2] = 0;
      while (1) {
       if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[26821] | 0)) break;
       if (!(HEAPU8[(HEAP32[26962] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] | 0)) break;
       if ((HEAPU8[(HEAP32[26962] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] | 0) != (HEAPU8[(HEAP32[26817] | 0) + ((HEAP32[26820] | 0) + (HEAP32[i17 >> 2] | 0)) >> 0] | 0)) break;
       HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
      }
      i1 = HEAP32[i17 >> 2] | 0;
      if (HEAPU8[(HEAP32[26962] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] | 0) {
       if ((i1 | 0) == (HEAP32[26821] | 0)) {
        HEAP32[i8 >> 2] = -1;
        break;
       }
       if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
       HEAP32[i18 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
       break;
      }
      if ((i1 | 0) > (HEAP32[26822] | 0)) {
       i1 = HEAP32[26822] | 0;
       _gotchars((HEAP32[26817] | 0) + (HEAP32[26820] | 0) + i1 | 0, (HEAP32[i17 >> 2] | 0) - i1 | 0);
      }
      _del_typebuf(HEAP32[i17 >> 2] | 0, 0);
      _set_option_value(84289, ((HEAP32[26961] | 0) != 0 ^ 1) & 1, 0, 0) | 0;
      if (!(HEAP32[10180] & 16)) {
       HEAP32[27043] = 0;
       HEAP32[26877] = (HEAP32[10173] | 0) - 1;
       _msg_clr_eos();
      }
      _status_redraw_all();
      _redraw_statuslines();
      _showmode() | 0;
      _setcursor();
      continue L27;
     } while (0);
     if (!(HEAP32[i10 >> 2] | 0)) {
      if ((HEAP32[i8 >> 2] | 0) != -2) i2 = 95;
     } else if ((HEAP32[i8 >> 2] | 0) != -2 ? (HEAP32[i18 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0) : 0) i2 = 95;
     do if ((i2 | 0) == 95) {
      i2 = 0;
      HEAP32[i25 >> 2] = HEAP32[i8 >> 2];
      do if ((HEAP32[26802] | 0) == 0 | (HEAP32[26804] | 0) != 0) {
       if (!(HEAP32[26822] | 0)) {
        if (HEAP32[i13 >> 2] | 0) {
         i2 = 103;
         break;
        }
       } else {
        if (!(HEAP32[26965] | 0)) {
         i2 = 103;
         break;
        }
        if (HEAP32[i13 >> 2] | 0 ? 1 : (HEAPU8[(HEAP32[26818] | 0) + (HEAP32[26820] | 0) >> 0] | 0) != 0) {
         i2 = 103;
         break;
        }
       }
       i1 = _check_termcode((HEAP32[i18 >> 2] | 0) + 1 | 0, 0, 0, 0) | 0;
       HEAP32[i8 >> 2] = i1;
       HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) == 0 & (HEAP32[i25 >> 2] | 0) == -1 ? -1 : i1;
       if ((HEAP32[i8 >> 2] | 0) < 0) {
        if ((HEAP32[26821] | 0) != (HEAP32[26822] | 0)) break;
        HEAP32[i8 >> 2] = 0;
       }
      } else i2 = 103; while (0);
      if ((i2 | 0) == 103) {
       i2 = 0;
       HEAP32[i8 >> 2] = 0;
      }
      if ((HEAP32[i8 >> 2] | 0) == 0 & (HEAP32[i10 >> 2] | 0) == 0) {
       i2 = 105;
       break L27;
      }
      if ((HEAP32[i8 >> 2] | 0) > 0) continue L27;
      if ((HEAP32[i10 >> 2] | 0) == 0 | (HEAP32[i8 >> 2] | 0) < 0) {
       HEAP32[i8 >> 2] = -1;
       break;
      } else {
       HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
       break;
      }
     } while (0);
     if ((HEAP32[i8 >> 2] | 0) >= 0) if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[26821] | 0)) {
      if ((HEAP32[i8 >> 2] | 0) > (HEAP32[26822] | 0)) {
       i1 = HEAP32[26822] | 0;
       _gotchars((HEAP32[26817] | 0) + (HEAP32[26820] | 0) + i1 | 0, (HEAP32[i8 >> 2] | 0) - i1 | 0);
      }
      HEAP32[26811] = (HEAP32[26823] | 0) > 0 & 1;
      _del_typebuf(HEAP32[i8 >> 2] | 0, 0);
      i1 = (HEAP32[i14 >> 2] | 0) + 1 | 0;
      HEAP32[i14 >> 2] = i1;
      if ((i1 | 0) >= (HEAP32[26948] | 0)) {
       i2 = 120;
       break;
      }
      do if ((HEAP32[26788] | 0) != 0 & (HEAP32[26789] | 0) != 0) {
       if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & 2)) break;
       HEAP32[26789] = 0;
       _ins_typebuf(56188, -1, 0, 1, 0) | 0;
      } while (0);
      HEAP32[i9 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2];
      if (!(HEAP32[i9 >> 2] | 0)) HEAP32[i19 >> 2] = 0; else {
       do if (HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) HEAP32[i26 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2]; else if (_strncmp(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0) {
        HEAP32[i26 >> 2] = 0;
        break;
       } else {
        HEAP32[i26 >> 2] = -3;
        break;
       } while (0);
       if (HEAP32[26811] | 0) i32 = 1; else i32 = (HEAP8[(HEAP32[i10 >> 2] | 0) + 28 >> 0] | 0) != 0;
       HEAP32[i19 >> 2] = _ins_typebuf(HEAP32[i9 >> 2] | 0, HEAP32[i26 >> 2] | 0, 0, 1, i32 & 1) | 0;
      }
      if (!(HEAP32[i19 >> 2] | 0)) {
       i2 = 138;
       break;
      }
      continue;
     }
    }
    HEAP32[i6 >> 2] = 0;
    do if ((HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[26821] | 0) == 1) if (((HEAP32[26802] | 0 ? 1 : (HEAPU8[(HEAP32[26817] | 0) + (HEAP32[26820] | 0) >> 0] | 0) != 27) ^ 1) & (HEAP32[26826] | 0) == 0 & (HEAP32[26822] | 0) == 0) if (HEAP32[10180] & 16 | 0) {
     if (!(HEAP32[27011] | 0)) if (!((HEAP32[i8 >> 2] | 0) == -1 & (HEAP32[27013] | 0) != 0)) break;
     i1 = _inchar((HEAP32[26817] | 0) + (HEAP32[26820] | 0) + (HEAP32[26821] | 0) | 0, 3, 25) | 0;
     HEAP32[i6 >> 2] = i1;
     if (!i1) {
      HEAP32[i27 >> 2] = 0;
      if (HEAP32[26701] | 0) {
       _unshowmode(1);
       HEAP32[i15 >> 2] = 1;
      }
      if (!((HEAP32[26627] | 0) != 0 & (HEAP32[10180] | 0) != 1 ^ 1 | (HEAP32[26811] | 0) != 0)) {
       HEAP32[i30 >> 2] = HEAP32[10180];
       HEAP32[10180] = 1;
       _gui_update_cursor(1, 0);
       HEAP32[10180] = HEAP32[i30 >> 2];
       HEAP32[i20 >> 2] = 1;
      }
      _validate_cursor();
      HEAP32[i22 >> 2] = HEAP32[(HEAP32[26881] | 0) + 140 >> 2];
      HEAP32[i23 >> 2] = HEAP32[(HEAP32[26881] | 0) + 136 >> 2];
      do if (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) {
       if ((HEAP32[(HEAP32[26881] | 0) + 140 >> 2] | 0) <= 0) {
        if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0)) break;
        if (!(HEAP32[(HEAP32[26881] | 0) + 136 >> 2] | 0)) break;
        i1 = (HEAP32[26881] | 0) + 136 | 0;
        HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
        i1 = HEAP32[26881] | 0;
        HEAP32[i1 + 140 >> 2] = (HEAP32[i1 + 100 >> 2] | 0) - 1;
        break;
       }
       i1 = (HEAP32[26881] | 0) + 140 | 0;
       if (!(HEAP32[26791] | 0)) {
        HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
        break;
       }
       HEAP32[i1 >> 2] = 0;
       HEAP32[i28 >> 2] = 0;
       HEAP32[i27 >> 2] = 0;
       HEAP32[i29 >> 2] = _ml_get_curline() | 0;
       while (1) {
        if ((HEAP32[i27 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
        do if ((HEAPU8[(HEAP32[i29 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) >> 0] | 0) != 32) {
         if ((HEAPU8[(HEAP32[i29 >> 2] | 0) + (HEAP32[i27 >> 2] | 0) >> 0] | 0) == 9) break;
         HEAP32[(HEAP32[26881] | 0) + 140 >> 2] = HEAP32[i28 >> 2];
        } while (0);
        i1 = HEAP32[i29 >> 2] | 0;
        i33 = _lbr_chartabsize(i1 | 0, i1 + (HEAP32[i27 >> 2] | 0) | 0, HEAP32[i28 >> 2] | 0) | 0;
        HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + i33;
        HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
       }
       i33 = HEAP32[26881] | 0;
       HEAP32[i33 + 136 >> 2] = (HEAP32[i33 + 128 >> 2] | 0) + ((HEAP32[i33 + 140 >> 2] | 0) / (HEAP32[i33 + 100 >> 2] | 0) | 0);
       i33 = (HEAP32[26881] | 0) + 140 | 0;
       HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) % (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) | 0;
       i33 = _curwin_col_off() | 0;
       i1 = (HEAP32[26881] | 0) + 140 | 0;
       HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i33;
      } while (0);
      _setcursor();
      _out_flush();
      HEAP32[(HEAP32[26881] | 0) + 140 >> 2] = HEAP32[i22 >> 2];
      HEAP32[(HEAP32[26881] | 0) + 136 >> 2] = HEAP32[i23 >> 2];
     }
    } while (0);
    if ((HEAP32[i6 >> 2] | 0) < 0) continue;
    HEAP32[i21 >> 2] = 1;
    while (1) {
     if ((HEAP32[i21 >> 2] | 0) > (HEAP32[i6 >> 2] | 0)) break;
     HEAP8[(HEAP32[26818] | 0) + ((HEAP32[26820] | 0) + (HEAP32[i21 >> 2] | 0)) >> 0] = 0;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
    }
    HEAP32[26821] = (HEAP32[26821] | 0) + (HEAP32[i6 >> 2] | 0);
    if ((HEAP32[26821] | 0) >= ((HEAP32[26822] | 0) + 50 | 0)) {
     HEAP32[i13 >> 2] = 1;
     continue;
    }
    if ((HEAP32[26826] | 0) > 0) {
     if ((HEAP32[26821] | 0) <= 0) {
      i2 = 175;
      break;
     }
     HEAP32[i13 >> 2] = 1;
     continue;
    }
    if ((HEAP32[10180] & 16 | 0) != 0 | (HEAP32[26945] | 0) != 0) if (!((HEAP32[10180] & 8 | 0) == 0 & (HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[26828] | 0) != 0 ^ 1 | (HEAP32[26721] | 0) != 0)) {
     _update_screen(0) | 0;
     _setcursor();
    }
    HEAP32[i7 >> 2] = 0;
    do if (!((HEAP32[26821] | 0) > 0 & (HEAP32[i5 >> 2] | 0) != 0 ^ 1 | (HEAP32[26798] | 0) != 0)) {
     do if (((HEAP32[10180] & 17 | 0) != 0 | (HEAP32[10180] | 0) == 32) & (HEAP32[10180] | 0) != 513) {
      if (!(HEAP32[10180] & 16)) break;
      if ((_ptr2cells((HEAP32[26817] | 0) + (HEAP32[26820] | 0) + (HEAP32[26821] | 0) + -1 | 0) | 0) != 1) break;
      _edit_putchar(HEAPU8[(HEAP32[26817] | 0) + ((HEAP32[26820] | 0) + (HEAP32[26821] | 0) - 1) >> 0] | 0, 0);
      _setcursor();
      HEAP32[i7 >> 2] = 1;
     } while (0);
     if (HEAP32[10180] & 8 | 0) {
      if ((_ptr2cells((HEAP32[26817] | 0) + (HEAP32[26820] | 0) + (HEAP32[26821] | 0) + -1 | 0) | 0) != 1) break;
      _putcmdline(HEAPU8[(HEAP32[26817] | 0) + ((HEAP32[26820] | 0) + (HEAP32[26821] | 0) - 1) >> 0] | 0, 0);
      HEAP32[i7 >> 2] = 1;
     }
    } while (0);
    if (!(HEAP32[26821] | 0)) HEAP32[i13 >> 2] = 0;
    HEAP32[i24 >> 2] = HEAP32[26821];
    i33 = HEAP32[26820] | 0;
    i1 = HEAP32[26821] | 0;
    i34 = (HEAP32[26817] | 0) + i33 + i1 | 0;
    i35 = (HEAP32[26819] | 0) - i33 - i1 - 1 | 0;
    do if (HEAP32[i5 >> 2] | 0) {
     if (!(HEAP32[26821] | 0)) {
      i36 = -1;
      break;
     }
     if (!(HEAP32[27011] | 0)) if (!((HEAP32[27013] | 0) != 0 & (HEAP32[i8 >> 2] | 0) == -1)) {
      i36 = -1;
      break;
     }
     i1 = HEAP32[27014] | 0;
     i36 = (HEAP32[i8 >> 2] | 0) == -1 & (i1 | 0) >= 0 ? i1 | 0 : HEAP32[27012] | 0;
    } else i36 = 0; while (0);
    HEAP32[i6 >> 2] = _inchar(i34, i35, i36) | 0;
    do if ((HEAP32[i7 >> 2] | 0) == 1) {
     if (HEAP32[10180] & 16 | 0) _edit_unputchar();
     if (HEAP32[10180] & 8 | 0) {
      _unputcmdline();
      break;
     } else {
      _setcursor();
      break;
     }
    } while (0);
    if ((HEAP32[i6 >> 2] | 0) < 0) continue;
    L250 : do if (!(HEAP32[i6 >> 2] | 0)) {
     if (!(HEAP32[i5 >> 2] | 0)) break L25;
     if ((HEAP32[i24 >> 2] | 0) <= 0) break;
     HEAP32[i13 >> 2] = 1;
     continue L27;
    } else while (1) {
     if (!(HEAPU8[(HEAP32[26817] | 0) + ((HEAP32[26820] | 0) + (HEAP32[26821] | 0)) >> 0] | 0)) break L250;
     i35 = HEAP32[26818] | 0;
     i34 = HEAP32[26820] | 0;
     i1 = HEAP32[26821] | 0;
     HEAP32[26821] = i1 + 1;
     HEAP8[i35 + (i34 + i1) >> 0] = 0;
    } while (0);
   }
   if ((i2 | 0) == 24) {
    i2 = 0;
    HEAP32[i6 >> 2] = _inchar(HEAP32[26817] | 0, (HEAP32[26819] | 0) - 1 | 0, 0) | 0;
    if ((HEAP32[i6 >> 2] | 0) != 0 | (HEAP32[26822] | 0) != 0) if (HEAP32[10180] & 24 | 0) HEAP32[i6 >> 2] = 27; else i2 = 27; else i2 = 27;
    if ((i2 | 0) == 27) {
     i2 = 0;
     HEAP32[i6 >> 2] = 3;
    }
    _flush_buffers(1);
    if (HEAP32[i5 >> 2] | 0) {
     HEAP8[HEAP32[26817] >> 0] = HEAP32[i6 >> 2];
     _gotchars(HEAP32[26817] | 0, 1);
    }
    HEAP32[26811] = 0;
    break;
   } else if ((i2 | 0) == 105) {
    i2 = 0;
    HEAP32[i6 >> 2] = HEAPU8[(HEAP32[26817] | 0) + (HEAP32[26820] | 0) >> 0];
    if (!(HEAP32[i5 >> 2] | 0)) break;
    HEAP32[26811] = (HEAP32[26823] | 0) > 0 & 1;
    if ((HEAP32[26822] | 0) > 0) HEAP32[27161] = 0; else {
     HEAP32[27161] = 1;
     _gotchars((HEAP32[26817] | 0) + (HEAP32[26820] | 0) | 0, 1);
    }
    HEAP32[25636] = HEAPU8[(HEAP32[26818] | 0) + (HEAP32[26820] | 0) >> 0];
    _del_typebuf(1, 0);
    break;
   } else if ((i2 | 0) == 120) {
    i2 = 0;
    _emsg(56164) | 0;
    if (HEAP32[10180] & 8 | 0) _redrawcmdline(); else _setcursor();
    _flush_buffers(0);
    HEAP32[i14 >> 2] = 0;
    HEAP32[i6 >> 2] = -1;
    break;
   } else if ((i2 | 0) == 138) {
    i2 = 0;
    HEAP32[i6 >> 2] = -1;
    break;
   } else if ((i2 | 0) == 175) {
    i2 = 0;
    if (HEAP32[26883] | 0) if (HEAP32[10180] & 16 | 0) {
     HEAP32[i6 >> 2] = 12;
     break;
    }
    if (HEAP32[10180] & 8 | 0) {
     HEAP32[i6 >> 2] = 3;
     break;
    } else {
     HEAP32[i6 >> 2] = 27;
     break;
    }
   }
  } while (0);
  if ((HEAP32[i6 >> 2] | 0) < 0 & (HEAP32[i6 >> 2] | 0) != -26109) continue; else if (HEAP32[i5 >> 2] | 0 ? (HEAP32[i6 >> 2] | 0) == 0 : 0) continue; else break;
 }
 do if ((HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[26988] | 0) != 0 & (HEAP32[26809] | 0) == 0) if (HEAP32[10180] & 16 | 0) {
  if ((((HEAP32[i6 >> 2] | 0) != 27 | (HEAP32[i15 >> 2] | 0) != 0 | (HEAP32[26802] | 0) != 0) ^ 1) & (HEAP32[26701] | 0) != 0) if ((HEAP32[26821] | 0) == 0 | (HEAP32[27161] | 0) != 0) {
   _unshowmode(0);
   break;
  } else {
   HEAP32[26699] = 1;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) != 27 & (HEAP32[i15 >> 2] | 0) != 0) if ((HEAP32[26821] | 0) == 0 | (HEAP32[27161] | 0) != 0) {
   _showmode() | 0;
   break;
  } else {
   HEAP32[26699] = 1;
   break;
  }
 } while (0);
 if ((HEAP32[26627] | 0) != 0 & (HEAP32[i20 >> 2] | 0) != 0) _gui_update_cursor(1, 0);
 HEAP32[26727] = (HEAP32[26727] | 0) + -1;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 i31 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i31 | 0;
}

function _ml_recover() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i2 + 292 | 0;
 i6 = i2 + 288 | 0;
 i7 = i2 + 284 | 0;
 i8 = i2 + 280 | 0;
 i9 = i2 + 276 | 0;
 i10 = i2 + 272 | 0;
 i11 = i2 + 268 | 0;
 i12 = i2 + 264 | 0;
 i13 = i2 + 260 | 0;
 i14 = i2 + 256 | 0;
 i15 = i2 + 252 | 0;
 i16 = i2 + 248 | 0;
 i17 = i2 + 244 | 0;
 i18 = i2 + 168 | 0;
 i19 = i2 + 92 | 0;
 i20 = i2 + 88 | 0;
 i21 = i2 + 84 | 0;
 i22 = i2 + 80 | 0;
 i23 = i2 + 76 | 0;
 i24 = i2 + 72 | 0;
 i25 = i2 + 68 | 0;
 i26 = i2 + 64 | 0;
 i27 = i2 + 60 | 0;
 i28 = i2 + 56 | 0;
 i29 = i2 + 52 | 0;
 i30 = i2 + 48 | 0;
 i31 = i2 + 44 | 0;
 i32 = i2 + 40 | 0;
 i33 = i2 + 36 | 0;
 i34 = i2 + 32 | 0;
 i35 = i2 + 28 | 0;
 i36 = i2 + 24 | 0;
 i37 = i2 + 20 | 0;
 i38 = i2 + 16 | 0;
 i39 = i2 + 12 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i34 >> 2] = 1;
 HEAP32[i37 >> 2] = 2;
 HEAP32[26816] = 1;
 HEAP32[i33 >> 2] = (HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0) == 0 & 1;
 HEAP32[i36 >> 2] = HEAP32[27052];
 i40 = HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0;
 HEAP32[i7 >> 2] = i40;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) == 0 ? 114072 : i40;
 HEAP32[i20 >> 2] = _strlen(HEAP32[i7 >> 2] | 0) | 0;
 do if ((HEAP32[i20 >> 2] | 0) >= 4) if (!(_strncasecmp((HEAP32[i7 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) + -4 | 0, 57893, 2) | 0)) {
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 2) >> 0] | 0) < 65) i1 = 5; else if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 2) >> 0] | 0) > 90) i1 = 5; else i41 = (HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 2) >> 0] | 0) + 32 | 0;
  if ((i1 | 0) == 5) i41 = HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 2) >> 0] | 0;
  if (_vim_strchr(57896, i41) | 0) {
   if (((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 1) >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) - 1) >> 0] | 0) - 97 | 0) >>> 0 >= 26) {
    i1 = 11;
    break;
   }
   HEAP32[i21 >> 2] = 1;
   HEAP32[i8 >> 2] = _vim_strsave(HEAP32[i7 >> 2] | 0) | 0;
   i1 = 18;
  } else i1 = 11;
 } else i1 = 11; else i1 = 11; while (0);
 do if ((i1 | 0) == 11) {
  HEAP32[i21 >> 2] = 0;
  HEAP32[i20 >> 2] = _recover_names(HEAP32[i7 >> 2] | 0, 0, 0, 0) | 0;
  if (!(HEAP32[i20 >> 2] | 0)) {
   _emsg2(57920, HEAP32[i7 >> 2] | 0) | 0;
   break;
  }
  if ((HEAP32[i20 >> 2] | 0) == 1) HEAP32[i24 >> 2] = 1; else {
   _recover_names(HEAP32[i7 >> 2] | 0, 1, 0, 0) | 0;
   _msg_putchar(10);
   _msg_puts(57952);
   HEAP32[i24 >> 2] = _get_number(0, 0) | 0;
   if ((HEAP32[i24 >> 2] | 0) < 1) break;
   if ((HEAP32[i24 >> 2] | 0) > (HEAP32[i20 >> 2] | 0)) break;
  }
  _recover_names(HEAP32[i7 >> 2] | 0, 0, HEAP32[i24 >> 2] | 0, i8) | 0;
  i1 = 18;
 } while (0);
 do if ((i1 | 0) == 18) if (HEAP32[i8 >> 2] | 0) {
  if (HEAP32[i33 >> 2] | 0) if (!(_ml_open(HEAP32[26773] | 0) | 0)) _getout(1);
  HEAP32[i5 >> 2] = _alloc(792) | 0;
  if (HEAP32[i5 >> 2] | 0) {
   HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] = 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = 0;
   HEAP32[i23 >> 2] = _vim_strsave(HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = _mf_open(HEAP32[i8 >> 2] | 0, 0) | 0;
   HEAP32[i8 >> 2] = HEAP32[i23 >> 2];
   if (HEAP32[i6 >> 2] | 0) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) >= 0) {
    HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i6 >> 2];
    HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2] = 1048;
    i7 = _mf_get(HEAP32[i6 >> 2] | 0, 0, 1) | 0;
    HEAP32[i9 >> 2] = i7;
    if (!i7) {
     _msg_start();
     _msg_puts_attr(58020, HEAP32[i36 >> 2] | 4096);
     _msg_outtrans_attr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, HEAP32[i36 >> 2] | 4096) | 0;
     _msg_puts_attr(58049, HEAP32[i36 >> 2] | 4096);
     _msg_end() | 0;
     break;
    }
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2];
    if (!(_strncmp((HEAP32[i10 >> 2] | 0) + 2 | 0, 57464, 7) | 0)) {
     _msg_start();
     _msg_outtrans_attr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 4096) | 0;
     _msg_puts_attr(58114, 4096);
     _msg_puts_attr(58157, 4096);
     _msg_end() | 0;
     break;
    }
    if (!(_ml_check_b0_id(HEAP32[i10 >> 2] | 0) | 0)) {
     _emsg2(58179, HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0;
     break;
    }
    if (_b0_magic_wrong(HEAP32[i10 >> 2] | 0) | 0) {
     _msg_start();
     _msg_outtrans_attr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, HEAP32[i36 >> 2] | 4096) | 0;
     _msg_puts_attr(58223, HEAP32[i36 >> 2] | 4096);
     _msg_puts_attr(58258, HEAP32[i36 >> 2] | 4096);
     HEAP8[(HEAP32[i10 >> 2] | 0) + 108 >> 0] = 0;
     _msg_puts_attr((HEAP32[i10 >> 2] | 0) + 68 | 0, HEAP32[i36 >> 2] | 4096);
     _msg_puts_attr(58283, HEAP32[i36 >> 2] | 4096);
     _msg_end() | 0;
     break;
    }
    i7 = HEAP32[i6 >> 2] | 0;
    if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 1 >> 0] | 0) != 48) {
     _emsg2(58315, HEAP32[i7 >> 2] | 0) | 0;
     break;
    }
    i20 = HEAP32[i7 + 592 >> 2] | 0;
    if ((i20 | 0) != (_char_to_long((HEAP32[i10 >> 2] | 0) + 12 | 0) | 0)) {
     HEAP32[i38 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2];
     i20 = HEAP32[i6 >> 2] | 0;
     _mf_new_page_size(i20, _char_to_long((HEAP32[i10 >> 2] | 0) + 12 | 0) | 0);
     if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2] | 0) >>> 0 < (HEAP32[i38 >> 2] | 0) >>> 0) {
      _msg_start();
      _msg_outtrans_attr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, HEAP32[i36 >> 2] | 4096) | 0;
      _msg_puts_attr(58389, HEAP32[i36 >> 2] | 4096);
      _msg_end() | 0;
      break;
     }
     i20 = _lseek(HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0, 0, 2) | 0;
     HEAP32[i32 >> 2] = i20;
     if ((i20 | 0) <= 0) HEAP32[(HEAP32[i6 >> 2] | 0) + 576 >> 2] = 0; else {
      i20 = HEAP32[i6 >> 2] | 0;
      HEAP32[i20 + 576 >> 2] = ((HEAP32[i32 >> 2] | 0) >>> 0) / ((HEAP32[i20 + 592 >> 2] | 0) >>> 0) | 0;
     }
     i20 = HEAP32[i6 >> 2] | 0;
     HEAP32[i20 + 588 >> 2] = HEAP32[i20 + 576 >> 2];
     HEAP32[i23 >> 2] = _alloc(HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2] | 0) | 0;
     if (!(HEAP32[i23 >> 2] | 0)) break;
     _memmove(HEAP32[i23 >> 2] | 0, HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0, HEAP32[i38 >> 2] | 0) | 0;
     _vim_free(HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0);
     HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = HEAP32[i23 >> 2];
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2];
    }
    if (HEAP32[i21 >> 2] | 0) {
     _expand_env((HEAP32[i10 >> 2] | 0) + 108 | 0, HEAP32[26885] | 0, 4096);
     if (!(_setfname(HEAP32[26773] | 0, HEAP32[26885] | 0, 0, 1) | 0)) break;
    }
    _home_replace(0, HEAP32[HEAP32[i6 >> 2] >> 2] | 0, HEAP32[26885] | 0, 4096, 1);
    HEAP32[i4 >> 2] = HEAP32[26885];
    _smsg(58451, i4) | 0;
    if (_buf_spname(HEAP32[26773] | 0) | 0) {
     i20 = HEAP32[26885] | 0;
     _vim_strncpy(i20, _buf_spname(HEAP32[26773] | 0) | 0, 4095);
    } else _home_replace(0, HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0, HEAP32[26885] | 0, 4096, 1);
    HEAP32[i3 >> 2] = HEAP32[26885];
    _smsg(58472, i3) | 0;
    _msg_putchar(10);
    HEAP32[i35 >> 2] = _char_to_long((HEAP32[i10 >> 2] | 0) + 16 | 0) | 0;
    do if (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) if ((_stat(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0, i18) | 0) != -1) {
     if ((_stat(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, i19) | 0) != -1) {
      if ((HEAP32[i18 + 56 >> 2] | 0) <= (HEAP32[i19 + 56 >> 2] | 0)) i1 = 54;
     } else i1 = 54;
     if ((i1 | 0) == 54) if ((HEAP32[i18 + 56 >> 2] | 0) == (HEAP32[i35 >> 2] | 0)) break;
     _emsg(58491) | 0;
    } while (0);
    _out_flush();
    HEAP32[i11 >> 2] = HEAPU8[(HEAP32[i10 >> 2] | 0) + 108 + 898 >> 0] & 3;
    if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 108 + 898 >> 0] & 8 | 0) {
     HEAP32[i39 >> 2] = 898;
     HEAP32[i23 >> 2] = (HEAP32[i10 >> 2] | 0) + 108 + (HEAP32[i39 >> 2] | 0);
     while (1) {
      if ((HEAP32[i23 >> 2] | 0) >>> 0 <= ((HEAP32[i10 >> 2] | 0) + 108 | 0) >>> 0) break;
      if (!(HEAPU8[(HEAP32[i23 >> 2] | 0) + -1 >> 0] | 0)) break;
      HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
     }
     i20 = HEAP32[i23 >> 2] | 0;
     HEAP32[i12 >> 2] = _vim_strnsave(i20 | 0, (HEAP32[i10 >> 2] | 0) + 108 + (HEAP32[i39 >> 2] | 0) - i20 | 0) | 0;
    }
    _mf_put(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0, 0);
    HEAP32[i9 >> 2] = 0;
    while (1) {
     if (!((HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) != 0 ^ 1)) break;
     _ml_delete(1, 0) | 0;
    }
    if (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) HEAP32[i37 >> 2] = _readfile(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0, 0, 0, 0, 2147483647, 0, 1) | 0;
    if (HEAP32[i11 >> 2] | 0) _set_fileformat((HEAP32[i11 >> 2] | 0) - 1 | 0, 4);
    if (HEAP32[i12 >> 2] | 0) {
     _set_option_value(65737, 0, HEAP32[i12 >> 2] | 0, 4) | 0;
     _vim_free(HEAP32[i12 >> 2] | 0);
    }
    _unchanged(HEAP32[26773] | 0, 1);
    HEAP32[i16 >> 2] = 1;
    HEAP32[i17 >> 2] = 1;
    HEAP32[i22 >> 2] = 0;
    HEAP32[i27 >> 2] = 0;
    HEAP32[i29 >> 2] = 0;
    HEAP32[i25 >> 2] = 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 0;
    if (!(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) HEAP32[i26 >> 2] = 1; else HEAP32[i26 >> 2] = 0;
    HEAP32[i34 >> 2] = 0;
    L102 : while (1) {
     if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
     if (HEAP32[i9 >> 2] | 0) _mf_put(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0, 0);
     i20 = _mf_get(HEAP32[i6 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
     HEAP32[i9 >> 2] = i20;
     do if (!i20) {
      if ((HEAP32[i16 >> 2] | 0) == 1) {
       i1 = 80;
       break L102;
      }
      HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
      i7 = HEAP32[i22 >> 2] | 0;
      HEAP32[i22 >> 2] = i7 + 1;
      _ml_append(i7, 58579, 0, 1) | 0;
      i1 = 120;
     } else {
      HEAP32[i13 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2];
      if ((HEAPU16[HEAP32[i13 >> 2] >> 1] | 0) != 28788) {
       HEAP32[i14 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2];
       if ((HEAPU16[HEAP32[i14 >> 2] >> 1] | 0) != 25697) {
        if ((HEAP32[i16 >> 2] | 0) == 1) {
         i1 = 105;
         break L102;
        }
        HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
        i7 = HEAP32[i22 >> 2] | 0;
        HEAP32[i22 >> 2] = i7 + 1;
        _ml_append(i7, 58698, 0, 1) | 0;
        i1 = 120;
        break;
       }
       HEAP32[i28 >> 2] = 0;
       i7 = Math_imul(HEAP32[i17 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2] | 0) | 0;
       if ((i7 | 0) != (HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] | 0)) {
        i7 = HEAP32[i22 >> 2] | 0;
        HEAP32[i22 >> 2] = i7 + 1;
        _ml_append(i7, 58715, 0, 1) | 0;
        HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
        HEAP32[i28 >> 2] = 1;
        i7 = Math_imul(HEAP32[i17 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2] | 0) | 0;
        HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] = i7;
       }
       i7 = HEAP32[i14 >> 2] | 0;
       HEAP8[i7 + (HEAP32[i7 + 12 >> 2] | 0) + -1 >> 0] = 0;
       if ((HEAP32[i27 >> 2] | 0) != (HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] | 0)) {
        i7 = HEAP32[i22 >> 2] | 0;
        HEAP32[i22 >> 2] = i7 + 1;
        _ml_append(i7, 58765, 0, 1) | 0;
        HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
        HEAP32[i28 >> 2] = 1;
       }
       HEAP32[i24 >> 2] = 0;
       while (1) {
        if ((HEAP32[i24 >> 2] | 0) >= (HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] | 0)) break;
        HEAP32[i31 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 20 + (HEAP32[i24 >> 2] << 2) >> 2] & 2147483647;
        do if ((HEAP32[i31 >> 2] | 0) <= 20) i1 = 115; else {
         if ((HEAP32[i31 >> 2] | 0) >= (HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] | 0)) {
          i1 = 115;
          break;
         }
         HEAP32[i23 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i31 >> 2] | 0);
        } while (0);
        if ((i1 | 0) == 115) {
         i1 = 0;
         HEAP32[i23 >> 2] = 58829;
         HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
        }
        i7 = HEAP32[i22 >> 2] | 0;
        HEAP32[i22 >> 2] = i7 + 1;
        _ml_append(i7, HEAP32[i23 >> 2] | 0, 0, 1) | 0;
        HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
       }
       if (!(HEAP32[i28 >> 2] | 0)) {
        i1 = 120;
        break;
       }
       i7 = HEAP32[i22 >> 2] | 0;
       HEAP32[i22 >> 2] = i7 + 1;
       _ml_append(i7, 58833, 0, 1) | 0;
       i1 = 120;
       break;
      }
      do if ((HEAP32[i29 >> 2] | 0) == 0 & (HEAP32[i27 >> 2] | 0) != 0) {
       HEAP32[i24 >> 2] = 0;
       while (1) {
        if ((HEAP32[i24 >> 2] | 0) >= (HEAPU16[(HEAP32[i13 >> 2] | 0) + 2 >> 1] | 0)) break;
        HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) - (HEAP32[(HEAP32[i13 >> 2] | 0) + 8 + (HEAP32[i24 >> 2] << 4) + 4 >> 2] | 0);
        HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
       }
       if (!(HEAP32[i27 >> 2] | 0)) break;
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
       i7 = HEAP32[i22 >> 2] | 0;
       HEAP32[i22 >> 2] = i7 + 1;
       _ml_append(i7, 58601, 0, 1) | 0;
      } while (0);
      if (!(HEAPU16[(HEAP32[i13 >> 2] | 0) + 2 >> 1] | 0)) {
       i7 = HEAP32[i22 >> 2] | 0;
       HEAP32[i22 >> 2] = i7 + 1;
       _ml_append(i7, 58621, 0, 1) | 0;
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
       i1 = 120;
       break;
      }
      if ((HEAP32[i29 >> 2] | 0) >= (HEAPU16[(HEAP32[i13 >> 2] | 0) + 2 >> 1] | 0)) {
       i1 = 120;
       break;
      }
      if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 8 + (HEAP32[i29 >> 2] << 4) >> 2] | 0) >= 0) {
       i7 = _ml_add_stack(HEAP32[i5 >> 2] | 0) | 0;
       HEAP32[i30 >> 2] = i7;
       if ((i7 | 0) < 0) {
        i1 = 101;
        break L102;
       }
       HEAP32[i15 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[i30 >> 2] << 4);
       HEAP32[HEAP32[i15 >> 2] >> 2] = HEAP32[i16 >> 2];
       HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] = HEAP32[i29 >> 2];
       HEAP32[i16 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 8 + (HEAP32[i29 >> 2] << 4) >> 2];
       HEAP32[i27 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 8 + (HEAP32[i29 >> 2] << 4) + 4 >> 2];
       HEAP32[i17 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 8 + (HEAP32[i29 >> 2] << 4) + 12 >> 2];
       HEAP32[i29 >> 2] = 0;
       break;
      }
      do if (!(HEAP32[i26 >> 2] | 0)) {
       HEAP32[i27 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 8 + (HEAP32[i29 >> 2] << 4) + 4 >> 2];
       if ((_readfile(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0, 0, HEAP32[i22 >> 2] | 0, (HEAP32[(HEAP32[i13 >> 2] | 0) + 8 + (HEAP32[i29 >> 2] << 4) + 8 >> 2] | 0) - 1 | 0, HEAP32[i27 >> 2] | 0, 0, 0) | 0) != 1) {
        HEAP32[i26 >> 2] = 1;
        break;
       } else {
        HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
        break;
       }
      } while (0);
      if (HEAP32[i26 >> 2] | 0) {
       HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
       i7 = HEAP32[i22 >> 2] | 0;
       HEAP32[i22 >> 2] = i7 + 1;
       _ml_append(i7, 58636, 0, 1) | 0;
      }
      HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
     } while (0);
     if ((i1 | 0) == 120) {
      i1 = 0;
      if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0)) break;
      i20 = HEAP32[i5 >> 2] | 0;
      i7 = HEAP32[i20 + 12 >> 2] | 0;
      i41 = i20 + 16 | 0;
      i20 = (HEAP32[i41 >> 2] | 0) + -1 | 0;
      HEAP32[i41 >> 2] = i20;
      HEAP32[i15 >> 2] = i7 + (i20 << 4);
      HEAP32[i16 >> 2] = HEAP32[HEAP32[i15 >> 2] >> 2];
      HEAP32[i29 >> 2] = (HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] | 0) + 1;
      HEAP32[i17 >> 2] = 1;
     }
     _line_breakcheck();
    }
    if ((i1 | 0) == 80) {
     _emsg2(58542, HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0;
     break;
    } else if ((i1 | 0) == 101) HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1; else if ((i1 | 0) == 105) {
     _emsg2(58653, HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0;
     break;
    }
    L170 : do if ((HEAP32[i37 >> 2] | 0) != 1) i1 = 125; else {
     if ((HEAP32[HEAP32[26773] >> 2] | 0) != ((HEAP32[i22 >> 2] << 1) + 1 | 0)) {
      i1 = 125;
      break;
     }
     HEAP32[i29 >> 2] = 1;
     while (1) {
      if ((HEAP32[i29 >> 2] | 0) > (HEAP32[i22 >> 2] | 0)) break L170;
      HEAP32[i23 >> 2] = _vim_strsave(_ml_get(HEAP32[i29 >> 2] | 0) | 0) | 0;
      i20 = HEAP32[i23 >> 2] | 0;
      HEAP32[i24 >> 2] = _strcmp(i20, _ml_get((HEAP32[i29 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0) | 0) | 0;
      _vim_free(HEAP32[i23 >> 2] | 0);
      if (HEAP32[i24 >> 2] | 0) break;
      HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
     }
     _changed_int();
     i20 = (HEAP32[26773] | 0) + 112 + 8 | 0;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
    } while (0);
    do if ((i1 | 0) == 125) {
     if ((HEAP32[HEAP32[26773] >> 2] | 0) == 2) if (!(HEAPU8[(_ml_get(1) | 0) >> 0] | 0)) break;
     _changed_int();
     i20 = (HEAP32[26773] | 0) + 112 + 8 | 0;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
    } while (0);
    while (1) {
     if ((HEAP32[HEAP32[26773] >> 2] | 0) > (HEAP32[i22 >> 2] | 0)) i42 = (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) != 0 ^ 1; else i42 = 0;
     i43 = HEAP32[26773] | 0;
     if (!i42) break;
     _ml_delete(HEAP32[i43 >> 2] | 0, 0) | 0;
    }
    i20 = i43 + 60 | 0;
    HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 1;
    HEAP32[26816] = 0;
    do if (HEAP32[26834] | 0) _emsg(58840) | 0; else {
     if (HEAP32[i25 >> 2] | 0) {
      HEAP32[26720] = (HEAP32[26720] | 0) + 1;
      _msg(58867) | 0;
      _emsg(58881) | 0;
      HEAP32[26720] = (HEAP32[26720] | 0) + -1;
      _msg(58954) | 0;
      _msg(58867) | 0;
      break;
     }
     if (HEAP32[(HEAP32[26773] | 0) + 108 >> 2] | 0) {
      _msg(58993) | 0;
      _msg_puts(59051);
      _msg_puts(59111);
     } else _msg(59169) | 0;
     _msg_puts(59227);
     HEAP32[26876] = HEAP32[26877];
    } while (0);
    _redraw_curbuf_later(40);
    break;
   }
   if (HEAP32[i8 >> 2] | 0) _emsg2(57999, HEAP32[i8 >> 2] | 0) | 0;
  }
 } while (0);
 _vim_free(HEAP32[i8 >> 2] | 0);
 HEAP32[26816] = 0;
 if (HEAP32[i6 >> 2] | 0) {
  if (HEAP32[i9 >> 2] | 0) _mf_put(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0, 0);
  _mf_close(HEAP32[i6 >> 2] | 0, 0);
 }
 if (HEAP32[i5 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0);
  _vim_free(HEAP32[i5 >> 2] | 0);
 }
 i5 = HEAP32[26773] | 0;
 if ((HEAP32[i34 >> 2] | 0) != 0 & (HEAP32[i33 >> 2] | 0) != 0) {
  _ml_close(i5, 1);
  STACKTOP = i2;
  return;
 } else {
  _apply_autocmds(10, 0, HEAP32[i5 + 76 >> 2] | 0, 0, HEAP32[26773] | 0) | 0;
  i5 = HEAP32[26773] | 0;
  _apply_autocmds(13, 0, HEAP32[i5 + 76 >> 2] | 0, 0, i5 | 0) | 0;
  STACKTOP = i2;
  return;
 }
}

function _win_split_ins(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i7 = i6 + 100 | 0;
 i8 = i6 + 96 | 0;
 i9 = i6 + 92 | 0;
 i10 = i6 + 88 | 0;
 i11 = i6 + 84 | 0;
 i12 = i6 + 80 | 0;
 i13 = i6 + 76 | 0;
 i14 = i6 + 72 | 0;
 i15 = i6 + 68 | 0;
 i16 = i6 + 64 | 0;
 i17 = i6 + 60 | 0;
 i18 = i6 + 56 | 0;
 i19 = i6 + 52 | 0;
 i20 = i6 + 48 | 0;
 i21 = i6 + 44 | 0;
 i22 = i6 + 40 | 0;
 i23 = i6 + 36 | 0;
 i24 = i6 + 32 | 0;
 i25 = i6 + 28 | 0;
 i26 = i6 + 24 | 0;
 i27 = i6 + 20 | 0;
 i28 = i6 + 16 | 0;
 i29 = i6 + 12 | 0;
 i30 = i6 + 8 | 0;
 i31 = i6 + 4 | 0;
 i32 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i29 >> 2] = 0;
 do if (HEAP32[i9 >> 2] & 4 | 0) HEAP32[i13 >> 2] = HEAP32[26887]; else if (HEAP32[i9 >> 2] & 8 | 0) {
  HEAP32[i13 >> 2] = HEAP32[27112];
  break;
 } else {
  HEAP32[i13 >> 2] = HEAP32[26881];
  break;
 } while (0);
 do if ((HEAP32[26942] | 0) == 1 ? (HEAP32[26887] | 0) == (HEAP32[27112] | 0) : 0) if (!(HEAP32[(HEAP32[i13 >> 2] | 0) + 92 >> 2] | 0)) {
  if (!((HEAP32[i10 >> 2] | 0) == 0 ? (HEAP32[(HEAP32[i13 >> 2] | 0) + 88 >> 2] | 0) <= (HEAP32[27035] | 0) : 0)) {
   HEAP32[i16 >> 2] = 1;
   break;
  }
  _emsg(93214) | 0;
  HEAP32[i7 >> 2] = 0;
  i33 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i33 | 0;
 } while (0);
 if (HEAP32[26627] | 0) _out_flush();
 L19 : do if (HEAP32[i9 >> 2] & 2 | 0) {
  HEAP32[i21 >> 2] = 1;
  i4 = HEAP32[27036] | 0;
  HEAP32[i30 >> 2] = (i4 | 0) == 0 ? 1 : i4 | 0;
  HEAP32[i18 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
  if (HEAP32[i9 >> 2] & 1 | 0) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + ((HEAP32[27037] | 0) - (HEAP32[i30 >> 2] | 0));
  do if (HEAP32[i9 >> 2] & 12 | 0) {
   HEAP32[i31 >> 2] = _frame_minwidth(HEAP32[27114] | 0, -1) | 0;
   HEAP32[i19 >> 2] = HEAP32[(HEAP32[27114] | 0) + 4 >> 2];
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i31 >> 2] | 0);
  } else {
   i4 = (HEAP32[26911] | 0) != 0;
   HEAP32[i31 >> 2] = _frame_minwidth(HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0, -1) | 0;
   i3 = HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0;
   if (!i4) {
    HEAP32[i19 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i31 >> 2] | 0);
    break;
   }
   HEAP32[i25 >> 2] = i3;
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) + 20 >> 2];
   while (1) {
    if (!(HEAP32[i22 >> 2] | 0)) break;
    L33 : do if ((HEAP8[HEAP32[i22 >> 2] >> 0] | 0) == 1) {
     HEAP32[i24 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 32 >> 2];
     while (1) {
      if (!(HEAP32[i24 >> 2] | 0)) break L33;
      if ((HEAP32[i24 >> 2] | 0) != (HEAP32[i25 >> 2] | 0)) {
       i3 = _frame_minwidth(HEAP32[i24 >> 2] | 0, -1) | 0;
       HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + i3;
      }
      HEAP32[i24 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2];
     }
    } while (0);
    HEAP32[i25 >> 2] = HEAP32[i22 >> 2];
    HEAP32[i22 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 20 >> 2];
   }
   HEAP32[i19 >> 2] = HEAP32[(HEAP32[27114] | 0) + 4 >> 2];
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i31 >> 2] | 0);
  } while (0);
  if ((HEAP32[i10 >> 2] | 0) == 0 ? (HEAP32[i19 >> 2] | 0) < (HEAP32[i18 >> 2] | 0) : 0) {
   _emsg(93214) | 0;
   HEAP32[i7 >> 2] = 0;
   i33 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i33 | 0;
  }
  if (!(HEAP32[i14 >> 2] | 0)) HEAP32[i14 >> 2] = (HEAP32[(HEAP32[i13 >> 2] | 0) + 100 >> 2] | 0) / 2 | 0;
  if ((HEAP32[i14 >> 2] | 0) > ((HEAP32[i19 >> 2] | 0) - (HEAP32[i31 >> 2] | 0) - 1 | 0)) HEAP32[i14 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i31 >> 2] | 0) - 1;
  if ((HEAP32[i14 >> 2] | 0) < (HEAP32[i30 >> 2] | 0)) HEAP32[i14 >> 2] = HEAP32[i30 >> 2];
  if (((HEAP32[(HEAP32[i13 >> 2] | 0) + 100 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) - 1 | 0) < (HEAP32[27036] | 0)) HEAP32[i17 >> 2] = 1;
  if (HEAP32[(HEAP32[i13 >> 2] | 0) + 200 + 16 >> 2] | 0) {
   i3 = HEAP32[i13 >> 2] | 0;
   _win_setwidth_win((HEAP32[i3 + 100 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) + 1 | 0, i3 | 0);
  }
  if ((HEAP32[i17 >> 2] | 0) == 0 & (HEAP32[26911] | 0) != 0 & (HEAP32[i8 >> 2] | 0) == 0) if ((HEAPU8[HEAP32[26910] >> 0] | 0) != 118) if (HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) + 20 >> 2] | 0) {
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) + 20 >> 2] | 0) + 32 >> 2];
   L66 : while (1) {
    if (!(HEAP32[i22 >> 2] | 0)) break L19;
    do if ((HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0) != (HEAP32[i13 >> 2] | 0)) {
     if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0)) break;
     if ((HEAP32[(HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0) + 100 >> 2] | 0) > (HEAP32[i14 >> 2] | 0)) break L66;
     if ((HEAP32[(HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0) + 100 >> 2] | 0) > ((HEAP32[(HEAP32[i13 >> 2] | 0) + 100 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) - 1 | 0)) break L66;
    } while (0);
    HEAP32[i22 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2];
   }
   HEAP32[i17 >> 2] = 1;
  }
 } else {
  HEAP32[i21 >> 2] = 2;
  i3 = HEAP32[27035] | 0;
  HEAP32[i28 >> 2] = ((i3 | 0) == 0 ? 1 : i3 | 0) + 0;
  HEAP32[i18 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
  if (HEAP32[i9 >> 2] & 1 | 0) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + ((HEAP32[27034] | 0) - (HEAP32[i28 >> 2] | 0));
  do if (HEAP32[i9 >> 2] & 12 | 0) {
   i3 = _frame_minheight(HEAP32[27114] | 0, -1) | 0;
   HEAP32[i27 >> 2] = i3 + (HEAP32[i16 >> 2] | 0);
   HEAP32[i19 >> 2] = HEAP32[(HEAP32[27114] | 0) + 12 >> 2];
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
  } else {
   i3 = (HEAP32[26911] | 0) != 0;
   i4 = _frame_minheight(HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0, -1) | 0;
   HEAP32[i27 >> 2] = i4 + (HEAP32[i16 >> 2] | 0);
   i4 = HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0;
   if (!i3) {
    HEAP32[i19 >> 2] = HEAP32[i4 + 12 >> 2];
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
    break;
   }
   HEAP32[i25 >> 2] = i4;
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) + 20 >> 2];
   while (1) {
    if (!(HEAP32[i22 >> 2] | 0)) break;
    L88 : do if ((HEAP8[HEAP32[i22 >> 2] >> 0] | 0) == 2) {
     HEAP32[i24 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 32 >> 2];
     while (1) {
      if (!(HEAP32[i24 >> 2] | 0)) break L88;
      if ((HEAP32[i24 >> 2] | 0) != (HEAP32[i25 >> 2] | 0)) {
       i4 = _frame_minheight(HEAP32[i24 >> 2] | 0, -1) | 0;
       HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + i4;
      }
      HEAP32[i24 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2];
     }
    } while (0);
    HEAP32[i25 >> 2] = HEAP32[i22 >> 2];
    HEAP32[i22 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 20 >> 2];
   }
   HEAP32[i19 >> 2] = HEAP32[(HEAP32[27114] | 0) + 12 >> 2];
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
  } while (0);
  if ((HEAP32[i10 >> 2] | 0) == 0 ? (HEAP32[i19 >> 2] | 0) < (HEAP32[i18 >> 2] | 0) : 0) {
   _emsg(93214) | 0;
   HEAP32[i7 >> 2] = 0;
   i33 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i33 | 0;
  }
  HEAP32[i20 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 88 >> 2];
  if (HEAP32[i16 >> 2] | 0) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 92 >> 2] = 1;
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) - 1;
  }
  if (!(HEAP32[i14 >> 2] | 0)) HEAP32[i14 >> 2] = (HEAP32[i20 >> 2] | 0) / 2 | 0;
  if ((HEAP32[i14 >> 2] | 0) > ((HEAP32[i19 >> 2] | 0) - (HEAP32[i27 >> 2] | 0) - 1 | 0)) HEAP32[i14 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i27 >> 2] | 0) - 1;
  if ((HEAP32[i14 >> 2] | 0) < (HEAP32[i28 >> 2] | 0)) HEAP32[i14 >> 2] = HEAP32[i28 >> 2];
  if (((HEAP32[i20 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) - 1 | 0) < (HEAP32[27035] | 0)) HEAP32[i17 >> 2] = 1;
  if (HEAP32[(HEAP32[i13 >> 2] | 0) + 200 + 12 >> 2] | 0) {
   _set_fraction(HEAP32[i13 >> 2] | 0);
   HEAP32[i29 >> 2] = 1;
   i4 = HEAP32[i13 >> 2] | 0;
   _win_setheight_win((HEAP32[i4 + 88 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) + 1 | 0, i4 | 0);
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 88 >> 2];
   if (HEAP32[i16 >> 2] | 0) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) - 1;
  }
  if ((HEAP32[i17 >> 2] | 0) == 0 & (HEAP32[26911] | 0) != 0 & (HEAP32[i8 >> 2] | 0) == 0) if ((HEAPU8[HEAP32[26910] >> 0] | 0) != 104) if (HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) + 20 >> 2] | 0) {
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) + 20 >> 2] | 0) + 32 >> 2];
   L125 : while (1) {
    if (!(HEAP32[i22 >> 2] | 0)) break L19;
    do if ((HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0) != (HEAP32[i13 >> 2] | 0)) {
     if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0)) break;
     if ((HEAP32[(HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0) + 88 >> 2] | 0) > (HEAP32[i14 >> 2] | 0)) break L125;
     if ((HEAP32[(HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0) + 88 >> 2] | 0) > ((HEAP32[i20 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) - 1 | 0)) break L125;
    } while (0);
    HEAP32[i22 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2];
   }
   HEAP32[i17 >> 2] = 1;
  }
 } while (0);
 L135 : do if (!(HEAP32[i9 >> 2] & 4)) {
  do if (!(HEAP32[i9 >> 2] & 8)) if (!(HEAP32[i9 >> 2] & 32)) {
   if (HEAP32[i9 >> 2] & 64 | 0) {
    i5 = 105;
    break L135;
   }
   if (HEAP32[i9 >> 2] & 2 | 0) if (HEAP32[26995] | 0) break; else {
    i5 = 105;
    break L135;
   } else if (HEAP32[26993] | 0) break; else {
    i5 = 105;
    break L135;
   }
  } while (0);
  i28 = HEAP32[i13 >> 2] | 0;
  if (!(HEAP32[i10 >> 2] | 0)) {
   HEAP32[i12 >> 2] = _win_alloc(i28, 0) | 0;
   break;
  } else {
   _win_append(i28, HEAP32[i12 >> 2] | 0);
   break;
  }
 } else i5 = 105; while (0);
 do if ((i5 | 0) == 105) {
  i28 = HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] | 0;
  if (!(HEAP32[i10 >> 2] | 0)) {
   HEAP32[i12 >> 2] = _win_alloc(i28, 0) | 0;
   break;
  } else {
   _win_append(i28, HEAP32[i12 >> 2] | 0);
   break;
  }
 } while (0);
 do if (!(HEAP32[i10 >> 2] | 0)) {
  if (!(HEAP32[i12 >> 2] | 0)) {
   HEAP32[i7 >> 2] = 0;
   i33 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i33 | 0;
  }
  _new_frame(HEAP32[i12 >> 2] | 0);
  i28 = HEAP32[i12 >> 2] | 0;
  if (HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] | 0) {
   _win_init(i28, HEAP32[26881] | 0, HEAP32[i9 >> 2] | 0);
   break;
  }
  _win_free(i28, 0);
  HEAP32[i7 >> 2] = 0;
  i33 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i33 | 0;
 } while (0);
 do if (HEAP32[i9 >> 2] & 12 | 0) {
  if ((HEAP8[HEAP32[27114] >> 0] | 0) == 2) if (!(HEAP32[i9 >> 2] & 2)) i5 = 119; else i5 = 117; else i5 = 117;
  do if ((i5 | 0) == 117) {
   if ((HEAP8[HEAP32[27114] >> 0] | 0) == 1) if (HEAP32[i9 >> 2] & 2 | 0) {
    i5 = 119;
    break;
   }
   HEAP32[i23 >> 2] = HEAP32[27114];
  } while (0);
  L174 : do if ((i5 | 0) == 119) {
   HEAP32[i23 >> 2] = HEAP32[(HEAP32[27114] | 0) + 32 >> 2];
   if (HEAP32[i9 >> 2] & 8 | 0) while (1) {
    if (!(HEAP32[(HEAP32[i23 >> 2] | 0) + 24 >> 2] | 0)) break L174;
    HEAP32[i23 >> 2] = HEAP32[(HEAP32[i23 >> 2] | 0) + 24 >> 2];
   }
  } while (0);
  HEAP32[i26 >> 2] = HEAP32[i9 >> 2] & 4;
 } else {
  HEAP32[i23 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2];
  if (HEAP32[i9 >> 2] & 32 | 0) {
   HEAP32[i26 >> 2] = 0;
   break;
  }
  if (HEAP32[i9 >> 2] & 64 | 0) {
   HEAP32[i26 >> 2] = 1;
   break;
  }
  if (HEAP32[i9 >> 2] & 2 | 0) {
   HEAP32[i26 >> 2] = ((HEAP32[26995] | 0) != 0 ^ 1) & 1;
   break;
  } else {
   HEAP32[i26 >> 2] = ((HEAP32[26993] | 0) != 0 ^ 1) & 1;
   break;
  }
 } while (0);
 if (!(HEAP32[(HEAP32[i23 >> 2] | 0) + 20 >> 2] | 0)) i5 = 134; else if ((HEAP8[HEAP32[(HEAP32[i23 >> 2] | 0) + 20 >> 2] >> 0] | 0) != (HEAP32[i21 >> 2] | 0)) i5 = 134;
 L194 : do if ((i5 | 0) == 134) {
  HEAP32[i22 >> 2] = _alloc_clear(40) | 0;
  i28 = HEAP32[i22 >> 2] | 0;
  i27 = HEAP32[i23 >> 2] | 0;
  i19 = i28 + 40 | 0;
  do {
   HEAP32[i28 >> 2] = HEAP32[i27 >> 2];
   i28 = i28 + 4 | 0;
   i27 = i27 + 4 | 0;
  } while ((i28 | 0) < (i19 | 0));
  HEAP8[HEAP32[i23 >> 2] >> 0] = HEAP32[i21 >> 2];
  HEAP32[(HEAP32[i22 >> 2] | 0) + 20 >> 2] = HEAP32[i23 >> 2];
  HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] = 0;
  HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] = 0;
  HEAP32[(HEAP32[i23 >> 2] | 0) + 32 >> 2] = HEAP32[i22 >> 2];
  HEAP32[(HEAP32[i23 >> 2] | 0) + 36 >> 2] = 0;
  HEAP32[i23 >> 2] = HEAP32[i22 >> 2];
  i27 = HEAP32[i22 >> 2] | 0;
  if (HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] | 0) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] = i27;
   break;
  }
  HEAP32[i22 >> 2] = HEAP32[i27 + 32 >> 2];
  while (1) {
   if (!(HEAP32[i22 >> 2] | 0)) break L194;
   HEAP32[(HEAP32[i22 >> 2] | 0) + 20 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2];
  }
 } while (0);
 if (!(HEAP32[i10 >> 2] | 0)) HEAP32[i22 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2]; else HEAP32[i22 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2];
 HEAP32[(HEAP32[i22 >> 2] | 0) + 20 >> 2] = HEAP32[(HEAP32[i23 >> 2] | 0) + 20 >> 2];
 i10 = HEAP32[i23 >> 2] | 0;
 i21 = HEAP32[i22 >> 2] | 0;
 if (HEAP32[i26 >> 2] | 0) _frame_insert(i10, i21); else _frame_append(i10, i21);
 if (!(HEAP32[i29 >> 2] | 0)) _set_fraction(HEAP32[i13 >> 2] | 0);
 HEAP32[(HEAP32[i12 >> 2] | 0) + 804 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 804 >> 2];
 if (HEAP32[i9 >> 2] & 2 | 0) {
  HEAP32[(HEAP32[i12 >> 2] | 0) + 200 + 20 >> 2] = HEAP32[(HEAP32[26881] | 0) + 200 + 20 >> 2];
  if (HEAP32[i16 >> 2] | 0) {
   i29 = HEAP32[i13 >> 2] | 0;
   _win_new_height(i29 | 0, (HEAP32[i29 + 88 >> 2] | 0) - 1 | 0);
   HEAP32[(HEAP32[i13 >> 2] | 0) + 92 >> 2] = HEAP32[i16 >> 2];
  }
  if (HEAP32[i9 >> 2] & 12 | 0) {
   i29 = _tabline_height() | 0;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] = i29;
   _win_new_height(HEAP32[i12 >> 2] | 0, (HEAP32[(HEAP32[i23 >> 2] | 0) + 12 >> 2] | 0) - ((HEAP32[26942] | 0) > 0 & 1) - 0 | 0);
   HEAP32[(HEAP32[i12 >> 2] | 0) + 92 >> 2] = (HEAP32[26942] | 0) > 0 & 1;
  } else {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 84 >> 2];
   _win_new_height(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i13 >> 2] | 0) + 88 >> 2] | 0);
   HEAP32[(HEAP32[i12 >> 2] | 0) + 92 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 92 >> 2];
  }
  HEAP32[(HEAP32[i22 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[i23 >> 2] | 0) + 12 >> 2];
  _win_new_width(HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0);
  if (HEAP32[i26 >> 2] | 0) HEAP32[(HEAP32[i12 >> 2] | 0) + 104 >> 2] = 1; else {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 104 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 104 >> 2];
   HEAP32[(HEAP32[i13 >> 2] | 0) + 104 >> 2] = 1;
  }
  if (HEAP32[i9 >> 2] & 12 | 0) {
   if (HEAP32[i9 >> 2] & 8 | 0) _frame_add_vsep(HEAP32[i23 >> 2] | 0);
   i29 = HEAP32[i23 >> 2] | 0;
   i21 = HEAP32[i9 >> 2] & 4 | 0;
   _frame_new_width(i29 | 0, (HEAP32[i29 + 4 >> 2] | 0) - ((HEAP32[i14 >> 2] | 0) + ((i21 | 0) != 0 & 1)) | 0, i21 | 0, 0);
  } else {
   i21 = HEAP32[i13 >> 2] | 0;
   _win_new_width(i21 | 0, (HEAP32[i21 + 100 >> 2] | 0) - ((HEAP32[i14 >> 2] | 0) + 1) | 0);
  }
  i21 = HEAP32[(HEAP32[i13 >> 2] | 0) + 96 >> 2] | 0;
  if (HEAP32[i26 >> 2] | 0) {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 96 >> 2] = i21;
   i29 = (HEAP32[i13 >> 2] | 0) + 96 | 0;
   HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + 1);
  } else HEAP32[(HEAP32[i12 >> 2] | 0) + 96 >> 2] = i21 + (HEAP32[(HEAP32[i13 >> 2] | 0) + 100 >> 2] | 0) + 1;
  _frame_fix_width(HEAP32[i13 >> 2] | 0);
  _frame_fix_width(HEAP32[i12 >> 2] | 0);
 } else {
  if (HEAP32[i9 >> 2] & 12 | 0) {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 96 >> 2] = 0;
   _win_new_width(HEAP32[i12 >> 2] | 0, HEAP32[10174] | 0);
   HEAP32[(HEAP32[i12 >> 2] | 0) + 104 >> 2] = 0;
  } else {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 96 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 96 >> 2];
   _win_new_width(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i13 >> 2] | 0) + 100 >> 2] | 0);
   HEAP32[(HEAP32[i12 >> 2] | 0) + 104 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 104 >> 2];
  }
  HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i23 >> 2] | 0) + 4 >> 2];
  _win_new_height(HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0);
  if (HEAP32[i9 >> 2] & 12 | 0) {
   HEAP32[i32 >> 2] = (HEAP32[(HEAP32[i23 >> 2] | 0) + 12 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) + 0;
   if (!((HEAP32[i9 >> 2] & 8 | 0) != 0 & (HEAP32[26942] | 0) == 0)) HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) - 1;
   _frame_new_height(HEAP32[i23 >> 2] | 0, HEAP32[i32 >> 2] | 0, HEAP32[i9 >> 2] & 4, 0);
  } else _win_new_height(HEAP32[i13 >> 2] | 0, (HEAP32[i20 >> 2] | 0) - ((HEAP32[i14 >> 2] | 0) + 1) | 0);
  i14 = HEAP32[(HEAP32[i13 >> 2] | 0) + 84 >> 2] | 0;
  if (HEAP32[i26 >> 2] | 0) {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] = i14;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 92 >> 2] = 1;
   i26 = (HEAP32[i13 >> 2] | 0) + 84 | 0;
   HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + ((HEAP32[(HEAP32[i12 >> 2] | 0) + 88 >> 2] | 0) + 1);
  } else {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] = i14 + (HEAP32[(HEAP32[i13 >> 2] | 0) + 88 >> 2] | 0) + 1;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 92 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 92 >> 2];
   if (!(HEAP32[i9 >> 2] & 8)) HEAP32[(HEAP32[i13 >> 2] | 0) + 92 >> 2] = 1;
  }
  if (HEAP32[i9 >> 2] & 8 | 0) _frame_add_statusline(HEAP32[i23 >> 2] | 0);
  _frame_fix_height(HEAP32[i12 >> 2] | 0);
  _frame_fix_height(HEAP32[i13 >> 2] | 0);
 }
 if (HEAP32[i9 >> 2] & 12 | 0) _win_comp_pos() | 0;
 _redraw_win_later(HEAP32[i12 >> 2] | 0, 40);
 HEAP32[(HEAP32[i12 >> 2] | 0) + 176 >> 2] = 1;
 _redraw_win_later(HEAP32[i13 >> 2] | 0, 40);
 HEAP32[(HEAP32[i13 >> 2] | 0) + 176 >> 2] = 1;
 if (HEAP32[i16 >> 2] | 0) {
  HEAP32[26877] = (HEAP32[10173] | 0) - 1;
  HEAP32[27043] = HEAP32[27116];
  _msg_clr_eos_force();
  _comp_col();
  HEAP32[26877] = (HEAP32[10173] | 0) - 1;
  HEAP32[27043] = 0;
 }
 if ((HEAP32[i17 >> 2] | 0) != 0 | (HEAP32[i11 >> 2] | 0) != 0) {
  i17 = HEAP32[i11 >> 2] | 0;
  if (HEAP32[i9 >> 2] & 2 | 0) i34 = (i17 | 0) == 118 ? 98 : 104; else i34 = (i17 | 0) == 104 ? 98 : 118;
  _win_equal(HEAP32[i12 >> 2] | 0, 1, i34);
 }
 if (HEAP32[i9 >> 2] & 2 | 0) {
  HEAP32[i15 >> 2] = HEAP32[27037];
  if (HEAP32[i8 >> 2] | 0) HEAP32[27037] = HEAP32[i8 >> 2];
  if (HEAP32[26627] | 0) _gui_init_which_components(0);
 } else {
  HEAP32[i15 >> 2] = HEAP32[27034];
  if (HEAP32[i8 >> 2] | 0) HEAP32[27034] = HEAP32[i8 >> 2];
 }
 _win_enter_ext(HEAP32[i12 >> 2] | 0, 0, 0, 1, 1, 1);
 i12 = HEAP32[i15 >> 2] | 0;
 if (HEAP32[i9 >> 2] & 2 | 0) HEAP32[27037] = i12; else HEAP32[27034] = i12;
 HEAP32[i7 >> 2] = 1;
 i33 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i33 | 0;
}

function _ml_append_int(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i9 = i8 + 164 | 0;
 i10 = i8 + 160 | 0;
 i11 = i8 + 156 | 0;
 i12 = i8 + 152 | 0;
 i13 = i8 + 148 | 0;
 i14 = i8 + 144 | 0;
 i15 = i8 + 140 | 0;
 i16 = i8 + 136 | 0;
 i17 = i8 + 132 | 0;
 i18 = i8 + 128 | 0;
 i19 = i8 + 124 | 0;
 i20 = i8 + 120 | 0;
 i21 = i8 + 116 | 0;
 i22 = i8 + 112 | 0;
 i23 = i8 + 108 | 0;
 i24 = i8 + 104 | 0;
 i25 = i8 + 100 | 0;
 i26 = i8 + 96 | 0;
 i27 = i8 + 92 | 0;
 i28 = i8 + 88 | 0;
 i29 = i8 + 84 | 0;
 i30 = i8 + 80 | 0;
 i31 = i8 + 76 | 0;
 i32 = i8 + 72 | 0;
 i33 = i8 + 68 | 0;
 i34 = i8 + 64 | 0;
 i35 = i8 + 60 | 0;
 i36 = i8 + 56 | 0;
 i37 = i8 + 52 | 0;
 i38 = i8 + 48 | 0;
 i39 = i8 + 44 | 0;
 i40 = i8 + 40 | 0;
 i41 = i8 + 36 | 0;
 i42 = i8 + 32 | 0;
 i43 = i8 + 28 | 0;
 i44 = i8 + 24 | 0;
 i45 = i8 + 20 | 0;
 i46 = i8 + 16 | 0;
 i47 = i8 + 12 | 0;
 i48 = i8 + 8 | 0;
 i49 = i8 + 4 | 0;
 i50 = i8;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 if ((HEAP32[i11 >> 2] | 0) <= (HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) {
  if (HEAP32[26049] | 0) if ((HEAP32[26049] | 0) > (HEAP32[i11 >> 2] | 0)) HEAP32[26049] = (HEAP32[i11 >> 2] | 0) + 1;
  if (!(HEAP32[i13 >> 2] | 0)) HEAP32[i13 >> 2] = (_strlen(HEAP32[i12 >> 2] | 0) | 0) + 1;
  HEAP32[i21 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
  HEAP32[i26 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2];
  HEAP32[i22 >> 2] = HEAP32[(HEAP32[i26 >> 2] | 0) + 592 >> 2];
  i6 = HEAP32[i11 >> 2] | 0;
  i5 = _ml_find_line(HEAP32[i10 >> 2] | 0, (i6 | 0) == 0 ? 1 : i6 | 0, 18) | 0;
  HEAP32[i25 >> 2] = i5;
  if (!i5) {
   HEAP32[i9 >> 2] = 0;
   i51 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i8;
   return i51 | 0;
  }
  i5 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
  if (!(HEAP32[i11 >> 2] | 0)) HEAP32[i24 >> 2] = -1; else HEAP32[i24 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0);
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i17 >> 2] = (HEAP32[i5 + 40 >> 2] | 0) - (HEAP32[i5 + 36 >> 2] | 0);
  HEAP32[i27 >> 2] = HEAP32[(HEAP32[i25 >> 2] | 0) + 20 >> 2];
  do if ((HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[i21 >> 2] | 0)) if ((HEAP32[i24 >> 2] | 0) == ((HEAP32[i17 >> 2] | 0) - 1 | 0)) if ((HEAP32[i11 >> 2] | 0) < (HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) {
   i5 = (HEAP32[i10 >> 2] | 0) + 44 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
   i5 = (HEAP32[i10 >> 2] | 0) + 40 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
   i5 = _ml_find_line(HEAP32[i10 >> 2] | 0, (HEAP32[i11 >> 2] | 0) + 1 | 0, 18) | 0;
   HEAP32[i25 >> 2] = i5;
   if (i5 | 0) {
    HEAP32[i24 >> 2] = -1;
    i5 = HEAP32[i10 >> 2] | 0;
    HEAP32[i17 >> 2] = (HEAP32[i5 + 40 >> 2] | 0) - (HEAP32[i5 + 36 >> 2] | 0);
    HEAP32[i27 >> 2] = HEAP32[(HEAP32[i25 >> 2] | 0) + 20 >> 2];
    break;
   }
   HEAP32[i9 >> 2] = 0;
   i51 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i8;
   return i51 | 0;
  } while (0);
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  if ((HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i21 >> 2] | 0)) {
   i5 = (HEAP32[i27 >> 2] | 0) + 8 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
   i5 = (HEAP32[i27 >> 2] | 0) + 4 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i21 >> 2] | 0);
   i5 = (HEAP32[i27 >> 2] | 0) + 16 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   if ((HEAP32[i17 >> 2] | 0) > ((HEAP32[i24 >> 2] | 0) + 1 | 0)) {
    i5 = HEAP32[i27 >> 2] | 0;
    if ((HEAP32[i24 >> 2] | 0) < 0) HEAP32[i18 >> 2] = HEAP32[i5 + 12 >> 2]; else HEAP32[i18 >> 2] = HEAP32[i5 + 20 + (HEAP32[i24 >> 2] << 2) >> 2] & 2147483647;
    i5 = HEAP32[i27 >> 2] | 0;
    i5 = (HEAP32[i27 >> 2] | 0) + (HEAP32[(HEAP32[i27 >> 2] | 0) + 8 >> 2] | 0) | 0;
    i6 = HEAP32[(HEAP32[i27 >> 2] | 0) + 8 >> 2] | 0;
    i4 = HEAP32[i13 >> 2] | 0;
    _memmove(i5 | 0, i5 + i4 | 0, (HEAP32[i18 >> 2] | 0) - (i6 + i4) | 0) | 0;
    HEAP32[i16 >> 2] = (HEAP32[i17 >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[i16 >> 2] | 0) <= (HEAP32[i24 >> 2] | 0)) break;
     i4 = (HEAP32[i27 >> 2] | 0) + 20 | 0;
     HEAP32[i4 + ((HEAP32[i16 >> 2] | 0) + 1 << 2) >> 2] = (HEAP32[i4 + (HEAP32[i16 >> 2] << 2) >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
    }
    HEAP32[(HEAP32[i27 >> 2] | 0) + 20 + ((HEAP32[i24 >> 2] | 0) + 1 << 2) >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
   } else {
    i4 = HEAP32[i27 >> 2] | 0;
    HEAP32[i4 + 20 + ((HEAP32[i24 >> 2] | 0) + 1 << 2) >> 2] = HEAP32[i4 + 8 >> 2];
   }
   i4 = HEAP32[i27 >> 2] | 0;
   _memmove(i4 + (HEAP32[i4 + 20 + ((HEAP32[i24 >> 2] | 0) + 1 << 2) >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
   if (HEAP32[i15 >> 2] | 0) {
    i4 = (HEAP32[i27 >> 2] | 0) + 20 + ((HEAP32[i24 >> 2] | 0) + 1 << 2) | 0;
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | -2147483648;
   }
   i4 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 4;
   if (!(HEAP32[i14 >> 2] | 0)) {
    i4 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 8;
   }
  } else {
   HEAP32[i38 >> 2] = 0;
   HEAP32[i39 >> 2] = 0;
   do if ((HEAP32[i24 >> 2] | 0) < 0) {
    HEAP32[i37 >> 2] = 0;
    HEAP32[i43 >> 2] = 1;
   } else {
    HEAP32[i37 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i24 >> 2] | 0) - 1;
    if (!(HEAP32[i37 >> 2] | 0)) {
     HEAP32[i43 >> 2] = 0;
     break;
    }
    i4 = HEAP32[i27 >> 2] | 0;
    HEAP32[i38 >> 2] = (HEAP32[i4 + 20 + (HEAP32[i24 >> 2] << 2) >> 2] & 2147483647) - (HEAP32[i4 + 8 >> 2] | 0);
    HEAP32[i39 >> 2] = (HEAP32[i38 >> 2] | 0) + (HEAP32[i37 >> 2] << 2);
    if (((HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i39 >> 2] | 0) | 0) >= (HEAP32[i21 >> 2] | 0)) {
     HEAP32[i43 >> 2] = 1;
     HEAP32[i21 >> 2] = HEAP32[i39 >> 2];
     break;
    } else {
     HEAP32[i43 >> 2] = 0;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + (HEAP32[i39 >> 2] | 0);
     break;
    }
   } while (0);
   i4 = HEAP32[i22 >> 2] | 0;
   HEAP32[i23 >> 2] = (((HEAP32[i21 >> 2] | 0) + 20 + i4 - 1 | 0) >>> 0) / ((i4 | 0) >>> 0) | 0;
   i4 = _ml_new_data(HEAP32[i26 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0;
   HEAP32[i36 >> 2] = i4;
   if (!i4) {
    i4 = (HEAP32[i10 >> 2] | 0) + 44 | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
    i4 = (HEAP32[i10 >> 2] | 0) + 40 | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
    HEAP32[i9 >> 2] = 0;
    i51 = HEAP32[i9 >> 2] | 0;
    STACKTOP = i8;
    return i51 | 0;
   }
   if ((HEAP32[i24 >> 2] | 0) < 0) {
    HEAP32[i34 >> 2] = HEAP32[i36 >> 2];
    HEAP32[i35 >> 2] = HEAP32[i25 >> 2];
    HEAP32[i30 >> 2] = 0;
    HEAP32[i31 >> 2] = HEAP32[i17 >> 2];
   } else {
    HEAP32[i34 >> 2] = HEAP32[i25 >> 2];
    HEAP32[i35 >> 2] = HEAP32[i36 >> 2];
    HEAP32[i30 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i31 >> 2] = 0;
   }
   HEAP32[i40 >> 2] = HEAP32[(HEAP32[i35 >> 2] | 0) + 20 >> 2];
   HEAP32[i41 >> 2] = HEAP32[(HEAP32[i34 >> 2] | 0) + 20 >> 2];
   HEAP32[i45 >> 2] = HEAP32[(HEAP32[i34 >> 2] | 0) + 8 >> 2];
   HEAP32[i46 >> 2] = HEAP32[(HEAP32[i35 >> 2] | 0) + 8 >> 2];
   HEAP32[i32 >> 2] = HEAP32[(HEAP32[i34 >> 2] | 0) + 24 >> 2];
   HEAP32[i33 >> 2] = HEAP32[(HEAP32[i35 >> 2] | 0) + 24 >> 2];
   if (!(HEAP32[i43 >> 2] | 0)) {
    i35 = (HEAP32[i40 >> 2] | 0) + 8 | 0;
    HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
    i35 = (HEAP32[i40 >> 2] | 0) + 4 | 0;
    HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) - ((HEAP32[i13 >> 2] | 0) + 4);
    i35 = HEAP32[i40 >> 2] | 0;
    HEAP32[i35 + 20 >> 2] = HEAP32[i35 + 8 >> 2];
    if (HEAP32[i15 >> 2] | 0) {
     i35 = (HEAP32[i40 >> 2] | 0) + 20 | 0;
     HEAP32[i35 >> 2] = HEAP32[i35 >> 2] | -2147483648;
    }
    i35 = HEAP32[i40 >> 2] | 0;
    _memmove(i35 + (HEAP32[i35 + 8 >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
    HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + 1;
   }
   if (HEAP32[i37 >> 2] | 0) {
    i35 = (HEAP32[i40 >> 2] | 0) + 8 | 0;
    HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) - (HEAP32[i38 >> 2] | 0);
    i35 = (HEAP32[i40 >> 2] | 0) + 4 | 0;
    HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) - (HEAP32[i39 >> 2] | 0);
    i35 = HEAP32[i40 >> 2] | 0;
    i34 = HEAP32[i41 >> 2] | 0;
    _memmove(i35 + (HEAP32[i35 + 8 >> 2] | 0) | 0, i34 + (HEAP32[i34 + 8 >> 2] | 0) | 0, HEAP32[i38 >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = (HEAP32[(HEAP32[i40 >> 2] | 0) + 8 >> 2] | 0) - (HEAP32[(HEAP32[i41 >> 2] | 0) + 8 >> 2] | 0);
    i34 = (HEAP32[i41 >> 2] | 0) + 8 | 0;
    HEAP32[i34 >> 2] = (HEAP32[i34 >> 2] | 0) + (HEAP32[i38 >> 2] | 0);
    i38 = (HEAP32[i41 >> 2] | 0) + 4 | 0;
    HEAP32[i38 >> 2] = (HEAP32[i38 >> 2] | 0) + (HEAP32[i39 >> 2] | 0);
    HEAP32[i20 >> 2] = HEAP32[i31 >> 2];
    HEAP32[i19 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) >= (HEAP32[i30 >> 2] | 0)) break;
     HEAP32[(HEAP32[i40 >> 2] | 0) + 20 + (HEAP32[i20 >> 2] << 2) >> 2] = (HEAP32[(HEAP32[i27 >> 2] | 0) + 20 + (HEAP32[i19 >> 2] << 2) >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
    }
    HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[i37 >> 2] | 0);
    HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) - (HEAP32[i37 >> 2] | 0);
   }
   if (HEAP32[i43 >> 2] | 0) {
    i20 = (HEAP32[i41 >> 2] | 0) + 8 | 0;
    HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
    i20 = (HEAP32[i41 >> 2] | 0) + 4 | 0;
    HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) - ((HEAP32[i13 >> 2] | 0) + 4);
    i20 = HEAP32[i41 >> 2] | 0;
    HEAP32[i20 + 20 + (HEAP32[i30 >> 2] << 2) >> 2] = HEAP32[i20 + 8 >> 2];
    if (HEAP32[i15 >> 2] | 0) {
     i15 = (HEAP32[i41 >> 2] | 0) + 20 + (HEAP32[i30 >> 2] << 2) | 0;
     HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | -2147483648;
    }
    i15 = HEAP32[i41 >> 2] | 0;
    _memmove(i15 + (HEAP32[i15 + 8 >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
    HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + 1;
   }
   do if ((HEAP32[i24 >> 2] | 0) < 0) {
    HEAP32[i47 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    HEAP32[i48 >> 2] = 0;
   } else {
    HEAP32[i47 >> 2] = 0;
    i13 = HEAP32[i11 >> 2] | 0;
    if (HEAP32[i43 >> 2] | 0) {
     HEAP32[i48 >> 2] = i13 + 2;
     break;
    } else {
     HEAP32[i48 >> 2] = i13 + 1;
     break;
    }
   } while (0);
   HEAP32[(HEAP32[i41 >> 2] | 0) + 16 >> 2] = HEAP32[i30 >> 2];
   HEAP32[(HEAP32[i40 >> 2] | 0) + 16 >> 2] = HEAP32[i31 >> 2];
   if ((HEAP32[i37 >> 2] | 0) != 0 | (HEAP32[i43 >> 2] | 0) != 0) {
    i37 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
    HEAP32[i37 >> 2] = HEAP32[i37 >> 2] | 4;
   }
   if ((HEAP32[i14 >> 2] | 0) == 0 & (HEAP32[i24 >> 2] | 0) >= 0 & (HEAP32[i43 >> 2] | 0) != 0) {
    i43 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
    HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 8;
   }
   _mf_put(HEAP32[i26 >> 2] | 0, HEAP32[i36 >> 2] | 0, 1, 0);
   HEAP32[i44 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2];
   HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] = 0;
   _ml_find_line(HEAP32[i10 >> 2] | 0, 0, 2) | 0;
   HEAP32[i42 >> 2] = (HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0) - 1;
   L97 : while (1) {
    if ((HEAP32[i42 >> 2] | 0) < 0) break;
    HEAP32[i29 >> 2] = (HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[i42 >> 2] << 4);
    HEAP32[i49 >> 2] = HEAP32[(HEAP32[i29 >> 2] | 0) + 12 >> 2];
    i43 = _mf_get(HEAP32[i26 >> 2] | 0, HEAP32[HEAP32[i29 >> 2] >> 2] | 0, 1) | 0;
    HEAP32[i25 >> 2] = i43;
    if (!i43) {
     i7 = 71;
     break;
    }
    HEAP32[i28 >> 2] = HEAP32[(HEAP32[i25 >> 2] | 0) + 20 >> 2];
    if ((HEAPU16[HEAP32[i28 >> 2] >> 1] | 0) != 28788) {
     i7 = 73;
     break;
    }
    if ((HEAPU16[(HEAP32[i28 >> 2] | 0) + 2 >> 1] | 0) < (HEAPU16[(HEAP32[i28 >> 2] | 0) + 4 >> 1] | 0)) {
     i7 = 75;
     break;
    }
    while (1) {
     HEAP32[i36 >> 2] = _ml_new_ptr(HEAP32[i26 >> 2] | 0) | 0;
     if (!(HEAP32[i36 >> 2] | 0)) {
      i7 = 85;
      break L97;
     }
     HEAP32[i50 >> 2] = HEAP32[(HEAP32[i36 >> 2] | 0) + 20 >> 2];
     if ((HEAP32[(HEAP32[i25 >> 2] | 0) + 8 >> 2] | 0) != 1) break;
     _memmove(HEAP32[i50 >> 2] | 0, HEAP32[i28 >> 2] | 0, HEAP32[i22 >> 2] | 0) | 0;
     HEAP16[(HEAP32[i28 >> 2] | 0) + 2 >> 1] = 1;
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[i36 >> 2] | 0) + 8 >> 2];
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + 4 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + 8 >> 2] = 1;
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + 12 >> 2] = 1;
     _mf_put(HEAP32[i26 >> 2] | 0, HEAP32[i25 >> 2] | 0, 1, 0);
     HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
     HEAP32[i28 >> 2] = HEAP32[i50 >> 2];
     HEAP32[(HEAP32[i29 >> 2] | 0) + 12 >> 2] = 0;
     HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) + 1;
    }
    HEAP32[i39 >> 2] = (HEAPU16[(HEAP32[i28 >> 2] | 0) + 2 >> 1] | 0) - (HEAP32[i49 >> 2] | 0) - 1;
    i43 = HEAP32[i50 >> 2] | 0;
    do if (HEAP32[i39 >> 2] | 0) {
     _memmove(i43 + 8 | 0, (HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) | 0, HEAP32[i39 >> 2] << 4 | 0) | 0;
     HEAP16[(HEAP32[i50 >> 2] | 0) + 2 >> 1] = HEAP32[i39 >> 2];
     i24 = (HEAP32[i28 >> 2] | 0) + 2 | 0;
     HEAP16[i24 >> 1] = (HEAPU16[i24 >> 1] | 0) - ((HEAP32[i39 >> 2] | 0) - 1);
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) >> 2] = HEAP32[i46 >> 2];
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) + 4 >> 2] = HEAP32[i31 >> 2];
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) + 12 >> 2] = HEAP32[i33 >> 2];
     if (!(HEAP32[i48 >> 2] | 0)) break;
     HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) + 8 >> 2] = HEAP32[i48 >> 2];
    } else {
     HEAP16[i43 + 2 >> 1] = 1;
     HEAP32[(HEAP32[i50 >> 2] | 0) + 8 >> 2] = HEAP32[i46 >> 2];
     HEAP32[(HEAP32[i50 >> 2] | 0) + 8 + 4 >> 2] = HEAP32[i31 >> 2];
     HEAP32[(HEAP32[i50 >> 2] | 0) + 8 + 12 >> 2] = HEAP32[i33 >> 2];
     HEAP32[(HEAP32[i50 >> 2] | 0) + 8 + 8 >> 2] = HEAP32[i48 >> 2];
    } while (0);
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i49 >> 2] << 4) >> 2] = HEAP32[i45 >> 2];
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i49 >> 2] << 4) + 4 >> 2] = HEAP32[i30 >> 2];
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i49 >> 2] << 4) + 12 >> 2] = HEAP32[i32 >> 2];
    if (HEAP32[i47 >> 2] | 0) HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i49 >> 2] << 4) + 8 >> 2] = HEAP32[i47 >> 2];
    HEAP32[i47 >> 2] = 0;
    HEAP32[i48 >> 2] = 0;
    HEAP32[i31 >> 2] = 0;
    HEAP32[i16 >> 2] = 0;
    while (1) {
     if ((HEAP32[i16 >> 2] | 0) >= (HEAPU16[(HEAP32[i50 >> 2] | 0) + 2 >> 1] | 0)) break;
     HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + (HEAP32[(HEAP32[i50 >> 2] | 0) + 8 + (HEAP32[i16 >> 2] << 4) + 4 >> 2] | 0);
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
    HEAP32[i30 >> 2] = 0;
    HEAP32[i16 >> 2] = 0;
    while (1) {
     if ((HEAP32[i16 >> 2] | 0) >= (HEAPU16[(HEAP32[i28 >> 2] | 0) + 2 >> 1] | 0)) break;
     HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + (HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i16 >> 2] << 4) + 4 >> 2] | 0);
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
    HEAP32[i45 >> 2] = HEAP32[(HEAP32[i25 >> 2] | 0) + 8 >> 2];
    HEAP32[i46 >> 2] = HEAP32[(HEAP32[i36 >> 2] | 0) + 8 >> 2];
    HEAP32[i32 >> 2] = 1;
    HEAP32[i33 >> 2] = 1;
    _mf_put(HEAP32[i26 >> 2] | 0, HEAP32[i25 >> 2] | 0, 1, 0);
    _mf_put(HEAP32[i26 >> 2] | 0, HEAP32[i36 >> 2] | 0, 1, 0);
    HEAP32[i42 >> 2] = (HEAP32[i42 >> 2] | 0) + -1;
   }
   do if ((i7 | 0) == 71) {
    HEAP32[i9 >> 2] = 0;
    i51 = HEAP32[i9 >> 2] | 0;
    STACKTOP = i8;
    return i51 | 0;
   } else if ((i7 | 0) == 73) {
    _iemsg(59542);
    _mf_put(HEAP32[i26 >> 2] | 0, HEAP32[i25 >> 2] | 0, 0, 0);
    HEAP32[i9 >> 2] = 0;
    i51 = HEAP32[i9 >> 2] | 0;
    STACKTOP = i8;
    return i51 | 0;
   } else if ((i7 | 0) == 75) {
    if (((HEAP32[i49 >> 2] | 0) + 1 | 0) < (HEAPU16[(HEAP32[i28 >> 2] | 0) + 2 >> 1] | 0)) {
     i36 = (HEAP32[i28 >> 2] | 0) + 8 | 0;
     i16 = HEAP32[i49 >> 2] | 0;
     i50 = HEAP32[i28 >> 2] | 0;
     _memmove(i36 + (i16 + 2 << 4) | 0, i36 + (i16 + 1 << 4) | 0, (HEAPU16[i50 + 2 >> 1] | 0) - i16 - 1 << 4 | 0) | 0;
    }
    i16 = (HEAP32[i28 >> 2] | 0) + 2 | 0;
    HEAP16[i16 >> 1] = (HEAP16[i16 >> 1] | 0) + 1 << 16 >> 16;
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i49 >> 2] << 4) + 4 >> 2] = HEAP32[i30 >> 2];
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i49 >> 2] << 4) >> 2] = HEAP32[i45 >> 2];
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i49 >> 2] << 4) + 12 >> 2] = HEAP32[i32 >> 2];
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) + 4 >> 2] = HEAP32[i31 >> 2];
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) >> 2] = HEAP32[i46 >> 2];
    HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) + 12 >> 2] = HEAP32[i33 >> 2];
    if (HEAP32[i47 >> 2] | 0) HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + (HEAP32[i49 >> 2] << 4) + 8 >> 2] = HEAP32[i47 >> 2];
    if (HEAP32[i48 >> 2] | 0) HEAP32[(HEAP32[i28 >> 2] | 0) + 8 + ((HEAP32[i49 >> 2] | 0) + 1 << 4) + 8 >> 2] = HEAP32[i48 >> 2];
    _mf_put(HEAP32[i26 >> 2] | 0, HEAP32[i25 >> 2] | 0, 1, 0);
    HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] = (HEAP32[i42 >> 2] | 0) + 1;
    if (!(HEAP32[i44 >> 2] | 0)) break;
    i16 = (HEAP32[i10 >> 2] | 0) + 16 | 0;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
    _ml_lineadd(HEAP32[i10 >> 2] | 0, HEAP32[i44 >> 2] | 0);
    i16 = HEAP32[i10 >> 2] | 0;
    i50 = (HEAP32[i16 + 12 >> 2] | 0) + (HEAP32[i16 + 16 >> 2] << 4) + 8 | 0;
    HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + (HEAP32[i44 >> 2] | 0);
    i50 = (HEAP32[i10 >> 2] | 0) + 16 | 0;
    HEAP32[i50 >> 2] = (HEAP32[i50 >> 2] | 0) + 1;
   } else if ((i7 | 0) == 85) {
    HEAP32[i9 >> 2] = 0;
    i51 = HEAP32[i9 >> 2] | 0;
    STACKTOP = i8;
    return i51 | 0;
   } while (0);
   if ((HEAP32[i42 >> 2] | 0) < 0) {
    _iemsg(59573);
    HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] = 0;
   }
  }
  HEAP32[i9 >> 2] = 1;
  i51 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i51 | 0;
 }
 HEAP32[i9 >> 2] = 0;
 i51 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i8;
 return i51 | 0;
}

function _findmatchlimit(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i7 = i6 + 128 | 0;
 i8 = i6 + 124 | 0;
 i9 = i6 + 120 | 0;
 i10 = i6 + 116 | 0;
 i11 = i6 + 112 | 0;
 i12 = i6 + 108 | 0;
 i13 = i6 + 104 | 0;
 i14 = i6 + 100 | 0;
 i15 = i6 + 96 | 0;
 i16 = i6 + 92 | 0;
 i17 = i6 + 88 | 0;
 i18 = i6 + 84 | 0;
 i19 = i6 + 80 | 0;
 i20 = i6 + 76 | 0;
 i21 = i6 + 72 | 0;
 i22 = i6 + 68 | 0;
 i23 = i6 + 64 | 0;
 i24 = i6 + 56 | 0;
 i25 = i6 + 48 | 0;
 i26 = i6 + 44 | 0;
 i27 = i6 + 40 | 0;
 i28 = i6 + 36 | 0;
 i29 = i6 + 32 | 0;
 i30 = i6 + 28 | 0;
 i31 = i6 + 24 | 0;
 i32 = i6 + 20 | 0;
 i33 = i6 + 16 | 0;
 i34 = i6 + 12 | 0;
 i35 = i6 + 8 | 0;
 i36 = i6 + 4 | 0;
 i37 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i30 >> 2] = 0;
 HEAP32[i32 >> 2] = 2147483647;
 i4 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[26482] = HEAP32[i4 >> 2];
 HEAP32[26483] = HEAP32[i4 + 4 >> 2];
 HEAP32[i18 >> 2] = _ml_get(HEAP32[26482] | 0) | 0;
 HEAP32[i28 >> 2] = (_vim_strchr(HEAP32[26904] | 0, 37) | 0) != 0 & 1;
 HEAP32[i29 >> 2] = (_vim_strchr(HEAP32[26904] | 0, 77) | 0) != 0 & 1;
 do if (HEAP32[i10 >> 2] & 1 | 0) HEAP32[i31 >> 2] = -1; else if (HEAP32[i10 >> 2] & 2 | 0) {
  HEAP32[i31 >> 2] = 1;
  break;
 } else {
  HEAP32[i31 >> 2] = 0;
  break;
 } while (0);
 do if ((HEAP32[i9 >> 2] | 0) == 47 | (HEAP32[i9 >> 2] | 0) == 42 | (HEAP32[i9 >> 2] | 0) == 82) {
  HEAP32[i23 >> 2] = HEAP32[i31 >> 2];
  if ((HEAP32[i9 >> 2] | 0) == 47) HEAP32[i27 >> 2] = 1;
  HEAP32[i15 >> 2] = (HEAP32[i31 >> 2] | 0) == 1 ? 0 : 1;
  HEAP32[i16 >> 2] = (HEAP32[i9 >> 2] | 0) == 82 & 1;
  HEAP32[i9 >> 2] = 0;
 } else {
  if ((HEAP32[i9 >> 2] | 0) != 35 & (HEAP32[i9 >> 2] | 0) != 0) {
   _find_mps_values(i9, i12, i15, 1);
   if (HEAP32[i12 >> 2] | 0) break;
   HEAP32[i7 >> 2] = 0;
   i38 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i38 | 0;
  }
  do if ((HEAP32[i9 >> 2] | 0) == 35) HEAP32[i22 >> 2] = HEAP32[i31 >> 2]; else {
   do if (!(HEAP32[i28 >> 2] | 0)) {
    HEAP32[i19 >> 2] = _skipwhite(HEAP32[i18 >> 2] | 0) | 0;
    if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 35) if ((HEAP32[26483] | 0) <= ((HEAP32[i19 >> 2] | 0) - (HEAP32[i18 >> 2] | 0) | 0)) {
     HEAP32[i19 >> 2] = _skipwhite((HEAP32[i19 >> 2] | 0) + 1 | 0) | 0;
     if (_strncmp(HEAP32[i19 >> 2] | 0, 74738, 2) | 0) if (_strncmp(HEAP32[i19 >> 2] | 0, 74741, 5) | 0) if (_strncmp(HEAP32[i19 >> 2] | 0, 74747, 2) | 0) break;
     HEAP32[i22 >> 2] = 1;
     break;
    }
    i4 = HEAP32[i18 >> 2] | 0;
    i3 = HEAP32[26483] | 0;
    if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0] | 0) == 47) {
     if ((HEAPU8[i4 + (i3 + 1) >> 0] | 0) == 42) {
      HEAP32[i23 >> 2] = 1;
      HEAP32[i15 >> 2] = 0;
      HEAP32[26483] = (HEAP32[26483] | 0) + 1;
      break;
     }
     if ((HEAP32[26483] | 0) <= 0) break;
     if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 1) >> 0] | 0) != 42) break;
     HEAP32[i23 >> 2] = -1;
     HEAP32[i15 >> 2] = 1;
     HEAP32[26483] = (HEAP32[26483] | 0) + -1;
     break;
    }
    if ((HEAPU8[i4 + i3 >> 0] | 0) == 42) {
     if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) + 1) >> 0] | 0) == 47) {
      HEAP32[i23 >> 2] = -1;
      HEAP32[i15 >> 2] = 1;
      break;
     }
     if ((HEAP32[26483] | 0) > 0) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 1) >> 0] | 0) == 47) {
      HEAP32[i23 >> 2] = 1;
      HEAP32[i15 >> 2] = 0;
     }
    }
   } while (0);
   if (!((HEAP32[i22 >> 2] | 0) != 0 | (HEAP32[i23 >> 2] | 0) != 0)) {
    if (HEAP32[26483] | 0 ? (HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0] | 0) == 0 : 0) HEAP32[26483] = (HEAP32[26483] | 0) + -1;
    while (1) {
     HEAP32[i9 >> 2] = HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0];
     if (!(HEAP32[i9 >> 2] | 0)) break;
     _find_mps_values(i9, i12, i15, 0);
     if (HEAP32[i12 >> 2] | 0) break;
     HEAP32[26483] = (HEAP32[26483] | 0) + 1;
    }
    if (HEAP32[i12 >> 2] | 0) {
     if (HEAP32[i29 >> 2] | 0) break;
     HEAP32[i34 >> 2] = 0;
     HEAP32[i33 >> 2] = HEAP32[26483];
     while (1) {
      i3 = (_check_prevcol(HEAP32[i18 >> 2] | 0, HEAP32[i33 >> 2] | 0, 92, i33) | 0) != 0;
      i39 = HEAP32[i34 >> 2] | 0;
      if (!i3) break;
      HEAP32[i34 >> 2] = i39 + 1;
     }
     HEAP32[i30 >> 2] = i39 & 1;
     break;
    } else {
     if (!(HEAP32[i28 >> 2] | 0)) if ((HEAPU8[(_skipwhite(HEAP32[i18 >> 2] | 0) | 0) >> 0] | 0) == 35) {
      HEAP32[i22 >> 2] = 1;
      break;
     }
     HEAP32[i7 >> 2] = 0;
     i38 = HEAP32[i7 >> 2] | 0;
     STACKTOP = i6;
     return i38 | 0;
    }
   }
  } while (0);
  if (HEAP32[i22 >> 2] | 0) {
   if (HEAP32[i8 >> 2] | 0) HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = 1;
   do if ((HEAP32[i9 >> 2] | 0) != 35) {
    HEAP32[i19 >> 2] = _skipwhite((_skipwhite(HEAP32[i18 >> 2] | 0) | 0) + 1 | 0) | 0;
    if (_strncmp(HEAP32[i19 >> 2] | 0, 74738, 2) | 0) if (_strncmp(HEAP32[i19 >> 2] | 0, 74747, 2) | 0) {
     if (!(_strncmp(HEAP32[i19 >> 2] | 0, 74741, 5) | 0)) {
      HEAP32[i22 >> 2] = -1;
      break;
     }
     HEAP32[i7 >> 2] = 0;
     i38 = HEAP32[i7 >> 2] | 0;
     STACKTOP = i6;
     return i38 | 0;
    }
    HEAP32[i22 >> 2] = 1;
   } while (0);
   HEAP32[26483] = 0;
   L85 : while (1) {
    if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
     i5 = 89;
     break;
    }
    i3 = HEAP32[26482] | 0;
    if ((HEAP32[i22 >> 2] | 0) > 0) {
     if ((i3 | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) {
      i5 = 89;
      break;
     }
    } else if ((i3 | 0) == 1) {
     i5 = 89;
     break;
    }
    HEAP32[26482] = (HEAP32[26482] | 0) + (HEAP32[i22 >> 2] | 0);
    HEAP32[i18 >> 2] = _ml_get(HEAP32[26482] | 0) | 0;
    _line_breakcheck();
    HEAP32[i19 >> 2] = _skipwhite(HEAP32[i18 >> 2] | 0) | 0;
    if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 35) continue;
    HEAP32[26483] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
    HEAP32[i19 >> 2] = _skipwhite((HEAP32[i19 >> 2] | 0) + 1 | 0) | 0;
    i3 = (HEAP32[i22 >> 2] | 0) > 0;
    i4 = (_strncmp(HEAP32[i19 >> 2] | 0, 74738, 2) | 0) == 0;
    do if (i3) {
     if (i4) {
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
      break;
     }
     if (!(_strncmp(HEAP32[i19 >> 2] | 0, 74747, 2) | 0)) if (!(HEAP32[i14 >> 2] | 0)) {
      i5 = 73;
      break L85;
     } else break;
     if (!(_strncmp(HEAP32[i19 >> 2] | 0, 74741, 5) | 0)) {
      if (!(HEAP32[i14 >> 2] | 0)) {
       i5 = 76;
       break L85;
      }
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
     }
    } else {
     if (i4) {
      if (!(HEAP32[i14 >> 2] | 0)) {
       i5 = 80;
       break L85;
      }
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
      break;
     }
     if ((HEAP32[i9 >> 2] | 0) == 35) if (!(_strncmp(HEAP32[i19 >> 2] | 0, 74747, 2) | 0)) if (!(HEAP32[i14 >> 2] | 0)) {
      i5 = 85;
      break L85;
     } else break;
     if (!(_strncmp(HEAP32[i19 >> 2] | 0, 74741, 5) | 0)) HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
    } while (0);
   }
   if ((i5 | 0) == 73) {
    HEAP32[i7 >> 2] = 105928;
    i38 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i38 | 0;
   } else if ((i5 | 0) == 76) {
    HEAP32[i7 >> 2] = 105928;
    i38 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i38 | 0;
   } else if ((i5 | 0) == 80) {
    HEAP32[i7 >> 2] = 105928;
    i38 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i38 | 0;
   } else if ((i5 | 0) == 85) {
    HEAP32[i7 >> 2] = 105928;
    i38 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i38 | 0;
   } else if ((i5 | 0) == 89) {
    HEAP32[i7 >> 2] = 0;
    i38 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i38 | 0;
   }
  }
 } while (0);
 HEAP32[i20 >> 2] = -1;
 HEAP32[i25 >> 2] = 2;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 if ((HEAP32[i15 >> 2] | 0) != 0 & (HEAP32[i23 >> 2] | 0) != 0) HEAP32[i32 >> 2] = _check_linecomment(HEAP32[i18 >> 2] | 0) | 0;
 L131 : while (1) {
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  do if (HEAP32[i15 >> 2] | 0) {
   if (HEAP32[26483] | 0) {
    HEAP32[26483] = (HEAP32[26483] | 0) + -1;
    break;
   }
   if ((HEAP32[26482] | 0) == 1) break L131;
   HEAP32[26482] = (HEAP32[26482] | 0) + -1;
   if ((HEAP32[i11 >> 2] | 0) > 0) {
    i22 = (HEAP32[i26 >> 2] | 0) + 1 | 0;
    HEAP32[i26 >> 2] = i22;
    if ((i22 | 0) > (HEAP32[i11 >> 2] | 0)) break L131;
   }
   HEAP32[i18 >> 2] = _ml_get(HEAP32[26482] | 0) | 0;
   HEAP32[26483] = _strlen(HEAP32[i18 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = -1;
   _line_breakcheck();
   if (HEAP32[i23 >> 2] | 0) HEAP32[i32 >> 2] = _check_linecomment(HEAP32[i18 >> 2] | 0) | 0;
  } else {
   if (HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0] | 0) {
    HEAP32[26483] = (HEAP32[26483] | 0) + 1;
    break;
   }
   if ((HEAP32[26482] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) break L131;
   HEAP32[26482] = (HEAP32[26482] | 0) + 1;
   if (HEAP32[i11 >> 2] | 0) {
    i22 = HEAP32[i26 >> 2] | 0;
    HEAP32[i26 >> 2] = i22 + 1;
    if ((i22 | 0) > (HEAP32[i11 >> 2] | 0)) break L131;
   }
   HEAP32[i18 >> 2] = _ml_get(HEAP32[26482] | 0) | 0;
   HEAP32[26483] = 0;
   HEAP32[i20 >> 2] = -1;
   _line_breakcheck();
  } while (0);
  if (!(HEAP32[26483] | 0)) if (HEAP32[i10 >> 2] & 4 | 0) {
   if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) == 123) {
    i5 = 112;
    break;
   }
   if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) == 125) {
    i5 = 112;
    break;
   }
  }
  if (HEAP32[i23 >> 2] | 0) {
   L160 : do if ((HEAP32[i23 >> 2] | 0) == 1) {
    if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0] | 0) == 42) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) + 1) >> 0] | 0) == 47) {
     i5 = 118;
     break L131;
    }
   } else {
    if (!(HEAP32[26483] | 0)) continue L131;
    i22 = HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 1) >> 0] | 0;
    if (HEAP32[i16 >> 2] | 0) {
     if ((i22 | 0) != 82) break;
     if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0] | 0) != 34) break;
     if (!(_vim_strchr((HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) + 1 | 0, 40) | 0)) break;
     if (!(_find_rawstring_end(HEAP32[i18 >> 2] | 0, 105928, (HEAP32[i14 >> 2] | 0) > 0 ? i24 : (HEAP32[26881] | 0) + 24 | 0) | 0)) {
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
      HEAP32[i24 >> 2] = HEAP32[26482];
      HEAP32[i24 + 4 >> 2] = HEAP32[26483];
      i8 = i24 + 4 | 0;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     }
     HEAP32[i18 >> 2] = _ml_get(HEAP32[26482] | 0) | 0;
     break;
    }
    do if ((i22 | 0) == 47) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0] | 0) == 42) {
     if ((HEAP32[26483] | 0) != 1) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 2) >> 0] | 0) == 42) break;
     if ((HEAP32[26483] | 0) < (HEAP32[i32 >> 2] | 0)) {
      HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
      HEAP32[i24 >> 2] = HEAP32[26482];
      HEAP32[i24 + 4 >> 2] = HEAP32[26483];
      i8 = i24 + 4 | 0;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
      break L160;
     }
    } while (0);
    if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 1) >> 0] | 0) == 42) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0] | 0) == 47) {
     if ((HEAP32[i14 >> 2] | 0) > 0) {
      i5 = 137;
      break L131;
     }
     if ((HEAP32[26483] | 0) > 1) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 2) >> 0] | 0) == 47) if ((HEAP32[26483] | 0) <= (HEAP32[i32 >> 2] | 0)) {
      i5 = 141;
      break L131;
     }
     if (!(HEAP32[i27 >> 2] | 0)) {
      i5 = 144;
      break L131;
     }
     continue L131;
    }
   } while (0);
   continue;
  }
  if (HEAP32[i28 >> 2] | 0) HEAP32[i20 >> 2] = 0; else if ((HEAP32[i20 >> 2] | 0) == -1) {
   HEAP32[i21 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i19 >> 2] = HEAP32[i18 >> 2];
   while (1) {
    if (!(HEAP8[HEAP32[i19 >> 2] >> 0] | 0)) break;
    if ((HEAP32[i19 >> 2] | 0) == ((HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) + (HEAP32[i15 >> 2] | 0) | 0)) HEAP32[i21 >> 2] = HEAP32[i20 >> 2] & 1;
    do if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 34) {
     if ((HEAP32[i19 >> 2] | 0) != (HEAP32[i18 >> 2] | 0)) if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + -1 >> 0] | 0) == 39) if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + 1 >> 0] | 0) == 39) break;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
    } while (0);
    if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 92) if (HEAPU8[(HEAP32[i19 >> 2] | 0) + 1 >> 0] | 0) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
   HEAP32[i20 >> 2] = HEAP32[i20 >> 2] & 1;
   if (!(HEAP32[i20 >> 2] | 0)) {
    HEAP32[i17 >> 2] = 0;
    do if ((HEAPU8[(HEAP32[i19 >> 2] | 0) + -1 >> 0] | 0) == 92) {
     HEAP32[i20 >> 2] = 1;
     if ((HEAP32[i25 >> 2] | 0) == 2) {
      HEAP32[i17 >> 2] = 1;
      HEAP32[i25 >> 2] = 1;
      break;
     }
     if (HEAP32[i15 >> 2] | 0) HEAP32[i17 >> 2] = 1;
    } while (0);
    if ((HEAP32[26482] | 0) > 1) {
     HEAP32[i19 >> 2] = _ml_get((HEAP32[26482] | 0) - 1 | 0) | 0;
     do if (HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) {
      i22 = HEAP32[i19 >> 2] | 0;
      if ((HEAPU8[i22 + (_strlen(HEAP32[i19 >> 2] | 0) | 0) + -1 >> 0] | 0) == 92) {
       HEAP32[i20 >> 2] = 1;
       if ((HEAP32[i25 >> 2] | 0) == 2) {
        HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
        if (!(HEAP32[i17 >> 2] | 0)) break;
        HEAP32[i25 >> 2] = 1;
        break;
       } else {
        if (HEAP32[i15 >> 2] | 0) break;
        HEAP32[i17 >> 2] = 1;
        break;
       }
      }
     } while (0);
     HEAP32[i18 >> 2] = _ml_get(HEAP32[26482] | 0) | 0;
    }
   }
  }
  if ((HEAP32[i25 >> 2] | 0) == 2) HEAP32[i25 >> 2] = 0;
  HEAP32[i13 >> 2] = HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[26483] | 0) >> 0];
  L238 : do switch (HEAP32[i13 >> 2] | 0) {
  case 0:
   {
    if (HEAP32[26483] | 0) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 1) >> 0] | 0) == 92) break L238;
    HEAP32[i17 >> 2] = 0;
    HEAP32[i25 >> 2] = 0;
    break;
   }
  case 34:
   {
    if (HEAP32[i20 >> 2] | 0) {
     HEAP32[i35 >> 2] = (HEAP32[26483] | 0) - 1;
     while (1) {
      if ((HEAP32[i35 >> 2] | 0) < 0) break;
      if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + (HEAP32[i35 >> 2] | 0) >> 0] | 0) != 92) break;
      HEAP32[i35 >> 2] = (HEAP32[i35 >> 2] | 0) + -1;
     }
     if (!((HEAP32[26483] | 0) - 1 - (HEAP32[i35 >> 2] | 0) & 1)) {
      HEAP32[i17 >> 2] = ((HEAP32[i17 >> 2] | 0) != 0 ^ 1) & 1;
      HEAP32[i25 >> 2] = 0;
     }
    }
    break;
   }
  case 39:
   {
    if ((HEAP32[i28 >> 2] | 0) == 0 & (HEAP32[i9 >> 2] | 0) != 39 & (HEAP32[i12 >> 2] | 0) != 39) {
     if (HEAP32[i15 >> 2] | 0) {
      if ((HEAP32[26483] | 0) <= 1) {
       i5 = 206;
       break L238;
      }
      if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 2) >> 0] | 0) == 39) {
       HEAP32[26483] = (HEAP32[26483] | 0) - 2;
       break L238;
      }
      if (!((HEAP32[26483] | 0) > 2 ? (HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 2) >> 0] | 0) == 92 : 0)) {
       i5 = 206;
       break L238;
      }
      if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) - 3) >> 0] | 0) != 39) {
       i5 = 206;
       break L238;
      }
      HEAP32[26483] = (HEAP32[26483] | 0) - 3;
      break L238;
     }
     if (HEAP8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) + 1) >> 0] | 0) {
      if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) + 1) >> 0] | 0) == 92) if (HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) + 2) >> 0] | 0) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) + 3) >> 0] | 0) == 39) {
       HEAP32[26483] = (HEAP32[26483] | 0) + 3;
       break L238;
      }
      if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[26483] | 0) + 2) >> 0] | 0) == 39) HEAP32[26483] = (HEAP32[26483] | 0) + 2; else i5 = 206;
     } else i5 = 206;
    } else i5 = 206;
    break;
   }
  default:
   i5 = 206;
  } while (0);
  do if ((i5 | 0) == 206) {
   i5 = 0;
   if ((HEAP32[i17 >> 2] | 0) == 0 | (HEAP32[i25 >> 2] | 0) == 1) {
    if ((HEAP32[i13 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i13 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) break;
    HEAP32[i37 >> 2] = 0;
    L275 : do if (!(HEAP32[i29 >> 2] | 0)) {
     HEAP32[i36 >> 2] = HEAP32[26483];
     while (1) {
      if (!(_check_prevcol(HEAP32[i18 >> 2] | 0, HEAP32[i36 >> 2] | 0, 92, i36) | 0)) break L275;
      HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + 1;
     }
    } while (0);
    if (!(HEAP32[i29 >> 2] | 0)) if ((HEAP32[i37 >> 2] & 1 | 0) != (HEAP32[i30 >> 2] | 0)) break;
    i22 = HEAP32[i14 >> 2] | 0;
    if ((HEAP32[i13 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
     HEAP32[i14 >> 2] = i22 + 1;
     break;
    }
    if (!i22) {
     i5 = 218;
     break L131;
    }
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
   }
  } while (0);
 }
 if ((i5 | 0) == 112) {
  if ((HEAP32[i14 >> 2] | 0) == 0 ? (HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) == (HEAP32[i12 >> 2] | 0) : 0) {
   HEAP32[i7 >> 2] = 105928;
   i38 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i38 | 0;
  }
 } else if ((i5 | 0) == 118) {
  HEAP32[26483] = (HEAP32[26483] | 0) + 1;
  HEAP32[i7 >> 2] = 105928;
  i38 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i38 | 0;
 } else if ((i5 | 0) == 137) {
  HEAP32[26482] = HEAP32[i24 >> 2];
  HEAP32[26483] = HEAP32[i24 + 4 >> 2];
  i5 = 145;
 } else if ((i5 | 0) == 141) {
  HEAP32[26483] = (HEAP32[26483] | 0) - 2;
  i5 = 145;
 } else if ((i5 | 0) == 144) {
  HEAP32[i7 >> 2] = 0;
  i38 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i38 | 0;
 } else if ((i5 | 0) == 218) {
  HEAP32[i7 >> 2] = 105928;
  i38 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i38 | 0;
 }
 if ((i5 | 0) == 145) {
  HEAP32[i7 >> 2] = 105928;
  i38 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i38 | 0;
 }
 if ((HEAP32[i23 >> 2] | 0) == -1 & (HEAP32[i14 >> 2] | 0) > 0) {
  HEAP32[26482] = HEAP32[i24 >> 2];
  HEAP32[26483] = HEAP32[i24 + 4 >> 2];
  HEAP32[i7 >> 2] = 105928;
  i38 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i38 | 0;
 } else {
  HEAP32[i7 >> 2] = 0;
  i38 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i38 | 0;
 }
 return 0;
}

function _edit(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i5 + 68 | 0;
 i7 = i5 + 64 | 0;
 i8 = i5 + 60 | 0;
 i9 = i5 + 56 | 0;
 i10 = i5 + 52 | 0;
 i11 = i5 + 48 | 0;
 i12 = i5 + 44 | 0;
 i13 = i5 + 40 | 0;
 i14 = i5 + 36 | 0;
 i15 = i5 + 32 | 0;
 i16 = i5 + 28 | 0;
 i17 = i5 + 24 | 0;
 i18 = i5 + 20 | 0;
 i19 = i5 + 16 | 0;
 i20 = i5 + 8 | 0;
 i21 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i15 >> 2] = 1;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i18 >> 2] = 80;
 HEAP32[i19 >> 2] = 0;
 HEAP32[25197] = HEAP32[26806];
 _check_for_delay(1);
 HEAP32[259] = 1;
 if (HEAP32[26784] | 0) {
  _emsg(93591) | 0;
  HEAP32[i6 >> 2] = 0;
  i22 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i22 | 0;
 }
 do if ((HEAP32[i7 >> 2] | 0) != 114 & (HEAP32[i7 >> 2] | 0) != 118) {
  i3 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i20 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  _apply_autocmds(59, 0, 0, 0, HEAP32[26773] | 0) | 0;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[i20 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) == (HEAP32[i20 + 4 >> 2] | 0)) break;
  if ((HEAP32[i20 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
   HEAP32[i21 >> 2] = HEAP32[10180];
   i3 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i3 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
   HEAP32[10180] = 16;
   _check_cursor_col();
   HEAP32[10180] = HEAP32[i21 >> 2];
  }
 } while (0);
 if (HEAP32[27120] | 0) {
  HEAP32[27122] = HEAP32[27120];
  HEAP32[27123] = HEAP32[27121];
 } else {
  i21 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[27122] = HEAP32[i21 >> 2];
  HEAP32[27123] = HEAP32[i21 + 4 >> 2];
  if (HEAP32[i8 >> 2] | 0) HEAP32[27123] = 0;
 }
 HEAP32[25198] = _linetabsize(_ml_get_curline() | 0) | 0;
 HEAP32[25199] = 2147483647;
 if (!(HEAP32[26791] | 0)) HEAP32[26792] = 0;
 do if ((HEAP32[i7 >> 2] | 0) != 0 & (HEAP32[26806] | 0) == 0) {
  _ResetRedobuff();
  _AppendNumberToRedobuff(HEAP32[i9 >> 2] | 0);
  if ((HEAP32[i7 >> 2] | 0) == -21328) _AppendCharToRedobuff(97); else _AppendCharToRedobuff(HEAP32[i7 >> 2] | 0);
  if ((HEAP32[i7 >> 2] | 0) == 103) {
   _AppendCharToRedobuff(73);
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 114) HEAP32[i9 >> 2] = 1;
 } while (0);
 if ((HEAP32[i7 >> 2] | 0) == 82) HEAP32[10180] = 80; else HEAP32[10180] = 16;
 HEAP32[27160] = 0;
 _curs_columns(1);
 if ((HEAP32[(HEAP32[26773] | 0) + 552 >> 2] | 0) == 1) HEAP32[10180] = HEAP32[10180] | 32;
 _setmouse();
 if (!(HEAP32[26915] | 0)) _out_str(HEAP32[26593] | 0);
 if (HEAP32[26806] | 0) if (_stuff_empty() | 0) {
  if (HEAP32[27120] | 0) HEAP32[27126] = 0; else HEAP32[27126] = 1;
  HEAP32[26806] = 0;
  _validate_virtcol();
  _update_curswant();
  if (HEAP32[26807] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[25200] | 0)) i4 = 37; else i4 = 36; else i4 = 36;
  if ((i4 | 0) == 36) if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0)) i4 = 37;
  if ((i4 | 0) == 37) {
   i8 = _ml_get_curline() | 0;
   i21 = i8 + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) | 0;
   HEAP32[i11 >> 2] = i21;
   if (HEAPU8[i21 >> 0] | 0) if (!(HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0)) {
    i21 = (HEAP32[26881] | 0) + 24 + 4 | 0;
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
   }
  }
  HEAP32[26807] = 0;
 } else i4 = 41; else i4 = 41;
 if ((i4 | 0) == 41) HEAP32[27126] = 0;
 HEAP32[26843] = 0;
 HEAP32[25201] = 1;
 HEAP32[27120] = 0;
 HEAP32[i14 >> 2] = 0;
 if ((HEAP32[26988] | 0) != 0 & (HEAP32[26809] | 0) == 0) HEAP32[i14 >> 2] = _showmode() | 0;
 if ((HEAP32[26883] | 0) == 0 & (HEAP32[25197] | 0) == 0) {
  i21 = HEAP32[i14 >> 2] | 0;
  _change_warning((i21 | 0) == 0 ? 0 : i21 + 1 | 0);
 }
 _ui_cursor_shape();
 HEAP32[i11 >> 2] = _get_inserted() | 0;
 if (!(HEAP32[i11 >> 2] | 0)) HEAP32[25202] = 0; else {
  HEAP32[25202] = _strlen(HEAP32[i11 >> 2] | 0) | 0;
  _vim_free(HEAP32[i11 >> 2] | 0);
 }
 HEAP32[25203] = 0;
 L70 : while (1) {
  if (HEAP32[27126] | 0) HEAP32[i9 >> 2] = 0;
  if (HEAP32[259] | 0) {
   HEAP32[27124] = HEAP32[27122];
   HEAP32[27125] = HEAP32[27123];
  }
  L78 : do if (HEAP32[27160] | 0) HEAP32[i9 >> 2] = 0; else {
   if (!(HEAP32[27126] | 0)) HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
   do if (_stuff_empty() | 0) {
    HEAP32[26738] = 0;
    if (!(HEAP32[26737] | 0)) break;
    _check_timestamps(0) | 0;
   } while (0);
   HEAP32[26710] = 0;
   if (HEAP32[26757] | 0) _gui_mouse_correct();
   do if (HEAP32[(HEAP32[26773] | 0) + 152 >> 2] | 0) {
    if (HEAP32[i15 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) == 0) break;
    if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) != (HEAP32[i16 >> 2] | 0)) break;
    HEAP32[i13 >> 2] = HEAP32[(HEAP32[26881] | 0) + 140 >> 2];
    _validate_cursor_col();
    if ((HEAP32[(HEAP32[26881] | 0) + 140 >> 2] | 0) >= ((HEAP32[i13 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0) | 0)) break;
    if ((HEAP32[(HEAP32[26881] | 0) + 136 >> 2] | 0) != ((HEAP32[(HEAP32[26881] | 0) + 84 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) - 1 - (HEAP32[26971] | 0) | 0)) break;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) break;
    i11 = HEAP32[26881] | 0;
    _set_topline(i11 | 0, (HEAP32[i11 + 68 >> 2] | 0) + 1 | 0);
   } while (0);
   _update_topline();
   HEAP32[i15 >> 2] = 0;
   _validate_cursor();
   _ins_redraw(1);
   if (HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0) _do_check_scrollbind(1);
   if (HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] | 0) _do_check_cursorbind();
   _update_curswant();
   HEAP32[i16 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
   if ((HEAP32[i10 >> 2] | 0) != -24829) HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
   if ((HEAP32[25204] | 0) == 2) HEAP32[25204] = 1; else HEAP32[25204] = 0;
   L112 : do if ((HEAP32[i7 >> 2] | 0) == -21328) HEAP32[i10 >> 2] = -21328; else {
    while (1) {
     HEAP32[i10 >> 2] = _safe_vgetc() | 0;
     if (HEAP32[27160] | 0) break;
     if (!((HEAP32[i10 >> 2] | 0) == -13821 ? 1 : (HEAP32[i10 >> 2] | 0) == -25085)) break L112;
    }
    HEAP32[i9 >> 2] = 0;
    HEAP32[i19 >> 2] = 1;
    break L78;
   } while (0);
   HEAP32[26848] = 1;
   do if ((HEAP32[i10 >> 2] | 0) == 28) {
    _ins_redraw(0);
    HEAP32[26802] = (HEAP32[26802] | 0) + 1;
    HEAP32[26804] = (HEAP32[26804] | 0) + 1;
    HEAP32[i10 >> 2] = _plain_vgetc() | 0;
    HEAP32[26802] = (HEAP32[26802] | 0) + -1;
    HEAP32[26804] = (HEAP32[26804] | 0) + -1;
    i11 = HEAP32[i10 >> 2] | 0;
    if ((HEAP32[i10 >> 2] | 0) != 14 & (HEAP32[i10 >> 2] | 0) != 7 & (HEAP32[i10 >> 2] | 0) != 15) {
     _vungetc(i11);
     HEAP32[i10 >> 2] = 28;
     break;
    }
    if ((i11 | 0) == 7 & (HEAP32[26883] | 0) != 0) continue L70;
    if ((HEAP32[i10 >> 2] | 0) == 15) {
     _ins_ctrl_o();
     HEAP32[26807] = 0;
     HEAP32[i19 >> 2] = 1;
    }
    HEAP32[i9 >> 2] = 0;
    break L78;
   } while (0);
   if ((HEAP32[i10 >> 2] | 0) == 22 | (HEAP32[i10 >> 2] | 0) == 17) {
    _ins_ctrl_v();
    HEAP32[i10 >> 2] = 22;
    continue L70;
   }
   if (_ins_start_select(HEAP32[i10 >> 2] | 0) | 0) continue L70;
   i11 = HEAP32[i10 >> 2] | 0;
   L138 : do if ((i11 | 0) < -14122) {
    L140 : do if ((i11 | 0) < -22525) switch (i11 | 0) {
    case -22773:
     {
      break L138;
      break;
     }
    case -22783:
     {
      i4 = 118;
      break L138;
      break;
     }
    case -25195:
     {
      i4 = 125;
      break L138;
      break;
     }
    case -24317:
    case -24061:
    case -23805:
    case -23549:
    case -23293:
    case -23037:
    case -25853:
     {
      i4 = 128;
      break L138;
      break;
     }
    case -26731:
     {
      i4 = 137;
      break L138;
      break;
     }
    case -22781:
     {
      i4 = 138;
      break L138;
      break;
     }
    case -26917:
     {
      break L140;
      break;
     }
    case -24829:
     {
      _apply_autocmds(29, 0, 0, 0, HEAP32[26773] | 0) | 0;
      HEAP32[26848] = 1;
      break L138;
      break;
     }
    case -22777:
     {
      _ins_scroll();
      break L138;
      break;
     }
    case -22776:
     {
      _ins_horscroll();
      break L138;
      break;
     }
    case -27755:
     {
      if (HEAP32[26698] & 6 | 0) {
       _ins_s_left();
       break L138;
      } else {
       _ins_left((HEAP32[25204] | 0) == 0 & 1);
       break L138;
      }
      break;
     }
    case -29291:
     {
      if (HEAP32[26698] & 6 | 0) {
       _ins_s_right();
       break L138;
      } else {
       _ins_right((HEAP32[25204] | 0) == 0 & 1);
       break L138;
      }
      break;
     }
    case -30059:
     {
      if (HEAP32[26698] & 2 | 0) {
       _ins_pageup();
       break L138;
      } else {
       _ins_up(0);
       break L138;
      }
      break;
     }
    case -25707:
     {
      if (HEAP32[26698] & 2 | 0) {
       _ins_pagedown();
       break L138;
      } else {
       _ins_down(0);
       break L138;
      }
      break;
     }
    default:
     {
      i4 = 164;
      break L138;
     }
    } else switch (i11 | 0) {
    case -17744:
     {
      break L138;
      break;
     }
    case -18173:
    case -17917:
     {
      i4 = 128;
      break L138;
      break;
     }
    case -22525:
     {
      i4 = 137;
      break L138;
      break;
     }
    case -14144:
     {
      i4 = 138;
      break L138;
      break;
     }
    case -14845:
     {
      i4 = 116;
      break L138;
      break;
     }
    case -22013:
     {
      i4 = 142;
      break L138;
      break;
     }
    case -20587:
     {
      i4 = 150;
      break L138;
      break;
     }
    case -20075:
     {
      i4 = 154;
      break L138;
      break;
     }
    case -22269:
     {
      break L140;
      break;
     }
    case -20477:
    case -18795:
     {
      _ins_insert(HEAP32[i18 >> 2] | 0);
      break L138;
      break;
     }
    case -20733:
    case -17515:
     {
      _ins_del();
      _auto_format(0, 1);
      break L138;
      break;
     }
    case -19453:
     {
      _ins_mousescroll(0);
      break L138;
      break;
     }
    case -19709:
     {
      _ins_mousescroll(1);
      break L138;
      break;
     }
    case -19965:
     {
      _ins_mousescroll(-1);
      break L138;
      break;
     }
    case -20221:
     {
      _ins_mousescroll(-2);
      break L138;
      break;
     }
    case -21328:
     {
      _bracketed_paste(0, 0, 0) | 0;
      if ((HEAP32[i7 >> 2] | 0) == -21328) break L78; else break L138;
      break;
     }
    case -17003:
     {
      HEAP32[i10 >> 2] = 9;
      i4 = 156;
      break L138;
      break;
     }
    case -16715:
     {
      HEAP32[i10 >> 2] = 13;
      i4 = 159;
      break L138;
      break;
     }
    default:
     {
      i4 = 164;
      break L138;
     }
    } while (0);
    _ins_s_right();
   } else {
    if ((i11 | 0) < -1277) {
     if ((i11 | 0) < -12797) switch (i11 | 0) {
     case -13131:
      {
       i4 = 150;
       break L138;
       break;
      }
     case -13565:
     case -13309:
     case -13053:
      {
       i4 = 128;
       break L138;
       break;
      }
     case -13821:
      {
       break L138;
       break;
      }
     case -12835:
      {
       i4 = 137;
       break L138;
       break;
      }
     case -14122:
     case -13387:
      {
       i4 = 138;
       break L138;
       break;
      }
     case -13347:
      {
       i4 = 142;
       break L138;
       break;
      }
     case -13643:
      {
       i4 = 154;
       break L138;
       break;
      }
     default:
      {
       i4 = 164;
       break L138;
      }
     }
     if ((i11 | 0) < -12285) switch (i11 | 0) {
     case -12797:
     case -12541:
      {
       i4 = 128;
       break L138;
       break;
      }
     case -12619:
      {
       i4 = 137;
       break L138;
       break;
      }
     case -12651:
     case -12581:
      {
       i4 = 116;
       break L138;
       break;
      }
     default:
      {
       i4 = 164;
       break L138;
      }
     }
     if ((i11 | 0) < -11773) switch (i11 | 0) {
     case -12285:
     case -12029:
      {
       i4 = 128;
       break L138;
       break;
      }
     default:
      {
       i4 = 164;
       break L138;
      }
     }
     if ((i11 | 0) < -11517) switch (i11 | 0) {
     case -11773:
      {
       i4 = 128;
       break L138;
       break;
      }
     default:
      {
       i4 = 164;
       break L138;
      }
     }
     if ((i11 | 0) < -1533) switch (i11 | 0) {
     case -11517:
      {
       i4 = 128;
       break L138;
       break;
      }
     default:
      {
       i4 = 164;
       break L138;
      }
     } else switch (i11 | 0) {
     case -1533:
      {
       i4 = 154;
       break L138;
       break;
      }
     default:
      {
       i4 = 164;
       break L138;
      }
     }
    }
    do switch (i11 | 0) {
    case 3:
     {
      i4 = 99;
      break L138;
      break;
     }
    case 1:
    case 0:
     {
      i4 = 118;
      break L138;
      break;
     }
    case 8:
     {
      i4 = 125;
      break L138;
      break;
     }
    case -1277:
     {
      i4 = 150;
      break L138;
      break;
     }
    case 9:
     {
      i4 = 156;
      break L138;
      break;
     }
    case 10:
    case 13:
     {
      i4 = 159;
      break L138;
      break;
     }
    case 27:
     {
      if (_echeck_abbr(283) | 0) break L138; else {
       i4 = 99;
       break L138;
      }
      break;
     }
    case 26:
     {
      if (!(HEAP32[26883] | 0)) {
       i4 = 165;
       break L138;
      }
      _do_cmdline_cmd(77365) | 0;
      _ui_cursor_shape();
      continue L70;
      break;
     }
    case 15:
     {
      if (_echeck_abbr(271) | 0) break L138;
      _ins_ctrl_o();
      HEAP32[i9 >> 2] = 0;
      break L78;
      break;
     }
    case 18:
     {
      _ins_reg();
      _auto_format(0, 1);
      HEAP32[i17 >> 2] = 0;
      break L138;
      break;
     }
    case 7:
     {
      _ins_ctrl_g();
      break L138;
      break;
     }
    case 30:
     {
      _ins_ctrl_hat();
      break L138;
      break;
     }
    case 20:
    case 4:
     {
      _ins_shift(HEAP32[i10 >> 2] | 0, HEAP32[i12 >> 2] | 0);
      _auto_format(0, 1);
      HEAP32[i17 >> 2] = 0;
      break L138;
      break;
     }
    case 23:
     {
      HEAP32[i15 >> 2] = _ins_bs(HEAP32[i10 >> 2] | 0, 2, i17) | 0;
      _auto_format(0, 1);
      break L138;
      break;
     }
    case 21:
     {
      HEAP32[i15 >> 2] = _ins_bs(HEAP32[i10 >> 2] | 0, 4, i17) | 0;
      _auto_format(0, 1);
      HEAP32[i17 >> 2] = 0;
      break L138;
      break;
     }
    case 12:
     {
      if (!(HEAP32[26883] | 0)) {
       i4 = 165;
       break L138;
      }
      if (_echeck_abbr(268) | 0) break L138; else break L78;
      break;
     }
    case 5:
    case 25:
     {
      HEAP32[i10 >> 2] = _ins_ctrl_ey(HEAP32[i10 >> 2] | 0) | 0;
      break L138;
      break;
     }
    default:
     {
      i4 = 164;
      break L138;
     }
    } while (0);
   } while (0);
   switch (i4 | 0) {
   case 116:
    {
     i4 = 0;
     _stuffcharReadbuff(-12581);
     if (!(HEAP32[26883] | 0)) break L78;
     HEAP32[26843] = 1;
     break L78;
     break;
    }
   case 118:
    {
     i4 = 0;
     if (!((_stuff_inserted(0, 1, (HEAP32[i10 >> 2] | 0) == 1 & 1) | 0) == 0 & (HEAP32[i10 >> 2] | 0) != 1 ^ 1 | (HEAP32[26883] | 0) != 0)) break L78;
     HEAP32[i17 >> 2] = 0;
     break;
    }
   case 125:
    {
     i4 = 0;
     HEAP32[i15 >> 2] = _ins_bs(HEAP32[i10 >> 2] | 0, 1, i17) | 0;
     _auto_format(0, 1);
     break;
    }
   case 128:
    {
     i4 = 0;
     _ins_mouse(HEAP32[i10 >> 2] | 0);
     break;
    }
   case 137:
    {
     i4 = 0;
     _ins_home(HEAP32[i10 >> 2] | 0);
     break;
    }
   case 138:
    {
     i4 = 0;
     _ins_end(HEAP32[i10 >> 2] | 0);
     break;
    }
   case 142:
    {
     i4 = 0;
     _ins_s_left();
     break;
    }
   case 150:
    {
     i4 = 0;
     _ins_pageup();
     break;
    }
   case 154:
    {
     i4 = 0;
     _ins_pagedown();
     break;
    }
   case 156:
    {
     i4 = 0;
     HEAP32[i17 >> 2] = 0;
     if (_ins_tab() | 0) {
      i4 = 165;
      break;
     }
     _auto_format(0, 1);
     break;
    }
   case 159:
    {
     i4 = 0;
     if (!((_ins_eol(HEAP32[i10 >> 2] | 0) | 0) != 0 | (HEAP32[26883] | 0) != 0)) break L78;
     _auto_format(0, 0);
     HEAP32[i17 >> 2] = 0;
     break;
    }
   case 164:
    {
     i4 = 0;
     if ((HEAP32[i10 >> 2] | 0) == (HEAP32[26725] | 0)) i4 = 99; else i4 = 165;
     break;
    }
   }
   do if ((i4 | 0) == 99) {
    i4 = 0;
    if (!(_goto_im() | 0)) break L78;
    if (HEAP32[26834] | 0) {
     _vgetc() | 0;
     HEAP32[26834] = 0;
     break;
    } else {
     _vim_beep(1024);
     break;
    }
   } else if ((i4 | 0) == 165) {
    i4 = 0;
    do if ((HEAP32[i10 >> 2] | 0) == 32) {
     HEAP32[i17 >> 2] = 1;
     if ((HEAP32[25199] | 0) != 2147483647) break;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27122] | 0)) break;
     HEAP32[25199] = _get_nolist_virtcol() | 0;
    } while (0);
    if (_vim_iswordc(HEAP32[i10 >> 2] | 0) | 0) i4 = 171; else {
     i11 = (_echeck_abbr(HEAP32[i10 >> 2] | 0) | 0) == 0;
     if (i11 & (HEAP32[i10 >> 2] | 0) != 29) i4 = 171;
    }
    if ((i4 | 0) == 171) {
     i4 = 0;
     _insert_special(HEAP32[i10 >> 2] | 0, 0, 0);
    }
    _auto_format(0, 1);
   } while (0);
   if ((HEAP32[i10 >> 2] | 0) != -24829) HEAP32[26848] = 0;
   if (HEAP32[27126] | 0) HEAP32[i17 >> 2] = 0;
   continue L70;
  } while (0);
  if (HEAP32[26807] | 0) if (!(_gchar_cursor() | 0)) HEAP32[25200] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  if (_ins_esc(i9, HEAP32[i7 >> 2] | 0, HEAP32[i19 >> 2] | 0) | 0) break;
 }
 if ((HEAP32[i7 >> 2] | 0) != 114 & (HEAP32[i7 >> 2] | 0) != 118) _apply_autocmds(60, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[26848] = 0;
 HEAP32[i6 >> 2] = (HEAP32[i10 >> 2] | 0) == 15 & 1;
 i22 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i22 | 0;
}

function _do_pending_operator(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 36 | 0;
 i7 = i5 + 32 | 0;
 i8 = i5 + 28 | 0;
 i9 = i5 + 24 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
 if ((HEAP32[27099] | 0) != 0 | (HEAP32[27099] | 0) != 0) if (!(((HEAP32[i8 >> 2] | 0 ? 1 : (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 0) ^ 1) & (HEAP32[26788] | 0) != 0 ^ 1 | (HEAP32[26790] | 0) != 0)) if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) _clip_auto_select();
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 if (!((HEAP32[26796] | 0) != 0 | (HEAP32[26788] | 0) != 0)) {
  STACKTOP = i5;
  return;
 }
 if (!(HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[(HEAP32[i9 >> 2] | 0) + 60 >> 2] = HEAP32[26788];
 i3 = HEAP32[i9 >> 2] | 0;
 do if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) == 86) HEAP32[i3 + 8 >> 2] = 1; else {
  i2 = HEAP32[i9 >> 2] | 0;
  if ((HEAP32[i3 + 12 >> 2] | 0) != 118) {
   if ((HEAP32[i2 + 12 >> 2] | 0) != 22) break;
   HEAP32[26788] = 1;
   i1 = (HEAP32[i9 >> 2] | 0) + 28 | 0;
   HEAP32[27117] = HEAP32[i1 >> 2];
   HEAP32[27118] = HEAP32[i1 + 4 >> 2];
   HEAP32[10179] = 22;
   HEAP32[26789] = 0;
   HEAP32[27119] = 0;
   break;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if ((HEAP32[i2 + 8 >> 2] | 0) == 1) HEAP32[i1 + 20 >> 2] = 0; else if (!(HEAP32[i1 + 8 >> 2] | 0)) {
   i1 = (HEAP32[i9 >> 2] | 0) + 20 | 0;
   HEAP32[i1 >> 2] = ((HEAP32[i1 >> 2] | 0) != 0 ^ 1) & 1;
  }
  HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = 0;
 } while (0);
 if (_vim_strchr(HEAP32[26904] | 0, 121) | 0) i4 = 19; else if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 2) i4 = 19;
 do if ((i4 | 0) == 19) {
  if (HEAP32[26788] | 0) if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0)) {
   if (!(HEAP32[26788] | 0)) break;
   if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != 58) break;
   if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 10) break;
  }
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != 68) {
   i3 = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0;
   i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0;
   i2 = _get_op_char(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
   i14 = _get_extra_op_char(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
   i15 = HEAP32[i6 >> 2] | 0;
   _prep_redo(i3, i1, i2, i14, HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0, HEAP32[i15 + 8 >> 2] | 0, HEAP32[i15 + 12 >> 2] | 0);
   if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != 47) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != 63) {
    if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != 58) break;
    if (!(HEAP32[26844] | 0)) {
     _ResetRedobuff();
     break;
    }
    _AppendToRedobuffLit(HEAP32[26844] | 0, -1);
    _AppendToRedobuff(97581);
    if (!(HEAP32[26844] | 0)) break;
    _vim_free(HEAP32[26844] | 0);
    HEAP32[26844] = 0;
    break;
   }
   if (!(_vim_strchr(HEAP32[26904] | 0, 114) | 0)) _AppendToRedobuffLit(HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] | 0, -1);
   _AppendToRedobuff(97581);
  }
 } while (0);
 do if (HEAP32[26790] | 0) {
  i15 = (HEAP32[i9 >> 2] | 0) + 28 | 0;
  i14 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  i14 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + ((HEAP32[26067] | 0) - 1);
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
  HEAP32[10179] = HEAP32[26068];
  if ((HEAP32[26069] | 0) == 2147483647 | (HEAP32[10179] | 0) == 118) {
   do if ((HEAP32[10179] | 0) == 118) if ((HEAP32[26067] | 0) <= 1) {
    _validate_virtcol();
    i14 = HEAP32[26881] | 0;
    HEAP32[i14 + 32 >> 2] = (HEAP32[i14 + 132 >> 2] | 0) + (HEAP32[26069] | 0) - 1;
    break;
   } else {
    HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[26069];
    break;
   } else HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647; while (0);
   _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
  }
  HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] = HEAP32[26070];
  if (HEAP32[26070] | 0) {
   HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = HEAP32[26070];
   break;
  } else {
   HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = 1;
   break;
  }
 } else if (HEAP32[26788] | 0) {
  if (!(HEAP32[i8 >> 2] | 0)) {
   i14 = (HEAP32[26773] | 0) + 396 | 0;
   HEAP32[i14 >> 2] = HEAP32[27117];
   HEAP32[i14 + 4 >> 2] = HEAP32[27118];
   i14 = (HEAP32[26773] | 0) + 396 + 8 | 0;
   i15 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i14 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[(HEAP32[26773] | 0) + 396 + 16 >> 2] = HEAP32[10179];
   if (HEAP32[26071] | 0) {
    HEAP32[(HEAP32[26773] | 0) + 396 + 16 >> 2] = HEAP32[26071];
    HEAP32[26071] = 0;
   }
   HEAP32[(HEAP32[26773] | 0) + 396 + 20 >> 2] = HEAP32[(HEAP32[26881] | 0) + 32 >> 2];
  }
  if ((HEAP32[26789] | 0) != 0 & (HEAP32[10179] | 0) == 86) if ((HEAP32[HEAP32[HEAP32[i6 >> 2] >> 2] >> 2] | 0) != 1) {
   if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[27117] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i4 = 58; else i4 = 59; else if ((HEAP32[27118] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i4 = 58; else i4 = 59;
   if ((i4 | 0) == 58) {
    HEAP32[27118] = 0;
    i15 = _strlen(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) | 0;
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = i15;
   } else if ((i4 | 0) == 59) {
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
    HEAP32[27118] = _strlen(_ml_get(HEAP32[27117] | 0) | 0) | 0;
   }
   HEAP32[10179] = 118;
  } else i4 = 61; else i4 = 61;
  if ((i4 | 0) == 61) if ((HEAP32[10179] | 0) == 118) _unadjust_for_sel() | 0;
  i15 = (HEAP32[i9 >> 2] | 0) + 28 | 0;
  HEAP32[i15 >> 2] = HEAP32[27117];
  HEAP32[i15 + 4 >> 2] = HEAP32[27118];
  if ((HEAP32[10179] | 0) == 86) HEAP32[(HEAP32[i9 >> 2] | 0) + 28 + 4 >> 2] = 0;
 } while (0);
 i15 = (HEAP32[i9 >> 2] | 0) + 28 | 0;
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[i15 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i4 = 68; else i4 = 69; else if ((HEAP32[i15 + 4 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i4 = 68; else i4 = 69;
 if ((i4 | 0) == 68) {
  i15 = (HEAP32[i9 >> 2] | 0) + 36 | 0;
  i14 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  i14 = (HEAP32[26881] | 0) + 24 | 0;
  i15 = (HEAP32[i9 >> 2] | 0) + 28 | 0;
  HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  i15 = (HEAP32[26881] | 0) + 108 | 0;
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] & -5;
 } else if ((i4 | 0) == 69) {
  i15 = HEAP32[i9 >> 2] | 0;
  i14 = i15 + 36 | 0;
  i2 = i15 + 28 | 0;
  HEAP32[i14 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  i2 = (HEAP32[i9 >> 2] | 0) + 28 | 0;
  i14 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i2 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 }
 _check_pos(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0, (HEAP32[i9 >> 2] | 0) + 36 | 0);
 i14 = HEAP32[i9 >> 2] | 0;
 HEAP32[i14 + 52 >> 2] = (HEAP32[i14 + 36 >> 2] | 0) - (HEAP32[i14 + 28 >> 2] | 0) + 1;
 do if ((HEAP32[26788] | 0) != 0 | (HEAP32[26790] | 0) != 0) {
  _get_op_vcol(HEAP32[i9 >> 2] | 0, HEAP32[26069] | 0, 1);
  if (!((HEAP32[26790] | 0) != 0 | (HEAP32[i8 >> 2] | 0) != 0)) {
   HEAP32[26072] = HEAP32[10179];
   do if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) == 2147483647) HEAP32[26073] = 2147483647; else {
    if ((HEAP32[10179] | 0) != 22) {
     i14 = HEAP32[i9 >> 2] | 0;
     _getvcol(HEAP32[26881] | 0, i14 + 36 | 0, 0, 0, i14 + 72 | 0);
    }
    if ((HEAP32[10179] | 0) != 22) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] | 0) > 1) {
     HEAP32[26073] = HEAP32[(HEAP32[i9 >> 2] | 0) + 72 >> 2];
     break;
    }
    if ((HEAP32[10179] | 0) != 22) {
     i14 = HEAP32[i9 >> 2] | 0;
     _getvcol(HEAP32[26881] | 0, i14 + 28 | 0, i14 + 68 | 0, 0, 0);
    }
    i14 = HEAP32[i9 >> 2] | 0;
    HEAP32[26073] = (HEAP32[i14 + 72 >> 2] | 0) - (HEAP32[i14 + 68 >> 2] | 0) + 1;
   } while (0);
   HEAP32[26074] = HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2];
  }
  if (_vim_strchr(HEAP32[26904] | 0, 121) | 0) i4 = 85; else if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 2) i4 = 85;
  if ((i4 | 0) == 85) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 10) if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0)) {
   do if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) == 103) {
    if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) != 110) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) != 78) {
     i4 = 91;
     break;
    }
    i14 = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0;
    i2 = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0;
    i15 = _get_op_char(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
    i1 = _get_extra_op_char(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
    i3 = HEAP32[i6 >> 2] | 0;
    _prep_redo(i14, i2, i15, i1, HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0, HEAP32[i3 + 12 >> 2] | 0);
   } else i4 = 91; while (0);
   if ((i4 | 0) == 91) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != 58) {
    if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 16) i16 = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0; else i16 = 0;
    HEAP32[i13 >> 2] = i16;
    do if ((HEAP32[i13 >> 2] | 0) == -1) HEAP32[i13 >> 2] = 13; else {
     if ((HEAP32[i13 >> 2] | 0) != -2) break;
     HEAP32[i13 >> 2] = 10;
    } while (0);
    i3 = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0;
    i1 = _get_op_char(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
    i15 = _get_extra_op_char(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
    _prep_redo(i3, 0, 0, 118, i1, i15, HEAP32[i13 >> 2] | 0);
   }
   if (!(HEAP32[26790] | 0)) {
    HEAP32[26068] = HEAP32[26072];
    HEAP32[26069] = HEAP32[26073];
    HEAP32[26067] = HEAP32[26074];
    HEAP32[26070] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
    HEAP32[26075] = HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2];
   }
  }
  if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0)) i4 = 103; else if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) == 1) i4 = 103;
  if ((i4 | 0) == 103) HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 1;
  i15 = (HEAP32[i9 >> 2] | 0) + 8 | 0;
  if ((HEAP32[10179] | 0) == 86) HEAP32[i15 >> 2] = 1; else {
   HEAP32[i15 >> 2] = 0;
   if ((HEAP32[10179] | 0) != 22) if (!(HEAPU8[(_ml_get_pos((HEAP32[i9 >> 2] | 0) + 36 | 0) | 0) >> 0] | 0)) {
    HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 0;
    if ((HEAPU8[HEAP32[26975] >> 0] | 0) != 111) if (!(_op_on_lines(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0)) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
     i15 = (HEAP32[i9 >> 2] | 0) + 36 | 0;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     HEAP32[(HEAP32[i9 >> 2] | 0) + 36 + 4 >> 2] = 0;
     i15 = (HEAP32[i9 >> 2] | 0) + 52 | 0;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    }
   }
  }
  HEAP32[26790] = 0;
  if (!(HEAP32[i8 >> 2] | 0)) {
   HEAP32[26788] = 0;
   _setmouse();
   HEAP32[26756] = 0;
   _may_clear_cmdline();
   if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 2) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 10) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 27) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 6) break;
   if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0)) _redraw_curbuf_later(20);
  }
 } while (0);
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 do if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0)) {
  if (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) {
   if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 2) {
    i17 = 0;
    break;
   }
   if (_gchar_pos((HEAP32[i9 >> 2] | 0) + 36 | 0) | 0) {
    i17 = 0;
    break;
   }
  }
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] | 0)) {
   i13 = HEAP32[i9 >> 2] | 0;
   i17 = (HEAP32[i13 + 28 + 4 >> 2] | 0) == (HEAP32[i13 + 36 + 4 >> 2] | 0);
  } else i17 = 0;
 } else i17 = 0; while (0);
 HEAP32[(HEAP32[i9 >> 2] | 0) + 56 >> 2] = i17 & 1;
 if (HEAP32[(HEAP32[i9 >> 2] | 0) + 56 >> 2] | 0) i18 = (_vim_strchr(HEAP32[26904] | 0, 69) | 0) != 0; else i18 = 0;
 HEAP32[i11 >> 2] = i18 & 1;
 do if (HEAP32[(HEAP32[i9 >> 2] | 0) + 60 >> 2] | 0) {
  if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 56 >> 2] | 0)) if (HEAP32[(HEAP32[26773] | 0) + 664 >> 2] | 0) break;
  _redraw_curbuf_later(20);
 } while (0);
 do if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0)) if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 2 | 0) i4 = 143; else if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 36 + 4 >> 2] | 0)) {
  if (HEAP32[(HEAP32[i9 >> 2] | 0) + 60 >> 2] | 0) if ((HEAPU8[HEAP32[26975] >> 0] | 0) != 111) {
   i4 = 143;
   break;
  }
  if (HEAP32[(HEAP32[i9 >> 2] | 0) + 64 >> 2] | 0) i4 = 143; else if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] | 0) > 1) {
   HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] = 1;
   i18 = (HEAP32[i9 >> 2] | 0) + 52 | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
   i18 = (HEAP32[i9 >> 2] | 0) + 36 | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
   i18 = (_inindent(0) | 0) != 0;
   i17 = HEAP32[i9 >> 2] | 0;
   if (i18) {
    HEAP32[i17 + 8 >> 2] = 1;
    break;
   }
   i18 = _strlen(_ml_get(HEAP32[i17 + 36 >> 2] | 0) | 0) | 0;
   HEAP32[(HEAP32[i9 >> 2] | 0) + 36 + 4 >> 2] = i18;
   if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 36 + 4 >> 2] | 0)) break;
   i18 = (HEAP32[i9 >> 2] | 0) + 36 + 4 | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
   HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 1;
  } else i4 = 143;
 } else i4 = 143; else i4 = 143; else i4 = 143; while (0);
 if ((i4 | 0) == 143) HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] = 0;
 L198 : do switch (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) {
 case 5:
 case 4:
  {
   if (HEAP32[(HEAP32[i9 >> 2] | 0) + 60 >> 2] | 0) i19 = HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0; else i19 = 1;
   _op_shift(HEAP32[i9 >> 2] | 0, 1, i19);
   _auto_format(0, 1);
   break;
  }
 case 13:
 case 14:
  {
   if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] | 0) < 2) HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] = 2;
   if (((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + (HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] | 0) - 1 | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
    _beep_flush();
    break L198;
   } else {
    _do_join(HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] | 0, (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 13 & 1, 1, 1, 1) | 0;
    _auto_format(0, 1);
    break L198;
   }
   break;
  }
 case 1:
  {
   HEAP32[27119] = 0;
   if (HEAP32[i11 >> 2] | 0) {
    _vim_beep(16384);
    _CancelRedo();
    break L198;
   }
   _op_delete(HEAP32[i9 >> 2] | 0) | 0;
   if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) == 1) if (_has_format_option(97) | 0) _u_save_cursor() | 0;
   _auto_format(0, 1);
   break;
  }
 case 2:
  {
   if (HEAP32[i11 >> 2] | 0) {
    if (!(HEAP32[i8 >> 2] | 0)) {
     _vim_beep(16384);
     _CancelRedo();
    }
   } else _op_yank(HEAP32[i9 >> 2] | 0, 0, ((HEAP32[i8 >> 2] | 0) != 0 ^ 1) & 1) | 0;
   _check_cursor_col();
   break;
  }
 case 3:
  {
   HEAP32[27119] = 0;
   if (HEAP32[i11 >> 2] | 0) {
    _vim_beep(16384);
    _CancelRedo();
    break L198;
   }
   if ((HEAP32[26883] | 0) == 0 & (HEAP32[27161] | 0) != 0) HEAP32[i12 >> 2] = 0; else HEAP32[i12 >> 2] = HEAP32[26806];
   HEAP32[26806] = 0;
   HEAP32[26796] = 0;
   if (_op_change(HEAP32[i9 >> 2] | 0) | 0) {
    i18 = (HEAP32[i6 >> 2] | 0) + 36 | 0;
    HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 1;
   }
   if (!(HEAP32[26806] | 0)) HEAP32[26806] = HEAP32[i12 >> 2];
   break;
  }
 case 6:
  {
   if (_vim_strchr(HEAP32[26904] | 0, 33) | 0) {
    _AppendToRedobuff(61830);
    i4 = 176;
    break L198;
   } else {
    HEAP32[26837] = 1;
    i4 = 176;
    break L198;
   }
   break;
  }
 case 10:
 case 8:
  {
   i4 = 176;
   break;
  }
 case 15:
 case 12:
 case 11:
 case 7:
  {
   if (HEAP32[i11 >> 2] | 0) {
    _vim_beep(16384);
    _CancelRedo();
   } else _op_tilde(HEAP32[i9 >> 2] | 0);
   _check_cursor_col();
   break;
  }
 case 9:
  {
   if (!(HEAPU8[HEAP32[26919] >> 0] | 0)) if (!(HEAPU8[HEAP32[(HEAP32[26773] | 0) + 644 >> 2] >> 0] | 0)) {
    _op_format(HEAP32[i9 >> 2] | 0, 0);
    break L198;
   }
   _op_colon(HEAP32[i9 >> 2] | 0);
   break;
  }
 case 26:
  {
   _op_format(HEAP32[i9 >> 2] | 0, 1);
   break;
  }
 case 27:
  {
   _op_function(HEAP32[i9 >> 2] | 0);
   break;
  }
 case 18:
 case 17:
  {
   HEAP32[27119] = 0;
   _vim_beep(16384);
   break;
  }
 case 16:
  {
   HEAP32[27119] = 0;
   _vim_beep(16384);
   _CancelRedo();
   break;
  }
 case 29:
 case 28:
  {
   if (HEAP32[i11 >> 2] | 0) {
    _vim_beep(16384);
    _CancelRedo();
   } else {
    HEAP32[26788] = 1;
    _op_addsub(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0, HEAP32[26075] | 0);
    HEAP32[26788] = 0;
   }
   _check_cursor_col();
   break;
  }
 default:
  _clearopbeep(HEAP32[i9 >> 2] | 0);
 } while (0);
 if ((i4 | 0) == 176) _op_colon(HEAP32[i9 >> 2] | 0);
 do if (HEAP32[i8 >> 2] | 0) {
  i4 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i4 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 } else if (!(HEAP32[26996] | 0)) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) == 1) if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0)) {
  if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 4) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 5) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 1) break;
  i4 = HEAP32[i7 >> 2] | 0;
  HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = i4;
  _coladvance(i4) | 0;
 } while (0);
 HEAP32[(HEAP32[i9 >> 2] | 0) + 64 >> 2] = 0;
 _clearop(HEAP32[i9 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _nv_g_cmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 44 | 0;
 i5 = i3 + 40 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 20 | 0;
 i10 = i3 + 16 | 0;
 i11 = i3 + 12 | 0;
 i12 = i3 + 8 | 0;
 i13 = i3 + 4 | 0;
 i14 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[i8 >> 2] = 0;
 i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
 L1 : do if ((i1 | 0) < 60) {
  L3 : do if ((i1 | 0) < -12619) {
   if ((i1 | 0) < -23293) {
    switch (i1 | 0) {
    case -25707:
     {
      i2 = 23;
      break L1;
      break;
     }
    case -30059:
     {
      i2 = 28;
      break L1;
      break;
     }
    case -26731:
     {
      i2 = 35;
      break L1;
      break;
     }
    case -24317:
    case -24061:
    case -23805:
    case -23549:
    case -25853:
     {
      i2 = 89;
      break L3;
      break;
     }
    case -25195:
     break;
    default:
     {
      i2 = 101;
      break L1;
     }
    }
    HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = 8;
    i2 = 20;
    break L1;
   }
   if ((i1 | 0) >= -13565) switch (i1 | 0) {
   case -13565:
   case -13309:
   case -13053:
   case -12797:
    {
     i2 = 89;
     break L3;
     break;
    }
   case -13387:
    {
     break L3;
     break;
    }
   default:
    {
     i2 = 101;
     break L1;
    }
   }
   if ((i1 | 0) < -14144) switch (i1 | 0) {
   case -23293:
   case -23037:
    {
     i2 = 89;
     break L3;
     break;
    }
   default:
    {
     i2 = 101;
     break L1;
    }
   }
   switch (i1 | 0) {
   case -14144:
    {
     break L3;
     break;
    }
   case -13821:
    break;
   default:
    {
     i2 = 101;
     break L1;
    }
   }
   STACKTOP = i3;
   return;
  } else {
   L17 : do if ((i1 | 0) < 24) {
    if ((i1 | 0) < -11773) switch (i1 | 0) {
    case -12619:
     {
      i2 = 35;
      break L1;
      break;
     }
    case -12029:
    case -12541:
    case -12285:
     {
      i2 = 89;
      break L3;
      break;
     }
    default:
     {
      i2 = 101;
      break L1;
     }
    }
    if ((i1 | 0) < 1) switch (i1 | 0) {
    case -11773:
    case -11517:
     {
      i2 = 89;
      break L3;
      break;
     }
    default:
     {
      i2 = 101;
      break L1;
     }
    }
    switch (i1 | 0) {
    case 8:
     {
      i2 = 20;
      break L1;
      break;
     }
    case 1:
     {
      break L17;
      break;
     }
    case 7:
     break;
    default:
     {
      i2 = 101;
      break L1;
     }
    }
    _cursor_pos_info(0);
    STACKTOP = i3;
    return;
   } else switch (i1 | 0) {
   case 48:
    {
     i2 = 35;
     break L1;
     break;
    }
   case 29:
   case 35:
   case 42:
    {
     i2 = 70;
     break L1;
     break;
    }
   case 36:
    {
     break L3;
     break;
    }
   case 24:
    {
     break L17;
     break;
    }
   case 38:
    {
     _do_cmdline_cmd(61726) | 0;
     STACKTOP = i3;
     return;
    }
   case 39:
    {
     HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] = 1;
     i2 = 81;
     break L1;
     break;
    }
   case 45:
   case 43:
    {
     if (_checkclearopq(HEAP32[i5 >> 2] | 0) | 0) {
      STACKTOP = i3;
      return;
     }
     i15 = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0;
     _undo_time((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 45 ? 0 - i15 | 0 : i15, 0, 0, 0);
     STACKTOP = i3;
     return;
    }
   default:
    {
     i2 = 101;
     break L1;
    }
   } while (0);
   if (HEAP32[26788] | 0) {
    HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] = 1;
    i15 = HEAP32[i4 >> 2] | 0;
    HEAP32[i15 + 8 >> 2] = HEAP32[i15 + 12 >> 2];
    HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = 0;
    _nv_addsub(HEAP32[i4 >> 2] | 0);
    STACKTOP = i3;
    return;
   } else {
    _clearopbeep(HEAP32[i5 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  } while (0);
  if ((i2 | 0) == 89) {
   HEAP32[26698] = 4;
   i15 = HEAP32[i4 >> 2] | 0;
   _do_mouse(HEAP32[i5 >> 2] | 0, HEAP32[i15 + 12 >> 2] | 0, -1, HEAP32[i15 + 28 >> 2] | 0, 0) | 0;
   STACKTOP = i3;
   return;
  }
  HEAP32[i12 >> 2] = _curwin_col_off() | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 1;
  if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) if (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) {
   HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) == 1) {
    HEAP32[i13 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
    i15 = HEAP32[i13 >> 2] | 0;
    HEAP32[i14 >> 2] = i15 + (_curwin_col_off2() | 0);
    _validate_virtcol();
    HEAP32[i7 >> 2] = (HEAP32[i13 >> 2] | 0) - 1;
    if ((HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) {
     i15 = HEAP32[i14 >> 2] | 0;
     i16 = Math_imul((((HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0) / (i15 | 0) | 0) + 1 | 0, i15 | 0) | 0;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i16;
    }
    _coladvance(HEAP32[i7 >> 2] | 0) | 0;
    _validate_virtcol();
    i16 = HEAP32[26881] | 0;
    HEAP32[i16 + 32 >> 2] = HEAP32[i16 + 132 >> 2];
    HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 0;
    STACKTOP = i3;
    return;
   } else {
    if (_nv_screengo(HEAP32[i5 >> 2] | 0, 1, (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0) | 0) {
     STACKTOP = i3;
     return;
    }
    _clearopbeep(HEAP32[i5 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  }
  i16 = HEAP32[26881] | 0;
  HEAP32[i7 >> 2] = (HEAP32[i16 + 76 >> 2] | 0) + (HEAP32[i16 + 100 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) - 1;
  _coladvance(HEAP32[i7 >> 2] | 0) | 0;
  _validate_virtcol();
  i16 = HEAP32[26881] | 0;
  HEAP32[i16 + 32 >> 2] = HEAP32[i16 + 132 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 0;
  STACKTOP = i3;
  return;
 } else {
  do switch (i1 | 0) {
  case 72:
  case 104:
   {
    i2 = 20;
    break L1;
    break;
   }
  case 106:
   {
    i2 = 23;
    break L1;
    break;
   }
  case 107:
   {
    i2 = 28;
    break L1;
    break;
   }
  case 109:
   {
    i2 = 35;
    break L1;
    break;
   }
  case 93:
  case 163:
   {
    i2 = 70;
    break L1;
    break;
   }
  case 96:
   {
    i2 = 81;
    break L1;
    break;
   }
  case 118:
   {
    if (_checkclearop(HEAP32[i5 >> 2] | 0) | 0) {
     STACKTOP = i3;
     return;
    }
    if (HEAP32[(HEAP32[26773] | 0) + 396 >> 2] | 0) if ((HEAP32[(HEAP32[26773] | 0) + 396 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) if (HEAP32[(HEAP32[26773] | 0) + 396 + 8 >> 2] | 0) {
     if (HEAP32[26788] | 0) {
      HEAP32[i7 >> 2] = HEAP32[10179];
      HEAP32[10179] = HEAP32[(HEAP32[26773] | 0) + 396 + 16 >> 2];
      HEAP32[(HEAP32[26773] | 0) + 396 + 16 >> 2] = HEAP32[i7 >> 2];
      HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 32 >> 2];
      HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[(HEAP32[26773] | 0) + 396 + 20 >> 2];
      HEAP32[(HEAP32[26773] | 0) + 396 + 20 >> 2] = HEAP32[i7 >> 2];
      i16 = (HEAP32[26773] | 0) + 396 + 8 | 0;
      HEAP32[i6 >> 2] = HEAP32[i16 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      i16 = (HEAP32[26773] | 0) + 396 + 8 | 0;
      i15 = (HEAP32[26881] | 0) + 24 | 0;
      HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
      HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
      i15 = (HEAP32[26881] | 0) + 24 | 0;
      i16 = (HEAP32[26773] | 0) + 396 | 0;
      HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
      HEAP32[i15 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      i16 = (HEAP32[26773] | 0) + 396 | 0;
      HEAP32[i16 >> 2] = HEAP32[27117];
      HEAP32[i16 + 4 >> 2] = HEAP32[27118];
     } else {
      HEAP32[10179] = HEAP32[(HEAP32[26773] | 0) + 396 + 16 >> 2];
      HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[(HEAP32[26773] | 0) + 396 + 20 >> 2];
      i16 = (HEAP32[26773] | 0) + 396 + 8 | 0;
      HEAP32[i6 >> 2] = HEAP32[i16 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      i16 = (HEAP32[26881] | 0) + 24 | 0;
      i15 = (HEAP32[26773] | 0) + 396 | 0;
      HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
      HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
     }
     HEAP32[26788] = 1;
     HEAP32[27119] = 1;
     _check_cursor();
     i15 = (HEAP32[26881] | 0) + 24 | 0;
     HEAP32[27117] = HEAP32[i15 >> 2];
     HEAP32[27118] = HEAP32[i15 + 4 >> 2];
     i15 = (HEAP32[26881] | 0) + 24 | 0;
     HEAP32[i15 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i15 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     _check_cursor();
     _update_topline();
     if (HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) HEAP32[26789] = 1; else _may_start_select(99);
     _setmouse();
     HEAP32[27105] = 0;
     _redraw_curbuf_later(20);
     _showmode() | 0;
     STACKTOP = i3;
     return;
    }
    _beep_flush();
    STACKTOP = i3;
    return;
   }
  case 86:
   {
    HEAP32[27119] = 0;
    STACKTOP = i3;
    return;
   }
  case 110:
  case 78:
   {
    if (_current_search(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 110 & 1) | 0) {
     STACKTOP = i3;
     return;
    }
    _clearopbeep(HEAP32[i5 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 74:
   {
    _nv_join(HEAP32[i4 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 94:
   {
    HEAP32[i8 >> 2] = 1;
    i2 = 35;
    break L1;
    break;
   }
  case 95:
   {
    HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = 1;
    HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647;
    if (!(_cursor_down((HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0, (HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) == 0 & 1) | 0)) {
     _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
     STACKTOP = i3;
     return;
    }
    HEAP32[i11 >> 2] = _ml_get_curline() | 0;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > 0) if (!(HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) >> 0] | 0)) {
     i15 = (HEAP32[26881] | 0) + 24 + 4 | 0;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    }
    while (1) {
     if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > 0) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) >> 0] | 0) == 32) i17 = 1; else i17 = (HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) >> 0] | 0) == 9; else i17 = 0;
     i18 = HEAP32[26881] | 0;
     if (!i17) break;
     i15 = i18 + 24 + 4 | 0;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    }
    HEAP32[i18 + 36 >> 2] = 1;
    _adjust_for_sel(HEAP32[i4 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 69:
  case 101:
   {
    HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = 0;
    HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 1;
    if (_bckend_word(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 69 & 1, 0) | 0) {
     STACKTOP = i3;
     return;
    }
    _clearopbeep(HEAP32[i5 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 105:
   {
    if (HEAP32[(HEAP32[26773] | 0) + 428 >> 2] | 0) {
     i15 = (HEAP32[26881] | 0) + 24 | 0;
     i16 = (HEAP32[26773] | 0) + 428 | 0;
     HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
     HEAP32[i15 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
     _check_cursor_lnum();
     HEAP32[i7 >> 2] = _strlen(_ml_get_curline() | 0) | 0;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i7 >> 2];
    }
    HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = 105;
    _nv_edit(HEAP32[i4 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 73:
   {
    _beginline(0);
    if (_checkclearopq(HEAP32[i5 >> 2] | 0) | 0) {
     STACKTOP = i3;
     return;
    }
    _invoke_edit(HEAP32[i4 >> 2] | 0, 0, 103, 0);
    STACKTOP = i3;
    return;
   }
  case 115:
   {
    _do_sleep((HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) * 1e3 | 0);
    STACKTOP = i3;
    return;
   }
  case 97:
   {
    _do_ascii(0);
    STACKTOP = i3;
    return;
   }
  case 60:
   {
    _show_sb_text();
    STACKTOP = i3;
    return;
   }
  case 103:
   {
    HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] = 0;
    _nv_goto(HEAP32[i4 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 119:
  case 113:
   {
    i16 = (HEAP32[i5 >> 2] | 0) + 44 | 0;
    i15 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
    HEAP32[i16 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    break;
   }
  case 64:
  case 63:
  case 85:
  case 117:
  case 126:
   break;
  case 68:
  case 100:
   {
    i15 = HEAP32[i4 >> 2] | 0;
    _nv_gd(HEAP32[i5 >> 2] | 0, HEAP32[i15 + 12 >> 2] | 0, HEAP32[i15 + 24 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 80:
  case 112:
   {
    _nv_put(HEAP32[i4 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 81:
   {
    if (_text_locked() | 0) {
     _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
     _text_locked_msg();
     STACKTOP = i3;
     return;
    }
    if (_checkclearopq(HEAP32[i5 >> 2] | 0) | 0) {
     STACKTOP = i3;
     return;
    }
    _do_exmode(1);
    STACKTOP = i3;
    return;
   }
  case 116:
   {
    if (_checkclearop(HEAP32[i5 >> 2] | 0) | 0) {
     STACKTOP = i3;
     return;
    }
    _goto_tabpage(HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
  case 84:
   {
    if (_checkclearop(HEAP32[i5 >> 2] | 0) | 0) {
     STACKTOP = i3;
     return;
    }
    _goto_tabpage(0 - (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0);
    STACKTOP = i3;
    return;
   }
  default:
   {
    i2 = 101;
    break L1;
   }
  } while (0);
  _nv_operator(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 } while (0);
 if ((i2 | 0) == 20) {
  i18 = HEAP32[i4 >> 2] | 0;
  HEAP32[i18 + 8 >> 2] = (HEAP32[i18 + 12 >> 2] | 0) + 14;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] = 1;
  _nv_visual(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 23) {
  i18 = HEAP32[i5 >> 2] | 0;
  if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) HEAP32[i7 >> 2] = _nv_screengo(i18, 1, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0; else {
   HEAP32[i18 + 8 >> 2] = 1;
   HEAP32[i7 >> 2] = _cursor_down(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 0 & 1) | 0;
  }
  if (HEAP32[i7 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
  _clearopbeep(HEAP32[i5 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 28) {
  i18 = HEAP32[i5 >> 2] | 0;
  if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) HEAP32[i7 >> 2] = _nv_screengo(i18, -1, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0; else {
   HEAP32[i18 + 8 >> 2] = 1;
   HEAP32[i7 >> 2] = _cursor_up(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 0 & 1) | 0;
  }
  if (HEAP32[i7 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
  _clearopbeep(HEAP32[i5 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 35) {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 0;
  if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) if (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) {
   i18 = HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0;
   HEAP32[i9 >> 2] = i18 - (_curwin_col_off() | 0);
   i18 = HEAP32[i9 >> 2] | 0;
   HEAP32[i10 >> 2] = i18 + (_curwin_col_off2() | 0);
   _validate_virtcol();
   HEAP32[i7 >> 2] = 0;
   if ((HEAP32[i10 >> 2] | 0) > 0 ? (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0) : 0) {
    i18 = HEAP32[i10 >> 2] | 0;
    i10 = Math_imul(((HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) | 0) / (i18 | 0) | 0, i18 | 0) | 0;
    HEAP32[i7 >> 2] = i10 + (HEAP32[i9 >> 2] | 0);
   }
  } else i2 = 39; else i2 = 39;
  if ((i2 | 0) == 39) HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 76 >> 2];
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 109) {
   i9 = HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0;
   i10 = i9 - (_curwin_col_off() | 0) | 0;
   if ((HEAP32[i7 >> 2] | 0) > 0 ? (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) != 0 : 0) i19 = _curwin_col_off2() | 0; else i19 = 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + ((i10 + i19 | 0) / 2 | 0);
  }
  _coladvance(HEAP32[i7 >> 2] | 0) | 0;
  L197 : do if (HEAP32[i8 >> 2] | 0) do {
   HEAP32[i7 >> 2] = _gchar_cursor() | 0;
   if (!((HEAP32[i7 >> 2] | 0) == 32 | (HEAP32[i7 >> 2] | 0) == 9)) break L197;
  } while ((_oneright() | 0) == 1); while (0);
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 70) {
  _nv_ident(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 81) {
  _nv_gomark(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 101) {
  _clearopbeep(HEAP32[i5 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
}

function _mch_expand_wildcards(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i8 = i7 + 76 | 0;
 i9 = i7 + 72 | 0;
 i10 = i7 + 68 | 0;
 i11 = i7 + 64 | 0;
 i12 = i7 + 60 | 0;
 i13 = i7 + 56 | 0;
 i14 = i7 + 52 | 0;
 i15 = i7 + 48 | 0;
 i16 = i7 + 44 | 0;
 i17 = i7 + 40 | 0;
 i18 = i7 + 36 | 0;
 i19 = i7 + 32 | 0;
 i20 = i7 + 28 | 0;
 i21 = i7 + 24 | 0;
 i22 = i7 + 20 | 0;
 i23 = i7 + 16 | 0;
 i24 = i7 + 12 | 0;
 i25 = i7 + 8 | 0;
 i26 = i7 + 4 | 0;
 i27 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[HEAP32[i11 >> 2] >> 2] = 0;
 HEAP32[HEAP32[i12 >> 2] >> 2] = 0;
 if (!(_have_wildcard(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
  HEAP32[i8 >> 2] = _save_patterns(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
  i28 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i28 | 0;
 }
 L5 : do if ((HEAP32[26783] | 0) != 0 | (HEAP32[26782] | 0) != 0) {
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break L5;
   if (_vim_strchr(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0, 96) | 0) {
    if (_check_restricted() | 0) break;
    if (_check_secure() | 0) break;
   }
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
  HEAP32[i8 >> 2] = 0;
  i28 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i28 | 0;
 } while (0);
 i5 = _vim_tempname(111, 0) | 0;
 HEAP32[i20 >> 2] = i5;
 if (!i5) {
  _emsg(93262) | 0;
  HEAP32[i8 >> 2] = 0;
  i28 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i28 | 0;
 }
 if ((HEAP32[i9 >> 2] | 0) == 1) if ((HEAPU8[HEAP32[HEAP32[i10 >> 2] >> 2] >> 0] | 0 | 0) == 96) {
  i5 = _strlen(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) | 0;
  HEAP32[i15 >> 2] = i5;
  if (i5 >>> 0 > 2) if ((HEAPU8[(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + (HEAP32[i15 >> 2] | 0) + -1 >> 0] | 0 | 0) == 96) HEAP32[i24 >> 2] = 4; else i6 = 18; else i6 = 18;
 } else i6 = 18; else i6 = 18;
 do if ((i6 | 0) == 18) {
  i5 = _strlen(HEAP32[26977] | 0) | 0;
  HEAP32[i15 >> 2] = i5;
  if (i5 >>> 0 >= 3) {
   if (!(_strcmp((HEAP32[26977] | 0) + (HEAP32[i15 >> 2] | 0) + -3 | 0, 72056) | 0)) {
    HEAP32[i24 >> 2] = 1;
    break;
   }
   if (!(_strcmp((HEAP32[26977] | 0) + (HEAP32[i15 >> 2] | 0) + -3 | 0, 72060) | 0)) HEAP32[i24 >> 2] = 3;
  }
 } while (0);
 if (!(HEAP32[i24 >> 2] | 0)) if (_strstr(_gettail(HEAP32[26977] | 0) | 0, 72064) | 0) HEAP32[i24 >> 2] = 2;
 HEAP32[i15 >> 2] = (_strlen(HEAP32[i20 >> 2] | 0) | 0) + 29;
 if ((HEAP32[i24 >> 2] | 0) == 2) {
  i5 = _strlen(72146) | 0;
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + i5;
 }
 HEAP32[i14 >> 2] = 0;
 while (1) {
  i29 = HEAP32[i15 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  HEAP32[i15 >> 2] = i29 + 1;
  HEAP32[i19 >> 2] = 0;
  while (1) {
   if (!(HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0)) break;
   if (_vim_strchr(72067, HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0) | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  }
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 }
 HEAP32[i21 >> 2] = _alloc(i29) | 0;
 if (!(HEAP32[i21 >> 2] | 0)) {
  _vim_free(HEAP32[i20 >> 2] | 0);
  HEAP32[i8 >> 2] = 0;
  i28 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i28 | 0;
 }
 do if ((HEAP32[i24 >> 2] | 0) == 4) {
  _strcpy(HEAP32[i21 >> 2] | 0, 72081) | 0;
  _strcat(HEAP32[i21 >> 2] | 0, (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + 1 | 0) | 0;
  i29 = HEAP32[i21 >> 2] | 0;
  HEAP32[i17 >> 2] = i29 + (_strlen(HEAP32[i21 >> 2] | 0) | 0) + -1;
  i29 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i29 + -1;
  HEAP8[i29 >> 0] = 41;
  while (1) {
   if ((HEAP32[i17 >> 2] | 0) >>> 0 > (HEAP32[i21 >> 2] | 0) >>> 0) if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 32) i30 = 1; else i30 = (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 9; else i30 = 0;
   i31 = HEAP32[i17 >> 2] | 0;
   if (!i30) break;
   HEAP32[i17 >> 2] = i31 + -1;
  }
  if ((HEAPU8[i31 >> 0] | 0 | 0) == 38) {
   HEAP32[i26 >> 2] = 1;
   HEAP8[HEAP32[i17 >> 2] >> 0] = 32;
  }
  _strcat(HEAP32[i21 >> 2] | 0, 72083) | 0;
 } else {
  i29 = HEAP32[i21 >> 2] | 0;
  if (HEAP32[i13 >> 2] & 4 | 0) _strcpy(i29, 72085) | 0; else _strcpy(i29, 72101) | 0;
  if ((HEAP32[i24 >> 2] | 0) == 1) {
   _strcat(HEAP32[i21 >> 2] | 0, 72119) | 0;
   break;
  }
  if ((HEAP32[i24 >> 2] | 0) == 3) {
   _strcat(HEAP32[i21 >> 2] | 0, 72126) | 0;
   break;
  }
  i29 = HEAP32[i21 >> 2] | 0;
  if ((HEAP32[i24 >> 2] | 0) == 2) {
   _strcat(i29, 72146) | 0;
   break;
  } else {
   _strcat(i29, 72137) | 0;
   break;
  }
 } while (0);
 _strcat(HEAP32[i21 >> 2] | 0, HEAP32[i20 >> 2] | 0) | 0;
 L84 : do if ((HEAP32[i24 >> 2] | 0) != 4) {
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break L84;
   HEAP32[i27 >> 2] = 0;
   i31 = HEAP32[i21 >> 2] | 0;
   HEAP32[i17 >> 2] = i31 + (_strlen(HEAP32[i21 >> 2] | 0) | 0);
   i31 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i31 + 1;
   HEAP8[i31 >> 0] = 32;
   HEAP32[i19 >> 2] = 0;
   while (1) {
    if (!(HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0)) break;
    do if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0 | 0) == 96) HEAP32[i27 >> 2] = ((HEAP32[i27 >> 2] | 0) != 0 ^ 1) & 1; else {
     if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0 | 0) == 92) if (HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1) >> 0] | 0 | 0) {
      do if (HEAP32[i27 >> 2] | 0) i6 = 70; else {
       if (_vim_strchr(72067, HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1) >> 0] | 0) | 0) {
        i6 = 70;
        break;
       }
       if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) + 1) >> 0] | 0 | 0) == 96) i6 = 70;
      } while (0);
      if ((i6 | 0) == 70) {
       i6 = 0;
       i31 = HEAP32[i17 >> 2] | 0;
       HEAP32[i17 >> 2] = i31 + 1;
       HEAP8[i31 >> 0] = 92;
      }
      HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
      break;
     }
     if (!(HEAP32[i27 >> 2] | 0)) {
      if (HEAP32[i13 >> 2] & 2048 | 0) if ((HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0 | 0) == 36) break;
      if (_vim_strchr(72067, HEAPU8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0) | 0) {
       i31 = HEAP32[i17 >> 2] | 0;
       HEAP32[i17 >> 2] = i31 + 1;
       HEAP8[i31 >> 0] = 92;
      }
     }
    } while (0);
    i31 = HEAP8[(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0;
    i30 = HEAP32[i17 >> 2] | 0;
    HEAP32[i17 >> 2] = i30 + 1;
    HEAP8[i30 >> 0] = i31;
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
   HEAP8[HEAP32[i17 >> 2] >> 0] = 0;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[i26 >> 2] | 0) _strcat(HEAP32[i21 >> 2] | 0, 72144) | 0;
 if ((HEAP32[i24 >> 2] | 0) != 3 & (HEAP32[i24 >> 2] | 0) == 1) _have_dollars(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = _call_shell(HEAP32[i21 >> 2] | 0, 18) | 0;
 if (HEAP32[i26 >> 2] | 0) _mch_delay(10, 1);
 _vim_free(HEAP32[i21 >> 2] | 0);
 i21 = HEAP32[i20 >> 2] | 0;
 do if (HEAP32[i14 >> 2] | 0) {
  _unlink(i21) | 0;
  _vim_free(HEAP32[i20 >> 2] | 0);
  if (!(HEAP32[i13 >> 2] & 32)) {
   _redraw_later_clear();
   _msg_putchar(10);
   HEAP32[26876] = (HEAP32[10173] | 0) - 1;
   _msg(93888) | 0;
   _msg_start();
  }
  if ((HEAP32[i24 >> 2] | 0) == 4) {
   HEAP32[i8 >> 2] = 0;
   i28 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i28 | 0;
  }
 } else {
  HEAP32[i22 >> 2] = _fopen(i21, 94911) | 0;
  if (!(HEAP32[i22 >> 2] | 0)) {
   if (!(HEAP32[i13 >> 2] & 32)) {
    _msg(93888) | 0;
    _msg_start();
   }
   _vim_free(HEAP32[i20 >> 2] | 0);
   break;
  }
  _fseek(HEAP32[i22 >> 2] | 0, 0, 2) | 0;
  HEAP32[i16 >> 2] = _ftell(HEAP32[i22 >> 2] | 0) | 0;
  _fseek(HEAP32[i22 >> 2] | 0, 0, 0) | 0;
  if ((HEAP32[i16 >> 2] | 0) < 0) HEAP32[i23 >> 2] = 0; else HEAP32[i23 >> 2] = _alloc((HEAP32[i16 >> 2] | 0) + 1 | 0) | 0;
  if (!(HEAP32[i23 >> 2] | 0)) {
   _unlink(HEAP32[i20 >> 2] | 0) | 0;
   _vim_free(HEAP32[i20 >> 2] | 0);
   _fclose(HEAP32[i22 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = 0;
   i28 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i28 | 0;
  }
  HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i14 >> 2] = _fread(HEAP32[i23 >> 2] | 0, 1, HEAP32[i15 >> 2] | 0, HEAP32[i22 >> 2] | 0) | 0;
  _fclose(HEAP32[i22 >> 2] | 0) | 0;
  _unlink(HEAP32[i20 >> 2] | 0) | 0;
  i26 = HEAP32[i20 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) != (HEAP32[i15 >> 2] | 0)) {
   _emsg2(93318, i26) | 0;
   _vim_free(HEAP32[i20 >> 2] | 0);
   _vim_free(HEAP32[i23 >> 2] | 0);
   HEAP32[i8 >> 2] = 0;
   i28 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i28 | 0;
  }
  _vim_free(i26);
  L148 : do if (!(HEAP32[i24 >> 2] | 0)) {
   HEAP8[(HEAP32[i23 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = 10;
   HEAP32[i17 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i14 >> 2] = 0;
   while (1) {
    if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 10) break L148;
    while (1) {
     if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) != 32) i32 = (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) != 10; else i32 = 0;
     i33 = HEAP32[i17 >> 2] | 0;
     if (!i32) break;
     HEAP32[i17 >> 2] = i33 + 1;
    }
    HEAP32[i17 >> 2] = _skipwhite(i33) | 0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   }
  } else {
   if ((HEAP32[i24 >> 2] | 0) == 4 | (HEAP32[i24 >> 2] | 0) == 2) {
    HEAP8[(HEAP32[i23 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = 0;
    HEAP32[i17 >> 2] = HEAP32[i23 >> 2];
    HEAP32[i14 >> 2] = 0;
    while (1) {
     if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) break L148;
     while (1) {
      if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) != 10) i34 = (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) != 0; else i34 = 0;
      i35 = HEAP32[i17 >> 2] | 0;
      if (!i34) break;
      HEAP32[i17 >> 2] = i35 + 1;
     }
     if (HEAPU8[i35 >> 0] | 0 | 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
     HEAP32[i17 >> 2] = _skipwhite(HEAP32[i17 >> 2] | 0) | 0;
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
    }
   }
   HEAP32[i25 >> 2] = 0;
   L177 : do if (!((HEAP32[i24 >> 2] | 0) != 3 | (HEAP32[26307] | 0) != 0)) {
    HEAP8[(HEAP32[i23 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = 0;
    do if (HEAP32[i15 >> 2] | 0) {
     i26 = _strlen(HEAP32[i23 >> 2] | 0) | 0;
     if ((i26 | 0) >= (HEAP32[i15 >> 2] | 0)) break;
     HEAP32[26307] = 1;
     break L177;
    } while (0);
    HEAP32[i25 >> 2] = 1;
   } while (0);
   do if (HEAP32[i15 >> 2] | 0) {
    if (HEAPU8[(HEAP32[i23 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0 | 0) {
     i6 = 129;
     break;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
   } else i6 = 129; while (0);
   if ((i6 | 0) == 129) HEAP8[(HEAP32[i23 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] = 0;
   HEAP32[i14 >> 2] = 0;
   HEAP32[i17 >> 2] = HEAP32[i23 >> 2];
   while (1) {
    if ((HEAP32[i17 >> 2] | 0) >>> 0 >= ((HEAP32[i23 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) >>> 0) break;
    if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) i6 = 134; else if (HEAP32[i25 >> 2] | 0 ? (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 32 : 0) i6 = 134;
    if ((i6 | 0) == 134) {
     i6 = 0;
     HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
     HEAP8[HEAP32[i17 >> 2] >> 0] = 0;
    }
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   }
   if (!(HEAP32[i15 >> 2] | 0)) break;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  } while (0);
  if (!(HEAP32[i14 >> 2] | 0)) {
   _vim_free(HEAP32[i23 >> 2] | 0);
   break;
  }
  HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i14 >> 2];
  i26 = _alloc(HEAP32[i14 >> 2] << 2) | 0;
  HEAP32[HEAP32[i12 >> 2] >> 2] = i26;
  i26 = HEAP32[i23 >> 2] | 0;
  if (!(HEAP32[HEAP32[i12 >> 2] >> 2] | 0)) {
   _vim_free(i26);
   HEAP32[i8 >> 2] = 0;
   i28 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i28 | 0;
  }
  HEAP32[i17 >> 2] = i26;
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[HEAP32[i11 >> 2] >> 2] | 0)) break;
   HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] = HEAP32[i17 >> 2];
   L211 : do if ((HEAP32[i24 >> 2] | 0) == 0 | (HEAP32[i24 >> 2] | 0) == 4 | (HEAP32[i24 >> 2] | 0) == 2) {
    while (1) {
     if (!(HEAP32[i24 >> 2] | 0)) if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 32) i36 = 0; else i6 = 148; else i6 = 148;
     do if ((i6 | 0) == 148) {
      i6 = 0;
      if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 10) {
       i36 = 0;
       break;
      }
      i36 = (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) != 0;
     } while (0);
     i37 = HEAP32[i17 >> 2] | 0;
     if (!i36) break;
     HEAP32[i17 >> 2] = i37 + 1;
    }
    i26 = HEAP32[i17 >> 2] | 0;
    if ((i37 | 0) == ((HEAP32[i23 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0)) {
     HEAP8[i26 >> 0] = 0;
     break;
    } else {
     HEAP32[i17 >> 2] = i26 + 1;
     HEAP8[i26 >> 0] = 0;
     HEAP32[i17 >> 2] = _skipwhite(HEAP32[i17 >> 2] | 0) | 0;
     break;
    }
   } else {
    while (1) {
     i38 = HEAP32[i17 >> 2] | 0;
     if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) break;
     i26 = i38 >>> 0 < ((HEAP32[i23 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) >>> 0;
     HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
     if (!i26) break L211;
    }
    HEAP32[i17 >> 2] = i38 + 1;
   } while (0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
  HEAP32[i19 >> 2] = 0;
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[HEAP32[i11 >> 2] >> 2] | 0)) break;
   if (HEAP32[i13 >> 2] & 4 | 0) i6 = 165; else if ((_mch_getperm(HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) | 0) >= 0) i6 = 165;
   L239 : do if ((i6 | 0) == 165) {
    i6 = 0;
    HEAP32[i18 >> 2] = _mch_isdir(HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) | 0;
    if (HEAP32[i18 >> 2] | 0) if (!(HEAP32[i13 >> 2] & 1)) break;
    if (!(HEAP32[i18 >> 2] | 0)) if (!(HEAP32[i13 >> 2] & 2)) break;
    do if (!(HEAP32[i18 >> 2] | 0)) {
     if (!(HEAP32[i13 >> 2] & 64)) break;
     if (!(_mch_can_exe(HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0, 0, ((HEAP32[i13 >> 2] & 8192 | 0) != 0 ^ 1) & 1) | 0)) break L239;
    } while (0);
    i26 = (_strlen(HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) | 0) + 1 | 0;
    HEAP32[i17 >> 2] = _alloc(i26 + (HEAP32[i18 >> 2] | 0) | 0) | 0;
    if (!(HEAP32[i17 >> 2] | 0)) break;
    _strcpy(HEAP32[i17 >> 2] | 0, HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) | 0;
    if (HEAP32[i18 >> 2] | 0) _add_pathsep(HEAP32[i17 >> 2] | 0);
    i26 = HEAP32[i17 >> 2] | 0;
    i27 = HEAP32[HEAP32[i12 >> 2] >> 2] | 0;
    i31 = HEAP32[i19 >> 2] | 0;
    HEAP32[i19 >> 2] = i31 + 1;
    HEAP32[i27 + (i31 << 2) >> 2] = i26;
   } while (0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
  _vim_free(HEAP32[i23 >> 2] | 0);
  HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i19 >> 2];
  if (!(HEAP32[HEAP32[i11 >> 2] >> 2] | 0)) {
   if (!(HEAP32[HEAP32[i12 >> 2] >> 2] | 0)) break;
   _vim_free(HEAP32[HEAP32[i12 >> 2] >> 2] | 0);
   HEAP32[HEAP32[i12 >> 2] >> 2] = 0;
   break;
  } else {
   HEAP32[i8 >> 2] = 1;
   i28 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i28 | 0;
  }
 } while (0);
 if (HEAP32[i13 >> 2] & 4 | 0) {
  HEAP32[i8 >> 2] = _save_patterns(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
  i28 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i28 | 0;
 } else {
  HEAP32[i8 >> 2] = 0;
  i28 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i28 | 0;
 }
 return 0;
}

function _did_set_string_option(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i8 + 68 | 0;
 i10 = i8 + 64 | 0;
 i11 = i8 + 60 | 0;
 i12 = i8 + 56 | 0;
 i13 = i8 + 52 | 0;
 i14 = i8 + 48 | 0;
 i15 = i8 + 44 | 0;
 i16 = i8 + 40 | 0;
 i17 = i8 + 36 | 0;
 i18 = i8 + 32 | 0;
 i19 = i8 + 28 | 0;
 i20 = i8 + 24 | 0;
 i21 = i8 + 20 | 0;
 i22 = i8 + 16 | 0;
 i23 = i8 + 12 | 0;
 i24 = i8 + 8 | 0;
 i25 = i8 + 4 | 0;
 i26 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i20 >> 2] = HEAP32[15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 8 >> 2] & 8;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i19 >> 2] = _get_varp_scope(15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) | 0, 2) | 0;
 if (HEAP32[26783] | 0) if (HEAP32[15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 8 >> 2] & 524288 | 0) HEAP32[i15 >> 2] = 93591; else i7 = 4; else i7 = 4;
 L4 : do if ((i7 | 0) == 4) {
  if (HEAP32[15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 8 >> 2] & 4194304 | 0) {
   if (!(_strpbrk(HEAP32[HEAP32[i10 >> 2] >> 2] | 0, HEAP32[26783] | 0 ? 63721 : 63734) | 0)) i7 = 6;
  } else i7 = 6;
  do if ((i7 | 0) == 6) {
   if (HEAP32[15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 8 >> 2] & 134217728 | 0) if (_strpbrk(HEAP32[HEAP32[i10 >> 2] >> 2] | 0, 63744) | 0) break;
   if ((HEAP32[i10 >> 2] | 0) == 106076) {
    if (!(HEAPU8[HEAP32[26519] >> 0] | 0)) HEAP32[i15 >> 2] = 63755;
    if (HEAP32[26627] | 0) {
     HEAP32[i15 >> 2] = 63795;
     break L4;
    }
    if (_term_is_gui(HEAP32[26519] | 0) | 0) {
     HEAP32[i15 >> 2] = 63827;
     break L4;
    }
    if (!(_set_termname(HEAP32[26519] | 0) | 0)) {
     HEAP32[i15 >> 2] = 63861;
     break L4;
    } else {
     _redraw_later_clear();
     HEAP32[i9 >> 2] = _findoption(78891) | 0;
     HEAP32[i20 >> 2] = HEAP32[15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 8 >> 2] & 8;
     break L4;
    }
   }
   if ((HEAP32[i19 >> 2] | 0) == 107580) {
    HEAP32[i23 >> 2] = HEAP32[26895];
    HEAP32[i24 >> 2] = 107584;
    if (HEAP32[i14 >> 2] & 4 | 0) {
     HEAP32[i23 >> 2] = HEAP32[(HEAP32[26773] | 0) + 572 >> 2];
     HEAP32[i24 >> 2] = (HEAP32[26773] | 0) + 576;
    }
    if (HEAP32[i14 >> 2] & 4 | 0) if (!(HEAPU8[HEAP32[i23 >> 2] >> 0] | 0)) {
     HEAP32[HEAP32[i24 >> 2] >> 2] = 0;
     break L4;
    }
    if ((_opt_strings_flags(HEAP32[i23 >> 2] | 0, 29040, HEAP32[i24 >> 2] | 0, 1) | 0) != 1) HEAP32[i15 >> 2] = 92453;
    if ((((HEAP32[HEAP32[i24 >> 2] >> 2] & 2 | 0) != 0 & 1) + ((HEAP32[HEAP32[i24 >> 2] >> 2] & 1 | 0) != 0 & 1) + ((HEAP32[HEAP32[i24 >> 2] >> 2] & 4 | 0) != 0 & 1) | 0) == 1) break L4;
    _opt_strings_flags(HEAP32[i12 >> 2] | 0, 29040, HEAP32[i24 >> 2] | 0, 1) | 0;
    HEAP32[i15 >> 2] = 92453;
    break L4;
   }
   if ((HEAP32[i10 >> 2] | 0) == 107592 | (HEAP32[i10 >> 2] | 0) == 107852) {
    i6 = HEAP32[26898] | 0;
    i5 = HEAP32[26963] | 0;
    if (_strcmp((HEAPU8[HEAP32[26898] >> 0] | 0) == 46 ? i6 + 1 | 0 : i6, (HEAPU8[HEAP32[26963] >> 0] | 0) == 46 ? i5 + 1 | 0 : i5) | 0) break L4;
    HEAP32[i15 >> 2] = 63888;
    break L4;
   }
   if ((HEAP32[i10 >> 2] | 0) != 107744) if (!((HEAP32[i10 >> 2] | 0) == 107740 ? 1 : (HEAP32[i10 >> 2] | 0) == 107748 ? 1 : (HEAP32[i10 >> 2] | 0) == ((HEAP32[26773] | 0) + 640 | 0))) {
    if ((HEAP32[i10 >> 2] | 0) == 107708) {
     if (HEAP32[26728] | 0) {
      _vim_setenv(63932, 114072);
      HEAP32[26728] = 0;
     }
     if (!(HEAP32[26729] | 0)) break L4;
     _vim_setenv(63936, 114072);
     HEAP32[26729] = 0;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107720) {
     if (_highlight_changed() | 0) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    i5 = HEAP32[i10 >> 2] | 0;
    if ((HEAP32[i19 >> 2] | 0) == 105044) {
     if ((_check_opt_strings(HEAP32[i5 >> 2] | 0, 29220, 1) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((i5 | 0) == 107888) {
     if ((_check_opt_strings(HEAP32[26972] | 0, 29240, 1) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107572) if ((_check_opt_strings(HEAP32[26893] | 0, 29256, 0) | 0) == 1) {
     _init_highlight(0, 0);
     break L4;
    } else {
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 108132) {
     if (_check_opt_wim() | 0) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107656) {
     if (_check_ei() | 0) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i19 >> 2] | 0) == 105048) {
     do if (!(HEAP32[(HEAP32[26773] | 0) + 664 >> 2] | 0)) {
      if (HEAP32[i14 >> 2] & 2 | 0) break;
      HEAP32[i15 >> 2] = 92640;
      break L4;
     } while (0);
     if ((_check_opt_strings(HEAP32[HEAP32[i10 >> 2] >> 2] | 0, 29268, 0) | 0) != 1) {
      HEAP32[i15 >> 2] = 92453;
      break L4;
     }
     i5 = (_get_fileformat(HEAP32[26773] | 0) | 0) == 1;
     i6 = (HEAP32[26773] | 0) + 704 | 0;
     if (i5) HEAP32[i6 >> 2] = 1; else HEAP32[i6 >> 2] = 0;
     _ml_setflags(HEAP32[26773] | 0);
     if ((_get_fileformat(HEAP32[26773] | 0) | 0) != 2) if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) != 109) break L4;
     _redraw_curbuf_later(40);
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107668) {
     if ((_check_opt_strings(HEAP32[26917] | 0, 29268, 1) | 0) != 1) {
      HEAP32[i15 >> 2] = 92453;
      break L4;
     }
     if (!(HEAPU8[HEAP32[26917] >> 0] | 0)) {
      HEAP32[27009] = 0;
      break L4;
     } else {
      HEAP32[27009] = 1;
      break L4;
     }
    }
    i6 = HEAP32[i10 >> 2] | 0;
    if ((HEAP32[i19 >> 2] | 0) == 105052) {
     HEAP32[i17 >> 2] = HEAP32[i6 >> 2];
     while (1) {
      if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) break L4;
      if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0) != 58) break;
      if (!(HEAPU8[(HEAP32[i17 >> 2] | 0) + 2 >> 0] | 0)) break;
      if (HEAPU8[(HEAP32[i17 >> 2] | 0) + 3 >> 0] | 0) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 3 >> 0] | 0) != 44) break;
      if (!(HEAPU8[(HEAP32[i17 >> 2] | 0) + 3 >> 0] | 0)) break L4;
      HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 4;
     }
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    i5 = HEAP32[i10 >> 2] | 0;
    if ((i6 | 0) == 107776) {
     HEAP32[i15 >> 2] = _set_chars_option(i5) | 0;
     break L4;
    }
    i4 = HEAP32[i10 >> 2] | 0;
    if ((i5 | 0) == 108092) {
     HEAP32[i15 >> 2] = _set_chars_option(i4) | 0;
     break L4;
    }
    if ((i4 | 0) == 15308) {
     _verbose_stop();
     if (!(HEAPU8[HEAP32[3827] >> 0] | 0)) break L4;
     if (_verbose_open() | 0) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    do if (_istermoption(15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) | 0) | 0) {
     if (!(HEAP32[26781] | 0)) break;
     do if ((HEAP32[i10 >> 2] | 0) == 106248) {
      HEAP32[i25 >> 2] = _atoi(HEAP32[26562] | 0) | 0;
      if ((HEAP32[i25 >> 2] | 0) == (HEAP32[26734] | 0)) break;
      HEAP32[26734] = HEAP32[i25 >> 2];
      if ((HEAP32[26734] | 0) <= 1) {
       if (HEAP32[i11 >> 2] | 0) _vim_free(HEAP32[26562] | 0);
       HEAP32[26562] = 114072;
      }
      _init_highlight(1, 0);
     } while (0);
     _ttest(0);
     if ((HEAP32[i10 >> 2] | 0) == 106152) {
      _out_str(HEAP32[26538] | 0);
      _redraw_later(50);
     }
     if (!((HEAP32[i10 >> 2] | 0) == 106368 & (HEAP32[26835] | 0) != 0)) break L4;
     if (!(HEAPU8[HEAP32[26592] >> 0] | 0)) {
      _out_str(HEAP32[26593] | 0);
      break L4;
     } else {
      _out_str(HEAP32[26592] | 0);
      break L4;
     }
    } while (0);
    if ((HEAP32[i10 >> 2] | 0) == 107692) {
     do if (HEAP32[26627] | 0) {
      HEAP32[i17 >> 2] = HEAP32[26923];
      if (!(HEAP32[i17 >> 2] | 0)) break;
      if ((_gui_init_font(HEAP32[26923] | 0, 0) | 0) == 1) break;
      HEAP32[i15 >> 2] = 63947;
     } while (0);
     HEAP32[i21 >> 2] = 1;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107700) {
     HEAP32[i15 >> 2] = _parse_shape_opt(2) | 0;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107704) {
     _gui_init_which_components(HEAP32[i12 >> 2] | 0);
     HEAP32[i21 >> 2] = 1;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107900) {
     if (HEAPU8[HEAP32[26975] >> 0] | 0) if ((_check_opt_strings(HEAP32[26975] | 0, 29284, 0) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107904) {
     if ((_check_opt_strings(HEAP32[26976] | 0, 29300, 1) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107760) if ((_check_opt_strings(HEAP32[26940] | 0, 29316, 1) | 0) != 1) {
     HEAP32[i15 >> 2] = 92453;
     break L4;
    } else {
     HEAP32[26865] = (_vim_strchr(HEAP32[26940] | 0, 111) | 0) != 0 & 1;
     HEAP32[26866] = (_vim_strchr(HEAP32[26940] | 0, 97) | 0) != 0 & 1;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107824) {
     if ((_check_opt_strings(HEAP32[26956] | 0, 29328, 0) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107996) {
     if ((_opt_strings_flags(HEAP32[26999] | 0, 29348, 108e3, 1) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107620) {
     if ((_check_opt_strings(HEAP32[26905] | 0, 29372, 1) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107628) if ((_opt_strings_flags(HEAP32[26907] | 0, 29144, 107632, 1) | 0) != 1) {
     HEAP32[i15 >> 2] = 92453;
     break L4;
    } else {
     _init_chartab() | 0;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107640) {
     if ((_check_opt_strings(HEAP32[26910] | 0, 29388, 0) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107608) {
     HEAP32[i15 >> 2] = _check_clipboard_option() | 0;
     break L4;
    }
    if ((HEAP32[i19 >> 2] | 0) == 105056) {
     if ((_check_opt_strings(HEAP32[(HEAP32[26773] | 0) + 588 >> 2] | 0, 29404, 0) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i19 >> 2] | 0) == 105060) {
     if ((_check_opt_strings(HEAP32[(HEAP32[26773] | 0) + 592 >> 2] | 0, 29424, 0) | 0) != 1) {
      HEAP32[i15 >> 2] = 92453;
      break L4;
     }
     if (HEAP32[(HEAP32[26881] | 0) + 92 >> 2] | 0) {
      HEAP32[(HEAP32[26881] | 0) + 176 >> 2] = 1;
      _redraw_later(10);
     }
     i6 = HEAP32[26773] | 0;
     HEAP32[i6 + 780 >> 2] = (HEAPU8[HEAP32[i6 + 592 >> 2] >> 0] | 0) == 104 & 1;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107848) {
     if (!(HEAP8[HEAP32[26962] >> 0] | 0)) break L4;
     _replace_termcodes(HEAP32[26962] | 0, i17, 1, 1, 0) | 0;
     if (!(HEAP32[i17 >> 2] | 0)) break L4;
     if (HEAP32[i11 >> 2] | 0) _free_string_option(HEAP32[26962] | 0);
     HEAP32[26962] = HEAP32[i17 >> 2];
     HEAP32[i11 >> 2] = 1;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107568) {
     i6 = HEAP32[26892] | 0;
     if (((HEAPU8[HEAP32[26892] >> 0] | 0) - 48 | 0) >>> 0 >= 10) {
      if ((_check_opt_strings(i6, 29456, 1) | 0) == 1) break L4;
      HEAP32[i15 >> 2] = 92453;
      break L4;
     }
     if ((HEAPU8[i6 >> 0] | 0) <= 50) if (!(HEAPU8[(HEAP32[26892] | 0) + 1 >> 0] | 0)) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i10 >> 2] | 0) == 107596) {
     if ((_opt_strings_flags(HEAP32[26899] | 0, 29064, 107600, 1) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i19 >> 2] | 0) == 108008) {
     if (HEAP32[i14 >> 2] & 4 | 0) {
      HEAP32[i17 >> 2] = HEAP32[(HEAP32[26773] | 0) + 748 >> 2];
      HEAP32[i26 >> 2] = (HEAP32[26773] | 0) + 752;
     } else {
      HEAP32[i17 >> 2] = HEAP32[27002];
      HEAP32[i26 >> 2] = 108012;
     }
     do if (HEAP32[i14 >> 2] & 4 | 0) {
      if (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) break;
      HEAP32[HEAP32[i26 >> 2] >> 2] = 0;
      break L4;
     } while (0);
     if (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) if ((_opt_strings_flags(HEAP32[i17 >> 2] | 0, 29160, HEAP32[i26 >> 2] | 0, 0) | 0) == 1) break L4;
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    if ((HEAP32[i19 >> 2] | 0) == 105064) if (_valid_filetype(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) | 0) {
     HEAP32[i22 >> 2] = (_strcmp(HEAP32[i12 >> 2] | 0, HEAP32[HEAP32[i10 >> 2] >> 2] | 0) | 0) != 0 & 1;
     break L4;
    } else {
     HEAP32[i15 >> 2] = 92453;
     break L4;
    }
    HEAP32[i17 >> 2] = 0;
    HEAP32[i17 >> 2] = (HEAP32[i10 >> 2] | 0) == 108116 ? 63969 : 0;
    do if ((HEAP32[i10 >> 2] | 0) == 107940) HEAP32[i17 >> 2] = 63980; else {
     if ((HEAP32[i10 >> 2] | 0) == 107616) {
      HEAP32[i17 >> 2] = 62937;
      break;
     }
     if ((HEAP32[i10 >> 2] | 0) == ((HEAP32[26773] | 0) + 628 | 0)) {
      HEAP32[i17 >> 2] = 64001;
      break;
     }
     if ((HEAP32[i10 >> 2] | 0) == 107812) {
      HEAP32[i17 >> 2] = 64020;
      break;
     }
     if ((HEAP32[i10 >> 2] | 0) != 107704) break;
     HEAP32[i17 >> 2] = 64028;
    } while (0);
    if (!(HEAP32[i17 >> 2] | 0)) break L4;
    HEAP32[i16 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
    while (1) {
     if (!(HEAP8[HEAP32[i16 >> 2] >> 0] | 0)) break L4;
     if (!(_vim_strchr(HEAP32[i17 >> 2] | 0, HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) | 0)) break;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
    HEAP32[i15 >> 2] = _illegal_char(HEAP32[i13 >> 2] | 0, HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) | 0;
    break L4;
   }
   if (_init_chartab() | 0) break L4;
   HEAP32[i18 >> 2] = 1;
   HEAP32[i15 >> 2] = 92453;
   break L4;
  } while (0);
  HEAP32[i15 >> 2] = 92453;
 } while (0);
 do if (HEAP32[i15 >> 2] | 0) {
  if (HEAP32[i11 >> 2] | 0) _free_string_option(HEAP32[HEAP32[i10 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i12 >> 2];
  if (HEAP32[i18 >> 2] | 0) _init_chartab() | 0;
  if ((HEAP32[i10 >> 2] | 0) == 107720) _highlight_changed() | 0;
 } else {
  if (HEAP32[i20 >> 2] | 0) _free_string_option(HEAP32[i12 >> 2] | 0);
  i16 = 15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 8 | 0;
  i13 = HEAP32[i16 >> 2] | 0;
  if (HEAP32[i11 >> 2] | 0) HEAP32[i16 >> 2] = i13 | 8; else HEAP32[i16 >> 2] = i13 & -9;
  if (!(HEAP32[i14 >> 2] & 6)) if (HEAP32[15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 16 >> 2] & 4096 | 0) {
   HEAP32[i17 >> 2] = _get_varp_scope(15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) | 0, 4) | 0;
   _free_string_option(HEAP32[HEAP32[i17 >> 2] >> 2] | 0);
   HEAP32[HEAP32[i17 >> 2] >> 2] = 114072;
   break;
  }
  if ((HEAP32[i14 >> 2] & 4 | 0) == 0 & (HEAP32[i14 >> 2] | 0) != 2) {
   _set_string_option_global(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
   break;
  }
  if ((HEAP32[i10 >> 2] | 0) == ((HEAP32[26773] | 0) + 624 | 0)) if ((HEAP32[i14 >> 2] & 8 | 0) == 0 | (HEAP32[i22 >> 2] | 0) != 0) {
   HEAP32[26267] = (HEAP32[26267] | 0) + 1;
   HEAP32[26747] = 1;
   i13 = HEAP32[26773] | 0;
   _apply_autocmds(44, HEAP32[i13 + 624 >> 2] | 0, HEAP32[i13 + 76 >> 2] | 0, (HEAP32[i22 >> 2] | 0 ? 1 : (HEAP32[26267] | 0) == 1) & 1, i13 | 0) | 0;
   HEAP32[26267] = (HEAP32[26267] | 0) + -1;
   if ((HEAP32[i10 >> 2] | 0) != ((HEAP32[26773] | 0) + 624 | 0)) HEAP32[i10 >> 2] = 0;
  }
 } while (0);
 if ((HEAP32[i10 >> 2] | 0) == 107812) _setmouse();
 if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) != 2147483647) if (HEAP32[15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 8 >> 2] & 67133440 | 0) HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 if (!((HEAP32[i21 >> 2] | 0) == 0 | (HEAP32[26627] | 0) != 0)) {
  i27 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i8;
  return i27 | 0;
 }
 _check_redraw(HEAP32[15328 + ((HEAP32[i9 >> 2] | 0) * 28 | 0) + 8 >> 2] | 0);
 i27 = HEAP32[i15 >> 2] | 0;
 STACKTOP = i8;
 return i27 | 0;
}

function _command_line_scan(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i4 = i3 + 112 | 0;
 i5 = i3 + 104 | 0;
 i6 = i3 + 96 | 0;
 i7 = i3 + 88 | 0;
 i8 = i3 + 80 | 0;
 i9 = i3 + 72 | 0;
 i10 = i3 + 64 | 0;
 i11 = i3 + 56 | 0;
 i12 = i3 + 48 | 0;
 i13 = i3 + 40 | 0;
 i14 = i3 + 32 | 0;
 i15 = i3 + 24 | 0;
 i16 = i3 + 16 | 0;
 i17 = i3 + 8 | 0;
 i18 = i3;
 i19 = i3 + 152 | 0;
 i20 = i3 + 148 | 0;
 i21 = i3 + 144 | 0;
 i22 = i3 + 140 | 0;
 i23 = i3 + 136 | 0;
 i24 = i3 + 132 | 0;
 i25 = i3 + 128 | 0;
 i26 = i3 + 124 | 0;
 i27 = i3 + 120 | 0;
 i28 = i3 + 116 | 0;
 HEAP32[i19 >> 2] = i1;
 HEAP32[i20 >> 2] = HEAP32[HEAP32[i19 >> 2] >> 2];
 HEAP32[i21 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + 4 >> 2];
 HEAP32[i23 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
 HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 4;
 HEAP32[i22 >> 2] = 1;
 while (1) {
  if ((HEAP32[i20 >> 2] | 0) <= 0) break;
  L4 : do if (HEAP32[i23 >> 2] | 0 ? 1 : (HEAP8[HEAP32[HEAP32[i21 >> 2] >> 2] >> 0] | 0) != 43) {
   if (HEAP32[i23 >> 2] | 0 ? 1 : (HEAP8[HEAP32[HEAP32[i21 >> 2] >> 2] >> 0] | 0) != 45) {
    HEAP32[i22 >> 2] = -1;
    if (HEAP32[(HEAP32[i19 >> 2] | 0) + 124 >> 2] | 0) if ((HEAP32[(HEAP32[i19 >> 2] | 0) + 124 >> 2] | 0) != 1) _mainerr(1, HEAP32[HEAP32[i21 >> 2] >> 2] | 0);
    HEAP32[(HEAP32[i19 >> 2] | 0) + 124 >> 2] = 1;
    if (!(_ga_grow(107472, 1) | 0)) i2 = 127; else {
     i1 = _vim_strsave(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) | 0;
     HEAP32[i26 >> 2] = i1;
     if (!i1) i2 = 127;
    }
    if ((i2 | 0) == 127) {
     i2 = 0;
     _mch_exit(2);
    }
    _alist_add(107472, HEAP32[i26 >> 2] | 0, 2);
    break;
   }
   HEAP32[i24 >> 2] = 0;
   i1 = HEAP32[HEAP32[i21 >> 2] >> 2] | 0;
   i29 = HEAP32[i22 >> 2] | 0;
   HEAP32[i22 >> 2] = i29 + 1;
   HEAP32[i25 >> 2] = HEAP8[i1 + i29 >> 0];
   L18 : do switch (HEAP32[i25 >> 2] | 0) {
   case 0:
    {
     if (HEAP32[26798] | 0) HEAP32[26787] = 1; else {
      if (HEAP32[(HEAP32[i19 >> 2] | 0) + 124 >> 2] | 0) _mainerr(1, HEAP32[HEAP32[i21 >> 2] >> 2] | 0);
      HEAP32[(HEAP32[i19 >> 2] | 0) + 124 >> 2] = 2;
      HEAP32[26833] = 2;
     }
     HEAP32[i22 >> 2] = -1;
     break;
    }
   case 45:
    {
     do if (!(_strcasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94752) | 0)) _usage(); else {
      if (!(_strcasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94757) | 0)) {
       HEAP32[10174] = 80;
       HEAP32[26715] = 1;
       _list_version();
       _msg_putchar(10);
       HEAP32[26711] = 0;
       _mch_exit(0);
       break;
      }
      if (!(_strncasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94765, 5) | 0)) {
       HEAP32[(HEAP32[i19 >> 2] | 0) + 16 >> 2] = 94454;
       HEAP32[26740] = 94449;
       HEAP32[(HEAP32[i19 >> 2] | 0) + 20 >> 2] = 1;
       _set_option_value(94771, 0, 94449, 0) | 0;
       break;
      }
      if (_strncasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94775, 7) | 0) {
       if (!(_strncasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94783, 6) | 0)) {
        HEAP32[26631] = 0;
        break;
       }
       if (!(_strncasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94790, 8) | 0)) {
        HEAP32[26878] = 0;
        break;
       }
       if (!(_strncasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94799, 10) | 0)) {
        HEAP32[(HEAP32[i19 >> 2] | 0) + 136 >> 2] = 1;
        break;
       }
       if (!(_strncasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94810, 7) | 0)) {
        HEAP32[(HEAP32[i19 >> 2] | 0) + 140 >> 2] = 1;
        break;
       }
       if (!(_strncasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94818, 3) | 0)) {
        HEAP32[i24 >> 2] = 1;
        HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 3;
        break;
       }
       if (!(_strncasecmp((HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 94822, 11) | 0)) {
        HEAP32[i24 >> 2] = 1;
        HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 11;
        break;
       }
       if (HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0) _mainerr(0, HEAP32[HEAP32[i21 >> 2] >> 2] | 0);
       HEAP32[i23 >> 2] = 1;
      }
     } while (0);
     if (!(HEAP32[i24 >> 2] | 0)) HEAP32[i22 >> 2] = -1;
     break;
    }
   case 65:
    {
     i29 = HEAP32[10211] | 0;
     HEAP32[i18 >> 2] = 92896;
     _fprintf(i29, 97576, i18) | 0;
     _mch_exit(2);
     break;
    }
   case 98:
    {
     _set_options_bin(HEAP32[(HEAP32[26773] | 0) + 584 >> 2] | 0, 1, 0);
     HEAP32[(HEAP32[26773] | 0) + 584 >> 2] = 1;
     break;
    }
   case 67:
    {
     _change_compatible(1);
     HEAP32[27224] = 1;
     break;
    }
   case 101:
    {
     HEAP32[26798] = 1;
     break;
    }
   case 69:
    {
     HEAP32[26798] = 2;
     break;
    }
   case 102:
    {
     HEAP32[26631] = 0;
     break;
    }
   case 103:
    {
     _main_start_gui();
     break;
    }
   case 70:
    {
     i29 = HEAP32[10211] | 0;
     HEAP32[i17 >> 2] = 92840;
     _fprintf(i29, 97576, i17) | 0;
     _mch_exit(2);
     break;
    }
   case 104:
   case 63:
    {
     _usage();
     break;
    }
   case 72:
    {
     i29 = HEAP32[10211] | 0;
     HEAP32[i16 >> 2] = 92783;
     _fprintf(i29, 97576, i16) | 0;
     _mch_exit(2);
     break;
    }
   case 88:
   case 108:
    break;
   case 77:
    {
     _reset_modifiable();
     i2 = 52;
     break;
    }
   case 109:
    {
     i2 = 52;
     break;
    }
   case 121:
    {
     HEAP32[26628] = 1;
     HEAP32[(HEAP32[i19 >> 2] | 0) + 12 >> 2] = 1;
     break;
    }
   case 78:
    {
     _change_compatible(0);
     break;
    }
   case 110:
    {
     HEAP32[(HEAP32[i19 >> 2] | 0) + 148 >> 2] = 1;
     break;
    }
   case 112:
    {
     i29 = _get_number_arg(HEAP32[HEAP32[i21 >> 2] >> 2] | 0, i22, 0) | 0;
     HEAP32[(HEAP32[i19 >> 2] | 0) + 152 >> 2] = i29;
     HEAP32[(HEAP32[i19 >> 2] | 0) + 156 >> 2] = 3;
     break;
    }
   case 111:
    {
     i29 = _get_number_arg(HEAP32[HEAP32[i21 >> 2] >> 2] | 0, i22, 0) | 0;
     HEAP32[(HEAP32[i19 >> 2] | 0) + 152 >> 2] = i29;
     HEAP32[(HEAP32[i19 >> 2] | 0) + 156 >> 2] = 1;
     break;
    }
   case 79:
    {
     i29 = _get_number_arg(HEAP32[HEAP32[i21 >> 2] >> 2] | 0, i22, 0) | 0;
     HEAP32[(HEAP32[i19 >> 2] | 0) + 152 >> 2] = i29;
     HEAP32[(HEAP32[i19 >> 2] | 0) + 156 >> 2] = 2;
     break;
    }
   case 82:
    {
     HEAP32[26815] = 1;
     HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1;
     HEAP32[26879] = 1e4;
     break;
    }
   case 76:
   case 114:
    {
     HEAP32[26816] = 1;
     break;
    }
   case 115:
    {
     if (HEAP32[26798] | 0) {
      HEAP32[26787] = 1;
      break L18;
     } else {
      HEAP32[i24 >> 2] = 1;
      break L18;
     }
     break;
    }
   case 116:
    {
     if (HEAP32[(HEAP32[i19 >> 2] | 0) + 124 >> 2] | 0) _mainerr(1, HEAP32[HEAP32[i21 >> 2] >> 2] | 0);
     HEAP32[(HEAP32[i19 >> 2] | 0) + 124 >> 2] = 3;
     if (HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0) {
      HEAP32[(HEAP32[i19 >> 2] | 0) + 128 >> 2] = (HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
      HEAP32[i22 >> 2] = -1;
      break L18;
     } else {
      HEAP32[i24 >> 2] = 1;
      break L18;
     }
     break;
    }
   case 86:
    {
     HEAP32[26888] = _get_number_arg(HEAP32[HEAP32[i21 >> 2] >> 2] | 0, i22, 10) | 0;
     if (HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0) {
      _set_option_value(94834, 0, (HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0, 0) | 0;
      HEAP32[i22 >> 2] = _strlen(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) | 0;
     }
     break;
    }
   case 118:
    {
     HEAP32[26798] = 0;
     HEAP32[26628] = 0;
     break;
    }
   case 119:
    {
     if (_vim_isdigit(HEAPU8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0) | 0) {
      HEAP32[i27 >> 2] = _get_number_arg(HEAP32[HEAP32[i21 >> 2] >> 2] | 0, i22, 10) | 0;
      _set_option_value(94846, HEAP32[i27 >> 2] | 0, 0, 0) | 0;
      break L18;
     } else {
      HEAP32[i24 >> 2] = 1;
      break L18;
     }
     break;
    }
   case 90:
    {
     HEAP32[26782] = 1;
     break;
    }
   case 99:
    {
     if (HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0) {
      if ((HEAP32[(HEAP32[i19 >> 2] | 0) + 24 >> 2] | 0) >= 10) _mainerr(4, 0);
      i29 = (HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0;
      i1 = HEAP32[i19 >> 2] | 0;
      i30 = i1 + 28 | 0;
      i31 = i1 + 24 | 0;
      i1 = HEAP32[i31 >> 2] | 0;
      HEAP32[i31 >> 2] = i1 + 1;
      HEAP32[i30 + (i1 << 2) >> 2] = i29;
      HEAP32[i22 >> 2] = -1;
     } else i2 = 80;
     break;
    }
   case 87:
   case 85:
   case 117:
   case 84:
   case 100:
   case 105:
   case 83:
    {
     i2 = 80;
     break;
    }
   default:
    _mainerr(0, HEAP32[HEAP32[i21 >> 2] >> 2] | 0);
   } while (0);
   if ((i2 | 0) == 52) {
    i2 = 0;
    HEAP32[27039] = 0;
   } else if ((i2 | 0) == 80) {
    i2 = 0;
    HEAP32[i24 >> 2] = 1;
   }
   if (HEAP32[i24 >> 2] | 0) {
    if (HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0) _mainerr(3, HEAP32[HEAP32[i21 >> 2] >> 2] | 0);
    HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
    if ((HEAP32[i20 >> 2] | 0) < 1 & (HEAP32[i25 >> 2] | 0) != 83) _mainerr_arg_missing(HEAP32[HEAP32[i21 >> 2] >> 2] | 0);
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 4;
    HEAP32[i22 >> 2] = -1;
    switch (HEAP32[i25 >> 2] | 0) {
    case 83:
    case 99:
     {
      if ((HEAP32[(HEAP32[i19 >> 2] | 0) + 24 >> 2] | 0) >= 10) _mainerr(4, 0);
      if ((HEAP32[i25 >> 2] | 0) != 83) {
       i29 = HEAP32[HEAP32[i21 >> 2] >> 2] | 0;
       i1 = HEAP32[i19 >> 2] | 0;
       i30 = i1 + 28 | 0;
       i31 = i1 + 24 | 0;
       i1 = HEAP32[i31 >> 2] | 0;
       HEAP32[i31 >> 2] = i1 + 1;
       HEAP32[i30 + (i1 << 2) >> 2] = i29;
       break L4;
      }
      do if ((HEAP32[i20 >> 2] | 0) < 1) HEAP32[i28 >> 2] = 94853; else if ((HEAP8[HEAP32[HEAP32[i21 >> 2] >> 2] >> 0] | 0) == 45) {
       HEAP32[i28 >> 2] = 94853;
       HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
       HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -4;
       break;
      } else {
       HEAP32[i28 >> 2] = HEAP32[HEAP32[i21 >> 2] >> 2];
       break;
      } while (0);
      HEAP32[i26 >> 2] = _alloc((_strlen(HEAP32[i28 >> 2] | 0) | 0) + 4 | 0) | 0;
      if (!(HEAP32[i26 >> 2] | 0)) _mch_exit(2);
      i29 = HEAP32[i26 >> 2] | 0;
      HEAP32[i15 >> 2] = HEAP32[i28 >> 2];
      _sprintf(i29, 94865, i15) | 0;
      i29 = HEAP32[i19 >> 2] | 0;
      HEAP8[i29 + 68 + (HEAP32[i29 + 24 >> 2] | 0) >> 0] = 1;
      i29 = HEAP32[i26 >> 2] | 0;
      i1 = HEAP32[i19 >> 2] | 0;
      i30 = i1 + 28 | 0;
      i31 = i1 + 24 | 0;
      i1 = HEAP32[i31 >> 2] | 0;
      HEAP32[i31 >> 2] = i1 + 1;
      HEAP32[i30 + (i1 << 2) >> 2] = i29;
      break L4;
      break;
     }
    case 45:
     {
      if ((HEAP8[(HEAP32[(HEAP32[i21 >> 2] | 0) + -4 >> 2] | 0) + 2 >> 0] | 0) != 99) break L4;
      if ((HEAP32[(HEAP32[i19 >> 2] | 0) + 80 >> 2] | 0) >= 10) _mainerr(4, 0);
      i29 = HEAP32[HEAP32[i21 >> 2] >> 2] | 0;
      i1 = HEAP32[i19 >> 2] | 0;
      i30 = i1 + 84 | 0;
      i31 = i1 + 80 | 0;
      i1 = HEAP32[i31 >> 2] | 0;
      HEAP32[i31 >> 2] = i1 + 1;
      HEAP32[i30 + (i1 << 2) >> 2] = i29;
      break L4;
      break;
     }
    case 105:
     {
      _set_option_value(94771, 0, HEAP32[HEAP32[i21 >> 2] >> 2] | 0, 0) | 0;
      break L4;
      break;
     }
    case 115:
     {
      if (HEAP32[27163] | 0) i2 = 106;
      break;
     }
    case 116:
     {
      HEAP32[(HEAP32[i19 >> 2] | 0) + 128 >> 2] = HEAP32[HEAP32[i21 >> 2] >> 2];
      break L4;
      break;
     }
    case 84:
     {
      if (_term_is_gui(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) | 0) {
       HEAP32[26628] = 1;
       break L4;
      } else {
       HEAP32[(HEAP32[i19 >> 2] | 0) + 144 >> 2] = HEAP32[HEAP32[i21 >> 2] >> 2];
       break L4;
      }
      break;
     }
    case 117:
     {
      HEAP32[(HEAP32[i19 >> 2] | 0) + 16 >> 2] = HEAP32[HEAP32[i21 >> 2] >> 2];
      break L4;
      break;
     }
    case 85:
     {
      HEAP32[26740] = HEAP32[HEAP32[i21 >> 2] >> 2];
      break L4;
      break;
     }
    case 119:
     {
      if (_vim_isdigit(HEAPU8[HEAP32[HEAP32[i21 >> 2] >> 2] >> 0] | 0) | 0) {
       HEAP32[i22 >> 2] = 0;
       HEAP32[i27 >> 2] = _get_number_arg(HEAP32[HEAP32[i21 >> 2] >> 2] | 0, i22, 10) | 0;
       _set_option_value(94846, HEAP32[i27 >> 2] | 0, 0, 0) | 0;
       HEAP32[i22 >> 2] = -1;
       break L4;
      } else i2 = 119;
      break;
     }
    case 87:
     {
      i2 = 119;
      break;
     }
    default:
     break L4;
    }
    if ((i2 | 0) == 119) {
     i2 = 0;
     if (HEAP32[26832] | 0) i2 = 106; else {
      i29 = _fopen(HEAP32[HEAP32[i21 >> 2] >> 2] | 0, (HEAP32[i25 >> 2] | 0) == 119 ? 97579 : 94940) | 0;
      HEAP32[26832] = i29;
      if (i29 | 0) break;
      i29 = HEAP32[10211] | 0;
      HEAP32[i6 >> 2] = 94942;
      _fprintf(i29, 97576, i6) | 0;
      i29 = HEAP32[10211] | 0;
      HEAP32[i5 >> 2] = HEAP32[HEAP32[i21 >> 2] >> 2];
      _fprintf(i29, 97576, i5) | 0;
      i29 = HEAP32[10211] | 0;
      HEAP32[i4 >> 2] = 94908;
      _fprintf(i29, 97576, i4) | 0;
      _mch_exit(2);
      break;
     }
    }
    if ((i2 | 0) == 106) {
     i2 = 0;
     i29 = HEAP32[10211] | 0;
     HEAP32[i14 >> 2] = 94871;
     _fprintf(i29, 97576, i14) | 0;
     i29 = HEAP32[10211] | 0;
     HEAP32[i13 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + -4 >> 2];
     _fprintf(i29, 97576, i13) | 0;
     i29 = HEAP32[10211] | 0;
     HEAP32[i12 >> 2] = 97452;
     _fprintf(i29, 97576, i12) | 0;
     i29 = HEAP32[10211] | 0;
     HEAP32[i11 >> 2] = HEAP32[HEAP32[i21 >> 2] >> 2];
     _fprintf(i29, 97576, i11) | 0;
     i29 = HEAP32[10211] | 0;
     HEAP32[i10 >> 2] = 94908;
     _fprintf(i29, 97576, i10) | 0;
     _mch_exit(2);
    }
    i29 = _fopen(HEAP32[HEAP32[i21 >> 2] >> 2] | 0, 94911) | 0;
    HEAP32[27163] = i29;
    if (!i29) {
     i29 = HEAP32[10211] | 0;
     HEAP32[i9 >> 2] = 94913;
     _fprintf(i29, 97576, i9) | 0;
     i29 = HEAP32[10211] | 0;
     HEAP32[i8 >> 2] = HEAP32[HEAP32[i21 >> 2] >> 2];
     _fprintf(i29, 97576, i8) | 0;
     i29 = HEAP32[10211] | 0;
     HEAP32[i7 >> 2] = 94908;
     _fprintf(i29, 97576, i7) | 0;
     _mch_exit(2);
    }
    if (!(_save_typebuf() | 0)) _mch_exit(2);
   }
  } else {
   if ((HEAP32[(HEAP32[i19 >> 2] | 0) + 24 >> 2] | 0) >= 10) _mainerr(4, 0);
   HEAP32[i22 >> 2] = -1;
   if (!(HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + 1 >> 0] | 0)) {
    i29 = HEAP32[i19 >> 2] | 0;
    i1 = i29 + 28 | 0;
    i30 = i29 + 24 | 0;
    i29 = HEAP32[i30 >> 2] | 0;
    HEAP32[i30 >> 2] = i29 + 1;
    HEAP32[i1 + (i29 << 2) >> 2] = 94750;
    break;
   } else {
    i29 = (HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + 1 | 0;
    i1 = HEAP32[i19 >> 2] | 0;
    i30 = i1 + 28 | 0;
    i31 = i1 + 24 | 0;
    i1 = HEAP32[i31 >> 2] | 0;
    HEAP32[i31 >> 2] = i1 + 1;
    HEAP32[i30 + (i1 << 2) >> 2] = i29;
    break;
   }
  } while (0);
  if ((HEAP32[i22 >> 2] | 0) <= 0) i2 = 131; else if (!(HEAP8[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0)) i2 = 131;
  if ((i2 | 0) == 131) {
   i2 = 0;
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 4;
   HEAP32[i22 >> 2] = 1;
  }
 }
 STACKTOP = i3;
 return;
}

function _do_addsub(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i7 = i6 + 24 | 0;
 i8 = i6 + 16 | 0;
 i9 = i6 + 8 | 0;
 i10 = i6;
 i11 = i6 + 164 | 0;
 i12 = i6 + 160 | 0;
 i13 = i6 + 156 | 0;
 i14 = i6 + 152 | 0;
 i15 = i6 + 148 | 0;
 i16 = i6 + 144 | 0;
 i17 = i6 + 168 | 0;
 i18 = i6 + 140 | 0;
 i19 = i6 + 136 | 0;
 i20 = i6 + 132 | 0;
 i21 = i6 + 128 | 0;
 i22 = i6 + 124 | 0;
 i23 = i6 + 120 | 0;
 i24 = i6 + 116 | 0;
 i25 = i6 + 112 | 0;
 i26 = i6 + 108 | 0;
 i27 = i6 + 104 | 0;
 i28 = i6 + 100 | 0;
 i29 = i6 + 96 | 0;
 i30 = i6 + 92 | 0;
 i31 = i6 + 88 | 0;
 i32 = i6 + 84 | 0;
 i33 = i6 + 80 | 0;
 i34 = i6 + 72 | 0;
 i35 = i6 + 64 | 0;
 i36 = i6 + 56 | 0;
 i37 = i6 + 48 | 0;
 i38 = i6 + 44 | 0;
 i39 = i6 + 40 | 0;
 i40 = i6 + 36 | 0;
 i41 = i6 + 32 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i30 >> 2] = 0;
 HEAP32[i31 >> 2] = 1;
 HEAP32[i32 >> 2] = HEAP32[26788];
 HEAP32[i33 >> 2] = 0;
 i4 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i34 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i34 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i35 >> 2] = 0;
 HEAP32[i24 >> 2] = (_vim_strchr(HEAP32[(HEAP32[26773] | 0) + 668 >> 2] | 0, 120) | 0) != 0 & 1;
 HEAP32[i25 >> 2] = (_vim_strchr(HEAP32[(HEAP32[26773] | 0) + 668 >> 2] | 0, 111) | 0) != 0 & 1;
 HEAP32[i26 >> 2] = (_vim_strchr(HEAP32[(HEAP32[26773] | 0) + 668 >> 2] | 0, 98) | 0) != 0 & 1;
 HEAP32[i27 >> 2] = (_vim_strchr(HEAP32[(HEAP32[26773] | 0) + 668 >> 2] | 0, 112) | 0) != 0 & 1;
 i4 = (HEAP32[26881] | 0) + 24 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i21 >> 2] = _ml_get(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2];
 L1 : do if (HEAPU8[HEAP32[i21 >> 2] >> 0] | 0) {
  L3 : do if (!(HEAP32[26788] | 0)) {
   L5 : do if (HEAP32[i26 >> 2] | 0) while (1) {
    if ((HEAP32[i15 >> 2] | 0) <= 0) break L5;
    if (!(_vim_isbdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) | 0)) break L5;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
   } while (0);
   L12 : do if (HEAP32[i24 >> 2] | 0) while (1) {
    if ((HEAP32[i15 >> 2] | 0) <= 0) break L12;
    if (!(_vim_isxdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) | 0)) break L12;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
   } while (0);
   L19 : do if ((HEAP32[i26 >> 2] | 0) != 0 & (HEAP32[i24 >> 2] | 0) != 0) {
    do if ((HEAP32[i15 >> 2] | 0) > 0) {
     if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 88) if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 120) break;
     if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) == 48) if (_vim_isxdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 1) >> 0] | 0) | 0) break L19;
    } while (0);
    HEAP32[i15 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2];
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) <= 0) break L19;
     if (!(_vim_isdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) | 0)) break L19;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    }
   } while (0);
   do if ((HEAP32[i24 >> 2] | 0) != 0 & (HEAP32[i15 >> 2] | 0) > 0) {
    if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 88) if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 120) {
     i5 = 28;
     break;
    }
    if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) == 48) {
     if (!(_vim_isxdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 1) >> 0] | 0) | 0)) i5 = 28;
    } else i5 = 28;
   } else i5 = 28; while (0);
   L39 : do if ((i5 | 0) == 28) {
    do if ((HEAP32[i26 >> 2] | 0) != 0 & (HEAP32[i15 >> 2] | 0) > 0) {
     if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 66) if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 98) break;
     if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) == 48) if (_vim_isbdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 1) >> 0] | 0) | 0) break L39;
    } while (0);
    HEAP32[i15 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2];
    while (1) {
     if (!(HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0)) break;
     if (_vim_isdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) | 0) break;
     if (HEAP32[i27 >> 2] | 0) if (((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 65 | 0) >>> 0 < 26) i42 = 1; else i42 = ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 97 | 0) >>> 0 < 26; else i42 = 0;
     if (!(i42 ^ 1)) break;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    }
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) <= 0) break L3;
     if (!(_vim_isdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) | 0)) break L3;
     if (HEAP32[i27 >> 2] | 0) if (((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 65 | 0) >>> 0 < 26) i43 = 1; else i43 = ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 97 | 0) >>> 0 < 26; else i43 = 0;
     if (!(i43 ^ 1)) break L3;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    }
   } while (0);
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  } while (0);
  if (HEAP32[i32 >> 2] | 0) {
   while (1) {
    if (!((HEAP32[i13 >> 2] | 0) > 0 ? (HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) != 0 : 0)) break;
    if (_vim_isdigit(HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) | 0) break;
    if (HEAP32[i27 >> 2] | 0) if (((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 65 | 0) >>> 0 < 26) i44 = 1; else i44 = ((HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) - 97 | 0) >>> 0 < 26; else i44 = 0;
    if (!(i44 ^ 1)) break;
    HEAP32[i38 >> 2] = 1;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i38 >> 2] | 0);
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i38 >> 2] | 0);
   }
   if (!(HEAP32[i13 >> 2] | 0)) break;
   if ((HEAP32[i15 >> 2] | 0) > (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0)) if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) == 45) {
    HEAP32[i30 >> 2] = 1;
    HEAP32[i31 >> 2] = 0;
   }
  }
  HEAP32[i28 >> 2] = HEAPU8[(HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0];
  do if (((HEAP32[i28 >> 2] | 0) - 48 | 0) >>> 0 >= 10) {
   if (HEAP32[i27 >> 2] | 0) {
    if (((HEAP32[i28 >> 2] | 0) - 65 | 0) >>> 0 < 26) break;
    if (((HEAP32[i28 >> 2] | 0) - 97 | 0) >>> 0 < 26) break;
   }
   _beep_flush();
   break L1;
  } while (0);
  do if (HEAP32[i27 >> 2] | 0) {
   if (((HEAP32[i28 >> 2] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAP32[i28 >> 2] | 0) - 97 | 0) >>> 0 >= 26) {
    i5 = 85;
    break;
   }
   i3 = HEAP32[i28 >> 2] | 0;
   i4 = i3 | 0;
   i2 = (i3 | 0) < 97 ? i4 - 65 | 0 : i4 - 97 | 0;
   do if ((HEAP32[i11 >> 2] | 0) == 29) {
    if ((i2 | 0) >= (HEAP32[i14 >> 2] | 0)) {
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) - (HEAP32[i14 >> 2] | 0);
     break;
    }
    if (_isupper(HEAP32[i28 >> 2] | 0) | 0) {
     HEAP32[i28 >> 2] = 65;
     break;
    } else {
     HEAP32[i28 >> 2] = 97;
     break;
    }
   } else {
    if ((26 - i2 - 1 | 0) >= (HEAP32[i14 >> 2] | 0)) {
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
     break;
    }
    if (_isupper(HEAP32[i28 >> 2] | 0) | 0) {
     HEAP32[i28 >> 2] = 90;
     break;
    } else {
     HEAP32[i28 >> 2] = 122;
     break;
    }
   } while (0);
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i15 >> 2];
   if (!(HEAP32[i33 >> 2] | 0)) {
    i2 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i36 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i36 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   }
   HEAP32[i33 >> 2] = 1;
   _del_char(0) | 0;
   _ins_char(HEAP32[i28 >> 2] | 0);
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i37 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i37 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i15 >> 2];
  } else i5 = 85; while (0);
  do if ((i5 | 0) == 85) {
   if ((HEAP32[i15 >> 2] | 0) > 0) if (!(HEAP32[i32 >> 2] | 0 ? 1 : (HEAPU8[(HEAP32[i21 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) != 45)) {
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    HEAP32[i30 >> 2] = 1;
   }
   if ((HEAP32[i32 >> 2] | 0) != 0 & (HEAP32[10179] | 0) != 86) {
    if ((HEAP32[(HEAP32[26773] | 0) + 396 + 20 >> 2] | 0) == 2147483647) {
     i2 = _strlen(HEAP32[i21 >> 2] | 0) | 0;
     i45 = i2 - (HEAP32[i15 >> 2] | 0) | 0;
    } else i45 = HEAP32[i13 >> 2] | 0;
    HEAP32[i35 >> 2] = i45;
   }
   _vim_str2nr((HEAP32[i21 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0, i18, i13, 0 + (HEAP32[i26 >> 2] | 0 ? 1 : 0) + (HEAP32[i25 >> 2] | 0 ? 2 : 0) + (HEAP32[i24 >> 2] | 0 ? 4 : 0) | 0, 0, i19, HEAP32[i35 >> 2] | 0);
   if ((HEAP32[i18 >> 2] | 0) != 0 & (HEAP32[i30 >> 2] | 0) != 0) {
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
    HEAP32[i30 >> 2] = 0;
   }
   HEAP32[i29 >> 2] = 0;
   if ((HEAP32[i11 >> 2] | 0) == 29) HEAP32[i29 >> 2] = HEAP32[i29 >> 2] ^ 1;
   if (HEAP32[i30 >> 2] | 0) HEAP32[i29 >> 2] = HEAP32[i29 >> 2] ^ 1;
   HEAP32[i20 >> 2] = HEAP32[i19 >> 2];
   i2 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   if (HEAP32[i29 >> 2] | 0) HEAP32[i19 >> 2] = i4 - i2; else HEAP32[i19 >> 2] = i4 + i2;
   if (!(HEAP32[i18 >> 2] | 0)) {
    i2 = HEAP32[i19 >> 2] | 0;
    i4 = HEAP32[i20 >> 2] | 0;
    if (HEAP32[i29 >> 2] | 0) {
     if (i2 >>> 0 > i4 >>> 0) {
      HEAP32[i19 >> 2] = 1 + ~HEAP32[i19 >> 2];
      HEAP32[i30 >> 2] = HEAP32[i30 >> 2] ^ 1;
     }
    } else if (i2 >>> 0 < i4 >>> 0) {
     HEAP32[i19 >> 2] = ~HEAP32[i19 >> 2];
     HEAP32[i30 >> 2] = HEAP32[i30 >> 2] ^ 1;
    }
    if (!(HEAP32[i19 >> 2] | 0)) HEAP32[i30 >> 2] = 0;
   }
   if ((((HEAP32[i32 >> 2] | 0) == 0 | (HEAP32[i31 >> 2] | 0) != 0 | (HEAP32[i30 >> 2] | 0) != 0) ^ 1) & (HEAP32[i15 >> 2] | 0) > 0) {
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i15 >> 2];
   if (!(HEAP32[i33 >> 2] | 0)) {
    i4 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i36 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i36 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   }
   HEAP32[i33 >> 2] = 1;
   HEAP32[i23 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i22 >> 2] = _gchar_cursor() | 0;
   if ((HEAP32[i22 >> 2] | 0) == 45) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
   while (1) {
    i4 = HEAP32[i23 >> 2] | 0;
    HEAP32[i23 >> 2] = i4 + -1;
    if ((i4 | 0) <= 0) break;
    do if ((HEAP32[i22 >> 2] | 0) < 256) {
     if (!(_isalpha(HEAP32[i22 >> 2] | 0) | 0)) break;
     if (_isupper(HEAP32[i22 >> 2] | 0) | 0) {
      HEAP32[26239] = 1;
      break;
     } else {
      HEAP32[26239] = 0;
      break;
     }
    } while (0);
    _del_char(0) | 0;
    HEAP32[i22 >> 2] = _gchar_cursor() | 0;
   }
   HEAP32[i16 >> 2] = _alloc((HEAP32[i13 >> 2] | 0) + 65 | 0) | 0;
   if (!(HEAP32[i16 >> 2] | 0)) break L1;
   HEAP32[i21 >> 2] = HEAP32[i16 >> 2];
   do if (HEAP32[i30 >> 2] | 0) {
    if (!((HEAP32[i32 >> 2] | 0) == 0 | (HEAP32[i31 >> 2] | 0) != 0)) break;
    i4 = HEAP32[i21 >> 2] | 0;
    HEAP32[i21 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = 45;
   } while (0);
   if (HEAP32[i18 >> 2] | 0) {
    i4 = HEAP32[i21 >> 2] | 0;
    HEAP32[i21 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = 48;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
   }
   if ((HEAP32[i18 >> 2] | 0) == 98 | (HEAP32[i18 >> 2] | 0) == 66 | (HEAP32[i18 >> 2] | 0) == 120 | (HEAP32[i18 >> 2] | 0) == 88) {
    i4 = HEAP32[i18 >> 2] & 255;
    i2 = HEAP32[i21 >> 2] | 0;
    HEAP32[i21 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i4;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
   }
   do if ((HEAP32[i18 >> 2] | 0) == 98 | (HEAP32[i18 >> 2] | 0) == 66) {
    HEAP32[i40 >> 2] = 0;
    HEAP32[i41 >> 2] = 32;
    HEAP32[i40 >> 2] = HEAP32[i41 >> 2];
    while (1) {
     if ((HEAP32[i40 >> 2] | 0) <= 0) break;
     if ((HEAP32[i19 >> 2] | 0) >>> ((HEAP32[i40 >> 2] | 0) - 1 | 0) & 1 | 0) break;
     HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + -1;
    }
    HEAP32[i39 >> 2] = 0;
    while (1) {
     if ((HEAP32[i40 >> 2] | 0) <= 0) break;
     i4 = ((HEAP32[i19 >> 2] | 0) >>> ((HEAP32[i40 >> 2] | 0) - 1 | 0) & 1 | 0 ? 49 : 48) & 255;
     i2 = HEAP32[i39 >> 2] | 0;
     HEAP32[i39 >> 2] = i2 + 1;
     HEAP8[i17 + i2 >> 0] = i4;
     HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + -1;
    }
    HEAP8[i17 + (HEAP32[i39 >> 2] | 0) >> 0] = 0;
   } else {
    if (!(HEAP32[i18 >> 2] | 0)) {
     i4 = i10;
     HEAP32[i4 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i4 + 4 >> 2] = 0;
     _vim_snprintf(i17, 65, 62581, i10) | 0;
     break;
    }
    if ((HEAP32[i18 >> 2] | 0) == 48) {
     i4 = i9;
     HEAP32[i4 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i4 + 4 >> 2] = 0;
     _vim_snprintf(i17, 65, 62586, i9) | 0;
     break;
    }
    i4 = HEAP32[i19 >> 2] | 0;
    if ((HEAP32[i18 >> 2] | 0) != 0 & (HEAP32[26239] | 0) != 0) {
     i2 = i8;
     HEAP32[i2 >> 2] = i4;
     HEAP32[i2 + 4 >> 2] = 0;
     _vim_snprintf(i17, 65, 62591, i8) | 0;
     break;
    } else {
     i2 = i7;
     HEAP32[i2 >> 2] = i4;
     HEAP32[i2 + 4 >> 2] = 0;
     _vim_snprintf(i17, 65, 62596, i7) | 0;
     break;
    }
   } while (0);
   i2 = _strlen(i17) | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - i2;
   L205 : do if ((HEAP32[i28 >> 2] | 0) == 48) {
    if ((HEAP32[i25 >> 2] | 0) != 0 & (HEAP32[i18 >> 2] | 0) == 0) break;
    while (1) {
     i2 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i2 + -1;
     if ((i2 | 0) <= 0) break L205;
     i2 = HEAP32[i21 >> 2] | 0;
     HEAP32[i21 >> 2] = i2 + 1;
     HEAP8[i2 >> 0] = 48;
    }
   } while (0);
   HEAP8[HEAP32[i21 >> 2] >> 0] = 0;
   _strcat(HEAP32[i16 >> 2] | 0, i17) | 0;
   _ins_str(HEAP32[i16 >> 2] | 0);
   _vim_free(HEAP32[i16 >> 2] | 0);
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i37 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i37 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   if (!(HEAP32[i33 >> 2] | 0)) break;
   if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
   i2 = (HEAP32[26881] | 0) + 24 + 4 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  } while (0);
  if (HEAP32[i33 >> 2] | 0) {
   i2 = (HEAP32[26773] | 0) + 476 | 0;
   HEAP32[i2 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i36 + 4 >> 2];
   i2 = (HEAP32[26773] | 0) + 492 | 0;
   HEAP32[i2 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i37 + 4 >> 2];
   if ((HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] | 0) > 0) {
    i2 = (HEAP32[26773] | 0) + 492 + 4 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
   }
  }
 } while (0);
 if (HEAP32[i32 >> 2] | 0) {
  i32 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i32 >> 2] = HEAP32[i34 >> 2];
  HEAP32[i32 + 4 >> 2] = HEAP32[i34 + 4 >> 2];
  i46 = HEAP32[i33 >> 2] | 0;
  STACKTOP = i6;
  return i46 | 0;
 }
 if (!(HEAP32[i33 >> 2] | 0)) {
  i46 = HEAP32[i33 >> 2] | 0;
  STACKTOP = i6;
  return i46 | 0;
 }
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 i46 = HEAP32[i33 >> 2] | 0;
 STACKTOP = i6;
 return i46 | 0;
}

function _do_map(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i6 + 116 | 0;
 i8 = i6 + 112 | 0;
 i9 = i6 + 108 | 0;
 i10 = i6 + 104 | 0;
 i11 = i6 + 100 | 0;
 i12 = i6 + 96 | 0;
 i13 = i6 + 92 | 0;
 i14 = i6 + 88 | 0;
 i15 = i6 + 84 | 0;
 i16 = i6 + 80 | 0;
 i17 = i6 + 76 | 0;
 i18 = i6 + 72 | 0;
 i19 = i6 + 68 | 0;
 i20 = i6 + 64 | 0;
 i21 = i6 + 60 | 0;
 i22 = i6 + 56 | 0;
 i23 = i6 + 52 | 0;
 i24 = i6 + 48 | 0;
 i25 = i6 + 44 | 0;
 i26 = i6 + 40 | 0;
 i27 = i6 + 36 | 0;
 i28 = i6 + 32 | 0;
 i29 = i6 + 28 | 0;
 i30 = i6 + 24 | 0;
 i31 = i6 + 20 | 0;
 i32 = i6 + 16 | 0;
 i33 = i6 + 12 | 0;
 i34 = i6 + 8 | 0;
 i35 = i6 + 4 | 0;
 i36 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i31 >> 2] = 0;
 HEAP32[i32 >> 2] = 0;
 HEAP32[i33 >> 2] = 0;
 HEAP32[i34 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i30 >> 2] = 102556;
 HEAP32[i29 >> 2] = 103596;
 if ((HEAP32[i7 >> 2] | 0) == 2) HEAP32[i35 >> 2] = -1; else HEAP32[i35 >> 2] = 0;
 while (1) {
  i8 = (_strncmp(HEAP32[i11 >> 2] | 0, 56192, 8) | 0) == 0;
  i4 = HEAP32[i11 >> 2] | 0;
  if (i8) {
   HEAP32[i11 >> 2] = _skipwhite(i4 + 8 | 0) | 0;
   HEAP32[i32 >> 2] = 1;
   continue;
  }
  i8 = (_strncmp(i4, 56201, 8) | 0) == 0;
  i4 = HEAP32[i11 >> 2] | 0;
  if (i8) {
   HEAP32[i11 >> 2] = _skipwhite(i4 + 8 | 0) | 0;
   HEAP32[i33 >> 2] = 1;
   continue;
  }
  i8 = (_strncmp(i4, 56210, 9) | 0) == 0;
  i4 = HEAP32[i11 >> 2] | 0;
  if (i8) {
   HEAP32[i11 >> 2] = _skipwhite(i4 + 9 | 0) | 0;
   HEAP32[i34 >> 2] = 1;
   continue;
  }
  if (_strncmp(i4, 56220, 8) | 0) break;
  HEAP32[i11 >> 2] = _skipwhite((HEAP32[i11 >> 2] | 0) + 8 | 0) | 0;
  HEAP32[i31 >> 2] = 1;
 }
 _validate_maphash();
 HEAP32[i15 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i26 >> 2] = (_vim_strchr(HEAP32[26904] | 0, 66) | 0) == 0 & 1;
 while (1) {
  if (HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) if ((HEAP32[i7 >> 2] | 0) == 1) i37 = 1; else {
   if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) == 32) i38 = 1; else i38 = (HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) == 9;
   i37 = i38 ^ 1;
  } else i37 = 0;
  i39 = HEAP32[i15 >> 2] | 0;
  if (!i37) break;
  if ((HEAPU8[i39 >> 0] | 0 | 0) == 22) i5 = 23; else if (HEAP32[i26 >> 2] | 0) if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) == 92) i5 = 23;
  if ((i5 | 0) == 23) {
   i5 = 0;
   if (HEAPU8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0 | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
 }
 if (HEAPU8[i39 >> 0] | 0 | 0) {
  i39 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i39 + 1;
  HEAP8[i39 >> 0] = 0;
 }
 HEAP32[i15 >> 2] = _skipwhite(HEAP32[i15 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i19 >> 2] = (HEAPU8[HEAP32[i14 >> 2] >> 0] | 0 | 0) != 0 & 1;
 HEAP32[i20 >> 2] = (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 0 & 1;
 if (!((HEAP32[i7 >> 2] | 0) != 1 | (HEAP32[i20 >> 2] | 0) != 0)) {
  HEAP32[i25 >> 2] = 1;
  i40 = HEAP32[i23 >> 2] | 0;
  _vim_free(i40);
  i41 = HEAP32[i24 >> 2] | 0;
  _vim_free(i41);
  i42 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 }
 if (HEAP32[i20 >> 2] | 0) HEAP32[i11 >> 2] = _replace_termcodes(HEAP32[i11 >> 2] | 0, i23, 1, 1, HEAP32[i34 >> 2] | 0) | 0;
 HEAP32[i36 >> 2] = HEAP32[i14 >> 2];
 do if (HEAP32[i19 >> 2] | 0) if (!(_strcasecmp(HEAP32[i14 >> 2] | 0, 56229) | 0)) {
  HEAP32[i14 >> 2] = 114072;
  break;
 } else {
  HEAP32[i14 >> 2] = _replace_termcodes(HEAP32[i14 >> 2] | 0, i24, 0, 1, HEAP32[i34 >> 2] | 0) | 0;
  break;
 } while (0);
 L52 : do if (HEAP32[i20 >> 2] | 0) {
  HEAP32[i17 >> 2] = _strlen(HEAP32[i11 >> 2] | 0) | 0;
  if ((HEAP32[i17 >> 2] | 0) > 50) {
   HEAP32[i25 >> 2] = 1;
   i40 = HEAP32[i23 >> 2] | 0;
   _vim_free(i40);
   i41 = HEAP32[i24 >> 2] | 0;
   _vim_free(i41);
   i42 = HEAP32[i25 >> 2] | 0;
   STACKTOP = i6;
   return i42 | 0;
  }
  if ((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) != 1) {
   L59 : do if (_vim_iswordc(HEAPU8[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) - 1) >> 0] | 0) | 0) {
    HEAP32[i16 >> 2] = 0;
    while (1) {
     if ((HEAP32[i16 >> 2] | 0) >= ((HEAP32[i17 >> 2] | 0) - 2 | 0)) break L59;
     i34 = _vim_iswordc(HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0) | 0;
     if ((i34 | 0) != (_vim_iswordc(HEAPU8[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) - 2) >> 0] | 0) | 0)) break;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
    HEAP32[i25 >> 2] = 1;
    i40 = HEAP32[i23 >> 2] | 0;
    _vim_free(i40);
    i41 = HEAP32[i24 >> 2] | 0;
    _vim_free(i41);
    i42 = HEAP32[i25 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   } while (0);
   HEAP32[i16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break L52;
    if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0 | 0) == 32) break;
    if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0 | 0) == 9) break;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   }
   HEAP32[i25 >> 2] = 1;
   i40 = HEAP32[i23 >> 2] | 0;
   _vim_free(i40);
   i41 = HEAP32[i24 >> 2] | 0;
   _vim_free(i41);
   i42 = HEAP32[i25 >> 2] | 0;
   STACKTOP = i6;
   return i42 | 0;
  }
 } while (0);
 if ((HEAP32[i20 >> 2] | 0) != 0 & (HEAP32[i19 >> 2] | 0) != 0 & (HEAP32[i10 >> 2] | 0) != 0) HEAP32[10181] = 0;
 if (HEAP32[i20 >> 2] | 0) {
  if (!((HEAP32[i7 >> 2] | 0) == 1 | (HEAP32[i19 >> 2] | 0) != 0)) i5 = 56;
 } else i5 = 56;
 if ((i5 | 0) == 56) _msg_start();
 HEAP32[i22 >> 2] = 0;
 L84 : while (1) {
  if (((HEAP32[i22 >> 2] | 0) == 0 | (HEAP32[i7 >> 2] | 0) == 1) & (HEAP32[i22 >> 2] | 0) <= 1 ^ 1 | (HEAP32[i21 >> 2] | 0) != 0) {
   i5 = 107;
   break;
  }
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
   i5 = 107;
   break;
  }
  HEAP32[i27 >> 2] = 0;
  while (1) {
   if ((HEAP32[i27 >> 2] | 0) >= 256) break;
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   if (HEAP32[i10 >> 2] | 0) {
    if ((HEAP32[i27 >> 2] | 0) > 0) break;
    HEAP32[i13 >> 2] = HEAP32[i29 >> 2];
   } else HEAP32[i13 >> 2] = (HEAP32[i30 >> 2] | 0) + (HEAP32[i27 >> 2] << 2);
   HEAP32[i12 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
   while (1) {
    if (!(HEAP32[i12 >> 2] | 0)) break;
    if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
    L101 : do if (HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & HEAP32[i9 >> 2] | 0) {
     do if (HEAP32[i20 >> 2] | 0) {
      i34 = HEAP32[i12 >> 2] | 0;
      if (HEAP32[i22 >> 2] | 0) {
       HEAP32[i16 >> 2] = _strlen(HEAP32[i34 + 8 >> 2] | 0) | 0;
       HEAP32[i15 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2];
      } else {
       HEAP32[i16 >> 2] = HEAP32[i34 + 16 >> 2];
       HEAP32[i15 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2];
      }
      if (_strncmp(HEAP32[i15 >> 2] | 0, HEAP32[i11 >> 2] | 0, (HEAP32[i16 >> 2] | 0) < (HEAP32[i17 >> 2] | 0) ? HEAP32[i16 >> 2] | 0 : HEAP32[i17 >> 2] | 0) | 0) break;
      do if ((HEAP32[i7 >> 2] | 0) == 1) {
       L112 : do if ((HEAP32[i16 >> 2] | 0) != (HEAP32[i17 >> 2] | 0)) {
        do if (!((HEAP32[i10 >> 2] | 0) == 0 | (HEAP32[i22 >> 2] | 0) != 0)) {
         if ((HEAP32[i16 >> 2] | 0) > (HEAP32[i17 >> 2] | 0)) break;
         if (!(HEAPU8[(_skipwhite((HEAP32[i11 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) | 0) | 0) >> 0] | 0)) break L112;
        } while (0);
        HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
        break L101;
       } while (0);
       i34 = (HEAP32[i12 >> 2] | 0) + 20 | 0;
       HEAP32[i34 >> 2] = HEAP32[i34 >> 2] & ~HEAP32[i9 >> 2];
       HEAP32[i21 >> 2] = 1;
      } else {
       if (!(HEAP32[i19 >> 2] | 0)) {
        _showmap(HEAP32[i12 >> 2] | 0, (HEAP32[i30 >> 2] | 0) != 102556 & 1);
        HEAP32[i21 >> 2] = 1;
        break;
       }
       if ((HEAP32[i16 >> 2] | 0) != (HEAP32[i17 >> 2] | 0)) {
        HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
        break L101;
       }
       if (HEAP32[i31 >> 2] | 0) {
        i5 = 90;
        break L84;
       }
       i34 = (HEAP32[i12 >> 2] | 0) + 20 | 0;
       HEAP32[i34 >> 2] = HEAP32[i34 >> 2] & ~HEAP32[i9 >> 2];
       if (HEAP32[i21 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] | 0) != 0) break;
       HEAP32[i18 >> 2] = _vim_strsave(HEAP32[i14 >> 2] | 0) | 0;
       if (!(HEAP32[i18 >> 2] | 0)) {
        i5 = 96;
        break L84;
       }
       _vim_free(HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0);
       HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] = HEAP32[i18 >> 2];
       _vim_free(HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] | 0);
       i34 = _vim_strsave(HEAP32[i36 >> 2] | 0) | 0;
       HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] = i34;
       HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2] = HEAP32[i35 >> 2];
       HEAP8[(HEAP32[i12 >> 2] | 0) + 29 >> 0] = HEAP32[i32 >> 2];
       HEAP8[(HEAP32[i12 >> 2] | 0) + 28 >> 0] = HEAP32[i33 >> 2];
       HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] = HEAP32[i9 >> 2];
       HEAP32[i21 >> 2] = 1;
      } while (0);
      if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] | 0)) {
       _map_free(HEAP32[i13 >> 2] | 0);
       break L101;
      }
      i34 = HEAPU8[HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] >> 0] | 0;
      HEAP32[i28 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 12295 | 0 ? i34 : i34 ^ 128;
      if (HEAP32[i10 >> 2] | 0) break;
      if ((HEAP32[i28 >> 2] | 0) == (HEAP32[i27 >> 2] | 0)) break;
      HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[HEAP32[i12 >> 2] >> 2];
      HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[(HEAP32[i30 >> 2] | 0) + (HEAP32[i28 >> 2] << 2) >> 2];
      HEAP32[(HEAP32[i30 >> 2] | 0) + (HEAP32[i28 >> 2] << 2) >> 2] = HEAP32[i12 >> 2];
      break L101;
     } else {
      _showmap(HEAP32[i12 >> 2] | 0, (HEAP32[i30 >> 2] | 0) != 102556 & 1);
      HEAP32[i21 >> 2] = 1;
     } while (0);
     HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
    } else HEAP32[i13 >> 2] = HEAP32[i12 >> 2]; while (0);
    HEAP32[i12 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
   }
   HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
  }
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 90) {
  i22 = HEAP32[i15 >> 2] | 0;
  if (HEAP32[i10 >> 2] | 0) _emsg2(56235, i22) | 0; else _emsg2(56276, i22) | 0;
  HEAP32[i25 >> 2] = 5;
  i40 = HEAP32[i23 >> 2] | 0;
  _vim_free(i40);
  i41 = HEAP32[i24 >> 2] | 0;
  _vim_free(i41);
  i42 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 } else if ((i5 | 0) == 96) {
  HEAP32[i25 >> 2] = 4;
  i40 = HEAP32[i23 >> 2] | 0;
  _vim_free(i40);
  i41 = HEAP32[i24 >> 2] | 0;
  _vim_free(i41);
  i42 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 } else if ((i5 | 0) == 107) {
  if ((HEAP32[i7 >> 2] | 0) == 1) {
   if (!(HEAP32[i21 >> 2] | 0)) {
    HEAP32[i25 >> 2] = 2;
    i40 = HEAP32[i23 >> 2] | 0;
    _vim_free(i40);
    i41 = HEAP32[i24 >> 2] | 0;
    _vim_free(i41);
    i42 = HEAP32[i25 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   }
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 3) {
    i40 = HEAP32[i23 >> 2] | 0;
    _vim_free(i40);
    i41 = HEAP32[i24 >> 2] | 0;
    _vim_free(i41);
    i42 = HEAP32[i25 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   }
   HEAP32[26808] = HEAP32[26808] & ~HEAP32[i9 >> 2];
   i40 = HEAP32[i23 >> 2] | 0;
   _vim_free(i40);
   i41 = HEAP32[i24 >> 2] | 0;
   _vim_free(i41);
   i42 = HEAP32[i25 >> 2] | 0;
   STACKTOP = i6;
   return i42 | 0;
  }
  i7 = (HEAP32[i21 >> 2] | 0) != 0;
  if (!((HEAP32[i20 >> 2] | 0) != 0 & (HEAP32[i19 >> 2] | 0) != 0)) {
   if (i7) {
    i40 = HEAP32[i23 >> 2] | 0;
    _vim_free(i40);
    i41 = HEAP32[i24 >> 2] | 0;
    _vim_free(i41);
    i42 = HEAP32[i25 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   }
   if (HEAP32[i10 >> 2] | 0) {
    _msg(56312) | 0;
    i40 = HEAP32[i23 >> 2] | 0;
    _vim_free(i40);
    i41 = HEAP32[i24 >> 2] | 0;
    _vim_free(i41);
    i42 = HEAP32[i25 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   } else {
    _msg(56334) | 0;
    i40 = HEAP32[i23 >> 2] | 0;
    _vim_free(i40);
    i41 = HEAP32[i24 >> 2] | 0;
    _vim_free(i41);
    i42 = HEAP32[i25 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   }
  }
  if (i7) {
   i40 = HEAP32[i23 >> 2] | 0;
   _vim_free(i40);
   i41 = HEAP32[i24 >> 2] | 0;
   _vim_free(i41);
   i42 = HEAP32[i25 >> 2] | 0;
   STACKTOP = i6;
   return i42 | 0;
  }
  HEAP32[i12 >> 2] = _alloc(32) | 0;
  if (!(HEAP32[i12 >> 2] | 0)) {
   HEAP32[i25 >> 2] = 4;
   i40 = HEAP32[i23 >> 2] | 0;
   _vim_free(i40);
   i41 = HEAP32[i24 >> 2] | 0;
   _vim_free(i41);
   i42 = HEAP32[i25 >> 2] | 0;
   STACKTOP = i6;
   return i42 | 0;
  }
  if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 3) HEAP32[26808] = HEAP32[26808] | HEAP32[i9 >> 2];
  i7 = _vim_strsave(HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = i7;
  i7 = _vim_strsave(HEAP32[i14 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] = i7;
  i7 = _vim_strsave(HEAP32[i36 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] = i7;
  if (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) if (HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0) {
   i7 = _strlen(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 16 >> 2] = i7;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2] = HEAP32[i35 >> 2];
   HEAP8[(HEAP32[i12 >> 2] | 0) + 29 >> 0] = HEAP32[i32 >> 2];
   HEAP8[(HEAP32[i12 >> 2] | 0) + 28 >> 0] = HEAP32[i33 >> 2];
   HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] = HEAP32[i9 >> 2];
   if (HEAP32[i10 >> 2] | 0) {
    HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[HEAP32[i29 >> 2] >> 2];
    HEAP32[HEAP32[i29 >> 2] >> 2] = HEAP32[i12 >> 2];
    i40 = HEAP32[i23 >> 2] | 0;
    _vim_free(i40);
    i41 = HEAP32[i24 >> 2] | 0;
    _vim_free(i41);
    i42 = HEAP32[i25 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   } else {
    i29 = HEAPU8[HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] >> 0] | 0;
    HEAP32[i16 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 12295 | 0 ? i29 : i29 ^ 128;
    HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[(HEAP32[i30 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2];
    HEAP32[(HEAP32[i30 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] = HEAP32[i12 >> 2];
    i40 = HEAP32[i23 >> 2] | 0;
    _vim_free(i40);
    i41 = HEAP32[i24 >> 2] | 0;
    _vim_free(i41);
    i42 = HEAP32[i25 >> 2] | 0;
    STACKTOP = i6;
    return i42 | 0;
   }
  }
  _vim_free(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0);
  _vim_free(HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0);
  _vim_free(HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] | 0);
  _vim_free(HEAP32[i12 >> 2] | 0);
  HEAP32[i25 >> 2] = 4;
  i40 = HEAP32[i23 >> 2] | 0;
  _vim_free(i40);
  i41 = HEAP32[i24 >> 2] | 0;
  _vim_free(i41);
  i42 = HEAP32[i25 >> 2] | 0;
  STACKTOP = i6;
  return i42 | 0;
 }
 return 0;
}

function _normal_cmd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i4 + 108 | 0;
 i6 = i4 + 104 | 0;
 i7 = i4 + 60 | 0;
 i8 = i4 + 56 | 0;
 i9 = i4 + 52 | 0;
 i10 = i4 + 48 | 0;
 i11 = i4 + 40 | 0;
 i12 = i4 + 36 | 0;
 i13 = i4 + 32 | 0;
 i14 = i4 + 28 | 0;
 i15 = i4 + 24 | 0;
 i16 = i4 + 20 | 0;
 i17 = i4 + 16 | 0;
 i18 = i4 + 12 | 0;
 i19 = i4 + 8 | 0;
 i20 = i4 + 4 | 0;
 i21 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[26881] | 0) + 32 >> 2];
 i2 = i7;
 i1 = i2 + 44 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i1 | 0));
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 + 20 >> 2] = HEAP32[26797];
 HEAP32[i8 >> 2] = HEAP32[26796];
 HEAP32[26796] = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) != 0 & 1;
 if ((HEAP32[26796] | 0) != (HEAP32[i8 >> 2] | 0)) _ui_cursor_shape();
 if (!(HEAP32[26796] | 0)) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[i7 + 20 >> 2] = 0;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0) > 0) i3 = 8; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 80 >> 2] | 0) > 0) i3 = 8;
 if ((i3 | 0) == 8) {
  HEAP32[i7 + 20 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2];
  HEAP32[i7 + 24 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 80 >> 2];
  HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] = 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 80 >> 2] = 0;
 }
 HEAP32[i12 >> 2] = _typebuf_maplen() | 0;
 HEAP32[10180] = 257;
 HEAP32[i8 >> 2] = _safe_vgetc() | 0;
 do if (!(HEAP32[26806] | 0)) HEAP32[26077] = 0; else {
  if (!(HEAP32[26077] | 0)) {
   if (!((HEAP32[26788] | 0) != 0 & (HEAP32[i12 >> 2] | 0) == 0)) break;
   if ((_typebuf_maplen() | 0) <= 0) break;
  }
  HEAP32[26077] = _typebuf_maplen() | 0;
 } while (0);
 if (!(HEAP32[i8 >> 2] | 0)) HEAP32[i8 >> 2] = -22783;
 if ((HEAP32[26788] | 0) != 0 & (HEAP32[26789] | 0) != 0) {
  i12 = (_vim_isprintc(HEAP32[i8 >> 2] | 0) | 0) != 0;
  if (i12 | (HEAP32[i8 >> 2] | 0) == 10 | (HEAP32[i8 >> 2] | 0) == 13 | (HEAP32[i8 >> 2] | 0) == -16715) {
   _ins_char_typebuf(HEAP32[i8 >> 2] | 0);
   if (HEAP32[26806] | 0) HEAP32[i8 >> 2] = 100; else HEAP32[i8 >> 2] = 99;
   HEAP32[26713] = 1;
   HEAP32[26077] = 0;
  }
 }
 while (1) {
  if ((HEAP32[26788] | 0) != 0 & (HEAP32[26789] | 0) != 0) break;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= 49 & (HEAP32[i8 >> 2] | 0) <= 57) i22 = 1; else if (HEAP32[i7 + 24 >> 2] | 0) if ((HEAP32[i8 >> 2] | 0) == -17515 | (HEAP32[i8 >> 2] | 0) == -20733) i22 = 1; else i22 = (HEAP32[i8 >> 2] | 0) == 48; else i22 = 0;
   i23 = HEAP32[i8 >> 2] | 0;
   if (!i22) break;
   i12 = i7 + 24 | 0;
   i2 = HEAP32[i12 >> 2] | 0;
   if ((i23 | 0) == -17515 | (HEAP32[i8 >> 2] | 0) == -20733) HEAP32[i12 >> 2] = (i2 | 0) / 10 | 0; else HEAP32[i7 + 24 >> 2] = (i2 * 10 | 0) + ((HEAP32[i8 >> 2] | 0) - 48);
   if ((HEAP32[i7 + 24 >> 2] | 0) < 0) HEAP32[i7 + 24 >> 2] = 999999999;
   if (HEAP32[i9 >> 2] | 0) {
    HEAP32[26802] = (HEAP32[26802] | 0) + 1;
    HEAP32[26804] = (HEAP32[26804] | 0) + 1;
   }
   HEAP32[26803] = (HEAP32[26803] | 0) + 1;
   HEAP32[i8 >> 2] = _plain_vgetc() | 0;
   HEAP32[26803] = (HEAP32[26803] | 0) + -1;
   if (HEAP32[i9 >> 2] | 0) {
    HEAP32[26802] = (HEAP32[26802] | 0) + -1;
    HEAP32[26804] = (HEAP32[26804] | 0) + -1;
   }
  }
  if ((i23 | 0) != 23 | (HEAP32[i9 >> 2] | 0) != 0) break;
  if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) break;
  HEAP32[i9 >> 2] = 1;
  HEAP32[i7 + 20 >> 2] = HEAP32[i7 + 24 >> 2];
  HEAP32[i7 + 24 >> 2] = 0;
  HEAP32[26802] = (HEAP32[26802] | 0) + 1;
  HEAP32[26804] = (HEAP32[26804] | 0) + 1;
  HEAP32[i8 >> 2] = _plain_vgetc() | 0;
  HEAP32[26802] = (HEAP32[26802] | 0) + -1;
  HEAP32[26804] = (HEAP32[26804] | 0) + -1;
 }
 i23 = HEAP32[i7 + 20 >> 2] | 0;
 do if ((HEAP32[i8 >> 2] | 0) == -24829) {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] = i23;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 80 >> 2] = HEAP32[i7 + 24 >> 2];
 } else if (i23 | 0) {
  i22 = HEAP32[i7 + 20 >> 2] | 0;
  i2 = i7 + 24 | 0;
  if (HEAP32[i7 + 24 >> 2] | 0) {
   HEAP32[i2 >> 2] = Math_imul(HEAP32[i2 >> 2] | 0, i22) | 0;
   break;
  } else {
   HEAP32[i2 >> 2] = i22;
   break;
  }
 } while (0);
 HEAP32[i7 + 20 >> 2] = HEAP32[i7 + 24 >> 2];
 i23 = HEAP32[i7 + 24 >> 2] | 0;
 HEAP32[i7 + 28 >> 2] = (i23 | 0) == 0 ? 1 : i23 | 0;
 i23 = HEAP32[i8 >> 2] | 0;
 if (HEAP32[i9 >> 2] | 0) {
  HEAP32[i7 + 12 >> 2] = i23;
  HEAP32[i7 + 8 >> 2] = 23;
 } else HEAP32[i7 + 8 >> 2] = i23;
 HEAP32[i13 >> 2] = _find_command_1791(HEAP32[i7 + 8 >> 2] | 0) | 0;
 L72 : do if ((HEAP32[i13 >> 2] | 0) < 0) _clearopbeep(HEAP32[i5 >> 2] | 0); else {
  if (_text_locked() | 0) if (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 512 | 0) {
   _clearopbeep(HEAP32[i5 >> 2] | 0);
   _text_locked_msg();
   break;
  }
  if (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 512 | 0) if (_curbuf_locked() | 0) break;
  do if (HEAP32[26788] | 0) {
   if (HEAP32[26865] | 0) if (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 64 | 0) if (!(HEAP32[26698] & 2)) {
    _end_visual_mode();
    _redraw_curbuf_later(20);
   }
   if (HEAP32[26866] | 0) {
    if (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 16 | 0) {
     _unshift_special(i7);
     HEAP32[i13 >> 2] = _find_command_1791(HEAP32[i7 + 8 >> 2] | 0) | 0;
     if ((HEAP32[i13 >> 2] | 0) >= 0) break;
     _clearopbeep(HEAP32[i5 >> 2] | 0);
     break L72;
    }
    if (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 32 | 0) if (HEAP32[26698] & 2 | 0) HEAP32[26698] = HEAP32[26698] & -3;
   }
  } while (0);
  L97 : do if (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 1 | 0) {
   if ((HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 3 | 0) == 3) {
    if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) i3 = 75;
   } else i3 = 75;
   do if ((i3 | 0) == 75) if ((HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 5 | 0) != 5) {
    if ((HEAP32[i7 + 8 >> 2] | 0) == 113) if ((HEAP32[26801] | 0) == 0 ? ((HEAP32[26800] | 0) == 0 ? (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 0 : 0) : 0) break;
    if ((HEAP32[i7 + 8 >> 2] | 0) != 97) if ((HEAP32[i7 + 8 >> 2] | 0) != 105) break L97;
    if (!(HEAP32[26788] | 0 ? 1 : (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) != 0)) break L97;
   } while (0);
   HEAP32[i15 >> 2] = 0;
   HEAP32[i16 >> 2] = 0;
   HEAP32[i17 >> 2] = 0;
   HEAP32[26802] = (HEAP32[26802] | 0) + 1;
   HEAP32[26804] = (HEAP32[26804] | 0) + 1;
   HEAP32[26848] = 1;
   L111 : do if ((HEAP32[i7 + 8 >> 2] | 0) == 103) {
    HEAP32[i7 + 12 >> 2] = _plain_vgetc() | 0;
    do if ((HEAP32[i7 + 12 >> 2] | 0) != 114) {
     if ((HEAP32[i7 + 12 >> 2] | 0) == 39) break;
     if ((HEAP32[i7 + 12 >> 2] | 0) == 96) break;
     if ((HEAP32[i7 + 12 >> 2] | 0) == 28) break;
     HEAP32[i14 >> 2] = 0;
     break L111;
    } while (0);
    HEAP32[i14 >> 2] = i7 + 16;
    if ((HEAP32[i7 + 12 >> 2] | 0) != 114) {
     HEAP32[i16 >> 2] = 1;
     break;
    } else {
     HEAP32[i15 >> 2] = 1;
     break;
    }
   } else {
    if ((HEAP32[i7 + 8 >> 2] | 0) == 114) HEAP32[i15 >> 2] = 1;
    HEAP32[i14 >> 2] = i7 + 12;
   } while (0);
   if (HEAP32[i15 >> 2] | 0) i24 = 1; else i24 = (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 8 | 0) != 0;
   HEAP32[i18 >> 2] = i24 & 1;
   L130 : do if (HEAP32[i14 >> 2] | 0) {
    if (HEAP32[i15 >> 2] | 0) {
     HEAP32[10180] = 80;
     _ui_cursor_shape();
    }
    do if (HEAP32[i18 >> 2] | 0) {
     if ((HEAP32[(HEAP32[26773] | 0) + 552 >> 2] | 0) != 1) break;
     HEAP32[26802] = (HEAP32[26802] | 0) + -1;
     HEAP32[26804] = (HEAP32[26804] | 0) + -1;
     if (HEAP32[i15 >> 2] | 0) HEAP32[10180] = 96; else HEAP32[10180] = 32;
     HEAP32[i17 >> 2] = 1;
    } while (0);
    i23 = _plain_vgetc() | 0;
    HEAP32[HEAP32[i14 >> 2] >> 2] = i23;
    if (HEAP32[i17 >> 2] | 0) {
     HEAP32[26802] = (HEAP32[26802] | 0) + 1;
     HEAP32[26804] = (HEAP32[26804] | 0) + 1;
     HEAP32[10180] = 257;
    }
    HEAP32[10180] = 257;
    do if ((HEAP32[i14 >> 2] | 0) == (i7 + 16 | 0)) {
     if ((HEAP32[i7 + 12 >> 2] | 0) != 28) break;
     if ((HEAP32[i7 + 16 >> 2] | 0) != 14) if ((HEAP32[i7 + 16 >> 2] | 0) != 7) break;
     HEAP32[i7 + 8 >> 2] = 28;
     HEAP32[i7 + 12 >> 2] = HEAP32[i7 + 16 >> 2];
     HEAP32[i13 >> 2] = _find_command_1791(HEAP32[i7 + 8 >> 2] | 0) | 0;
     break L130;
    } while (0);
    if ((HEAP32[i7 + 12 >> 2] | 0) == 110) i3 = 113; else if ((HEAP32[i7 + 12 >> 2] | 0) == 78) i3 = 113;
    do if ((i3 | 0) == 113) {
     if ((HEAP32[i7 + 8 >> 2] | 0) != 103) break;
     i23 = _get_op_type(HEAP32[HEAP32[i14 >> 2] >> 2] | 0, 0) | 0;
     HEAP32[HEAP32[i7 >> 2] >> 2] = i23;
     break L130;
    } while (0);
    if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) != 28) break;
    i23 = HEAP32[27014] | 0;
    HEAP32[i19 >> 2] = (i23 | 0) >= 0 ? i23 | 0 : HEAP32[27012] | 0;
    while (1) {
     i23 = _vpeekc() | 0;
     HEAP32[i8 >> 2] = i23;
     if (!((i23 | 0) <= 0 ? (HEAP32[i19 >> 2] | 0) > 0 : 0)) break;
     i23 = HEAP32[i19 >> 2] | 0;
     _do_sleep((i23 | 0) > 50 ? 50 : i23 | 0);
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) - 50;
    }
    if ((HEAP32[i8 >> 2] | 0) <= 0) break;
    HEAP32[i8 >> 2] = _plain_vgetc() | 0;
    if ((HEAP32[i8 >> 2] | 0) != 14 & (HEAP32[i8 >> 2] | 0) != 7) {
     _vungetc(HEAP32[i8 >> 2] | 0);
     break;
    } else {
     HEAP32[i7 + 8 >> 2] = 28;
     HEAP32[i7 + 12 >> 2] = HEAP32[i8 >> 2];
     HEAP32[i13 >> 2] = _find_command_1791(HEAP32[i7 + 8 >> 2] | 0) | 0;
     break;
    }
   } while (0);
   HEAP32[26802] = (HEAP32[26802] | 0) + -1;
   HEAP32[26804] = (HEAP32[26804] | 0) + -1;
  } while (0);
  if ((HEAP32[i7 + 8 >> 2] | 0) != -13821) HEAP32[26848] = 0;
  HEAP32[10180] = 1;
  if ((HEAP32[i7 + 12 >> 2] | 0) == 27) {
   _clearop(HEAP32[i5 >> 2] | 0);
   if (HEAP32[26806] | 0) break;
   if (!(_goto_im() | 0)) break;
   HEAP32[26806] = 97;
   break;
  }
  if ((HEAP32[i7 + 8 >> 2] | 0) != -13821) {
   HEAP32[26711] = 0;
   HEAP32[27043] = 0;
  }
  i23 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i11 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i23 + 4 >> 2];
  do if ((HEAP32[26788] | 0) == 0 & (HEAP32[26866] | 0) != 0) {
   if (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 16 | 0) {
    _start_selection();
    _unshift_special(i7);
    HEAP32[i13 >> 2] = _find_command_1791(HEAP32[i7 + 8 >> 2] | 0) | 0;
    break;
   }
   if (!(HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 32)) break;
   if (!(HEAP32[26698] & 2)) break;
   _start_selection();
   HEAP32[26698] = HEAP32[26698] & -3;
  } while (0);
  HEAP32[i7 + 32 >> 2] = HEAP16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 10 >> 1];
  FUNCTION_TABLE_vi[HEAP32[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 4 >> 2] & 255](i7);
  do if (!(HEAP32[26796] | 0)) {
   if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) break;
   if ((HEAP32[i13 >> 2] | 0) >= 0) if (HEAPU16[13020 + ((HEAP32[i13 >> 2] | 0) * 12 | 0) + 8 >> 1] & 256 | 0) break;
   _clearop(HEAP32[i5 >> 2] | 0);
  } while (0);
  if ((HEAP32[26077] | 0) > 0) HEAP32[26077] = _typebuf_maplen() | 0;
  _do_pending_operator(i7, HEAP32[i10 >> 2] | 0, 0);
  do if ((HEAP32[26988] | 0) != 0 & (HEAP32[26809] | 0) == 0) {
   if (!(HEAP32[26806] | 0)) {
    if (!(HEAP32[26788] | 0)) {
     i3 = 154;
     break;
    }
    if ((HEAP32[i11 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
     i3 = 154;
     break;
    }
    if ((HEAP32[i11 + 4 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) {
     i3 = 154;
     break;
    }
   }
   if (!((HEAP32[26700] | 0) != 0 | (HEAP32[26699] | 0) != 0)) {
    i3 = 154;
    break;
   }
   if (HEAP32[26711] | 0) if ((HEAP32[26713] | 0) == 0 & (HEAP32[27161] | 0) != 0) break; else {
    i3 = 154;
    break;
   } else if ((((HEAP32[26712] | 0) != 0 & (HEAP32[26710] | 0) != 0 ^ 1 | (HEAP32[26713] | 0) != 0) ^ 1) & (HEAP32[27161] | 0) != 0) break; else {
    i3 = 154;
    break;
   }
  } else i3 = 154; while (0);
  if ((i3 | 0) == 154) {
   if ((HEAP32[26806] | 0) == 0 | (HEAP32[26788] | 0) != 0) break;
   if (!((HEAP32[26710] | 0) != 0 | (HEAP32[26718] | 0) != 0)) break;
  }
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) break;
  if (HEAP32[i7 + 36 >> 2] & 1 | 0) break;
  if (!(_stuff_empty() | 0)) break;
  i23 = (_typebuf_typed() | 0) != 0;
  if (i23 & (HEAP32[26810] | 0) == 0 ^ 1 | (HEAP32[26722] | 0) != 0) break;
  if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) break;
  HEAP32[i20 >> 2] = HEAP32[10180];
  if (HEAP32[26806] | 0) HEAP32[10180] = 16;
  if (!((HEAP32[26828] | 0) != 0 & (HEAP32[26706] | 0) != 0 ^ 1 | (HEAP32[26718] | 0) != 0)) {
   HEAP32[i21 >> 2] = HEAP32[26706];
   HEAP32[26706] = 0;
   _update_screen(0) | 0;
   HEAP32[26706] = HEAP32[i21 >> 2];
   _msg_attr(HEAP32[i21 >> 2] | 0, HEAP32[26707] | 0) | 0;
   _vim_free(HEAP32[i21 >> 2] | 0);
  }
  _setcursor();
  _cursor_on();
  _out_flush();
  if ((HEAP32[26710] | 0) != 0 | (HEAP32[26718] | 0) != 0) _ui_delay(1e3, 1);
  _ui_delay(3e3, 0);
  HEAP32[10180] = HEAP32[i20 >> 2];
  HEAP32[26710] = 0;
  HEAP32[26718] = 0;
 } while (0);
 HEAP32[26713] = 0;
 HEAP32[i8 >> 2] = HEAP32[26796];
 HEAP32[26796] = 0;
 if (HEAP32[i8 >> 2] | 0) i3 = 170; else if ((HEAP32[i7 + 8 >> 2] | 0) == 114) i3 = 170;
 if ((i3 | 0) == 170) _ui_cursor_shape();
 _checkpcmark();
 _vim_free(HEAP32[i7 + 40 >> 2] | 0);
 if (HEAP32[i6 >> 2] | 0 ? (HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0) != 0 : 0) {
  _validate_cursor();
  _do_check_scrollbind(1);
 }
 if (HEAP32[i6 >> 2] | 0 ? (HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] | 0) != 0 : 0) {
  _validate_cursor();
  _do_check_cursorbind();
 }
 if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) if ((((HEAP32[26806] | 0) == 0 | (HEAP32[26788] | 0) != 0) ^ 1) & (HEAP32[26077] | 0) == 0 | (HEAP32[26076] | 0) == 1) if (!(HEAP32[i7 + 36 >> 2] & 1)) if (_stuff_empty() | 0) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) {
  if ((HEAP32[26076] | 0) == 1) {
   HEAP32[26789] = 1;
   _showmode() | 0;
   HEAP32[26076] = 0;
  }
  if ((((HEAP32[26806] | 0) == 0 | (HEAP32[26788] | 0) != 0) ^ 1) & (HEAP32[26077] | 0) == 0) _edit(HEAP32[26806] | 0, 0, 1) | 0;
 }
 if ((HEAP32[26076] | 0) != 2) {
  i25 = i7 + 20 | 0;
  i26 = HEAP32[i25 >> 2] | 0;
  HEAP32[26797] = i26;
  STACKTOP = i4;
  return;
 }
 HEAP32[26076] = 1;
 i25 = i7 + 20 | 0;
 i26 = HEAP32[i25 >> 2] | 0;
 HEAP32[26797] = i26;
 STACKTOP = i4;
 return;
}

function _fmt_fp(i1, d2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0, i18 = 0, d19 = 0.0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, d39 = 0.0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, d60 = 0.0, d61 = 0.0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 i9 = i8 + 8 | 0;
 i10 = i8;
 i11 = i8 + 524 | 0;
 i12 = i11;
 i13 = i8 + 512 | 0;
 HEAP32[i10 >> 2] = 0;
 i14 = i13 + 12 | 0;
 i15 = ___DOUBLE_BITS_681(d2) | 0;
 i16 = tempRet0;
 if ((i16 | 0) < 0) {
  d17 = -d2;
  i18 = ___DOUBLE_BITS_681(d17) | 0;
  d19 = d17;
  i20 = 1;
  i21 = 98528;
  i22 = tempRet0;
  i23 = i18;
 } else {
  d19 = d2;
  i20 = (i5 & 2049 | 0) != 0 & 1;
  i21 = (i5 & 2048 | 0) == 0 ? ((i5 & 1 | 0) == 0 ? 98529 : 98534) : 98531;
  i22 = i16;
  i23 = i15;
 }
 do if (0 == 0 & (i22 & 2146435072 | 0) == 2146435072) {
  i15 = (i6 & 32 | 0) != 0;
  i23 = i20 + 3 | 0;
  _pad_680(i1, 32, i3, i23, i5 & -65537);
  _out(i1, i21, i20);
  _out(i1, d19 != d19 | 0.0 != 0.0 ? (i15 ? 98555 : 98559) : i15 ? 98547 : 98551, 3);
  _pad_680(i1, 32, i3, i23, i5 ^ 8192);
  i24 = i23;
 } else {
  d2 = +_frexpl(d19, i10) * 2.0;
  i23 = d2 != 0.0;
  if (i23) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
  i15 = i6 | 32;
  if ((i15 | 0) == 97) {
   i16 = i6 & 32;
   i18 = (i16 | 0) == 0 ? i21 : i21 + 9 | 0;
   i25 = i20 | 2;
   i26 = 12 - i4 | 0;
   do if (i4 >>> 0 > 11 | (i26 | 0) == 0) d27 = d2; else {
    d17 = 8.0;
    i28 = i26;
    do {
     i28 = i28 + -1 | 0;
     d17 = d17 * 16.0;
    } while ((i28 | 0) != 0);
    if ((HEAP8[i18 >> 0] | 0) == 45) {
     d27 = -(d17 + (-d2 - d17));
     break;
    } else {
     d27 = d2 + d17 - d17;
     break;
    }
   } while (0);
   i26 = HEAP32[i10 >> 2] | 0;
   i28 = (i26 | 0) < 0 ? 0 - i26 | 0 : i26;
   i29 = _fmt_u(i28, ((i28 | 0) < 0) << 31 >> 31, i14) | 0;
   if ((i29 | 0) == (i14 | 0)) {
    i28 = i13 + 11 | 0;
    HEAP8[i28 >> 0] = 48;
    i30 = i28;
   } else i30 = i29;
   HEAP8[i30 + -1 >> 0] = (i26 >> 31 & 2) + 43;
   i26 = i30 + -2 | 0;
   HEAP8[i26 >> 0] = i6 + 15;
   i29 = (i4 | 0) < 1;
   i28 = (i5 & 8 | 0) == 0;
   i31 = i11;
   d32 = d27;
   while (1) {
    i33 = ~~d32;
    i34 = i31 + 1 | 0;
    HEAP8[i31 >> 0] = i16 | HEAPU8[98563 + i33 >> 0];
    d32 = (d32 - +(i33 | 0)) * 16.0;
    if ((i34 - i12 | 0) == 1) if (i28 & (i29 & d32 == 0.0)) i35 = i34; else {
     HEAP8[i34 >> 0] = 46;
     i35 = i31 + 2 | 0;
    } else i35 = i34;
    if (!(d32 != 0.0)) break; else i31 = i35;
   }
   i31 = i35;
   if (!i4) i7 = 25; else if ((-2 - i12 + i31 | 0) < (i4 | 0)) {
    i29 = i14;
    i28 = i26;
    i36 = i4 + 2 + i29 - i28 | 0;
    i37 = i29;
    i38 = i28;
   } else i7 = 25;
   if ((i7 | 0) == 25) {
    i28 = i14;
    i29 = i26;
    i36 = i28 - i12 - i29 + i31 | 0;
    i37 = i28;
    i38 = i29;
   }
   i29 = i36 + i25 | 0;
   _pad_680(i1, 32, i3, i29, i5);
   _out(i1, i18, i25);
   _pad_680(i1, 48, i3, i29, i5 ^ 65536);
   i28 = i31 - i12 | 0;
   _out(i1, i11, i28);
   i31 = i37 - i38 | 0;
   _pad_680(i1, 48, i36 - (i28 + i31) | 0, 0, 0);
   _out(i1, i26, i31);
   _pad_680(i1, 32, i3, i29, i5 ^ 8192);
   i24 = i29;
   break;
  }
  i29 = (i4 | 0) < 0 ? 6 : i4;
  if (i23) {
   i31 = (HEAP32[i10 >> 2] | 0) + -28 | 0;
   HEAP32[i10 >> 2] = i31;
   d39 = d2 * 268435456.0;
   i40 = i31;
  } else {
   d39 = d2;
   i40 = HEAP32[i10 >> 2] | 0;
  }
  i31 = (i40 | 0) < 0 ? i9 : i9 + 288 | 0;
  i28 = i31;
  d32 = d39;
  do {
   i16 = ~~d32 >>> 0;
   HEAP32[i28 >> 2] = i16;
   i28 = i28 + 4 | 0;
   d32 = (d32 - +(i16 >>> 0)) * 1.0e9;
  } while (d32 != 0.0);
  if ((i40 | 0) > 0) {
   i23 = i31;
   i26 = i28;
   i25 = i40;
   while (1) {
    i18 = (i25 | 0) < 29 ? i25 : 29;
    i16 = i26 + -4 | 0;
    if (i16 >>> 0 < i23 >>> 0) i41 = i23; else {
     i34 = i16;
     i16 = 0;
     do {
      i33 = _bitshift64Shl(HEAP32[i34 >> 2] | 0, 0, i18 | 0) | 0;
      i42 = _i64Add(i33 | 0, tempRet0 | 0, i16 | 0, 0) | 0;
      i33 = tempRet0;
      i16 = ___udivdi3(i42 | 0, i33 | 0, 1e9, 0) | 0;
      i43 = ___muldi3(i16 | 0, tempRet0 | 0, 1e9, 0) | 0;
      i44 = _i64Subtract(i42 | 0, i33 | 0, i43 | 0, tempRet0 | 0) | 0;
      HEAP32[i34 >> 2] = i44;
      i34 = i34 + -4 | 0;
     } while (i34 >>> 0 >= i23 >>> 0);
     if (!i16) i41 = i23; else {
      i34 = i23 + -4 | 0;
      HEAP32[i34 >> 2] = i16;
      i41 = i34;
     }
    }
    L57 : do if (i26 >>> 0 > i41 >>> 0) {
     i34 = i26;
     while (1) {
      i44 = i34 + -4 | 0;
      if (HEAP32[i44 >> 2] | 0) {
       i45 = i34;
       break L57;
      }
      if (i44 >>> 0 > i41 >>> 0) i34 = i44; else {
       i45 = i44;
       break;
      }
     }
    } else i45 = i26; while (0);
    i16 = (HEAP32[i10 >> 2] | 0) - i18 | 0;
    HEAP32[i10 >> 2] = i16;
    if ((i16 | 0) > 0) {
     i23 = i41;
     i26 = i45;
     i25 = i16;
    } else {
     i46 = i41;
     i47 = i45;
     i48 = i16;
     break;
    }
   }
  } else {
   i46 = i31;
   i47 = i28;
   i48 = i40;
  }
  if ((i48 | 0) < 0) {
   i25 = ((i29 + 25 | 0) / 9 | 0) + 1 | 0;
   i26 = (i15 | 0) == 102;
   i23 = i46;
   i16 = i47;
   i34 = i48;
   while (1) {
    i44 = 0 - i34 | 0;
    i43 = (i44 | 0) < 9 ? i44 : 9;
    if (i23 >>> 0 < i16 >>> 0) {
     i44 = (1 << i43) + -1 | 0;
     i33 = 1e9 >>> i43;
     i42 = 0;
     i49 = i23;
     do {
      i50 = HEAP32[i49 >> 2] | 0;
      HEAP32[i49 >> 2] = (i50 >>> i43) + i42;
      i42 = Math_imul(i50 & i44, i33) | 0;
      i49 = i49 + 4 | 0;
     } while (i49 >>> 0 < i16 >>> 0);
     i49 = (HEAP32[i23 >> 2] | 0) == 0 ? i23 + 4 | 0 : i23;
     if (!i42) {
      i51 = i16;
      i52 = i49;
     } else {
      HEAP32[i16 >> 2] = i42;
      i51 = i16 + 4 | 0;
      i52 = i49;
     }
    } else {
     i51 = i16;
     i52 = (HEAP32[i23 >> 2] | 0) == 0 ? i23 + 4 | 0 : i23;
    }
    i49 = i26 ? i31 : i52;
    i33 = (i51 - i49 >> 2 | 0) > (i25 | 0) ? i49 + (i25 << 2) | 0 : i51;
    i34 = (HEAP32[i10 >> 2] | 0) + i43 | 0;
    HEAP32[i10 >> 2] = i34;
    if ((i34 | 0) >= 0) {
     i53 = i52;
     i54 = i33;
     break;
    } else {
     i23 = i52;
     i16 = i33;
    }
   }
  } else {
   i53 = i46;
   i54 = i47;
  }
  i16 = i31;
  if (i53 >>> 0 < i54 >>> 0) {
   i23 = (i16 - i53 >> 2) * 9 | 0;
   i34 = HEAP32[i53 >> 2] | 0;
   if (i34 >>> 0 < 10) i55 = i23; else {
    i25 = i23;
    i23 = 10;
    while (1) {
     i23 = i23 * 10 | 0;
     i26 = i25 + 1 | 0;
     if (i34 >>> 0 < i23 >>> 0) {
      i55 = i26;
      break;
     } else i25 = i26;
    }
   }
  } else i55 = 0;
  i25 = (i15 | 0) == 103;
  i23 = (i29 | 0) != 0;
  i34 = i29 - ((i15 | 0) == 102 ? 0 : i55) + ((i23 & i25) << 31 >> 31) | 0;
  if ((i34 | 0) < (((i54 - i16 >> 2) * 9 | 0) + -9 | 0)) {
   i26 = i34 + 9216 | 0;
   i34 = (i26 | 0) / 9 | 0;
   i28 = i31 + 4 + (i34 + -1024 << 2) | 0;
   i33 = i26 - (i34 * 9 | 0) | 0;
   if ((i33 | 0) < 8) {
    i34 = i33;
    i33 = 10;
    while (1) {
     i26 = i33 * 10 | 0;
     if ((i34 | 0) < 7) {
      i34 = i34 + 1 | 0;
      i33 = i26;
     } else {
      i56 = i26;
      break;
     }
    }
   } else i56 = 10;
   i33 = HEAP32[i28 >> 2] | 0;
   i34 = (i33 >>> 0) / (i56 >>> 0) | 0;
   i15 = i33 - (Math_imul(i34, i56) | 0) | 0;
   i26 = (i28 + 4 | 0) == (i54 | 0);
   if (i26 & (i15 | 0) == 0) {
    i57 = i28;
    i58 = i55;
    i59 = i53;
   } else {
    d17 = (i34 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    i34 = i56 >>> 1;
    d32 = i15 >>> 0 < i34 >>> 0 ? .5 : i26 & (i15 | 0) == (i34 | 0) ? 1.0 : 1.5;
    if (!i20) {
     d60 = d32;
     d61 = d17;
    } else {
     i34 = (HEAP8[i21 >> 0] | 0) == 45;
     d60 = i34 ? -d32 : d32;
     d61 = i34 ? -d17 : d17;
    }
    i34 = i33 - i15 | 0;
    HEAP32[i28 >> 2] = i34;
    if (d61 + d60 != d61) {
     i15 = i34 + i56 | 0;
     HEAP32[i28 >> 2] = i15;
     if (i15 >>> 0 > 999999999) {
      i15 = i28;
      i34 = i53;
      while (1) {
       i33 = i15 + -4 | 0;
       HEAP32[i15 >> 2] = 0;
       if (i33 >>> 0 < i34 >>> 0) {
        i26 = i34 + -4 | 0;
        HEAP32[i26 >> 2] = 0;
        i62 = i26;
       } else i62 = i34;
       i26 = (HEAP32[i33 >> 2] | 0) + 1 | 0;
       HEAP32[i33 >> 2] = i26;
       if (i26 >>> 0 > 999999999) {
        i15 = i33;
        i34 = i62;
       } else {
        i63 = i33;
        i64 = i62;
        break;
       }
      }
     } else {
      i63 = i28;
      i64 = i53;
     }
     i34 = (i16 - i64 >> 2) * 9 | 0;
     i15 = HEAP32[i64 >> 2] | 0;
     if (i15 >>> 0 < 10) {
      i57 = i63;
      i58 = i34;
      i59 = i64;
     } else {
      i33 = i34;
      i34 = 10;
      while (1) {
       i34 = i34 * 10 | 0;
       i26 = i33 + 1 | 0;
       if (i15 >>> 0 < i34 >>> 0) {
        i57 = i63;
        i58 = i26;
        i59 = i64;
        break;
       } else i33 = i26;
      }
     }
    } else {
     i57 = i28;
     i58 = i55;
     i59 = i53;
    }
   }
   i33 = i57 + 4 | 0;
   i65 = i58;
   i66 = i54 >>> 0 > i33 >>> 0 ? i33 : i54;
   i67 = i59;
  } else {
   i65 = i55;
   i66 = i54;
   i67 = i53;
  }
  i33 = 0 - i65 | 0;
  L109 : do if (i66 >>> 0 > i67 >>> 0) {
   i34 = i66;
   while (1) {
    i15 = i34 + -4 | 0;
    if (HEAP32[i15 >> 2] | 0) {
     i68 = i34;
     i69 = 1;
     break L109;
    }
    if (i15 >>> 0 > i67 >>> 0) i34 = i15; else {
     i68 = i15;
     i69 = 0;
     break;
    }
   }
  } else {
   i68 = i66;
   i69 = 0;
  } while (0);
  do if (i25) {
   i28 = i29 + ((i23 ^ 1) & 1) | 0;
   if ((i28 | 0) > (i65 | 0) & (i65 | 0) > -5) {
    i70 = i6 + -1 | 0;
    i71 = i28 + -1 - i65 | 0;
   } else {
    i70 = i6 + -2 | 0;
    i71 = i28 + -1 | 0;
   }
   if (!(i5 & 8)) {
    if (i69) {
     i28 = HEAP32[i68 + -4 >> 2] | 0;
     if (!i28) i72 = 9; else if (!((i28 >>> 0) % 10 | 0)) {
      i34 = 0;
      i43 = 10;
      while (1) {
       i43 = i43 * 10 | 0;
       i42 = i34 + 1 | 0;
       if ((i28 >>> 0) % (i43 >>> 0) | 0 | 0) {
        i72 = i42;
        break;
       } else i34 = i42;
      }
     } else i72 = 0;
    } else i72 = 9;
    i34 = ((i68 - i16 >> 2) * 9 | 0) + -9 | 0;
    if ((i70 | 32 | 0) == 102) {
     i43 = i34 - i72 | 0;
     i28 = (i43 | 0) > 0 ? i43 : 0;
     i73 = i70;
     i74 = (i71 | 0) < (i28 | 0) ? i71 : i28;
     break;
    } else {
     i28 = i34 + i65 - i72 | 0;
     i34 = (i28 | 0) > 0 ? i28 : 0;
     i73 = i70;
     i74 = (i71 | 0) < (i34 | 0) ? i71 : i34;
     break;
    }
   } else {
    i73 = i70;
    i74 = i71;
   }
  } else {
   i73 = i6;
   i74 = i29;
  } while (0);
  i29 = (i74 | 0) != 0;
  i16 = i29 ? 1 : i5 >>> 3 & 1;
  i23 = (i73 | 32 | 0) == 102;
  if (i23) {
   i75 = 0;
   i76 = (i65 | 0) > 0 ? i65 : 0;
  } else {
   i25 = (i65 | 0) < 0 ? i33 : i65;
   i34 = _fmt_u(i25, ((i25 | 0) < 0) << 31 >> 31, i14) | 0;
   i25 = i14;
   if ((i25 - i34 | 0) < 2) {
    i28 = i34;
    while (1) {
     i43 = i28 + -1 | 0;
     HEAP8[i43 >> 0] = 48;
     if ((i25 - i43 | 0) < 2) i28 = i43; else {
      i77 = i43;
      break;
     }
    }
   } else i77 = i34;
   HEAP8[i77 + -1 >> 0] = (i65 >> 31 & 2) + 43;
   i28 = i77 + -2 | 0;
   HEAP8[i28 >> 0] = i73;
   i75 = i28;
   i76 = i25 - i28 | 0;
  }
  i28 = i20 + 1 + i74 + i16 + i76 | 0;
  _pad_680(i1, 32, i3, i28, i5);
  _out(i1, i21, i20);
  _pad_680(i1, 48, i3, i28, i5 ^ 65536);
  if (i23) {
   i33 = i67 >>> 0 > i31 >>> 0 ? i31 : i67;
   i43 = i11 + 9 | 0;
   i42 = i43;
   i15 = i11 + 8 | 0;
   i26 = i33;
   do {
    i49 = _fmt_u(HEAP32[i26 >> 2] | 0, 0, i43) | 0;
    if ((i26 | 0) == (i33 | 0)) if ((i49 | 0) == (i43 | 0)) {
     HEAP8[i15 >> 0] = 48;
     i78 = i15;
    } else i78 = i49; else if (i49 >>> 0 > i11 >>> 0) {
     _memset(i11 | 0, 48, i49 - i12 | 0) | 0;
     i44 = i49;
     while (1) {
      i18 = i44 + -1 | 0;
      if (i18 >>> 0 > i11 >>> 0) i44 = i18; else {
       i78 = i18;
       break;
      }
     }
    } else i78 = i49;
    _out(i1, i78, i42 - i78 | 0);
    i26 = i26 + 4 | 0;
   } while (i26 >>> 0 <= i31 >>> 0);
   if (!((i5 & 8 | 0) == 0 & (i29 ^ 1))) _out(i1, 98579, 1);
   if (i26 >>> 0 < i68 >>> 0 & (i74 | 0) > 0) {
    i31 = i74;
    i42 = i26;
    while (1) {
     i15 = _fmt_u(HEAP32[i42 >> 2] | 0, 0, i43) | 0;
     if (i15 >>> 0 > i11 >>> 0) {
      _memset(i11 | 0, 48, i15 - i12 | 0) | 0;
      i33 = i15;
      while (1) {
       i23 = i33 + -1 | 0;
       if (i23 >>> 0 > i11 >>> 0) i33 = i23; else {
        i79 = i23;
        break;
       }
      }
     } else i79 = i15;
     _out(i1, i79, (i31 | 0) < 9 ? i31 : 9);
     i42 = i42 + 4 | 0;
     i33 = i31 + -9 | 0;
     if (!(i42 >>> 0 < i68 >>> 0 & (i31 | 0) > 9)) {
      i80 = i33;
      break;
     } else i31 = i33;
    }
   } else i80 = i74;
   _pad_680(i1, 48, i80 + 9 | 0, 9, 0);
  } else {
   i31 = i69 ? i68 : i67 + 4 | 0;
   if (i67 >>> 0 < i31 >>> 0 & (i74 | 0) > -1) {
    i42 = i11 + 9 | 0;
    i43 = (i5 & 8 | 0) == 0;
    i26 = i42;
    i29 = 0 - i12 | 0;
    i33 = i11 + 8 | 0;
    i49 = i74;
    i23 = i67;
    while (1) {
     i16 = _fmt_u(HEAP32[i23 >> 2] | 0, 0, i42) | 0;
     if ((i16 | 0) == (i42 | 0)) {
      HEAP8[i33 >> 0] = 48;
      i81 = i33;
     } else i81 = i16;
     do if ((i23 | 0) == (i67 | 0)) {
      i16 = i81 + 1 | 0;
      _out(i1, i81, 1);
      if (i43 & (i49 | 0) < 1) {
       i82 = i16;
       break;
      }
      _out(i1, 98579, 1);
      i82 = i16;
     } else {
      if (i81 >>> 0 <= i11 >>> 0) {
       i82 = i81;
       break;
      }
      _memset(i11 | 0, 48, i81 + i29 | 0) | 0;
      i16 = i81;
      while (1) {
       i25 = i16 + -1 | 0;
       if (i25 >>> 0 > i11 >>> 0) i16 = i25; else {
        i82 = i25;
        break;
       }
      }
     } while (0);
     i15 = i26 - i82 | 0;
     _out(i1, i82, (i49 | 0) > (i15 | 0) ? i15 : i49);
     i16 = i49 - i15 | 0;
     i23 = i23 + 4 | 0;
     if (!(i23 >>> 0 < i31 >>> 0 & (i16 | 0) > -1)) {
      i83 = i16;
      break;
     } else i49 = i16;
    }
   } else i83 = i74;
   _pad_680(i1, 48, i83 + 18 | 0, 18, 0);
   _out(i1, i75, i14 - i75 | 0);
  }
  _pad_680(i1, 32, i3, i28, i5 ^ 8192);
  i24 = i28;
 } while (0);
 STACKTOP = i8;
 return ((i24 | 0) < (i3 | 0) ? i3 : i24) | 0;
}

function _set_one_cmd_context(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i5 = i4 + 144 | 0;
 i6 = i4 + 140 | 0;
 i7 = i4 + 136 | 0;
 i8 = i4 + 132 | 0;
 i9 = i4 + 128 | 0;
 i10 = i4 + 124 | 0;
 i11 = i4 + 120 | 0;
 i12 = i4 + 20 | 0;
 i13 = i4 + 16 | 0;
 i14 = i4 + 12 | 0;
 i15 = i4 + 8 | 0;
 i16 = i4 + 4 | 0;
 i17 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 _ExpandInit(HEAP32[i6 >> 2] | 0);
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 HEAP32[HEAP32[i6 >> 2] >> 2] = 1;
 HEAP32[i12 + 20 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  i2 = (_vim_strchr(51835, HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) | 0) != 0;
  i18 = HEAP32[i9 >> 2] | 0;
  if (!i2) break;
  HEAP32[i9 >> 2] = i18 + 1;
 }
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = i18;
 if (!(HEAPU8[HEAP32[i9 >> 2] >> 0] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i19 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i19 | 0;
 }
 if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 34) {
  HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i19 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i19 | 0;
 }
 HEAP32[i9 >> 2] = _skip_range(HEAP32[i9 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[i9 >> 2];
 if (!(HEAPU8[HEAP32[i9 >> 2] >> 0] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i19 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i19 | 0;
 }
 if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 34) {
  HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i19 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i19 | 0;
 }
 if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) != 124) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) != 10) {
  if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 107) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0) != 101) {
   HEAP32[i12 + 16 >> 2] = 196;
   HEAP32[i8 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  } else i3 = 18; else i3 = 18;
  L27 : do if ((i3 | 0) == 18) {
   HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
   while (1) {
    if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 97 | 0) >>> 0 >= 26) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 42) break;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   L36 : do if (((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) - 65 | 0) >>> 0 < 26) while (1) {
    if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 97 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 42) break L36;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   } while (0);
   L46 : do if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 112) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0) == 121) if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[i9 >> 2] | 0) + 2 | 0)) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 51) {
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    while (1) {
     if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 97 | 0) >>> 0 >= 26) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 42) break L46;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    }
   } while (0);
   if ((HEAP32[i8 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) if (_vim_strchr(51125, HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   HEAP32[i11 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
   if (!(HEAP32[i11 >> 2] | 0)) {
    HEAP32[HEAP32[i6 >> 2] >> 2] = -2;
    HEAP32[i5 >> 2] = 0;
    i19 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i19 | 0;
   }
   HEAP32[i12 + 16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i12 + 16 >> 2] | 0) >= 544) break L27;
    if (!(_strncmp(HEAP32[1336 + (HEAP32[i12 + 16 >> 2] << 4) >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0)) break L27;
    HEAP32[i12 + 16 >> 2] = (HEAP32[i12 + 16 >> 2] | 0) + 1;
   }
  } while (0);
  do if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
   if (((HEAPU8[(HEAP32[i8 >> 2] | 0) + -1 >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[(HEAP32[i8 >> 2] | 0) + -1 >> 0] | 0) - 97 | 0) >>> 0 >= 26) if (((HEAPU8[(HEAP32[i8 >> 2] | 0) + -1 >> 0] | 0) - 48 | 0) >>> 0 >= 10) break;
   HEAP32[i5 >> 2] = 0;
   i19 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i19 | 0;
  } while (0);
  if ((HEAP32[i12 + 16 >> 2] | 0) == 544) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 115) if (_vim_strchr(51840, HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0) | 0) {
   HEAP32[i12 + 16 >> 2] = 370;
   HEAP32[i8 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  i18 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[i12 + 16 >> 2] | 0) == 544) {
   HEAP32[i18 >> 2] = -2;
   HEAP32[i5 >> 2] = 0;
   i19 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i19 | 0;
  }
  HEAP32[i18 >> 2] = 0;
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 33) {
   HEAP32[i13 >> 2] = 1;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  HEAP32[i12 + 20 >> 2] = HEAP32[1336 + (HEAP32[i12 + 16 >> 2] << 4) + 8 >> 2];
  HEAP32[i10 >> 2] = _skipwhite(HEAP32[i8 >> 2] | 0) | 0;
  if ((HEAP32[i12 + 16 >> 2] | 0) == 506) i3 = 63; else if ((HEAP32[i12 + 16 >> 2] | 0) == 487) i3 = 63;
  do if ((i3 | 0) == 63) {
   i18 = HEAP32[i10 >> 2] | 0;
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 62) {
    i2 = i18 + 1 | 0;
    HEAP32[i10 >> 2] = i2;
    if ((HEAPU8[i2 >> 0] | 0) == 62) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
    HEAP32[i10 >> 2] = _skipwhite(HEAP32[i10 >> 2] | 0) | 0;
    break;
   } else {
    if ((HEAPU8[i18 >> 0] | 0) != 33) break;
    if ((HEAP32[i12 + 16 >> 2] | 0) != 506) break;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
    HEAP32[i14 >> 2] = 1;
    break;
   }
  } while (0);
  if ((HEAP32[i12 + 16 >> 2] | 0) == 351) {
   HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 33) {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
    HEAP32[i14 >> 2] = 1;
   }
  }
  if ((HEAP32[i12 + 16 >> 2] | 0) == 536) i3 = 75; else if ((HEAP32[i12 + 16 >> 2] | 0) == 538) i3 = 75;
  if ((i3 | 0) == 75) {
   while (1) {
    i20 = HEAP32[i10 >> 2] | 0;
    if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) != (HEAPU8[HEAP32[i9 >> 2] >> 0] | 0)) break;
    HEAP32[i10 >> 2] = i20 + 1;
   }
   HEAP32[i10 >> 2] = _skipwhite(i20) | 0;
  }
  do if (!(HEAP32[i14 >> 2] | 0 ? 1 : (HEAP32[i12 + 20 >> 2] & 32768 | 0) == 0)) if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 43) {
   HEAP32[i8 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   HEAP32[i10 >> 2] = _skip_cmd_arg(HEAP32[i10 >> 2] | 0, 0) | 0;
   if (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) {
    HEAP32[i10 >> 2] = _skipwhite(HEAP32[i10 >> 2] | 0) | 0;
    break;
   }
   HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
   i19 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i19 | 0;
  } while (0);
  L125 : do if (!(HEAP32[i14 >> 2] | 0 ? 1 : (HEAP32[i12 + 20 >> 2] & 256 | 0) == 0)) {
   HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
   do if ((HEAP32[i12 + 16 >> 2] | 0) == 354) {
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 64) break;
    if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) != 34) break;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 2;
   } while (0);
   L132 : while (1) {
    if (!(HEAP8[HEAP32[i8 >> 2] >> 0] | 0)) break L125;
    i20 = HEAP32[i8 >> 2] | 0;
    L135 : do if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 22) {
     if (!(HEAPU8[i20 + 1 >> 0] | 0)) break;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    } else {
     if ((HEAPU8[i20 >> 0] | 0) == 34) {
      if (HEAP32[i12 + 20 >> 2] & 2048 | 0) i3 = 96;
     } else i3 = 96;
     do if ((i3 | 0) == 96) {
      i3 = 0;
      if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 124) break;
      if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 10) break L135;
     } while (0);
     if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + -1 >> 0] | 0) != 92) break L132;
    } while (0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   do if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 124) {
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 10) break;
    HEAP32[i5 >> 2] = 0;
    i19 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i19 | 0;
   } while (0);
   HEAP32[i5 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   i19 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i19 | 0;
  } while (0);
  do if (!(HEAP32[i12 + 20 >> 2] & 4)) if (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) {
   if (_vim_strchr(51846, HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) | 0) break;
   HEAP32[i5 >> 2] = 0;
   i19 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i19 | 0;
  } while (0);
  HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
  HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i11 >> 2] = _strlen(HEAP32[i7 >> 2] | 0) | 0;
  while (1) {
   if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
   if ((HEAP32[i8 >> 2] | 0) >>> 0 >= ((HEAP32[i7 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) >>> 0) break;
   do if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 32) i3 = 113; else {
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 9) {
     i3 = 113;
     break;
    }
    do if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 92) {
     if (!(HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0)) break;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    } while (0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   } while (0);
   if ((i3 | 0) == 113) {
    i3 = 0;
    i20 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
    HEAP32[i8 >> 2] = i20;
    HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = i20;
   }
  }
  do if (HEAP32[i12 + 20 >> 2] & 8 | 0) {
   HEAP32[i16 >> 2] = 0;
   HEAP32[i17 >> 2] = 0;
   i7 = _skipwhite(HEAP32[i10 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = i7;
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2];
   while (1) {
    if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
    HEAP32[i15 >> 2] = HEAPU8[HEAP32[i8 >> 2] >> 0];
    do if ((HEAP32[i15 >> 2] | 0) == 92) {
     if (!(HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0)) {
      i3 = 125;
      break;
     }
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    } else i3 = 125; while (0);
    do if ((i3 | 0) == 125) {
     i3 = 0;
     if ((HEAP32[i15 >> 2] | 0) == 96) {
      if (!(HEAP32[i16 >> 2] | 0)) {
       HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[i8 >> 2];
       HEAP32[i17 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
      }
      HEAP32[i16 >> 2] = ((HEAP32[i16 >> 2] | 0) != 0 ^ 1) & 1;
      break;
     }
     if (!((HEAP32[i15 >> 2] | 0) == 124 | (HEAP32[i15 >> 2] | 0) == 10 | (HEAP32[i15 >> 2] | 0) == 34 | (HEAP32[i15 >> 2] | 0) == 32 | (HEAP32[i15 >> 2] | 0) == 9)) break;
     HEAP32[i11 >> 2] = 0;
     while (1) {
      if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
      HEAP32[i15 >> 2] = HEAPU8[HEAP32[i8 >> 2] >> 0];
      if ((HEAP32[i15 >> 2] | 0) == 96) break;
      if (_vim_isfilec_or_wc(HEAP32[i15 >> 2] | 0) | 0) break;
      HEAP32[i11 >> 2] = 1;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
     }
     i7 = HEAP32[i8 >> 2] | 0;
     if (HEAP32[i16 >> 2] | 0) HEAP32[i17 >> 2] = i7; else HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = i7;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (0 - (HEAP32[i11 >> 2] | 0));
    } while (0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   if ((HEAP32[i17 >> 2] | 0) != 0 & (HEAP32[i16 >> 2] | 0) != 0) HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[i17 >> 2];
   HEAP32[HEAP32[i6 >> 2] >> 2] = 2;
   do if (HEAP32[i14 >> 2] | 0) i3 = 145; else {
    if ((HEAP32[i12 + 16 >> 2] | 0) == 532) {
     i3 = 145;
     break;
    }
    if ((HEAP32[i12 + 16 >> 2] | 0) == 460) i3 = 145;
   } while (0);
   do if ((i3 | 0) == 145) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 1;
    i7 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
    if ((i7 | 0) != (_skipwhite(HEAP32[i10 >> 2] | 0) | 0)) break;
    HEAP32[HEAP32[i6 >> 2] >> 2] = 32;
   } while (0);
   if ((HEAPU8[HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] >> 0] | 0) != 36) break;
   HEAP32[i8 >> 2] = (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + 1;
   while (1) {
    if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
    if (!(_vim_isIDc(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0)) break;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   if (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) break;
   HEAP32[HEAP32[i6 >> 2] >> 2] = 26;
   i7 = (HEAP32[i6 >> 2] | 0) + 4 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  } while (0);
  L222 : do switch (HEAP32[i12 + 16 >> 2] | 0) {
  case 445:
  case 392:
  case 149:
   {
    if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 2) break L222;
    HEAP32[HEAP32[i6 >> 2] >> 2] = 38;
    break;
   }
  case 213:
  case 212:
  case 66:
  case 56:
   {
    if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 2) break L222;
    HEAP32[HEAP32[i6 >> 2] >> 2] = 3;
    break;
   }
  case 167:
   {
    HEAP32[HEAP32[i6 >> 2] >> 2] = 8;
    HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[i10 >> 2];
    break;
   }
  case 512:
  case 491:
  case 490:
  case 470:
  case 443:
  case 441:
  case 397:
  case 374:
  case 363:
  case 292:
  case 288:
  case 243:
  case 222:
  case 218:
  case 216:
  case 199:
  case 197:
  case 198:
  case 200:
  case 174:
  case 156:
  case 157:
  case 105:
  case 91:
  case 61:
  case 57:
  case 39:
  case 37:
  case 30:
  case 25:
  case 10:
  case 3:
   {
    HEAP32[i5 >> 2] = HEAP32[i10 >> 2];
    i19 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i19 | 0;
   }
  case 148:
   {
    if (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) HEAP32[i10 >> 2] = _skip_vimgrep_pat(HEAP32[i10 >> 2] | 0, 0, 0) | 0;
    do if (HEAP32[i10 >> 2] | 0) {
     if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
     HEAP32[i5 >> 2] = _skipwhite(HEAP32[i10 >> 2] | 0) | 0;
     i19 = HEAP32[i5 >> 2] | 0;
     STACKTOP = i4;
     return i19 | 0;
    } while (0);
    HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    i19 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i19 | 0;
   }
  default:
   {}
  } while (0);
  HEAP32[i5 >> 2] = 0;
  i19 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i19 | 0;
 }
 HEAP32[i5 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 i19 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i19 | 0;
}

function _mark_adjust_internal(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i7 + 36 | 0;
 i9 = i7 + 32 | 0;
 i10 = i7 + 28 | 0;
 i11 = i7 + 24 | 0;
 i12 = i7 + 16 | 0;
 i13 = i7 + 12 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i7 + 20 >> 2] = i5;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
 if ((HEAP32[i11 >> 2] | 0) == 0 ? (HEAP32[i9 >> 2] | 0) < (HEAP32[i8 >> 2] | 0) : 0) {
  STACKTOP = i7;
  return;
 }
 do if (!(HEAP32[27133] | 0)) {
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >= 26) break;
   HEAP32[i14 >> 2] = (HEAP32[26773] | 0) + 188 + (HEAP32[i12 >> 2] << 3);
   do if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
    HEAP32[HEAP32[i14 >> 2] >> 2] = 0;
    break;
   } else {
    i5 = HEAP32[i14 >> 2] | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
    break;
   } else i6 = 10; else i6 = 10; while (0);
   if ((i6 | 0) == 10) {
    i6 = 0;
    if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
     i5 = HEAP32[i14 >> 2] | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
    }
   }
   do if ((HEAP32[103600 + (HEAP32[i12 >> 2] << 4) + 8 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) {
    HEAP32[i14 >> 2] = 103600 + (HEAP32[i12 >> 2] << 4);
    if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
     HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2];
     break;
    } else {
     i5 = HEAP32[i14 >> 2] | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
     break;
    }
    if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
     i5 = HEAP32[i14 >> 2] | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
    }
   } while (0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  HEAP32[i12 >> 2] = 26;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >= 36) break;
   do if ((HEAP32[103600 + (HEAP32[i12 >> 2] << 4) + 8 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) {
    HEAP32[i14 >> 2] = 103600 + (HEAP32[i12 >> 2] << 4);
    if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
     HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2];
     break;
    } else {
     i5 = HEAP32[i14 >> 2] | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
     break;
    }
    if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
     i5 = HEAP32[i14 >> 2] | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
    }
   } while (0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  HEAP32[i14 >> 2] = (HEAP32[26773] | 0) + 428;
  do if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
   HEAP32[HEAP32[i14 >> 2] >> 2] = 0;
   break;
  } else {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
   break;
  } else i6 = 40; else i6 = 40; while (0);
  if ((i6 | 0) == 40) if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  }
  HEAP32[i14 >> 2] = (HEAP32[26773] | 0) + 436;
  do if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
   HEAP32[HEAP32[i14 >> 2] >> 2] = 0;
   break;
  } else {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
   break;
  } else i6 = 48; else i6 = 48; while (0);
  if ((i6 | 0) == 48) if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  }
  if ((HEAP32[(HEAP32[26773] | 0) + 420 >> 2] | 0) == 1) {
   if (HEAP32[(HEAP32[26773] | 0) + 420 + 4 >> 2] | 0) i6 = 53;
  } else i6 = 53;
  do if ((i6 | 0) == 53) {
   HEAP32[i14 >> 2] = (HEAP32[26773] | 0) + 420;
   if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
    HEAP32[HEAP32[i14 >> 2] >> 2] = 0;
    break;
   } else {
    i5 = HEAP32[i14 >> 2] | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
    break;
   }
   if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
    i5 = HEAP32[i14 >> 2] | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
   }
  } while (0);
  HEAP32[i14 >> 2] = (HEAP32[26773] | 0) + 396;
  do if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
   HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2];
   break;
  } else {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
   break;
  } else i6 = 66; else i6 = 66; while (0);
  if ((i6 | 0) == 66) if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  }
  HEAP32[i14 >> 2] = (HEAP32[26773] | 0) + 396 + 8;
  if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
   HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2];
   break;
  } else {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
   break;
  }
  if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  }
 } while (0);
 HEAP32[i14 >> 2] = (HEAP32[26881] | 0) + 300;
 do if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
  HEAP32[HEAP32[i14 >> 2] >> 2] = 0;
  break;
 } else {
  i5 = HEAP32[i14 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  break;
 } else i6 = 82; else i6 = 82; while (0);
 if ((i6 | 0) == 82) if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
  i5 = HEAP32[i14 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 }
 HEAP32[i14 >> 2] = (HEAP32[26881] | 0) + 308;
 do if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
  HEAP32[HEAP32[i14 >> 2] >> 2] = 0;
  break;
 } else {
  i5 = HEAP32[i14 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  break;
 } else i6 = 90; else i6 = 90; while (0);
 if ((i6 | 0) == 90) if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
  i5 = HEAP32[i14 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 }
 do if (HEAP32[26794] | 0) {
  HEAP32[i14 >> 2] = 107176;
  if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
   HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2];
   break;
  } else {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
   break;
  }
  if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
   i5 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  }
 } while (0);
 HEAP32[i16 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i16 >> 2] | 0)) break;
  if ((HEAP32[i16 >> 2] | 0) == (HEAP32[26886] | 0)) i17 = HEAP32[26887] | 0; else i17 = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i15 >> 2] = i17;
  while (1) {
   if (!(HEAP32[i15 >> 2] | 0)) break;
   do if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[26773] | 0)) {
    L152 : do if (!(HEAP32[27133] | 0)) {
     HEAP32[i12 >> 2] = 0;
     while (1) {
      if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[(HEAP32[i15 >> 2] | 0) + 800 >> 2] | 0)) break L152;
      L157 : do if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 316 + ((HEAP32[i12 >> 2] | 0) * 24 | 0) + 4 + 8 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) {
       HEAP32[i14 >> 2] = (HEAP32[i15 >> 2] | 0) + 316 + ((HEAP32[i12 >> 2] | 0) * 24 | 0) + 4;
       do if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
        if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) break;
        if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
         HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2];
         break L157;
        } else {
         i5 = HEAP32[i14 >> 2] | 0;
         HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
         break L157;
        }
       } while (0);
       if (HEAP32[i11 >> 2] | 0) {
        if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) break;
        i5 = HEAP32[i14 >> 2] | 0;
        HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
       }
      } while (0);
      HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
     }
    } while (0);
    do if (HEAP32[(HEAP32[i15 >> 2] | 0) + 44 >> 2] | 0) {
     HEAP32[i14 >> 2] = (HEAP32[i15 >> 2] | 0) + 44;
     do if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
      HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2];
      break;
     } else {
      i5 = HEAP32[i14 >> 2] | 0;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
      break;
     } else i6 = 129; else i6 = 129; while (0);
     if ((i6 | 0) == 129) {
      i6 = 0;
      if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
       i5 = HEAP32[i14 >> 2] | 0;
       HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
      }
     }
     HEAP32[i14 >> 2] = (HEAP32[i15 >> 2] | 0) + 56;
     if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) == 2147483647) {
      HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i8 >> 2];
      break;
     } else {
      i5 = HEAP32[i14 >> 2] | 0;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
      break;
     }
     if (HEAP32[i11 >> 2] | 0) if ((HEAP32[HEAP32[i14 >> 2] >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
      i5 = HEAP32[i14 >> 2] | 0;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
     }
    } while (0);
    if ((HEAP32[i15 >> 2] | 0) != (HEAP32[26881] | 0)) {
     do if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 68 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 68 >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) {
      if ((HEAP32[i10 >> 2] | 0) != 2147483647) {
       i5 = (HEAP32[i15 >> 2] | 0) + 68 | 0;
       HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
       break;
      }
      if ((HEAP32[i8 >> 2] | 0) <= 1) {
       HEAP32[(HEAP32[i15 >> 2] | 0) + 68 >> 2] = 1;
       break;
      } else {
       HEAP32[(HEAP32[i15 >> 2] | 0) + 68 >> 2] = (HEAP32[i8 >> 2] | 0) - 1;
       break;
      }
     } else i6 = 148; else i6 = 148; while (0);
     if ((i6 | 0) == 148) {
      i6 = 0;
      if (HEAP32[i11 >> 2] | 0) if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 68 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
       i5 = (HEAP32[i15 >> 2] | 0) + 68 | 0;
       HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
      }
     }
     if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 24 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 24 >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) {
      if ((HEAP32[i10 >> 2] | 0) != 2147483647) {
       i5 = (HEAP32[i15 >> 2] | 0) + 24 | 0;
       HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
       break;
      }
      if ((HEAP32[i8 >> 2] | 0) <= 1) HEAP32[(HEAP32[i15 >> 2] | 0) + 24 >> 2] = 1; else HEAP32[(HEAP32[i15 >> 2] | 0) + 24 >> 2] = (HEAP32[i8 >> 2] | 0) - 1;
      HEAP32[(HEAP32[i15 >> 2] | 0) + 24 + 4 >> 2] = 0;
      break;
     }
     if (HEAP32[i11 >> 2] | 0) if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
      i5 = (HEAP32[i15 >> 2] | 0) + 24 | 0;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
     }
    }
   } while (0);
   HEAP32[i15 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2];
  }
  HEAP32[i16 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
 }
 STACKTOP = i7;
 return;
}

function _printf_core(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 16 | 0;
 i9 = i7;
 i10 = i7 + 24 | 0;
 i11 = i7 + 8 | 0;
 i12 = i7 + 20 | 0;
 HEAP32[i8 >> 2] = i2;
 i2 = (i1 | 0) != 0;
 i13 = i10 + 40 | 0;
 i14 = i13;
 i15 = i10 + 39 | 0;
 i10 = i11 + 4 | 0;
 i16 = 0;
 i17 = 0;
 i18 = 0;
 L1 : while (1) {
  i19 = i16;
  i20 = i17;
  while (1) {
   do if ((i20 | 0) > -1) if ((i19 | 0) > (2147483647 - i20 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 75;
    i21 = -1;
    break;
   } else {
    i21 = i19 + i20 | 0;
    break;
   } else i21 = i20; while (0);
   i22 = HEAP32[i8 >> 2] | 0;
   i23 = HEAP8[i22 >> 0] | 0;
   if (!(i23 << 24 >> 24)) {
    i6 = 94;
    break L1;
   }
   i24 = i23;
   i23 = i22;
   L12 : while (1) {
    switch (i24 << 24 >> 24) {
    case 37:
     {
      i6 = 10;
      break L12;
      break;
     }
    case 0:
     {
      i25 = i23;
      break L12;
      break;
     }
    default:
     {}
    }
    i26 = i23 + 1 | 0;
    HEAP32[i8 >> 2] = i26;
    i24 = HEAP8[i26 >> 0] | 0;
    i23 = i26;
   }
   L15 : do if ((i6 | 0) == 10) {
    i6 = 0;
    i24 = i23;
    i26 = i23;
    while (1) {
     if ((HEAP8[i26 + 1 >> 0] | 0) != 37) {
      i25 = i24;
      break L15;
     }
     i27 = i24 + 1 | 0;
     i26 = i26 + 2 | 0;
     HEAP32[i8 >> 2] = i26;
     if ((HEAP8[i26 >> 0] | 0) != 37) {
      i25 = i27;
      break;
     } else i24 = i27;
    }
   } while (0);
   i19 = i25 - i22 | 0;
   if (i2) _out(i1, i22, i19);
   if (!i19) break; else i20 = i21;
  }
  i20 = (_isdigit(HEAP8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  i19 = HEAP32[i8 >> 2] | 0;
  if (i20) {
   i28 = -1;
   i29 = i18;
   i30 = 1;
  } else if ((HEAP8[i19 + 2 >> 0] | 0) == 36) {
   i28 = (HEAP8[i19 + 1 >> 0] | 0) + -48 | 0;
   i29 = 1;
   i30 = 3;
  } else {
   i28 = -1;
   i29 = i18;
   i30 = 1;
  }
  i20 = i19 + i30 | 0;
  HEAP32[i8 >> 2] = i20;
  i19 = HEAP8[i20 >> 0] | 0;
  i23 = (i19 << 24 >> 24) + -32 | 0;
  if (i23 >>> 0 > 31 | (1 << i23 & 75913 | 0) == 0) {
   i31 = 0;
   i32 = i19;
   i33 = i20;
  } else {
   i19 = 0;
   i24 = i23;
   i23 = i20;
   while (1) {
    i20 = 1 << i24 | i19;
    i26 = i23 + 1 | 0;
    HEAP32[i8 >> 2] = i26;
    i27 = HEAP8[i26 >> 0] | 0;
    i24 = (i27 << 24 >> 24) + -32 | 0;
    if (i24 >>> 0 > 31 | (1 << i24 & 75913 | 0) == 0) {
     i31 = i20;
     i32 = i27;
     i33 = i26;
     break;
    } else {
     i19 = i20;
     i23 = i26;
    }
   }
  }
  if (i32 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[i33 + 1 >> 0] | 0) | 0)) i6 = 27; else {
    i23 = HEAP32[i8 >> 2] | 0;
    if ((HEAP8[i23 + 2 >> 0] | 0) == 36) {
     i19 = i23 + 1 | 0;
     HEAP32[i5 + ((HEAP8[i19 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i34 = HEAP32[i4 + ((HEAP8[i19 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i35 = 1;
     i36 = i23 + 3 | 0;
    } else i6 = 27;
   }
   if ((i6 | 0) == 27) {
    i6 = 0;
    if (i29 | 0) {
     i37 = -1;
     break;
    }
    if (i2) {
     i23 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     i19 = HEAP32[i23 >> 2] | 0;
     HEAP32[i3 >> 2] = i23 + 4;
     i38 = i19;
    } else i38 = 0;
    i34 = i38;
    i35 = 0;
    i36 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
   }
   HEAP32[i8 >> 2] = i36;
   i19 = (i34 | 0) < 0;
   i39 = i19 ? 0 - i34 | 0 : i34;
   i40 = i19 ? i31 | 8192 : i31;
   i41 = i35;
   i42 = i36;
  } else {
   i19 = _getint(i8) | 0;
   if ((i19 | 0) < 0) {
    i37 = -1;
    break;
   }
   i39 = i19;
   i40 = i31;
   i41 = i29;
   i42 = HEAP32[i8 >> 2] | 0;
  }
  do if ((HEAP8[i42 >> 0] | 0) == 46) {
   i19 = i42 + 1 | 0;
   if ((HEAP8[i19 >> 0] | 0) != 42) {
    HEAP32[i8 >> 2] = i19;
    i19 = _getint(i8) | 0;
    i43 = i19;
    i44 = HEAP32[i8 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[i42 + 2 >> 0] | 0) | 0) {
    i19 = HEAP32[i8 >> 2] | 0;
    if ((HEAP8[i19 + 3 >> 0] | 0) == 36) {
     i23 = i19 + 2 | 0;
     HEAP32[i5 + ((HEAP8[i23 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i24 = HEAP32[i4 + ((HEAP8[i23 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i23 = i19 + 4 | 0;
     HEAP32[i8 >> 2] = i23;
     i43 = i24;
     i44 = i23;
     break;
    }
   }
   if (i41 | 0) {
    i37 = -1;
    break L1;
   }
   if (i2) {
    i23 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i24 = HEAP32[i23 >> 2] | 0;
    HEAP32[i3 >> 2] = i23 + 4;
    i45 = i24;
   } else i45 = 0;
   i24 = (HEAP32[i8 >> 2] | 0) + 2 | 0;
   HEAP32[i8 >> 2] = i24;
   i43 = i45;
   i44 = i24;
  } else {
   i43 = -1;
   i44 = i42;
  } while (0);
  i24 = 0;
  i23 = i44;
  while (1) {
   if (((HEAP8[i23 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    i37 = -1;
    break L1;
   }
   i19 = i23;
   i23 = i23 + 1 | 0;
   HEAP32[i8 >> 2] = i23;
   i46 = HEAP8[(HEAP8[i19 >> 0] | 0) + -65 + (98047 + (i24 * 58 | 0)) >> 0] | 0;
   i47 = i46 & 255;
   if ((i47 + -1 | 0) >>> 0 >= 8) break; else i24 = i47;
  }
  if (!(i46 << 24 >> 24)) {
   i37 = -1;
   break;
  }
  i19 = (i28 | 0) > -1;
  do if (i46 << 24 >> 24 == 19) if (i19) {
   i37 = -1;
   break L1;
  } else i6 = 54; else {
   if (i19) {
    HEAP32[i5 + (i28 << 2) >> 2] = i47;
    i26 = i4 + (i28 << 3) | 0;
    i20 = HEAP32[i26 + 4 >> 2] | 0;
    i27 = i9;
    HEAP32[i27 >> 2] = HEAP32[i26 >> 2];
    HEAP32[i27 + 4 >> 2] = i20;
    i6 = 54;
    break;
   }
   if (!i2) {
    i37 = 0;
    break L1;
   }
   _pop_arg(i9, i47, i3);
   i48 = HEAP32[i8 >> 2] | 0;
   i6 = 55;
  } while (0);
  if ((i6 | 0) == 54) {
   i6 = 0;
   if (i2) {
    i48 = i23;
    i6 = 55;
   } else i49 = 0;
  }
  L77 : do if ((i6 | 0) == 55) {
   i6 = 0;
   i19 = HEAP8[i48 + -1 >> 0] | 0;
   i20 = (i24 | 0) != 0 & (i19 & 15 | 0) == 3 ? i19 & -33 : i19;
   i19 = i40 & -65537;
   i27 = (i40 & 8192 | 0) == 0 ? i40 : i19;
   L79 : do switch (i20 | 0) {
   case 110:
    {
     switch ((i24 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[i9 >> 2] >> 2] = i21;
       i49 = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[i9 >> 2] >> 2] = i21;
       i49 = 0;
       break L77;
       break;
      }
     case 2:
      {
       i26 = HEAP32[i9 >> 2] | 0;
       HEAP32[i26 >> 2] = i21;
       HEAP32[i26 + 4 >> 2] = ((i21 | 0) < 0) << 31 >> 31;
       i49 = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[i9 >> 2] >> 1] = i21;
       i49 = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[i9 >> 2] >> 0] = i21;
       i49 = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[i9 >> 2] >> 2] = i21;
       i49 = 0;
       break L77;
       break;
      }
     case 7:
      {
       i26 = HEAP32[i9 >> 2] | 0;
       HEAP32[i26 >> 2] = i21;
       HEAP32[i26 + 4 >> 2] = ((i21 | 0) < 0) << 31 >> 31;
       i49 = 0;
       break L77;
       break;
      }
     default:
      {
       i49 = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     i50 = 120;
     i51 = i43 >>> 0 > 8 ? i43 : 8;
     i52 = i27 | 8;
     i6 = 67;
     break;
    }
   case 88:
   case 120:
    {
     i50 = i20;
     i51 = i43;
     i52 = i27;
     i6 = 67;
     break;
    }
   case 111:
    {
     i26 = i9;
     i53 = HEAP32[i26 >> 2] | 0;
     i54 = HEAP32[i26 + 4 >> 2] | 0;
     i26 = _fmt_o(i53, i54, i13) | 0;
     i55 = i14 - i26 | 0;
     i56 = i26;
     i57 = 0;
     i58 = 98511;
     i59 = (i27 & 8 | 0) == 0 | (i43 | 0) > (i55 | 0) ? i43 : i55 + 1 | 0;
     i60 = i27;
     i61 = i53;
     i62 = i54;
     i6 = 73;
     break;
    }
   case 105:
   case 100:
    {
     i54 = i9;
     i53 = HEAP32[i54 >> 2] | 0;
     i55 = HEAP32[i54 + 4 >> 2] | 0;
     if ((i55 | 0) < 0) {
      i54 = _i64Subtract(0, 0, i53 | 0, i55 | 0) | 0;
      i26 = tempRet0;
      i63 = i9;
      HEAP32[i63 >> 2] = i54;
      HEAP32[i63 + 4 >> 2] = i26;
      i64 = 1;
      i65 = 98511;
      i66 = i54;
      i67 = i26;
      i6 = 72;
      break L79;
     } else {
      i64 = (i27 & 2049 | 0) != 0 & 1;
      i65 = (i27 & 2048 | 0) == 0 ? ((i27 & 1 | 0) == 0 ? 98511 : 98513) : 98512;
      i66 = i53;
      i67 = i55;
      i6 = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     i55 = i9;
     i64 = 0;
     i65 = 98511;
     i66 = HEAP32[i55 >> 2] | 0;
     i67 = HEAP32[i55 + 4 >> 2] | 0;
     i6 = 72;
     break;
    }
   case 99:
    {
     HEAP8[i15 >> 0] = HEAP32[i9 >> 2];
     i68 = i15;
     i69 = 0;
     i70 = 98511;
     i71 = 1;
     i72 = i19;
     i73 = i14;
     break;
    }
   case 109:
    {
     i74 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
     i6 = 77;
     break;
    }
   case 115:
    {
     i55 = HEAP32[i9 >> 2] | 0;
     i74 = (i55 | 0) == 0 ? 98521 : i55;
     i6 = 77;
     break;
    }
   case 67:
    {
     HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
     HEAP32[i10 >> 2] = 0;
     HEAP32[i9 >> 2] = i11;
     i75 = -1;
     i6 = 81;
     break;
    }
   case 83:
    {
     if (!i43) {
      _pad_680(i1, 32, i39, 0, i27);
      i76 = 0;
      i6 = 91;
     } else {
      i75 = i43;
      i6 = 81;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     i49 = _fmt_fp(i1, +HEAPF64[i9 >> 3], i39, i43, i27, i20) | 0;
     break L77;
     break;
    }
   default:
    {
     i68 = i22;
     i69 = 0;
     i70 = 98511;
     i71 = i43;
     i72 = i27;
     i73 = i14;
    }
   } while (0);
   L103 : do if ((i6 | 0) == 67) {
    i6 = 0;
    i20 = i9;
    i55 = HEAP32[i20 >> 2] | 0;
    i53 = HEAP32[i20 + 4 >> 2] | 0;
    i20 = _fmt_x(i55, i53, i13, i50 & 32) | 0;
    i26 = (i52 & 8 | 0) == 0 | (i55 | 0) == 0 & (i53 | 0) == 0;
    i56 = i20;
    i57 = i26 ? 0 : 2;
    i58 = i26 ? 98511 : 98511 + (i50 >>> 4) | 0;
    i59 = i51;
    i60 = i52;
    i61 = i55;
    i62 = i53;
    i6 = 73;
   } else if ((i6 | 0) == 72) {
    i6 = 0;
    i56 = _fmt_u(i66, i67, i13) | 0;
    i57 = i64;
    i58 = i65;
    i59 = i43;
    i60 = i27;
    i61 = i66;
    i62 = i67;
    i6 = 73;
   } else if ((i6 | 0) == 77) {
    i6 = 0;
    i53 = _memchr(i74, 0, i43) | 0;
    i55 = (i53 | 0) == 0;
    i68 = i74;
    i69 = 0;
    i70 = 98511;
    i71 = i55 ? i43 : i53 - i74 | 0;
    i72 = i19;
    i73 = i55 ? i74 + i43 | 0 : i53;
   } else if ((i6 | 0) == 81) {
    i6 = 0;
    i53 = HEAP32[i9 >> 2] | 0;
    i55 = 0;
    while (1) {
     i26 = HEAP32[i53 >> 2] | 0;
     if (!i26) {
      i77 = i55;
      break;
     }
     i20 = _wctomb(i12, i26) | 0;
     i78 = (i20 | 0) < 0;
     if (i78 | i20 >>> 0 > (i75 - i55 | 0) >>> 0) {
      i6 = 85;
      break;
     }
     i26 = i20 + i55 | 0;
     if (i75 >>> 0 > i26 >>> 0) {
      i53 = i53 + 4 | 0;
      i55 = i26;
     } else {
      i77 = i26;
      break;
     }
    }
    if ((i6 | 0) == 85) {
     i6 = 0;
     if (i78) {
      i37 = -1;
      break L1;
     } else i77 = i55;
    }
    _pad_680(i1, 32, i39, i77, i27);
    if (!i77) {
     i76 = 0;
     i6 = 91;
    } else {
     i53 = HEAP32[i9 >> 2] | 0;
     i26 = 0;
     while (1) {
      i20 = HEAP32[i53 >> 2] | 0;
      if (!i20) {
       i76 = i77;
       i6 = 91;
       break L103;
      }
      i54 = _wctomb(i12, i20) | 0;
      i26 = i54 + i26 | 0;
      if ((i26 | 0) > (i77 | 0)) {
       i76 = i77;
       i6 = 91;
       break L103;
      }
      _out(i1, i12, i54);
      if (i26 >>> 0 >= i77 >>> 0) {
       i76 = i77;
       i6 = 91;
       break;
      } else i53 = i53 + 4 | 0;
     }
    }
   } while (0);
   if ((i6 | 0) == 73) {
    i6 = 0;
    i19 = (i61 | 0) != 0 | (i62 | 0) != 0;
    i53 = (i59 | 0) != 0 | i19;
    i26 = i14 - i56 + ((i19 ^ 1) & 1) | 0;
    i68 = i53 ? i56 : i13;
    i69 = i57;
    i70 = i58;
    i71 = i53 ? ((i59 | 0) > (i26 | 0) ? i59 : i26) : 0;
    i72 = (i59 | 0) > -1 ? i60 & -65537 : i60;
    i73 = i14;
   } else if ((i6 | 0) == 91) {
    i6 = 0;
    _pad_680(i1, 32, i39, i76, i27 ^ 8192);
    i49 = (i39 | 0) > (i76 | 0) ? i39 : i76;
    break;
   }
   i26 = i73 - i68 | 0;
   i53 = (i71 | 0) < (i26 | 0) ? i26 : i71;
   i19 = i53 + i69 | 0;
   i55 = (i39 | 0) < (i19 | 0) ? i19 : i39;
   _pad_680(i1, 32, i55, i19, i72);
   _out(i1, i70, i69);
   _pad_680(i1, 48, i55, i19, i72 ^ 65536);
   _pad_680(i1, 48, i53, i26, 0);
   _out(i1, i68, i26);
   _pad_680(i1, 32, i55, i19, i72 ^ 8192);
   i49 = i55;
  } while (0);
  i16 = i49;
  i17 = i21;
  i18 = i41;
 }
 L125 : do if ((i6 | 0) == 94) if (!i1) if (!i18) i37 = 0; else {
  i41 = 1;
  while (1) {
   i17 = HEAP32[i5 + (i41 << 2) >> 2] | 0;
   if (!i17) break;
   _pop_arg(i4 + (i41 << 3) | 0, i17, i3);
   i17 = i41 + 1 | 0;
   if (i17 >>> 0 < 10) i41 = i17; else {
    i37 = 1;
    break L125;
   }
  }
  i17 = i41;
  while (1) {
   if (HEAP32[i5 + (i17 << 2) >> 2] | 0) {
    i37 = -1;
    break L125;
   }
   i17 = i17 + 1 | 0;
   if (i17 >>> 0 >= 10) {
    i37 = 1;
    break;
   }
  }
 } else i37 = i21; while (0);
 STACKTOP = i7;
 return i37 | 0;
}

function _win_equal_rec(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i11 = i10 + 72 | 0;
 i12 = i10 + 68 | 0;
 i13 = i10 + 64 | 0;
 i14 = i10 + 60 | 0;
 i15 = i10 + 56 | 0;
 i16 = i10 + 52 | 0;
 i17 = i10 + 48 | 0;
 i18 = i10 + 44 | 0;
 i19 = i10 + 40 | 0;
 i20 = i10 + 36 | 0;
 i21 = i10 + 32 | 0;
 i22 = i10 + 28 | 0;
 i23 = i10 + 24 | 0;
 i24 = i10 + 20 | 0;
 i25 = i10 + 16 | 0;
 i26 = i10 + 12 | 0;
 i27 = i10 + 8 | 0;
 i28 = i10 + 4 | 0;
 i29 = i10;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i17 >> 2] = i7;
 HEAP32[i18 >> 2] = i8;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i28 >> 2] = 0;
 i8 = HEAP32[i13 >> 2] | 0;
 if (!(HEAP8[HEAP32[i13 >> 2] >> 0] | 0)) {
  if ((HEAP32[i8 + 12 >> 2] | 0) == (HEAP32[i18 >> 2] | 0)) if ((HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 36 >> 2] | 0) + 84 >> 2] | 0) == (HEAP32[i16 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i17 >> 2] | 0)) if ((HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 36 >> 2] | 0) + 96 >> 2] | 0) == (HEAP32[i15 >> 2] | 0)) {
   STACKTOP = i10;
   return;
  }
  HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 36 >> 2] | 0) + 84 >> 2] = HEAP32[i16 >> 2];
  _frame_new_height(HEAP32[i13 >> 2] | 0, HEAP32[i18 >> 2] | 0, 0, 0);
  HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 36 >> 2] | 0) + 96 >> 2] = HEAP32[i15 >> 2];
  _frame_new_width(HEAP32[i13 >> 2] | 0, HEAP32[i17 >> 2] | 0, 0, 0);
  _redraw_all_later(50);
  STACKTOP = i10;
  return;
 }
 i7 = (HEAP8[i8 >> 0] | 0) == 1;
 HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = HEAP32[i17 >> 2];
 HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] = HEAP32[i18 >> 2];
 i8 = HEAP32[i14 >> 2] | 0;
 if (i7) {
  if ((i8 | 0) != 118) {
   HEAP32[i19 >> 2] = _frame_minwidth(HEAP32[i13 >> 2] | 0, -1) | 0;
   if (((HEAP32[i15 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0) == (HEAP32[10174] | 0)) HEAP32[i21 >> 2] = 1; else HEAP32[i21 >> 2] = 0;
   HEAP32[i23 >> 2] = ((HEAP32[i19 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0) / ((HEAP32[27036] | 0) + 1 | 0) | 0;
   HEAP32[i28 >> 2] = _frame_has_win(HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = _frame_minwidth(HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i26 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i20 >> 2] | 0);
   do if ((HEAP32[i26 >> 2] | 0) < 0) {
    HEAP32[i25 >> 2] = (HEAP32[27037] | 0) + (HEAP32[i26 >> 2] | 0);
    HEAP32[i26 >> 2] = 0;
   } else {
    HEAP32[i25 >> 2] = -1;
    HEAP32[i24 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2];
    while (1) {
     if (!(HEAP32[i24 >> 2] | 0)) break;
     if (_frame_fixed_width(HEAP32[i24 >> 2] | 0) | 0) {
      HEAP32[i19 >> 2] = _frame_minwidth(HEAP32[i24 >> 2] | 0, -1) | 0;
      HEAP32[i27 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 4 >> 2];
      if (_frame_has_win(HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) {
       HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + ((HEAP32[27037] | 0) - (HEAP32[27036] | 0));
       HEAP32[i25 >> 2] = 0;
       if ((HEAP32[i27 >> 2] | 0) < (HEAP32[27037] | 0)) HEAP32[i27 >> 2] = HEAP32[27037];
      } else HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) - (((HEAP32[i19 >> 2] | 0) + ((HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2] | 0) == 0 ? HEAP32[i21 >> 2] | 0 : 0) | 0) / ((HEAP32[27036] | 0) + 1 | 0) | 0);
      HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - ((HEAP32[i27 >> 2] | 0) - (HEAP32[i19 >> 2] | 0));
      if ((HEAP32[i26 >> 2] | 0) < 0) {
       HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i26 >> 2] | 0);
       HEAP32[i26 >> 2] = 0;
      }
      HEAP32[(HEAP32[i24 >> 2] | 0) + 8 >> 2] = HEAP32[i27 >> 2];
     }
     HEAP32[i24 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2];
    }
    if ((HEAP32[i25 >> 2] | 0) == -1) {
     if (!(HEAP32[i28 >> 2] | 0)) {
      HEAP32[i25 >> 2] = 0;
      break;
     }
     if ((HEAP32[i23 >> 2] | 0) > 1) if ((((HEAP32[i26 >> 2] | 0) + ((HEAP32[i23 >> 2] | 0) - 2) | 0) / ((HEAP32[i23 >> 2] | 0) - 1 | 0) | 0 | 0) > (HEAP32[27037] | 0)) {
      i7 = (HEAP32[i26 >> 2] | 0) + (HEAP32[27037] | 0) + (Math_imul((HEAP32[i23 >> 2] | 0) - 1 | 0, HEAP32[27036] | 0) | 0) | 0;
      i6 = HEAP32[i23 >> 2] | 0;
      HEAP32[i25 >> 2] = (i7 + (i6 - 1) | 0) / (i6 | 0) | 0;
      HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - ((HEAP32[i25 >> 2] | 0) - (HEAP32[27037] | 0));
      break;
     }
     HEAP32[i25 >> 2] = HEAP32[27037];
    }
   } while (0);
   if (HEAP32[i28 >> 2] | 0) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
  }
  HEAP32[i24 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i24 >> 2] | 0)) break;
   HEAP32[i22 >> 2] = 1;
   do if (!(HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2] | 0)) HEAP32[i27 >> 2] = HEAP32[i17 >> 2]; else {
    i6 = HEAP32[i24 >> 2] | 0;
    if ((HEAP32[i14 >> 2] | 0) == 118) {
     HEAP32[i27 >> 2] = HEAP32[i6 + 4 >> 2];
     break;
    }
    i7 = (_frame_fixed_width(i6) | 0) != 0;
    i6 = HEAP32[i24 >> 2] | 0;
    if (i7) {
     HEAP32[i27 >> 2] = HEAP32[i6 + 8 >> 2];
     HEAP32[i22 >> 2] = 0;
     break;
    }
    HEAP32[i19 >> 2] = _frame_minwidth(i6, -1) | 0;
    HEAP32[i22 >> 2] = ((HEAP32[i19 >> 2] | 0) + ((HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2] | 0) == 0 ? HEAP32[i21 >> 2] | 0 : 0) | 0) / ((HEAP32[27036] | 0) + 1 | 0) | 0;
    HEAP32[i20 >> 2] = _frame_minwidth(HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
    if (HEAP32[i28 >> 2] | 0) HEAP32[i29 >> 2] = _frame_has_win(HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0; else HEAP32[i29 >> 2] = 0;
    if (HEAP32[i29 >> 2] | 0) HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + -1;
    if (!(HEAP32[i23 >> 2] | 0)) HEAP32[i27 >> 2] = HEAP32[i26 >> 2]; else {
     i6 = Math_imul(HEAP32[i22 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
     i7 = HEAP32[i23 >> 2] | 0;
     HEAP32[i27 >> 2] = ((i6 + ((i7 | 0) >>> 1) | 0) >>> 0) / ((i7 | 0) >>> 0) | 0;
    }
    if (HEAP32[i29 >> 2] | 0) {
     HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) - ((HEAP32[27037] | 0) - ((HEAP32[i20 >> 2] | 0) - (HEAP32[i19 >> 2] | 0)));
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i25 >> 2] | 0);
     HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - ((HEAP32[i27 >> 2] | 0) - (HEAP32[i25 >> 2] | 0));
    } else HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - (HEAP32[i27 >> 2] | 0);
    HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
   } while (0);
   if ((HEAP32[i12 >> 2] | 0) == 0 | (HEAP32[i14 >> 2] | 0) != 118) i9 = 58; else if (HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) i9 = 58; else if ((HEAP32[i27 >> 2] | 0) != (HEAP32[(HEAP32[i24 >> 2] | 0) + 4 >> 2] | 0)) i9 = 58; else if (_frame_has_win(HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) i9 = 58;
   if ((i9 | 0) == 58) {
    i9 = 0;
    _win_equal_rec(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i27 >> 2] | 0, HEAP32[i18 >> 2] | 0);
   }
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i27 >> 2] | 0);
   HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) - (HEAP32[i22 >> 2] | 0);
   HEAP32[i24 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2];
  }
  STACKTOP = i10;
  return;
 } else {
  if ((i8 | 0) != 104) {
   HEAP32[i19 >> 2] = _frame_minheight(HEAP32[i13 >> 2] | 0, -1) | 0;
   if ((HEAP32[26942] | 0) == 0 ? ((HEAP32[i16 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0) == (HEAP32[26876] | 0) : 0) HEAP32[i21 >> 2] = 1; else HEAP32[i21 >> 2] = 0;
   HEAP32[i23 >> 2] = ((HEAP32[i19 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0) / ((HEAP32[27035] | 0) + 1 | 0) | 0;
   HEAP32[i28 >> 2] = _frame_has_win(HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = _frame_minheight(HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i26 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i20 >> 2] | 0);
   do if ((HEAP32[i26 >> 2] | 0) < 0) {
    HEAP32[i25 >> 2] = (HEAP32[27034] | 0) + (HEAP32[i26 >> 2] | 0);
    HEAP32[i26 >> 2] = 0;
   } else {
    HEAP32[i25 >> 2] = -1;
    HEAP32[i24 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2];
    while (1) {
     if (!(HEAP32[i24 >> 2] | 0)) break;
     if (_frame_fixed_height(HEAP32[i24 >> 2] | 0) | 0) {
      HEAP32[i19 >> 2] = _frame_minheight(HEAP32[i24 >> 2] | 0, -1) | 0;
      HEAP32[i27 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2];
      if (_frame_has_win(HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) {
       HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) + ((HEAP32[27034] | 0) - (HEAP32[27035] | 0));
       HEAP32[i25 >> 2] = 0;
       if ((HEAP32[i27 >> 2] | 0) < (HEAP32[27034] | 0)) HEAP32[i27 >> 2] = HEAP32[27034];
      } else HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) - (((HEAP32[i19 >> 2] | 0) + ((HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2] | 0) == 0 ? HEAP32[i21 >> 2] | 0 : 0) | 0) / ((HEAP32[27035] | 0) + 1 | 0) | 0);
      HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - ((HEAP32[i27 >> 2] | 0) - (HEAP32[i19 >> 2] | 0));
      if ((HEAP32[i26 >> 2] | 0) < 0) {
       HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i26 >> 2] | 0);
       HEAP32[i26 >> 2] = 0;
      }
      HEAP32[(HEAP32[i24 >> 2] | 0) + 16 >> 2] = HEAP32[i27 >> 2];
     }
     HEAP32[i24 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2];
    }
    if ((HEAP32[i25 >> 2] | 0) == -1) {
     if (!(HEAP32[i28 >> 2] | 0)) {
      HEAP32[i25 >> 2] = 0;
      break;
     }
     if ((HEAP32[i23 >> 2] | 0) > 1) if ((((HEAP32[i26 >> 2] | 0) + ((HEAP32[i23 >> 2] | 0) - 2) | 0) / ((HEAP32[i23 >> 2] | 0) - 1 | 0) | 0 | 0) > (HEAP32[27034] | 0)) {
      i8 = (HEAP32[i26 >> 2] | 0) + (HEAP32[27034] | 0) + (Math_imul((HEAP32[i23 >> 2] | 0) - 1 | 0, HEAP32[27035] | 0) | 0) | 0;
      i7 = HEAP32[i23 >> 2] | 0;
      HEAP32[i25 >> 2] = (i8 + (i7 - 1) | 0) / (i7 | 0) | 0;
      HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - ((HEAP32[i25 >> 2] | 0) - (HEAP32[27034] | 0));
      break;
     }
     HEAP32[i25 >> 2] = HEAP32[27034];
    }
   } while (0);
   if (HEAP32[i28 >> 2] | 0) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
  }
  HEAP32[i24 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i24 >> 2] | 0)) break;
   HEAP32[i22 >> 2] = 1;
   do if (!(HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2] | 0)) HEAP32[i27 >> 2] = HEAP32[i18 >> 2]; else {
    i7 = HEAP32[i24 >> 2] | 0;
    if ((HEAP32[i14 >> 2] | 0) == 104) {
     HEAP32[i27 >> 2] = HEAP32[i7 + 12 >> 2];
     break;
    }
    i8 = (_frame_fixed_height(i7) | 0) != 0;
    i7 = HEAP32[i24 >> 2] | 0;
    if (i8) {
     HEAP32[i27 >> 2] = HEAP32[i7 + 16 >> 2];
     HEAP32[i22 >> 2] = 0;
     break;
    }
    HEAP32[i19 >> 2] = _frame_minheight(i7, -1) | 0;
    HEAP32[i22 >> 2] = ((HEAP32[i19 >> 2] | 0) + ((HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2] | 0) == 0 ? HEAP32[i21 >> 2] | 0 : 0) | 0) / ((HEAP32[27035] | 0) + 1 | 0) | 0;
    HEAP32[i20 >> 2] = _frame_minheight(HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
    if (HEAP32[i28 >> 2] | 0) HEAP32[i29 >> 2] = _frame_has_win(HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0; else HEAP32[i29 >> 2] = 0;
    if (HEAP32[i29 >> 2] | 0) HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + -1;
    if (!(HEAP32[i23 >> 2] | 0)) HEAP32[i27 >> 2] = HEAP32[i26 >> 2]; else {
     i7 = Math_imul(HEAP32[i22 >> 2] | 0, HEAP32[i26 >> 2] | 0) | 0;
     i8 = HEAP32[i23 >> 2] | 0;
     HEAP32[i27 >> 2] = ((i7 + ((i8 | 0) >>> 1) | 0) >>> 0) / ((i8 | 0) >>> 0) | 0;
    }
    if (HEAP32[i29 >> 2] | 0) {
     HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) - ((HEAP32[27034] | 0) - ((HEAP32[i20 >> 2] | 0) - (HEAP32[i19 >> 2] | 0)));
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i25 >> 2] | 0);
     HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - ((HEAP32[i27 >> 2] | 0) - (HEAP32[i25 >> 2] | 0));
    } else HEAP32[i26 >> 2] = (HEAP32[i26 >> 2] | 0) - (HEAP32[i27 >> 2] | 0);
    HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
   } while (0);
   if ((HEAP32[i12 >> 2] | 0) == 0 | (HEAP32[i14 >> 2] | 0) != 104) i9 = 110; else if (HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) i9 = 110; else if ((HEAP32[i27 >> 2] | 0) != (HEAP32[(HEAP32[i24 >> 2] | 0) + 12 >> 2] | 0)) i9 = 110; else if (_frame_has_win(HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) i9 = 110;
   if ((i9 | 0) == 110) {
    i9 = 0;
    _win_equal_rec(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i27 >> 2] | 0);
   }
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i27 >> 2] | 0);
   HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) - (HEAP32[i22 >> 2] | 0);
   HEAP32[i24 >> 2] = HEAP32[(HEAP32[i24 >> 2] | 0) + 24 >> 2];
  }
  STACKTOP = i10;
  return;
 }
}

function _searchit(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 i12 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i14 = i13 + 300 | 0;
 i15 = i13 + 296 | 0;
 i16 = i13 + 292 | 0;
 i17 = i13 + 288 | 0;
 i18 = i13 + 284 | 0;
 i19 = i13 + 280 | 0;
 i20 = i13 + 276 | 0;
 i21 = i13 + 272 | 0;
 i22 = i13 + 268 | 0;
 i23 = i13 + 264 | 0;
 i24 = i13 + 252 | 0;
 i25 = i13 + 248 | 0;
 i26 = i13 + 244 | 0;
 i27 = i13 + 72 | 0;
 i28 = i13 + 68 | 0;
 i29 = i13 + 64 | 0;
 i30 = i13 + 56 | 0;
 i31 = i13 + 48 | 0;
 i32 = i13 + 40 | 0;
 i33 = i13 + 32 | 0;
 i34 = i13 + 28 | 0;
 i35 = i13 + 24 | 0;
 i36 = i13 + 20 | 0;
 i37 = i13 + 16 | 0;
 i38 = i13 + 12 | 0;
 i39 = i13 + 8 | 0;
 i40 = i13 + 4 | 0;
 i41 = i13;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i17 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 HEAP32[i19 >> 2] = i5;
 HEAP32[i20 >> 2] = i6;
 HEAP32[i21 >> 2] = i7;
 HEAP32[i22 >> 2] = i8;
 HEAP32[i23 >> 2] = i9;
 HEAP32[i13 + 260 >> 2] = i10;
 HEAP32[i13 + 256 >> 2] = i11;
 HEAP32[i39 >> 2] = 0;
 HEAP32[i40 >> 2] = 1;
 HEAP32[i41 >> 2] = HEAP32[27045];
 if (!(_search_regcomp(HEAP32[i19 >> 2] | 0, 0, HEAP32[i22 >> 2] | 0, HEAP32[i21 >> 2] & 1056, i27) | 0)) {
  if (!((HEAP32[i21 >> 2] & 12 | 0) == 0 | (HEAP32[26719] | 0) != 0)) _emsg2(74580, HEAP32[26466] | 0) | 0;
  HEAP32[i14 >> 2] = 0;
  i42 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i13;
  return i42 | 0;
 }
 HEAP32[27045] = 0;
 do {
  if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0) == 2147483647) HEAP32[i36 >> 2] = 0; else HEAP32[i36 >> 2] = 1;
  i22 = (HEAP32[i21 >> 2] & 256 | 0) != 0;
  do if ((HEAP32[i18 >> 2] | 0) == 1) if (i22) {
   HEAP32[i35 >> 2] = 0;
   break;
  } else {
   HEAP32[i35 >> 2] = HEAP32[i36 >> 2];
   break;
  } else if (i22) {
   HEAP32[i35 >> 2] = HEAP32[i36 >> 2];
   break;
  } else {
   HEAP32[i35 >> 2] = 0;
   break;
  } while (0);
  i22 = HEAP32[i17 >> 2] | 0;
  HEAP32[i33 >> 2] = HEAP32[i22 >> 2];
  HEAP32[i33 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
  HEAP32[i24 >> 2] = 0;
  HEAP32[i34 >> 2] = 1;
  if (!(HEAP32[HEAP32[i17 >> 2] >> 2] | 0)) {
   HEAP32[HEAP32[i17 >> 2] >> 2] = 1;
   HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] = 0;
   HEAP32[i34 >> 2] = 0;
  }
  if ((HEAP32[i18 >> 2] | 0) == -1) if (!(HEAP32[i33 + 4 >> 2] | 0)) if (!(HEAP32[i21 >> 2] & 256)) {
   HEAP32[i25 >> 2] = (HEAP32[HEAP32[i17 >> 2] >> 2] | 0) - 1;
   HEAP32[i34 >> 2] = 0;
  } else i12 = 22; else i12 = 22; else i12 = 22;
  if ((i12 | 0) == 22) {
   i12 = 0;
   HEAP32[i25 >> 2] = HEAP32[HEAP32[i17 >> 2] >> 2];
  }
  HEAP32[i32 >> 2] = 0;
  while (1) {
   if ((HEAP32[i32 >> 2] | 0) > 1) break;
   L37 : while (1) {
    if ((HEAP32[i25 >> 2] | 0) <= 0) break;
    if ((HEAP32[i25 >> 2] | 0) > (HEAP32[HEAP32[i16 >> 2] >> 2] | 0)) break;
    do if (HEAP32[i23 >> 2] | 0) {
     i22 = HEAP32[i25 >> 2] | 0;
     i19 = HEAP32[i23 >> 2] | 0;
     if ((HEAP32[i18 >> 2] | 0) == 1) if ((i22 | 0) > (i19 | 0)) break L37; else break; else if ((i22 | 0) < (i19 | 0)) break L37; else break;
    } while (0);
    if (HEAP32[i34 >> 2] | 0) if (HEAP32[i21 >> 2] & 4096 | 0) i43 = HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0; else i43 = 0; else i43 = 0;
    HEAP32[i26 >> 2] = i43;
    HEAP32[i38 >> 2] = _vim_regexec_multi(i27, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i25 >> 2] | 0, HEAP32[i26 >> 2] | 0, 0, 0) | 0;
    if (HEAP32[27045] | 0) break;
    do if ((HEAP32[i38 >> 2] | 0) > 0) {
     i19 = i27 + 4 | 0;
     HEAP32[i31 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i31 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
     i19 = i27 + 84 | 0;
     HEAP32[i30 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i30 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
     if (((HEAP32[i25 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0) > (HEAP32[HEAP32[i16 >> 2] >> 2] | 0)) HEAP32[i28 >> 2] = 114072; else HEAP32[i28 >> 2] = _ml_get_buf(HEAP32[i16 >> 2] | 0, (HEAP32[i25 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0, 0) | 0;
     if ((HEAP32[i18 >> 2] | 0) == 1 & (HEAP32[i34 >> 2] | 0) != 0) {
      HEAP32[i37 >> 2] = 1;
      L60 : while (1) {
       if (HEAP32[i31 >> 2] | 0) break;
       if ((HEAP32[i21 >> 2] & 64 | 0) != 0 & (HEAP32[i40 >> 2] | 0) != 0) {
        if ((HEAP32[i38 >> 2] | 0) == 1) i44 = ((HEAP32[i30 + 4 >> 2] | 0) - 1 | 0) < ((HEAP32[i33 + 4 >> 2] | 0) + (HEAP32[i35 >> 2] | 0) | 0); else i44 = 0;
        i45 = i44 & 1;
       } else {
        i19 = HEAP32[i31 + 4 >> 2] | 0;
        i45 = (i19 - ((HEAPU8[(HEAP32[i28 >> 2] | 0) + i19 >> 0] | 0) == 0 & 1) | 0) < ((HEAP32[i33 + 4 >> 2] | 0) + (HEAP32[i35 >> 2] | 0) | 0) & 1;
       }
       if (!i45) break;
       do if (_vim_strchr(HEAP32[26904] | 0, 99) | 0) {
        if ((HEAP32[i38 >> 2] | 0) > 1) {
         i12 = 51;
         break L60;
        }
        HEAP32[i29 >> 2] = HEAP32[i30 + 4 >> 2];
        if ((HEAP32[i29 >> 2] | 0) != (HEAP32[i31 + 4 >> 2] | 0)) break;
        if (!(HEAPU8[(HEAP32[i28 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) >> 0] | 0)) break;
        HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
       } else {
        HEAP32[i29 >> 2] = HEAP32[i31 + 4 >> 2];
        if (!(HEAPU8[(HEAP32[i28 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) >> 0] | 0)) break;
        HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
       } while (0);
       if (!(HEAP32[i29 >> 2] | 0)) if (HEAP32[i21 >> 2] & 256 | 0) break;
       if (!(HEAPU8[(HEAP32[i28 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) >> 0] | 0)) {
        i12 = 61;
        break;
       }
       i19 = _vim_regexec_multi(i27, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0, (HEAP32[i25 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0, HEAP32[i29 >> 2] | 0, 0, 0) | 0;
       HEAP32[i38 >> 2] = i19;
       if (!i19) {
        i12 = 61;
        break;
       }
       i19 = i27 + 4 | 0;
       HEAP32[i31 >> 2] = HEAP32[i19 >> 2];
       HEAP32[i31 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
       i19 = i27 + 84 | 0;
       HEAP32[i30 >> 2] = HEAP32[i19 >> 2];
       HEAP32[i30 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
       HEAP32[i28 >> 2] = _ml_get_buf(HEAP32[i16 >> 2] | 0, (HEAP32[i25 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0, 0) | 0;
      }
      if ((i12 | 0) == 51) {
       i12 = 0;
       HEAP32[i37 >> 2] = 0;
      } else if ((i12 | 0) == 61) {
       i12 = 0;
       HEAP32[i37 >> 2] = 0;
      }
      if (!(HEAP32[i37 >> 2] | 0)) break;
     }
     if ((HEAP32[i18 >> 2] | 0) != -1) {
      i12 = 86;
      break L37;
     }
     HEAP32[i37 >> 2] = 0;
     L90 : while (1) {
      do if (!(HEAP32[i32 >> 2] | 0)) {
       i19 = HEAP32[i25 >> 2] | 0;
       if (HEAP32[i21 >> 2] & 64 | 0) {
        if ((i19 + (HEAP32[i27 + 84 >> 2] | 0) | 0) < (HEAP32[i33 >> 2] | 0)) break;
        if (((HEAP32[i25 >> 2] | 0) + (HEAP32[i27 + 84 >> 2] | 0) | 0) != (HEAP32[i33 >> 2] | 0)) break L90;
        if (((HEAP32[i27 + 84 + 4 >> 2] | 0) - 1 | 0) < ((HEAP32[i33 + 4 >> 2] | 0) + (HEAP32[i35 >> 2] | 0) | 0)) break; else break L90;
       } else {
        if ((i19 + (HEAP32[i27 + 4 >> 2] | 0) | 0) < (HEAP32[i33 >> 2] | 0)) break;
        if (((HEAP32[i25 >> 2] | 0) + (HEAP32[i27 + 4 >> 2] | 0) | 0) != (HEAP32[i33 >> 2] | 0)) break L90;
        if ((HEAP32[i27 + 4 + 4 >> 2] | 0) < ((HEAP32[i33 + 4 >> 2] | 0) + (HEAP32[i35 >> 2] | 0) | 0)) break; else break L90;
       }
      } while (0);
      HEAP32[i37 >> 2] = 1;
      i19 = i27 + 4 | 0;
      HEAP32[i31 >> 2] = HEAP32[i19 >> 2];
      HEAP32[i31 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
      i19 = i27 + 84 | 0;
      HEAP32[i30 >> 2] = HEAP32[i19 >> 2];
      HEAP32[i30 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
      do if (_vim_strchr(HEAP32[26904] | 0, 99) | 0) {
       if ((HEAP32[i38 >> 2] | 0) > 1) break L90;
       HEAP32[i29 >> 2] = HEAP32[i30 + 4 >> 2];
       if ((HEAP32[i29 >> 2] | 0) != (HEAP32[i31 + 4 >> 2] | 0)) break;
       if (!(HEAPU8[(HEAP32[i28 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) >> 0] | 0)) break;
       HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
      } else {
       if ((HEAP32[i31 >> 2] | 0) > 0) break L90;
       HEAP32[i29 >> 2] = HEAP32[i31 + 4 >> 2];
       if (!(HEAPU8[(HEAP32[i28 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) >> 0] | 0)) break;
       HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + 1;
      } while (0);
      if (!(HEAPU8[(HEAP32[i28 >> 2] | 0) + (HEAP32[i29 >> 2] | 0) >> 0] | 0)) break;
      i19 = _vim_regexec_multi(i27, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0, (HEAP32[i25 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0, HEAP32[i29 >> 2] | 0, 0, 0) | 0;
      HEAP32[i38 >> 2] = i19;
      if (!i19) break;
      HEAP32[i28 >> 2] = _ml_get_buf(HEAP32[i16 >> 2] | 0, (HEAP32[i25 >> 2] | 0) + (HEAP32[i31 >> 2] | 0) | 0, 0) | 0;
     }
     if (HEAP32[i37 >> 2] | 0) {
      i12 = 86;
      break L37;
     }
    } else {
     _line_breakcheck();
     if (HEAP32[26834] | 0) break L37;
     if (HEAP32[i32 >> 2] | 0) if ((HEAP32[i25 >> 2] | 0) == (HEAP32[i33 >> 2] | 0)) break L37;
    } while (0);
    HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
    HEAP32[i34 >> 2] = 0;
   }
   if ((i12 | 0) == 86) {
    i12 = 0;
    do if (HEAP32[i21 >> 2] & 64 | 0) if (HEAP32[i21 >> 2] & 128 | 0) i12 = 94; else {
     if ((HEAP32[i31 >> 2] | 0) == (HEAP32[i30 >> 2] | 0)) if ((HEAP32[i31 + 4 >> 2] | 0) == (HEAP32[i30 + 4 >> 2] | 0)) {
      i12 = 94;
      break;
     }
     HEAP32[HEAP32[i17 >> 2] >> 2] = (HEAP32[i25 >> 2] | 0) + (HEAP32[i30 >> 2] | 0);
     HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] = HEAP32[i30 + 4 >> 2];
     i19 = HEAP32[i17 >> 2] | 0;
     if (HEAP32[i30 + 4 >> 2] | 0) {
      i22 = i19 + 4 | 0;
      HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + -1;
      break;
     }
     if ((HEAP32[i19 >> 2] | 0) > 1) {
      i19 = HEAP32[i17 >> 2] | 0;
      HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + -1;
      i19 = _strlen(_ml_get_buf(HEAP32[i16 >> 2] | 0, HEAP32[HEAP32[i17 >> 2] >> 2] | 0, 0) | 0) | 0;
      HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] = i19;
     }
    } else i12 = 94; while (0);
    if ((i12 | 0) == 94) {
     i12 = 0;
     HEAP32[HEAP32[i17 >> 2] >> 2] = (HEAP32[i25 >> 2] | 0) + (HEAP32[i31 >> 2] | 0);
     HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] = HEAP32[i31 + 4 >> 2];
    }
    HEAP32[i24 >> 2] = 1;
    HEAP32[i40 >> 2] = 0;
    HEAP32[27046] = (HEAP32[i30 >> 2] | 0) - (HEAP32[i31 >> 2] | 0);
    HEAP32[27047] = HEAP32[i30 + 4 >> 2];
   }
   HEAP32[i34 >> 2] = 0;
   if ((HEAP32[27038] | 0) == 0 | (HEAP32[i23 >> 2] | 0) != 0) break;
   if ((HEAP32[26834] | 0) != 0 | (HEAP32[27045] | 0) != 0 | (HEAP32[i24 >> 2] | 0) != 0 | (HEAP32[i32 >> 2] | 0) != 0) break;
   if ((HEAP32[i18 >> 2] | 0) == -1) HEAP32[i25 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2]; else HEAP32[i25 >> 2] = 1;
   if (!(_shortmess(115) | 0)) if (HEAP32[i21 >> 2] & 12 | 0) _give_warning((HEAP32[i18 >> 2] | 0) == -1 ? 94349 : 94386, 1);
   HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + 1;
  }
  if ((HEAP32[26834] | 0) != 0 | (HEAP32[27045] | 0) != 0) break;
  i19 = (HEAP32[i20 >> 2] | 0) + -1 | 0;
  HEAP32[i20 >> 2] = i19;
 } while ((i19 | 0) > 0 ? (HEAP32[i24 >> 2] | 0) != 0 : 0);
 _vim_regfree(HEAP32[i27 >> 2] | 0);
 HEAP32[27045] = HEAP32[27045] | HEAP32[i41 >> 2];
 if (HEAP32[i24 >> 2] | 0) {
  if ((HEAP32[HEAP32[i17 >> 2] >> 2] | 0) > (HEAP32[HEAP32[i16 >> 2] >> 2] | 0)) {
   HEAP32[HEAP32[i17 >> 2] >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
   i24 = _strlen(_ml_get_buf(HEAP32[i16 >> 2] | 0, HEAP32[HEAP32[i17 >> 2] >> 2] | 0, 0) | 0) | 0;
   HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] = i24;
   if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0) > 0) {
    i24 = (HEAP32[i17 >> 2] | 0) + 4 | 0;
    HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + -1;
   }
  }
  HEAP32[i14 >> 2] = (HEAP32[i39 >> 2] | 0) + 1;
  i42 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i13;
  return i42 | 0;
 }
 do if (HEAP32[26834] | 0) _emsg(92420) | 0; else if ((HEAP32[i21 >> 2] & 12 | 0) == 12) {
  if (HEAP32[27038] | 0) {
   _emsg2(93382, HEAP32[26466] | 0) | 0;
   break;
  }
  i39 = HEAP32[26466] | 0;
  if (!(HEAP32[i25 >> 2] | 0)) {
   _emsg2(74612, i39) | 0;
   break;
  } else {
   _emsg2(74655, i39) | 0;
   break;
  }
 } while (0);
 HEAP32[i14 >> 2] = 0;
 i42 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i13;
 return i42 | 0;
}

function _do_ecmd(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i10 = i9 + 140 | 0;
 i11 = i9 + 136 | 0;
 i12 = i9 + 132 | 0;
 i13 = i9 + 128 | 0;
 i14 = i9 + 124 | 0;
 i15 = i9 + 120 | 0;
 i16 = i9 + 116 | 0;
 i17 = i9 + 112 | 0;
 i18 = i9 + 108 | 0;
 i19 = i9 + 104 | 0;
 i20 = i9 + 100 | 0;
 i21 = i9 + 96 | 0;
 i22 = i9 + 92 | 0;
 i23 = i9 + 80 | 0;
 i24 = i9 + 68 | 0;
 i25 = i9 + 64 | 0;
 i26 = i9 + 60 | 0;
 i27 = i9 + 56 | 0;
 i28 = i9 + 48 | 0;
 i29 = i9 + 40 | 0;
 i30 = i9 + 36 | 0;
 i31 = i9 + 32 | 0;
 i32 = i9 + 28 | 0;
 i33 = i9 + 24 | 0;
 i34 = i9 + 20 | 0;
 i35 = i9 + 16 | 0;
 i36 = i9 + 12 | 0;
 i37 = i9 + 8 | 0;
 i38 = i9 + 4 | 0;
 i39 = i9;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i17 >> 2] = i7;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i29 >> 2] = 0;
 HEAP32[i30 >> 2] = -1;
 HEAP32[i31 >> 2] = -1;
 HEAP32[i33 >> 2] = 0;
 HEAP32[i34 >> 2] = 0;
 HEAP32[i35 >> 2] = 0;
 if (HEAP32[i14 >> 2] | 0) HEAP32[i33 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 52 >> 2];
 _set_bufref(i24, HEAP32[26773] | 0);
 do if (HEAP32[i11 >> 2] | 0) {
  if ((HEAP32[i11 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0)) {
   HEAP32[i18 >> 2] = 1;
   i8 = 22;
   break;
  }
  HEAP32[i10 >> 2] = 1;
  i40 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i9;
  return i40 | 0;
 } else {
  if (!(HEAP32[i13 >> 2] | 0)) HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
  if (HEAP32[i16 >> 2] & 16 | 0) {
   if (!(HEAP32[i12 >> 2] | 0)) break;
   if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) break;
  }
  if (!(HEAP32[i12 >> 2] | 0)) {
   HEAP32[i18 >> 2] = 1;
   i8 = 22;
   break;
  }
  if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) if (!(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) {
   HEAP32[i18 >> 2] = 0;
   i8 = 22;
   break;
  }
  if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) {
   HEAP32[i12 >> 2] = HEAP32[(HEAP32[26773] | 0) + 68 >> 2];
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2];
  }
  HEAP32[i25 >> 2] = _fix_fname(HEAP32[i12 >> 2] | 0) | 0;
  if (HEAP32[i25 >> 2] | 0) HEAP32[i12 >> 2] = HEAP32[i25 >> 2];
  HEAP32[i18 >> 2] = _otherfile(HEAP32[i12 >> 2] | 0) | 0;
  i8 = 22;
 } while (0);
 L31 : do if ((i8 | 0) == 22) {
  if (HEAP32[i18 >> 2] | 0) i8 = 24; else if (HEAP32[i16 >> 2] & 4 | 0) i8 = 24; else i8 = 26;
  if ((i8 | 0) == 24) if ((HEAP32[(HEAP32[26773] | 0) + 56 >> 2] | 0) == 1) if (!(HEAP32[i16 >> 2] & 17)) i8 = 26;
  if ((i8 | 0) == 26) if (_check_changed(HEAP32[26773] | 0, (HEAP32[26891] | 0 ? 1 : 0) | (HEAP32[i18 >> 2] | 0 ? 0 : 2) | (HEAP32[i16 >> 2] & 8 | 0 ? 4 : 0) | ((HEAP32[i14 >> 2] | 0) == 0 ? 0 : 16)) | 0) {
   if (!((HEAP32[i11 >> 2] | 0) == 0 & (HEAP32[i18 >> 2] | 0) != 0 & (HEAP32[i12 >> 2] | 0) != 0)) break;
   i7 = HEAP32[i15 >> 2] | 0;
   _setaltfname(HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, (i7 | 0) < 0 ? 0 : i7 | 0) | 0;
   break;
  }
  _reset_VIsual();
  i7 = (HEAP32[i16 >> 2] & 16 | 0) != 0;
  if (HEAP32[i18 >> 2] | 0) {
   if (!i7) {
    if (!(HEAP32[27130] | 0)) HEAP32[(HEAP32[26881] | 0) + 180 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
    if (HEAP32[i17 >> 2] | 0) _buflist_altfpos(HEAP32[i17 >> 2] | 0);
   }
   do if (HEAP32[i11 >> 2] | 0) HEAP32[i22 >> 2] = _buflist_findnr(HEAP32[i11 >> 2] | 0) | 0; else if (HEAP32[i16 >> 2] & 16 | 0) {
    HEAP32[i36 >> 2] = 1;
    if (HEAP32[i33 >> 2] | 0) {
     i6 = _atol(HEAP32[i33 >> 2] | 0) | 0;
     HEAP32[i36 >> 2] = i6;
     HEAP32[i36 >> 2] = (HEAP32[i36 >> 2] | 0) <= 0 ? 1 : i6;
    }
    _buflist_new(HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i36 >> 2] | 0, 2) | 0;
    break L31;
   } else {
    HEAP32[i22 >> 2] = _buflist_new(HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, 0, 1 | (HEAP32[i16 >> 2] & 2 | 0 ? 0 : 2)) | 0;
    if (HEAP32[i17 >> 2] | 0) HEAP32[i17 >> 2] = HEAP32[26881];
    _set_bufref(i24, HEAP32[26773] | 0);
    break;
   } while (0);
   if (!(HEAP32[i22 >> 2] | 0)) break;
   if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[i19 >> 2] = 0; else {
    HEAP32[i19 >> 2] = 1;
    _set_bufref(i23, HEAP32[i22 >> 2] | 0);
    _buf_check_timestamp(HEAP32[i22 >> 2] | 0, 0) | 0;
    if (!(_bufref_valid(i23) | 0)) break;
    if ((HEAP32[26773] | 0) != (HEAP32[i24 >> 2] | 0)) break;
   }
   if ((HEAP32[i19 >> 2] | 0) != 0 & (HEAP32[i15 >> 2] | 0) == 0 | (HEAP32[i15 >> 2] | 0) == -1) {
    HEAP32[i32 >> 2] = _buflist_findfpos(HEAP32[i22 >> 2] | 0) | 0;
    HEAP32[i15 >> 2] = HEAP32[HEAP32[i32 >> 2] >> 2];
    HEAP32[i31 >> 2] = HEAP32[(HEAP32[i32 >> 2] | 0) + 4 >> 2];
   }
   if ((HEAP32[i22 >> 2] | 0) != (HEAP32[26773] | 0)) {
    if (HEAP32[(HEAP32[i22 >> 2] | 0) + 76 >> 2] | 0) HEAP32[i21 >> 2] = _vim_strsave(HEAP32[(HEAP32[i22 >> 2] | 0) + 76 >> 2] | 0) | 0;
    _set_bufref(106996, HEAP32[i22 >> 2] | 0);
    _apply_autocmds(6, 0, 0, 0, HEAP32[26773] | 0) | 0;
    if (!(_bufref_valid(106996) | 0)) {
     _delbuf_msg(HEAP32[i21 >> 2] | 0);
     break;
    }
    if ((HEAP32[i22 >> 2] | 0) == (HEAP32[26773] | 0)) HEAP32[i20 >> 2] = 1; else {
     HEAP32[i37 >> 2] = HEAP32[26881];
     HEAP32[(HEAP32[i37 >> 2] | 0) + 16 >> 2] = 1;
     i6 = (HEAP32[i22 >> 2] | 0) + 64 | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     if ((HEAP32[26773] | 0) == (HEAP32[i24 >> 2] | 0)) _buf_copy_options(HEAP32[i22 >> 2] | 0, 1);
     _u_sync(0);
     _close_buffer(HEAP32[i17 >> 2] | 0, HEAP32[26773] | 0, HEAP32[i16 >> 2] & 1 | 0 ? 0 : 2, 0);
     HEAP32[(HEAP32[i37 >> 2] | 0) + 16 >> 2] = 0;
     i6 = (HEAP32[i22 >> 2] | 0) + 64 | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
     if (!(_bufref_valid(106996) | 0)) {
      _delbuf_msg(HEAP32[i21 >> 2] | 0);
      break;
     }
     do if ((HEAP32[i22 >> 2] | 0) == (HEAP32[26773] | 0)) HEAP32[i20 >> 2] = 1; else {
      HEAP32[(HEAP32[26881] | 0) + 4 >> 2] = HEAP32[i22 >> 2];
      HEAP32[26773] = HEAP32[i22 >> 2];
      i6 = (HEAP32[26773] | 0) + 56 | 0;
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
      if (!((HEAP32[i19 >> 2] | 0) == 0 & (HEAP32[i14 >> 2] | 0) != 0)) break;
      _set_file_options(1, HEAP32[i14 >> 2] | 0);
     } while (0);
     _get_winopts(HEAP32[26773] | 0);
    }
    _vim_free(HEAP32[i21 >> 2] | 0);
    HEAP32[26749] = 0;
    HEAP32[26751] = 0;
   }
   HEAP32[(HEAP32[26881] | 0) + 300 >> 2] = 1;
   HEAP32[(HEAP32[26881] | 0) + 300 + 4 >> 2] = 0;
  } else {
   if (i7) break;
   if (!(_check_fname() | 0)) break;
   HEAP32[i19 >> 2] = HEAP32[i16 >> 2] & 4;
  }
  HEAP32[26814] = (HEAP32[26814] | 0) + 1;
  HEAP32[i35 >> 2] = 1;
  HEAP32[i22 >> 2] = HEAP32[26773];
  if ((HEAP32[i16 >> 2] & 2 | 0) != 0 | (HEAP32[26854] | 0) != 0) _prepare_help_buffer(); else if (!(HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0)) _set_buflisted(1);
  if ((HEAP32[i22 >> 2] | 0) == (HEAP32[26773] | 0)) {
   HEAP32[26747] = 0;
   if (!((HEAP32[i18 >> 2] | 0) != 0 | (HEAP32[i19 >> 2] | 0) != 0)) {
    _set_last_cursor(HEAP32[26881] | 0);
    if ((HEAP32[i15 >> 2] | 0) == -1 | (HEAP32[i15 >> 2] | 0) == 0) {
     HEAP32[i15 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     HEAP32[i31 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
    }
    HEAP32[i22 >> 2] = HEAP32[26773];
    if (HEAP32[(HEAP32[i22 >> 2] | 0) + 76 >> 2] | 0) HEAP32[i21 >> 2] = _vim_strsave(HEAP32[(HEAP32[i22 >> 2] | 0) + 76 >> 2] | 0) | 0; else HEAP32[i21 >> 2] = 0;
    _set_bufref(i23, HEAP32[i22 >> 2] | 0);
    if ((HEAP32[27021] | 0) < 0) i8 = 85; else if ((HEAP32[HEAP32[26773] >> 2] | 0) <= (HEAP32[27021] | 0)) i8 = 85; else _buf_freeall(HEAP32[26773] | 0, 0);
    do if ((i8 | 0) == 85) {
     _u_sync(0);
     if (!(_u_savecommon(0, (HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0, 0, 1) | 0)) {
      _vim_free(HEAP32[i21 >> 2] | 0);
      break L31;
     } else {
      _u_unchanged(HEAP32[26773] | 0);
      _buf_freeall(HEAP32[26773] | 0, 4);
      HEAP32[i34 >> 2] = 32;
      break;
     }
    } while (0);
    i7 = (_bufref_valid(i23) | 0) != 0;
    i6 = HEAP32[i21 >> 2] | 0;
    if (!i7) {
     _delbuf_msg(i6);
     break;
    }
    _vim_free(i6);
    if ((HEAP32[i22 >> 2] | 0) != (HEAP32[26773] | 0)) break;
    _buf_clear_file(HEAP32[26773] | 0);
    HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = 0;
    HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = 0;
   }
   HEAP32[i26 >> 2] = 1;
   _check_arg_idx(HEAP32[26881] | 0);
   if (!(HEAP32[i20 >> 2] | 0)) {
    _curwin_init();
    i6 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i28 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i28 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i29 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
    if (HEAP32[i19 >> 2] | 0) {
     _do_modelines(16);
     _apply_autocmds_retval(2, 0, 0, 0, HEAP32[26773] | 0, i26) | 0;
     _apply_autocmds_retval(13, 0, 0, 0, HEAP32[26773] | 0, i26) | 0;
    } else {
     HEAP32[26812] = 1;
     i6 = (HEAP32[26773] | 0) + 60 | 0;
     HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
     _open_buffer(0, HEAP32[i14 >> 2] | 0, HEAP32[i34 >> 2] | 0) | 0;
     if ((HEAP32[26812] | 0) == 2) HEAP32[i26 >> 2] = 0;
     _handle_swap_exists(i24);
    }
    _check_arg_idx(HEAP32[26881] | 0);
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[i28 >> 2] | 0)) {
     if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) != (HEAP32[i28 + 4 >> 2] | 0)) i8 = 101;
    } else i8 = 101;
    do if ((i8 | 0) == 101) {
     HEAP32[i38 >> 2] = _ml_get_curline() | 0;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[i28 >> 2] | 0)) {
      i6 = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0;
      i7 = _skipwhite(HEAP32[i38 >> 2] | 0) | 0;
      if ((i6 | 0) == (i7 - (HEAP32[i38 >> 2] | 0) | 0)) break;
     }
     HEAP32[i15 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     HEAP32[i30 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
    } while (0);
    if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) == (HEAP32[i29 >> 2] | 0)) HEAP32[i29 >> 2] = 0;
    _changed_line_abv_curs();
   }
   do if (!(HEAP32[i33 >> 2] | 0)) {
    i7 = HEAP32[i15 >> 2] | 0;
    if ((HEAP32[i30 >> 2] | 0) >= 0) {
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i7;
     HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i30 >> 2];
     _check_cursor();
     break;
    }
    if ((i7 | 0) > 0) {
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i15 >> 2];
     _check_cursor_lnum();
     if ((HEAP32[i31 >> 2] | 0) < 0 | (HEAP32[26996] | 0) != 0) {
      _beginline(6);
      break;
     } else {
      HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i31 >> 2];
      _check_cursor_col();
      HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
      break;
     }
    } else {
     if (HEAP32[26798] | 0) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
     _beginline(5);
     break;
    }
   } while (0);
   _check_lnums(0);
   if (!((HEAP32[i19 >> 2] | 0) == 0 | (HEAP32[i20 >> 2] | 0) != 0)) {
    HEAP32[i39 >> 2] = HEAP32[26710];
    i7 = (_shortmess(79) | 0) == 0;
    if (((i7 | (HEAP32[26778] | 0) != 0) ^ 1) & (HEAP32[26888] | 0) == 0) HEAP32[26710] = 0;
    if (!(HEAP32[26710] | 0)) _check_for_delay(0);
    _msg_start();
    HEAP32[26710] = HEAP32[i39 >> 2];
    HEAP32[26705] = 1;
    if (!(_shortmess(70) | 0)) _fileinfo(0, 1, 0);
    HEAP32[26705] = 0;
   }
   if (HEAP32[i33 >> 2] | 0) _do_cmdline(HEAP32[i33 >> 2] | 0, 0, 0, 1) | 0;
   HEAP32[26814] = (HEAP32[26814] | 0) + -1;
   HEAP32[i35 >> 2] = 0;
   if (!(HEAP32[26829] | 0)) {
    HEAP32[i27 >> 2] = HEAP32[26971];
    if ((HEAP32[i29 >> 2] | 0) == 0 & (HEAP32[i33 >> 2] | 0) == 0) HEAP32[26971] = 999;
    _update_topline();
    i7 = HEAP32[26881] | 0;
    HEAP32[i7 + 296 >> 2] = HEAP32[i7 + 68 >> 2];
    HEAP32[26971] = HEAP32[i27 >> 2];
    _redraw_curbuf_later(40);
   }
   if (HEAP32[26883] | 0) HEAP32[26843] = 1;
  }
 } while (0);
 if (HEAP32[i35 >> 2] | 0) HEAP32[26814] = (HEAP32[26814] | 0) + -1;
 _vim_free(HEAP32[i25 >> 2] | 0);
 HEAP32[i10 >> 2] = HEAP32[i26 >> 2];
 i40 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i9;
 return i40 | 0;
}

function _undo_time(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i7 = i6 + 68 | 0;
 i8 = i6 + 64 | 0;
 i9 = i6 + 60 | 0;
 i10 = i6 + 56 | 0;
 i11 = i6 + 52 | 0;
 i12 = i6 + 48 | 0;
 i13 = i6 + 44 | 0;
 i14 = i6 + 40 | 0;
 i15 = i6 + 36 | 0;
 i16 = i6 + 32 | 0;
 i17 = i6 + 28 | 0;
 i18 = i6 + 24 | 0;
 i19 = i6 + 20 | 0;
 i20 = i6 + 16 | 0;
 i21 = i6 + 12 | 0;
 i22 = i6 + 8 | 0;
 i23 = i6 + 4 | 0;
 i24 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i21 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i22 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i23 >> 2] = 0;
 HEAP32[i24 >> 2] = 1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 516 >> 2] | 0)) _u_sync(1);
 HEAP32[26623] = 0;
 HEAP32[26624] = 0;
 HEAP32[26624] = HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0 ? -1 : 0;
 do if (HEAP32[i10 >> 2] | 0) {
  HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i12 >> 2] = -1;
 } else {
  do if (HEAP32[i21 >> 2] | 0) HEAP32[i11 >> 2] = (HEAP32[(HEAP32[26773] | 0) + 532 >> 2] | 0) + (HEAP32[i7 >> 2] | 0); else {
   if (!(HEAP32[i22 >> 2] | 0)) {
    HEAP32[i11 >> 2] = (HEAP32[(HEAP32[26773] | 0) + 528 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
    break;
   }
   i9 = HEAP32[26773] | 0;
   if ((HEAP32[i7 >> 2] | 0) >= 0) {
    HEAP32[i11 >> 2] = (HEAP32[i9 + 536 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
    if ((HEAP32[i11 >> 2] | 0) <= (HEAP32[(HEAP32[26773] | 0) + 524 >> 2] | 0)) break;
    HEAP32[i11 >> 2] = (HEAP32[(HEAP32[26773] | 0) + 520 >> 2] | 0) + 1;
    HEAP32[i22 >> 2] = 0;
    break;
   }
   HEAP32[i16 >> 2] = HEAP32[i9 + 508 >> 2];
   if (HEAP32[i16 >> 2] | 0) HEAP32[i16 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2]; else HEAP32[i16 >> 2] = HEAP32[(HEAP32[26773] | 0) + 504 >> 2];
   if (HEAP32[i16 >> 2] | 0) if (HEAP32[(HEAP32[i16 >> 2] | 0) + 280 >> 2] | 0) HEAP32[i11 >> 2] = (HEAP32[(HEAP32[26773] | 0) + 536 >> 2] | 0) + (HEAP32[i7 >> 2] | 0); else i5 = 15; else i5 = 15;
   if ((i5 | 0) == 15) HEAP32[i11 >> 2] = (HEAP32[(HEAP32[26773] | 0) + 536 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) + 1;
   if ((HEAP32[i11 >> 2] | 0) <= 0) HEAP32[i22 >> 2] = 0;
  } while (0);
  if ((HEAP32[i7 >> 2] | 0) < 0) {
   if ((HEAP32[i11 >> 2] | 0) < 0) HEAP32[i11 >> 2] = 0;
   HEAP32[i12 >> 2] = -1;
   break;
  }
  do if (HEAP32[i21 >> 2] | 0) HEAP32[i12 >> 2] = (_vim_time() | 0) + 1; else {
   i9 = HEAP32[26773] | 0;
   if (HEAP32[i22 >> 2] | 0) {
    HEAP32[i12 >> 2] = (HEAP32[i9 + 524 >> 2] | 0) + 2;
    break;
   } else {
    HEAP32[i12 >> 2] = (HEAP32[i9 + 520 >> 2] | 0) + 2;
    break;
   }
  } while (0);
  if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) HEAP32[i11 >> 2] = (HEAP32[i12 >> 2] | 0) - 1;
 } while (0);
 HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[26773] | 0) + 528 >> 2];
 L44 : do if (!(HEAP32[i11 >> 2] | 0)) HEAP32[i18 >> 2] = HEAP32[26625]; else {
  HEAP32[i20 >> 2] = 1;
  while (1) {
   if ((HEAP32[i20 >> 2] | 0) > 2) break L44;
   i9 = (HEAP32[26625] | 0) + 1 | 0;
   HEAP32[26625] = i9;
   HEAP32[i18 >> 2] = i9;
   i9 = (HEAP32[26625] | 0) + 1 | 0;
   HEAP32[26625] = i9;
   HEAP32[i19 >> 2] = i9;
   i9 = HEAP32[26773] | 0;
   if (!(HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0)) HEAP32[i16 >> 2] = HEAP32[i9 + 504 >> 2]; else HEAP32[i16 >> 2] = HEAP32[i9 + 508 >> 2];
   while (1) {
    if (!(HEAP32[i16 >> 2] | 0)) break;
    HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] = HEAP32[i18 >> 2];
    do if (HEAP32[i21 >> 2] | 0) HEAP32[i15 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 276 >> 2]; else {
     i9 = HEAP32[i16 >> 2] | 0;
     if (HEAP32[i22 >> 2] | 0) {
      HEAP32[i15 >> 2] = HEAP32[i9 + 280 >> 2];
      break;
     } else {
      HEAP32[i15 >> 2] = HEAP32[i9 + 16 >> 2];
      break;
     }
    } while (0);
    L64 : do if ((HEAP32[i20 >> 2] | 0) == 1) if (!((HEAP32[i22 >> 2] | 0) != 0 & (HEAP32[i15 >> 2] | 0) == 0)) {
     i9 = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0;
     i8 = HEAP32[(HEAP32[26773] | 0) + 528 >> 2] | 0;
     if ((HEAP32[i7 >> 2] | 0) < 0) {
      if ((i9 | 0) > (i8 | 0)) break;
     } else if ((i9 | 0) <= (i8 | 0)) break;
     do if (HEAP32[i21 >> 2] | 0) if ((HEAP32[i15 >> 2] | 0) == (HEAP32[i12 >> 2] | 0)) {
      i8 = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0;
      i9 = HEAP32[i14 >> 2] | 0;
      if ((HEAP32[i7 >> 2] | 0) < 0) if ((i8 | 0) < (i9 | 0)) break; else break L64; else if ((i8 | 0) > (i9 | 0)) break; else break L64;
     } else i5 = 56; else i5 = 56; while (0);
     do if ((i5 | 0) == 56) {
      i5 = 0;
      if ((HEAP32[i12 >> 2] | 0) != (HEAP32[i13 >> 2] | 0)) {
       i9 = (HEAP32[i12 >> 2] | 0) > (HEAP32[i11 >> 2] | 0);
       if ((HEAP32[i15 >> 2] | 0) > (HEAP32[i11 >> 2] | 0)) {
        i8 = (HEAP32[i15 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0;
        if (i9) if ((i8 | 0) <= ((HEAP32[i12 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0)) break; else break L64; else if ((i8 | 0) <= ((HEAP32[i11 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0)) break; else break L64;
       } else {
        i8 = (HEAP32[i11 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0;
        if (i9) if ((i8 | 0) <= ((HEAP32[i12 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0)) break; else break L64; else if ((i8 | 0) <= ((HEAP32[i11 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0)) break; else break L64;
       }
      }
     } while (0);
     HEAP32[i12 >> 2] = HEAP32[i15 >> 2];
     HEAP32[i14 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2];
    } while (0);
    i25 = HEAP32[i16 >> 2] | 0;
    if (!(HEAP32[i21 >> 2] | 0 ? 1 : (HEAP32[i11 >> 2] | 0) != (HEAP32[i15 >> 2] | 0))) {
     i5 = 66;
     break;
    }
    if (HEAP32[i25 + 4 >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i19 >> 2] | 0)) if ((HEAP32[(HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i18 >> 2] | 0)) HEAP32[i16 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2]; else i5 = 71; else i5 = 71; else i5 = 71;
    do if ((i5 | 0) == 71) {
     i5 = 0;
     if (HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i19 >> 2] | 0)) if ((HEAP32[(HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i18 >> 2] | 0)) {
      HEAP32[i16 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2];
      break;
     }
     if (HEAP32[HEAP32[i16 >> 2] >> 2] | 0) if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] | 0)) if ((HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i19 >> 2] | 0)) if ((HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i18 >> 2] | 0)) {
      if ((HEAP32[i16 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0)) HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] = HEAP32[i19 >> 2];
      HEAP32[i16 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
      break;
     }
     HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] = HEAP32[i19 >> 2];
     i8 = HEAP32[i16 >> 2] | 0;
     if (HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] | 0) {
      HEAP32[i16 >> 2] = HEAP32[i8 + 12 >> 2];
      break;
     } else {
      HEAP32[i16 >> 2] = HEAP32[i8 >> 2];
      break;
     }
    } while (0);
   }
   if ((i5 | 0) == 66) {
    i5 = 0;
    HEAP32[i11 >> 2] = HEAP32[i25 + 16 >> 2];
   }
   if (HEAP32[i16 >> 2] | 0) break L44;
   if (HEAP32[i10 >> 2] | 0) {
    i5 = 88;
    break;
   }
   if ((HEAP32[i12 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) break;
   HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i21 >> 2] = 0;
   HEAP32[i22 >> 2] = 0;
   if ((HEAP32[i7 >> 2] | 0) < 0) HEAP32[i23 >> 2] = 1;
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
  if ((i5 | 0) == 88) {
   _emsgn(80943, HEAP32[i7 >> 2] | 0) | 0;
   STACKTOP = i6;
   return;
  }
  if ((HEAP32[i7 >> 2] | 0) < 0) {
   _msg(80726) | 0;
   STACKTOP = i6;
   return;
  } else {
   _msg(80751) | 0;
   STACKTOP = i6;
   return;
  }
 } while (0);
 L135 : do if ((HEAP32[i16 >> 2] | 0) != 0 | (HEAP32[i11 >> 2] | 0) == 0) {
  while (1) {
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   _change_warning(0);
   HEAP32[i16 >> 2] = HEAP32[(HEAP32[26773] | 0) + 508 >> 2];
   if (!(HEAP32[i16 >> 2] | 0)) HEAP32[i16 >> 2] = HEAP32[(HEAP32[26773] | 0) + 504 >> 2]; else HEAP32[i16 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
   if (!(HEAP32[i16 >> 2] | 0)) break;
   if ((HEAP32[i11 >> 2] | 0) > 0) if ((HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i18 >> 2] | 0)) break;
   if (!(HEAP32[i23 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[i11 >> 2] | 0))) break;
   HEAP32[(HEAP32[26773] | 0) + 508 >> 2] = HEAP32[i16 >> 2];
   _u_undoredo(1);
   if ((HEAP32[i11 >> 2] | 0) > 0) HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] = HEAP32[i19 >> 2];
  }
  if ((HEAP32[i11 >> 2] | 0) > 0) {
   while (1) {
    if (!((HEAP32[26834] | 0) != 0 ^ 1)) break L135;
    _change_warning(0);
    HEAP32[i16 >> 2] = HEAP32[(HEAP32[26773] | 0) + 508 >> 2];
    if (!(HEAP32[i16 >> 2] | 0)) break L135;
    while (1) {
     if (HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] | 0) i26 = (HEAP32[(HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] | 0) + 20 >> 2] | 0) == (HEAP32[i18 >> 2] | 0); else i26 = 0;
     i27 = HEAP32[i16 >> 2] | 0;
     if (!i26) break;
     HEAP32[i16 >> 2] = HEAP32[i27 + 12 >> 2];
    }
    HEAP32[i17 >> 2] = i27;
    while (1) {
     if (HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] | 0) i28 = (HEAP32[(HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] | 0) + 20 >> 2] | 0) == (HEAP32[i18 >> 2] | 0); else i28 = 0;
     i29 = HEAP32[i17 >> 2] | 0;
     if (!i28) break;
     HEAP32[i17 >> 2] = HEAP32[i29 + 8 >> 2];
    }
    if ((i29 | 0) != (HEAP32[i16 >> 2] | 0)) {
     while (1) {
      if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] | 0)) break;
      HEAP32[i16 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2];
     }
     if (HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] | 0) {
      i7 = HEAP32[i17 >> 2] | 0;
      HEAP32[(HEAP32[i7 + 8 >> 2] | 0) + 12 >> 2] = HEAP32[i7 + 12 >> 2];
     }
     i7 = HEAP32[i17 >> 2] | 0;
     HEAP32[(HEAP32[i7 + 12 >> 2] | 0) + 8 >> 2] = HEAP32[i7 + 8 >> 2];
     HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] = 0;
     HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] = HEAP32[i16 >> 2];
     HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] = HEAP32[i17 >> 2];
     if ((HEAP32[(HEAP32[26773] | 0) + 500 >> 2] | 0) == (HEAP32[i16 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 500 >> 2] = HEAP32[i17 >> 2];
     HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
     if (HEAP32[HEAP32[i16 >> 2] >> 2] | 0) HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[i16 >> 2];
    }
    HEAP32[(HEAP32[26773] | 0) + 508 >> 2] = HEAP32[i16 >> 2];
    if ((HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i18 >> 2] | 0)) break L135;
    if (HEAP32[i23 >> 2] | 0 ? (HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[i11 >> 2] | 0) : 0) {
     i5 = 135;
     break;
    }
    _u_undoredo(0);
    if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 504 >> 2] = HEAP32[i16 >> 2];
    HEAP32[(HEAP32[26773] | 0) + 508 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2];
    HEAP32[i24 >> 2] = 0;
    if ((HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) break L135;
    HEAP32[i16 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2];
    if (!(HEAP32[i16 >> 2] | 0)) {
     i5 = 141;
     break;
    }
    if ((HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i18 >> 2] | 0)) {
     i5 = 141;
     break;
    }
   }
   if ((i5 | 0) == 135) {
    HEAP32[(HEAP32[26773] | 0) + 528 >> 2] = (HEAP32[i11 >> 2] | 0) - 1;
    break;
   } else if ((i5 | 0) == 141) {
    _internal_error(80975);
    break;
   }
  }
 } while (0);
 _u_undo_end(HEAP32[i24 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _regrepeat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4 + 4 | 0;
 i13 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i8 >> 2] = HEAP32[26334];
 HEAP32[i9 >> 2] = (HEAP32[i5 >> 2] | 0) + 3;
 L1 : do switch (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) {
 case 50:
 case 20:
  {
   while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L1;
    while (1) {
     if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
     if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    }
    if (HEAP32[26312] | 0) break L1;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L1;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L1;
    if (HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) break L1;
    if ((HEAP32[i7 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) break L1;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    _reg_nextline();
    HEAP32[i8 >> 2] = HEAP32[26334];
    if (HEAP32[26834] | 0) break L1;
   }
   break;
  }
 case 53:
 case 23:
  {
   HEAP32[i11 >> 2] = 1;
   i3 = 16;
   break;
  }
 case 54:
 case 24:
  {
   i3 = 16;
   break;
  }
 case 55:
 case 25:
  {
   HEAP32[i11 >> 2] = 1;
   i3 = 35;
   break;
  }
 case 56:
 case 26:
  {
   i3 = 35;
   break;
  }
 case 57:
 case 27:
  {
   HEAP32[i11 >> 2] = 1;
   i3 = 54;
   break;
  }
 case 58:
 case 28:
  {
   i3 = 54;
   break;
  }
 case 59:
 case 29:
  {
   HEAP32[i11 >> 2] = 1;
   i3 = 73;
   break;
  }
 case 60:
 case 30:
  {
   i3 = 73;
   break;
  }
 case 61:
 case 31:
  {
   HEAP32[i10 >> 2] = 256;
   HEAP32[i11 >> 2] = 256;
   i3 = 92;
   break;
  }
 case 62:
 case 32:
  {
   HEAP32[i10 >> 2] = 256;
   i3 = 92;
   break;
  }
 case 63:
 case 33:
  {
   HEAP32[i10 >> 2] = 1;
   HEAP32[i11 >> 2] = 1;
   i3 = 92;
   break;
  }
 case 64:
 case 34:
  {
   HEAP32[i10 >> 2] = 1;
   i3 = 92;
   break;
  }
 case 65:
 case 35:
  {
   HEAP32[i10 >> 2] = 2;
   HEAP32[i11 >> 2] = 2;
   i3 = 92;
   break;
  }
 case 66:
 case 36:
  {
   HEAP32[i10 >> 2] = 2;
   i3 = 92;
   break;
  }
 case 67:
 case 37:
  {
   HEAP32[i10 >> 2] = 4;
   HEAP32[i11 >> 2] = 4;
   i3 = 92;
   break;
  }
 case 68:
 case 38:
  {
   HEAP32[i10 >> 2] = 4;
   i3 = 92;
   break;
  }
 case 69:
 case 39:
  {
   HEAP32[i10 >> 2] = 8;
   HEAP32[i11 >> 2] = 8;
   i3 = 92;
   break;
  }
 case 70:
 case 40:
  {
   HEAP32[i10 >> 2] = 8;
   i3 = 92;
   break;
  }
 case 71:
 case 41:
  {
   HEAP32[i10 >> 2] = 16;
   HEAP32[i11 >> 2] = 16;
   i3 = 92;
   break;
  }
 case 72:
 case 42:
  {
   HEAP32[i10 >> 2] = 16;
   i3 = 92;
   break;
  }
 case 73:
 case 43:
  {
   HEAP32[i10 >> 2] = 32;
   HEAP32[i11 >> 2] = 32;
   i3 = 92;
   break;
  }
 case 74:
 case 44:
  {
   HEAP32[i10 >> 2] = 32;
   i3 = 92;
   break;
  }
 case 75:
 case 45:
  {
   HEAP32[i10 >> 2] = 64;
   HEAP32[i11 >> 2] = 64;
   i3 = 92;
   break;
  }
 case 76:
 case 46:
  {
   HEAP32[i10 >> 2] = 64;
   i3 = 92;
   break;
  }
 case 77:
 case 47:
  {
   HEAP32[i10 >> 2] = 128;
   HEAP32[i11 >> 2] = 128;
   i3 = 92;
   break;
  }
 case 78:
 case 48:
  {
   HEAP32[i10 >> 2] = 128;
   i3 = 92;
   break;
  }
 case 5:
  {
   i2 = HEAPU8[HEAP32[i9 >> 2] >> 0] | 0;
   if (!(HEAP32[26323] | 0)) {
    HEAP32[i12 >> 2] = i2;
    while (1) {
     if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L1;
     if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != (HEAP32[i12 >> 2] | 0)) break L1;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    }
   }
   HEAP32[i12 >> 2] = _toupper(i2) | 0;
   HEAP32[i13 >> 2] = _tolower(HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) | 0;
   while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L1;
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != (HEAP32[i12 >> 2] | 0)) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != (HEAP32[i13 >> 2] | 0)) break L1;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   break;
  }
 case 51:
 case 21:
  {
   HEAP32[i11 >> 2] = 1;
   i3 = 136;
   break;
  }
 case 52:
 case 22:
  {
   i3 = 136;
   break;
  }
 case 18:
  {
   while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L1;
    if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
     if (!(((HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) ^ 1) & (HEAP32[26312] | 0) == 0)) i3 = 156;
    } else i3 = 156;
    if ((i3 | 0) == 156) {
     i3 = 0;
     if (!((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 10 ? (HEAP32[26322] | 0) != 0 : 0)) break L1;
    }
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    if (HEAP32[26322] | 0) HEAP32[26334] = (HEAP32[26334] | 0) + 1; else _reg_nextline();
    HEAP32[i8 >> 2] = HEAP32[26334];
    if (HEAP32[26834] | 0) break L1;
   }
   break;
  }
 default:
  _emsg(93511) | 0;
 } while (0);
 L69 : do if ((i3 | 0) == 16) while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L69;
  do if (_vim_isIDc(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0) {
   if (!(HEAP32[i11 >> 2] | 0)) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) {
    i3 = 22;
    break;
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  } else i3 = 22; while (0);
  do if ((i3 | 0) == 22) {
   i3 = 0;
   if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
    if (HEAP32[26312] | 0) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
    if (HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) break L69;
    _reg_nextline();
    HEAP32[i8 >> 2] = HEAP32[26334];
    if (HEAP32[26834] | 0) break L69; else break;
   } else {
    if (!(HEAP32[26322] | 0)) break L69;
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 10) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    break;
   }
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } else if ((i3 | 0) == 35) while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L69;
  do if (_vim_iswordp_buf(HEAP32[i8 >> 2] | 0, HEAP32[26319] | 0) | 0) {
   if (!(HEAP32[i11 >> 2] | 0)) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) {
    i3 = 41;
    break;
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  } else i3 = 41; while (0);
  do if ((i3 | 0) == 41) {
   i3 = 0;
   if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
    if (HEAP32[26312] | 0) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
    if (HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) break L69;
    _reg_nextline();
    HEAP32[i8 >> 2] = HEAP32[26334];
    if (HEAP32[26834] | 0) break L69; else break;
   } else {
    if (!(HEAP32[26322] | 0)) break L69;
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 10) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    break;
   }
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } else if ((i3 | 0) == 54) while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L69;
  do if (_vim_isfilec(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0) {
   if (!(HEAP32[i11 >> 2] | 0)) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) {
    i3 = 60;
    break;
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  } else i3 = 60; while (0);
  do if ((i3 | 0) == 60) {
   i3 = 0;
   if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
    if (HEAP32[26312] | 0) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
    if (HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) break L69;
    _reg_nextline();
    HEAP32[i8 >> 2] = HEAP32[26334];
    if (HEAP32[26834] | 0) break L69; else break;
   } else {
    if (!(HEAP32[26322] | 0)) break L69;
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 10) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    break;
   }
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } else if ((i3 | 0) == 73) while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L69;
  L143 : do if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
   if (HEAP32[26312] | 0) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
   if (HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) break L69;
   _reg_nextline();
   HEAP32[i8 >> 2] = HEAP32[26334];
   if (HEAP32[26834] | 0) break L69;
  } else {
   do if ((_vim_isprintc(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0) == 1) {
    if (!(HEAP32[i11 >> 2] | 0)) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) break;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    break L143;
   } while (0);
   if (!(HEAP32[26322] | 0)) break L69;
   if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 10) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } else if ((i3 | 0) == 92) while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L69;
  do if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
   if (HEAP32[26312] | 0) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
   if (HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) break L69;
   _reg_nextline();
   HEAP32[i8 >> 2] = HEAP32[26334];
   if (HEAP32[26834] | 0) break L69;
  } else {
   if ((HEAP16[110026 + (HEAPU8[HEAP32[i8 >> 2] >> 0] << 1) >> 1] & HEAP32[i10 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    break;
   }
   if (!(HEAP32[26322] | 0)) break L69;
   if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 10) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } else if ((i3 | 0) == 136) while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L69;
  do if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
   if (HEAP32[26312] | 0) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 50) break L69;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) > 78) break L69;
   if (HEAP32[26322] | 0 ? 1 : (HEAP32[26326] | 0) > (HEAP32[26321] | 0)) break L69;
   _reg_nextline();
   HEAP32[i8 >> 2] = HEAP32[26334];
   if (HEAP32[26834] | 0) break L69;
  } else {
   if (HEAP32[26322] | 0) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 10) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) >= 50) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) <= 78) {
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    break;
   }
   i13 = (_cstrchr(HEAP32[i9 >> 2] | 0, HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0) == 0 & 1;
   if ((i13 | 0) == (HEAP32[i11 >> 2] | 0)) break L69;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } while (0);
 HEAP32[26334] = HEAP32[i8 >> 2];
 STACKTOP = i4;
 return HEAP32[i7 >> 2] | 0;
}

function _addstate(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i8 = i7 + 88 | 0;
 i9 = i7 + 84 | 0;
 i10 = i7 + 80 | 0;
 i11 = i7 + 76 | 0;
 i12 = i7 + 72 | 0;
 i13 = i7 + 68 | 0;
 i14 = i7 + 64 | 0;
 i15 = i7 + 60 | 0;
 i16 = i7 + 56 | 0;
 i17 = i7 + 52 | 0;
 i18 = i7 + 48 | 0;
 i19 = i7 + 44 | 0;
 i20 = i7 + 40 | 0;
 i21 = i7 + 24 | 0;
 i22 = i7 + 20 | 0;
 i23 = i7 + 16 | 0;
 i24 = i7 + 12 | 0;
 i25 = i7 + 8 | 0;
 i26 = i7 + 4 | 0;
 i27 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i26 >> 2] = HEAP32[i11 >> 2];
 if ((HEAP32[i13 >> 2] | 0) <= -10) {
  HEAP32[i16 >> 2] = 1;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i17 >> 2] = 0 - ((HEAP32[i13 >> 2] | 0) + 10);
 }
 switch (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) {
 case -1022:
 case -1024:
 case -1e3:
 case -966:
 case -947:
 case -948:
 case -949:
 case -950:
 case -951:
 case -952:
 case -953:
 case -954:
 case -955:
 case -956:
 case -998:
  break;
 case -1004:
 case -1008:
  {
   if ((HEAP32[26334] | 0) >>> 0 > (HEAP32[26325] | 0) >>> 0) if (HEAPU8[HEAP32[26334] >> 0] | 0 | 0) if ((HEAP32[26336] | 0) != 0 & (HEAP32[26312] | 0) == 0) if ((HEAP32[26326] | 0) == (HEAP32[HEAP32[26336] >> 2] | 0)) i6 = 21; else i6 = 8; else i6 = 21; else i6 = 8; else i6 = 8;
   break;
  }
 default:
  i6 = 8;
 }
 do if ((i6 | 0) == 8) {
  if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 16 + (HEAP32[26339] << 2) >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0)) if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) != -967) {
   if ((HEAP32[26328] | 0) == 0 & (HEAP32[i12 >> 2] | 0) == 0) if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] | 0)) if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) != -1023) {
    L18 : do if (HEAP32[i16 >> 2] | 0) {
     HEAP32[i18 >> 2] = 0;
     while (1) {
      if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) break L18;
      if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break L18;
      if ((HEAP32[(HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) * 352 | 0) >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0)) break;
      HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
     }
     HEAP32[i19 >> 2] = 1;
    } while (0);
    if ((HEAP32[i16 >> 2] | 0) == 0 | (HEAP32[i19 >> 2] | 0) != 0) {
     i6 = 21;
     break;
    }
   }
   if (_has_state_with_pos(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) {
    i6 = 21;
    break;
   }
  }
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0)) {
   HEAP32[i27 >> 2] = (((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) * 3 | 0) / 2 | 0) + 50;
   if ((HEAP32[i26 >> 2] | 0) != 105360) {
    _copy_sub(105360, HEAP32[i26 >> 2] | 0);
    HEAP32[i26 >> 2] = 105360;
   }
   i11 = _realloc(HEAP32[HEAP32[i9 >> 2] >> 2] | 0, (HEAP32[i27 >> 2] | 0) * 352 | 0) | 0;
   HEAP32[HEAP32[i9 >> 2] >> 2] = i11;
   HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = HEAP32[i27 >> 2];
  }
  HEAP32[(HEAP32[i10 >> 2] | 0) + 16 + (HEAP32[26339] << 2) >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2];
  i11 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  i5 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i4 + 1;
  HEAP32[i20 >> 2] = i11 + (i4 * 352 | 0);
  HEAP32[HEAP32[i20 >> 2] >> 2] = HEAP32[i10 >> 2];
  i4 = (HEAP32[i20 >> 2] | 0) + 8 | 0;
  if (!(HEAP32[i12 >> 2] | 0)) HEAP32[i4 >> 2] = 0; else {
   _copy_pim(i4, HEAP32[i12 >> 2] | 0);
   HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] = 1;
  }
  _copy_sub((HEAP32[i20 >> 2] | 0) + 188 | 0, HEAP32[i26 >> 2] | 0);
 } while (0);
 if ((i6 | 0) == 21) {
  HEAP32[i8 >> 2] = HEAP32[i26 >> 2];
  i28 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i28 | 0;
 }
 L43 : do switch (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) {
 case -947:
 case -948:
 case -949:
 case -950:
 case -951:
 case -952:
 case -953:
 case -954:
 case -955:
 case -1e3:
  {
   i6 = 65;
   break;
  }
 case -1024:
  {
   HEAP32[i26 >> 2] = _addstate(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
   HEAP32[i26 >> 2] = _addstate(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
   break;
  }
 case -998:
 case -999:
 case -1022:
  {
   HEAP32[i26 >> 2] = _addstate(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
   break;
  }
 case -1001:
 case -957:
 case -958:
 case -959:
 case -960:
 case -961:
 case -962:
 case -963:
 case -964:
 case -965:
 case -966:
  {
   if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == -1001) {
    HEAP32[i14 >> 2] = 0;
    HEAP32[i25 >> 2] = HEAP32[i26 >> 2];
   } else {
    HEAP32[i14 >> 2] = (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + 966;
    HEAP32[i25 >> 2] = HEAP32[i26 >> 2];
   }
   HEAP32[i23 >> 2] = 0;
   HEAP32[i21 >> 2] = 0;
   HEAP32[i21 + 4 >> 2] = 0;
   HEAP32[i21 + 8 >> 2] = 0;
   HEAP32[i21 + 12 >> 2] = 0;
   i20 = (HEAP32[i14 >> 2] | 0) < (HEAP32[HEAP32[i25 >> 2] >> 2] | 0);
   i27 = HEAP32[i25 >> 2] | 0;
   if (!(HEAP32[26312] | 0)) {
    if (i20) {
     i19 = i27 + 4 + (HEAP32[i14 >> 2] << 4) | 0;
     HEAP32[i21 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i21 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
     HEAP32[i21 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
     HEAP32[i21 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
     HEAP32[i22 >> 2] = -1;
    } else {
     HEAP32[i22 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i24 >> 2] = HEAP32[HEAP32[i25 >> 2] >> 2];
     while (1) {
      if ((HEAP32[i24 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) break;
      HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i24 >> 2] << 4) >> 2] = -1;
      HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i24 >> 2] << 4) + 4 >> 2] = -1;
      HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
     }
     HEAP32[HEAP32[i25 >> 2] >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
    }
    i19 = HEAP32[26326] | 0;
    if ((HEAP32[i15 >> 2] | 0) == -1) {
     HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) >> 2] = i19 + 1;
     HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) + 8 >> 2] = 0;
    } else {
     HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) >> 2] = i19;
     HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) + 8 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0) + (HEAP32[i15 >> 2] | 0);
    }
    HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) + 4 >> 2] = -1;
   } else {
    if (i20) {
     HEAP32[i23 >> 2] = HEAP32[i27 + 4 + (HEAP32[i14 >> 2] << 3) >> 2];
     HEAP32[i22 >> 2] = -1;
    } else {
     HEAP32[i22 >> 2] = HEAP32[i27 >> 2];
     HEAP32[i24 >> 2] = HEAP32[HEAP32[i25 >> 2] >> 2];
     while (1) {
      if ((HEAP32[i24 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) break;
      HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i24 >> 2] << 3) >> 2] = 0;
      HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i24 >> 2] << 3) + 4 >> 2] = 0;
      HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
     }
     HEAP32[HEAP32[i25 >> 2] >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
    }
    HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 3) >> 2] = (HEAP32[26334] | 0) + (HEAP32[i15 >> 2] | 0);
   }
   HEAP32[i26 >> 2] = _addstate(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
   HEAP32[i25 >> 2] = HEAP32[i26 >> 2];
   if ((HEAP32[i22 >> 2] | 0) != -1) {
    HEAP32[HEAP32[i25 >> 2] >> 2] = HEAP32[i22 >> 2];
    break L43;
   }
   if (!(HEAP32[26312] | 0)) {
    i27 = (HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) | 0;
    HEAP32[i27 >> 2] = HEAP32[i21 >> 2];
    HEAP32[i27 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
    HEAP32[i27 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
    HEAP32[i27 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
    break L43;
   } else {
    HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 3) >> 2] = HEAP32[i23 >> 2];
    break L43;
   }
   break;
  }
 case -956:
  {
   if (HEAP32[26327] | 0) {
    i27 = (HEAP32[i26 >> 2] | 0) + 4 | 0;
    if (!(HEAP32[26312] | 0)) {
     if ((HEAP32[i27 + 4 >> 2] | 0) < 0) {
      i6 = 65;
      break L43;
     }
    } else if (!(HEAP32[i27 + 4 >> 2] | 0)) {
     i6 = 65;
     break L43;
    }
    HEAP32[i26 >> 2] = _addstate(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
   } else i6 = 65;
   break;
  }
 default:
  {}
 } while (0);
 if ((i6 | 0) == 65) {
  if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == -1e3) {
   HEAP32[i14 >> 2] = 0;
   HEAP32[i25 >> 2] = HEAP32[i26 >> 2];
  } else {
   HEAP32[i14 >> 2] = (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + 956;
   HEAP32[i25 >> 2] = HEAP32[i26 >> 2];
  }
  HEAP32[i22 >> 2] = HEAP32[HEAP32[i25 >> 2] >> 2];
  if ((HEAP32[HEAP32[i25 >> 2] >> 2] | 0) <= (HEAP32[i14 >> 2] | 0)) HEAP32[HEAP32[i25 >> 2] >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  i6 = (HEAP32[i25 >> 2] | 0) + 4 | 0;
  if (!(HEAP32[26312] | 0)) {
   i24 = i6 + (HEAP32[i14 >> 2] << 4) | 0;
   HEAP32[i21 >> 2] = HEAP32[i24 >> 2];
   HEAP32[i21 + 4 >> 2] = HEAP32[i24 + 4 >> 2];
   HEAP32[i21 + 8 >> 2] = HEAP32[i24 + 8 >> 2];
   HEAP32[i21 + 12 >> 2] = HEAP32[i24 + 12 >> 2];
   i24 = HEAP32[26326] | 0;
   if ((HEAP32[i15 >> 2] | 0) == -1) {
    HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) + 4 >> 2] = i24 + 1;
    HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) + 12 >> 2] = 0;
   } else {
    HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) + 4 >> 2] = i24;
    HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) + 12 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0) + (HEAP32[i15 >> 2] | 0);
   }
   HEAP32[i23 >> 2] = 0;
  } else {
   HEAP32[i23 >> 2] = HEAP32[i6 + (HEAP32[i14 >> 2] << 3) + 4 >> 2];
   HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 3) + 4 >> 2] = (HEAP32[26334] | 0) + (HEAP32[i15 >> 2] | 0);
   HEAP32[i21 >> 2] = 0;
   HEAP32[i21 + 4 >> 2] = 0;
   HEAP32[i21 + 8 >> 2] = 0;
   HEAP32[i21 + 12 >> 2] = 0;
  }
  HEAP32[i26 >> 2] = _addstate(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i25 >> 2] = HEAP32[i26 >> 2];
  if (!(HEAP32[26312] | 0)) {
   i13 = (HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 4) | 0;
   HEAP32[i13 >> 2] = HEAP32[i21 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i21 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
   HEAP32[i13 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
  } else HEAP32[(HEAP32[i25 >> 2] | 0) + 4 + (HEAP32[i14 >> 2] << 3) + 4 >> 2] = HEAP32[i23 >> 2];
  HEAP32[HEAP32[i25 >> 2] >> 2] = HEAP32[i22 >> 2];
 }
 HEAP32[i8 >> 2] = HEAP32[i26 >> 2];
 i28 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i28 | 0;
}

function _nv_brackets(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i3 + 88 | 0;
 i5 = i3 + 80 | 0;
 i6 = i3 + 72 | 0;
 i7 = i3 + 64 | 0;
 i8 = i3 + 56 | 0;
 i9 = i3 + 48 | 0;
 i10 = i3 + 44 | 0;
 i11 = i3 + 40 | 0;
 i12 = i3 + 36 | 0;
 i13 = i3 + 32 | 0;
 i14 = i3 + 28 | 0;
 i15 = i3 + 24 | 0;
 i16 = i3 + 20 | 0;
 i17 = i3 + 16 | 0;
 i18 = i3 + 8 | 0;
 i19 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 91) {
  if (!(_vim_strchr(61814, HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) | 0)) i2 = 3;
 } else i2 = 3;
 do if ((i2 | 0) == 3) {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 93) if (_vim_strchr(61822, HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) | 0) break;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 91) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 93) {
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 112) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 80) {
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 39) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 96) {
     if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) >= -13565) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) <= -11517) {
      i1 = HEAP32[i4 >> 2] | 0;
      _do_mouse(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, (HEAP32[i1 + 8 >> 2] | 0) == 93 ? 1 : -1, HEAP32[i1 + 28 >> 2] | 0, 1) | 0;
      STACKTOP = i3;
      return;
     }
     _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
     STACKTOP = i3;
     return;
    }
    HEAP32[i7 >> 2] = (HEAP32[26881] | 0) + 24;
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
    while (1) {
     if ((HEAP32[i10 >> 2] | 0) <= 0) break;
     i1 = HEAP32[i7 >> 2] | 0;
     HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
     HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
     i1 = HEAP32[i4 >> 2] | 0;
     HEAP32[i7 >> 2] = _getnextmark(HEAP32[i7 >> 2] | 0, (HEAP32[i1 + 8 >> 2] | 0) == 91 ? -1 : 1, (HEAP32[i1 + 12 >> 2] | 0) == 39 & 1) | 0;
     if (!(HEAP32[i7 >> 2] | 0)) break;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
    }
    if (!(HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = i6;
    i1 = HEAP32[i4 >> 2] | 0;
    _nv_cursormark(i1 | 0, (HEAP32[i1 + 12 >> 2] | 0) == 39 & 1, HEAP32[i7 >> 2] | 0);
    STACKTOP = i3;
    return;
   }
   if (_checkclearop(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) {
    STACKTOP = i3;
    return;
   }
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 93) i20 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 112; else i20 = 0;
   HEAP32[i14 >> 2] = i20 ? 1 : -1;
   HEAP32[i15 >> 2] = HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2];
   HEAP32[i16 >> 2] = HEAP32[26788];
   HEAP32[i17 >> 2] = HEAP32[HEAP32[26773] >> 2];
   do if (HEAP32[26788] | 0) {
    if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[27117] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i2 = 78; else i2 = 76; else if ((HEAP32[27118] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i2 = 78; else i2 = 76;
    do if ((i2 | 0) == 76) {
     if ((HEAP32[27117] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[27118] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) {
      i2 = 78;
      break;
     }
     i1 = (HEAP32[26881] | 0) + 24 | 0;
     HEAP32[i18 >> 2] = HEAP32[i1 >> 2];
     HEAP32[i18 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    } while (0);
    if ((i2 | 0) == 78) {
     HEAP32[i18 >> 2] = HEAP32[27117];
     HEAP32[i18 + 4 >> 2] = HEAP32[27118];
    }
    if ((HEAP32[i18 >> 2] | 0) == (HEAP32[27117] | 0)) if ((HEAP32[i18 + 4 >> 2] | 0) == (HEAP32[27118] | 0)) {
     i1 = (HEAP32[26881] | 0) + 24 | 0;
     HEAP32[i19 >> 2] = HEAP32[i1 >> 2];
     HEAP32[i19 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    } else i2 = 83; else i2 = 83;
    if ((i2 | 0) == 83) {
     HEAP32[i19 >> 2] = HEAP32[27117];
     HEAP32[i19 + 4 >> 2] = HEAP32[27118];
    }
    i1 = (HEAP32[26881] | 0) + 24 | 0;
    if ((HEAP32[i14 >> 2] | 0) == -1) {
     HEAP32[i1 >> 2] = HEAP32[i18 >> 2];
     HEAP32[i1 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
     break;
    } else {
     HEAP32[i1 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i1 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
     break;
    }
   } while (0);
   _adjust_clip_reg(i15);
   _prep_redo_cmd(HEAP32[i4 >> 2] | 0);
   _do_put(HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, 1);
   if (!(HEAP32[i16 >> 2] | 0)) {
    STACKTOP = i3;
    return;
   };
   HEAP32[27117] = HEAP32[i18 >> 2];
   HEAP32[27118] = HEAP32[i18 + 4 >> 2];
   i1 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i1 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
   if ((HEAP32[i14 >> 2] | 0) == -1) {
    HEAP32[27117] = (HEAP32[27117] | 0) + ((HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i17 >> 2] | 0));
    i1 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + ((HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i17 >> 2] | 0));
   }
   HEAP32[26788] = 1;
   if ((HEAP32[10179] | 0) == 86) {
    HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = 100;
    HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = 0;
    HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[i15 >> 2];
    _nv_operator(HEAP32[i4 >> 2] | 0);
    _do_pending_operator(HEAP32[i4 >> 2] | 0, 0, 0);
   }
   if (!(HEAP32[26788] | 0)) {
    STACKTOP = i3;
    return;
   }
   _end_visual_mode();
   _redraw_later(35);
   STACKTOP = i3;
   return;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0)) HEAP32[i9 >> 2] = 123; else HEAP32[i9 >> 2] = 125;
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  i1 = (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 | 0;
  i21 = HEAP32[i4 >> 2] | 0;
  i22 = HEAP32[i21 + 32 >> 2] | 0;
  i23 = HEAP32[i21 + 28 >> 2] | 0;
  i21 = HEAP32[i9 >> 2] | 0;
  if (HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) == 1) i24 = (HEAP32[i9 >> 2] | 0) == 123; else i24 = 0; else i24 = 0;
  i25 = (_findpar(i1, i22, i23, i21, i24 & 1) | 0) != 0;
  i21 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
  if (!i25) {
   _clearopbeep(i21);
   STACKTOP = i3;
   return;
  }
  if (HEAP32[i21 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
  _beginline(5);
  STACKTOP = i3;
  return;
 } while (0);
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 42) HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = 47;
 HEAP32[i6 >> 2] = 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 109) i2 = 9; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 77) i2 = 9; else {
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
 }
 if ((i2 | 0) == 9) {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 91) HEAP32[i11 >> 2] = 123; else HEAP32[i11 >> 2] = 125;
  HEAP32[i10 >> 2] = 9999;
 }
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) <= 0) break;
  i24 = _findmatchlimit(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[i11 >> 2] | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 91 ? 1 : 2, 0) | 0;
  HEAP32[i7 >> 2] = i24;
  if (!i24) {
   i2 = 17;
   break;
  };
  HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  i24 = (HEAP32[26881] | 0) + 24 | 0;
  i9 = HEAP32[i7 >> 2] | 0;
  HEAP32[i24 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i24 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  i9 = HEAP32[i7 >> 2] | 0;
  HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
 }
 do if ((i2 | 0) == 17) {
  if (HEAP32[i5 >> 2] | 0) {
   HEAP32[i7 >> 2] = i5;
   break;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 109) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 77) _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
 } while (0);
 i9 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 109) i2 = 25; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 77) i2 = 25;
 if ((i2 | 0) == 25) {
  HEAP32[i13 >> 2] = ((HEAP32[i11 >> 2] | 0) == 123 | 0) == ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 109 | 0) & 1;
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
  if (HEAP32[i6 >> 2] | 0) {
   HEAP32[i7 >> 2] = i6;
   i9 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   if (HEAP32[i13 >> 2] | 0) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
  } else HEAP32[i7 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) <= 0) break;
   while (1) {
    if ((HEAP32[i11 >> 2] | 0) == 123) i26 = _dec_cursor() | 0; else i26 = _inc_cursor() | 0;
    if ((i26 | 0) < 0) {
     i2 = 36;
     break;
    }
    HEAP32[i12 >> 2] = _gchar_cursor() | 0;
    if ((HEAP32[i12 >> 2] | 0) == 123 | (HEAP32[i12 >> 2] | 0) == 125) {
     i2 = 40;
     break;
    }
   }
   do if ((i2 | 0) == 36) {
    i2 = 0;
    if (!(HEAP32[i7 >> 2] | 0)) _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
    HEAP32[i10 >> 2] = 0;
   } else if ((i2 | 0) == 40) {
    i2 = 0;
    if (!(HEAP32[i13 >> 2] | 0 ? (HEAP32[i12 >> 2] | 0) == (HEAP32[i11 >> 2] | 0) : 0)) if ((HEAP32[i10 >> 2] | 0) != 1 | (HEAP32[i13 >> 2] | 0) != 0) {
     if (!(HEAP32[i5 >> 2] | 0)) {
      i6 = (HEAP32[26881] | 0) + 24 | 0;
      HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
      HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
      HEAP32[i7 >> 2] = i5;
      break;
     }
     i6 = _findmatchlimit(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[i11 >> 2] | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 91 ? 1 : 2, 0) | 0;
     HEAP32[i7 >> 2] = i6;
     if (!i6) {
      HEAP32[i10 >> 2] = 0;
      break;
     } else {
      i6 = (HEAP32[26881] | 0) + 24 | 0;
      i9 = HEAP32[i7 >> 2] | 0;
      HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
      break;
     }
    }
    i9 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
    HEAP32[i7 >> 2] = i5;
    HEAP32[i10 >> 2] = 0;
   } while (0);
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
  }
  i10 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  if (!(HEAP32[i7 >> 2] | 0)) if (HEAP32[i5 >> 2] | 0) _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _setpcmark();
 i4 = (HEAP32[26881] | 0) + 24 | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 STACKTOP = i3;
 return;
}

function _get_address(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i8 + 56 | 0;
 i10 = i8 + 52 | 0;
 i11 = i8 + 48 | 0;
 i12 = i8 + 44 | 0;
 i13 = i8 + 36 | 0;
 i14 = i8 + 32 | 0;
 i15 = i8 + 28 | 0;
 i16 = i8 + 24 | 0;
 i17 = i8 + 16 | 0;
 i18 = i8 + 8 | 0;
 i19 = i8 + 4 | 0;
 i20 = i8;
 HEAP32[i8 + 60 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i8 + 40 >> 2] = i6;
 HEAP32[i16 >> 2] = _skipwhite(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
 HEAP32[i19 >> 2] = 2147483647;
 L1 : while (1) {
  L3 : do switch (HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) {
  case 46:
   {
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    switch (HEAP32[i10 >> 2] | 0) {
    case 6:
     {
      i7 = 10;
      break L1;
      break;
     }
    case 0:
     {
      HEAP32[i19 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
      break L3;
      break;
     }
    case 1:
     {
      HEAP32[i19 >> 2] = _current_win_nr(HEAP32[26881] | 0) | 0;
      break L3;
      break;
     }
    case 2:
     {
      HEAP32[i19 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) + 1;
      break L3;
      break;
     }
    case 4:
    case 3:
     {
      HEAP32[i19 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
      break L3;
      break;
     }
    case 5:
     {
      HEAP32[i19 >> 2] = _current_tab_nr(HEAP32[26886] | 0) | 0;
      break L3;
      break;
     }
    default:
     break L3;
    }
    break;
   }
  case 36:
   {
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    switch (HEAP32[i10 >> 2] | 0) {
    case 6:
     {
      i7 = 22;
      break L1;
      break;
     }
    case 0:
     {
      HEAP32[i19 >> 2] = HEAP32[HEAP32[26773] >> 2];
      break L3;
      break;
     }
    case 1:
     {
      HEAP32[i19 >> 2] = _current_win_nr(0) | 0;
      break L3;
      break;
     }
    case 2:
     {
      HEAP32[i19 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2];
      break L3;
      break;
     }
    case 3:
     {
      HEAP32[i20 >> 2] = HEAP32[26772];
      while (1) {
       if (HEAP32[(HEAP32[i20 >> 2] | 0) + 4 >> 2] | 0) break;
       if (!(HEAP32[(HEAP32[i20 >> 2] | 0) + 52 >> 2] | 0)) break;
       HEAP32[i20 >> 2] = HEAP32[(HEAP32[i20 >> 2] | 0) + 52 >> 2];
      }
      HEAP32[i19 >> 2] = HEAP32[(HEAP32[i20 >> 2] | 0) + 92 >> 2];
      break L3;
      break;
     }
    case 4:
     {
      HEAP32[i19 >> 2] = HEAP32[(HEAP32[26772] | 0) + 92 >> 2];
      break L3;
      break;
     }
    case 5:
     {
      HEAP32[i19 >> 2] = _current_tab_nr(0) | 0;
      break L3;
      break;
     }
    default:
     break L3;
    }
    break;
   }
  case 39:
   {
    i6 = (HEAP32[i16 >> 2] | 0) + 1 | 0;
    HEAP32[i16 >> 2] = i6;
    if (!(HEAPU8[i6 >> 0] | 0)) {
     i7 = 24;
     break L1;
    }
    if (HEAP32[i10 >> 2] | 0) {
     i7 = 26;
     break L1;
    }
    i6 = HEAP32[i16 >> 2] | 0;
    if (HEAP32[i11 >> 2] | 0) {
     HEAP32[i16 >> 2] = i6 + 1;
     break L3;
    }
    if (HEAP32[i12 >> 2] | 0) i21 = (HEAPU8[(HEAP32[i16 >> 2] | 0) + 1 >> 0] | 0 | 0) == 0; else i21 = 0;
    HEAP32[i18 >> 2] = _getmark(HEAPU8[i6 >> 0] | 0, i21 & 1) | 0;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    if ((HEAP32[i18 >> 2] | 0) == (-1 | 0)) {
     HEAP32[i19 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     break L3;
    }
    if (!(_check_mark(HEAP32[i18 >> 2] | 0) | 0)) {
     i7 = 34;
     break L1;
    }
    HEAP32[i19 >> 2] = HEAP32[HEAP32[i18 >> 2] >> 2];
    break;
   }
  case 63:
  case 47:
   {
    i6 = HEAP32[i16 >> 2] | 0;
    HEAP32[i16 >> 2] = i6 + 1;
    HEAP32[i13 >> 2] = HEAPU8[i6 >> 0];
    if (HEAP32[i10 >> 2] | 0) {
     i7 = 37;
     break L1;
    }
    if (HEAP32[i11 >> 2] | 0) {
     HEAP32[i16 >> 2] = _skip_regexp(HEAP32[i16 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[26946] | 0, 0) | 0;
     if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) != (HEAP32[i13 >> 2] | 0)) break L3;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     break L3;
    }
    i6 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i17 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i17 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    if ((HEAP32[i19 >> 2] | 0) != 2147483647) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i19 >> 2];
    if ((HEAP32[i13 >> 2] | 0) == 47) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > 0) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 2147483647; else i7 = 46; else i7 = 46;
    if ((i7 | 0) == 46) {
     i7 = 0;
     HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
    }
    HEAP32[27178] = 0;
    i6 = (_do_search(0, HEAP32[i13 >> 2] | 0, HEAP32[i16 >> 2] | 0, 1, 44, 0, 0) | 0) != 0;
    i22 = (HEAP32[26881] | 0) + 24 | 0;
    if (!i6) {
     i7 = 48;
     break L1;
    }
    HEAP32[i19 >> 2] = HEAP32[i22 >> 2];
    i6 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i6 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[27178] | 0);
    break;
   }
  case 92:
   {
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    if (HEAP32[i10 >> 2] | 0) {
     i7 = 51;
     break L1;
    }
    if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) == 38) HEAP32[i14 >> 2] = 1; else {
     if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) != 63) if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) != 47) {
      i7 = 57;
      break L1;
     }
     HEAP32[i14 >> 2] = 0;
    }
    if (!(HEAP32[i11 >> 2] | 0)) {
     if ((HEAP32[i19 >> 2] | 0) != 2147483647) HEAP32[i17 >> 2] = HEAP32[i19 >> 2]; else HEAP32[i17 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     i6 = i17 + 4 | 0;
     if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) != 63) HEAP32[i6 >> 2] = 2147483647; else HEAP32[i6 >> 2] = 0;
     if (!(_searchit(HEAP32[26881] | 0, HEAP32[26773] | 0, i17, (HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) == 63 ? -1 : 1, 114072, 1, 12, HEAP32[i14 >> 2] | 0, 0, 0, 0) | 0)) {
      i7 = 67;
      break L1;
     }
     HEAP32[i19 >> 2] = HEAP32[i17 >> 2];
    }
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    break;
   }
  default:
   if (((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i19 >> 2] = _getdigits(i16) | 0;
  } while (0);
  while (1) {
   HEAP32[i16 >> 2] = _skipwhite(HEAP32[i16 >> 2] | 0) | 0;
   if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) != 45) if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) != 43) if (((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break;
   L83 : do if ((HEAP32[i19 >> 2] | 0) == 2147483647) switch (HEAP32[i10 >> 2] | 0) {
   case 0:
    {
     HEAP32[i19 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     break L83;
     break;
    }
   case 1:
    {
     HEAP32[i19 >> 2] = _current_win_nr(HEAP32[26881] | 0) | 0;
     break L83;
     break;
    }
   case 2:
    {
     HEAP32[i19 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) + 1;
     break L83;
     break;
    }
   case 4:
   case 3:
    {
     HEAP32[i19 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
     break L83;
     break;
    }
   case 5:
    {
     HEAP32[i19 >> 2] = _current_tab_nr(HEAP32[26886] | 0) | 0;
     break L83;
     break;
    }
   case 6:
    {
     HEAP32[i19 >> 2] = 1;
     break L83;
     break;
    }
   default:
    break L83;
   } while (0);
   if (((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i14 >> 2] = 43; else {
    i6 = HEAP32[i16 >> 2] | 0;
    HEAP32[i16 >> 2] = i6 + 1;
    HEAP32[i14 >> 2] = HEAPU8[i6 >> 0];
   }
   if (((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i15 >> 2] = _getdigits(i16) | 0; else HEAP32[i15 >> 2] = 1;
   if ((HEAP32[i10 >> 2] | 0) == 6) {
    i7 = 90;
    break L1;
   }
   do if ((HEAP32[i10 >> 2] | 0) == 3 | (HEAP32[i10 >> 2] | 0) == 4) {
    i6 = HEAP32[i15 >> 2] | 0;
    i5 = Math_imul(-1, i6) | 0;
    HEAP32[i19 >> 2] = _compute_buffer_local_count(HEAP32[i10 >> 2] | 0, HEAP32[i19 >> 2] | 0, (HEAP32[i14 >> 2] | 0) == 45 ? i5 : i6) | 0;
   } else {
    i6 = HEAP32[i15 >> 2] | 0;
    i5 = HEAP32[i19 >> 2] | 0;
    if ((HEAP32[i14 >> 2] | 0) == 45) {
     HEAP32[i19 >> 2] = i5 - i6;
     break;
    } else {
     HEAP32[i19 >> 2] = i5 + i6;
     break;
    }
   } while (0);
  }
  if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) == 47) continue; else if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) == 63) continue; else {
   i7 = 99;
   break;
  }
 }
 switch (i7 | 0) {
 case 10:
  {
   _emsg(92503) | 0;
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 22:
  {
   _emsg(92503) | 0;
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 24:
  {
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 26:
  {
   _emsg(92432) | 0;
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 34:
  {
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 37:
  {
   _emsg(92432) | 0;
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 48:
  {
   HEAP32[i22 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i22 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 51:
  {
   _emsg(92432) | 0;
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 57:
  {
   _emsg(92184) | 0;
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 67:
  {
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 90:
  {
   _emsg(92503) | 0;
   HEAP32[i16 >> 2] = 0;
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 case 99:
  {
   i23 = HEAP32[i16 >> 2] | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   HEAP32[i24 >> 2] = i23;
   i25 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i8;
   return i25 | 0;
  }
 }
 return 0;
}
function _u_undoredo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i4 = i3 + 292 | 0;
 i5 = i3 + 288 | 0;
 i6 = i3 + 284 | 0;
 i7 = i3 + 280 | 0;
 i8 = i3 + 276 | 0;
 i9 = i3 + 272 | 0;
 i10 = i3 + 268 | 0;
 i11 = i3 + 264 | 0;
 i12 = i3 + 260 | 0;
 i13 = i3 + 256 | 0;
 i14 = i3 + 252 | 0;
 i15 = i3 + 248 | 0;
 i16 = i3 + 244 | 0;
 i17 = i3 + 240 | 0;
 i18 = i3 + 32 | 0;
 i19 = i3 + 8 | 0;
 i20 = i3 + 4 | 0;
 i21 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i11 >> 2] = 2147483647;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i21 >> 2] = HEAP32[(HEAP32[26773] | 0) + 508 >> 2];
 _block_autocmds();
 HEAP32[i16 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + 40 >> 2];
 i1 = HEAP32[26773] | 0;
 HEAP32[i17 >> 2] = (HEAP32[i1 + 108 >> 2] | 0 ? 1 : 0) + (HEAP32[i1 + 8 >> 2] & 1 | 0 ? 2 : 0);
 _setpcmark();
 _memmove(i18 | 0, (HEAP32[26773] | 0) + 188 | 0, 208) | 0;
 i1 = (HEAP32[26773] | 0) + 396 | 0;
 HEAP32[i19 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i19 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i19 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i19 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i19 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i19 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = HEAP32[HEAP32[26773] >> 2];
 HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
 HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = 0;
 HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = 0;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + 24 >> 2];
 L1 : while (1) {
  if (!(HEAP32[i13 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2];
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2];
  if (!(HEAP32[i9 >> 2] | 0)) HEAP32[i9 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) + 1;
  if ((HEAP32[i8 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
   i2 = 8;
   break;
  }
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) {
   i2 = 8;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) > ((HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0)) {
   i2 = 8;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) - 1;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2];
  do if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i11 >> 2] | 0)) {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + 32 >> 2];
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[i10 >> 2] | 0) <= ((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) + 1 | 0)) {
    i1 = (HEAP32[26881] | 0) + 24 | 0;
    i22 = (HEAP32[i21 >> 2] | 0) + 32 | 0;
    HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
    HEAP32[i11 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1;
    break;
   }
   HEAP32[i12 >> 2] = 0;
   while (1) {
    if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
    if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
    i22 = HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0;
    if (_strcmp(i22, _ml_get((HEAP32[i8 >> 2] | 0) + 1 + (HEAP32[i12 >> 2] | 0) | 0) | 0) | 0) break;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   }
   if ((HEAP32[i11 >> 2] | 0) == 2147483647 ? (HEAP32[i12 >> 2] | 0) == (HEAP32[i7 >> 2] | 0) : 0) if (!(HEAP32[HEAP32[i13 >> 2] >> 2] | 0)) {
    HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    break;
   }
   if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) {
    HEAP32[i11 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i20 >> 2] = 0;
  L28 : do if ((HEAP32[i6 >> 2] | 0) > 0) {
   i22 = _lalloc(HEAP32[i6 >> 2] << 2, 0) | 0;
   HEAP32[i5 >> 2] = i22;
   if (!i22) {
    i2 = 25;
    break L1;
   }
   HEAP32[i10 >> 2] = (HEAP32[i9 >> 2] | 0) - 1;
   HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
   while (1) {
    i22 = (HEAP32[i12 >> 2] | 0) + -1 | 0;
    HEAP32[i12 >> 2] = i22;
    if ((i22 | 0) < 0) break L28;
    i22 = _u_save_line(HEAP32[i10 >> 2] | 0) | 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] = i22;
    if (!i22) _do_outofmem_msg(0);
    if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) HEAP32[i20 >> 2] = 1;
    _ml_delete(HEAP32[i10 >> 2] | 0, 0) | 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
   }
  } else HEAP32[i5 >> 2] = 0; while (0);
  if (HEAP32[i7 >> 2] | 0) {
   HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i12 >> 2] = 0;
   while (1) {
    if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
    if ((HEAP32[i20 >> 2] | 0) != 0 & (HEAP32[i10 >> 2] | 0) == 0) _ml_replace(1, HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0, 1) | 0; else _ml_append(HEAP32[i10 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0, 0, 0) | 0;
    _vim_free(HEAP32[(HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0);
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   }
   _vim_free(HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] | 0);
  }
  if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) {
   i22 = HEAP32[i8 >> 2] | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   _mark_adjust(i22 + 1 | 0, i22 + i1 | 0, 2147483647, (HEAP32[i7 >> 2] | 0) - i1 | 0);
   if ((HEAP32[(HEAP32[26773] | 0) + 476 >> 2] | 0) > ((HEAP32[i8 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0)) {
    i1 = (HEAP32[26773] | 0) + 476 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - (HEAP32[i6 >> 2] | 0));
   }
   if ((HEAP32[(HEAP32[26773] | 0) + 492 >> 2] | 0) > ((HEAP32[i8 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0)) {
    i1 = (HEAP32[26773] | 0) + 492 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - (HEAP32[i6 >> 2] | 0));
   }
  }
  _changed_lines((HEAP32[i8 >> 2] | 0) + 1 | 0, 0, HEAP32[i9 >> 2] | 0, (HEAP32[i7 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0);
  if (((HEAP32[i8 >> 2] | 0) + 1 | 0) < (HEAP32[(HEAP32[26773] | 0) + 476 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  if (!(HEAP32[i7 >> 2] | 0)) if (((HEAP32[i8 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[26773] | 0) + 492 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = (HEAP32[i8 >> 2] | 0) + 1; else i2 = 54; else i2 = 54;
  if ((i2 | 0) == 54) {
   i2 = 0;
   if (((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0) > (HEAP32[(HEAP32[26773] | 0) + 492 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
  }
  HEAP32[26623] = (HEAP32[26623] | 0) + (HEAP32[i7 >> 2] | 0);
  HEAP32[26624] = (HEAP32[26624] | 0) + (HEAP32[i6 >> 2] | 0);
  HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] = HEAP32[i6 >> 2];
  HEAP32[(HEAP32[i13 >> 2] | 0) + 16 >> 2] = HEAP32[i5 >> 2];
  HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) + 1;
  HEAP32[i14 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
  HEAP32[HEAP32[i13 >> 2] >> 2] = HEAP32[i15 >> 2];
  HEAP32[i15 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
 }
 if ((i2 | 0) == 8) {
  _unblock_autocmds();
  _iemsg(80910);
  _changed();
  STACKTOP = i3;
  return;
 }
 L73 : do if ((i2 | 0) == 25) {
  _do_outofmem_msg(HEAP32[i6 >> 2] << 2);
  while (1) {
   if (!(HEAP32[i13 >> 2] | 0)) break L73;
   HEAP32[i14 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
   i7 = HEAP32[i13 >> 2] | 0;
   _u_freeentry(i7 | 0, HEAP32[i7 + 20 >> 2] | 0);
   HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
  }
 } while (0);
 HEAP32[(HEAP32[i21 >> 2] | 0) + 24 >> 2] = HEAP32[i15 >> 2];
 HEAP32[(HEAP32[i21 >> 2] | 0) + 40 >> 2] = HEAP32[i17 >> 2];
 if (HEAP32[i16 >> 2] & 2 | 0) if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) if (!(HEAPU8[(_ml_get(1) | 0) >> 0] | 0)) {
  i17 = (HEAP32[26773] | 0) + 8 | 0;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
 }
 if (HEAP32[i16 >> 2] & 1 | 0) _changed(); else _unchanged(HEAP32[26773] | 0, 0);
 HEAP32[i12 >> 2] = 0;
 while (1) {
  i23 = HEAP32[i21 >> 2] | 0;
  if ((HEAP32[i12 >> 2] | 0) >= 26) break;
  if (HEAP32[i23 + 44 + (HEAP32[i12 >> 2] << 3) >> 2] | 0) {
   i16 = HEAP32[i12 >> 2] << 3 | 0;
   i17 = (HEAP32[26773] | 0) + 188 + i16 | 0;
   i15 = (HEAP32[i21 >> 2] | 0) + 44 + i16 | 0;
   HEAP32[i17 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  }
  i15 = (HEAP32[i21 >> 2] | 0) + 44 + (HEAP32[i12 >> 2] << 3) | 0;
  if (HEAP32[i18 + (HEAP32[i12 >> 2] << 3) >> 2] | 0) {
   i17 = i18 + (HEAP32[i12 >> 2] << 3) | 0;
   HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  } else HEAP32[i15 >> 2] = 0;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if (HEAP32[i23 + 252 >> 2] | 0) {
  i23 = (HEAP32[26773] | 0) + 396 | 0;
  i12 = (HEAP32[i21 >> 2] | 0) + 252 | 0;
  HEAP32[i23 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i23 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i23 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
  HEAP32[i23 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
  HEAP32[i23 + 20 >> 2] = HEAP32[i12 + 20 >> 2];
  i12 = (HEAP32[i21 >> 2] | 0) + 252 | 0;
  HEAP32[i12 >> 2] = HEAP32[i19 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
  HEAP32[i12 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAP32[i12 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
  HEAP32[i12 + 16 >> 2] = HEAP32[i19 + 16 >> 2];
  HEAP32[i12 + 20 >> 2] = HEAP32[i19 + 20 >> 2];
 }
 if (((HEAP32[(HEAP32[i21 >> 2] | 0) + 32 >> 2] | 0) + 1 | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > 1) {
  i19 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + -1;
 }
 do if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) if ((HEAP32[(HEAP32[i21 >> 2] | 0) + 32 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + 32 + 4 >> 2];
  break;
 } else {
  _beginline(6);
  break;
 } else HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0; while (0);
 _check_cursor();
 HEAP32[(HEAP32[26773] | 0) + 528 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + 16 >> 2];
 do if (HEAP32[i4 >> 2] | 0) if (HEAP32[HEAP32[i21 >> 2] >> 2] | 0) {
  HEAP32[(HEAP32[26773] | 0) + 528 >> 2] = HEAP32[(HEAP32[HEAP32[i21 >> 2] >> 2] | 0) + 16 >> 2];
  break;
 } else {
  HEAP32[(HEAP32[26773] | 0) + 528 >> 2] = 0;
  break;
 } while (0);
 do if (HEAP32[(HEAP32[i21 >> 2] | 0) + 280 >> 2] | 0) {
  i19 = HEAP32[(HEAP32[i21 >> 2] | 0) + 280 >> 2] | 0;
  if (HEAP32[i4 >> 2] | 0) {
   HEAP32[(HEAP32[26773] | 0) + 536 >> 2] = i19 - 1;
   break;
  } else {
   HEAP32[(HEAP32[26773] | 0) + 536 >> 2] = i19;
   break;
  }
 } while (0);
 HEAP32[(HEAP32[26773] | 0) + 532 >> 2] = HEAP32[(HEAP32[i21 >> 2] | 0) + 276 >> 2];
 _unblock_autocmds();
 STACKTOP = i3;
 return;
}

function _cursor_pos_info(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 i4 = i3 + 168 | 0;
 i5 = i3 + 120 | 0;
 i6 = i3 + 56 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 i9 = i3 + 428 | 0;
 i10 = i3 + 424 | 0;
 i11 = i3 + 472 | 0;
 i12 = i3 + 432 | 0;
 i13 = i3 + 420 | 0;
 i14 = i3 + 416 | 0;
 i15 = i3 + 412 | 0;
 i16 = i3 + 408 | 0;
 i17 = i3 + 404 | 0;
 i18 = i3 + 400 | 0;
 i19 = i3 + 396 | 0;
 i20 = i3 + 392 | 0;
 i21 = i3 + 388 | 0;
 i22 = i3 + 384 | 0;
 i23 = i3 + 376 | 0;
 i24 = i3 + 368 | 0;
 i25 = i3 + 280 | 0;
 i26 = i3 + 248 | 0;
 i27 = i3 + 244 | 0;
 i28 = i3 + 240 | 0;
 i29 = i3 + 236 | 0;
 i30 = i3 + 232 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i21 >> 2] = 1e5;
 HEAP32[i22 >> 2] = 0;
 if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) {
  if (HEAP32[i9 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
  _msg(92115) | 0;
  STACKTOP = i3;
  return;
 }
 if ((_get_fileformat(HEAP32[26773] | 0) | 0) == 1) HEAP32[i20 >> 2] = 2; else HEAP32[i20 >> 2] = 1;
 if (HEAP32[26788] | 0) {
  if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[27117] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i2 = 11; else i2 = 12; else if ((HEAP32[27118] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i2 = 11; else i2 = 12;
  if ((i2 | 0) == 11) {
   HEAP32[i23 >> 2] = HEAP32[27117];
   HEAP32[i23 + 4 >> 2] = HEAP32[27118];
   i1 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i24 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i24 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  } else if ((i2 | 0) == 12) {
   i1 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i23 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i23 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i24 >> 2] = HEAP32[27117];
   HEAP32[i24 + 4 >> 2] = HEAP32[27118];
  }
  if ((HEAPU8[HEAP32[26975] >> 0] | 0) == 101) if ((HEAP32[i24 + 4 >> 2] | 0) > 0) {
   i1 = i24 + 4 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
  }
  if ((HEAP32[10179] | 0) == 22) {
   HEAP32[i25 + 60 >> 2] = 1;
   HEAP32[i25 + 64 >> 2] = 1;
   HEAP32[i25 >> 2] = 0;
   _getvcols(HEAP32[26881] | 0, i23, i24, i25 + 68 | 0, i25 + 72 | 0);
   if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) == 2147483647) HEAP32[i25 + 72 >> 2] = 2147483647;
   if ((HEAP32[i25 + 72 >> 2] | 0) < (HEAP32[i25 + 68 >> 2] | 0)) {
    i1 = i25 + 72 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (HEAP32[i25 + 68 >> 2] | 0);
    HEAP32[i25 + 68 >> 2] = (HEAP32[i25 + 72 >> 2] | 0) - (HEAP32[i25 + 68 >> 2] | 0);
    i1 = i25 + 72 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - (HEAP32[i25 + 68 >> 2] | 0);
   }
  }
  HEAP32[i22 >> 2] = (HEAP32[i24 >> 2] | 0) - (HEAP32[i23 >> 2] | 0) + 1;
 }
 HEAP32[i13 >> 2] = 1;
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) break;
  if ((HEAP32[i14 >> 2] | 0) > (HEAP32[i21 >> 2] | 0)) {
   _ui_breakcheck();
   if (HEAP32[26834] | 0) {
    i2 = 66;
    break;
   }
   HEAP32[i21 >> 2] = (HEAP32[i14 >> 2] | 0) + 1e5;
  }
  do if (HEAP32[26788] | 0) if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i23 >> 2] | 0)) if ((HEAP32[i13 >> 2] | 0) <= (HEAP32[i24 >> 2] | 0)) {
   HEAP32[i27 >> 2] = 0;
   HEAP32[i28 >> 2] = 0;
   switch (HEAP32[10179] | 0) {
   case 22:
    {
     _block_prep(i25, i26, HEAP32[i13 >> 2] | 0, 0);
     HEAP32[i27 >> 2] = HEAP32[i26 + 12 >> 2];
     HEAP32[i28 >> 2] = HEAP32[i26 + 8 >> 2];
     break;
    }
   case 86:
    {
     HEAP32[i27 >> 2] = _ml_get(HEAP32[i13 >> 2] | 0) | 0;
     HEAP32[i28 >> 2] = 2147483647;
     break;
    }
   case 118:
    {
     HEAP32[i29 >> 2] = (HEAP32[i13 >> 2] | 0) == (HEAP32[i23 >> 2] | 0) ? HEAP32[i23 + 4 >> 2] | 0 : 0;
     if ((HEAP32[i13 >> 2] | 0) == (HEAP32[i24 >> 2] | 0)) i31 = (HEAP32[i24 + 4 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) + 1 | 0; else i31 = 2147483647;
     HEAP32[i30 >> 2] = i31;
     HEAP32[i27 >> 2] = (_ml_get(HEAP32[i13 >> 2] | 0) | 0) + (HEAP32[i29 >> 2] | 0);
     HEAP32[i28 >> 2] = HEAP32[i30 >> 2];
     break;
    }
   default:
    {}
   }
   if (HEAP32[i27 >> 2] | 0) {
    i1 = _line_count_info(HEAP32[i27 >> 2] | 0, i19, i17, HEAP32[i28 >> 2] | 0, HEAP32[i20 >> 2] | 0) | 0;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + i1;
    if ((HEAP32[i13 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) if (!(HEAP32[(HEAP32[26773] | 0) + 600 >> 2] | 0)) {
     if (!(HEAP32[(HEAP32[26773] | 0) + 584 >> 2] | 0)) if (HEAP32[(HEAP32[26773] | 0) + 604 >> 2] | 0) break;
     i1 = _strlen(HEAP32[i27 >> 2] | 0) | 0;
     if ((i1 | 0) < (HEAP32[i28 >> 2] | 0)) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) - (HEAP32[i20 >> 2] | 0);
    }
   }
  } else i2 = 43; else i2 = 43; else i2 = 43; while (0);
  if ((i2 | 0) == 43) {
   i2 = 0;
   if ((HEAP32[i13 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
    i1 = HEAP32[i14 >> 2] | 0;
    i32 = _ml_get(HEAP32[i13 >> 2] | 0) | 0;
    HEAP32[i15 >> 2] = i1 + (_line_count_info(i32, i19, i17, (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) + 1 | 0, HEAP32[i20 >> 2] | 0) | 0);
   }
  }
  i32 = _ml_get(HEAP32[i13 >> 2] | 0) | 0;
  i1 = _line_count_info(i32, i18, i16, 2147483647, HEAP32[i20 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i1;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 66) {
  STACKTOP = i3;
  return;
 }
 do if (!(HEAP32[(HEAP32[26773] | 0) + 600 >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[26773] | 0) + 584 >> 2] | 0)) if (HEAP32[(HEAP32[26773] | 0) + 604 >> 2] | 0) break;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i20 >> 2] | 0);
 } while (0);
 do if (!(HEAP32[i9 >> 2] | 0)) {
  if (!(HEAP32[26788] | 0)) {
   HEAP32[i10 >> 2] = _ml_get_curline() | 0;
   _validate_virtcol();
   i20 = HEAP32[26881] | 0;
   _col_print(i11, 50, (HEAP32[i20 + 24 + 4 >> 2] | 0) + 1 | 0, (HEAP32[i20 + 132 >> 2] | 0) + 1 | 0);
   i20 = _strlen(HEAP32[i10 >> 2] | 0) | 0;
   _col_print(i12, 40, i20, _linetabsize(HEAP32[i10 >> 2] | 0) | 0);
   if ((HEAP32[i17 >> 2] | 0) == (HEAP32[i15 >> 2] | 0)) if ((HEAP32[i16 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) {
    i20 = HEAP32[26882] | 0;
    i13 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
    i28 = HEAP32[HEAP32[26773] >> 2] | 0;
    i27 = HEAP32[i19 >> 2] | 0;
    i30 = HEAP32[i18 >> 2] | 0;
    i29 = HEAP32[i15 >> 2] | 0;
    i31 = HEAP32[i14 >> 2] | 0;
    HEAP32[i5 >> 2] = i11;
    HEAP32[i5 + 4 >> 2] = i12;
    HEAP32[i5 + 8 >> 2] = i13;
    HEAP32[i5 + 12 >> 2] = i28;
    i28 = i5 + 16 | 0;
    HEAP32[i28 >> 2] = i27;
    HEAP32[i28 + 4 >> 2] = ((i27 | 0) < 0) << 31 >> 31;
    i27 = i5 + 24 | 0;
    HEAP32[i27 >> 2] = i30;
    HEAP32[i27 + 4 >> 2] = ((i30 | 0) < 0) << 31 >> 31;
    i30 = i5 + 32 | 0;
    HEAP32[i30 >> 2] = i29;
    HEAP32[i30 + 4 >> 2] = ((i29 | 0) < 0) << 31 >> 31;
    i29 = i5 + 40 | 0;
    HEAP32[i29 >> 2] = i31;
    HEAP32[i29 + 4 >> 2] = ((i31 | 0) < 0) << 31 >> 31;
    _vim_snprintf(i20, 1025, 62768, i5) | 0;
    break;
   }
   i20 = HEAP32[26882] | 0;
   i31 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
   i29 = HEAP32[HEAP32[26773] >> 2] | 0;
   i30 = HEAP32[i19 >> 2] | 0;
   i27 = HEAP32[i18 >> 2] | 0;
   i28 = HEAP32[i17 >> 2] | 0;
   i13 = HEAP32[i16 >> 2] | 0;
   i26 = HEAP32[i15 >> 2] | 0;
   i21 = HEAP32[i14 >> 2] | 0;
   HEAP32[i4 >> 2] = i11;
   HEAP32[i4 + 4 >> 2] = i12;
   HEAP32[i4 + 8 >> 2] = i31;
   HEAP32[i4 + 12 >> 2] = i29;
   i29 = i4 + 16 | 0;
   HEAP32[i29 >> 2] = i30;
   HEAP32[i29 + 4 >> 2] = ((i30 | 0) < 0) << 31 >> 31;
   i30 = i4 + 24 | 0;
   HEAP32[i30 >> 2] = i27;
   HEAP32[i30 + 4 >> 2] = ((i27 | 0) < 0) << 31 >> 31;
   i27 = i4 + 32 | 0;
   HEAP32[i27 >> 2] = i28;
   HEAP32[i27 + 4 >> 2] = ((i28 | 0) < 0) << 31 >> 31;
   i28 = i4 + 40 | 0;
   HEAP32[i28 >> 2] = i13;
   HEAP32[i28 + 4 >> 2] = ((i13 | 0) < 0) << 31 >> 31;
   i13 = i4 + 48 | 0;
   HEAP32[i13 >> 2] = i26;
   HEAP32[i13 + 4 >> 2] = ((i26 | 0) < 0) << 31 >> 31;
   i26 = i4 + 56 | 0;
   HEAP32[i26 >> 2] = i21;
   HEAP32[i26 + 4 >> 2] = ((i21 | 0) < 0) << 31 >> 31;
   _vim_snprintf(i20, 1025, 62836, i4) | 0;
   break;
  }
  if ((HEAP32[10179] | 0) == 22) if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) < 2147483647) {
   _getvcols(HEAP32[26881] | 0, i23, i24, i23 + 4 | 0, i24 + 4 | 0);
   HEAP32[i8 >> 2] = (HEAP32[i25 + 72 >> 2] | 0) - (HEAP32[i25 + 68 >> 2] | 0) + 1;
   _vim_snprintf(i11, 50, 62601, i8) | 0;
  } else i2 = 55; else i2 = 55;
  if ((i2 | 0) == 55) HEAP8[i11 >> 0] = 0;
  if ((HEAP32[i17 >> 2] | 0) == (HEAP32[i15 >> 2] | 0)) if ((HEAP32[i16 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) {
   i20 = HEAP32[26882] | 0;
   i21 = HEAP32[i22 >> 2] | 0;
   i26 = HEAP32[HEAP32[26773] >> 2] | 0;
   i13 = HEAP32[i19 >> 2] | 0;
   i28 = HEAP32[i18 >> 2] | 0;
   i27 = HEAP32[i15 >> 2] | 0;
   i30 = HEAP32[i14 >> 2] | 0;
   HEAP32[i7 >> 2] = i11;
   HEAP32[i7 + 4 >> 2] = i21;
   HEAP32[i7 + 8 >> 2] = i26;
   i26 = i7 + 16 | 0;
   HEAP32[i26 >> 2] = i13;
   HEAP32[i26 + 4 >> 2] = ((i13 | 0) < 0) << 31 >> 31;
   i13 = i7 + 24 | 0;
   HEAP32[i13 >> 2] = i28;
   HEAP32[i13 + 4 >> 2] = ((i28 | 0) < 0) << 31 >> 31;
   i28 = i7 + 32 | 0;
   HEAP32[i28 >> 2] = i27;
   HEAP32[i28 + 4 >> 2] = ((i27 | 0) < 0) << 31 >> 31;
   i27 = i7 + 40 | 0;
   HEAP32[i27 >> 2] = i30;
   HEAP32[i27 + 4 >> 2] = ((i30 | 0) < 0) << 31 >> 31;
   _vim_snprintf(i20, 1025, 62612, i7) | 0;
   break;
  }
  i20 = HEAP32[26882] | 0;
  i30 = HEAP32[i22 >> 2] | 0;
  i27 = HEAP32[HEAP32[26773] >> 2] | 0;
  i28 = HEAP32[i19 >> 2] | 0;
  i13 = HEAP32[i18 >> 2] | 0;
  i26 = HEAP32[i17 >> 2] | 0;
  i21 = HEAP32[i16 >> 2] | 0;
  i29 = HEAP32[i15 >> 2] | 0;
  i31 = HEAP32[i14 >> 2] | 0;
  HEAP32[i6 >> 2] = i11;
  HEAP32[i6 + 4 >> 2] = i30;
  HEAP32[i6 + 8 >> 2] = i27;
  i27 = i6 + 16 | 0;
  HEAP32[i27 >> 2] = i28;
  HEAP32[i27 + 4 >> 2] = ((i28 | 0) < 0) << 31 >> 31;
  i28 = i6 + 24 | 0;
  HEAP32[i28 >> 2] = i13;
  HEAP32[i28 + 4 >> 2] = ((i13 | 0) < 0) << 31 >> 31;
  i13 = i6 + 32 | 0;
  HEAP32[i13 >> 2] = i26;
  HEAP32[i13 + 4 >> 2] = ((i26 | 0) < 0) << 31 >> 31;
  i26 = i6 + 40 | 0;
  HEAP32[i26 >> 2] = i21;
  HEAP32[i26 + 4 >> 2] = ((i21 | 0) < 0) << 31 >> 31;
  i21 = i6 + 48 | 0;
  HEAP32[i21 >> 2] = i29;
  HEAP32[i21 + 4 >> 2] = ((i29 | 0) < 0) << 31 >> 31;
  i29 = i6 + 56 | 0;
  HEAP32[i29 >> 2] = i31;
  HEAP32[i29 + 4 >> 2] = ((i31 | 0) < 0) << 31 >> 31;
  _vim_snprintf(i20, 1025, 62680, i6) | 0;
 } while (0);
 if (HEAP32[i9 >> 2] | 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i10 >> 2] = HEAP32[26985];
 HEAP32[26985] = 114072;
 _msg(HEAP32[26882] | 0) | 0;
 HEAP32[26985] = HEAP32[i10 >> 2];
 STACKTOP = i3;
 return;
}

function _do_search(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i10 = i9;
 i11 = i9 + 96 | 0;
 i12 = i9 + 92 | 0;
 i13 = i9 + 88 | 0;
 i14 = i9 + 84 | 0;
 i15 = i9 + 80 | 0;
 i16 = i9 + 76 | 0;
 i17 = i9 + 72 | 0;
 i18 = i9 + 64 | 0;
 i19 = i9 + 56 | 0;
 i20 = i9 + 40 | 0;
 i21 = i9 + 32 | 0;
 i22 = i9 + 28 | 0;
 i23 = i9 + 24 | 0;
 i24 = i9 + 20 | 0;
 i25 = i9 + 16 | 0;
 i26 = i9 + 12 | 0;
 i27 = i9 + 8 | 0;
 i28 = i9 + 4 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i17 >> 2] = i7;
 HEAP32[i25 >> 2] = 0;
 if (HEAP32[7520] | 0) if (_vim_strchr(HEAP32[26904] | 0, 111) | 0) {
  HEAP32[7520] = 0;
  HEAP32[7522] = 0;
 };
 HEAP32[i20 >> 2] = HEAP32[7519];
 HEAP32[i20 + 4 >> 2] = HEAP32[7520];
 HEAP32[i20 + 8 >> 2] = HEAP32[7521];
 HEAP32[i20 + 12 >> 2] = HEAP32[7522];
 i7 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i18 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i18 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 if (!(HEAP32[i12 >> 2] | 0)) HEAP32[i12 >> 2] = HEAP32[7519]; else HEAP32[7519] = HEAP32[i12 >> 2];
 do if (HEAP32[i15 >> 2] & 1 | 0) if ((HEAP32[i12 >> 2] | 0) == 47) {
  HEAP32[i12 >> 2] = 63;
  break;
 } else {
  HEAP32[i12 >> 2] = 47;
  break;
 } while (0);
 L15 : while (1) {
  HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i24 >> 2] = 0;
  if (!(HEAP32[i13 >> 2] | 0)) i8 = 15; else if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) i8 = 15; else if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) == (HEAP32[i12 >> 2] | 0)) i8 = 15;
  do if ((i8 | 0) == 15) {
   i8 = 0;
   if (!(HEAP32[7516] | 0)) {
    HEAP32[i19 >> 2] = HEAP32[7523];
    if (!(HEAP32[i19 >> 2] | 0)) {
     i8 = 17;
     break L15;
    } else break;
   } else {
    HEAP32[i19 >> 2] = 114072;
    break;
   }
  } while (0);
  if (HEAP32[i13 >> 2] | 0) if (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) {
   HEAP32[i26 >> 2] = HEAP32[i25 >> 2];
   HEAP32[i22 >> 2] = _skip_regexp(HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[26946] | 0, i25) | 0;
   if ((HEAP32[i25 >> 2] | 0) != (HEAP32[i26 >> 2] | 0)) {
    i7 = _strlen(HEAP32[i13 >> 2] | 0) | 0;
    i6 = i7 - (_strlen(HEAP32[i25 >> 2] | 0) | 0) | 0;
    HEAP32[27178] = (HEAP32[27178] | 0) + i6;
    HEAP32[i13 >> 2] = HEAP32[i25 >> 2];
    HEAP32[i19 >> 2] = HEAP32[i25 >> 2];
   }
   if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) == (HEAP32[i12 >> 2] | 0)) {
    HEAP32[i24 >> 2] = HEAP32[i22 >> 2];
    i6 = HEAP32[i22 >> 2] | 0;
    HEAP32[i22 >> 2] = i6 + 1;
    HEAP8[i6 >> 0] = 0;
   }
   HEAP32[7520] = 0;
   HEAP32[7521] = 0;
   HEAP32[7522] = 0;
   do if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) == 43) i8 = 28; else if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) == 45) i8 = 28; else if (((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) i8 = 28; else if (HEAP32[i15 >> 2] & 16 | 0) {
    if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) != 101) if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) != 115) if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) != 98) break;
    if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) == 101) HEAP32[7521] = 64;
    HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
   } while (0);
   if ((i8 | 0) == 28) {
    i8 = 0;
    HEAP32[7520] = 1;
   }
   if (((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) i8 = 39; else if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) == 43) i8 = 39; else if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) == 45) i8 = 39;
   L53 : do if ((i8 | 0) == 39) {
    i8 = 0;
    do if (((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) i8 = 41; else if (((HEAPU8[(HEAP32[i22 >> 2] | 0) + 1 >> 0] | 0) - 48 | 0) >>> 0 < 10) i8 = 41; else if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) == 45) {
     HEAP32[7522] = -1;
     break;
    } else {
     HEAP32[7522] = 1;
     break;
    } while (0);
    if ((i8 | 0) == 41) {
     i8 = 0;
     HEAP32[7522] = _atol(HEAP32[i22 >> 2] | 0) | 0;
    }
    HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    while (1) {
     if (((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break L53;
     HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[27178] = (HEAP32[27178] | 0) + ((HEAP32[i22 >> 2] | 0) - (HEAP32[i13 >> 2] | 0));
   HEAP32[i13 >> 2] = HEAP32[i22 >> 2];
  }
  if (HEAP32[i15 >> 2] & 2 | 0) {
   i6 = (_messaging() | 0) == 0;
   if (((i6 | (HEAP32[26811] | 0) != 0) ^ 1) & (HEAP32[26809] | 0) == 0) {
    if (!(HEAPU8[HEAP32[i19 >> 2] >> 0] | 0)) HEAP32[i22 >> 2] = HEAP32[30064 + ((HEAP32[26465] | 0) * 28 | 0) >> 2]; else HEAP32[i22 >> 2] = HEAP32[i19 >> 2];
    HEAP32[i27 >> 2] = _alloc((_strlen(HEAP32[i22 >> 2] | 0) | 0) + 40 | 0) | 0;
    if (HEAP32[i27 >> 2] | 0) {
     HEAP8[HEAP32[i27 >> 2] >> 0] = HEAP32[i12 >> 2];
     _strcpy((HEAP32[i27 >> 2] | 0) + 1 | 0, HEAP32[i22 >> 2] | 0) | 0;
     do if ((HEAP32[7520] | 0) != 0 | (HEAP32[7521] | 0) != 0 | (HEAP32[7522] | 0) != 0) {
      i6 = HEAP32[i27 >> 2] | 0;
      HEAP32[i22 >> 2] = i6 + (_strlen(HEAP32[i27 >> 2] | 0) | 0);
      i6 = HEAP32[i12 >> 2] & 255;
      i7 = HEAP32[i22 >> 2] | 0;
      HEAP32[i22 >> 2] = i7 + 1;
      HEAP8[i7 >> 0] = i6;
      if (HEAP32[7521] | 0) {
       i6 = HEAP32[i22 >> 2] | 0;
       HEAP32[i22 >> 2] = i6 + 1;
       HEAP8[i6 >> 0] = 101;
      } else if (!(HEAP32[7520] | 0)) {
       i6 = HEAP32[i22 >> 2] | 0;
       HEAP32[i22 >> 2] = i6 + 1;
       HEAP8[i6 >> 0] = 115;
      }
      if ((HEAP32[7522] | 0) > 0 | (HEAP32[7520] | 0) != 0) {
       i6 = HEAP32[i22 >> 2] | 0;
       HEAP32[i22 >> 2] = i6 + 1;
       HEAP8[i6 >> 0] = 43;
      }
      i6 = HEAP32[i22 >> 2] | 0;
      if ((HEAP32[7522] | 0) != 0 | (HEAP32[7520] | 0) != 0) {
       HEAP32[i10 >> 2] = HEAP32[7522];
       _sprintf(i6, 97769, i10) | 0;
       break;
      } else {
       HEAP8[i6 >> 0] = 0;
       break;
      }
     } while (0);
     _msg_start();
     HEAP32[i28 >> 2] = _msg_strtrunc(HEAP32[i27 >> 2] | 0, 0) | 0;
     if (HEAP32[i28 >> 2] | 0) {
      _msg_outtrans(HEAP32[i28 >> 2] | 0) | 0;
      _vim_free(HEAP32[i28 >> 2] | 0);
     } else _msg_outtrans(HEAP32[i27 >> 2] | 0) | 0;
     _msg_clr_eos();
     _msg_check();
     _vim_free(HEAP32[i27 >> 2] | 0);
     _gotocmdline(0);
     _out_flush();
     HEAP32[26713] = 1;
    }
   }
  }
  do if ((HEAP32[7520] | 0) == 0 & (HEAP32[7522] | 0) != 0) if ((HEAP32[i18 + 4 >> 2] | 0) < 2147483645) {
   i6 = (HEAP32[7522] | 0) > 0;
   HEAP32[i23 >> 2] = HEAP32[7522];
   if (i6) {
    while (1) {
     if (!(HEAP32[i23 >> 2] | 0)) break;
     if ((_decl(i18) | 0) == -1) break;
     HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
    }
    if (!(HEAP32[i23 >> 2] | 0)) break;
    HEAP32[i18 >> 2] = 0;
    HEAP32[i18 + 4 >> 2] = 2147483647;
    break;
   } else {
    while (1) {
     if (!(HEAP32[i23 >> 2] | 0)) break;
     if ((_incl(i18) | 0) == -1) break;
     HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
    }
    if (!(HEAP32[i23 >> 2] | 0)) break;
    HEAP32[i18 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) + 1;
    HEAP32[i18 + 4 >> 2] = 0;
    break;
   }
  } while (0);
  if (HEAP32[i13 >> 2] | 0) i29 = (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) == 59; else i29 = 0;
  HEAP32[i23 >> 2] = _searchit(HEAP32[26881] | 0, HEAP32[26773] | 0, i18, (HEAP32[i12 >> 2] | 0) == 47 ? 1 : -1, HEAP32[i19 >> 2] | 0, HEAP32[i14 >> 2] | 0, (HEAP32[7521] | 0) + (HEAP32[i15 >> 2] & 3372 + (i29 ? 0 : 128)) | 0, 2, 0, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
  if (HEAP32[i24 >> 2] | 0) HEAP8[HEAP32[i24 >> 2] >> 0] = HEAP32[i12 >> 2];
  if (!(HEAP32[i23 >> 2] | 0)) {
   i8 = 89;
   break;
  }
  if ((HEAP32[7521] | 0) != 0 & (HEAP32[i11 >> 2] | 0) != 0) HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] = 1;
  HEAP32[i21 >> 2] = 1;
  if (HEAP32[i15 >> 2] & 128 | 0) {
   if (HEAP32[i13 >> 2] | 0) if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) == 59) i8 = 95;
  } else i8 = 95;
  L128 : do if ((i8 | 0) == 95) {
   i8 = 0;
   if (HEAP32[7520] | 0) {
    HEAP32[i23 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[7522] | 0);
    do if ((HEAP32[i23 >> 2] | 0) < 1) HEAP32[i18 >> 2] = 1; else if ((HEAP32[i23 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
     HEAP32[i18 >> 2] = HEAP32[HEAP32[26773] >> 2];
     break;
    } else {
     HEAP32[i18 >> 2] = HEAP32[i23 >> 2];
     break;
    } while (0);
    HEAP32[i18 + 4 >> 2] = 0;
    HEAP32[i21 >> 2] = 2;
    break;
   }
   if ((HEAP32[i18 + 4 >> 2] | 0) < 2147483645) {
    HEAP32[i23 >> 2] = HEAP32[7522];
    if ((HEAP32[i23 >> 2] | 0) > 0) while (1) {
     i6 = HEAP32[i23 >> 2] | 0;
     HEAP32[i23 >> 2] = i6 + -1;
     if ((i6 | 0) <= 0) break L128;
     if ((_incl(i18) | 0) == -1) break L128;
    } else while (1) {
     i6 = HEAP32[i23 >> 2] | 0;
     HEAP32[i23 >> 2] = i6 + 1;
     if ((i6 | 0) >= 0) break L128;
     if ((_decl(i18) | 0) == -1) break L128;
    }
   }
  } while (0);
  if ((HEAP32[i15 >> 2] & 16 | 0) == 0 | (HEAP32[i13 >> 2] | 0) == 0) {
   i8 = 117;
   break;
  }
  if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) != 59) {
   i8 = 117;
   break;
  }
  i6 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
  HEAP32[i13 >> 2] = i6;
  HEAP32[i12 >> 2] = HEAPU8[i6 >> 0];
  if ((HEAP32[i12 >> 2] | 0) != 63 & (HEAP32[i12 >> 2] | 0) != 47) {
   i8 = 115;
   break;
  }
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if ((i8 | 0) == 17) {
  _emsg(93155) | 0;
  HEAP32[i21 >> 2] = 0;
 } else if ((i8 | 0) == 89) HEAP32[i21 >> 2] = 0; else if ((i8 | 0) == 115) {
  HEAP32[i21 >> 2] = 0;
  _emsg(74701) | 0;
 } else if ((i8 | 0) == 117) {
  if (HEAP32[i15 >> 2] & 512 | 0) _setpcmark();
  i8 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i8 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 }
 if (!((HEAP32[i15 >> 2] & 1024 | 0) != 0 | (HEAP32[27134] | 0) != 0)) {
  i30 = HEAP32[i25 >> 2] | 0;
  _vim_free(i30);
  i31 = HEAP32[i21 >> 2] | 0;
  STACKTOP = i9;
  return i31 | 0;
 };
 HEAP32[7519] = HEAP32[i20 >> 2];
 HEAP32[7520] = HEAP32[i20 + 4 >> 2];
 HEAP32[7521] = HEAP32[i20 + 8 >> 2];
 HEAP32[7522] = HEAP32[i20 + 12 >> 2];
 i30 = HEAP32[i25 >> 2] | 0;
 _vim_free(i30);
 i31 = HEAP32[i21 >> 2] | 0;
 STACKTOP = i9;
 return i31 | 0;
}

function _op_yank(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5;
 i11 = i5 + 148 | 0;
 i12 = i5 + 144 | 0;
 i13 = i5 + 140 | 0;
 i14 = i5 + 136 | 0;
 i15 = i5 + 132 | 0;
 i16 = i5 + 128 | 0;
 i17 = i5 + 112 | 0;
 i18 = i5 + 108 | 0;
 i19 = i5 + 104 | 0;
 i20 = i5 + 100 | 0;
 i21 = i5 + 96 | 0;
 i22 = i5 + 92 | 0;
 i23 = i5 + 88 | 0;
 i24 = i5 + 84 | 0;
 i25 = i5 + 80 | 0;
 i26 = i5 + 48 | 0;
 i27 = i5 + 44 | 0;
 i28 = i5 + 40 | 0;
 i29 = i5 + 152 | 0;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i21 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2];
 HEAP32[i22 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2];
 HEAP32[i23 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2];
 if (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) if (!(_valid_yank_reg(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0, 1) | 0)) {
  _beep_flush();
  HEAP32[i11 >> 2] = 0;
  i30 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i5;
  return i30 | 0;
 }
 if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 95) {
  HEAP32[i11 >> 2] = 1;
  i30 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i5;
  return i30 | 0;
 }
 if (HEAP32[27099] | 0) i4 = 9; else if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 42) HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = 0; else i4 = 9;
 if ((i4 | 0) == 9) if (!(HEAP32[27099] | 0)) if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 43) HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = 0;
 if (!(HEAP32[i13 >> 2] | 0)) _get_yank_register(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0, 1) | 0;
 HEAP32[i16 >> 2] = HEAP32[26084];
 if (HEAP32[26082] | 0) if (HEAP32[HEAP32[26084] >> 2] | 0) HEAP32[26084] = i17; else i4 = 17; else i4 = 17;
 if ((i4 | 0) == 17) _free_yank_all();
 do if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0)) if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 28 + 4 >> 2] | 0)) if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] | 0)) {
  if (HEAP32[(HEAP32[i12 >> 2] | 0) + 60 >> 2] | 0) if ((HEAPU8[HEAP32[26975] >> 0] | 0) != 111) break;
  if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 64 >> 2] | 0)) if ((HEAP32[i22 >> 2] | 0) > 1 ? (HEAP32[(HEAP32[i12 >> 2] | 0) + 36 + 4 >> 2] | 0) == 0 : 0) {
   HEAP32[i21 >> 2] = 1;
   HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + -1;
  }
 } while (0);
 HEAP32[(HEAP32[26084] | 0) + 4 >> 2] = HEAP32[i22 >> 2];
 HEAP8[(HEAP32[26084] | 0) + 8 >> 0] = HEAP32[i21 >> 2];
 HEAP32[(HEAP32[26084] | 0) + 12 >> 2] = 0;
 i17 = _lalloc_clear(HEAP32[i22 >> 2] << 2, 1) | 0;
 HEAP32[HEAP32[26084] >> 2] = i17;
 if (!(HEAP32[HEAP32[26084] >> 2] | 0)) {
  HEAP32[26084] = HEAP32[i16 >> 2];
  HEAP32[i11 >> 2] = 0;
  i30 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i5;
  return i30 | 0;
 }
 HEAP32[i15 >> 2] = 0;
 HEAP32[i19 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2];
 if (HEAP32[(HEAP32[i12 >> 2] | 0) + 64 >> 2] | 0) {
  HEAP8[(HEAP32[26084] | 0) + 8 >> 0] = 2;
  i17 = HEAP32[i12 >> 2] | 0;
  HEAP32[(HEAP32[26084] | 0) + 12 >> 2] = (HEAP32[i17 + 72 >> 2] | 0) - (HEAP32[i17 + 68 >> 2] | 0);
  if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) == 2147483647) if ((HEAP32[(HEAP32[26084] | 0) + 12 >> 2] | 0) > 0) {
   i17 = (HEAP32[26084] | 0) + 12 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
  }
 }
 L46 : while (1) {
  if ((HEAP32[i19 >> 2] | 0) > (HEAP32[i23 >> 2] | 0)) {
   i4 = 48;
   break;
  }
  switch (HEAPU8[(HEAP32[26084] | 0) + 8 >> 0] | 0) {
  case 2:
   {
    _block_prep(HEAP32[i12 >> 2] | 0, i26, HEAP32[i19 >> 2] | 0, 0);
    if (!(_yank_copy_line(i26, HEAP32[i15 >> 2] | 0) | 0)) break L46;
    break;
   }
  case 1:
   {
    i17 = _vim_strsave(_ml_get(HEAP32[i19 >> 2] | 0) | 0) | 0;
    HEAP32[(HEAP32[HEAP32[26084] >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] = i17;
    if (!i17) break L46;
    break;
   }
  case 0:
   {
    HEAP32[i27 >> 2] = 0;
    HEAP32[i28 >> 2] = 2147483647;
    HEAP32[i24 >> 2] = _ml_get(HEAP32[i19 >> 2] | 0) | 0;
    HEAP32[i26 >> 2] = 0;
    HEAP32[i26 + 4 >> 2] = 0;
    if ((HEAP32[i19 >> 2] | 0) == (HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] | 0)) HEAP32[i27 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 28 + 4 >> 2];
    if ((HEAP32[i19 >> 2] | 0) == (HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] | 0)) HEAP32[i28 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 36 + 4 >> 2];
    if ((HEAP32[i28 >> 2] | 0) == 2147483647) HEAP32[i28 >> 2] = _strlen(HEAP32[i24 >> 2] | 0) | 0;
    if ((HEAP32[i27 >> 2] | 0) > (HEAP32[i28 >> 2] | 0)) HEAP32[i26 + 8 >> 2] = 0; else HEAP32[i26 + 8 >> 2] = (HEAP32[i28 >> 2] | 0) - (HEAP32[i27 >> 2] | 0) + (HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] | 0);
    HEAP32[i26 + 12 >> 2] = (HEAP32[i24 >> 2] | 0) + (HEAP32[i27 >> 2] | 0);
    if (!(_yank_copy_line(i26, HEAP32[i15 >> 2] | 0) | 0)) break L46;
    break;
   }
  default:
   {}
  }
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
 }
 L67 : do if ((i4 | 0) == 48) {
  if ((HEAP32[i16 >> 2] | 0) != (HEAP32[26084] | 0)) {
   HEAP32[i18 >> 2] = _lalloc((HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0) << 2, 1) | 0;
   if (!(HEAP32[i18 >> 2] | 0)) break;
   HEAP32[i20 >> 2] = 0;
   while (1) {
    i31 = HEAP32[HEAP32[i16 >> 2] >> 2] | 0;
    if ((HEAP32[i20 >> 2] | 0) >= (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0)) break;
    i19 = HEAP32[i20 >> 2] << 2 | 0;
    HEAP32[(HEAP32[i18 >> 2] | 0) + i19 >> 2] = HEAP32[i31 + i19 >> 2];
    HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
   }
   _vim_free(i31);
   HEAP32[HEAP32[i16 >> 2] >> 2] = HEAP32[i18 >> 2];
   if ((HEAP32[i21 >> 2] | 0) == 1) HEAP8[(HEAP32[i16 >> 2] | 0) + 8 >> 0] = 1;
   do if (!(HEAPU8[(HEAP32[i16 >> 2] | 0) + 8 >> 0] | 0)) if (!(_vim_strchr(HEAP32[26904] | 0, 62) | 0)) {
    i19 = _strlen(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + ((HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) - 1 << 2) >> 2] | 0) | 0;
    HEAP32[i25 >> 2] = _lalloc(i19 + (_strlen(HEAP32[HEAP32[HEAP32[26084] >> 2] >> 2] | 0) | 0) + 1 | 0, 1) | 0;
    if (!(HEAP32[i25 >> 2] | 0)) {
     HEAP32[i15 >> 2] = (HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0) - 1;
     break L67;
    } else {
     i19 = HEAP32[i25 >> 2] | 0;
     i26 = HEAP32[HEAP32[i16 >> 2] >> 2] | 0;
     i27 = (HEAP32[i20 >> 2] | 0) + -1 | 0;
     HEAP32[i20 >> 2] = i27;
     _strcpy(i19, HEAP32[i26 + (i27 << 2) >> 2] | 0) | 0;
     _strcat(HEAP32[i25 >> 2] | 0, HEAP32[HEAP32[HEAP32[26084] >> 2] >> 2] | 0) | 0;
     _vim_free(HEAP32[(HEAP32[HEAP32[i16 >> 2] >> 2] | 0) + (HEAP32[i20 >> 2] << 2) >> 2] | 0);
     _vim_free(HEAP32[HEAP32[HEAP32[26084] >> 2] >> 2] | 0);
     i27 = HEAP32[i25 >> 2] | 0;
     i26 = HEAP32[HEAP32[i16 >> 2] >> 2] | 0;
     i19 = HEAP32[i20 >> 2] | 0;
     HEAP32[i20 >> 2] = i19 + 1;
     HEAP32[i26 + (i19 << 2) >> 2] = i27;
     HEAP32[i15 >> 2] = 1;
     break;
    }
   } else i4 = 60; else i4 = 60; while (0);
   if ((i4 | 0) == 60) HEAP32[i15 >> 2] = 0;
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0)) break;
    i27 = HEAP32[HEAP32[26084] >> 2] | 0;
    i19 = HEAP32[i15 >> 2] | 0;
    HEAP32[i15 >> 2] = i19 + 1;
    i26 = HEAP32[i27 + (i19 << 2) >> 2] | 0;
    i19 = HEAP32[HEAP32[i16 >> 2] >> 2] | 0;
    i27 = HEAP32[i20 >> 2] | 0;
    HEAP32[i20 >> 2] = i27 + 1;
    HEAP32[i19 + (i27 << 2) >> 2] = i26;
   }
   HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] = HEAP32[i20 >> 2];
   _vim_free(HEAP32[HEAP32[26084] >> 2] | 0);
   HEAP32[26084] = HEAP32[i16 >> 2];
  }
  if (HEAP32[(HEAP32[26881] | 0) + 200 + 8 >> 2] | 0) _redraw_later(35);
  do if (HEAP32[i14 >> 2] | 0) {
   if (!(HEAP32[i21 >> 2] | 0)) if ((HEAP32[i22 >> 2] | 0) == 1 ? (HEAP32[(HEAP32[i12 >> 2] | 0) + 64 >> 2] | 0) == 0 : 0) HEAP32[i22 >> 2] = 0;
   if ((HEAP32[i22 >> 2] | 0) > (HEAP32[26967] | 0)) {
    if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0)) HEAP8[i29 >> 0] = 0; else {
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2];
     _vim_snprintf(i29, 100, 62364, i10) | 0;
    }
    _update_topline_redraw();
    i26 = (HEAP32[(HEAP32[i12 >> 2] | 0) + 64 >> 2] | 0) != 0;
    if ((HEAP32[i22 >> 2] | 0) == 1) if (i26) {
     HEAP32[i9 >> 2] = i29;
     _smsg(62374, i9) | 0;
     break;
    } else {
     HEAP32[i8 >> 2] = i29;
     _smsg(62399, i8) | 0;
     break;
    } else {
     i27 = HEAP32[i22 >> 2] | 0;
     if (i26) {
      HEAP32[i7 >> 2] = i27;
      HEAP32[i7 + 4 >> 2] = i29;
      _smsg(62415, i7) | 0;
      break;
     } else {
      HEAP32[i6 >> 2] = i27;
      HEAP32[i6 + 4 >> 2] = i29;
      _smsg(62443, i6) | 0;
      break;
     }
    }
   }
  } while (0);
  i27 = (HEAP32[26773] | 0) + 476 | 0;
  i26 = (HEAP32[i12 >> 2] | 0) + 28 | 0;
  HEAP32[i27 >> 2] = HEAP32[i26 >> 2];
  HEAP32[i27 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
  i26 = (HEAP32[26773] | 0) + 492 | 0;
  i27 = (HEAP32[i12 >> 2] | 0) + 36 | 0;
  HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
  HEAP32[i26 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
  if ((HEAP32[i21 >> 2] | 0) == 1) if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 64 >> 2] | 0)) {
   HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
   HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = 2147483647;
  }
  do if (HEAP32[27099] | 0) {
   if ((HEAP32[i16 >> 2] | 0) != 104932) {
    if (HEAP32[i13 >> 2] | 0) break;
    if (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) break;
    if (!((HEAP32[26762] | HEAP32[26767]) & 1)) break;
   }
   if ((HEAP32[i16 >> 2] | 0) != 104932) _copy_yank_reg(104932);
   _clip_own_selection(108396);
   _clip_gen_set_selection(108396);
  } while (0);
  HEAP32[i11 >> 2] = 1;
  i30 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i5;
  return i30 | 0;
 } while (0);
 _free_yank((HEAP32[i15 >> 2] | 0) + 1 | 0);
 HEAP32[26084] = HEAP32[i16 >> 2];
 HEAP32[i11 >> 2] = 0;
 i30 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i5;
 return i30 | 0;
}

function _ex_sort(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i4 = i3 + 160 | 0;
 i5 = i3 + 72 | 0;
 i6 = i3 + 64 | 0;
 i7 = i3 + 60 | 0;
 i8 = i3 + 56 | 0;
 i9 = i3 + 52 | 0;
 i10 = i3 + 48 | 0;
 i11 = i3 + 44 | 0;
 i12 = i3 + 40 | 0;
 i13 = i3 + 36 | 0;
 i14 = i3 + 32 | 0;
 i15 = i3 + 164 | 0;
 i16 = i3 + 28 | 0;
 i17 = i3 + 24 | 0;
 i18 = i3 + 20 | 0;
 i19 = i3 + 16 | 0;
 i20 = i3 + 12 | 0;
 i21 = i3 + 8 | 0;
 i22 = i3 + 4 | 0;
 i23 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i8 >> 2] = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i10 >> 2] = (HEAP32[i1 + 40 >> 2] | 0) - (HEAP32[i1 + 36 >> 2] | 0) + 1;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 if ((HEAP32[i10 >> 2] | 0) >>> 0 <= 1) {
  STACKTOP = i3;
  return;
 }
 if (!(_u_save((HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[25216] = 0;
 HEAP32[25217] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i9 >> 2] = _lalloc((HEAP32[i10 >> 2] | 0) * 12 | 0, 1) | 0;
 L7 : do if (HEAP32[i9 >> 2] | 0) {
  HEAP32[25218] = 0;
  HEAP32[25219] = 0;
  HEAP32[25220] = 0;
  HEAP32[25221] = 0;
  HEAP32[i12 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
  L9 : while (1) {
   if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) break;
   do if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) != 9) {
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 105) {
     HEAP32[25220] = 1;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 114) {
     HEAP32[25219] = 1;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 110) {
     HEAP32[25218] = 1;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 98) {
     HEAP32[i20 >> 2] = 9;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 111) {
     HEAP32[i20 >> 2] = 10;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 120) {
     HEAP32[i20 >> 2] = 12;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 117) {
     HEAP32[i16 >> 2] = 1;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 34) break L9;
    i1 = (_check_nextcmd(HEAP32[i12 >> 2] | 0) | 0) != 0;
    i24 = HEAP32[i12 >> 2] | 0;
    if (i1) {
     i2 = 24;
     break L9;
    }
    if (((HEAPU8[i24 >> 0] | 0) - 65 | 0) >>> 0 < 26) {
     i2 = 37;
     break L9;
    }
    if (((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) - 97 | 0) >>> 0 < 26) {
     i2 = 37;
     break L9;
    }
    if (HEAP32[i5 >> 2] | 0) {
     i2 = 37;
     break L9;
    }
    HEAP32[i13 >> 2] = _skip_regexp((HEAP32[i12 >> 2] | 0) + 1 | 0, HEAPU8[HEAP32[i12 >> 2] >> 0] | 0, 1, 0) | 0;
    if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) != (HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) {
     i2 = 29;
     break L9;
    }
    HEAP8[HEAP32[i13 >> 2] >> 0] = 0;
    if ((HEAP32[i13 >> 2] | 0) == ((HEAP32[i12 >> 2] | 0) + 1 | 0)) {
     if (!(_last_search_pat() | 0)) {
      i2 = 32;
      break L9;
     }
     HEAP32[i5 >> 2] = _vim_regcomp(_last_search_pat() | 0, 1) | 0;
    } else HEAP32[i5 >> 2] = _vim_regcomp((HEAP32[i12 >> 2] | 0) + 1 | 0, 1) | 0;
    if (!(HEAP32[i5 >> 2] | 0)) break L7;
    HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i5 + 84 >> 2] = HEAP32[26933];
   } while (0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  if ((i2 | 0) == 24) {
   i1 = _check_nextcmd(i24) | 0;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i1;
  } else if ((i2 | 0) == 29) {
   _emsg(94184) | 0;
   break;
  } else if ((i2 | 0) == 32) {
   _emsg(93155) | 0;
   break;
  } else if ((i2 | 0) == 37) {
   _emsg2(92476, HEAP32[i12 >> 2] | 0) | 0;
   break;
  }
  if ((HEAP32[i21 >> 2] | 0) > 1) {
   _emsg(92453) | 0;
   break;
  }
  HEAP32[25218] = (HEAP32[25218] | 0) + (HEAP32[i20 >> 2] | 0);
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2];
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0)) break;
   HEAP32[i13 >> 2] = _ml_get(HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = _strlen(HEAP32[i13 >> 2] | 0) | 0;
   if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i18 >> 2] = 0;
   HEAP32[i19 >> 2] = HEAP32[i6 >> 2];
   do if (HEAP32[i5 >> 2] | 0) if (_vim_regexec(i5, HEAP32[i13 >> 2] | 0, 0) | 0) if (HEAP32[25219] | 0) {
    HEAP32[i18 >> 2] = (HEAP32[i5 + 4 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
    HEAP32[i19 >> 2] = (HEAP32[i5 + 44 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
    break;
   } else {
    HEAP32[i18 >> 2] = (HEAP32[i5 + 44 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
    break;
   } else i2 = 50; else i2 = 50; while (0);
   if ((i2 | 0) == 50) {
    i2 = 0;
    if (HEAP32[i5 >> 2] | 0) HEAP32[i19 >> 2] = 0;
   }
   if (HEAP32[25218] | 0) {
    HEAP32[i14 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
    HEAP8[i15 >> 0] = HEAP8[HEAP32[i14 >> 2] >> 0] | 0;
    HEAP8[HEAP32[i14 >> 2] >> 0] = 0;
    HEAP32[i12 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
    do if (HEAP32[25218] | 0) {
     do if (HEAP32[i20 >> 2] & 4 | 0) HEAP32[i13 >> 2] = _skiptohex(HEAP32[i12 >> 2] | 0) | 0; else {
      i1 = HEAP32[i12 >> 2] | 0;
      if (HEAP32[i20 >> 2] & 1 | 0) {
       HEAP32[i13 >> 2] = _skiptobin(i1) | 0;
       break;
      } else {
       HEAP32[i13 >> 2] = _skiptodigit(i1) | 0;
       break;
      }
     } while (0);
     if ((HEAP32[i13 >> 2] | 0) >>> 0 > (HEAP32[i12 >> 2] | 0) >>> 0) if ((HEAPU8[(HEAP32[i13 >> 2] | 0) + -1 >> 0] | 0) == 45) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
     if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) {
      HEAP32[(HEAP32[i9 >> 2] | 0) + (((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) | 0) * 12 | 0) + 4 >> 2] = -2147483647;
      break;
     } else {
      _vim_str2nr(HEAP32[i13 >> 2] | 0, 0, 0, HEAP32[i20 >> 2] | 0, (HEAP32[i9 >> 2] | 0) + (((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) | 0) * 12 | 0) + 4 | 0, 0, 0);
      break;
     }
    } while (0);
    HEAP8[HEAP32[i14 >> 2] >> 0] = HEAP8[i15 >> 0] | 0;
   } else {
    HEAP32[(HEAP32[i9 >> 2] | 0) + (((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) | 0) * 12 | 0) + 4 >> 2] = HEAP32[i18 >> 2];
    HEAP32[(HEAP32[i9 >> 2] | 0) + (((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) | 0) * 12 | 0) + 4 + 4 >> 2] = HEAP32[i19 >> 2];
   }
   HEAP32[(HEAP32[i9 >> 2] | 0) + (((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) | 0) * 12 | 0) >> 2] = HEAP32[i7 >> 2];
   if (HEAP32[i5 >> 2] | 0) _fast_breakcheck();
   if (HEAP32[26834] | 0) break L7;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  HEAP32[25216] = _alloc((HEAP32[i8 >> 2] | 0) + 1 | 0) | 0;
  if (HEAP32[25216] | 0) {
   HEAP32[25217] = _alloc((HEAP32[i8 >> 2] | 0) + 1 | 0) | 0;
   if (HEAP32[25217] | 0) {
    _qsort(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, 12, 3);
    if (!(HEAP32[25221] | 0)) {
     HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
     HEAP32[i11 >> 2] = 0;
     while (1) {
      if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) break;
      if (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) i25 = (HEAP32[i10 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) - 1 | 0; else i25 = HEAP32[i11 >> 2] | 0;
      HEAP32[i23 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + (i25 * 12 | 0) >> 2];
      if (((HEAP32[i23 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) - 1) | 0) != (HEAP32[i7 >> 2] | 0)) HEAP32[i22 >> 2] = 1;
      HEAP32[i13 >> 2] = _ml_get(HEAP32[i23 >> 2] | 0) | 0;
      if ((HEAP32[i16 >> 2] | 0) == 0 | (HEAP32[i11 >> 2] | 0) == 0) i2 = 86; else {
       i1 = HEAP32[i13 >> 2] | 0;
       i26 = HEAP32[25216] | 0;
       if (HEAP32[25220] | 0) i27 = _strcasecmp(i1, i26) | 0; else i27 = _strcmp(i1, i26) | 0;
       if (i27 | 0) i2 = 86;
      }
      if ((i2 | 0) == 86) {
       i2 = 0;
       _strcpy(HEAP32[25216] | 0, HEAP32[i13 >> 2] | 0) | 0;
       i26 = HEAP32[i7 >> 2] | 0;
       HEAP32[i7 >> 2] = i26 + 1;
       if (!(_ml_append(i26, HEAP32[25216] | 0, 0, 0) | 0)) break;
      }
      _fast_breakcheck();
      if (HEAP32[26834] | 0) break L7;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     }
     L124 : do if ((HEAP32[i11 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) {
      HEAP32[i11 >> 2] = 0;
      while (1) {
       if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) break L124;
       _ml_delete(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0, 0) | 0;
       HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
      }
     } else HEAP32[i10 >> 2] = 0; while (0);
     HEAP32[i17 >> 2] = (HEAP32[i10 >> 2] | 0) - ((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0));
     if ((HEAP32[i17 >> 2] | 0) > 0) {
      i26 = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0;
      i1 = HEAP32[i17 >> 2] | 0;
      _mark_adjust(i26 - i1 | 0, i26 | 0, 2147483647, 0 - i1 | 0);
     } else if ((HEAP32[i17 >> 2] | 0) < 0) _mark_adjust(HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0, 2147483647, 0 - (HEAP32[i17 >> 2] | 0) | 0, 0);
     if ((HEAP32[i22 >> 2] | 0) != 0 | (HEAP32[i17 >> 2] | 0) != 0) {
      i1 = HEAP32[i4 >> 2] | 0;
      _changed_lines(HEAP32[i1 + 36 >> 2] | 0, 0, (HEAP32[i1 + 40 >> 2] | 0) + 1 | 0, 0 - (HEAP32[i17 >> 2] | 0) | 0);
     }
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2];
     _beginline(5);
    }
   }
  }
 } while (0);
 _vim_free(HEAP32[i9 >> 2] | 0);
 _vim_free(HEAP32[25216] | 0);
 _vim_free(HEAP32[25217] | 0);
 _vim_regfree(HEAP32[i5 >> 2] | 0);
 if (!(HEAP32[26834] | 0)) {
  STACKTOP = i3;
  return;
 }
 _emsg(92420) | 0;
 STACKTOP = i3;
 return;
}

function _set_num_option(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i8 + 8 | 0;
 i10 = i8;
 i11 = i8 + 56 | 0;
 i12 = i8 + 52 | 0;
 i13 = i8 + 48 | 0;
 i14 = i8 + 44 | 0;
 i15 = i8 + 40 | 0;
 i16 = i8 + 36 | 0;
 i17 = i8 + 32 | 0;
 i18 = i8 + 28 | 0;
 i19 = i8 + 24 | 0;
 i20 = i8 + 20 | 0;
 i21 = i8 + 16 | 0;
 i22 = i8 + 12 | 0;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
 HEAP32[i20 >> 2] = HEAP32[10173];
 HEAP32[i21 >> 2] = HEAP32[10174];
 HEAP32[i22 >> 2] = HEAP32[i13 >> 2];
 if (HEAP32[26783] | 0) if (HEAP32[15328 + ((HEAP32[i12 >> 2] | 0) * 28 | 0) + 8 >> 2] & 524288 | 0) {
  HEAP32[i11 >> 2] = 93591;
  i23 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i8;
  return i23 | 0;
 }
 HEAP32[HEAP32[i22 >> 2] >> 2] = HEAP32[i14 >> 2];
 HEAP32[26757] = 1;
 if ((HEAP32[(HEAP32[26773] | 0) + 680 >> 2] | 0) < 0) {
  HEAP32[i18 >> 2] = 93410;
  i13 = HEAP32[26773] | 0;
  HEAP32[i13 + 680 >> 2] = HEAP32[i13 + 700 >> 2];
 }
 do if ((HEAP32[i22 >> 2] | 0) == 108136 | (HEAP32[i22 >> 2] | 0) == 107712) {
  if ((HEAP32[27034] | 0) < 1) {
   HEAP32[i18 >> 2] = 93410;
   HEAP32[27034] = 1;
  }
  if ((HEAP32[27035] | 0) > (HEAP32[27034] | 0)) {
   HEAP32[i18 >> 2] = 93917;
   HEAP32[27034] = HEAP32[27035];
  }
  if ((HEAP32[26928] | 0) < 0) {
   HEAP32[i18 >> 2] = 93410;
   HEAP32[26928] = 0;
  }
  if ((HEAP32[26887] | 0) != (HEAP32[27112] | 0)) {
   if ((HEAP32[i22 >> 2] | 0) == 108136) if ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) < (HEAP32[27034] | 0)) _win_setheight(HEAP32[27034] | 0);
   if ((HEAP32[i22 >> 2] | 0) == 107712) if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) < (HEAP32[26928] | 0)) _win_setheight(HEAP32[26928] | 0);
  }
 } else {
  if ((HEAP32[i22 >> 2] | 0) == 108140) {
   if ((HEAP32[27035] | 0) < 0) {
    HEAP32[i18 >> 2] = 93410;
    HEAP32[27035] = 0;
   }
   if ((HEAP32[27035] | 0) > (HEAP32[27034] | 0)) {
    HEAP32[i18 >> 2] = 93917;
    HEAP32[27035] = HEAP32[27034];
   }
   _win_setminheight();
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 108148) {
   if ((HEAP32[27037] | 0) < 1) {
    HEAP32[i18 >> 2] = 93410;
    HEAP32[27037] = 1;
   }
   if ((HEAP32[27036] | 0) > (HEAP32[27037] | 0)) {
    HEAP32[i18 >> 2] = 93973;
    HEAP32[27037] = HEAP32[27036];
   }
   if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) break;
   if ((HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) >= (HEAP32[27037] | 0)) break;
   _win_setwidth(HEAP32[27037] | 0);
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 108144) {
   if ((HEAP32[27036] | 0) < 0) {
    HEAP32[i18 >> 2] = 93410;
    HEAP32[27036] = 0;
   }
   if ((HEAP32[27036] | 0) > (HEAP32[27037] | 0)) {
    HEAP32[i18 >> 2] = 93973;
    HEAP32[27036] = HEAP32[27037];
   }
   _win_setminwidth();
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 107768) {
   _last_status(0);
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 107772) {
   _shell_new_rows();
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 107764) {
   if (!(HEAP32[26627] | 0)) break;
   if ((_gui_mch_adjust_charheight() | 0) != 1) break;
   _gui_set_shellsize(0, 0, 1);
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == ((HEAP32[26773] | 0) + 552 | 0)) {
   if ((HEAP32[(HEAP32[26773] | 0) + 552 >> 2] | 0) < 0) i7 = 52; else if ((HEAP32[(HEAP32[26773] | 0) + 552 >> 2] | 0) > 2) i7 = 52;
   if ((i7 | 0) == 52) {
    HEAP32[i18 >> 2] = 92453;
    HEAP32[(HEAP32[26773] | 0) + 552 >> 2] = 0;
   }
   HEAP32[26259] = HEAP32[(HEAP32[26773] | 0) + 552 >> 2];
   if (!(HEAP32[26835] | 0)) break;
   _showmode() | 0;
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 108104) {
   if ((HEAP32[27026] | 0) < 1) {
    HEAP32[27026] = 1;
    break;
   }
   if ((HEAP32[27026] | 0) < (HEAP32[10173] | 0)) break;
   HEAP32[27026] = (HEAP32[10173] | 0) - 1;
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == ((HEAP32[26773] | 0) + 556 | 0)) {
   if ((HEAP32[(HEAP32[26773] | 0) + 556 >> 2] | 0) < -1) i7 = 63; else if ((HEAP32[(HEAP32[26773] | 0) + 556 >> 2] | 0) > 2) i7 = 63;
   if ((i7 | 0) == 63) {
    HEAP32[i18 >> 2] = 92453;
    HEAP32[(HEAP32[26773] | 0) + 556 >> 2] = 0;
   }
   HEAP32[26260] = HEAP32[(HEAP32[26773] | 0) + 556 >> 2];
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 107500) {
   if ((HEAP32[26875] | 0) < 1) {
    HEAP32[i18 >> 2] = 93410;
    HEAP32[26875] = 1;
   }
   i13 = HEAP32[26875] | 0;
   i6 = HEAP32[10173] | 0;
   if ((i13 | 0) > (i6 - (_min_rows() | 0) + 1 | 0)) {
    i6 = HEAP32[10173] | 0;
    HEAP32[26875] = i6 - (_min_rows() | 0) + 1;
   }
   if ((HEAP32[26875] | 0) == (HEAP32[i19 >> 2] | 0)) break;
   if ((HEAP32[26781] | 0) == 0 | (HEAP32[26628] | 0) != 0) break;
   _command_height();
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 107516) {
   if ((HEAP32[26879] | 0) < 0) {
    HEAP32[i18 >> 2] = 93410;
    HEAP32[26879] = 100;
   }
   if ((HEAP32[26879] | 0) == 0 | (HEAP32[i19 >> 2] | 0) != 0) break;
   _ml_open_files();
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == 108080) {
   HEAP32[27020] = HEAP32[i19 >> 2];
   _u_sync(1);
   HEAP32[27020] = HEAP32[i14 >> 2];
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == ((HEAP32[26773] | 0) + 756 | 0)) {
   HEAP32[(HEAP32[26773] | 0) + 756 >> 2] = HEAP32[i19 >> 2];
   _u_sync(1);
   HEAP32[(HEAP32[26773] | 0) + 756 >> 2] = HEAP32[i14 >> 2];
   break;
  }
  if ((HEAP32[i22 >> 2] | 0) == ((HEAP32[26773] | 0) + 708 | 0)) if ((HEAP32[(HEAP32[26773] | 0) + 708 >> 2] | 0) < 0) {
   HEAP32[i18 >> 2] = 93410;
   HEAP32[(HEAP32[26773] | 0) + 708 >> 2] = 0;
  }
 } while (0);
 i14 = HEAP32[10173] | 0;
 if ((i14 | 0) < (_min_rows() | 0)) if (HEAP32[26781] | 0) {
  if (HEAP32[i15 >> 2] | 0) {
   i14 = HEAP32[i15 >> 2] | 0;
   i6 = HEAP32[i16 >> 2] | 0;
   HEAP32[i10 >> 2] = _min_rows() | 0;
   _vim_snprintf(i14, i6, 63661, i10) | 0;
   HEAP32[i18 >> 2] = HEAP32[i15 >> 2];
  }
  HEAP32[10173] = _min_rows() | 0;
 }
 if ((HEAP32[10174] | 0) < 12) if (HEAP32[26781] | 0) {
  if (HEAP32[i15 >> 2] | 0) {
   i10 = HEAP32[i15 >> 2] | 0;
   i6 = HEAP32[i16 >> 2] | 0;
   HEAP32[i9 >> 2] = 12;
   _vim_snprintf(i10, i6, 63690, i9) | 0;
   HEAP32[i18 >> 2] = HEAP32[i15 >> 2];
  }
  HEAP32[10174] = 12;
 }
 _limit_screen_size();
 if ((HEAP32[i20 >> 2] | 0) != (HEAP32[10173] | 0)) i7 = 97; else if ((HEAP32[i21 >> 2] | 0) != (HEAP32[10174] | 0)) i7 = 97;
 do if ((i7 | 0) == 97) {
  do if (HEAP32[26758] | 0) HEAP32[HEAP32[i22 >> 2] >> 2] = HEAP32[i19 >> 2]; else {
   if (!((HEAP32[26781] | 0) == 0 | (HEAP32[26628] | 0) != 0)) {
    _set_shellsize(HEAP32[10174] | 0, HEAP32[10173] | 0, 1);
    break;
   }
   _check_shellsize();
   if ((HEAP32[26876] | 0) > ((HEAP32[10173] | 0) - (HEAP32[26875] | 0) | 0)) if ((HEAP32[10173] | 0) > (HEAP32[26875] | 0)) HEAP32[26876] = (HEAP32[10173] | 0) - (HEAP32[26875] | 0);
  } while (0);
  if ((HEAP32[27026] | 0) < (HEAP32[10173] | 0)) if (_option_was_set(94846) | 0) break;
  HEAP32[27026] = (HEAP32[10173] | 0) - 1;
 } while (0);
 if ((HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0) <= 0) {
  HEAP32[i18 >> 2] = 93410;
  HEAP32[(HEAP32[26773] | 0) + 700 >> 2] = 8;
 }
 if ((HEAP32[27012] | 0) < 0) {
  HEAP32[i18 >> 2] = 93410;
  HEAP32[27012] = 0;
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 200 + 20 >> 2] | 0) <= 0) i7 = 114; else if ((HEAP32[(HEAP32[26881] | 0) + 200 + 20 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) > 0) i7 = 114;
 do if ((i7 | 0) == 114) if (HEAP32[26781] | 0) {
  i19 = HEAP32[(HEAP32[26881] | 0) + 200 + 20 >> 2] | 0;
  if ((HEAP32[i22 >> 2] | 0) == ((HEAP32[26881] | 0) + 200 + 20 | 0)) {
   if (i19 | 0) HEAP32[i18 >> 2] = 93654;
   _win_comp_scroll(HEAP32[26881] | 0);
   break;
  } else {
   i21 = HEAP32[26881] | 0;
   if ((i19 | 0) <= 0) {
    HEAP32[i21 + 200 + 20 >> 2] = 1;
    break;
   } else {
    HEAP32[(HEAP32[26881] | 0) + 200 + 20 >> 2] = HEAP32[i21 + 88 >> 2];
    break;
   }
  }
 } while (0);
 if ((HEAP32[26932] | 0) < 0) {
  HEAP32[i18 >> 2] = 93410;
  HEAP32[26932] = 0;
 } else if ((HEAP32[26932] | 0) > 1e4) {
  HEAP32[i18 >> 2] = 92453;
  HEAP32[26932] = 1e4;
 }
 if ((HEAP32[26966] | 0) < 0 | (HEAP32[26966] | 0) > 2) {
  HEAP32[i18 >> 2] = 92453;
  HEAP32[26966] = 0;
 }
 if ((HEAP32[26967] | 0) < 0) {
  HEAP32[i18 >> 2] = 93410;
  HEAP32[26967] = 1;
 }
 if ((HEAP32[26970] | 0) < -100) i7 = 132; else if ((HEAP32[26970] | 0) >= (HEAP32[10173] | 0)) i7 = 132;
 do if ((i7 | 0) == 132) if (HEAP32[26781] | 0) if ((HEAP32[10173] | 0) != (HEAP32[i20 >> 2] | 0)) {
  HEAP32[26970] = (HEAP32[10173] | 0) / 2 | 0;
  break;
 } else {
  HEAP32[i18 >> 2] = 93654;
  HEAP32[26970] = 1;
  break;
 } while (0);
 if ((HEAP32[26971] | 0) < 0) if (HEAP32[26781] | 0) {
  HEAP32[i18 >> 2] = 93654;
  HEAP32[26971] = 0;
 }
 if ((HEAP32[26990] | 0) < 0) if (HEAP32[26781] | 0) {
  HEAP32[i18 >> 2] = 93410;
  HEAP32[26990] = 0;
 }
 if ((HEAP32[27022] | 0) < 0) {
  HEAP32[i18 >> 2] = 93410;
  HEAP32[27022] = 2e3;
 }
 if ((HEAP32[26989] | 0) < 0) {
  HEAP32[i18 >> 2] = 93410;
  HEAP32[26989] = 0;
 }
 if (!(HEAP32[i17 >> 2] & 6)) {
  i17 = HEAP32[HEAP32[i22 >> 2] >> 2] | 0;
  HEAP32[(_get_varp_scope(15328 + ((HEAP32[i12 >> 2] | 0) * 28 | 0) | 0, 2) | 0) >> 2] = i17;
 }
 i17 = 15328 + ((HEAP32[i12 >> 2] | 0) * 28 | 0) + 8 | 0;
 HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 256;
 _comp_col();
 do if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) != 2147483647) {
  if (!(HEAP32[15328 + ((HEAP32[i12 >> 2] | 0) * 28 | 0) + 8 >> 2] & 67133440)) break;
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 } while (0);
 _check_redraw(HEAP32[15328 + ((HEAP32[i12 >> 2] | 0) * 28 | 0) + 8 >> 2] | 0);
 HEAP32[i11 >> 2] = HEAP32[i18 >> 2];
 i23 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i8;
 return i23 | 0;
}

function _do_window(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i5;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 20 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 32 | 0;
 i13 = i5 + 8 | 0;
 i14 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 if (!(HEAP32[i8 >> 2] | 0)) HEAP32[i10 >> 2] = 1; else HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
 i3 = HEAP32[i7 >> 2] | 0;
 L5 : do if ((i3 | 0) < 61) {
  if ((i3 | 0) >= 15) switch (i3 | 0) {
  case 19:
   {
    i4 = 5;
    break L5;
    break;
   }
  case 22:
   {
    i4 = 6;
    break L5;
    break;
   }
  case 30:
   {
    i4 = 7;
    break L5;
    break;
   }
  case 17:
   {
    i4 = 12;
    break L5;
    break;
   }
  case 15:
   {
    i4 = 14;
    break L5;
    break;
   }
  case 23:
   {
    i4 = 15;
    break L5;
    break;
   }
  case 20:
   {
    i4 = 40;
    break L5;
    break;
   }
  case 16:
   {
    i4 = 42;
    break L5;
    break;
   }
  case 24:
   {
    i4 = 45;
    break L5;
    break;
   }
  case 18:
   {
    i4 = 46;
    break L5;
    break;
   }
  case 31:
   {
    i4 = 52;
    break L5;
    break;
   }
  case 29:
   {
    i4 = 56;
    break L5;
    break;
   }
  case 43:
   {
    HEAP32[26757] = 1;
    _win_setheight((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0);
    STACKTOP = i5;
    return;
   }
  case 45:
   {
    HEAP32[26757] = 1;
    _win_setheight((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0);
    STACKTOP = i5;
    return;
   }
  case 60:
   {
    HEAP32[26757] = 1;
    _win_setwidth((HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0);
    STACKTOP = i5;
    return;
   }
  default:
   {
    i4 = 68;
    break L5;
   }
  }
  if ((i3 | 0) >= 3) {
   switch (i3 | 0) {
   case 14:
    {
     i4 = 8;
     break L5;
     break;
    }
   case 3:
    {
     i4 = 13;
     break L5;
     break;
    }
   case 10:
    {
     i4 = 28;
     break L5;
     break;
    }
   case 11:
    {
     i4 = 29;
     break L5;
     break;
    }
   case 8:
    {
     i4 = 30;
     break L5;
     break;
    }
   case 12:
    {
     i4 = 31;
     break L5;
     break;
    }
   case 7:
    {
     i4 = 60;
     break L5;
     break;
    }
   case 13:
    break;
   default:
    {
     i4 = 68;
     break L5;
    }
   }
   STACKTOP = i5;
   return;
  }
  if ((i3 | 0) < -25707) switch (i3 | 0) {
  case -30059:
   {
    i4 = 29;
    break L5;
    break;
   }
  case -27755:
   {
    i4 = 30;
    break L5;
    break;
   }
  case -29291:
   {
    i4 = 31;
    break L5;
    break;
   }
  default:
   {
    i4 = 68;
    break L5;
   }
  }
  if ((i3 | 0) < -16715) switch (i3 | 0) {
  case -25707:
   {
    i4 = 28;
    break L5;
    break;
   }
  case -25195:
   {
    i4 = 30;
    break L5;
    break;
   }
  default:
   {
    i4 = 68;
    break L5;
   }
  }
  if ((i3 | 0) >= 2) switch (i3 | 0) {
  case 2:
   {
    i4 = 41;
    break L5;
    break;
   }
  default:
   {
    i4 = 68;
    break L5;
   }
  }
  switch (i3 | 0) {
  case -16715:
   break;
  default:
   {
    i4 = 68;
    break L5;
   }
  }
  STACKTOP = i5;
  return;
 } else switch (i3 | 0) {
 case 115:
 case 83:
  {
   i4 = 5;
   break L5;
   break;
  }
 case 118:
  {
   i4 = 6;
   break L5;
   break;
  }
 case 94:
  {
   i4 = 7;
   break L5;
   break;
  }
 case 110:
  {
   i4 = 8;
   break L5;
   break;
  }
 case 113:
  {
   i4 = 12;
   break L5;
   break;
  }
 case 99:
  {
   i4 = 13;
   break L5;
   break;
  }
 case 111:
  {
   i4 = 14;
   break L5;
   break;
  }
 case 87:
 case 119:
  {
   i4 = 15;
   break L5;
   break;
  }
 case 106:
  {
   i4 = 28;
   break L5;
   break;
  }
 case 107:
  {
   i4 = 29;
   break L5;
   break;
  }
 case 104:
  {
   i4 = 30;
   break L5;
   break;
  }
 case 108:
  {
   i4 = 31;
   break L5;
   break;
  }
 case 116:
  {
   i4 = 40;
   break L5;
   break;
  }
 case 98:
  {
   i4 = 41;
   break L5;
   break;
  }
 case 112:
  {
   i4 = 42;
   break L5;
   break;
  }
 case 120:
  {
   i4 = 45;
   break L5;
   break;
  }
 case 114:
  {
   i4 = 46;
   break L5;
   break;
  }
 case 95:
  {
   i4 = 52;
   break L5;
   break;
  }
 case 93:
  {
   i4 = 56;
   break L5;
   break;
  }
 case 103:
  {
   i4 = 60;
   break L5;
   break;
  }
 case 84:
  {
   if (_one_window() | 0) {
    _msg(84091) | 0;
    STACKTOP = i5;
    return;
   }
   HEAP32[i13 >> 2] = HEAP32[26886];
   HEAP32[i11 >> 2] = HEAP32[26881];
   if ((_win_new_tabpage(HEAP32[i8 >> 2] | 0) | 0) != 1) {
    STACKTOP = i5;
    return;
   }
   if (!(_valid_tabpage(HEAP32[i13 >> 2] | 0) | 0)) {
    STACKTOP = i5;
    return;
   }
   HEAP32[i14 >> 2] = HEAP32[26886];
   _goto_tabpage_tp(HEAP32[i13 >> 2] | 0, 1, 1);
   if ((HEAP32[26881] | 0) == (HEAP32[i11 >> 2] | 0)) _win_close(HEAP32[26881] | 0, 0) | 0;
   if (!(_valid_tabpage(HEAP32[i14 >> 2] | 0) | 0)) {
    STACKTOP = i5;
    return;
   }
   _goto_tabpage_tp(HEAP32[i14 >> 2] | 0, 1, 1);
   STACKTOP = i5;
   return;
  }
 case 82:
  {
   _reset_VIsual_and_resel();
   _win_rotate(1, HEAP32[i10 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 76:
 case 72:
 case 74:
 case 75:
  {
   i2 = HEAP32[i7 >> 2] | 0;
   i1 = (HEAP32[i7 >> 2] | 0) == 72 | 0;
   _win_totop(HEAP32[i8 >> 2] | 0, ((i1 | 0 ? 1 : (i2 | 0) == 76) ? 2 : 0) | ((i1 | 0 ? 1 : (i2 | 0) == 75) ? 4 : 8));
   STACKTOP = i5;
   return;
  }
 case 61:
  {
   HEAP32[26757] = 1;
   _win_equal(0, 0, 98);
   STACKTOP = i5;
   return;
  }
 case 62:
  {
   HEAP32[26757] = 1;
   _win_setwidth((HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0);
   STACKTOP = i5;
   return;
  }
 case 124:
  {
   HEAP32[26757] = 1;
   i2 = HEAP32[i8 >> 2] | 0;
   _win_setwidth(i2 | 0 ? i2 | 0 : 9999);
   STACKTOP = i5;
   return;
  }
 default:
  {
   i4 = 68;
   break L5;
  }
 } while (0);
 switch (i4 | 0) {
 case 5:
  {
   _reset_VIsual_and_resel();
   HEAP32[26757] = 1;
   _win_split(HEAP32[i8 >> 2] | 0, 0) | 0;
   STACKTOP = i5;
   return;
  }
 case 6:
  {
   _reset_VIsual_and_resel();
   HEAP32[26757] = 1;
   _win_split(HEAP32[i8 >> 2] | 0, 2) | 0;
   STACKTOP = i5;
   return;
  }
 case 7:
  {
   _reset_VIsual_and_resel();
   _cmd_with_count(83868, i12, 40, HEAP32[i8 >> 2] | 0);
   _do_cmdline_cmd(i12) | 0;
   STACKTOP = i5;
   return;
  }
 case 8:
  {
   _reset_VIsual_and_resel();
   if (HEAP32[i8 >> 2] | 0) {
    HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
    _vim_snprintf(i12, 35, 97769, i6) | 0;
   } else HEAP8[i12 >> 0] = 0;
   _strcat(i12, 83876) | 0;
   _do_cmdline_cmd(i12) | 0;
   STACKTOP = i5;
   return;
  }
 case 12:
  {
   _reset_VIsual_and_resel();
   _cmd_with_count(83880, i12, 40, HEAP32[i8 >> 2] | 0);
   _do_cmdline_cmd(i12) | 0;
   STACKTOP = i5;
   return;
  }
 case 13:
  {
   _reset_VIsual_and_resel();
   _cmd_with_count(83885, i12, 40, HEAP32[i8 >> 2] | 0);
   _do_cmdline_cmd(i12) | 0;
   STACKTOP = i5;
   return;
  }
 case 14:
  {
   _reset_VIsual_and_resel();
   _cmd_with_count(83891, i12, 40, HEAP32[i8 >> 2] | 0);
   _do_cmdline_cmd(i12) | 0;
   STACKTOP = i5;
   return;
  }
 case 15:
  {
   if ((HEAP32[i8 >> 2] | 0) != 1 ? (HEAP32[26887] | 0) == (HEAP32[27112] | 0) : 0) {
    _beep_flush();
    STACKTOP = i5;
    return;
   }
   L79 : do if (HEAP32[i8 >> 2] | 0) {
    HEAP32[i11 >> 2] = HEAP32[26887];
    while (1) {
     i12 = (HEAP32[i8 >> 2] | 0) + -1 | 0;
     HEAP32[i8 >> 2] = i12;
     if ((i12 | 0) <= 0) break L79;
     if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0)) break L79;
     HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2];
    }
   } else {
    i12 = HEAP32[26881] | 0;
    if ((HEAP32[i7 >> 2] | 0) == 87) {
     HEAP32[i11 >> 2] = HEAP32[i12 + 8 >> 2];
     if (HEAP32[i11 >> 2] | 0) break;
     HEAP32[i11 >> 2] = HEAP32[27112];
     break;
    } else {
     HEAP32[i11 >> 2] = HEAP32[i12 + 12 >> 2];
     if (HEAP32[i11 >> 2] | 0) break;
     HEAP32[i11 >> 2] = HEAP32[26887];
     break;
    }
   } while (0);
   _win_goto(HEAP32[i11 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 28:
  {
   _win_goto_ver(0, HEAP32[i10 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 29:
  {
   _win_goto_ver(1, HEAP32[i10 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 30:
  {
   _win_goto_hor(1, HEAP32[i10 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 31:
  {
   _win_goto_hor(0, HEAP32[i10 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 40:
  {
   _win_goto(HEAP32[26887] | 0);
   STACKTOP = i5;
   return;
  }
 case 41:
  {
   _win_goto(HEAP32[27112] | 0);
   STACKTOP = i5;
   return;
  }
 case 42:
  {
   if (_win_valid(HEAP32[26768] | 0) | 0) {
    _win_goto(HEAP32[26768] | 0);
    STACKTOP = i5;
    return;
   } else {
    _beep_flush();
    STACKTOP = i5;
    return;
   }
   break;
  }
 case 45:
  {
   _win_exchange(HEAP32[i8 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 46:
  {
   _reset_VIsual_and_resel();
   _win_rotate(0, HEAP32[i10 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 52:
  {
   HEAP32[26757] = 1;
   i10 = HEAP32[i8 >> 2] | 0;
   _win_setheight(i10 | 0 ? i10 | 0 : 9999);
   STACKTOP = i5;
   return;
  }
 case 56:
  {
   if (HEAP32[i8 >> 2] | 0) HEAP32[26851] = HEAP32[i8 >> 2]; else HEAP32[26851] = -1;
   _do_nv_ident(29, 0);
   STACKTOP = i5;
   return;
  }
 case 60:
  {
   HEAP32[26802] = (HEAP32[26802] | 0) + 1;
   HEAP32[26804] = (HEAP32[26804] | 0) + 1;
   if (!(HEAP32[i9 >> 2] | 0)) HEAP32[i9 >> 2] = _plain_vgetc() | 0;
   HEAP32[26802] = (HEAP32[26802] | 0) + -1;
   HEAP32[26804] = (HEAP32[26804] | 0) + -1;
   switch (HEAP32[i9 >> 2] | 0) {
   case 29:
   case 93:
    break;
   default:
    {
     _beep_flush();
     STACKTOP = i5;
     return;
    }
   }
   if (HEAP32[i8 >> 2] | 0) HEAP32[26851] = HEAP32[i8 >> 2]; else HEAP32[26851] = -1;
   _do_nv_ident(103, HEAP32[i9 >> 2] | 0);
   STACKTOP = i5;
   return;
  }
 case 68:
  {
   _beep_flush();
   STACKTOP = i5;
   return;
  }
 }
}

function _u_savecommon(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i6 + 48 | 0;
 i8 = i6 + 44 | 0;
 i9 = i6 + 40 | 0;
 i10 = i6 + 36 | 0;
 i11 = i6 + 32 | 0;
 i12 = i6 + 28 | 0;
 i13 = i6 + 24 | 0;
 i14 = i6 + 20 | 0;
 i15 = i6 + 16 | 0;
 i16 = i6 + 12 | 0;
 i17 = i6 + 8 | 0;
 i18 = i6 + 4 | 0;
 i19 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 if (!(HEAP32[i11 >> 2] | 0)) {
  if (!(_undo_allowed() | 0)) {
   HEAP32[i7 >> 2] = 0;
   i20 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i20 | 0;
  }
  _change_warning(0);
  if ((HEAP32[i9 >> 2] | 0) > ((HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0)) {
   _emsg(80606) | 0;
   HEAP32[i7 >> 2] = 0;
   i20 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i20 | 0;
  }
 }
 HEAP32[i18 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) - 1;
 i11 = (HEAP32[(HEAP32[26773] | 0) + 516 >> 2] | 0) != 0;
 i4 = _get_undolevel() | 0;
 do if (i11) {
  if ((i4 | 0) >= 0) {
   HEAP32[i14 >> 2] = _lalloc(284, 0) | 0;
   if (!(HEAP32[i14 >> 2] | 0)) break;
  } else HEAP32[i14 >> 2] = 0;
  HEAP32[i15 >> 2] = HEAP32[(HEAP32[26773] | 0) + 508 >> 2];
  if (HEAP32[i15 >> 2] | 0) {
   HEAP32[(HEAP32[26773] | 0) + 504 >> 2] = HEAP32[HEAP32[i15 >> 2] >> 2];
   HEAP32[(HEAP32[26773] | 0) + 508 >> 2] = 0;
  }
  while (1) {
   i3 = HEAP32[(HEAP32[26773] | 0) + 512 >> 2] | 0;
   if ((i3 | 0) <= (_get_undolevel() | 0)) break;
   if (!(HEAP32[(HEAP32[26773] | 0) + 500 >> 2] | 0)) break;
   HEAP32[i19 >> 2] = HEAP32[(HEAP32[26773] | 0) + 500 >> 2];
   do if ((HEAP32[i19 >> 2] | 0) == (HEAP32[i15 >> 2] | 0)) _u_freebranch(HEAP32[26773] | 0, HEAP32[i19 >> 2] | 0, i15); else {
    if (!(HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0)) {
     _u_freeheader(HEAP32[26773] | 0, HEAP32[i19 >> 2] | 0, i15);
     break;
    }
    while (1) {
     if (!(HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2] | 0)) break;
     HEAP32[i19 >> 2] = HEAP32[(HEAP32[i19 >> 2] | 0) + 8 >> 2];
    }
    _u_freebranch(HEAP32[26773] | 0, HEAP32[i19 >> 2] | 0, i15);
   } while (0);
  }
  if (!(HEAP32[i14 >> 2] | 0)) {
   if (HEAP32[i15 >> 2] | 0) _u_freebranch(HEAP32[26773] | 0, HEAP32[i15 >> 2] | 0, 0);
   HEAP32[(HEAP32[26773] | 0) + 516 >> 2] = 0;
   HEAP32[i7 >> 2] = 1;
   i20 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i20 | 0;
  }
  HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[(HEAP32[26773] | 0) + 504 >> 2];
  HEAP32[(HEAP32[i14 >> 2] | 0) + 8 >> 2] = HEAP32[i15 >> 2];
  if (HEAP32[i15 >> 2] | 0) {
   HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2];
   if (HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] | 0) + 8 >> 2] = HEAP32[i14 >> 2];
   HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2] = HEAP32[i14 >> 2];
   if ((HEAP32[(HEAP32[26773] | 0) + 500 >> 2] | 0) == (HEAP32[i15 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 500 >> 2] = HEAP32[i14 >> 2];
  } else HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] = 0;
  if (HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 4 >> 2] = HEAP32[i14 >> 2];
  i3 = (HEAP32[26773] | 0) + 520 | 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
  HEAP32[i3 >> 2] = i2;
  HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] = i2;
  HEAP32[(HEAP32[26773] | 0) + 528 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2];
  i2 = _vim_time() | 0;
  HEAP32[(HEAP32[i14 >> 2] | 0) + 276 >> 2] = i2;
  HEAP32[(HEAP32[i14 >> 2] | 0) + 280 >> 2] = 0;
  HEAP32[(HEAP32[26773] | 0) + 532 >> 2] = (HEAP32[(HEAP32[i14 >> 2] | 0) + 276 >> 2] | 0) + 1;
  HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] = 0;
  HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] = 0;
  HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] = 0;
  i2 = (HEAP32[i14 >> 2] | 0) + 32 | 0;
  i3 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  i3 = HEAP32[26773] | 0;
  HEAP32[(HEAP32[i14 >> 2] | 0) + 40 >> 2] = (HEAP32[i3 + 108 >> 2] | 0 ? 1 : 0) + (HEAP32[i3 + 8 >> 2] & 1 | 0 ? 2 : 0);
  _memmove((HEAP32[i14 >> 2] | 0) + 44 | 0, (HEAP32[26773] | 0) + 188 | 0, 208) | 0;
  i3 = (HEAP32[i14 >> 2] | 0) + 252 | 0;
  i2 = (HEAP32[26773] | 0) + 396 | 0;
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
  HEAP32[i3 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 504 >> 2] = HEAP32[i14 >> 2];
  if (!(HEAP32[(HEAP32[26773] | 0) + 500 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 500 >> 2] = HEAP32[i14 >> 2];
  i2 = (HEAP32[26773] | 0) + 512 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  i5 = 65;
 } else {
  if ((i4 | 0) < 0) {
   HEAP32[i7 >> 2] = 1;
   i20 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i20 | 0;
  }
  L61 : do if ((HEAP32[i18 >> 2] | 0) == 1) {
   HEAP32[i16 >> 2] = _u_get_headentry() | 0;
   HEAP32[i17 >> 2] = 0;
   HEAP32[i13 >> 2] = 0;
   while (1) {
    if ((HEAP32[i13 >> 2] | 0) >= 10 | (HEAP32[i16 >> 2] | 0) == 0) break L61;
    i2 = HEAP32[i16 >> 2] | 0;
    if ((HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 28 >> 2] | 0) != (HEAP32[i16 >> 2] | 0)) {
     if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] | 0)) i21 = (HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0; else i21 = HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] | 0;
     if (((HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) + 1 | 0) != (i21 | 0)) break L61;
    } else if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[HEAP32[26773] >> 2] | 0)) break L61;
    if ((HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) > 1) if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0)) if (((HEAP32[i8 >> 2] | 0) + 2 | 0) <= ((HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) + 1 | 0)) break L61;
    if ((HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) break;
    HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
    HEAP32[i16 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
   if ((HEAP32[i13 >> 2] | 0) > 0) {
    _u_getbot();
    HEAP32[(HEAP32[26773] | 0) + 516 >> 2] = 0;
    HEAP32[HEAP32[i17 >> 2] >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
    HEAP32[HEAP32[i16 >> 2] >> 2] = HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 24 >> 2];
    HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 24 >> 2] = HEAP32[i16 >> 2];
   }
   do if (HEAP32[i10 >> 2] | 0) HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] = HEAP32[i10 >> 2]; else if ((HEAP32[i9 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
    HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] = 0;
    break;
   } else {
    HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] = HEAP32[HEAP32[26773] >> 2];
    HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 28 >> 2] = HEAP32[i16 >> 2];
    break;
   } while (0);
   HEAP32[i7 >> 2] = 1;
   i20 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i20 | 0;
  } while (0);
  _u_getbot();
  i5 = 65;
 } while (0);
 L94 : do if ((i5 | 0) == 65) {
  HEAP32[i16 >> 2] = _lalloc(24, 0) | 0;
  if (HEAP32[i16 >> 2] | 0) {
   i17 = HEAP32[i16 >> 2] | 0;
   HEAP32[i17 >> 2] = 0;
   HEAP32[i17 + 4 >> 2] = 0;
   HEAP32[i17 + 8 >> 2] = 0;
   HEAP32[i17 + 12 >> 2] = 0;
   HEAP32[i17 + 16 >> 2] = 0;
   HEAP32[i17 + 20 >> 2] = 0;
   HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] = HEAP32[i18 >> 2];
   HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] = HEAP32[i8 >> 2];
   do if (HEAP32[i10 >> 2] | 0) HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] = HEAP32[i10 >> 2]; else if ((HEAP32[i9 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
    HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2] = 0;
    break;
   } else {
    HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] = HEAP32[HEAP32[26773] >> 2];
    HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 28 >> 2] = HEAP32[i16 >> 2];
    break;
   } while (0);
   L104 : do if ((HEAP32[i18 >> 2] | 0) > 0) {
    i17 = _lalloc(HEAP32[i18 >> 2] << 2, 0) | 0;
    HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] = i17;
    if (!i17) {
     _u_freeentry(HEAP32[i16 >> 2] | 0, 0);
     break L94;
    }
    HEAP32[i13 >> 2] = 0;
    HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    while (1) {
     if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break L104;
     _fast_breakcheck();
     if (HEAP32[26834] | 0) break;
     i17 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i17 + 1;
     i21 = _u_save_line(i17) | 0;
     HEAP32[(HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2] = i21;
     if (!i21) {
      i5 = 79;
      break;
     }
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
    }
    if ((i5 | 0) == 79) {
     _u_freeentry(HEAP32[i16 >> 2] | 0, HEAP32[i13 >> 2] | 0);
     break L94;
    }
    _u_freeentry(HEAP32[i16 >> 2] | 0, HEAP32[i13 >> 2] | 0);
    HEAP32[i7 >> 2] = 0;
    i20 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i20 | 0;
   } else HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] = 0; while (0);
   HEAP32[HEAP32[i16 >> 2] >> 2] = HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 24 >> 2];
   HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 24 >> 2] = HEAP32[i16 >> 2];
   HEAP32[(HEAP32[26773] | 0) + 516 >> 2] = 0;
   HEAP32[26622] = 0;
   HEAP32[i7 >> 2] = 1;
   i20 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i20 | 0;
  }
 } while (0);
 HEAP32[26809] = 0;
 if ((_ask_yesno(80644, 1) | 0) == 121) {
  HEAP32[26840] = 1;
  HEAP32[i7 >> 2] = 1;
  i20 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i20 | 0;
 } else {
  _do_outofmem_msg(0);
  HEAP32[i7 >> 2] = 0;
  i20 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i20 | 0;
 }
 return 0;
}

function _op_delete(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i3 + 80 | 0;
 i5 = i3 + 76 | 0;
 i6 = i3 + 72 | 0;
 i7 = i3 + 68 | 0;
 i8 = i3 + 64 | 0;
 i9 = i3 + 60 | 0;
 i10 = i3 + 56 | 0;
 i11 = i3 + 24 | 0;
 i12 = i3 + 20 | 0;
 i13 = i3 + 16 | 0;
 i14 = i3 + 12 | 0;
 i15 = i3 + 8 | 0;
 i16 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i12 >> 2] = HEAP32[HEAP32[26773] >> 2];
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) {
  HEAP32[i4 >> 2] = 1;
  i17 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i17 | 0;
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] | 0) {
  HEAP32[i4 >> 2] = _u_save_cursor() | 0;
  i17 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i17 | 0;
 }
 if (!(HEAP32[(HEAP32[26773] | 0) + 664 >> 2] | 0)) {
  _emsg(92640) | 0;
  HEAP32[i4 >> 2] = 0;
  i17 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i17 | 0;
 }
 _adjust_clip_reg((HEAP32[i5 >> 2] | 0) + 4 | 0);
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0)) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 60 >> 2] | 0)) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 64 >> 2] | 0)) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) > 1) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0)) if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 1) {
  i1 = _ml_get(HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = i1 + (HEAP32[(HEAP32[i5 >> 2] | 0) + 36 + 4 >> 2] | 0);
  if (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0);
  HEAP32[i8 >> 2] = _skipwhite(HEAP32[i8 >> 2] | 0) | 0;
  if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) if (_inindent(0) | 0) HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = 1;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) == 1) if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 1) if (!(HEAPU8[(_ml_get(HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0) | 0) >> 0] | 0)) {
  if (_vim_strchr(HEAP32[26904] | 0, 69) | 0) _beep_flush();
  HEAP32[i4 >> 2] = 1;
  i17 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i17 | 0;
 }
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) != 95) {
  do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) if (_valid_yank_reg(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0, 1) | 0) {
   _get_yank_register(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0, 1) | 0;
   if ((_op_yank(HEAP32[i5 >> 2] | 0, 1, 0) | 0) != 1) break;
   HEAP32[i13 >> 2] = 1;
   break;
  } else {
   _beep_flush();
   HEAP32[i4 >> 2] = 1;
   i17 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i17 | 0;
  } while (0);
  if (HEAP32[i14 >> 2] | 0) i2 = 35; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) == 1) i2 = 35; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) > 1) i2 = 35; else if (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) i2 = 35;
  if ((i2 | 0) == 35) {
   _shift_delete_registers();
   if ((_op_yank(HEAP32[i5 >> 2] | 0, 1, 0) | 0) == 1) HEAP32[i13 >> 2] = 1;
  }
  if (HEAP32[26762] & 1 | 0) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) == 42) i2 = 42; else i2 = 39; else i2 = 39;
  do if ((i2 | 0) == 39) {
   if (HEAP32[26762] & 2 | 0) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) == 43) {
    i2 = 42;
    break;
   }
   if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) i2 = 42;
  } while (0);
  if ((i2 | 0) == 42) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) != 1) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) == 1) {
   HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = 45;
   _get_yank_register(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0, 1) | 0;
   if ((_op_yank(HEAP32[i5 >> 2] | 0, 1, 0) | 0) == 1) HEAP32[i13 >> 2] = 1;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = 0;
  }
  if (!(HEAP32[i13 >> 2] | 0)) {
   HEAP32[i15 >> 2] = HEAP32[26809];
   HEAP32[26809] = 0;
   HEAP32[i6 >> 2] = _ask_yesno(62337, 1) | 0;
   HEAP32[26809] = HEAP32[i15 >> 2];
   if ((HEAP32[i6 >> 2] | 0) != 121) {
    _emsg(92138) | 0;
    HEAP32[i4 >> 2] = 0;
    i17 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i17 | 0;
   }
  }
 }
 i15 = HEAP32[i5 >> 2] | 0;
 do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 64 >> 2] | 0) {
  if (!(_u_save((HEAP32[i15 + 28 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) + 1 | 0) | 0)) {
   HEAP32[i4 >> 2] = 0;
   i17 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i17 | 0;
  }
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0)) break;
   _block_prep(HEAP32[i5 >> 2] | 0, i11, HEAP32[i7 >> 2] | 0, 1);
   if (HEAP32[i11 + 8 >> 2] | 0) {
    if ((HEAP32[i7 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = (HEAP32[i11 + 16 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
    HEAP32[i6 >> 2] = (HEAP32[i11 + 8 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) - (HEAP32[i11 + 4 >> 2] | 0);
    HEAP32[i10 >> 2] = _ml_get(HEAP32[i7 >> 2] | 0) | 0;
    i13 = (_strlen(HEAP32[i10 >> 2] | 0) | 0) + 1 | 0;
    HEAP32[i9 >> 2] = _alloc_check(i13 - (HEAP32[i6 >> 2] | 0) | 0) | 0;
    if (HEAP32[i9 >> 2] | 0) {
     _memmove(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 + 16 >> 2] | 0) | 0;
     _memset((HEAP32[i9 >> 2] | 0) + (HEAP32[i11 + 16 >> 2] | 0) | 0, 32, (HEAP32[i11 >> 2] | 0) + (HEAP32[i11 + 4 >> 2] | 0) | 0) | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + ((HEAP32[i11 + 16 >> 2] | 0) + (HEAP32[i11 + 8 >> 2] | 0));
     i13 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i11 + 16 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) + (HEAP32[i11 + 4 >> 2] | 0) | 0;
     i2 = HEAP32[i10 >> 2] | 0;
     _memmove(i13 | 0, i2 | 0, (_strlen(HEAP32[i10 >> 2] | 0) | 0) + 1 | 0) | 0;
     _ml_replace(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0;
    }
   }
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  _check_cursor_col();
  i2 = (HEAP32[26881] | 0) + 24 | 0;
  _changed_lines(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, (HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) + 1 | 0, 0);
  HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] = 0;
 } else {
  i2 = HEAP32[i5 >> 2] | 0;
  if ((HEAP32[i15 + 8 >> 2] | 0) == 1) {
   i13 = HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0;
   if ((HEAP32[i2 >> 2] | 0) != 3) {
    _del_lines(i13, 1);
    _beginline(5);
    _u_clearline();
    break;
   }
   if ((i13 | 0) > 1) {
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
    i13 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
    _del_lines((HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) - 1 | 0, 1);
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i7 >> 2];
   }
   if (!(_u_save_cursor() | 0)) {
    HEAP32[i4 >> 2] = 0;
    i17 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i17 | 0;
   }
   if (HEAP32[(HEAP32[26773] | 0) + 564 >> 2] | 0) {
    _beginline(1);
    HEAP32[26791] = 1;
    HEAP32[26792] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
   } else _beginline(0);
   _truncate_line(0) | 0;
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) <= 1) break;
   _u_clearline();
   break;
  }
  if ((HEAP32[i2 + 52 >> 2] | 0) != 1) {
   if (!(_u_save((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) | 0) | 0)) {
    HEAP32[i4 >> 2] = 0;
    i17 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i17 | 0;
   }
   _truncate_line(1) | 0;
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i16 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i16 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
   _del_lines((HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) - 2 | 0, 0);
   i2 = HEAP32[i5 >> 2] | 0;
   HEAP32[i6 >> 2] = (HEAP32[i2 + 36 + 4 >> 2] | 0) + 1 - (((HEAP32[i2 + 20 >> 2] | 0) != 0 ^ 1) & 1);
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
   if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 1) i18 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 60 >> 2] | 0) != 0 ^ 1; else i18 = 0;
   _del_bytes(HEAP32[i6 >> 2] | 0, 1, i18 & 1) | 0;
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   _do_join(2, 0, 0, 0, 0) | 0;
   break;
  }
  if (!(_u_save_cursor() | 0)) {
   HEAP32[i4 >> 2] = 0;
   i17 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i17 | 0;
  }
  if (_vim_strchr(HEAP32[26904] | 0, 36) | 0) if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 3) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 60 >> 2] | 0)) {
   i2 = HEAP32[i5 >> 2] | 0;
   _display_dollar((HEAP32[i2 + 36 + 4 >> 2] | 0) - (((HEAP32[i2 + 20 >> 2] | 0) != 0 ^ 1) & 1) | 0);
  }
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i6 >> 2] = (HEAP32[i2 + 36 + 4 >> 2] | 0) - (HEAP32[i2 + 28 + 4 >> 2] | 0) + 1 - (((HEAP32[i2 + 20 >> 2] | 0) != 0 ^ 1) & 1);
  if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 1) i19 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 60 >> 2] | 0) != 0 ^ 1; else i19 = 0;
  _del_bytes(HEAP32[i6 >> 2] | 0, 1, i19 & 1) | 0;
 } while (0);
 _msgmore((HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0);
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 64 >> 2] | 0) {
  HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 28 + 4 >> 2];
 } else {
  i12 = (HEAP32[26773] | 0) + 492 | 0;
  i19 = (HEAP32[i5 >> 2] | 0) + 28 | 0;
  HEAP32[i12 >> 2] = HEAP32[i19 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
 }
 i19 = (HEAP32[26773] | 0) + 476 | 0;
 i12 = (HEAP32[i5 >> 2] | 0) + 28 | 0;
 HEAP32[i19 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i19 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i4 >> 2] = 1;
 i17 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i17 | 0;
}

function _findswapname(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 1360 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5;
 i11 = i5 + 1352 | 0;
 i12 = i5 + 1348 | 0;
 i13 = i5 + 1344 | 0;
 i14 = i5 + 1340 | 0;
 i15 = i5 + 1336 | 0;
 i16 = i5 + 1332 | 0;
 i17 = i5 + 1328 | 0;
 i18 = i5 + 1324 | 0;
 i19 = i5 + 1320 | 0;
 i20 = i5 + 1316 | 0;
 i21 = i5 + 1240 | 0;
 i22 = i5 + 1164 | 0;
 i23 = i5 + 1160 | 0;
 i24 = i5 + 1156 | 0;
 i25 = i5 + 1152 | 0;
 i26 = i5 + 1148 | 0;
 i27 = i5 + 1144 | 0;
 i28 = i5 + 1068 | 0;
 i29 = i5 + 1064 | 0;
 i30 = i5 + 44 | 0;
 i31 = i5 + 40 | 0;
 i32 = i5 + 36 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 76 >> 2];
 HEAP32[i16 >> 2] = _alloc((_strlen(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) | 0) + 1 | 0) | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 if (!(HEAP32[i16 >> 2] | 0)) HEAP32[i3 >> 2] = 0; else _copy_option_part(i3, HEAP32[i16 >> 2] | 0, 31e3, 84434) | 0;
 if (!(HEAP32[i16 >> 2] | 0)) HEAP32[i14 >> 2] = 0; else {
  i3 = HEAP32[i11 >> 2] | 0;
  HEAP32[i14 >> 2] = _makeswapname(HEAP32[i18 >> 2] | 0, HEAP32[i3 + 68 >> 2] | 0, i3 | 0, HEAP32[i16 >> 2] | 0) | 0;
 }
 L9 : while (1) {
  if (!(HEAP32[i14 >> 2] | 0)) {
   i4 = 86;
   break;
  }
  i3 = _strlen(HEAP32[i14 >> 2] | 0) | 0;
  HEAP32[i15 >> 2] = i3;
  i33 = HEAP32[i14 >> 2] | 0;
  if (!i3) {
   i4 = 10;
   break;
  }
  do if ((HEAPU8[i33 + ((HEAP32[i15 >> 2] | 0) - 2) >> 0] | 0) == 119) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) == 112) if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 684 >> 2] | 0)) if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 784 >> 2] | 0)) {
   HEAP32[i25 >> 2] = 0;
   HEAP32[i26 >> 2] = 0;
   HEAP32[i27 >> 2] = 0;
   HEAP32[i19 >> 2] = _gettail(HEAP32[i18 >> 2] | 0) | 0;
   if (!(_vim_strchr(HEAP32[i19 >> 2] | 0, 46) | 0)) if ((_strlen(HEAP32[i19 >> 2] | 0) | 0) >>> 0 <= 8) if ((HEAPU8[(_gettail(HEAP32[i14 >> 2] | 0) | 0) >> 0] | 0) != 46) break;
   HEAP32[i20 >> 2] = _alloc((HEAP32[i15 >> 2] | 0) + 2 | 0) | 0;
   if (HEAP32[i20 >> 2] | 0) {
    _strcpy(HEAP32[i20 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
    do if (_vim_strchr(HEAP32[i19 >> 2] | 0, 46) | 0) HEAP8[(HEAP32[i20 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] = 120; else {
     i3 = (HEAPU8[(_gettail(HEAP32[i14 >> 2] | 0) | 0) >> 0] | 0) == 46;
     i12 = HEAP32[i20 >> 2] | 0;
     i2 = HEAP32[i15 >> 2] | 0;
     if (i3) {
      HEAP8[i12 + i2 >> 0] = 120;
      HEAP8[(HEAP32[i20 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + 1) >> 0] = 0;
      break;
     } else {
      i3 = i12 + (i2 - 5) | 0;
      HEAP8[i3 >> 0] = (HEAPU8[i3 >> 0] | 0) + 1;
      break;
     }
    } while (0);
    i3 = HEAP32[i14 >> 2] | 0;
    HEAP32[i10 >> 2] = 0;
    HEAP32[i23 >> 2] = _open(i3, 0, i10) | 0;
    if ((HEAP32[i23 >> 2] | 0) < 0) {
     i3 = HEAP32[i14 >> 2] | 0;
     HEAP32[i9 >> 2] = 384;
     HEAP32[i23 >> 2] = _open(i3, 194, i9) | 0;
     HEAP32[i25 >> 2] = 1;
    }
    if ((HEAP32[i23 >> 2] | 0) >= 0) {
     i3 = HEAP32[i20 >> 2] | 0;
     HEAP32[i8 >> 2] = 0;
     HEAP32[i24 >> 2] = _open(i3, 0, i8) | 0;
     if ((HEAP32[i24 >> 2] | 0) < 0) {
      i3 = HEAP32[i20 >> 2] | 0;
      HEAP32[i7 >> 2] = 384;
      HEAP32[i24 >> 2] = _open(i3, 194, i7) | 0;
      HEAP32[i26 >> 2] = 1;
     }
     do if ((HEAP32[i24 >> 2] | 0) >= 0) {
      do if ((_fstat(HEAP32[i23 >> 2] | 0, i21) | 0) != -1) {
       if ((_fstat(HEAP32[i24 >> 2] | 0, i22) | 0) == -1) break;
       if ((HEAP32[i21 >> 2] | 0) != (HEAP32[i22 >> 2] | 0)) break;
       if ((HEAP32[i21 + 72 >> 2] | 0) != (HEAP32[i22 + 72 >> 2] | 0)) break;
       HEAP32[i27 >> 2] = 1;
      } while (0);
      _close(HEAP32[i24 >> 2] | 0) | 0;
      if (!(HEAP32[i26 >> 2] | 0)) break;
      _unlink(HEAP32[i20 >> 2] | 0) | 0;
     } while (0);
     _close(HEAP32[i23 >> 2] | 0) | 0;
     if (HEAP32[i25 >> 2] | 0) _unlink(HEAP32[i14 >> 2] | 0) | 0;
    }
    _vim_free(HEAP32[i20 >> 2] | 0);
    if (HEAP32[i27 >> 2] | 0) {
     HEAP32[(HEAP32[i11 >> 2] | 0) + 784 >> 2] = 1;
     _vim_free(HEAP32[i14 >> 2] | 0);
     i3 = HEAP32[i11 >> 2] | 0;
     HEAP32[i14 >> 2] = _makeswapname(HEAP32[i18 >> 2] | 0, HEAP32[i3 + 68 >> 2] | 0, i3 | 0, HEAP32[i16 >> 2] | 0) | 0;
     continue L9;
    }
   }
  } while (0);
  if ((_mch_getperm(HEAP32[i14 >> 2] | 0) | 0) < 0) if ((_lstat(HEAP32[i14 >> 2] | 0, i28) | 0) < 0) {
   i4 = 86;
   break;
  }
  if (HEAP32[i13 >> 2] | 0) if (!(_vim_fnamecmp(HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0)) {
   i4 = 86;
   break;
  }
  do if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 2) >> 0] | 0) == 119) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) == 112) {
   if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 684 >> 2] | 0)) if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 784 >> 2] | 0)) {
    HEAP8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] = 120;
    HEAP32[i17 >> 2] = _mch_getperm(HEAP32[i14 >> 2] | 0) | 0;
    HEAP8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] = 112;
    if ((HEAP32[i17 >> 2] | 0) >= 0) {
     HEAP32[(HEAP32[i11 >> 2] | 0) + 784 >> 2] = 1;
     _vim_free(HEAP32[i14 >> 2] | 0);
     i3 = HEAP32[i11 >> 2] | 0;
     HEAP32[i14 >> 2] = _makeswapname(HEAP32[i18 >> 2] | 0, HEAP32[i3 + 68 >> 2] | 0, i3 | 0, HEAP32[i16 >> 2] | 0) | 0;
     continue L9;
    }
   }
   if ((HEAP32[26816] | 0) == 0 & (HEAP32[i18 >> 2] | 0) != 0) if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 780 >> 2] | 0)) if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 60 >> 2] & 128)) {
    HEAP32[i31 >> 2] = 0;
    i3 = HEAP32[i14 >> 2] | 0;
    HEAP32[i6 >> 2] = 0;
    HEAP32[i29 >> 2] = _open(i3, 0, i6) | 0;
    if ((HEAP32[i29 >> 2] | 0) >= 0) {
     do if ((_read_eintr(HEAP32[i29 >> 2] | 0, i30, 1020) | 0) == 1020) {
      if (!(HEAPU8[i30 + 108 + 898 >> 0] & 4)) {
       _expand_env(i30 + 108 | 0, HEAP32[26885] | 0, 4096);
       i3 = HEAP32[(HEAP32[i11 >> 2] | 0) + 68 >> 2] | 0;
       i2 = HEAP32[26885] | 0;
       if (!(_fnamecmp_ino(i3, i2, _char_to_long(i30 + 20 | 0) | 0) | 0)) break;
       HEAP32[i31 >> 2] = 1;
       break;
      }
      i2 = _gettail(HEAP32[(HEAP32[i11 >> 2] | 0) + 68 >> 2] | 0) | 0;
      if (!(_vim_fnamecmp(i2, _gettail(i30 + 108 | 0) | 0) | 0)) if (_same_directory(HEAP32[i14 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 68 >> 2] | 0) | 0) break;
      _expand_env(i30 + 108 | 0, HEAP32[26885] | 0, 4096);
      i2 = HEAP32[(HEAP32[i11 >> 2] | 0) + 68 >> 2] | 0;
      i3 = HEAP32[26885] | 0;
      if (!(_fnamecmp_ino(i2, i3, _char_to_long(i30 + 20 | 0) | 0) | 0)) break;
      HEAP32[i31 >> 2] = 1;
     } while (0);
     _close(HEAP32[i29 >> 2] | 0) | 0;
    }
    if (!(HEAP32[i31 >> 2] | 0)) if (!(HEAP32[(HEAP32[26773] | 0) + 60 >> 2] & 1)) if (!(_vim_strchr(HEAP32[26985] | 0, 65) | 0)) {
     HEAP32[i32 >> 2] = 0;
     if (!((HEAP32[26628] | 0) == 0 | (HEAP32[26627] | 0) != 0)) _gui_start();
     _attention_message(HEAP32[i11 >> 2] | 0, HEAP32[i14 >> 2] | 0);
     HEAP32[26834] = 0;
     if ((HEAP32[i32 >> 2] | 0) <= 0) {
      _msg_puts(97581);
      if (HEAP32[26809] | 0) break;
      HEAP32[26721] = 1;
      break;
     }
     switch (HEAP32[i32 >> 2] | 0) {
     case 1:
      {
       HEAP32[(HEAP32[i11 >> 2] | 0) + 676 >> 2] = 1;
       break;
      }
     case 6:
      {
       HEAP32[26812] = 2;
       HEAP32[26834] = 1;
       break;
      }
     case 3:
      {
       HEAP32[26812] = 3;
       break;
      }
     case 4:
      {
       _unlink(HEAP32[i14 >> 2] | 0) | 0;
       break;
      }
     case 5:
      {
       HEAP32[26812] = 2;
       break;
      }
     default:
      {}
     }
     if ((_mch_getperm(HEAP32[i14 >> 2] | 0) | 0) < 0) {
      i4 = 86;
      break L9;
     }
    }
   }
  } while (0);
  if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) == 97) {
   if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 2) >> 0] | 0) == 97) {
    i4 = 82;
    break;
   }
   i3 = (HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 2) | 0;
   HEAP8[i3 >> 0] = (HEAP8[i3 >> 0] | 0) + -1 << 24 >> 24;
   HEAP8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] = 123;
  }
  i3 = (HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) | 0;
  HEAP8[i3 >> 0] = (HEAP8[i3 >> 0] | 0) + -1 << 24 >> 24;
 }
 if ((i4 | 0) == 10) {
  if (!i33) {
   i34 = HEAP32[i16 >> 2] | 0;
   _vim_free(i34);
   i35 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i5;
   return i35 | 0;
  }
  _vim_free(HEAP32[i14 >> 2] | 0);
  HEAP32[i14 >> 2] = 0;
  i34 = HEAP32[i16 >> 2] | 0;
  _vim_free(i34);
  i35 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i5;
  return i35 | 0;
 } else if ((i4 | 0) == 82) {
  _emsg(56830) | 0;
  if (!(HEAP32[i14 >> 2] | 0)) {
   i34 = HEAP32[i16 >> 2] | 0;
   _vim_free(i34);
   i35 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i5;
   return i35 | 0;
  }
  _vim_free(HEAP32[i14 >> 2] | 0);
  HEAP32[i14 >> 2] = 0;
  i34 = HEAP32[i16 >> 2] | 0;
  _vim_free(i34);
  i35 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i5;
  return i35 | 0;
 } else if ((i4 | 0) == 86) {
  i34 = HEAP32[i16 >> 2] | 0;
  _vim_free(i34);
  i35 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i5;
  return i35 | 0;
 }
 return 0;
}

function ___intscan(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0;
 i6 = 0;
 L1 : do if (i2 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i7 = 0;
  i8 = 0;
 } else {
  i9 = i1 + 4 | 0;
  i10 = i1 + 100 | 0;
  do {
   i11 = HEAP32[i9 >> 2] | 0;
   if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i9 >> 2] = i11 + 1;
    i12 = HEAPU8[i11 >> 0] | 0;
   } else i12 = ___shgetc(i1) | 0;
  } while ((_isspace(i12) | 0) != 0);
  L11 : do switch (i12 | 0) {
  case 43:
  case 45:
   {
    i11 = ((i12 | 0) == 45) << 31 >> 31;
    i13 = HEAP32[i9 >> 2] | 0;
    if (i13 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i9 >> 2] = i13 + 1;
     i14 = i11;
     i15 = HEAPU8[i13 >> 0] | 0;
     break L11;
    } else {
     i14 = i11;
     i15 = ___shgetc(i1) | 0;
     break L11;
    }
    break;
   }
  default:
   {
    i14 = 0;
    i15 = i12;
   }
  } while (0);
  i11 = (i2 | 0) == 0;
  do if ((i2 | 16 | 0) == 16 & (i15 | 0) == 48) {
   i13 = HEAP32[i9 >> 2] | 0;
   if (i13 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i9 >> 2] = i13 + 1;
    i16 = HEAPU8[i13 >> 0] | 0;
   } else i16 = ___shgetc(i1) | 0;
   if ((i16 | 32 | 0) != 120) if (i11) {
    i17 = i16;
    i18 = 8;
    i6 = 47;
    break;
   } else {
    i19 = i16;
    i20 = i2;
    i6 = 32;
    break;
   }
   i13 = HEAP32[i9 >> 2] | 0;
   if (i13 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i9 >> 2] = i13 + 1;
    i21 = HEAPU8[i13 >> 0] | 0;
   } else i21 = ___shgetc(i1) | 0;
   if ((HEAPU8[97782 + i21 >> 0] | 0) > 15) {
    i13 = (HEAP32[i10 >> 2] | 0) == 0;
    if (!i13) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
    if (!i3) {
     ___shlim(i1, 0);
     i7 = 0;
     i8 = 0;
     break L1;
    }
    if (i13) {
     i7 = 0;
     i8 = 0;
     break L1;
    }
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
    i7 = 0;
    i8 = 0;
    break L1;
   } else {
    i17 = i21;
    i18 = 16;
    i6 = 47;
   }
  } else {
   i13 = i11 ? 10 : i2;
   if (i13 >>> 0 > (HEAPU8[97782 + i15 >> 0] | 0) >>> 0) {
    i19 = i15;
    i20 = i13;
    i6 = 32;
   } else {
    if (HEAP32[i10 >> 2] | 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
    ___shlim(i1, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    i7 = 0;
    i8 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((i6 | 0) == 32) if ((i20 | 0) == 10) {
   i11 = i19 + -48 | 0;
   if (i11 >>> 0 < 10) {
    i13 = 0;
    i22 = i11;
    do {
     i13 = (i13 * 10 | 0) + i22 | 0;
     i11 = HEAP32[i9 >> 2] | 0;
     if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i9 >> 2] = i11 + 1;
      i23 = HEAPU8[i11 >> 0] | 0;
     } else i23 = ___shgetc(i1) | 0;
     i22 = i23 + -48 | 0;
    } while (i22 >>> 0 < 10 & i13 >>> 0 < 429496729);
    if (i22 >>> 0 < 10) {
     i11 = i23;
     i24 = i13;
     i25 = 0;
     i26 = i22;
     while (1) {
      i27 = ___muldi3(i24 | 0, i25 | 0, 10, 0) | 0;
      i28 = tempRet0;
      i29 = ((i26 | 0) < 0) << 31 >> 31;
      i30 = ~i29;
      if (i28 >>> 0 > i30 >>> 0 | (i28 | 0) == (i30 | 0) & i27 >>> 0 > ~i26 >>> 0) {
       i31 = 10;
       i32 = i11;
       i33 = i24;
       i34 = i25;
       i6 = 76;
       break L43;
      }
      i24 = _i64Add(i27 | 0, i28 | 0, i26 | 0, i29 | 0) | 0;
      i25 = tempRet0;
      i29 = HEAP32[i9 >> 2] | 0;
      if (i29 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
       HEAP32[i9 >> 2] = i29 + 1;
       i35 = HEAPU8[i29 >> 0] | 0;
      } else i35 = ___shgetc(i1) | 0;
      i26 = i35 + -48 | 0;
      if (!(i26 >>> 0 < 10 & (i25 >>> 0 < 429496729 | (i25 | 0) == 429496729 & i24 >>> 0 < 2576980378))) break; else i11 = i35;
     }
     if (i26 >>> 0 > 9) {
      i36 = i14;
      i37 = i25;
      i38 = i24;
     } else {
      i31 = 10;
      i32 = i35;
      i33 = i24;
      i34 = i25;
      i6 = 76;
     }
    } else {
     i36 = i14;
     i37 = 0;
     i38 = i13;
    }
   } else {
    i36 = i14;
    i37 = 0;
    i38 = 0;
   }
  } else {
   i17 = i19;
   i18 = i20;
   i6 = 47;
  } while (0);
  L63 : do if ((i6 | 0) == 47) {
   if (!(i18 + -1 & i18)) {
    i11 = HEAP8[98038 + ((i18 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i22 = HEAP8[97782 + i17 >> 0] | 0;
    i29 = i22 & 255;
    if (i18 >>> 0 > i29 >>> 0) {
     i28 = 0;
     i27 = i29;
     do {
      i28 = i27 | i28 << i11;
      i30 = HEAP32[i9 >> 2] | 0;
      if (i30 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
       HEAP32[i9 >> 2] = i30 + 1;
       i39 = HEAPU8[i30 >> 0] | 0;
      } else i39 = ___shgetc(i1) | 0;
      i40 = HEAP8[97782 + i39 >> 0] | 0;
      i27 = i40 & 255;
     } while (i28 >>> 0 < 134217728 & i18 >>> 0 > i27 >>> 0);
     i41 = i39;
     i42 = i27;
     i43 = 0;
     i44 = i28;
     i45 = i40;
    } else {
     i41 = i17;
     i42 = i29;
     i43 = 0;
     i44 = 0;
     i45 = i22;
    }
    i13 = _bitshift64Lshr(-1, -1, i11 | 0) | 0;
    i25 = tempRet0;
    if (i18 >>> 0 <= i42 >>> 0 | (i25 >>> 0 < i43 >>> 0 | (i25 | 0) == (i43 | 0) & i13 >>> 0 < i44 >>> 0)) {
     i31 = i18;
     i32 = i41;
     i33 = i44;
     i34 = i43;
     i6 = 76;
     break;
    }
    i24 = i44;
    i26 = i43;
    i30 = i45;
    while (1) {
     i46 = _bitshift64Shl(i24 | 0, i26 | 0, i11 | 0) | 0;
     i47 = tempRet0;
     i48 = i46 | i30 & 255;
     i46 = HEAP32[i9 >> 2] | 0;
     if (i46 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i9 >> 2] = i46 + 1;
      i49 = HEAPU8[i46 >> 0] | 0;
     } else i49 = ___shgetc(i1) | 0;
     i30 = HEAP8[97782 + i49 >> 0] | 0;
     if (i18 >>> 0 <= (i30 & 255) >>> 0 | (i47 >>> 0 > i25 >>> 0 | (i47 | 0) == (i25 | 0) & i48 >>> 0 > i13 >>> 0)) {
      i31 = i18;
      i32 = i49;
      i33 = i48;
      i34 = i47;
      i6 = 76;
      break L63;
     } else {
      i24 = i48;
      i26 = i47;
     }
    }
   }
   i26 = HEAP8[97782 + i17 >> 0] | 0;
   i24 = i26 & 255;
   if (i18 >>> 0 > i24 >>> 0) {
    i13 = 0;
    i25 = i24;
    do {
     i13 = i25 + (Math_imul(i13, i18) | 0) | 0;
     i30 = HEAP32[i9 >> 2] | 0;
     if (i30 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i9 >> 2] = i30 + 1;
      i50 = HEAPU8[i30 >> 0] | 0;
     } else i50 = ___shgetc(i1) | 0;
     i51 = HEAP8[97782 + i50 >> 0] | 0;
     i25 = i51 & 255;
    } while (i13 >>> 0 < 119304647 & i18 >>> 0 > i25 >>> 0);
    i52 = i50;
    i53 = i25;
    i54 = i51;
    i55 = i13;
    i56 = 0;
   } else {
    i52 = i17;
    i53 = i24;
    i54 = i26;
    i55 = 0;
    i56 = 0;
   }
   if (i18 >>> 0 > i53 >>> 0) {
    i30 = ___udivdi3(-1, -1, i18 | 0, 0) | 0;
    i11 = tempRet0;
    i22 = i52;
    i29 = i56;
    i28 = i55;
    i27 = i54;
    while (1) {
     if (i29 >>> 0 > i11 >>> 0 | (i29 | 0) == (i11 | 0) & i28 >>> 0 > i30 >>> 0) {
      i31 = i18;
      i32 = i22;
      i33 = i28;
      i34 = i29;
      i6 = 76;
      break L63;
     }
     i47 = ___muldi3(i28 | 0, i29 | 0, i18 | 0, 0) | 0;
     i48 = tempRet0;
     i46 = i27 & 255;
     if (i48 >>> 0 > 4294967295 | (i48 | 0) == -1 & i47 >>> 0 > ~i46 >>> 0) {
      i31 = i18;
      i32 = i22;
      i33 = i28;
      i34 = i29;
      i6 = 76;
      break L63;
     }
     i57 = _i64Add(i47 | 0, i48 | 0, i46 | 0, 0) | 0;
     i46 = tempRet0;
     i48 = HEAP32[i9 >> 2] | 0;
     if (i48 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
      HEAP32[i9 >> 2] = i48 + 1;
      i58 = HEAPU8[i48 >> 0] | 0;
     } else i58 = ___shgetc(i1) | 0;
     i27 = HEAP8[97782 + i58 >> 0] | 0;
     if (i18 >>> 0 <= (i27 & 255) >>> 0) {
      i31 = i18;
      i32 = i58;
      i33 = i57;
      i34 = i46;
      i6 = 76;
      break;
     } else {
      i22 = i58;
      i29 = i46;
      i28 = i57;
     }
    }
   } else {
    i31 = i18;
    i32 = i52;
    i33 = i55;
    i34 = i56;
    i6 = 76;
   }
  } while (0);
  if ((i6 | 0) == 76) if (i31 >>> 0 > (HEAPU8[97782 + i32 >> 0] | 0) >>> 0) {
   do {
    i28 = HEAP32[i9 >> 2] | 0;
    if (i28 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i9 >> 2] = i28 + 1;
     i59 = HEAPU8[i28 >> 0] | 0;
    } else i59 = ___shgetc(i1) | 0;
   } while (i31 >>> 0 > (HEAPU8[97782 + i59 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   i36 = (i4 & 1 | 0) == 0 & 0 == 0 ? i14 : 0;
   i37 = i5;
   i38 = i4;
  } else {
   i36 = i14;
   i37 = i34;
   i38 = i33;
  }
  if (HEAP32[i10 >> 2] | 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
  if (!(i37 >>> 0 < i5 >>> 0 | (i37 | 0) == (i5 | 0) & i38 >>> 0 < i4 >>> 0)) {
   if (!((i4 & 1 | 0) != 0 | 0 != 0 | (i36 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    i28 = _i64Add(i4 | 0, i5 | 0, -1, -1) | 0;
    i7 = tempRet0;
    i8 = i28;
    break;
   }
   if (i37 >>> 0 > i5 >>> 0 | (i37 | 0) == (i5 | 0) & i38 >>> 0 > i4 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    i7 = i5;
    i8 = i4;
    break;
   }
  }
  i28 = ((i36 | 0) < 0) << 31 >> 31;
  i29 = _i64Subtract(i38 ^ i36 | 0, i37 ^ i28 | 0, i36 | 0, i28 | 0) | 0;
  i7 = tempRet0;
  i8 = i29;
 } while (0);
 tempRet0 = i7;
 return i8 | 0;
}

function _curs_columns(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 48 | 0;
 i5 = i3 + 44 | 0;
 i6 = i3 + 40 | 0;
 i7 = i3 + 36 | 0;
 i8 = i3 + 32 | 0;
 i9 = i3 + 28 | 0;
 i10 = i3 + 24 | 0;
 i11 = i3 + 20 | 0;
 i12 = i3 + 16 | 0;
 i13 = i3 + 12 | 0;
 i14 = i3 + 8 | 0;
 i15 = i3 + 4 | 0;
 i16 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i11 >> 2] = 0;
 _update_topline();
 if (!(HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 16)) _curs_rows(HEAP32[26881] | 0);
 i1 = HEAP32[26881] | 0;
 _getvcol(i1 | 0, i1 + 24 | 0, i14, i1 + 132 | 0, i15);
 if ((HEAP32[i14 >> 2] | 0) > (HEAP32[10175] | 0)) HEAP32[10175] = -1;
 HEAP32[i6 >> 2] = _curwin_col_off() | 0;
 i1 = HEAP32[26881] | 0;
 HEAP32[i1 + 140 >> 2] = (HEAP32[i1 + 132 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 i1 = HEAP32[26881] | 0;
 HEAP32[i1 + 136 >> 2] = HEAP32[i1 + 128 >> 2];
 HEAP32[i12 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
 i1 = HEAP32[26881] | 0;
 do if ((HEAP32[i12 >> 2] | 0) <= 0) {
  HEAP32[(HEAP32[26881] | 0) + 140 >> 2] = (HEAP32[i1 + 100 >> 2] | 0) - 1;
  i17 = HEAP32[26881] | 0;
  HEAP32[i17 + 136 >> 2] = (HEAP32[i17 + 88 >> 2] | 0) - 1;
 } else {
  if (HEAP32[i1 + 200 + 36 >> 2] | 0) if (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) {
   i17 = HEAP32[i12 >> 2] | 0;
   HEAP32[i11 >> 2] = i17 + (_curwin_col_off2() | 0);
   if ((HEAP32[(HEAP32[26881] | 0) + 140 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0)) break;
   i17 = HEAP32[26881] | 0;
   HEAP32[i9 >> 2] = (((HEAP32[i17 + 140 >> 2] | 0) - (HEAP32[i17 + 100 >> 2] | 0) | 0) / (HEAP32[i11 >> 2] | 0) | 0) + 1;
   i17 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   i18 = (HEAP32[26881] | 0) + 140 | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - i17;
   i17 = (HEAP32[26881] | 0) + 136 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
   break;
  }
  if (!(HEAP32[i4 >> 2] | 0)) {
   i17 = HEAP32[26881] | 0;
   if ((HEAP32[(HEAP32[26881] | 0) + 140 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0)) {
    i18 = (HEAP32[26881] | 0) + 140 | 0;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i17 + 76 >> 2] | 0);
    break;
   } else {
    HEAP32[i17 + 140 >> 2] = 0;
    break;
   }
  }
  HEAP32[i7 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) - (HEAP32[26990] | 0);
  i17 = HEAP32[26881] | 0;
  HEAP32[i8 >> 2] = (HEAP32[i15 >> 2] | 0) - ((HEAP32[i17 + 76 >> 2] | 0) + (HEAP32[i17 + 100 >> 2] | 0) - (HEAP32[26990] | 0)) + 1;
  if ((HEAP32[i7 >> 2] | 0) < 0 | (HEAP32[i8 >> 2] | 0) > 0) {
   if ((HEAP32[i7 >> 2] | 0) < 0) HEAP32[i5 >> 2] = 0 - (HEAP32[i7 >> 2] | 0); else HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
   do if (!(HEAP32[26989] | 0)) i2 = 19; else if ((HEAP32[i5 >> 2] | 0) >= ((HEAP32[i12 >> 2] | 0) / 2 | 0 | 0)) i2 = 19; else if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) i2 = 19; else {
    if ((HEAP32[i5 >> 2] | 0) < (HEAP32[26989] | 0)) HEAP32[i5 >> 2] = HEAP32[26989];
    i17 = HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0;
    i18 = HEAP32[i5 >> 2] | 0;
    if ((HEAP32[i7 >> 2] | 0) < 0) {
     HEAP32[i13 >> 2] = i17 - i18;
     break;
    } else {
     HEAP32[i13 >> 2] = i17 + i18;
     break;
    }
   } while (0);
   if ((i2 | 0) == 19) HEAP32[i13 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 140 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) - ((HEAP32[i12 >> 2] | 0) / 2 | 0);
   if ((HEAP32[i13 >> 2] | 0) < 0) HEAP32[i13 >> 2] = 0;
   if ((HEAP32[i13 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0)) {
    HEAP32[(HEAP32[26881] | 0) + 76 >> 2] = HEAP32[i13 >> 2];
    _redraw_later(40);
   }
  }
  i18 = (HEAP32[26881] | 0) + 140 | 0;
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0);
 } while (0);
 HEAP32[i16 >> 2] = HEAP32[(HEAP32[26881] | 0) + 80 >> 2];
 HEAP32[i10 >> 2] = 0;
 do if ((HEAP32[(HEAP32[26881] | 0) + 136 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) i2 = 37; else {
  if ((HEAP32[i16 >> 2] | 0) <= 0) if (((HEAP32[(HEAP32[26881] | 0) + 136 >> 2] | 0) + (HEAP32[26971] | 0) | 0) < (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) {
   i2 = 74;
   break;
  }
  i13 = HEAP32[26881] | 0;
  i12 = _plines_win(i13 | 0, HEAP32[i13 + 24 >> 2] | 0, 0) | 0;
  HEAP32[i10 >> 2] = i12;
  if ((i12 - 1 | 0) >= (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) i2 = 37; else i2 = 74;
 } while (0);
 do if ((i2 | 0) == 37) if (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) if ((HEAP32[i11 >> 2] | 0) > 0 ? (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) : 0) if (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) {
  HEAP32[i6 >> 2] = 0;
  i12 = (HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0) + (Math_imul(HEAP32[26971] | 0, HEAP32[i11 >> 2] | 0) | 0) | 0;
  if ((i12 | 0) > (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0)) HEAP32[i6 >> 2] = 1;
  if (!(HEAP32[i10 >> 2] | 0)) {
   i12 = HEAP32[26881] | 0;
   HEAP32[i10 >> 2] = _plines_win(i12 | 0, HEAP32[i12 + 24 >> 2] | 0, 0) | 0;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
  if ((HEAP32[i10 >> 2] | 0) > ((HEAP32[(HEAP32[26881] | 0) + 136 >> 2] | 0) + (HEAP32[26971] | 0) | 0)) HEAP32[i9 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 136 >> 2] | 0) + (HEAP32[26971] | 0); else HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  if ((HEAP32[i9 >> 2] | 0) >= ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) + ((HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0) / (HEAP32[i11 >> 2] | 0) | 0) | 0)) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
  do if ((HEAP32[i6 >> 2] | 0) == 3) i2 = 51; else if ((HEAP32[i10 >> 2] | 0) < (HEAP32[26971] << 1 | 0)) i2 = 51; else {
   if ((HEAP32[i6 >> 2] | 0) == 1) {
    i12 = (HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0) + (Math_imul(HEAP32[26971] | 0, HEAP32[i11 >> 2] | 0) | 0) | 0;
    i13 = HEAP32[i11 >> 2] | 0;
    HEAP32[i6 >> 2] = (i12 - (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) + i13 - 1 | 0) / (i13 | 0) | 0;
    if ((HEAP32[i6 >> 2] | 0) <= 0) break;
    i13 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
    if ((i13 | 0) > (HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0)) HEAP32[i6 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0) / (HEAP32[i11 >> 2] | 0) | 0;
    i13 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
    i12 = (HEAP32[26881] | 0) + 80 | 0;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - i13;
    break;
   }
   if ((HEAP32[i6 >> 2] | 0) == 2) {
    HEAP32[i15 >> 2] = Math_imul((HEAP32[i9 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) + 1 | 0, HEAP32[i11 >> 2] | 0) | 0;
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) <= (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0)) break;
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
    }
    if ((HEAP32[i15 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 80 >> 2] = HEAP32[i15 >> 2];
   }
  } while (0);
  if ((i2 | 0) == 51) {
   HEAP32[i9 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) / (HEAP32[i11 >> 2] | 0) | 0;
   if ((HEAP32[i9 >> 2] | 0) > ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) / 2 | 0 | 0)) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) / 2 | 0); else HEAP32[i9 >> 2] = 0;
   if ((HEAP32[i9 >> 2] | 0) > ((HEAP32[i10 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) + 1 | 0)) HEAP32[i9 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) + 1;
   i13 = Math_imul(HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[(HEAP32[26881] | 0) + 80 >> 2] = i13;
  }
  i13 = (HEAP32[26881] | 0) + 136 | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - ((HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0) / (HEAP32[i11 >> 2] | 0) | 0);
  if ((HEAP32[(HEAP32[26881] | 0) + 136 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) {
   i13 = HEAP32[26881] | 0;
   HEAP32[i6 >> 2] = (HEAP32[i13 + 136 >> 2] | 0) - (HEAP32[i13 + 88 >> 2] | 0) + 1;
   i13 = Math_imul(HEAP32[i6 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   i12 = (HEAP32[26881] | 0) + 80 | 0;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i13;
   i13 = (HEAP32[26881] | 0) + 136 | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
  }
  HEAP32[i6 >> 2] = ((HEAP32[i16 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0) | 0) / (HEAP32[i11 >> 2] | 0) | 0;
  if ((HEAP32[i6 >> 2] | 0) > 0) {
   _win_ins_lines(HEAP32[26881] | 0, 0, HEAP32[i6 >> 2] | 0, 0, 0) | 0;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) < 0) _win_del_lines(HEAP32[26881] | 0, 0, 0 - (HEAP32[i6 >> 2] | 0) | 0, 0, 0, 0) | 0;
 } else i2 = 74; else i2 = 74; else i2 = 74; while (0);
 if ((i2 | 0) == 74) HEAP32[(HEAP32[26881] | 0) + 80 >> 2] = 0;
 if ((HEAP32[i16 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0)) {
  i19 = HEAP32[26881] | 0;
  i20 = i19 + 108 | 0;
  i21 = HEAP32[i20 >> 2] | 0;
  i22 = i21 | 7;
  HEAP32[i20 >> 2] = i22;
  STACKTOP = i3;
  return;
 }
 _redraw_later(40);
 i19 = HEAP32[26881] | 0;
 i20 = i19 + 108 | 0;
 i21 = HEAP32[i20 >> 2] | 0;
 i22 = i21 | 7;
 HEAP32[i20 >> 2] = i22;
 STACKTOP = i3;
 return;
}

function _mark_col_adjust(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
 if ((HEAP32[i9 >> 2] | 0) == 0 & (HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[27133] | 0) != 0) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= 26) break;
  HEAP32[i13 >> 2] = (HEAP32[26773] | 0) + 188 + (HEAP32[i10 >> 2] << 3);
  do if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
   i4 = HEAP32[i13 >> 2] | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
    HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
    break;
   }
   i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
  } while (0);
  do if ((HEAP32[103600 + (HEAP32[i10 >> 2] << 4) + 8 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
   HEAP32[i13 >> 2] = 103600 + (HEAP32[i10 >> 2] << 4);
   if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
    i4 = HEAP32[i13 >> 2] | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
    if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
     HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
     break;
    }
    i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
   }
  } while (0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 HEAP32[i10 >> 2] = 26;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= 36) break;
  do if ((HEAP32[103600 + (HEAP32[i10 >> 2] << 4) + 8 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
   HEAP32[i13 >> 2] = 103600 + (HEAP32[i10 >> 2] << 4);
   if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
    i4 = HEAP32[i13 >> 2] | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
    if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
     HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
     break;
    }
    i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
   }
  } while (0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 HEAP32[i13 >> 2] = (HEAP32[26773] | 0) + 428;
 do if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
  i4 = HEAP32[i13 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
   break;
  }
  i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 } while (0);
 HEAP32[i13 >> 2] = (HEAP32[26773] | 0) + 436;
 do if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
  i4 = HEAP32[i13 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
   break;
  }
  i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 } while (0);
 HEAP32[i13 >> 2] = (HEAP32[26773] | 0) + 396;
 do if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
  i4 = HEAP32[i13 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
   break;
  }
  i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 } while (0);
 HEAP32[i13 >> 2] = (HEAP32[26773] | 0) + 396 + 8;
 do if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
  i4 = HEAP32[i13 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
   break;
  }
  i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 } while (0);
 HEAP32[i13 >> 2] = (HEAP32[26881] | 0) + 300;
 do if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
  i4 = HEAP32[i13 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
   break;
  }
  i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 } while (0);
 HEAP32[i13 >> 2] = (HEAP32[26881] | 0) + 308;
 do if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
  i4 = HEAP32[i13 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
   break;
  }
  i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 } while (0);
 HEAP32[i13 >> 2] = 107176;
 do if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
  i4 = HEAP32[i13 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
   HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
   break;
  }
  i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 } while (0);
 HEAP32[i12 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i12 >> 2] | 0)) break;
  do if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[26773] | 0)) {
   HEAP32[i10 >> 2] = 0;
   while (1) {
    i14 = HEAP32[i12 >> 2] | 0;
    if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[(HEAP32[i12 >> 2] | 0) + 800 >> 2] | 0)) break;
    L102 : do if ((HEAP32[i14 + 316 + ((HEAP32[i10 >> 2] | 0) * 24 | 0) + 4 + 8 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
     HEAP32[i13 >> 2] = (HEAP32[i12 >> 2] | 0) + 316 + ((HEAP32[i10 >> 2] | 0) * 24 | 0) + 4;
     if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
      i4 = HEAP32[i13 >> 2] | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
      do if ((HEAP32[i9 >> 2] | 0) < 0) {
       if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) > (0 - (HEAP32[i9 >> 2] | 0) | 0)) break;
       HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
       break L102;
      } while (0);
      i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
     }
    } while (0);
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   }
   if ((i14 | 0) != (HEAP32[26881] | 0)) {
    HEAP32[i13 >> 2] = (HEAP32[i12 >> 2] | 0) + 24;
    if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
     i4 = HEAP32[i13 >> 2] | 0;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
     if ((HEAP32[i9 >> 2] | 0) < 0) if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0) <= (0 - (HEAP32[i9 >> 2] | 0) | 0)) {
      HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] = 0;
      break;
     }
     i4 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
    }
   }
  } while (0);
  HEAP32[i12 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2];
 }
 STACKTOP = i5;
 return;
}

function _vim_regsub_both(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i8 + 64 | 0;
 i10 = i8 + 60 | 0;
 i11 = i8 + 56 | 0;
 i12 = i8 + 52 | 0;
 i13 = i8 + 48 | 0;
 i14 = i8 + 44 | 0;
 i15 = i8 + 40 | 0;
 i16 = i8 + 36 | 0;
 i17 = i8 + 32 | 0;
 i18 = i8 + 28 | 0;
 i19 = i8 + 24 | 0;
 i20 = i8 + 20 | 0;
 i21 = i8 + 16 | 0;
 i22 = i8 + 12 | 0;
 i23 = i8 + 8 | 0;
 i24 = i8 + 4 | 0;
 i25 = i8;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i21 >> 2] = -1;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 if ((HEAP32[i10 >> 2] | 0) == 0 & (HEAP32[i11 >> 2] | 0) == 0 | (HEAP32[i12 >> 2] | 0) == 0) {
  _emsg(93343) | 0;
  HEAP32[i9 >> 2] = 0;
  i26 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i26 | 0;
 }
 if (_prog_magic_wrong() | 0) {
  HEAP32[i9 >> 2] = 0;
  i26 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i26 | 0;
 }
 HEAP32[i16 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
 L9 : do if (HEAP32[i11 >> 2] | 0) i7 = 95; else {
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 92) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 1 >> 0] | 0) == 61) {
   i7 = 95;
   break;
  }
  L14 : while (1) {
   i6 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i6 + 1;
   i5 = HEAPU8[i6 >> 0] | 0;
   HEAP32[i19 >> 2] = i5;
   if (!i5) {
    i7 = 95;
    break L9;
   }
   L17 : do if ((HEAP32[i19 >> 2] | 0) == 38 & (HEAP32[i14 >> 2] | 0) != 0) HEAP32[i21 >> 2] = 0; else if ((HEAP32[i19 >> 2] | 0) == 92) if (HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) {
    i5 = HEAP32[i16 >> 2] | 0;
    if (!(HEAP32[i14 >> 2] | 0 ? 1 : (HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) != 38)) {
     HEAP32[i16 >> 2] = i5 + 1;
     HEAP32[i21 >> 2] = 0;
     break;
    }
    if (48 <= (HEAPU8[i5 >> 0] | 0)) if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) <= 57) {
     i5 = HEAP32[i16 >> 2] | 0;
     HEAP32[i16 >> 2] = i5 + 1;
     HEAP32[i21 >> 2] = (HEAPU8[i5 >> 0] | 0) - 48;
     break;
    }
    if (_vim_strchr(72695, HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) | 0) {
     i5 = HEAP32[i16 >> 2] | 0;
     HEAP32[i16 >> 2] = i5 + 1;
     switch (HEAPU8[i5 >> 0] | 0) {
     case 117:
      {
       HEAP32[i23 >> 2] = 8;
       continue L14;
       break;
      }
     case 85:
      {
       HEAP32[i22 >> 2] = 9;
       continue L14;
       break;
      }
     case 108:
      {
       HEAP32[i23 >> 2] = 10;
       continue L14;
       break;
      }
     case 76:
      {
       HEAP32[i22 >> 2] = 11;
       continue L14;
       break;
      }
     case 69:
     case 101:
      {
       HEAP32[i22 >> 2] = 0;
       HEAP32[i23 >> 2] = 0;
       continue L14;
       break;
      }
     default:
      break L17;
     }
    }
   } while (0);
   if ((HEAP32[i21 >> 2] | 0) < 0) {
    if ((HEAP32[i19 >> 2] | 0) == 128) if (HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) if (HEAPU8[(HEAP32[i16 >> 2] | 0) + 1 >> 0] | 0) {
     if (HEAP32[i13 >> 2] | 0) {
      i5 = HEAP32[i19 >> 2] & 255;
      i6 = HEAP32[i17 >> 2] | 0;
      HEAP32[i17 >> 2] = i6 + 1;
      HEAP8[i6 >> 0] = i5;
      i5 = HEAP32[i16 >> 2] | 0;
      HEAP32[i16 >> 2] = i5 + 1;
      i6 = HEAP8[i5 >> 0] | 0;
      i5 = HEAP32[i17 >> 2] | 0;
      HEAP32[i17 >> 2] = i5 + 1;
      HEAP8[i5 >> 0] = i6;
      i6 = HEAP32[i16 >> 2] | 0;
      HEAP32[i16 >> 2] = i6 + 1;
      i5 = HEAP8[i6 >> 0] | 0;
      i6 = HEAP32[i17 >> 2] | 0;
      HEAP32[i17 >> 2] = i6 + 1;
      HEAP8[i6 >> 0] = i5;
     } else {
      HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 3;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 2;
     }
     continue;
    }
    L48 : do if ((HEAP32[i19 >> 2] | 0) == 92) if (HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) {
     i5 = (HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) - 98 | 0;
     switch (i5 >>> 1 | i5 << 31 | 0) {
     case 8:
      {
       HEAP32[i19 >> 2] = 13;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
       break L48;
       break;
      }
     case 6:
      {
       HEAP32[i19 >> 2] = 10;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
       break L48;
       break;
      }
     case 9:
      {
       HEAP32[i19 >> 2] = 9;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
       break L48;
       break;
      }
     case 0:
      {
       HEAP32[i19 >> 2] = 8;
       HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
       break L48;
       break;
      }
     default:
      {
       if (HEAP32[i15 >> 2] | 0) {
        if (HEAP32[i13 >> 2] | 0) HEAP8[HEAP32[i17 >> 2] >> 0] = 92;
        HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
       }
       i5 = HEAP32[i16 >> 2] | 0;
       HEAP32[i16 >> 2] = i5 + 1;
       HEAP32[i19 >> 2] = HEAPU8[i5 >> 0];
       break L48;
      }
     }
    } while (0);
    do if (HEAP32[i23 >> 2] | 0) HEAP32[i23 >> 2] = FUNCTION_TABLE_iii[HEAP32[i23 >> 2] & 15](i20, HEAP32[i19 >> 2] | 0) | 0; else if (HEAP32[i22 >> 2] | 0) {
     HEAP32[i22 >> 2] = FUNCTION_TABLE_iii[HEAP32[i22 >> 2] & 15](i20, HEAP32[i19 >> 2] | 0) | 0;
     break;
    } else {
     HEAP32[i20 >> 2] = HEAP32[i19 >> 2];
     break;
    } while (0);
    if (HEAP32[i13 >> 2] | 0) HEAP8[HEAP32[i17 >> 2] >> 0] = HEAP32[i20 >> 2];
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   } else {
    do if (!(HEAP32[26312] | 0)) {
     HEAP32[i24 >> 2] = HEAP32[(HEAP32[26313] | 0) + 4 + (HEAP32[i21 >> 2] << 3) >> 2];
     if ((HEAP32[i24 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[26313] | 0) + 84 + (HEAP32[i21 >> 2] << 3) >> 2] | 0) >= 0) {
      i5 = _reg_getline(HEAP32[i24 >> 2] | 0) | 0;
      HEAP32[i18 >> 2] = i5 + (HEAP32[(HEAP32[26313] | 0) + 4 + (HEAP32[i21 >> 2] << 3) + 4 >> 2] | 0);
      if ((HEAP32[(HEAP32[26313] | 0) + 84 + (HEAP32[i21 >> 2] << 3) >> 2] | 0) == (HEAP32[i24 >> 2] | 0)) {
       i5 = HEAP32[26313] | 0;
       i6 = HEAP32[i21 >> 2] << 3 | 0;
       HEAP32[i25 >> 2] = (HEAP32[i5 + 84 + i6 + 4 >> 2] | 0) - (HEAP32[i5 + 4 + i6 + 4 >> 2] | 0);
       break;
      } else {
       HEAP32[i25 >> 2] = _strlen(HEAP32[i18 >> 2] | 0) | 0;
       break;
      }
     }
     HEAP32[i18 >> 2] = 0;
    } else {
     HEAP32[i18 >> 2] = HEAP32[(HEAP32[26312] | 0) + 4 + (HEAP32[i21 >> 2] << 2) >> 2];
     if (!(HEAP32[(HEAP32[26312] | 0) + 44 + (HEAP32[i21 >> 2] << 2) >> 2] | 0)) {
      HEAP32[i18 >> 2] = 0;
      break;
     } else {
      HEAP32[i25 >> 2] = (HEAP32[(HEAP32[26312] | 0) + 44 + (HEAP32[i21 >> 2] << 2) >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
      break;
     }
    } while (0);
    L89 : do if (HEAP32[i18 >> 2] | 0) while (1) do if (!(HEAP32[i25 >> 2] | 0)) {
     if (HEAP32[26312] | 0) break L89;
     if ((HEAP32[(HEAP32[26313] | 0) + 84 + (HEAP32[i21 >> 2] << 3) >> 2] | 0) == (HEAP32[i24 >> 2] | 0)) break L89;
     if (HEAP32[i13 >> 2] | 0) HEAP8[HEAP32[i17 >> 2] >> 0] = 13;
     HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
     i6 = (HEAP32[i24 >> 2] | 0) + 1 | 0;
     HEAP32[i24 >> 2] = i6;
     HEAP32[i18 >> 2] = _reg_getline(i6) | 0;
     if ((HEAP32[(HEAP32[26313] | 0) + 84 + (HEAP32[i21 >> 2] << 3) >> 2] | 0) == (HEAP32[i24 >> 2] | 0)) {
      HEAP32[i25 >> 2] = HEAP32[(HEAP32[26313] | 0) + 84 + (HEAP32[i21 >> 2] << 3) + 4 >> 2];
      break;
     } else {
      HEAP32[i25 >> 2] = _strlen(HEAP32[i18 >> 2] | 0) | 0;
      break;
     }
    } else {
     if (!(HEAPU8[HEAP32[i18 >> 2] >> 0] | 0)) break L14;
     do if (HEAP32[i15 >> 2] | 0) {
      if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) != 13) if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) != 92) {
       i7 = 83;
       break;
      }
      if (HEAP32[i13 >> 2] | 0) {
       HEAP8[HEAP32[i17 >> 2] >> 0] = 92;
       HEAP8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] = HEAP8[HEAP32[i18 >> 2] >> 0] | 0;
      }
      HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 2;
     } else i7 = 83; while (0);
     if ((i7 | 0) == 83) {
      i7 = 0;
      HEAP32[i19 >> 2] = HEAPU8[HEAP32[i18 >> 2] >> 0];
      do if (HEAP32[i23 >> 2] | 0) HEAP32[i23 >> 2] = FUNCTION_TABLE_iii[HEAP32[i23 >> 2] & 15](i20, HEAP32[i19 >> 2] | 0) | 0; else if (HEAP32[i22 >> 2] | 0) {
       HEAP32[i22 >> 2] = FUNCTION_TABLE_iii[HEAP32[i22 >> 2] & 15](i20, HEAP32[i19 >> 2] | 0) | 0;
       break;
      } else {
       HEAP32[i20 >> 2] = HEAP32[i19 >> 2];
       break;
      } while (0);
      if (HEAP32[i13 >> 2] | 0) HEAP8[HEAP32[i17 >> 2] >> 0] = HEAP32[i20 >> 2];
      HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
     }
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
     HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + -1;
    } while (0); while (0);
    HEAP32[i21 >> 2] = -1;
   }
  }
  if (HEAP32[i13 >> 2] | 0) _emsg(93485) | 0;
 } while (0);
 if ((i7 | 0) == 95) if (HEAP32[i13 >> 2] | 0) HEAP8[HEAP32[i17 >> 2] >> 0] = 0;
 HEAP32[i9 >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) + 1;
 i26 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i8;
 return i26 | 0;
}

function _do_arg_all(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i5 + 96 | 0;
 i7 = i5 + 92 | 0;
 i8 = i5 + 88 | 0;
 i9 = i5 + 84 | 0;
 i10 = i5 + 80 | 0;
 i11 = i5 + 76 | 0;
 i12 = i5 + 72 | 0;
 i13 = i5 + 68 | 0;
 i14 = i5 + 64 | 0;
 i15 = i5 + 60 | 0;
 i16 = i5 + 56 | 0;
 i17 = i5 + 52 | 0;
 i18 = i5 + 48 | 0;
 i19 = i5 + 44 | 0;
 i20 = i5 + 40 | 0;
 i21 = i5 + 36 | 0;
 i22 = i5 + 32 | 0;
 i23 = i5 + 28 | 0;
 i24 = i5 + 24 | 0;
 i25 = i5 + 20 | 0;
 i26 = i5 + 16 | 0;
 i27 = i5 + 12 | 0;
 i28 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 1;
 HEAP32[i20 >> 2] = HEAP32[27129];
 HEAP32[i25 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 if ((HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 _setpcmark();
 HEAP32[i13 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2];
 HEAP32[i12 >> 2] = _alloc_clear(HEAP32[i13 >> 2] | 0) | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i17 >> 2] = HEAP32[(HEAP32[26881] | 0) + 184 >> 2];
 i3 = (HEAP32[i17 >> 2] | 0) + 20 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 HEAP32[i21 >> 2] = HEAP32[26881];
 HEAP32[i23 >> 2] = HEAP32[26886];
 HEAP32[26757] = 1;
 if ((HEAP32[i20 >> 2] | 0) > 0) _goto_tabpage_tp(HEAP32[26884] | 0, 1, 1);
 while (1) {
  HEAP32[i19 >> 2] = HEAP32[HEAP32[26886] >> 2];
  HEAP32[i10 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[i10 >> 2] | 0)) break;
   HEAP32[i11 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2];
   HEAP32[i18 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2];
   L15 : do if (!(HEAP32[(HEAP32[i18 >> 2] | 0) + 68 >> 2] | 0)) i4 = 12; else {
    if (!(HEAP32[i8 >> 2] | 0)) {
     if ((HEAP32[(HEAP32[i18 >> 2] | 0) + 56 >> 2] | 0) > 1) {
      i4 = 12;
      break;
     }
     if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) {
      i4 = 12;
      break;
     }
    }
    HEAP32[i9 >> 2] = 0;
    while (1) {
     if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break L15;
     if ((HEAP32[i9 >> 2] | 0) < (HEAP32[HEAP32[i17 >> 2] >> 2] | 0)) {
      if ((HEAP32[(HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i9 >> 2] << 3) + 4 >> 2] | 0) == (HEAP32[(HEAP32[i18 >> 2] | 0) + 92 >> 2] | 0)) break;
      i3 = _alist_name((HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i9 >> 2] << 3) | 0) | 0;
      if ((_fullpathcmp(i3, HEAP32[(HEAP32[i18 >> 2] | 0) + 68 >> 2] | 0, 1) | 0) & 1 | 0) break;
     }
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    }
    HEAP32[i27 >> 2] = 1;
    if ((HEAP32[i23 >> 2] | 0) == (HEAP32[26886] | 0)) {
     HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
     if ((HEAP32[i21 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + 1;
    }
    if ((HEAP32[i27 >> 2] | 0) > (HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0 | 0)) {
     HEAP8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] = HEAP32[i27 >> 2];
     if (!(HEAP32[i9 >> 2] | 0)) {
      if (HEAP32[i25 >> 2] | 0) HEAP32[(HEAP32[i25 >> 2] | 0) + 188 >> 2] = HEAP32[i13 >> 2];
      HEAP32[i25 >> 2] = HEAP32[i10 >> 2];
      HEAP32[i26 >> 2] = HEAP32[26886];
     }
    } else if (HEAP32[i8 >> 2] | 0) HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
    if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 184 >> 2] | 0) != (HEAP32[i17 >> 2] | 0)) {
     _alist_unlink(HEAP32[(HEAP32[i10 >> 2] | 0) + 184 >> 2] | 0);
     HEAP32[(HEAP32[i10 >> 2] | 0) + 184 >> 2] = HEAP32[i17 >> 2];
     i3 = (HEAP32[(HEAP32[i10 >> 2] | 0) + 184 >> 2] | 0) + 20 | 0;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
   } while (0);
   if ((i4 | 0) == 12) {
    i4 = 0;
    HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
   }
   HEAP32[(HEAP32[i10 >> 2] | 0) + 188 >> 2] = HEAP32[i9 >> 2];
   L46 : do if (!(HEAP32[i8 >> 2] | 0 ? 1 : (HEAP32[i9 >> 2] | 0) != (HEAP32[i13 >> 2] | 0))) {
    i3 = (_buf_hide(HEAP32[i18 >> 2] | 0) | 0) != 0;
    if (!(i3 | (HEAP32[i7 >> 2] | 0) != 0)) if ((HEAP32[(HEAP32[i18 >> 2] | 0) + 56 >> 2] | 0) <= 1) if (_bufIsChanged(HEAP32[i18 >> 2] | 0) | 0) break;
    do if (!(_buf_hide(HEAP32[i18 >> 2] | 0) | 0)) if ((HEAP32[(HEAP32[i18 >> 2] | 0) + 56 >> 2] | 0) <= 1) if (_bufIsChanged(HEAP32[i18 >> 2] | 0) | 0) {
     _set_bufref(i28, HEAP32[i18 >> 2] | 0);
     _autowrite(HEAP32[i18 >> 2] | 0, 0) | 0;
     if (_win_valid(HEAP32[i10 >> 2] | 0) | 0) if (_bufref_valid(i28) | 0) break;
     HEAP32[i11 >> 2] = HEAP32[26887];
     break L46;
    } while (0);
    if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) if (!(HEAP32[i20 >> 2] | 0 ? (HEAP32[HEAP32[26884] >> 2] | 0) != 0 : 0)) {
     HEAP32[i14 >> 2] = 1;
     break;
    }
    i3 = HEAP32[i10 >> 2] | 0;
    if (_buf_hide(HEAP32[i18 >> 2] | 0) | 0) i29 = 0; else i29 = (_bufIsChanged(HEAP32[i18 >> 2] | 0) | 0) != 0 ^ 1;
    _win_close(i3, i29 & 1) | 0;
    if (!(_win_valid(HEAP32[i11 >> 2] | 0) | 0)) HEAP32[i11 >> 2] = HEAP32[26887];
   } while (0);
   HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  }
  if ((HEAP32[i20 >> 2] | 0) == 0 | (HEAP32[i19 >> 2] | 0) == 0) break;
  if (!(_valid_tabpage(HEAP32[i19 >> 2] | 0) | 0)) HEAP32[i19 >> 2] = HEAP32[26884];
  _goto_tabpage_tp(HEAP32[i19 >> 2] | 0, 1, 1);
 }
 if ((HEAP32[i6 >> 2] | 0) <= 0 ? 1 : (HEAP32[i6 >> 2] | 0) > (HEAP32[i13 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 HEAP32[26745] = (HEAP32[26745] | 0) + 1;
 HEAP32[26746] = (HEAP32[26746] | 0) + 1;
 HEAP32[i22 >> 2] = HEAP32[26881];
 HEAP32[i24 >> 2] = HEAP32[26886];
 _win_enter(HEAP32[27112] | 0, 0);
 if (HEAP32[i8 >> 2] | 0) if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) if (!(HEAPU8[(_ml_get(1) | 0) >> 0] | 0)) if ((HEAP32[(HEAP32[26773] | 0) + 56 >> 2] | 0) == 1) if (!(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) if (!(HEAP32[(HEAP32[26773] | 0) + 108 >> 2] | 0)) HEAP32[i14 >> 2] = 1;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) if ((HEAP32[i9 >> 2] | 0) < (HEAP32[i13 >> 2] | 0)) i30 = (HEAP32[26834] | 0) != 0 ^ 1; else i30 = 0; else i30 = 0;
  i31 = HEAP32[i17 >> 2] | 0;
  if (!i30) break;
  if ((i31 | 0) == 107472) if ((HEAP32[i9 >> 2] | 0) == ((HEAP32[26868] | 0) - 1 | 0)) HEAP32[26776] = 1;
  L97 : do if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0 | 0) > 0) if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) {
   HEAP32[i11 >> 2] = HEAP32[26887];
   while (1) {
    if (!(HEAP32[i11 >> 2] | 0)) {
     i4 = 90;
     break L97;
    }
    if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 188 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) break;
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2];
   }
   i19 = HEAP32[i11 >> 2] | 0;
   if (HEAP32[i8 >> 2] | 0) {
    HEAP32[i25 >> 2] = i19;
    HEAP32[i26 >> 2] = HEAP32[26886];
    i4 = 90;
    break;
   } else {
    _win_move_after(i19, HEAP32[26881] | 0);
    i4 = 90;
    break;
   }
  } else i4 = 90; else if ((HEAP32[i15 >> 2] | 0) == 1) {
   if (HEAP32[i14 >> 2] | 0) HEAP32[26746] = (HEAP32[26746] | 0) + -1; else {
    HEAP32[i16 >> 2] = HEAP32[26911];
    HEAP32[26911] = 1;
    HEAP32[i15 >> 2] = _win_split(0, 33) | 0;
    HEAP32[26911] = HEAP32[i16 >> 2];
    if (!(HEAP32[i15 >> 2] | 0)) break;
   }
   HEAP32[(HEAP32[26881] | 0) + 188 >> 2] = HEAP32[i9 >> 2];
   if (!(HEAP32[i9 >> 2] | 0)) {
    HEAP32[i25 >> 2] = HEAP32[26881];
    HEAP32[i26 >> 2] = HEAP32[26886];
   }
   i19 = _alist_name((HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i9 >> 2] << 3) | 0) | 0;
   if (_buf_hide(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) | 0) i32 = 1; else i32 = (_bufIsChanged(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) | 0) != 0;
   _do_ecmd(0, i19, 0, 0, 1, (i32 ? 1 : 0) + 4 | 0, HEAP32[26881] | 0) | 0;
   if (HEAP32[i14 >> 2] | 0) HEAP32[26746] = (HEAP32[26746] | 0) + 1;
   HEAP32[i14 >> 2] = 0;
   i4 = 90;
  } else i4 = 90; while (0);
  if ((i4 | 0) == 90) {
   i4 = 0;
   _ui_breakcheck();
   if ((HEAP32[i20 >> 2] | 0) > 0) {
    i19 = _tabpage_index(0) | 0;
    if ((i19 | 0) <= (HEAP32[26994] | 0)) HEAP32[27129] = 9999;
   }
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 _alist_unlink(i31);
 HEAP32[26745] = (HEAP32[26745] | 0) + -1;
 if ((HEAP32[i24 >> 2] | 0) != (HEAP32[i26 >> 2] | 0)) {
  if (_valid_tabpage(HEAP32[i24 >> 2] | 0) | 0) _goto_tabpage_tp(HEAP32[i24 >> 2] | 0, 1, 1);
  if (_win_valid(HEAP32[i22 >> 2] | 0) | 0) _win_enter(HEAP32[i22 >> 2] | 0, 0);
 }
 if (_valid_tabpage(HEAP32[i26 >> 2] | 0) | 0) _goto_tabpage_tp(HEAP32[i26 >> 2] | 0, 1, 1);
 if (_win_valid(HEAP32[i25 >> 2] | 0) | 0) _win_enter(HEAP32[i25 >> 2] | 0, 0);
 HEAP32[26746] = (HEAP32[26746] | 0) + -1;
 _vim_free(HEAP32[i12 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _do_autocmd_event(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i9 = i8;
 i10 = i8 + 76 | 0;
 i11 = i8 + 72 | 0;
 i12 = i8 + 68 | 0;
 i13 = i8 + 64 | 0;
 i14 = i8 + 60 | 0;
 i15 = i8 + 56 | 0;
 i16 = i8 + 52 | 0;
 i17 = i8 + 48 | 0;
 i18 = i8 + 44 | 0;
 i19 = i8 + 40 | 0;
 i20 = i8 + 36 | 0;
 i21 = i8 + 32 | 0;
 i22 = i8 + 28 | 0;
 i23 = i8 + 24 | 0;
 i24 = i8 + 20 | 0;
 i25 = i8 + 16 | 0;
 i26 = i8 + 12 | 0;
 i27 = i8 + 8 | 0;
 i28 = i8 + 80 | 0;
 i29 = i8 + 4 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 if ((HEAP32[i16 >> 2] | 0) == -3) HEAP32[i23 >> 2] = HEAP32[2732]; else HEAP32[i23 >> 2] = HEAP32[i16 >> 2];
 if ((HEAP32[i16 >> 2] | 0) != -3 | (HEAP32[i15 >> 2] | 0) != 0) i30 = 0; else i30 = (HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) == 0;
 HEAP32[i24 >> 2] = i30 & 1;
 L8 : do if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) {
  HEAP32[i17 >> 2] = HEAP32[101068 + (HEAP32[i11 >> 2] << 2) >> 2];
  while (1) {
   if (!(HEAP32[i17 >> 2] | 0)) break L8;
   do if (HEAP32[i15 >> 2] | 0) {
    if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[i23 >> 2] | 0)) _au_remove_pat(HEAP32[i17 >> 2] | 0);
   } else {
    if ((HEAP32[i16 >> 2] | 0) != -3) if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[i16 >> 2] | 0)) break;
    _show_autocmd(HEAP32[i17 >> 2] | 0, HEAP32[i11 >> 2] | 0);
   } while (0);
   HEAP32[i17 >> 2] = HEAP32[HEAP32[i17 >> 2] >> 2];
  }
 } while (0);
 L22 : while (1) {
  if (!(HEAP8[HEAP32[i12 >> 2] >> 0] | 0)) {
   i7 = 93;
   break;
  }
  HEAP32[i21 >> 2] = 0;
  HEAP32[i22 >> 2] = HEAP32[i12 >> 2];
  while (1) {
   if (!(HEAPU8[HEAP32[i22 >> 2] >> 0] | 0)) break;
   if (!(HEAP32[i21 >> 2] | 0 ? 1 : (HEAPU8[HEAP32[i22 >> 2] >> 0] | 0) != 44)) {
    if ((HEAP32[i22 >> 2] | 0) >>> 0 <= (HEAP32[i12 >> 2] | 0) >>> 0) break;
    if ((HEAPU8[(HEAP32[i22 >> 2] | 0) + -1 >> 0] | 0) != 92) break;
   }
   if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0) == 123) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1; else if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0) == 125) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
  }
  if ((HEAP32[i12 >> 2] | 0) != (HEAP32[i22 >> 2] | 0)) {
   HEAP32[i25 >> 2] = (HEAP32[i22 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
   HEAP32[i26 >> 2] = 0;
   HEAP32[i27 >> 2] = 0;
   do if ((HEAP32[i25 >> 2] | 0) >= 8) if (!(_strncmp(HEAP32[i12 >> 2] | 0, 56007, 7) | 0)) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) - 1) >> 0] | 0) == 62) {
    HEAP32[i26 >> 2] = 1;
    if ((HEAP32[i25 >> 2] | 0) == 8) {
     HEAP32[i27 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
     break;
    }
    if ((HEAP32[i25 >> 2] | 0) > 9) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 7 >> 0] | 0) == 61) {
     if ((HEAP32[i25 >> 2] | 0) == 13) if (!(_strncasecmp(HEAP32[i12 >> 2] | 0, 56015, 13) | 0)) {
      HEAP32[i27 >> 2] = HEAP32[26846];
      break;
     }
     i30 = _skipdigits((HEAP32[i12 >> 2] | 0) + 8 | 0) | 0;
     if ((i30 | 0) == ((HEAP32[i12 >> 2] | 0) + (HEAP32[i25 >> 2] | 0) + -1 | 0)) HEAP32[i27 >> 2] = _atoi((HEAP32[i12 >> 2] | 0) + 8 | 0) | 0;
    }
   } while (0);
   if (HEAP32[i26 >> 2] | 0) {
    HEAP32[i9 >> 2] = HEAP32[i27 >> 2];
    _sprintf(i28, 56029, i9) | 0;
    HEAP32[i12 >> 2] = i28;
    HEAP32[i25 >> 2] = _strlen(i28) | 0;
   }
   if (HEAP32[i15 >> 2] | 0) i7 = 47; else if (HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) if (HEAP32[101476 + (HEAP32[i11 >> 2] << 2) >> 2] | 0) HEAP32[i18 >> 2] = 101476 + (HEAP32[i11 >> 2] << 2); else i7 = 47; else i7 = 47;
   if ((i7 | 0) == 47) {
    i7 = 0;
    HEAP32[i18 >> 2] = 101068 + (HEAP32[i11 >> 2] << 2);
   }
   L65 : while (1) {
    i30 = HEAP32[HEAP32[i18 >> 2] >> 2] | 0;
    HEAP32[i17 >> 2] = i30;
    if (!i30) break;
    do if (HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0) {
     if (!(HEAP32[i24 >> 2] | 0)) if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[i23 >> 2] | 0)) break;
     if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 20 >> 2] | 0) == (HEAP32[i25 >> 2] | 0)) if (!(_strncmp(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i25 >> 2] | 0) | 0)) {
      i30 = HEAPU8[HEAP32[i14 >> 2] >> 0] | 0;
      if (HEAP32[i15 >> 2] | 0) {
       if (i30 | 0) if (!(HEAP32[HEAP32[i17 >> 2] >> 2] | 0)) {
        i7 = 58;
        break L65;
       }
       _au_remove_pat(HEAP32[i17 >> 2] | 0);
       break;
      } else {
       i6 = HEAP32[i17 >> 2] | 0;
       if (!i30) {
        _show_autocmd(i6, HEAP32[i11 >> 2] | 0);
        break;
       } else if (!(HEAP32[i6 >> 2] | 0)) break L65; else break;
      }
     }
    } while (0);
    HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
   }
   if ((i7 | 0) == 58) {
    i7 = 0;
    _au_remove_cmds(HEAP32[i17 >> 2] | 0);
   }
   if (HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) {
    do if (!(HEAP32[i17 >> 2] | 0)) {
     if (HEAP32[i26 >> 2] | 0) {
      if (!(HEAP32[i27 >> 2] | 0)) {
       i7 = 69;
       break L22;
      }
      if (!(_buflist_findnr(HEAP32[i27 >> 2] | 0) | 0)) {
       i7 = 69;
       break L22;
      }
     }
     HEAP32[i17 >> 2] = _alloc(32) | 0;
     if (!(HEAP32[i17 >> 2] | 0)) {
      i7 = 71;
      break L22;
     }
     i6 = _vim_strnsave(HEAP32[i12 >> 2] | 0, HEAP32[i25 >> 2] | 0) | 0;
     HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] = i6;
     HEAP32[(HEAP32[i17 >> 2] | 0) + 20 >> 2] = HEAP32[i25 >> 2];
     if (!(HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0)) {
      i7 = 73;
      break L22;
     }
     if (HEAP32[i26 >> 2] | 0) {
      HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] = HEAP32[i27 >> 2];
      HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] = 0;
     } else {
      HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] = 0;
      HEAP32[i29 >> 2] = _file_pat_to_reg_pat(HEAP32[i12 >> 2] | 0, HEAP32[i22 >> 2] | 0, (HEAP32[i17 >> 2] | 0) + 28 | 0, 1) | 0;
      if (HEAP32[i29 >> 2] | 0) {
       i6 = _vim_regcomp(HEAP32[i29 >> 2] | 0, 1) | 0;
       HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] = i6;
      }
      _vim_free(HEAP32[i29 >> 2] | 0);
      if (!(HEAP32[i29 >> 2] | 0)) {
       i7 = 80;
       break L22;
      }
      if (!(HEAP32[(HEAP32[i17 >> 2] | 0) + 8 >> 2] | 0)) {
       i7 = 80;
       break L22;
      }
     }
     HEAP32[(HEAP32[i17 >> 2] | 0) + 12 >> 2] = 0;
     HEAP32[HEAP32[i18 >> 2] >> 2] = HEAP32[i17 >> 2];
     HEAP32[101476 + (HEAP32[i11 >> 2] << 2) >> 2] = HEAP32[i17 >> 2];
     HEAP32[HEAP32[i17 >> 2] >> 2] = 0;
     if ((HEAP32[i16 >> 2] | 0) == -3) {
      HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] = HEAP32[2732];
      break;
     } else {
      HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] = HEAP32[i16 >> 2];
      break;
     }
    } while (0);
    HEAP32[i20 >> 2] = (HEAP32[i17 >> 2] | 0) + 12;
    while (1) {
     i6 = HEAP32[HEAP32[i20 >> 2] >> 2] | 0;
     HEAP32[i19 >> 2] = i6;
     if (!i6) break;
     HEAP32[i20 >> 2] = (HEAP32[i19 >> 2] | 0) + 8;
    }
    HEAP32[i19 >> 2] = _alloc(12) | 0;
    if (!(HEAP32[i19 >> 2] | 0)) {
     i7 = 88;
     break;
    }
    i6 = _vim_strsave(HEAP32[i14 >> 2] | 0) | 0;
    HEAP32[HEAP32[i19 >> 2] >> 2] = i6;
    i31 = HEAP32[i19 >> 2] | 0;
    if (!(HEAP32[HEAP32[i19 >> 2] >> 2] | 0)) {
     i7 = 90;
     break;
    }
    HEAP32[i31 + 8 >> 2] = 0;
    HEAP32[HEAP32[i20 >> 2] >> 2] = HEAP32[i19 >> 2];
    HEAP8[(HEAP32[i19 >> 2] | 0) + 4 >> 0] = HEAP32[i13 >> 2];
   }
  }
  i6 = HEAP32[i22 >> 2] | 0;
  HEAP32[i12 >> 2] = (HEAPU8[HEAP32[i22 >> 2] >> 0] | 0) == 44 ? i6 + 1 | 0 : i6;
 }
 if ((i7 | 0) == 69) {
  _emsgn(56041, HEAP32[i27 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = 0;
  i32 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i8;
  return i32 | 0;
 } else if ((i7 | 0) == 71) {
  HEAP32[i10 >> 2] = 0;
  i32 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i8;
  return i32 | 0;
 } else if ((i7 | 0) == 73) {
  _vim_free(HEAP32[i17 >> 2] | 0);
  HEAP32[i10 >> 2] = 0;
  i32 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i8;
  return i32 | 0;
 } else if ((i7 | 0) == 80) {
  _vim_free(HEAP32[(HEAP32[i17 >> 2] | 0) + 4 >> 2] | 0);
  _vim_free(HEAP32[i17 >> 2] | 0);
  HEAP32[i10 >> 2] = 0;
  i32 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i8;
  return i32 | 0;
 } else if ((i7 | 0) == 88) {
  HEAP32[i10 >> 2] = 0;
  i32 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i8;
  return i32 | 0;
 } else if ((i7 | 0) == 90) {
  _vim_free(i31);
  HEAP32[i10 >> 2] = 0;
  i32 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i8;
  return i32 | 0;
 } else if ((i7 | 0) == 93) {
  _au_cleanup();
  HEAP32[i10 >> 2] = 1;
  i32 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i8;
  return i32 | 0;
 }
 return 0;
}

function _nfa_regpiece() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i3 = i2 + 112 | 0;
 i4 = i2 + 108 | 0;
 i5 = i2 + 104 | 0;
 i6 = i2 + 100 | 0;
 i7 = i2 + 96 | 0;
 i8 = i2 + 92 | 0;
 i9 = i2 + 88 | 0;
 i10 = i2 + 52 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 12 | 0;
 i13 = i2 + 8 | 0;
 i14 = i2 + 4 | 0;
 i15 = i2;
 HEAP32[i9 >> 2] = 1;
 _save_parse_state(i10);
 HEAP32[i14 >> 2] = ((HEAP32[26382] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0;
 HEAP32[i6 >> 2] = _nfa_regatom() | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i16 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i16 | 0;
 }
 HEAP32[i5 >> 2] = _peekchr() | 0;
 if (!(_re_multi_type(HEAP32[i5 >> 2] | 0) | 0)) {
  HEAP32[i3 >> 2] = 1;
  i16 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i16 | 0;
 }
 _skipchr();
 L9 : do switch (HEAP32[i5 >> 2] | 0) {
 case -214:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   i6 = HEAP32[26382] | 0;
   HEAP32[26382] = i6 + 4;
   HEAP32[i6 >> 2] = -1012;
   break;
  }
 case -213:
  {
   _restore_parse_state(i10);
   HEAP32[26398] = -1;
   if (!(_nfa_regatom() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   i6 = HEAP32[26382] | 0;
   HEAP32[26382] = i6 + 4;
   HEAP32[i6 >> 2] = -1012;
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   i6 = HEAP32[26382] | 0;
   HEAP32[26382] = i6 + 4;
   HEAP32[i6 >> 2] = -1014;
   _skipchr();
   break;
  }
 case -192:
  {
   HEAP32[i12 >> 2] = _getdecchrs() | 0;
   HEAP32[i5 >> 2] = _no_Magic(_getchr() | 0) | 0;
   HEAP32[i4 >> 2] = 0;
   L32 : do switch (HEAP32[i5 >> 2] | 0) {
   case 61:
    {
     HEAP32[i4 >> 2] = -981;
     break;
    }
   case 33:
    {
     HEAP32[i4 >> 2] = -980;
     break;
    }
   case 60:
    {
     HEAP32[i5 >> 2] = _no_Magic(_getchr() | 0) | 0;
     if ((HEAP32[i5 >> 2] | 0) == 61) {
      HEAP32[i4 >> 2] = -979;
      break L32;
     }
     if ((HEAP32[i5 >> 2] | 0) == 33) HEAP32[i4 >> 2] = -978;
     break;
    }
   case 62:
    {
     HEAP32[i4 >> 2] = -977;
     break;
    }
   default:
    {}
   } while (0);
   if (!(HEAP32[i4 >> 2] | 0)) {
    _emsgn(73325, HEAP32[i5 >> 2] | 0) | 0;
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   i6 = HEAP32[i4 >> 2] | 0;
   i17 = HEAP32[26382] | 0;
   HEAP32[26382] = i17 + 4;
   HEAP32[i17 >> 2] = i6;
   if ((HEAP32[i4 >> 2] | 0) == -979 | (HEAP32[i4 >> 2] | 0) == -978) {
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i16 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i16 | 0;
    }
    i6 = HEAP32[i12 >> 2] | 0;
    i17 = HEAP32[26382] | 0;
    HEAP32[26382] = i17 + 4;
    HEAP32[i17 >> 2] = i6;
   }
   break;
  }
 case -195:
 case -193:
  {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   i6 = HEAP32[26382] | 0;
   HEAP32[26382] = i6 + 4;
   HEAP32[i6 >> 2] = -1010;
   break;
  }
 case -133:
  {
   HEAP32[i9 >> 2] = 1;
   HEAP32[i12 >> 2] = _peekchr() | 0;
   if ((HEAP32[i12 >> 2] | 0) == 45 | (HEAP32[i12 >> 2] | 0) == -211) {
    _skipchr();
    HEAP32[i9 >> 2] = 0;
   }
   if (!(_read_limits(i7, i8) | 0)) {
    _emsg(73361) | 0;
    HEAP32[26719] = 1;
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   if ((HEAP32[i7 >> 2] | 0) == 0 & (HEAP32[i8 >> 2] | 0) == 2147418112) {
    i6 = (HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0;
    if (HEAP32[i9 >> 2] | 0) {
     if (i6) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i16 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i16 | 0;
     }
     i17 = HEAP32[26382] | 0;
     HEAP32[26382] = i17 + 4;
     HEAP32[i17 >> 2] = -1012;
     break L9;
    } else {
     if (i6) if (!(_realloc_post_list() | 0)) {
      HEAP32[i3 >> 2] = 0;
      i16 = HEAP32[i3 >> 2] | 0;
      STACKTOP = i2;
      return i16 | 0;
     }
     i6 = HEAP32[26382] | 0;
     HEAP32[26382] = i6 + 4;
     HEAP32[i6 >> 2] = -1011;
     break L9;
    }
   }
   if (!(HEAP32[i8 >> 2] | 0)) {
    HEAP32[26382] = (HEAP32[26384] | 0) + (HEAP32[i14 >> 2] << 2);
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     HEAP32[i3 >> 2] = 0;
     i16 = HEAP32[i3 >> 2] | 0;
     STACKTOP = i2;
     return i16 | 0;
    }
    i6 = HEAP32[26382] | 0;
    HEAP32[26382] = i6 + 4;
    HEAP32[i6 >> 2] = -1022;
    HEAP32[i3 >> 2] = 1;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   }
   do if (HEAP32[26381] & 8 | 0) {
    if ((HEAP32[i8 >> 2] | 0) <= 500) if ((HEAP32[i8 >> 2] | 0) <= ((HEAP32[i7 >> 2] | 0) + 200 | 0)) break;
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   } while (0);
   HEAP32[26382] = (HEAP32[26384] | 0) + (HEAP32[i14 >> 2] << 2);
   _save_parse_state(i11);
   HEAP32[i15 >> 2] = (HEAP32[i9 >> 2] | 0) == 1 ? -1010 : -1009;
   HEAP32[i4 >> 2] = 0;
   L103 : while (1) {
    if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
     i1 = 90;
     break;
    }
    _restore_parse_state(i10);
    HEAP32[i13 >> 2] = ((HEAP32[26382] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0;
    if (!(_nfa_regatom() | 0)) {
     i1 = 67;
     break;
    }
    do if (((HEAP32[i4 >> 2] | 0) + 1 | 0) > (HEAP32[i7 >> 2] | 0)) {
     if ((HEAP32[i8 >> 2] | 0) != 2147418112) {
      if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
       i1 = 81;
       break L103;
      }
      i6 = HEAP32[i15 >> 2] | 0;
      i17 = HEAP32[26382] | 0;
      HEAP32[26382] = i17 + 4;
      HEAP32[i17 >> 2] = i6;
      break;
     }
     i6 = (HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0;
     if (HEAP32[i9 >> 2] | 0) {
      if (i6) if (!(_realloc_post_list() | 0)) {
       i1 = 73;
       break L103;
      }
      i17 = HEAP32[26382] | 0;
      HEAP32[26382] = i17 + 4;
      HEAP32[i17 >> 2] = -1012;
      break;
     } else {
      if (i6) if (!(_realloc_post_list() | 0)) {
       i1 = 77;
       break L103;
      }
      i6 = HEAP32[26382] | 0;
      HEAP32[26382] = i6 + 4;
      HEAP32[i6 >> 2] = -1011;
      break;
     }
    } while (0);
    if ((HEAP32[i13 >> 2] | 0) != (HEAP32[i14 >> 2] | 0)) {
     if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
      i1 = 86;
      break;
     }
     i6 = HEAP32[26382] | 0;
     HEAP32[26382] = i6 + 4;
     HEAP32[i6 >> 2] = -1014;
    }
    if ((HEAP32[i8 >> 2] | 0) == 2147418112 ? ((HEAP32[i4 >> 2] | 0) + 1 | 0) > (HEAP32[i7 >> 2] | 0) : 0) {
     i1 = 90;
     break;
    }
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   }
   if ((i1 | 0) == 67) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   } else if ((i1 | 0) == 73) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   } else if ((i1 | 0) == 77) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   } else if ((i1 | 0) == 81) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   } else if ((i1 | 0) == 86) {
    HEAP32[i3 >> 2] = 0;
    i16 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i16 | 0;
   } else if ((i1 | 0) == 90) {
    _restore_parse_state(i11);
    HEAP32[26398] = -1;
    break L9;
   }
   break;
  }
 default:
  {}
 } while (0);
 if (_re_multi_type(_peekchr() | 0) | 0) {
  _emsg(73412) | 0;
  HEAP32[26719] = 1;
  HEAP32[i3 >> 2] = 0;
  i16 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i16 | 0;
 } else {
  HEAP32[i3 >> 2] = 1;
  i16 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i16 | 0;
 }
 return 0;
}

function _makemap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4;
 i10 = i4 + 72 | 0;
 i11 = i4 + 68 | 0;
 i12 = i4 + 64 | 0;
 i13 = i4 + 60 | 0;
 i14 = i4 + 78 | 0;
 i15 = i4 + 77 | 0;
 i16 = i4 + 76 | 0;
 i17 = i4 + 56 | 0;
 i18 = i4 + 52 | 0;
 i19 = i4 + 48 | 0;
 i20 = i4 + 44 | 0;
 i21 = i4 + 40 | 0;
 i22 = i4 + 36 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i21 >> 2] = 0;
 _validate_maphash();
 HEAP32[i19 >> 2] = 0;
 L1 : while (1) {
  if ((HEAP32[i19 >> 2] | 0) >= 2) {
   i3 = 93;
   break;
  }
  HEAP32[i20 >> 2] = 0;
  while (1) {
   if ((HEAP32[i20 >> 2] | 0) >= 256) break;
   i2 = HEAP32[i20 >> 2] | 0;
   if (HEAP32[i19 >> 2] | 0) {
    if ((i2 | 0) > 0) break;
    HEAP32[i13 >> 2] = HEAP32[25899];
   } else HEAP32[i13 >> 2] = HEAP32[102556 + (i2 << 2) >> 2];
   while (1) {
    if (!(HEAP32[i13 >> 2] | 0)) break;
    if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2] | 0) != -2) {
     HEAP32[i17 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2];
     while (1) {
      if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) break;
      if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) == 128) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0) == 253) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 2 >> 0] | 0) == 82) break;
      HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
     }
     if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) {
      HEAP8[i14 >> 0] = 0;
      HEAP8[i15 >> 0] = 0;
      HEAP8[i16 >> 0] = 0;
      if (HEAP32[i19 >> 2] | 0) HEAP32[i18 >> 2] = 56357; else HEAP32[i18 >> 2] = 56362;
      do switch (HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] | 0) {
      case 4103:
       break;
      case 1:
       {
        HEAP8[i14 >> 0] = 110;
        break;
       }
      case 2:
       {
        HEAP8[i14 >> 0] = 120;
        break;
       }
      case 4096:
       {
        HEAP8[i14 >> 0] = 115;
        break;
       }
      case 4:
       {
        HEAP8[i14 >> 0] = 111;
        break;
       }
      case 3:
       {
        HEAP8[i14 >> 0] = 110;
        HEAP8[i15 >> 0] = 120;
        break;
       }
      case 4097:
       {
        HEAP8[i14 >> 0] = 110;
        HEAP8[i15 >> 0] = 115;
        break;
       }
      case 5:
       {
        HEAP8[i14 >> 0] = 110;
        HEAP8[i15 >> 0] = 111;
        break;
       }
      case 4098:
       {
        HEAP8[i14 >> 0] = 118;
        break;
       }
      case 6:
       {
        HEAP8[i14 >> 0] = 120;
        HEAP8[i15 >> 0] = 111;
        break;
       }
      case 4100:
       {
        HEAP8[i14 >> 0] = 115;
        HEAP8[i15 >> 0] = 111;
        break;
       }
      case 4099:
       {
        HEAP8[i14 >> 0] = 110;
        HEAP8[i15 >> 0] = 118;
        break;
       }
      case 7:
       {
        HEAP8[i14 >> 0] = 110;
        HEAP8[i15 >> 0] = 120;
        HEAP8[i16 >> 0] = 111;
        break;
       }
      case 4101:
       {
        HEAP8[i14 >> 0] = 110;
        HEAP8[i15 >> 0] = 115;
        HEAP8[i16 >> 0] = 111;
        break;
       }
      case 4102:
       {
        HEAP8[i14 >> 0] = 118;
        HEAP8[i15 >> 0] = 111;
        break;
       }
      case 24:
       {
        if (!(HEAP32[i19 >> 2] | 0)) HEAP32[i18 >> 2] = 56366;
        break;
       }
      case 8:
       {
        HEAP8[i14 >> 0] = 99;
        break;
       }
      case 16:
       {
        HEAP8[i14 >> 0] = 105;
        break;
       }
      case 32:
       {
        HEAP8[i14 >> 0] = 108;
        break;
       }
      case 8192:
       {
        HEAP8[i14 >> 0] = 116;
        break;
       }
      default:
       {
        i3 = 43;
        break L1;
       }
      } while (0);
      do {
       if (!(HEAP32[i21 >> 2] | 0)) {
        L56 : do if (!(HEAPU8[HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] >> 0] | 0)) HEAP32[i21 >> 2] = 1; else {
         HEAP32[i22 >> 2] = 0;
         while (1) {
          if ((HEAP32[i22 >> 2] | 0) >= 2) break L56;
          i2 = HEAP32[i13 >> 2] | 0;
          if (HEAP32[i22 >> 2] | 0) i23 = HEAP32[i2 + 8 >> 2] | 0; else i23 = HEAP32[i2 + 4 >> 2] | 0;
          HEAP32[i17 >> 2] = i23;
          while (1) {
           if (!(HEAP8[HEAP32[i17 >> 2] >> 0] | 0)) break;
           if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) == 128) i3 = 57; else if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) == 10) i3 = 57;
           if ((i3 | 0) == 57) {
            i3 = 0;
            HEAP32[i21 >> 2] = 1;
           }
           HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
          }
          HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
         }
        } while (0);
        if (HEAP32[i21 >> 2] | 0) {
         if ((_fprintf(HEAP32[i11 >> 2] | 0, 56399, i9) | 0) < 0) {
          i3 = 65;
          break L1;
         }
         if ((_put_eol(HEAP32[i11 >> 2] | 0) | 0) < 0) {
          i3 = 65;
          break L1;
         }
         if ((_fprintf(HEAP32[i11 >> 2] | 0, 56419, i8) | 0) < 0) {
          i3 = 65;
          break L1;
         }
         if ((_put_eol(HEAP32[i11 >> 2] | 0) | 0) < 0) {
          i3 = 65;
          break L1;
         }
        }
       }
       if (HEAPU8[i14 >> 0] | 0) if ((_putc(HEAPU8[i14 >> 0] | 0, HEAP32[i11 >> 2] | 0) | 0) < 0) {
        i3 = 68;
        break L1;
       }
       if (HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2] | 0) if ((_fprintf(HEAP32[i11 >> 2] | 0, 56431, i7) | 0) < 0) {
        i3 = 71;
        break L1;
       }
       if ((_fputs(HEAP32[i18 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) < 0) {
        i3 = 73;
        break L1;
       }
       if (HEAP32[i12 >> 2] | 0) if ((_fputs(56436, HEAP32[i11 >> 2] | 0) | 0) < 0) {
        i3 = 76;
        break L1;
       }
       if (HEAP8[(HEAP32[i13 >> 2] | 0) + 29 >> 0] | 0) if ((_fputs(56446, HEAP32[i11 >> 2] | 0) | 0) < 0) {
        i3 = 79;
        break L1;
       }
       if (HEAP8[(HEAP32[i13 >> 2] | 0) + 28 >> 0] | 0) if ((_fputs(56456, HEAP32[i11 >> 2] | 0) | 0) < 0) {
        i3 = 82;
        break L1;
       }
       if ((_putc(32, HEAP32[i11 >> 2] | 0) | 0) < 0) {
        i3 = 88;
        break L1;
       }
       if (!(_put_escstr(HEAP32[i11 >> 2] | 0, HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0, 0) | 0)) {
        i3 = 88;
        break L1;
       }
       if ((_putc(32, HEAP32[i11 >> 2] | 0) | 0) < 0) {
        i3 = 88;
        break L1;
       }
       if (!(_put_escstr(HEAP32[i11 >> 2] | 0, HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] | 0, 1) | 0)) {
        i3 = 88;
        break L1;
       }
       if ((_put_eol(HEAP32[i11 >> 2] | 0) | 0) < 0) {
        i3 = 88;
        break L1;
       }
       HEAP8[i14 >> 0] = HEAP8[i15 >> 0] | 0;
       HEAP8[i15 >> 0] = HEAP8[i16 >> 0] | 0;
       HEAP8[i16 >> 0] = 0;
      } while ((HEAPU8[i14 >> 0] | 0) != 0);
     }
    }
    HEAP32[i13 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
   }
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 }
 switch (i3 | 0) {
 case 43:
  {
   _iemsg(56371);
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 65:
  {
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 68:
  {
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 71:
  {
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 73:
  {
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 76:
  {
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 79:
  {
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 82:
  {
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 88:
  {
   HEAP32[i10 >> 2] = 0;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 case 93:
  {
   do if (HEAP32[i21 >> 2] | 0) {
    if ((_fprintf(HEAP32[i11 >> 2] | 0, 56466, i6) | 0) >= 0) if ((_put_eol(HEAP32[i11 >> 2] | 0) | 0) >= 0) if ((_fprintf(HEAP32[i11 >> 2] | 0, 56486, i5) | 0) >= 0) if ((_put_eol(HEAP32[i11 >> 2] | 0) | 0) >= 0) break;
    HEAP32[i10 >> 2] = 0;
    i24 = HEAP32[i10 >> 2] | 0;
    STACKTOP = i4;
    return i24 | 0;
   } while (0);
   HEAP32[i10 >> 2] = 1;
   i24 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i4;
   return i24 | 0;
  }
 }
 return 0;
}

function _jump_to_mouse(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 44 | 0;
 i7 = i5 + 40 | 0;
 i8 = i5 + 36 | 0;
 i9 = i5 + 32 | 0;
 i10 = i5 + 28 | 0;
 i11 = i5 + 24 | 0;
 i12 = i5 + 16 | 0;
 i13 = i5 + 12 | 0;
 i14 = i5 + 8 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i15 >> 2] = HEAP32[27095];
 HEAP32[i16 >> 2] = HEAP32[27096];
 HEAP32[26754] = 0;
 HEAP32[26755] = 0;
 if (HEAP32[i7 >> 2] & 32 | 0) {
  if (!((HEAP32[26617] | 0) == 0 | (HEAP32[26618] | 0) != 0)) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -6;
  HEAP32[26617] = 0;
  HEAP32[26618] = 0;
 }
 if (HEAP32[i7 >> 2] & 4 | 0) if ((HEAP32[8293] | 0) == (HEAP32[27095] | 0)) {
  if ((HEAP32[8294] | 0) != (HEAP32[27096] | 0)) i4 = 15;
 } else i4 = 15; else i4 = 15;
 if ((i4 | 0) == 15) {
  HEAP32[8293] = HEAP32[27095];
  HEAP32[8294] = HEAP32[27096];
  if (!(HEAP32[i7 >> 2] & 8)) {
   HEAP32[i11 >> 2] = HEAP32[26881];
   i3 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   do if (HEAP32[i7 >> 2] & 1 | 0) {
    if ((HEAP32[26619] | 0) != 0 & (HEAP32[i9 >> 2] | 0) == 0) {
     if (HEAP32[26617] | 0) {
      i3 = HEAP32[26617] | 0;
      HEAP32[i13 >> 2] = (HEAP32[i15 >> 2] | 0) - (HEAP32[i3 + 84 >> 2] | 0) - (HEAP32[i3 + 88 >> 2] | 0) + 1 - (HEAP32[26619] | 0);
      _win_drag_status_line(HEAP32[26617] | 0, HEAP32[i13 >> 2] | 0);
      HEAP32[26618] = HEAP32[26618] | HEAP32[i13 >> 2];
     }
     HEAP32[i6 >> 2] = 2;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    }
    if ((HEAP32[26620] | 0) != 0 & (HEAP32[i9 >> 2] | 0) == 0) {
     if (HEAP32[26617] | 0) {
      i3 = HEAP32[26617] | 0;
      HEAP32[i13 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i3 + 96 >> 2] | 0) - (HEAP32[i3 + 100 >> 2] | 0) + 1 - (HEAP32[26620] | 0);
      _win_drag_vsep_line(HEAP32[26617] | 0, HEAP32[i13 >> 2] | 0);
      HEAP32[26618] = HEAP32[26618] | HEAP32[i13 >> 2];
     }
     HEAP32[i6 >> 2] = 4;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    }
    if (HEAP32[i7 >> 2] & 16 | 0) {
     _end_visual_mode();
     _redraw_curbuf_later(20);
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 84 >> 2] | 0);
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 96 >> 2] | 0);
    if ((HEAP32[i15 >> 2] | 0) < 0) {
     HEAP32[i13 >> 2] = 0;
     HEAP32[i14 >> 2] = 1;
     while (1) {
      if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) <= 1) break;
      i3 = _plines((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) - 1 | 0) | 0;
      HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i3;
      if (!(HEAP32[i14 >> 2] | 0)) if ((HEAP32[i13 >> 2] | 0) > (0 - (HEAP32[i15 >> 2] | 0) | 0)) break;
      HEAP32[i14 >> 2] = 0;
      i3 = (HEAP32[26881] | 0) + 68 | 0;
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
     }
     i3 = (HEAP32[26881] | 0) + 108 | 0;
     HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -114;
     _redraw_later(10);
     HEAP32[i15 >> 2] = 0;
     break;
    }
    if ((HEAP32[i15 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) {
     if (!((HEAP32[i15 >> 2] | 0) == 0 & (HEAP32[26756] | 0) > 0)) break;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[26881] | 0) + 4 >> 2] >> 2] | 0)) break;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) break;
     i3 = (HEAP32[26881] | 0) + 108 | 0;
     HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -129;
     break;
    }
    HEAP32[i13 >> 2] = 0;
    HEAP32[i14 >> 2] = 1;
    while (1) {
     if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) break;
     i3 = _plines(HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) | 0;
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i3;
     if (!(HEAP32[i14 >> 2] | 0)) if ((HEAP32[i13 >> 2] | 0) > ((HEAP32[i15 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) + 1 | 0)) break;
     HEAP32[i14 >> 2] = 0;
     i3 = (HEAP32[26881] | 0) + 68 | 0;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
    _redraw_later(10);
    i3 = (HEAP32[26881] | 0) + 108 | 0;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -114;
    HEAP32[i15 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) - 1;
   } else {
    if ((HEAP32[i15 >> 2] | 0) < 0 | (HEAP32[i16 >> 2] | 0) < 0) {
     HEAP32[i6 >> 2] = 0;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    }
    HEAP32[i10 >> 2] = _mouse_find_win(i15, i16) | 0;
    if (!(HEAP32[i10 >> 2] | 0)) {
     HEAP32[i6 >> 2] = 0;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    }
    HEAP32[26617] = 0;
    if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 88 >> 2] | 0)) {
     HEAP32[26619] = (HEAP32[i15 >> 2] | 0) - (HEAP32[(HEAP32[i10 >> 2] | 0) + 88 >> 2] | 0) + 1;
     HEAP32[26617] = HEAP32[i10 >> 2];
    } else HEAP32[26619] = 0;
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0)) {
     HEAP32[26620] = (HEAP32[i16 >> 2] | 0) - (HEAP32[(HEAP32[i10 >> 2] | 0) + 100 >> 2] | 0) + 1;
     HEAP32[26617] = HEAP32[i10 >> 2];
    } else HEAP32[26620] = 0;
    do if ((HEAP32[26619] | 0) != 0 & (HEAP32[26620] | 0) != 0) if (_stl_connected(HEAP32[i10 >> 2] | 0) | 0) {
     HEAP32[26620] = 0;
     break;
    } else {
     HEAP32[26619] = 0;
     break;
    } while (0);
    do if (HEAP32[26788] | 0) {
     if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0)) {
      if ((HEAP32[26619] | 0) != 0 | (HEAP32[26620] | 0) != 0) break;
      if (!(HEAP32[i7 >> 2] & 16)) break;
     }
     _end_visual_mode();
     _redraw_curbuf_later(20);
    } while (0);
    if (!(HEAP32[26617] | 0)) i4 = 38; else if (HEAP32[i7 >> 2] & 32 | 0) i4 = 38;
    if ((i4 | 0) == 38) _win_enter(HEAP32[i10 >> 2] | 0, 1);
    if ((HEAP32[26881] | 0) != (HEAP32[i11 >> 2] | 0)) _set_mouse_topline(HEAP32[26881] | 0);
    if (HEAP32[26619] | 0) if ((HEAP32[26881] | 0) == (HEAP32[i11 >> 2] | 0)) {
     HEAP32[i6 >> 2] = 2;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    } else {
     HEAP32[i6 >> 2] = 258;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    }
    i3 = HEAP32[26881] | 0;
    if (!(HEAP32[26620] | 0)) {
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i3 + 68 >> 2];
     break;
    }
    if ((i3 | 0) == (HEAP32[i11 >> 2] | 0)) {
     HEAP32[i6 >> 2] = 4;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    } else {
     HEAP32[i6 >> 2] = 260;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    }
   } while (0);
   if (_mouse_comp_pos(HEAP32[26881] | 0, i15, i16, (HEAP32[26881] | 0) + 24 | 0) | 0) HEAP32[26754] = 1;
   if (!((HEAP32[i7 >> 2] & 2 | 0) == 0 | (HEAP32[26788] | 0) != 0)) {
    _check_visual_highlight();
    HEAP32[27117] = HEAP32[i12 >> 2];
    HEAP32[27118] = HEAP32[i12 + 4 >> 2];
    HEAP32[26788] = 1;
    HEAP32[27119] = 1;
    _may_start_select(111);
    _setmouse();
    if ((HEAP32[26988] | 0) != 0 & (HEAP32[26809] | 0) == 0) HEAP32[26699] = 1;
   }
   HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[i16 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 0;
   i15 = (_coladvance(HEAP32[i16 >> 2] | 0) | 0) == 0;
   i16 = (HEAP32[i8 >> 2] | 0) != 0;
   if (i15) {
    if (i16) HEAP32[HEAP32[i8 >> 2] >> 2] = 1;
    HEAP32[26755] = 1;
   } else if (i16) HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
   HEAP32[i13 >> 2] = 1;
   if ((HEAP32[26881] | 0) != (HEAP32[i11 >> 2] | 0)) i4 = 92; else if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) i4 = 92; else if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) != (HEAP32[i12 + 4 >> 2] | 0)) i4 = 92;
   if ((i4 | 0) == 92) HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 256;
   HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
   i17 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i17 | 0;
  }
 }
 if (HEAP32[26619] | 0) {
  HEAP32[i6 >> 2] = 2;
  i17 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i17 | 0;
 }
 if (HEAP32[26620] | 0) {
  HEAP32[i6 >> 2] = 4;
  i17 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i17 | 0;
 }
 if (HEAP32[i7 >> 2] & 16 | 0) {
  _end_visual_mode();
  _redraw_curbuf_later(20);
 }
 HEAP32[i6 >> 2] = 1;
 i17 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i17 | 0;
}

function _find_help_tags(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 28 | 0;
 i8 = i6 + 24 | 0;
 i9 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i11 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i12 >> 2] = HEAP32[26882];
 HEAP32[i13 >> 2] = 36;
 while (1) {
  i4 = (HEAP32[i13 >> 2] | 0) + -1 | 0;
  HEAP32[i13 >> 2] = i4;
  if ((i4 | 0) < 0) break;
  if (!(_strcmp(HEAP32[i7 >> 2] | 0, HEAP32[1040 + (HEAP32[i13 >> 2] << 2) >> 2] | 0) | 0)) {
   i5 = 4;
   break;
  }
 }
 if ((i5 | 0) == 4) _strcpy(HEAP32[i12 >> 2] | 0, HEAP32[1184 + (HEAP32[i13 >> 2] << 2) >> 2] | 0) | 0;
 L8 : do if ((HEAP32[i13 >> 2] | 0) < 0) {
  do if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 92) {
   if (HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) {
    if (HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) i5 = 10;
   } else i5 = 10;
   if ((i5 | 0) == 10) {
    if (!(_vim_strchr(43796, HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) | 0)) break;
    if (!(HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0)) break;
   }
   _strcpy(HEAP32[i12 >> 2] | 0, 43801) | 0;
   _strcpy((HEAP32[i12 >> 2] | 0) + 3 | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0;
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 3 >> 0] | 0) != 95) break L8;
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 4 >> 0] | 0) != 36) break L8;
   _strcpy((HEAP32[i12 >> 2] | 0) + 4 | 0, 78758) | 0;
   break L8;
  } while (0);
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 91) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == 58) i5 = 21; else if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == 43) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) == 43) i5 = 21; else i5 = 19; else i5 = 19; else i5 = 19;
  if ((i5 | 0) == 19) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 92) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == 123) i5 = 21;
  if ((i5 | 0) == 21) {
   i4 = HEAP32[i12 >> 2] | 0;
   HEAP32[i12 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = 92;
  }
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 40) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == 39) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
  L35 : while (1) {
   if (!(HEAP8[HEAP32[i11 >> 2] >> 0] | 0)) break;
   if (((HEAP32[i12 >> 2] | 0) - (HEAP32[26882] | 0) | 0) > 1015) break;
   switch (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) {
   case 124:
    {
     _strcpy(HEAP32[i12 >> 2] | 0, 43805) | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 3;
     break;
    }
   case 34:
    {
     _strcpy(HEAP32[i12 >> 2] | 0, 43809) | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 5;
     break;
    }
   case 42:
    {
     i4 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = 46;
     i5 = 34;
     break;
    }
   case 63:
    {
     i4 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = 46;
     break;
    }
   case 126:
   case 46:
   case 36:
    {
     i4 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = 92;
     i5 = 34;
     break;
    }
   default:
    i5 = 34;
   }
   L45 : do if ((i5 | 0) == 34) {
    i5 = 0;
    do if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) >= 32) {
     if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 94) if (HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) {
      if (((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) - 65 | 0) >>> 0 < 26) break;
      if (((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) - 97 | 0) >>> 0 < 26) break;
      if (_vim_strchr(43815, HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) | 0) break;
     }
     if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 94) {
      i4 = HEAP32[i12 >> 2] | 0;
      HEAP32[i12 >> 2] = i4 + 1;
      HEAP8[i4 >> 0] = 92;
     } else if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 92) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) != 92) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 47) if ((HEAP32[i11 >> 2] | 0) == ((HEAP32[i7 >> 2] | 0) + 1 | 0)) {
      i4 = HEAP32[i12 >> 2] | 0;
      HEAP32[i12 >> 2] = i4 + 1;
      HEAP8[i4 >> 0] = 92;
     }
     if (!(_strncasecmp(HEAP32[i11 >> 2] | 0, 43828, 7) | 0)) {
      _strcpy(HEAP32[i12 >> 2] | 0, 43836) | 0;
      HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 7;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 6;
     }
     i4 = HEAP8[HEAP32[i11 >> 2] >> 0] | 0;
     i3 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i3 + 1;
     HEAP8[i3 >> 0] = i4;
     if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 40) {
      if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) == 123) break L35;
      if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) == 91) break L35;
     }
     if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 39) if ((HEAP32[i11 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 39) break L35;
     if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) != 125) break L45;
     if ((HEAP32[i11 >> 2] | 0) >>> 0 <= (HEAP32[i7 >> 2] | 0) >>> 0) break L45;
     if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 123) break L35; else break L45;
    } while (0);
    if ((HEAP32[i12 >> 2] | 0) >>> 0 > (HEAP32[26882] | 0) >>> 0) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -1 >> 0] | 0) != 95) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -1 >> 0] | 0) != 92) {
     i4 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = 95;
    }
    _strcpy(HEAP32[i12 >> 2] | 0, 43822) | 0;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 5;
    i4 = HEAP32[i11 >> 2] | 0;
    if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) < 32) {
     i3 = (HEAPU8[i4 >> 0] | 0) + 64 & 255;
     i2 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i2 + 1;
     HEAP8[i2 >> 0] = i3;
     if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -1 >> 0] | 0) == 92) {
      i3 = HEAP32[i12 >> 2] | 0;
      HEAP32[i12 >> 2] = i3 + 1;
      HEAP8[i3 >> 0] = 92;
     }
    } else {
     i3 = i4 + 1 | 0;
     HEAP32[i11 >> 2] = i3;
     i4 = HEAP8[i3 >> 0] | 0;
     i3 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i3 + 1;
     HEAP8[i3 >> 0] = i4;
    }
    if (HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) != 95) {
     i4 = HEAP32[i12 >> 2] | 0;
     HEAP32[i12 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = 95;
    }
   } while (0);
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  HEAP8[HEAP32[i12 >> 2] >> 0] = 0;
  if ((HEAPU8[HEAP32[26882] >> 0] | 0) == 96) {
   if ((HEAP32[i12 >> 2] | 0) >>> 0 > ((HEAP32[26882] | 0) + 2 | 0) >>> 0) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -1 >> 0] | 0) == 96) {
    i4 = HEAP32[26882] | 0;
    i3 = i4 | 0;
    i2 = i4 + 1 | 0;
    _memmove(i3 | 0, i2 | 0, _strlen(HEAP32[26882] | 0) | 0) | 0;
    HEAP8[(HEAP32[i12 >> 2] | 0) + -2 >> 0] = 0;
    break;
   }
   if ((HEAP32[i12 >> 2] | 0) >>> 0 > ((HEAP32[26882] | 0) + 3 | 0) >>> 0) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -2 >> 0] | 0) == 96) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -1 >> 0] | 0) == 44) {
    i2 = HEAP32[26882] | 0;
    i3 = i2 | 0;
    i4 = i2 + 1 | 0;
    _memmove(i3 | 0, i4 | 0, _strlen(HEAP32[26882] | 0) | 0) | 0;
    HEAP8[(HEAP32[i12 >> 2] | 0) + -3 >> 0] = 0;
    break;
   }
   if ((HEAP32[i12 >> 2] | 0) >>> 0 > ((HEAP32[26882] | 0) + 4 | 0) >>> 0) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -3 >> 0] | 0) == 96) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -2 >> 0] | 0) == 92) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + -1 >> 0] | 0) == 46) {
    i4 = HEAP32[26882] | 0;
    i3 = i4 | 0;
    i2 = i4 + 1 | 0;
    _memmove(i3 | 0, i2 | 0, _strlen(HEAP32[26882] | 0) | 0) | 0;
    HEAP8[(HEAP32[i12 >> 2] | 0) + -4 >> 0] = 0;
   }
  }
 } while (0);
 HEAP32[HEAP32[i9 >> 2] >> 2] = 114072;
 HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
 HEAP32[i14 >> 2] = 39;
 if (HEAP32[i10 >> 2] | 0) HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 128;
 if ((_find_tags(HEAP32[26882] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0, 2147483647, 0) | 0) != 1) {
  STACKTOP = i6;
  return 1;
 }
 if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) <= 0) {
  STACKTOP = i6;
  return 1;
 }
 _qsort(HEAP32[HEAP32[i9 >> 2] >> 2] | 0, HEAP32[HEAP32[i8 >> 2] >> 2] | 0, 4, 4);
 while (1) {
  if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) <= 300) break;
  i14 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  i10 = HEAP32[i8 >> 2] | 0;
  i12 = (HEAP32[i10 >> 2] | 0) + -1 | 0;
  HEAP32[i10 >> 2] = i12;
  _vim_free(HEAP32[i14 + (i12 << 2) >> 2] | 0);
 }
 STACKTOP = i6;
 return 1;
}

function _parse_shape_opt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 56 | 0;
 i5 = i3 + 52 | 0;
 i6 = i3 + 48 | 0;
 i7 = i3 + 44 | 0;
 i8 = i3 + 40 | 0;
 i9 = i3 + 36 | 0;
 i10 = i3 + 32 | 0;
 i11 = i3 + 28 | 0;
 i12 = i3 + 24 | 0;
 i13 = i3 + 20 | 0;
 i14 = i3 + 16 | 0;
 i15 = i3 + 12 | 0;
 i16 = i3 + 8 | 0;
 i17 = i3 + 4 | 0;
 i18 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i18 >> 2] = 1;
 L1 : while (1) {
  if ((HEAP32[i18 >> 2] | 0) > 2) {
   i2 = 96;
   break;
  }
  HEAP32[i6 >> 2] = HEAP32[26925];
  while (1) {
   if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
   HEAP32[i7 >> 2] = _vim_strchr(HEAP32[i6 >> 2] | 0, 58) | 0;
   HEAP32[i8 >> 2] = _vim_strchr(HEAP32[i6 >> 2] | 0, 44) | 0;
   if (!(HEAP32[i7 >> 2] | 0)) {
    i2 = 8;
    break L1;
   }
   if (HEAP32[i8 >> 2] | 0) if ((HEAP32[i8 >> 2] | 0) >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    i2 = 8;
    break L1;
   }
   if ((HEAP32[i7 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) {
    i2 = 10;
    break L1;
   }
   HEAP32[i13 >> 2] = -1;
   while (1) {
    if (!((HEAP32[i6 >> 2] | 0) >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0 ? 1 : (HEAP32[i13 >> 2] | 0) >= 0)) break;
    if ((HEAP32[i13 >> 2] | 0) < 0) {
     if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 45) i2 = 16; else if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 58) i2 = 16; else HEAP32[i14 >> 2] = 2;
     if ((i2 | 0) == 16) {
      i2 = 0;
      HEAP32[i14 >> 2] = 1;
     }
     if ((HEAP32[i14 >> 2] | 0) == 1) {
      if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) < 65) i2 = 21; else if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) > 90) i2 = 21; else i19 = (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) + 32 | 0;
      if ((i2 | 0) == 21) {
       i2 = 0;
       i19 = HEAPU8[HEAP32[i6 >> 2] >> 0] | 0;
      }
      if ((i19 | 0) == 97) HEAP32[i13 >> 2] = 16; else i2 = 25;
     } else i2 = 25;
     if ((i2 | 0) == 25) {
      i2 = 0;
      HEAP32[i12 >> 2] = 0;
      while (1) {
       if ((HEAP32[i12 >> 2] | 0) >= 17) break;
       if (!(_strncasecmp(HEAP32[i6 >> 2] | 0, HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 32 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0)) break;
       HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
      }
      if ((HEAP32[i12 >> 2] | 0) == 17) {
       i2 = 31;
       break L1;
      }
      if (!(HEAP8[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 36 >> 0] & HEAP32[i5 >> 2])) {
       i2 = 31;
       break L1;
      }
      if ((HEAP32[i14 >> 2] | 0) == 2) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 118) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 101) HEAP32[i17 >> 2] = 1;
     }
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + 1);
    }
    if ((HEAP32[i13 >> 2] | 0) >= 0) {
     i1 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i1 + -1;
     HEAP32[i12 >> 2] = i1;
    } else if ((HEAP32[i18 >> 2] | 0) == 2) {
     HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) >> 2] = 0;
     HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 12 >> 2] = 700;
     HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 16 >> 2] = 400;
     HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 20 >> 2] = 250;
    }
    HEAP32[i10 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    while (1) {
     if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
     if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 44) break;
     HEAP32[i15 >> 2] = HEAPU8[HEAP32[i10 >> 2] >> 0];
     HEAP32[i14 >> 2] = 0;
     do if (!(_strncasecmp(HEAP32[i10 >> 2] | 0, 64166, 3) | 0)) HEAP32[i14 >> 2] = 3; else {
      if (!(_strncasecmp(HEAP32[i10 >> 2] | 0, 64170, 3) | 0)) {
       HEAP32[i14 >> 2] = 3;
       break;
      }
      if (!(_strncasecmp(HEAP32[i10 >> 2] | 0, 61550, 9) | 0)) {
       HEAP32[i14 >> 2] = 9;
       break;
      }
      if (!(_strncasecmp(HEAP32[i10 >> 2] | 0, 61560, 7) | 0)) {
       HEAP32[i14 >> 2] = 7;
       break;
      }
      if (!(_strncasecmp(HEAP32[i10 >> 2] | 0, 61568, 8) | 0)) HEAP32[i14 >> 2] = 8;
     } while (0);
     do if (HEAP32[i14 >> 2] | 0) {
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
      if (((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) {
       i2 = 56;
       break L1;
      }
      HEAP32[i16 >> 2] = _getdigits(i10) | 0;
      if ((HEAP32[i14 >> 2] | 0) == 3) {
       if (!(HEAP32[i16 >> 2] | 0)) {
        i2 = 59;
        break L1;
       }
       if ((HEAP32[i18 >> 2] | 0) != 2) break;
       i1 = 10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) | 0;
       if ((((HEAP32[i15 >> 2] | 0) < 65 | (HEAP32[i15 >> 2] | 0) > 90 ? HEAP32[i15 >> 2] | 0 : (HEAP32[i15 >> 2] | 0) + 32 | 0) | 0) == 118) HEAP32[i1 >> 2] = 2; else HEAP32[i1 >> 2] = 1;
       HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 8 >> 2] = HEAP32[i16 >> 2];
       break;
      } else {
       if ((HEAP32[i18 >> 2] | 0) != 2) break;
       if ((HEAP32[i14 >> 2] | 0) == 9) {
        HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 12 >> 2] = HEAP32[i16 >> 2];
        break;
       }
       i1 = HEAP32[i16 >> 2] | 0;
       i20 = 10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) | 0;
       if ((HEAP32[i14 >> 2] | 0) == 7) {
        HEAP32[i20 + 16 >> 2] = i1;
        break;
       } else {
        HEAP32[i20 + 20 >> 2] = i1;
        break;
       }
      }
     } else {
      if (!(_strncasecmp(HEAP32[i10 >> 2] | 0, 61623, 5) | 0)) {
       if ((HEAP32[i18 >> 2] | 0) == 2) HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) >> 2] = 0;
       HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 5;
       break;
      }
      HEAP32[i11 >> 2] = _vim_strchr(HEAP32[i10 >> 2] | 0, 45) | 0;
      i1 = HEAP32[i11 >> 2] | 0;
      do if (!(HEAP32[i8 >> 2] | 0)) {
       if (i1 | 0) break;
       i20 = HEAP32[i10 >> 2] | 0;
       HEAP32[i11 >> 2] = i20 + (_strlen(HEAP32[i10 >> 2] | 0) | 0);
      } else {
       if (!((HEAP32[i11 >> 2] | 0) == 0 ? 1 : i1 >>> 0 > (HEAP32[i8 >> 2] | 0) >>> 0)) break;
       HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
      } while (0);
      HEAP32[i9 >> 2] = _vim_strchr(HEAP32[i10 >> 2] | 0, 47) | 0;
      do if (HEAP32[i9 >> 2] | 0) {
       if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[i11 >> 2] | 0) >>> 0) break;
       i1 = HEAP32[i10 >> 2] | 0;
       HEAP32[i15 >> 2] = _syn_check_group(i1 | 0, (HEAP32[i9 >> 2] | 0) - i1 | 0) | 0;
       HEAP32[i10 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
      } while (0);
      do if ((HEAP32[i18 >> 2] | 0) == 2) {
       i1 = HEAP32[i10 >> 2] | 0;
       i20 = _syn_check_group(i1 | 0, (HEAP32[i11 >> 2] | 0) - i1 | 0) | 0;
       HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 24 >> 2] = i20;
       i20 = 10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) | 0;
       HEAP32[i20 + 28 >> 2] = HEAP32[i20 + 24 >> 2];
       if (!(HEAP32[i9 >> 2] | 0)) break;
       if ((HEAP32[i9 >> 2] | 0) >>> 0 >= (HEAP32[i11 >> 2] | 0) >>> 0) break;
       HEAP32[10940 + ((HEAP32[i12 >> 2] | 0) * 40 | 0) + 24 >> 2] = HEAP32[i15 >> 2];
      } while (0);
      HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
     } while (0);
     if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 45) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
    }
   }
   HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 44) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 8) {
  HEAP32[i4 >> 2] = 61511;
  i21 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i21 | 0;
 } else if ((i2 | 0) == 10) {
  HEAP32[i4 >> 2] = 61531;
  i21 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i21 | 0;
 } else if ((i2 | 0) == 31) {
  HEAP32[i4 >> 2] = 61531;
  i21 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i21 | 0;
 } else if ((i2 | 0) == 56) {
  HEAP32[i4 >> 2] = 61577;
  i21 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i21 | 0;
 } else if ((i2 | 0) == 59) {
  HEAP32[i4 >> 2] = 61598;
  i21 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i21 | 0;
 } else if ((i2 | 0) == 96) {
  if (!(HEAP32[i17 >> 2] | 0)) {
   HEAP32[2815] = HEAP32[2745];
   HEAP32[2817] = HEAP32[2747];
   HEAP32[2818] = HEAP32[2748];
   HEAP32[2819] = HEAP32[2749];
   HEAP32[2820] = HEAP32[2750];
   HEAP32[2821] = HEAP32[2751];
   HEAP32[2822] = HEAP32[2752];
  }
  HEAP32[i4 >> 2] = 0;
  i21 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i21 | 0;
 }
 return 0;
}

function _do_buffer(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 48 | 0;
 i9 = i7 + 44 | 0;
 i10 = i7 + 40 | 0;
 i11 = i7 + 36 | 0;
 i12 = i7 + 32 | 0;
 i13 = i7 + 28 | 0;
 i14 = i7 + 24 | 0;
 i15 = i7 + 20 | 0;
 i16 = i7 + 16 | 0;
 i17 = i7 + 12 | 0;
 i18 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 if ((HEAP32[i9 >> 2] | 0) == 2 | (HEAP32[i9 >> 2] | 0) == 3) i19 = 1; else i19 = (HEAP32[i9 >> 2] | 0) == 4;
 HEAP32[i16 >> 2] = i19 & 1;
 switch (HEAP32[i10 >> 2] | 0) {
 case 1:
  {
   HEAP32[i14 >> 2] = HEAP32[26771];
   break;
  }
 case 2:
  {
   HEAP32[i14 >> 2] = HEAP32[26772];
   break;
  }
 default:
  HEAP32[i14 >> 2] = HEAP32[26773];
 }
 L9 : do if ((HEAP32[i10 >> 2] | 0) == 3) {
  while (1) {
   i19 = HEAP32[i12 >> 2] | 0;
   HEAP32[i12 >> 2] = i19 + -1;
   if ((i19 | 0) <= 0) break;
   do {
    HEAP32[i14 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 48 >> 2];
    if (!(HEAP32[i14 >> 2] | 0)) HEAP32[i14 >> 2] = HEAP32[26771];
    if ((HEAP32[i14 >> 2] | 0) == (HEAP32[26773] | 0)) break;
   } while ((_bufIsChanged(HEAP32[i14 >> 2] | 0) | 0) != 0 ^ 1);
  }
  if (!(_bufIsChanged(HEAP32[i14 >> 2] | 0) | 0)) {
   _emsg(41861) | 0;
   HEAP32[i8 >> 2] = 0;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
 } else {
  if ((HEAP32[i10 >> 2] | 0) == 1 & (HEAP32[i12 >> 2] | 0) != 0) while (1) {
   if (!(HEAP32[i14 >> 2] | 0)) break L9;
   if ((HEAP32[(HEAP32[i14 >> 2] | 0) + 92 >> 2] | 0) == (HEAP32[i12 >> 2] | 0)) break L9;
   HEAP32[i14 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 48 >> 2];
  }
  HEAP32[i15 >> 2] = 0;
  do {
   if ((HEAP32[i12 >> 2] | 0) <= 0) {
    if (HEAP32[i16 >> 2] | 0) break L9;
    if (HEAP32[(HEAP32[i14 >> 2] | 0) + 596 >> 2] | 0) break L9;
    if ((HEAP32[i15 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) break L9;
   }
   if (!(HEAP32[i15 >> 2] | 0)) HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
   i19 = HEAP32[i14 >> 2] | 0;
   if ((HEAP32[i11 >> 2] | 0) == 1) {
    HEAP32[i14 >> 2] = HEAP32[i19 + 48 >> 2];
    if (!(HEAP32[i14 >> 2] | 0)) HEAP32[i14 >> 2] = HEAP32[26771];
   } else {
    HEAP32[i14 >> 2] = HEAP32[i19 + 52 >> 2];
    if (!(HEAP32[i14 >> 2] | 0)) HEAP32[i14 >> 2] = HEAP32[26772];
   }
   if (HEAP32[i16 >> 2] | 0) i6 = 37; else if (HEAP32[(HEAP32[i14 >> 2] | 0) + 596 >> 2] | 0) i6 = 37;
   if ((i6 | 0) == 37) {
    i6 = 0;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
    HEAP32[i15 >> 2] = 0;
   }
  } while ((HEAP32[i15 >> 2] | 0) != (HEAP32[i14 >> 2] | 0));
  _emsg(41891) | 0;
  HEAP32[i8 >> 2] = 0;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 } while (0);
 if (!(HEAP32[i14 >> 2] | 0)) {
  do if ((HEAP32[i10 >> 2] | 0) == 1) {
   if (!(HEAP32[i16 >> 2] | 0)) _emsgn(94153, HEAP32[i12 >> 2] | 0) | 0;
  } else if ((HEAP32[i11 >> 2] | 0) == 1) {
   _emsg(41922) | 0;
   break;
  } else {
   _emsg(41956) | 0;
   break;
  } while (0);
  HEAP32[i8 >> 2] = 0;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 }
 HEAP32[26757] = 1;
 do if (HEAP32[i16 >> 2] | 0) {
  if (HEAP32[(HEAP32[i14 >> 2] | 0) + 64 >> 2] | 0) {
   _emsg(41734) | 0;
   HEAP32[i8 >> 2] = 0;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
  _set_bufref(i18, HEAP32[i14 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) != 4) if (!(HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] | 0)) if (!(HEAP32[(HEAP32[i14 >> 2] | 0) + 596 >> 2] | 0)) {
   HEAP32[i8 >> 2] = 0;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
  if (!(HEAP32[i13 >> 2] | 0)) if (_bufIsChanged(HEAP32[i14 >> 2] | 0) | 0) {
   _emsgn(41991, HEAP32[(HEAP32[i14 >> 2] | 0) + 92 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = 0;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
  if (HEAP32[26788] | 0 ? (HEAP32[i14 >> 2] | 0) == (HEAP32[26773] | 0) : 0) _end_visual_mode();
  HEAP32[i15 >> 2] = HEAP32[26771];
  while (1) {
   if (!(HEAP32[i15 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[i15 >> 2] | 0) + 596 >> 2] | 0) if ((HEAP32[i15 >> 2] | 0) != (HEAP32[i14 >> 2] | 0)) break;
   HEAP32[i15 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 48 >> 2];
  }
  if (!(HEAP32[i15 >> 2] | 0)) if ((HEAP32[i14 >> 2] | 0) == (HEAP32[26773] | 0)) {
   HEAP32[i8 >> 2] = _empty_curbuf(1, HEAP32[i13 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
  do {
   if ((HEAP32[i14 >> 2] | 0) != (HEAP32[26773] | 0)) break;
   if (HEAP32[(HEAP32[26881] | 0) + 16 >> 2] | 0) break;
   if ((HEAP32[(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) + 64 >> 2] | 0) > 0) break;
   if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) if (!(HEAP32[HEAP32[26884] >> 2] | 0)) break;
  } while ((_win_close(HEAP32[26881] | 0, 0) | 0) != 0);
  if ((HEAP32[i14 >> 2] | 0) != (HEAP32[26773] | 0)) {
   _close_windows(HEAP32[i14 >> 2] | 0, 0);
   if ((HEAP32[i14 >> 2] | 0) != (HEAP32[26773] | 0)) if (_bufref_valid(i18) | 0) if ((HEAP32[(HEAP32[i14 >> 2] | 0) + 56 >> 2] | 0) <= 0) _close_buffer(0, HEAP32[i14 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0);
   HEAP32[i8 >> 2] = 1;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
  HEAP32[i14 >> 2] = 0;
  HEAP32[i15 >> 2] = 0;
  if (HEAP32[26749] | 0) if (_bufref_valid(106996) | 0) HEAP32[i14 >> 2] = HEAP32[26749];
  L124 : do if (!(HEAP32[i14 >> 2] | 0)) {
   HEAP32[i17 >> 2] = 1;
   HEAP32[i14 >> 2] = HEAP32[(HEAP32[26773] | 0) + 48 >> 2];
   while (1) {
    if (!(HEAP32[i14 >> 2] | 0)) {
     if (!(HEAP32[i17 >> 2] | 0)) break L124;
     HEAP32[i14 >> 2] = HEAP32[(HEAP32[26773] | 0) + 52 >> 2];
     HEAP32[i17 >> 2] = 0;
     continue;
    }
    do if ((HEAP32[(HEAP32[i14 >> 2] | 0) + 780 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0)) if (HEAP32[(HEAP32[i14 >> 2] | 0) + 596 >> 2] | 0) {
     if (HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] | 0) break L124;
     if (HEAP32[i15 >> 2] | 0) break;
     HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
    } while (0);
    i11 = HEAP32[i14 >> 2] | 0;
    if (HEAP32[i17 >> 2] | 0) HEAP32[i14 >> 2] = HEAP32[i11 + 48 >> 2]; else HEAP32[i14 >> 2] = HEAP32[i11 + 52 >> 2];
   }
  } while (0);
  if (!(HEAP32[i14 >> 2] | 0)) HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
  L146 : do if (!(HEAP32[i14 >> 2] | 0)) {
   HEAP32[i14 >> 2] = HEAP32[26771];
   while (1) {
    if (!(HEAP32[i14 >> 2] | 0)) break L146;
    if (HEAP32[(HEAP32[i14 >> 2] | 0) + 596 >> 2] | 0) if ((HEAP32[i14 >> 2] | 0) != (HEAP32[26773] | 0)) break L146;
    HEAP32[i14 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 48 >> 2];
   }
  } while (0);
  if (!(HEAP32[i14 >> 2] | 0)) {
   i11 = HEAP32[26773] | 0;
   if (HEAP32[(HEAP32[26773] | 0) + 48 >> 2] | 0) {
    HEAP32[i14 >> 2] = HEAP32[i11 + 48 >> 2];
    break;
   } else {
    HEAP32[i14 >> 2] = HEAP32[i11 + 52 >> 2];
    break;
   }
  }
 } while (0);
 if (!(HEAP32[i14 >> 2] | 0)) {
  HEAP32[i8 >> 2] = _empty_curbuf(0, HEAP32[i13 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 }
 if ((HEAP32[i9 >> 2] | 0) == 1) {
  if (HEAP32[27e3] & 1 | 0) if (_buf_jump_open_win(HEAP32[i14 >> 2] | 0) | 0) {
   HEAP32[i8 >> 2] = 1;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
  if (HEAP32[27e3] & 2 | 0) if (_buf_jump_open_tab(HEAP32[i14 >> 2] | 0) | 0) {
   HEAP32[i8 >> 2] = 1;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
  if (!(_win_split(0, 0) | 0)) {
   HEAP32[i8 >> 2] = 0;
   i20 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i20 | 0;
  }
 }
 if ((HEAP32[i14 >> 2] | 0) == (HEAP32[26773] | 0)) {
  HEAP32[i8 >> 2] = 1;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 }
 if (!(HEAP32[i9 >> 2] | 0)) if (!(_can_abandon(HEAP32[26773] | 0, HEAP32[i13 >> 2] | 0) | 0)) {
  _no_write_message();
  HEAP32[i8 >> 2] = 0;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 }
 _set_curbuf(HEAP32[i14 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 if ((HEAP32[i9 >> 2] | 0) == 1) {
  HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] = 0;
  HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] = 0;
 }
 HEAP32[i8 >> 2] = 1;
 i20 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i20 | 0;
}

function _screen_del_lines(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i10 = i9 + 64 | 0;
 i11 = i9 + 60 | 0;
 i12 = i9 + 56 | 0;
 i13 = i9 + 52 | 0;
 i14 = i9 + 48 | 0;
 i15 = i9 + 44 | 0;
 i16 = i9 + 40 | 0;
 i17 = i9 + 36 | 0;
 i18 = i9 + 32 | 0;
 i19 = i9 + 28 | 0;
 i20 = i9 + 24 | 0;
 i21 = i9 + 20 | 0;
 i22 = i9 + 16 | 0;
 i23 = i9 + 12 | 0;
 i24 = i9 + 8 | 0;
 i25 = i9 + 4 | 0;
 i26 = i9;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i17 >> 2] = i7;
 HEAP32[i22 >> 2] = 0;
 i7 = (_screen_valid(1) | 0) == 0;
 do if (!(i7 | (HEAP32[i13 >> 2] | 0) <= 0)) {
  if (!(HEAP32[i15 >> 2] | 0)) if ((HEAP32[i13 >> 2] | 0) > (HEAP32[27017] | 0)) break;
  if (!((HEAPU16[54222] | 0) != 0 & 0 > 0)) {
   HEAP32[i24 >> 2] = ((HEAP32[i12 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0) >= (HEAP32[i14 >> 2] | 0) & 1;
   if (!(HEAPU8[HEAP32[26530] >> 0] | 0)) i27 = 1; else i27 = (_can_clear(HEAP32[26520] | 0) | 0) != 0;
   HEAP32[i25 >> 2] = i27 & 1;
   if (HEAP32[i17 >> 2] | 0) if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) if (!(HEAPU8[HEAP32[26587] >> 0] | 0)) HEAP32[i26 >> 2] = 9; else i8 = 12; else i8 = 12; else i8 = 12;
   L14 : do if ((i8 | 0) == 12) {
    i6 = (_can_clear(HEAP32[26527] | 0) | 0) != 0;
    if (i6 & (HEAP32[i24 >> 2] | 0) != 0) {
     HEAP32[i26 >> 2] = 8;
     break;
    }
    do if (!(HEAP32[i12 >> 2] | 0)) {
     if ((HEAP32[i13 >> 2] | 0) != 1) if (HEAPU8[HEAP32[26524] >> 0] | 0) break;
     HEAP32[i26 >> 2] = 7;
     break L14;
    } while (0);
    if ((HEAPU8[HEAP32[26524] >> 0] | 0) != 0 & (HEAP32[i13 >> 2] | 0) > 1 & (HEAP32[i25 >> 2] | 0) != 0) {
     HEAP32[i26 >> 2] = 2;
     break;
    }
    i6 = (_can_clear(HEAP32[26520] | 0) | 0) != 0;
    do if (i6 & (HEAP32[i24 >> 2] | 0) != 0) {
     if (HEAP32[i17 >> 2] | 0) if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) break;
     HEAP32[i26 >> 2] = 4;
     break L14;
    } while (0);
    if ((HEAPU8[HEAP32[26523] >> 0] | 0) != 0 & (HEAP32[i25 >> 2] | 0) != 0) {
     HEAP32[i26 >> 2] = 5;
     break;
    }
    if ((HEAPU8[HEAP32[26524] >> 0] | 0) != 0 & (HEAP32[i25 >> 2] | 0) != 0) {
     HEAP32[i26 >> 2] = 2;
     break;
    }
    HEAP32[i10 >> 2] = 0;
    i28 = HEAP32[i10 >> 2] | 0;
    STACKTOP = i9;
    return i28 | 0;
   } while (0);
   do if (((HEAP32[i11 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0) > 0) i8 = 32; else {
    if (HEAP32[i17 >> 2] | 0) if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) {
     i8 = 32;
     break;
    }
    _clip_scroll_selection(HEAP32[i13 >> 2] | 0);
   } while (0);
   if ((i8 | 0) == 32) _clip_clear_selection(108396);
   if ((HEAP32[26638] | 0) >= ((HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0)) i29 = (HEAP32[26638] | 0) < ((HEAP32[i14 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0); else i29 = 0;
   _gui_dont_update_cursor(i29 & 1);
   if (HEAP32[i17 >> 2] | 0) if (HEAP32[(HEAP32[i17 >> 2] | 0) + 96 >> 2] | 0) if (HEAPU8[HEAP32[26587] >> 0] | 0) if (!(HEAPU8[HEAP32[26561] >> 0] | 0)) HEAP32[i22 >> 2] = HEAP32[(HEAP32[i17 >> 2] | 0) + 96 >> 2];
   i6 = HEAP32[i12 >> 2] | 0;
   if (HEAPU8[HEAP32[26561] >> 0] | 0) {
    HEAP32[i21 >> 2] = i6;
    HEAP32[i23 >> 2] = HEAP32[i14 >> 2];
   } else {
    HEAP32[i21 >> 2] = i6 + (HEAP32[i11 >> 2] | 0);
    HEAP32[i23 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
   }
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
   HEAP32[i19 >> 2] = 0;
   while (1) {
    if ((HEAP32[i19 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break;
    if (HEAP32[i17 >> 2] | 0) if ((HEAP32[(HEAP32[i17 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) {
     HEAP32[i18 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
     while (1) {
      i6 = (HEAP32[i18 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0;
      HEAP32[i18 >> 2] = i6;
      if ((i6 | 0) > ((HEAP32[i14 >> 2] | 0) - 1 | 0)) break;
      i6 = HEAP32[i18 >> 2] | 0;
      _linecopy(i6 - (HEAP32[i13 >> 2] | 0) | 0, i6 | 0, HEAP32[i17 >> 2] | 0);
     }
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
     i6 = (_can_clear(97452) | 0) != 0;
     i5 = HEAP32[i17 >> 2] | 0;
     i4 = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0) + (HEAP32[i5 + 96 >> 2] | 0) | 0;
     i3 = HEAP32[i5 + 100 >> 2] | 0;
     if (i6) _lineclear(i4, i3, HEAP32[i16 >> 2] | 0); else _lineinvalid(i4, i3);
     HEAP8[(HEAP32[26694] | 0) + (HEAP32[i18 >> 2] | 0) >> 0] = 0;
    } else i8 = 55; else i8 = 55;
    do if ((i8 | 0) == 55) {
     i8 = 0;
     HEAP32[i18 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
     HEAP32[i20 >> 2] = HEAP32[(HEAP32[26693] | 0) + (HEAP32[i18 >> 2] << 2) >> 2];
     while (1) {
      i3 = (HEAP32[i18 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0;
      HEAP32[i18 >> 2] = i3;
      if ((i3 | 0) > ((HEAP32[i14 >> 2] | 0) - 1 | 0)) break;
      i3 = HEAP32[26693] | 0;
      HEAP32[i3 + ((HEAP32[i18 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) << 2) >> 2] = HEAP32[i3 + (HEAP32[i18 >> 2] << 2) >> 2];
      i3 = HEAP32[26694] | 0;
      i4 = HEAP32[i18 >> 2] | 0;
      HEAP8[i3 + (i4 - (HEAP32[i13 >> 2] | 0)) >> 0] = HEAP8[i3 + i4 >> 0] | 0;
     }
     HEAP32[(HEAP32[26693] | 0) + ((HEAP32[i18 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) << 2) >> 2] = HEAP32[i20 >> 2];
     HEAP8[(HEAP32[26694] | 0) + ((HEAP32[i18 >> 2] | 0) - (HEAP32[i13 >> 2] | 0)) >> 0] = 0;
     i4 = (_can_clear(97452) | 0) != 0;
     i3 = HEAP32[i20 >> 2] | 0;
     i6 = HEAP32[10174] | 0;
     if (i4) {
      _lineclear(i3, i6, HEAP32[i16 >> 2] | 0);
      break;
     } else {
      _lineinvalid(i3, i6);
      break;
     }
    } while (0);
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
   if ((HEAP32[26455] | 0) != (HEAP32[i16 >> 2] | 0)) _screen_stop_highlight();
   if (HEAP32[i16 >> 2] | 0) _screen_start_highlight(HEAP32[i16 >> 2] | 0);
   L94 : do if ((HEAP32[i26 >> 2] | 0) == 9) _redraw_block(HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i17 >> 2] | 0); else {
    if ((HEAP32[i26 >> 2] | 0) == 8) {
     _windgoto(HEAP32[i21 >> 2] | 0, HEAP32[i22 >> 2] | 0);
     _out_str(HEAP32[26527] | 0);
     _screen_start();
     break;
    }
    if ((HEAP32[i26 >> 2] | 0) == 2) {
     _windgoto(HEAP32[i21 >> 2] | 0, HEAP32[i22 >> 2] | 0);
     _term_delete_lines(HEAP32[i13 >> 2] | 0);
     _screen_start();
     break;
    }
    if ((HEAP32[i26 >> 2] | 0) == 7) {
     _windgoto((HEAP32[i23 >> 2] | 0) - 1 | 0, HEAP32[i22 >> 2] | 0);
     HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
     while (1) {
      i6 = (HEAP32[i19 >> 2] | 0) + -1 | 0;
      HEAP32[i19 >> 2] = i6;
      if ((i6 | 0) < 0) break L94;
      _out_char(10);
     }
    }
    HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
    while (1) {
     i6 = (HEAP32[i19 >> 2] | 0) + -1 | 0;
     HEAP32[i19 >> 2] = i6;
     if ((i6 | 0) < 0) break L94;
     i6 = HEAP32[i21 >> 2] | 0;
     if ((HEAP32[i26 >> 2] | 0) == 5) {
      _windgoto(i6, HEAP32[i22 >> 2] | 0);
      _out_str(HEAP32[26523] | 0);
     } else {
      _windgoto(i6 + (HEAP32[i19 >> 2] | 0) | 0, HEAP32[i22 >> 2] | 0);
      _out_str(HEAP32[26520] | 0);
     }
     _screen_start();
    }
   } while (0);
   L117 : do if (HEAPU8[HEAP32[26530] >> 0] | 0) if ((HEAP32[i26 >> 2] | 0) == 5 | (HEAP32[i26 >> 2] | 0) == 2) {
    HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
    while (1) {
     if ((HEAP32[i19 >> 2] | 0) <= 0) break L117;
     _windgoto((HEAP32[i23 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0, HEAP32[i22 >> 2] | 0);
     _out_str(HEAP32[26520] | 0);
     _screen_start();
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + -1;
    }
   } while (0);
   _gui_can_update_cursor();
   if (HEAP32[26627] | 0) _out_flush();
   HEAP32[i10 >> 2] = 1;
   i28 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i9;
   return i28 | 0;
  }
 } while (0);
 HEAP32[i10 >> 2] = 0;
 i28 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i9;
 return i28 | 0;
}

function _getexmodeline(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i5 + 72 | 0;
 i7 = i5 + 64 | 0;
 i8 = i5 + 44 | 0;
 i9 = i5 + 40 | 0;
 i10 = i5 + 36 | 0;
 i11 = i5 + 32 | 0;
 i12 = i5 + 28 | 0;
 i13 = i5 + 24 | 0;
 i14 = i5 + 20 | 0;
 i15 = i5 + 16 | 0;
 i16 = i5 + 12 | 0;
 i17 = i5 + 8 | 0;
 i18 = i5 + 4 | 0;
 i19 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 + 68 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 _cursor_on();
 _compute_cmdrow();
 if (((HEAP32[27043] | 0) != 0 | (HEAP32[26711] | 0) != 0) & (HEAP32[i6 >> 2] | 0) != 63) _msg_putchar(10);
 if ((HEAP32[i6 >> 2] | 0) == 58) {
  if (HEAP32[26922] | 0) _msg_putchar(58);
  while (1) {
   i3 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i3 + -1;
   if ((i3 | 0) <= 0) break;
   _msg_putchar(32);
  }
  HEAP32[i10 >> 2] = HEAP32[27043];
 }
 _ga_init2(i8, 1, 30);
 L14 : do if ((HEAP32[i6 >> 2] | 0) <= 0) {
  HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) < 8) break;
   _ga_append(i8, 9);
   _msg_puts(52019);
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - 8;
  }
  while (1) {
   i3 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i3 + -1;
   if ((i3 | 0) <= 0) break L14;
   _ga_append(i8, 32);
   _msg_putchar(32);
  }
 } while (0);
 HEAP32[26802] = (HEAP32[26802] | 0) + 1;
 HEAP32[26804] = (HEAP32[26804] | 0) + 1;
 HEAP32[26834] = 0;
 L24 : while (1) {
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  if (!(_ga_grow(i8, 40) | 0)) break;
  HEAP32[i15 >> 2] = HEAP32[i11 >> 2];
  if ((HEAP32[26826] | 0) > 0 & (HEAP32[26821] | 0) == 0) HEAP32[i11 >> 2] = 10; else HEAP32[i11 >> 2] = _vgetc() | 0;
  if (HEAP32[26834] | 0) {
   i4 = 24;
   break;
  }
  L33 : do if ((HEAP32[i11 >> 2] | 0) == -21328) _bracketed_paste(2, 0, i8) | 0; else {
   L36 : do if (!(HEAP32[i12 >> 2] | 0)) {
    if ((HEAP32[i11 >> 2] | 0) == 13) HEAP32[i11 >> 2] = 10;
    if ((HEAP32[i11 >> 2] | 0) == 8 | (HEAP32[i11 >> 2] | 0) == -25195 | (HEAP32[i11 >> 2] | 0) == 127 | (HEAP32[i11 >> 2] | 0) == -17515 | (HEAP32[i11 >> 2] | 0) == -20733) if ((HEAP32[i8 >> 2] | 0) > 0) {
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     break L33;
    } else continue L24;
    if ((HEAP32[i11 >> 2] | 0) == 21) {
     HEAP32[27043] = HEAP32[i10 >> 2];
     _msg_clr_eos();
     HEAP32[i8 >> 2] = 0;
     break L33;
    }
    L50 : do if ((HEAP32[i11 >> 2] | 0) == 20) {
     HEAP32[i17 >> 2] = _get_sw_value(HEAP32[26773] | 0) | 0;
     HEAP32[i14 >> 2] = HEAP32[i8 + 16 >> 2];
     HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = 0;
     HEAP32[i7 >> 2] = _get_indent_str(HEAP32[i14 >> 2] | 0, 8, 0) | 0;
     i6 = HEAP32[i7 >> 2] | 0;
     i3 = HEAP32[i17 >> 2] | 0;
     HEAP32[i7 >> 2] = (i6 | 0) + ((i3 | 0) - ((i6 | 0) % (i3 | 0) | 0));
    } else {
     if ((HEAP32[i11 >> 2] | 0) != 4) {
      if ((HEAP32[i11 >> 2] | 0) == 22 | (HEAP32[i11 >> 2] | 0) == 17) {
       HEAP32[i12 >> 2] = 1;
       continue L24;
      }
      if ((HEAP32[i11 >> 2] | 0) >= 0) break L36;
      continue L24;
     }
     HEAP32[i14 >> 2] = HEAP32[i8 + 16 >> 2];
     do if ((HEAP32[i15 >> 2] | 0) == 48 | (HEAP32[i15 >> 2] | 0) == 94) {
      if ((HEAP32[i15 >> 2] | 0) == 94) HEAP32[26726] = 1;
      HEAP32[i7 >> 2] = 0;
      i3 = HEAP32[i14 >> 2] | 0;
      i6 = (HEAP32[i8 >> 2] | 0) + -1 | 0;
      HEAP32[i8 >> 2] = i6;
      HEAP8[i3 + i6 >> 0] = 0;
     } else {
      HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = 0;
      HEAP32[i7 >> 2] = _get_indent_str(HEAP32[i14 >> 2] | 0, 8, 0) | 0;
      if ((HEAP32[i7 >> 2] | 0) <= 0) break;
      HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
      i6 = HEAP32[i7 >> 2] | 0;
      i3 = (i6 | 0) % (_get_sw_value(HEAP32[26773] | 0) | 0) | 0;
      HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i3;
     } while (0);
     while (1) {
      i3 = _get_indent_str(HEAP32[i14 >> 2] | 0, 8, 0) | 0;
      if ((i3 | 0) <= (HEAP32[i7 >> 2] | 0)) break L50;
      HEAP32[i18 >> 2] = _skipwhite(HEAP32[i14 >> 2] | 0) | 0;
      i3 = HEAP32[i18 >> 2] | 0;
      _memmove(i3 + -1 | 0, i3 | 0, (HEAP32[i8 >> 2] | 0) - (i3 - (HEAP32[i14 >> 2] | 0)) + 1 | 0) | 0;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     }
    } while (0);
    while (1) {
     i3 = _get_indent_str(HEAP32[i14 >> 2] | 0, 8, 0) | 0;
     if ((i3 | 0) >= (HEAP32[i7 >> 2] | 0)) break L33;
     _ga_grow(i8, 2) | 0;
     HEAP32[i14 >> 2] = HEAP32[i8 + 16 >> 2];
     HEAP32[i18 >> 2] = _skipwhite(HEAP32[i14 >> 2] | 0) | 0;
     i3 = HEAP32[i18 >> 2] | 0;
     _memmove(i3 + 1 | 0, i3 | 0, (HEAP32[i8 >> 2] | 0) - (i3 - (HEAP32[i14 >> 2] | 0)) + 1 | 0) | 0;
     HEAP8[HEAP32[i18 >> 2] >> 0] = 32;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    }
   } while (0);
   if ((HEAP32[i11 >> 2] | 0) < 0) HEAP32[i11 >> 2] = 63;
   HEAP32[i16 >> 2] = 1;
   HEAP8[(HEAP32[i8 + 16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = HEAP32[i11 >> 2];
   do if ((HEAP32[i11 >> 2] | 0) == 10) _msg_putchar(10); else {
    if ((HEAP32[i11 >> 2] | 0) != 9) {
     _msg_outtrans_len((HEAP32[i8 + 16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0, HEAP32[i16 >> 2] | 0) | 0;
     i3 = _char2cells(HEAP32[i11 >> 2] | 0) | 0;
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i3;
     break;
    }
    do {
     _msg_putchar(32);
     i3 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
     HEAP32[i13 >> 2] = i3;
    } while (((i3 | 0) % 8 | 0 | 0) != 0);
   } while (0);
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
   HEAP32[i12 >> 2] = 0;
   _windgoto(HEAP32[26877] | 0, HEAP32[27043] | 0);
   HEAP32[i9 >> 2] = (HEAP32[i8 + 16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   if ((HEAP32[i8 >> 2] | 0) > 0) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + -1 >> 0] | 0) == 10) {
    HEAP32[i19 >> 2] = 0;
    while (1) {
     if (((HEAP32[i8 >> 2] | 0) - 2 | 0) >= (HEAP32[i19 >> 2] | 0)) i20 = (HEAPU8[(HEAP32[i9 >> 2] | 0) + (-2 - (HEAP32[i19 >> 2] | 0)) >> 0] | 0) == 92; else i20 = 0;
     i21 = HEAP32[i19 >> 2] | 0;
     if (!i20) break;
     HEAP32[i19 >> 2] = i21 + 1;
    }
    if ((i21 | 0) > 0) {
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (((HEAP32[i19 >> 2] | 0) + 1 | 0) / 2 | 0);
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (0 - (((HEAP32[i19 >> 2] | 0) + 1 | 0) / 2 | 0));
     HEAP8[(HEAP32[i9 >> 2] | 0) + -1 >> 0] = 10;
    }
    if (!(HEAP32[i19 >> 2] & 1)) {
     i4 = 82;
     break L24;
    }
   }
   continue L24;
  } while (0);
  HEAP32[27043] = HEAP32[i10 >> 2];
  HEAP32[i13 >> 2] = 0;
  HEAP32[i14 >> 2] = HEAP32[i8 + 16 >> 2];
  HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >>> 0 >= ((HEAP32[i8 + 16 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0) >>> 0) break;
   if ((HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) == 9) {
    do {
     _msg_putchar(32);
     i3 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
     HEAP32[i13 >> 2] = i3;
    } while (((i3 | 0) % 8 | 0 | 0) != 0);
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   } else {
    HEAP32[i16 >> 2] = 1;
    _msg_outtrans_len(HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
    i3 = _ptr2cells(HEAP32[i14 >> 2] | 0) | 0;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i3;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
   }
  }
  _msg_clr_eos();
  _windgoto(HEAP32[26877] | 0, HEAP32[27043] | 0);
 }
 if ((i4 | 0) == 24) _msg_putchar(10); else if ((i4 | 0) == 82) {
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
  HEAP8[HEAP32[i9 >> 2] >> 0] = 0;
 }
 HEAP32[26802] = (HEAP32[26802] | 0) + -1;
 HEAP32[26804] = (HEAP32[26804] | 0) + -1;
 HEAP32[26711] = 0;
 HEAP32[27043] = 0;
 if ((HEAP32[26877] | 0) < ((HEAP32[10173] | 0) - 1 | 0)) HEAP32[26877] = (HEAP32[26877] | 0) + 1;
 HEAP32[26718] = 0;
 if (!(HEAP32[26834] | 0)) {
  i22 = i8 + 16 | 0;
  i23 = HEAP32[i22 >> 2] | 0;
  STACKTOP = i5;
  return i23 | 0;
 }
 _ga_clear(i8);
 i22 = i8 + 16 | 0;
 i23 = HEAP32[i22 >> 2] | 0;
 STACKTOP = i5;
 return i23 | 0;
}

function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 if (!i1) return;
 i2 = i1 + -8 | 0;
 i3 = HEAP32[27242] | 0;
 i4 = HEAP32[i1 + -4 >> 2] | 0;
 i1 = i4 & -8;
 i5 = i2 + i1 | 0;
 do if (!(i4 & 1)) {
  i6 = HEAP32[i2 >> 2] | 0;
  if (!(i4 & 3)) return;
  i7 = i2 + (0 - i6) | 0;
  i8 = i6 + i1 | 0;
  if (i7 >>> 0 < i3 >>> 0) return;
  if ((HEAP32[27243] | 0) == (i7 | 0)) {
   i9 = i5 + 4 | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   if ((i10 & 3 | 0) != 3) {
    i11 = i7;
    i12 = i8;
    i13 = i7;
    break;
   }
   HEAP32[27240] = i8;
   HEAP32[i9 >> 2] = i10 & -2;
   HEAP32[i7 + 4 >> 2] = i8 | 1;
   HEAP32[i7 + i8 >> 2] = i8;
   return;
  }
  i10 = i6 >>> 3;
  if (i6 >>> 0 < 256) {
   i6 = HEAP32[i7 + 8 >> 2] | 0;
   i9 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i9 | 0) == (i6 | 0)) {
    HEAP32[27238] = HEAP32[27238] & ~(1 << i10);
    i11 = i7;
    i12 = i8;
    i13 = i7;
    break;
   } else {
    HEAP32[i6 + 12 >> 2] = i9;
    HEAP32[i9 + 8 >> 2] = i6;
    i11 = i7;
    i12 = i8;
    i13 = i7;
    break;
   }
  }
  i6 = HEAP32[i7 + 24 >> 2] | 0;
  i9 = HEAP32[i7 + 12 >> 2] | 0;
  do if ((i9 | 0) == (i7 | 0)) {
   i10 = i7 + 16 | 0;
   i14 = i10 + 4 | 0;
   i15 = HEAP32[i14 >> 2] | 0;
   if (!i15) {
    i16 = HEAP32[i10 >> 2] | 0;
    if (!i16) {
     i17 = 0;
     break;
    } else {
     i18 = i16;
     i19 = i10;
    }
   } else {
    i18 = i15;
    i19 = i14;
   }
   i14 = i18;
   i15 = i19;
   while (1) {
    i10 = i14 + 20 | 0;
    i16 = HEAP32[i10 >> 2] | 0;
    if (!i16) {
     i20 = i14 + 16 | 0;
     i21 = HEAP32[i20 >> 2] | 0;
     if (!i21) break; else {
      i22 = i21;
      i23 = i20;
     }
    } else {
     i22 = i16;
     i23 = i10;
    }
    i14 = i22;
    i15 = i23;
   }
   HEAP32[i15 >> 2] = 0;
   i17 = i14;
  } else {
   i10 = HEAP32[i7 + 8 >> 2] | 0;
   HEAP32[i10 + 12 >> 2] = i9;
   HEAP32[i9 + 8 >> 2] = i10;
   i17 = i9;
  } while (0);
  if (!i6) {
   i11 = i7;
   i12 = i8;
   i13 = i7;
  } else {
   i9 = HEAP32[i7 + 28 >> 2] | 0;
   i10 = 109256 + (i9 << 2) | 0;
   if ((HEAP32[i10 >> 2] | 0) == (i7 | 0)) {
    HEAP32[i10 >> 2] = i17;
    if (!i17) {
     HEAP32[27239] = HEAP32[27239] & ~(1 << i9);
     i11 = i7;
     i12 = i8;
     i13 = i7;
     break;
    }
   } else {
    i9 = i6 + 16 | 0;
    HEAP32[((HEAP32[i9 >> 2] | 0) == (i7 | 0) ? i9 : i6 + 20 | 0) >> 2] = i17;
    if (!i17) {
     i11 = i7;
     i12 = i8;
     i13 = i7;
     break;
    }
   }
   HEAP32[i17 + 24 >> 2] = i6;
   i9 = i7 + 16 | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   if (i10 | 0) {
    HEAP32[i17 + 16 >> 2] = i10;
    HEAP32[i10 + 24 >> 2] = i17;
   }
   i10 = HEAP32[i9 + 4 >> 2] | 0;
   if (!i10) {
    i11 = i7;
    i12 = i8;
    i13 = i7;
   } else {
    HEAP32[i17 + 20 >> 2] = i10;
    HEAP32[i10 + 24 >> 2] = i17;
    i11 = i7;
    i12 = i8;
    i13 = i7;
   }
  }
 } else {
  i11 = i2;
  i12 = i1;
  i13 = i2;
 } while (0);
 if (i13 >>> 0 >= i5 >>> 0) return;
 i2 = i5 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 1)) return;
 if (!(i1 & 2)) {
  if ((HEAP32[27244] | 0) == (i5 | 0)) {
   i17 = (HEAP32[27241] | 0) + i12 | 0;
   HEAP32[27241] = i17;
   HEAP32[27244] = i11;
   HEAP32[i11 + 4 >> 2] = i17 | 1;
   if ((i11 | 0) != (HEAP32[27243] | 0)) return;
   HEAP32[27243] = 0;
   HEAP32[27240] = 0;
   return;
  }
  if ((HEAP32[27243] | 0) == (i5 | 0)) {
   i17 = (HEAP32[27240] | 0) + i12 | 0;
   HEAP32[27240] = i17;
   HEAP32[27243] = i13;
   HEAP32[i11 + 4 >> 2] = i17 | 1;
   HEAP32[i13 + i17 >> 2] = i17;
   return;
  }
  i17 = (i1 & -8) + i12 | 0;
  i23 = i1 >>> 3;
  do if (i1 >>> 0 < 256) {
   i22 = HEAP32[i5 + 8 >> 2] | 0;
   i19 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i19 | 0) == (i22 | 0)) {
    HEAP32[27238] = HEAP32[27238] & ~(1 << i23);
    break;
   } else {
    HEAP32[i22 + 12 >> 2] = i19;
    HEAP32[i19 + 8 >> 2] = i22;
    break;
   }
  } else {
   i22 = HEAP32[i5 + 24 >> 2] | 0;
   i19 = HEAP32[i5 + 12 >> 2] | 0;
   do if ((i19 | 0) == (i5 | 0)) {
    i18 = i5 + 16 | 0;
    i3 = i18 + 4 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) {
     i10 = HEAP32[i18 >> 2] | 0;
     if (!i10) {
      i24 = 0;
      break;
     } else {
      i25 = i10;
      i26 = i18;
     }
    } else {
     i25 = i4;
     i26 = i3;
    }
    i3 = i25;
    i4 = i26;
    while (1) {
     i18 = i3 + 20 | 0;
     i10 = HEAP32[i18 >> 2] | 0;
     if (!i10) {
      i9 = i3 + 16 | 0;
      i16 = HEAP32[i9 >> 2] | 0;
      if (!i16) break; else {
       i27 = i16;
       i28 = i9;
      }
     } else {
      i27 = i10;
      i28 = i18;
     }
     i3 = i27;
     i4 = i28;
    }
    HEAP32[i4 >> 2] = 0;
    i24 = i3;
   } else {
    i14 = HEAP32[i5 + 8 >> 2] | 0;
    HEAP32[i14 + 12 >> 2] = i19;
    HEAP32[i19 + 8 >> 2] = i14;
    i24 = i19;
   } while (0);
   if (i22 | 0) {
    i19 = HEAP32[i5 + 28 >> 2] | 0;
    i7 = 109256 + (i19 << 2) | 0;
    if ((HEAP32[i7 >> 2] | 0) == (i5 | 0)) {
     HEAP32[i7 >> 2] = i24;
     if (!i24) {
      HEAP32[27239] = HEAP32[27239] & ~(1 << i19);
      break;
     }
    } else {
     i19 = i22 + 16 | 0;
     HEAP32[((HEAP32[i19 >> 2] | 0) == (i5 | 0) ? i19 : i22 + 20 | 0) >> 2] = i24;
     if (!i24) break;
    }
    HEAP32[i24 + 24 >> 2] = i22;
    i19 = i5 + 16 | 0;
    i7 = HEAP32[i19 >> 2] | 0;
    if (i7 | 0) {
     HEAP32[i24 + 16 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i24;
    }
    i7 = HEAP32[i19 + 4 >> 2] | 0;
    if (i7 | 0) {
     HEAP32[i24 + 20 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i24;
    }
   }
  } while (0);
  HEAP32[i11 + 4 >> 2] = i17 | 1;
  HEAP32[i13 + i17 >> 2] = i17;
  if ((i11 | 0) == (HEAP32[27243] | 0)) {
   HEAP32[27240] = i17;
   return;
  } else i29 = i17;
 } else {
  HEAP32[i2 >> 2] = i1 & -2;
  HEAP32[i11 + 4 >> 2] = i12 | 1;
  HEAP32[i13 + i12 >> 2] = i12;
  i29 = i12;
 }
 i12 = i29 >>> 3;
 if (i29 >>> 0 < 256) {
  i13 = 108992 + (i12 << 1 << 2) | 0;
  i1 = HEAP32[27238] | 0;
  i2 = 1 << i12;
  if (!(i1 & i2)) {
   HEAP32[27238] = i1 | i2;
   i30 = i13;
   i31 = i13 + 8 | 0;
  } else {
   i2 = i13 + 8 | 0;
   i30 = HEAP32[i2 >> 2] | 0;
   i31 = i2;
  }
  HEAP32[i31 >> 2] = i11;
  HEAP32[i30 + 12 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i30;
  HEAP32[i11 + 12 >> 2] = i13;
  return;
 }
 i13 = i29 >>> 8;
 if (!i13) i32 = 0; else if (i29 >>> 0 > 16777215) i32 = 31; else {
  i30 = (i13 + 1048320 | 0) >>> 16 & 8;
  i31 = i13 << i30;
  i13 = (i31 + 520192 | 0) >>> 16 & 4;
  i2 = i31 << i13;
  i31 = (i2 + 245760 | 0) >>> 16 & 2;
  i1 = 14 - (i13 | i30 | i31) + (i2 << i31 >>> 15) | 0;
  i32 = i29 >>> (i1 + 7 | 0) & 1 | i1 << 1;
 }
 i1 = 109256 + (i32 << 2) | 0;
 HEAP32[i11 + 28 >> 2] = i32;
 HEAP32[i11 + 20 >> 2] = 0;
 HEAP32[i11 + 16 >> 2] = 0;
 i31 = HEAP32[27239] | 0;
 i2 = 1 << i32;
 L112 : do if (!(i31 & i2)) {
  HEAP32[27239] = i31 | i2;
  HEAP32[i1 >> 2] = i11;
  HEAP32[i11 + 24 >> 2] = i1;
  HEAP32[i11 + 12 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i11;
 } else {
  i30 = HEAP32[i1 >> 2] | 0;
  L115 : do if ((HEAP32[i30 + 4 >> 2] & -8 | 0) == (i29 | 0)) i33 = i30; else {
   i13 = i29 << ((i32 | 0) == 31 ? 0 : 25 - (i32 >>> 1) | 0);
   i12 = i30;
   while (1) {
    i34 = i12 + 16 + (i13 >>> 31 << 2) | 0;
    i17 = HEAP32[i34 >> 2] | 0;
    if (!i17) break;
    if ((HEAP32[i17 + 4 >> 2] & -8 | 0) == (i29 | 0)) {
     i33 = i17;
     break L115;
    } else {
     i13 = i13 << 1;
     i12 = i17;
    }
   }
   HEAP32[i34 >> 2] = i11;
   HEAP32[i11 + 24 >> 2] = i12;
   HEAP32[i11 + 12 >> 2] = i11;
   HEAP32[i11 + 8 >> 2] = i11;
   break L112;
  } while (0);
  i30 = i33 + 8 | 0;
  i22 = HEAP32[i30 >> 2] | 0;
  HEAP32[i22 + 12 >> 2] = i11;
  HEAP32[i30 >> 2] = i11;
  HEAP32[i11 + 8 >> 2] = i22;
  HEAP32[i11 + 12 >> 2] = i33;
  HEAP32[i11 + 24 >> 2] = 0;
 } while (0);
 i11 = (HEAP32[27246] | 0) + -1 | 0;
 HEAP32[27246] = i11;
 if (i11 | 0) return;
 i11 = 109408;
 while (1) {
  i33 = HEAP32[i11 >> 2] | 0;
  if (!i33) break; else i11 = i33 + 8 | 0;
 }
 HEAP32[27246] = -1;
 return;
}

function _apply_autocmds_group(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i10 = i9 + 176 | 0;
 i11 = i9 + 172 | 0;
 i12 = i9 + 168 | 0;
 i13 = i9 + 164 | 0;
 i14 = i9 + 160 | 0;
 i15 = i9 + 156 | 0;
 i16 = i9 + 148 | 0;
 i17 = i9 + 144 | 0;
 i18 = i9 + 140 | 0;
 i19 = i9 + 136 | 0;
 i20 = i9 + 132 | 0;
 i21 = i9 + 128 | 0;
 i22 = i9 + 124 | 0;
 i23 = i9 + 120 | 0;
 i24 = i9 + 116 | 0;
 i25 = i9 + 112 | 0;
 i26 = i9 + 108 | 0;
 i27 = i9 + 104 | 0;
 i28 = i9 + 100 | 0;
 i29 = i9 + 64 | 0;
 i30 = i9 + 60 | 0;
 i31 = i9 + 56 | 0;
 i32 = i9 + 16 | 0;
 i33 = i9 + 8 | 0;
 i34 = i9 + 4 | 0;
 i35 = i9;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i9 + 152 >> 2] = i7;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i31 >> 2] = 0;
 HEAP32[i33 >> 2] = HEAP32[27161];
 do if ((HEAP32[i10 >> 2] | 0) != 96) if (!((HEAP32[25363] | 0) > 0 ? 1 : (HEAP32[101068 + (HEAP32[i10 >> 2] << 2) >> 2] | 0) == 0)) if ((HEAP32[26744] | 0) == 0 | (HEAP32[i13 >> 2] | 0) != 0 | (HEAP32[25364] | 0) != 0) {
  if (HEAP32[25365] | 0) if ((HEAP32[i10 >> 2] | 0) == 39 | (HEAP32[i10 >> 2] | 0) == 40) break;
  if (!(_event_ignored(HEAP32[i10 >> 2] | 0) | 0)) {
   if ((HEAP32[25366] | 0) == 10) {
    _emsg(52353) | 0;
    break;
   }
   if (HEAP32[26745] | 0) if ((HEAP32[i10 >> 2] | 0) == 93 | (HEAP32[i10 >> 2] | 0) == 2) break;
   if (HEAP32[26746] | 0) if ((HEAP32[i10 >> 2] | 0) == 94 | (HEAP32[i10 >> 2] | 0) == 6) break;
   HEAP32[i23 >> 2] = HEAP32[26845];
   HEAP32[i24 >> 2] = HEAP32[27179];
   HEAP32[i25 >> 2] = HEAP32[26846];
   HEAP32[i26 >> 2] = HEAP32[26847];
   HEAP32[i27 >> 2] = HEAP32[26744];
   HEAP32[i28 >> 2] = HEAP32[25364];
   HEAP32[i18 >> 2] = HEAP32[(HEAP32[26773] | 0) + 108 >> 2];
   HEAP32[i19 >> 2] = HEAP32[26773];
   do if (!(HEAP32[i12 >> 2] | 0)) {
    if ((HEAP32[i10 >> 2] | 0) == 25 | (HEAP32[i10 >> 2] | 0) == 26 | (HEAP32[i10 >> 2] | 0) == 62) {
     HEAP32[26845] = 0;
     break;
    }
    if (HEAP32[i11 >> 2] | 0) if (!(_ends_excmd(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0)) {
     HEAP32[26845] = HEAP32[i11 >> 2];
     break;
    }
    if (HEAP32[i15 >> 2] | 0) {
     HEAP32[26845] = HEAP32[(HEAP32[i15 >> 2] | 0) + 68 >> 2];
     break;
    } else {
     HEAP32[26845] = 0;
     break;
    }
   } else HEAP32[26845] = HEAP32[i12 >> 2]; while (0);
   if (HEAP32[26845] | 0) HEAP32[26845] = _vim_strsave(HEAP32[26845] | 0) | 0;
   HEAP32[27179] = 0;
   if (!(HEAP32[i15 >> 2] | 0)) HEAP32[26846] = 0; else HEAP32[26846] = HEAP32[(HEAP32[i15 >> 2] | 0) + 92 >> 2];
   do if (!(HEAP32[i11 >> 2] | 0)) i8 = 30; else if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) i8 = 30; else {
    HEAP32[i16 >> 2] = _vim_strsave(HEAP32[i11 >> 2] | 0) | 0;
    i7 = HEAP32[i11 >> 2] | 0;
    if ((HEAP32[i10 >> 2] | 0) == 44 | (HEAP32[i10 >> 2] | 0) == 76 | (HEAP32[i10 >> 2] | 0) == 19 | (HEAP32[i10 >> 2] | 0) == 20 | (HEAP32[i10 >> 2] | 0) == 21 | (HEAP32[i10 >> 2] | 0) == 23 | (HEAP32[i10 >> 2] | 0) == 24 | (HEAP32[i10 >> 2] | 0) == 22 | (HEAP32[i10 >> 2] | 0) == 54 | (HEAP32[i10 >> 2] | 0) == 66 | (HEAP32[i10 >> 2] | 0) == 72 | (HEAP32[i10 >> 2] | 0) == 64 | (HEAP32[i10 >> 2] | 0) == 25 | (HEAP32[i10 >> 2] | 0) == 26 | (HEAP32[i10 >> 2] | 0) == 62 | (HEAP32[i10 >> 2] | 0) == 63 | (HEAP32[i10 >> 2] | 0) == 32) {
     HEAP32[i11 >> 2] = _vim_strsave(i7) | 0;
     HEAP32[27179] = 1;
     break;
    } else {
     HEAP32[i11 >> 2] = _FullName_save(i7, 0) | 0;
     break;
    }
   } while (0);
   if ((i8 | 0) == 30) {
    do if (!(HEAP32[i15 >> 2] | 0)) HEAP32[i11 >> 2] = 0; else {
     i7 = HEAP32[i15 >> 2] | 0;
     if ((HEAP32[i10 >> 2] | 0) == 44) {
      HEAP32[i11 >> 2] = HEAP32[i7 + 624 >> 2];
      break;
     }
     if (HEAP32[i7 + 72 >> 2] | 0) HEAP32[i16 >> 2] = _vim_strsave(HEAP32[(HEAP32[i15 >> 2] | 0) + 72 >> 2] | 0) | 0;
     HEAP32[i11 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 68 >> 2];
    } while (0);
    if (!(HEAP32[i11 >> 2] | 0)) HEAP32[i11 >> 2] = 114072;
    HEAP32[i11 >> 2] = _vim_strsave(HEAP32[i11 >> 2] | 0) | 0;
   }
   if (!(HEAP32[i11 >> 2] | 0)) {
    _vim_free(HEAP32[i16 >> 2] | 0);
    HEAP32[i20 >> 2] = 0;
    break;
   }
   HEAP32[26847] = HEAP32[i11 >> 2];
   HEAP32[26814] = (HEAP32[26814] | 0) + 1;
   HEAP32[i21 >> 2] = HEAP32[26731];
   HEAP32[26731] = 0;
   HEAP32[i22 >> 2] = HEAP32[26732];
   HEAP32[26732] = 0;
   if (!(HEAP32[26744] | 0)) {
    _save_search_patterns();
    _saveRedobuff(i32);
    HEAP32[i31 >> 2] = 1;
    HEAP32[26747] = HEAP32[26748];
   }
   HEAP32[26744] = 1;
   HEAP32[25365] = (HEAP32[i10 >> 2] | 0) == 39 & 1;
   HEAP32[25366] = (HEAP32[25366] | 0) + 1;
   if ((HEAP32[i10 >> 2] | 0) == 44) HEAP32[26747] = 1;
   HEAP32[i17 >> 2] = _gettail(HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i29 >> 2] = HEAP32[101068 + (HEAP32[i10 >> 2] << 2) >> 2];
   HEAP32[i29 + 4 >> 2] = 0;
   HEAP32[i29 + 8 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i29 + 12 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i29 + 16 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i29 + 20 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i29 + 24 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i29 + 28 >> 2] = HEAP32[26846];
   HEAP32[i29 + 32 >> 2] = 0;
   _auto_next_pat(i29, 0);
   if (HEAP32[i29 >> 2] | 0) {
    HEAP32[i29 + 32 >> 2] = HEAP32[25367];
    HEAP32[25367] = i29;
    HEAP32[i20 >> 2] = 1;
    HEAP32[i30 >> 2] = HEAP32[i29 >> 2];
    while (1) {
     i36 = (HEAP32[i30 >> 2] | 0) + 29 | 0;
     if (!(HEAP32[HEAP32[i30 >> 2] >> 2] | 0)) break;
     HEAP8[i36 >> 0] = 0;
     HEAP32[i30 >> 2] = HEAP32[HEAP32[i30 >> 2] >> 2];
    }
    HEAP8[i36 >> 0] = 1;
    _check_lnums(1);
    _do_cmdline(0, 8, i29, 7) | 0;
    if ((HEAP32[25367] | 0) == (i29 | 0)) HEAP32[25367] = HEAP32[i29 + 32 >> 2];
   }
   HEAP32[26814] = (HEAP32[26814] | 0) + -1;
   HEAP32[26744] = HEAP32[i27 >> 2];
   HEAP32[25365] = 0;
   HEAP32[25364] = HEAP32[i28 >> 2];
   _vim_free(HEAP32[26731] | 0);
   HEAP32[26731] = HEAP32[i21 >> 2];
   HEAP32[26732] = HEAP32[i22 >> 2];
   _vim_free(HEAP32[26845] | 0);
   HEAP32[26845] = HEAP32[i23 >> 2];
   HEAP32[27179] = HEAP32[i24 >> 2];
   HEAP32[26846] = HEAP32[i25 >> 2];
   HEAP32[26847] = HEAP32[i26 >> 2];
   HEAP32[27161] = HEAP32[i33 >> 2];
   _vim_free(HEAP32[i11 >> 2] | 0);
   _vim_free(HEAP32[i16 >> 2] | 0);
   HEAP32[25366] = (HEAP32[25366] | 0) + -1;
   L78 : do if (!(HEAP32[26744] | 0)) {
    _restore_search_patterns();
    if (HEAP32[i31 >> 2] | 0) _restoreRedobuff(i32);
    HEAP32[26747] = 0;
    while (1) {
     if (!(HEAP32[26752] | 0)) break;
     HEAP32[i34 >> 2] = HEAP32[(HEAP32[26752] | 0) + 48 >> 2];
     _vim_free(HEAP32[26752] | 0);
     HEAP32[26752] = HEAP32[i34 >> 2];
    }
    while (1) {
     if (!(HEAP32[26753] | 0)) break L78;
     HEAP32[i35 >> 2] = HEAP32[(HEAP32[26753] | 0) + 12 >> 2];
     _vim_free(HEAP32[26753] | 0);
     HEAP32[26753] = HEAP32[i35 >> 2];
    }
   } while (0);
   do if ((HEAP32[26773] | 0) == (HEAP32[i19 >> 2] | 0)) {
    if (!((HEAP32[i10 >> 2] | 0) == 10 | (HEAP32[i10 >> 2] | 0) == 17 | (HEAP32[i10 >> 2] | 0) == 36 | (HEAP32[i10 >> 2] | 0) == 90 | (HEAP32[i10 >> 2] | 0) == 91)) break;
    HEAP32[(HEAP32[26773] | 0) + 108 >> 2] = HEAP32[i18 >> 2];
   } while (0);
   _au_cleanup();
  }
 } while (0);
 if ((HEAP32[i10 >> 2] | 0) == 15 & (HEAP32[i15 >> 2] | 0) != 0) _aubuflocal_remove(HEAP32[i15 >> 2] | 0);
 if (!((HEAP32[i20 >> 2] | 0) == 1 & (HEAP32[i10 >> 2] | 0) == 44)) {
  i37 = HEAP32[i20 >> 2] | 0;
  STACKTOP = i9;
  return i37 | 0;
 }
 HEAP32[25266] = 1;
 i37 = HEAP32[i20 >> 2] | 0;
 STACKTOP = i9;
 return i37 | 0;
}

function _set_indent(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4 + 56 | 0;
 i6 = i4 + 52 | 0;
 i7 = i4 + 48 | 0;
 i8 = i4 + 44 | 0;
 i9 = i4 + 40 | 0;
 i10 = i4 + 36 | 0;
 i11 = i4 + 32 | 0;
 i12 = i4 + 28 | 0;
 i13 = i4 + 24 | 0;
 i14 = i4 + 20 | 0;
 i15 = i4 + 16 | 0;
 i16 = i4 + 12 | 0;
 i17 = i4 + 8 | 0;
 i18 = i4 + 4 | 0;
 i19 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = -1;
 HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i13 >> 2] = 0;
 i2 = _ml_get_curline() | 0;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i8 >> 2] = i2;
 if (HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0) {
  if (!(HEAP32[i7 >> 2] & 2)) if (HEAP32[(HEAP32[26773] | 0) + 672 >> 2] | 0) i3 = 4;
 } else i3 = 4;
 L4 : do if ((i3 | 0) == 4) {
  if (!(HEAP32[i7 >> 2] & 2)) if (HEAP32[(HEAP32[26773] | 0) + 672 >> 2] | 0) {
   HEAP32[i16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i12 >> 2] | 0) <= 0) break;
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 9) break;
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 9) {
     i2 = HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0;
     HEAP32[i17 >> 2] = (i2 | 0) - ((HEAP32[i16 >> 2] | 0) % (i2 | 0) | 0);
     if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i17 >> 2] | 0)) break;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
    } else {
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   if (HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0) HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
   i2 = HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0;
   HEAP32[i17 >> 2] = (i2 | 0) - ((HEAP32[i16 >> 2] | 0) % (i2 | 0) | 0);
   if ((HEAP32[i19 >> 2] | 0) == -1 ? (HEAP32[i12 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0) : 0) {
    HEAP32[i15 >> 2] = 1;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
  }
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0)) break L4;
   if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 9) HEAP32[i15 >> 2] = 1; else HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0);
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
 } while (0);
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) <= 0) break;
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 32) HEAP32[i15 >> 2] = 1; else HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if (!(HEAP32[i15 >> 2] | 0)) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 9) if (!(HEAP32[i7 >> 2] & 2)) {
  HEAP32[i5 >> 2] = 0;
  i20 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i20 | 0;
 }
 if (HEAP32[i7 >> 2] & 2 | 0) HEAP32[i8 >> 2] = HEAP32[i10 >> 2]; else HEAP32[i8 >> 2] = _skipwhite(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = (_strlen(HEAP32[i8 >> 2] | 0) | 0) + 1;
 L53 : do if ((HEAP32[i19 >> 2] | 0) != -1) {
  HEAP32[i9 >> 2] = _alloc((HEAP32[i19 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) - (HEAP32[i16 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0) | 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   HEAP32[i5 >> 2] = 0;
   i20 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i20 | 0;
  }
  HEAP32[i12 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i16 >> 2] | 0);
  HEAP32[i13 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
  HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
  while (1) {
   if ((HEAP32[i19 >> 2] | 0) <= 0) break;
   i15 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i15 + 1;
   i2 = HEAP8[i15 >> 0] | 0;
   i15 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i15 + 1;
   HEAP8[i15 >> 0] = i2;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + -1;
  }
  while (1) {
   if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 9) break L53;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
 } else {
  HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i9 >> 2] = _alloc((HEAP32[i13 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0) | 0;
  if (HEAP32[i9 >> 2] | 0) {
   HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
   break;
  }
  HEAP32[i5 >> 2] = 0;
  i20 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i20 | 0;
 } while (0);
 L74 : do if (!(HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0)) {
  if (!(HEAP32[i7 >> 2] & 2)) if (HEAP32[(HEAP32[26773] | 0) + 672 >> 2] | 0) {
   HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i12 >> 2] | 0) <= 0) break;
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 9) break;
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 9) {
     i6 = HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0;
     HEAP32[i17 >> 2] = (i6 | 0) - ((HEAP32[i16 >> 2] | 0) % (i6 | 0) | 0);
     if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i17 >> 2] | 0)) break;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
    } else {
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
    i6 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i6 + 1;
    i19 = HEAP8[i6 >> 0] | 0;
    i6 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i6 + 1;
    HEAP8[i6 >> 0] = i19;
   }
   i19 = HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0;
   HEAP32[i17 >> 2] = (i19 | 0) - ((HEAP32[i16 >> 2] | 0) % (i19 | 0) | 0);
   if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) {
    i19 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i19 + 1;
    HEAP8[i19 >> 0] = 9;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
   }
   HEAP32[i8 >> 2] = _skipwhite(HEAP32[i8 >> 2] | 0) | 0;
  }
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0)) break L74;
   i19 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i19 + 1;
   HEAP8[i19 >> 0] = 9;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0);
  }
 } while (0);
 while (1) {
  i21 = HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i12 >> 2] | 0) <= 0) break;
  HEAP32[i11 >> 2] = i21 + 1;
  HEAP8[i21 >> 0] = 32;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
 }
 _memmove(i21 | 0, HEAP32[i8 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
 if (HEAP32[i7 >> 2] & 4 | 0) if ((_u_savesub(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) == 1) i3 = 75; else _vim_free(HEAP32[i9 >> 2] | 0); else i3 = 75;
 if ((i3 | 0) == 75) {
  _ml_replace(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0;
  if (HEAP32[i7 >> 2] & 1 | 0) _changed_bytes(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 0);
  do if ((HEAP32[26794] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
   if ((HEAP32[26795] | 0) >= ((HEAP32[i8 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0)) {
    HEAP32[26795] = (HEAP32[26795] | 0) + ((HEAP32[i13 >> 2] | 0) - ((HEAP32[i8 >> 2] | 0) - (HEAP32[i10 >> 2] | 0)));
    break;
   }
   if ((HEAP32[26795] | 0) >= ((HEAP32[i11 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) | 0)) HEAP32[26795] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
  } while (0);
  HEAP32[i18 >> 2] = 1;
 }
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i18 >> 2];
 i20 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i20 | 0;
}

function _helptags_one(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i6 + 40 | 0;
 i8 = i6 + 32 | 0;
 i9 = i6 + 16 | 0;
 i10 = i6 + 8 | 0;
 i11 = i6;
 i12 = i6 + 120 | 0;
 i13 = i6 + 116 | 0;
 i14 = i6 + 112 | 0;
 i15 = i6 + 108 | 0;
 i16 = i6 + 104 | 0;
 i17 = i6 + 100 | 0;
 i18 = i6 + 80 | 0;
 i19 = i6 + 76 | 0;
 i20 = i6 + 72 | 0;
 i21 = i6 + 68 | 0;
 i22 = i6 + 64 | 0;
 i23 = i6 + 60 | 0;
 i24 = i6 + 56 | 0;
 i25 = i6 + 52 | 0;
 i26 = i6 + 48 | 0;
 i27 = i6 + 44 | 0;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i27 >> 2] = _strlen(HEAP32[i12 >> 2] | 0) | 0;
 _strcpy(HEAP32[26885] | 0, HEAP32[i12 >> 2] | 0) | 0;
 _strcat(HEAP32[26885] | 0, 44332) | 0;
 _strcat(HEAP32[26885] | 0, HEAP32[i13 >> 2] | 0) | 0;
 i13 = (_gen_expand_wildcards(1, 107540, i19, i20, 34) | 0) == 0;
 if (i13 | (HEAP32[i19 >> 2] | 0) == 0) {
  if (HEAP32[26834] | 0) {
   STACKTOP = i6;
   return;
  }
  _emsg2(44338, HEAP32[26885] | 0) | 0;
  STACKTOP = i6;
  return;
 }
 _strcpy(HEAP32[26885] | 0, HEAP32[i12 >> 2] | 0) | 0;
 _add_pathsep(HEAP32[26885] | 0);
 _strcat(HEAP32[26885] | 0, HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = _fopen(HEAP32[26885] | 0, 94940) | 0;
 if (!(HEAP32[i16 >> 2] | 0)) {
  _emsg2(44357, HEAP32[26885] | 0) | 0;
  _FreeWild(HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0);
  STACKTOP = i6;
  return;
 }
 _ga_init2(i18, 4, 100);
 if (HEAP32[i15 >> 2] | 0) i5 = 8; else if ((_fullpathcmp(44390, HEAP32[i12 >> 2] | 0, 0) | 0) == 1) i5 = 8;
 do if ((i5 | 0) == 8) {
  if (!(_ga_grow(i18, 1) | 0)) {
   HEAP32[26834] = 1;
   break;
  }
  HEAP32[i24 >> 2] = _alloc(18 + (_strlen(HEAP32[i14 >> 2] | 0) | 0) | 0) | 0;
  if (!(HEAP32[i24 >> 2] | 0)) {
   HEAP32[26834] = 1;
   break;
  } else {
   i15 = HEAP32[i24 >> 2] | 0;
   HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
   _sprintf(i15, 44406, i11) | 0;
   HEAP32[(HEAP32[i18 + 16 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] = HEAP32[i24 >> 2];
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   break;
  }
 } while (0);
 HEAP32[i23 >> 2] = 0;
 while (1) {
  if ((HEAP32[i23 >> 2] | 0) >= (HEAP32[i19 >> 2] | 0)) break;
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  HEAP32[i17 >> 2] = _fopen(HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i23 >> 2] << 2) >> 2] | 0, 94911) | 0;
  i11 = HEAP32[(HEAP32[i20 >> 2] | 0) + (HEAP32[i23 >> 2] << 2) >> 2] | 0;
  if (!(HEAP32[i17 >> 2] | 0)) _emsg2(44422, i11) | 0; else {
   HEAP32[i26 >> 2] = i11 + (HEAP32[i27 >> 2] | 0) + 1;
   while (1) {
    if (_vim_fgets(HEAP32[26882] | 0, 1025, HEAP32[i17 >> 2] | 0) | 0) break;
    if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
    HEAP32[i21 >> 2] = _vim_strchr(HEAP32[26882] | 0, 42) | 0;
    L34 : while (1) {
     if (!(HEAP32[i21 >> 2] | 0)) break;
     HEAP32[i22 >> 2] = _vim_strbyte((HEAP32[i21 >> 2] | 0) + 1 | 0, 42) | 0;
     do if (HEAP32[i22 >> 2] | 0) if ((HEAP32[i22 >> 2] | 0) >>> 0 > ((HEAP32[i21 >> 2] | 0) + 1 | 0) >>> 0) {
      HEAP32[i24 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
      while (1) {
       if ((HEAP32[i24 >> 2] | 0) >>> 0 >= (HEAP32[i22 >> 2] | 0) >>> 0) break;
       if ((HEAPU8[HEAP32[i24 >> 2] >> 0] | 0 | 0) == 32) break;
       if ((HEAPU8[HEAP32[i24 >> 2] >> 0] | 0 | 0) == 9) break;
       if ((HEAPU8[HEAP32[i24 >> 2] >> 0] | 0 | 0) == 124) break;
       HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
      }
      if ((HEAP32[i24 >> 2] | 0) == (HEAP32[i22 >> 2] | 0)) {
       if ((HEAP32[i21 >> 2] | 0) != (HEAP32[26882] | 0)) if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + -1 >> 0] | 0 | 0) != 32) if ((HEAPU8[(HEAP32[i21 >> 2] | 0) + -1 >> 0] | 0 | 0) != 9) break;
       if (!(_vim_strchr(44458, HEAPU8[(HEAP32[i24 >> 2] | 0) + 1 >> 0] | 0) | 0)) if (HEAPU8[(HEAP32[i24 >> 2] | 0) + 1 >> 0] | 0 | 0) break;
       HEAP8[HEAP32[i22 >> 2] >> 0] = 0;
       HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
       if (!(_ga_grow(i18, 1) | 0)) {
        i5 = 38;
        break L34;
       }
       i11 = (HEAP32[i22 >> 2] | 0) - (HEAP32[i21 >> 2] | 0) | 0;
       HEAP32[i24 >> 2] = _alloc(i11 + (_strlen(HEAP32[i26 >> 2] | 0) | 0) + 2 | 0) | 0;
       if (!(HEAP32[i24 >> 2] | 0)) {
        i5 = 40;
        break L34;
       }
       HEAP32[(HEAP32[i18 + 16 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] = HEAP32[i24 >> 2];
       HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
       i11 = HEAP32[i24 >> 2] | 0;
       i14 = HEAP32[i26 >> 2] | 0;
       HEAP32[i10 >> 2] = HEAP32[i21 >> 2];
       HEAP32[i10 + 4 >> 2] = i14;
       _sprintf(i11, 44463, i10) | 0;
       HEAP32[i22 >> 2] = _vim_strchr((HEAP32[i22 >> 2] | 0) + 1 | 0, 42) | 0;
      }
     } while (0);
     HEAP32[i21 >> 2] = HEAP32[i22 >> 2];
    }
    if ((i5 | 0) == 38) {
     i5 = 0;
     HEAP32[26834] = 1;
    } else if ((i5 | 0) == 40) {
     i5 = 0;
     HEAP32[26834] = 1;
    }
    _line_breakcheck();
   }
   _fclose(HEAP32[i17 >> 2] | 0) | 0;
  }
  HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
 }
 _FreeWild(HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0);
 L65 : do if (!(HEAP32[26834] | 0)) {
  if (HEAP32[i18 + 16 >> 2] | 0) _sort_strings(HEAP32[i18 + 16 >> 2] | 0, HEAP32[i18 >> 2] | 0);
  HEAP32[i25 >> 2] = 1;
  while (1) {
   if ((HEAP32[i25 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break;
   HEAP32[i21 >> 2] = HEAP32[(HEAP32[i18 + 16 >> 2] | 0) + ((HEAP32[i25 >> 2] | 0) - 1 << 2) >> 2];
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[i18 + 16 >> 2] | 0) + (HEAP32[i25 >> 2] << 2) >> 2];
   while (1) {
    if ((HEAPU8[HEAP32[i21 >> 2] >> 0] | 0 | 0) != (HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0)) break;
    if ((HEAPU8[HEAP32[i22 >> 2] >> 0] | 0 | 0) == 9) {
     i5 = 54;
     break;
    }
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
    HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
   }
   if ((i5 | 0) == 54) {
    i5 = 0;
    HEAP8[HEAP32[i22 >> 2] >> 0] = 0;
    i20 = HEAP32[26885] | 0;
    i19 = HEAP32[i12 >> 2] | 0;
    i23 = (HEAP32[i22 >> 2] | 0) + 1 | 0;
    HEAP32[i9 >> 2] = HEAP32[(HEAP32[i18 + 16 >> 2] | 0) + (HEAP32[i25 >> 2] << 2) >> 2];
    HEAP32[i9 + 4 >> 2] = i19;
    HEAP32[i9 + 8 >> 2] = i23;
    _vim_snprintf(i20, 4096, 44469, i9) | 0;
    _emsg(HEAP32[26885] | 0) | 0;
    HEAP8[HEAP32[i22 >> 2] >> 0] = 9;
   }
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
  }
  HEAP32[i25 >> 2] = 0;
  while (1) {
   if ((HEAP32[i25 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break L65;
   HEAP32[i24 >> 2] = HEAP32[(HEAP32[i18 + 16 >> 2] | 0) + (HEAP32[i25 >> 2] << 2) >> 2];
   if (!(_strncmp(HEAP32[i24 >> 2] | 0, 44508, 10) | 0)) _fputs(HEAP32[i24 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0; else {
    i20 = HEAP32[i16 >> 2] | 0;
    HEAP32[i8 >> 2] = HEAP32[i24 >> 2];
    _fprintf(i20, 44519, i8) | 0;
    HEAP32[i21 >> 2] = HEAP32[i24 >> 2];
    while (1) {
     if ((HEAPU8[HEAP32[i21 >> 2] >> 0] | 0 | 0) == 9) break;
     if ((HEAPU8[HEAP32[i21 >> 2] >> 0] | 0 | 0) == 92) i5 = 65; else if ((HEAPU8[HEAP32[i21 >> 2] >> 0] | 0 | 0) == 47) i5 = 65;
     if ((i5 | 0) == 65) {
      i5 = 0;
      _putc(92, HEAP32[i16 >> 2] | 0) | 0;
     }
     _putc(HEAPU8[HEAP32[i21 >> 2] >> 0] | 0, HEAP32[i16 >> 2] | 0) | 0;
     HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
    }
    _fprintf(HEAP32[i16 >> 2] | 0, 44525, i7) | 0;
   }
   HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i25 >> 2] = 0;
 while (1) {
  if ((HEAP32[i25 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) break;
  _vim_free(HEAP32[(HEAP32[i18 + 16 >> 2] | 0) + (HEAP32[i25 >> 2] << 2) >> 2] | 0);
  HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 1;
 }
 _ga_clear(i18);
 _fclose(HEAP32[i16 >> 2] | 0) | 0;
 STACKTOP = i6;
 return;
}

function _ins_bs(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i5 + 68 | 0;
 i7 = i5 + 64 | 0;
 i8 = i5 + 60 | 0;
 i9 = i5 + 56 | 0;
 i10 = i5 + 52 | 0;
 i11 = i5 + 48 | 0;
 i12 = i5 + 44 | 0;
 i13 = i5 + 40 | 0;
 i14 = i5 + 36 | 0;
 i15 = i5 + 32 | 0;
 i16 = i5 + 28 | 0;
 i17 = i5 + 24 | 0;
 i18 = i5 + 20 | 0;
 i19 = i5 + 16 | 0;
 i20 = i5 + 12 | 0;
 i21 = i5 + 8 | 0;
 i22 = i5 + 4 | 0;
 i23 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) {
  if (HEAPU8[(_ml_get(1) | 0) >> 0] | 0) i4 = 3;
 } else i4 = 3;
 do if ((i4 | 0) == 3) {
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == 1) if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
  if (!(_can_bs(115) | 0)) {
   if (HEAP32[27126] | 0) break;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27124] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= (HEAP32[27125] | 0)) break;
  }
  i3 = (_can_bs(105) | 0) != 0;
  if (((i3 | (HEAP32[27126] | 0) != 0) ^ 1) & (HEAP32[26792] | 0) > 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= (HEAP32[26792] | 0)) break;
  if (!(_can_bs(111) | 0)) if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
  if (!(_stop_arrow() | 0)) {
   HEAP32[i6 >> 2] = 0;
   i24 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i24 | 0;
  }
  HEAP32[i16 >> 2] = _inindent(0) | 0;
  if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) {
   HEAP32[i10 >> 2] = HEAP32[27122];
   do if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) {
    if (_u_save((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 2 | 0, (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0) | 0) {
     HEAP32[27122] = (HEAP32[27122] | 0) + -1;
     HEAP32[27123] = _strlen(_ml_get(HEAP32[27122] | 0) | 0) | 0;
     break;
    }
    HEAP32[i6 >> 2] = 0;
    i24 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i24 | 0;
   } while (0);
   HEAP32[i11 >> 2] = -1;
   if (HEAP32[10180] & 64 | 0) HEAP32[i11 >> 2] = _replace_pop() | 0;
   if (HEAP32[10180] & 64 | 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= (HEAP32[i10 >> 2] | 0)) _dec_cursor() | 0; else i4 = 26; else i4 = 26;
   if ((i4 | 0) == 26) {
    HEAP32[i12 >> 2] = _gchar_cursor() | 0;
    i3 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
    if (_has_format_option(97) | 0) if (_has_format_option(119) | 0) {
     HEAP32[i18 >> 2] = _ml_get_buf(HEAP32[26773] | 0, HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 1) | 0;
     HEAP32[i19 >> 2] = _strlen(HEAP32[i18 >> 2] | 0) | 0;
     if ((HEAP32[i19 >> 2] | 0) > 0) if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) - 1) >> 0] | 0) == 32) HEAP8[(HEAP32[i18 >> 2] | 0) + ((HEAP32[i19 >> 2] | 0) - 1) >> 0] = 0;
    }
    _do_join(2, 0, 0, 0, 0) | 0;
    if (!(HEAP32[i12 >> 2] | 0)) if (_gchar_cursor() | 0) _inc_cursor() | 0;
    if (HEAP32[10180] & 64 | 0) {
     HEAP32[i17 >> 2] = HEAP32[10180];
     HEAP32[10180] = 1;
     while (1) {
      if ((HEAP32[i11 >> 2] | 0) <= 0) break;
      HEAP32[i13 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
      _ins_char(HEAP32[i11 >> 2] | 0);
      HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i13 >> 2];
      HEAP32[i11 >> 2] = _replace_pop() | 0;
     }
     _replace_pop_ins();
     HEAP32[10180] = HEAP32[i17 >> 2];
    }
   }
   HEAP32[26791] = 0;
  } else {
   HEAP32[i14 >> 2] = 0;
   if ((HEAP32[i8 >> 2] | 0) == 4) if (HEAP32[(HEAP32[26773] | 0) + 564 >> 2] | 0) {
    HEAP32[i13 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
    _beginline(1);
    if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) < (HEAP32[i13 >> 2] | 0)) HEAP32[i14 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i13 >> 2];
   }
   do if ((HEAP32[i8 >> 2] | 0) == 1) {
    if (!((HEAP32[26992] | 0) != 0 & (HEAP32[i16 >> 2] | 0) != 0)) {
     if (!(_get_sts_value() | 0)) {
      i4 = 69;
      break;
     }
     if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= 0) {
      i4 = 69;
      break;
     }
     if ((HEAPU8[(_ml_get_cursor() | 0) + -1 >> 0] | 0) != 9) {
      if ((HEAPU8[(_ml_get_cursor() | 0) + -1 >> 0] | 0) != 32) {
       i4 = 69;
       break;
      }
      if (!(HEAP32[27126] | 0 ? 1 : (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 0)) {
       i4 = 69;
       break;
      }
     }
    }
    HEAP32[HEAP32[i9 >> 2] >> 2] = 0;
    i3 = HEAP32[26881] | 0;
    _getvcol(i3 | 0, i3 + 24 | 0, i21, 0, 0);
    HEAP32[i23 >> 2] = HEAP32[i21 >> 2];
    _dec_cursor() | 0;
    i3 = HEAP32[26881] | 0;
    _getvcol(i3 | 0, i3 + 24 | 0, 0, 0, i22);
    _inc_cursor() | 0;
    if ((HEAP32[26992] | 0) != 0 & (HEAP32[i16 >> 2] | 0) != 0) HEAP32[i20 >> 2] = _get_sw_value(HEAP32[26773] | 0) | 0; else HEAP32[i20 >> 2] = _get_sts_value() | 0;
    i3 = HEAP32[i20 >> 2] | 0;
    HEAP32[i22 >> 2] = Math_imul((HEAP32[i22 >> 2] | 0) / (i3 | 0) | 0, i3 | 0) | 0;
    while (1) {
     if ((HEAP32[i21 >> 2] | 0) <= (HEAP32[i22 >> 2] | 0)) break;
     HEAP32[i11 >> 2] = HEAPU8[(_ml_get_cursor() | 0) + -1 >> 0];
     if (!((HEAP32[i11 >> 2] | 0) == 32 ? 1 : (HEAP32[i11 >> 2] | 0) == 9)) break;
     _ins_bs_one(i21);
    }
    while (1) {
     if ((HEAP32[i21 >> 2] | 0) >= (HEAP32[i22 >> 2] | 0)) break;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27124] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) < (HEAP32[27125] | 0)) HEAP32[27125] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
     _ins_str(97452);
     if (HEAP32[10180] & 64 | 0) _replace_push(0);
     i3 = HEAP32[26881] | 0;
     _getvcol(i3 | 0, i3 + 24 | 0, i21, 0, 0);
    }
    if ((HEAP32[i21 >> 2] | 0) >= (HEAP32[i23 >> 2] | 0)) _ins_bs_one(i21);
   } else i4 = 69; while (0);
   L94 : do if ((i4 | 0) == 69) {
    while (1) {
     _dec_cursor() | 0;
     HEAP32[i11 >> 2] = _gchar_cursor() | 0;
     if ((HEAP32[i8 >> 2] | 0) == 2) if (_vim_isspace(HEAP32[i11 >> 2] | 0) | 0) i4 = 74; else {
      HEAP32[i8 >> 2] = 3;
      HEAP32[i12 >> 2] = _vim_iswordc(HEAP32[i11 >> 2] | 0) | 0;
     } else i4 = 74;
     if ((i4 | 0) == 74) {
      i4 = 0;
      if ((HEAP32[i8 >> 2] | 0) == 3) {
       if (_vim_isspace(HEAP32[i11 >> 2] | 0) | 0) break;
       i3 = _vim_iswordc(HEAP32[i11 >> 2] | 0) | 0;
       if ((i3 | 0) != (HEAP32[i12 >> 2] | 0)) break;
      }
     }
     if (HEAP32[10180] & 64 | 0) _replace_do_bs(-1); else _del_char(0) | 0;
     if ((HEAP32[i8 >> 2] | 0) == 1) break L94;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= (HEAP32[i14 >> 2] | 0)) break L94;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27124] | 0)) continue; else if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) != (HEAP32[27125] | 0)) continue; else break L94;
    }
    _inc_cursor() | 0;
   } while (0);
   HEAP32[i15 >> 2] = 1;
  }
  if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= 1) HEAP32[26791] = 0;
  _AppendCharToRedobuff(HEAP32[i7 >> 2] | 0);
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27124] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) < (HEAP32[27125] | 0)) HEAP32[27125] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
  i3 = (_vim_strchr(HEAP32[26904] | 0, 118) | 0) != 0;
  if (i3 & (HEAP32[10175] | 0) == -1) HEAP32[10175] = HEAP32[(HEAP32[26881] | 0) + 132 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
  i24 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i24 | 0;
 } while (0);
 _vim_beep(2);
 HEAP32[i6 >> 2] = 0;
 i24 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i24 | 0;
}

function _jumpto_tag(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = i5 + 132 | 0;
 i9 = i5 + 128 | 0;
 i10 = i5 + 124 | 0;
 i11 = i5 + 120 | 0;
 i12 = i5 + 116 | 0;
 i13 = i5 + 112 | 0;
 i14 = i5 + 108 | 0;
 i15 = i5 + 104 | 0;
 i16 = i5 + 100 | 0;
 i17 = i5 + 96 | 0;
 i18 = i5 + 92 | 0;
 i19 = i5 + 88 | 0;
 i20 = i5 + 84 | 0;
 i21 = i5 + 80 | 0;
 i22 = i5 + 44 | 0;
 i23 = i5 + 40 | 0;
 i24 = i5 + 36 | 0;
 i25 = i5 + 32 | 0;
 i26 = i5 + 28 | 0;
 i27 = i5 + 24 | 0;
 i28 = i5 + 20 | 0;
 i29 = i5 + 16 | 0;
 i30 = i5 + 12 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i24 >> 2] = 8;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i27 >> 2] = (_matching_line_len(HEAP32[i8 >> 2] | 0) | 0) + 1;
 HEAP32[i28 >> 2] = _alloc(HEAP32[i27 >> 2] | 0) | 0;
 if (HEAP32[i28 >> 2] | 0) _memmove(HEAP32[i28 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i27 >> 2] | 0) | 0;
 HEAP32[i18 >> 2] = _alloc(512) | 0;
 if (!((HEAP32[i18 >> 2] | 0) == 0 | (HEAP32[i28 >> 2] | 0) == 0)) if (_parse_match(HEAP32[i28 >> 2] | 0, i22) | 0) {
  HEAP8[HEAP32[i22 + 12 >> 2] >> 0] = 0;
  HEAP32[i21 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAP32[i17 >> 2] = HEAP32[i22 + 16 >> 2];
  HEAP32[i19 >> 2] = HEAP32[i18 >> 2];
  while (1) {
   if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) break;
   if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) == 10) break;
   if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) == 13) break;
   i27 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i27 + 1;
   i8 = HEAP8[i27 >> 0] | 0;
   i27 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i27 + 1;
   HEAP8[i27 >> 0] = i8;
  }
  HEAP8[HEAP32[i19 >> 2] >> 0] = 0;
  HEAP32[i17 >> 2] = HEAP32[i18 >> 2];
  if ((_find_extra(i17) | 0) == 1) {
   HEAP32[i19 >> 2] = HEAP32[i17 >> 2];
   HEAP8[HEAP32[i19 >> 2] >> 0] = 0;
  }
  HEAP32[i21 >> 2] = _expand_tag_fname(HEAP32[i21 >> 2] | 0, HEAP32[i22 + 24 >> 2] | 0, 1) | 0;
  if (!(HEAP32[i21 >> 2] | 0)) {
   i31 = HEAP32[i28 >> 2] | 0;
   _vim_free(i31);
   i32 = HEAP32[i18 >> 2] | 0;
   _vim_free(i32);
   i33 = HEAP32[i20 >> 2] | 0;
   _vim_free(i33);
   i34 = HEAP32[i26 >> 2] | 0;
   _vim_free(i34);
   i35 = HEAP32[i23 >> 2] | 0;
   STACKTOP = i5;
   return i35 | 0;
  }
  HEAP32[i20 >> 2] = HEAP32[i21 >> 2];
  if ((_mch_getperm(HEAP32[i21 >> 2] | 0) | 0) < 0) if (!(_has_autocmd(9, HEAP32[i21 >> 2] | 0, 0) | 0)) {
   HEAP32[i23 >> 2] = 99;
   _vim_free(HEAP32[26509] | 0);
   i8 = _vim_strsave(HEAP32[i21 >> 2] | 0) | 0;
   HEAP32[26509] = i8;
   HEAP32[26509] = (HEAP32[26509] | 0) == 0 ? 114072 : i8;
   i31 = HEAP32[i28 >> 2] | 0;
   _vim_free(i31);
   i32 = HEAP32[i18 >> 2] | 0;
   _vim_free(i32);
   i33 = HEAP32[i20 >> 2] | 0;
   _vim_free(i33);
   i34 = HEAP32[i26 >> 2] | 0;
   _vim_free(i34);
   i35 = HEAP32[i23 >> 2] | 0;
   STACKTOP = i5;
   return i35 | 0;
  }
  HEAP32[26814] = (HEAP32[26814] | 0) + 1;
  HEAP32[26757] = 1;
  if (HEAP32[i10 >> 2] | 0) HEAP32[26854] = HEAP32[(HEAP32[26773] | 0) + 780 >> 2];
  if ((HEAP32[i24 >> 2] | 0) == 8) HEAP32[i24 >> 2] = _getfile(0, HEAP32[i21 >> 2] | 0, 0, 1, 0, HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[26854] = 0;
  if ((HEAP32[i24 >> 2] | 0) > 0) {
   HEAP32[26814] = (HEAP32[26814] | 0) + -1;
   if (!(HEAP32[26851] | 0)) {
    i31 = HEAP32[i28 >> 2] | 0;
    _vim_free(i31);
    i32 = HEAP32[i18 >> 2] | 0;
    _vim_free(i32);
    i33 = HEAP32[i20 >> 2] | 0;
    _vim_free(i33);
    i34 = HEAP32[i26 >> 2] | 0;
    _vim_free(i34);
    i35 = HEAP32[i23 >> 2] | 0;
    STACKTOP = i5;
    return i35 | 0;
   }
   _win_close(HEAP32[26881] | 0, 0) | 0;
   HEAP32[26851] = 0;
   i31 = HEAP32[i28 >> 2] | 0;
   _vim_free(i31);
   i32 = HEAP32[i18 >> 2] | 0;
   _vim_free(i32);
   i33 = HEAP32[i20 >> 2] | 0;
   _vim_free(i33);
   i34 = HEAP32[i26 >> 2] | 0;
   _vim_free(i34);
   i35 = HEAP32[i23 >> 2] | 0;
   STACKTOP = i5;
   return i35 | 0;
  }
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  HEAP32[26851] = 0;
  HEAP32[i11 >> 2] = HEAP32[26783];
  HEAP32[26783] = 1;
  HEAP32[i12 >> 2] = HEAP32[26946];
  HEAP32[26946] = 0;
  if (_vim_strchr(HEAP32[26904] | 0, 116) | 0) HEAP32[i25 >> 2] = 0; else HEAP32[i25 >> 2] = 1024;
  HEAP32[i17 >> 2] = HEAP32[i18 >> 2];
  if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) == 47) i4 = 27; else if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) == 63) i4 = 27;
  if ((i4 | 0) == 27) HEAP32[i17 >> 2] = (_skip_regexp((HEAP32[i18 >> 2] | 0) + 1 | 0, HEAPU8[HEAP32[i18 >> 2] >> 0] | 0, 0, 0) | 0) + 1;
  if ((HEAP32[i17 >> 2] | 0) >>> 0 > ((HEAP32[i19 >> 2] | 0) + -1 | 0) >>> 0) {
   HEAP32[i13 >> 2] = HEAP32[27038];
   HEAP32[i15 >> 2] = HEAP32[26933];
   HEAP32[i14 >> 2] = HEAP32[26991];
   HEAP32[27038] = 1;
   HEAP32[26933] = 0;
   HEAP32[26991] = 0;
   HEAP32[i16 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 0;
   do if (_do_search(0, HEAPU8[HEAP32[i18 >> 2] >> 0] | 0, (HEAP32[i18 >> 2] | 0) + 1 | 0, 1, HEAP32[i25 >> 2] | 0, 0, 0) | 0) HEAP32[i23 >> 2] = 1; else {
    HEAP32[i29 >> 2] = 1;
    HEAP32[26933] = 1;
    if (!(_do_search(0, HEAPU8[HEAP32[i18 >> 2] >> 0] | 0, (HEAP32[i18 >> 2] | 0) + 1 | 0, 1, HEAP32[i25 >> 2] | 0, 0, 0) | 0)) {
     HEAP32[i29 >> 2] = 2;
     _test_for_static(i22) | 0;
     HEAP32[i30 >> 2] = HEAPU8[HEAP32[i22 + 4 >> 2] >> 0];
     HEAP8[HEAP32[i22 + 4 >> 2] >> 0] = 0;
     i19 = HEAP32[i18 >> 2] | 0;
     HEAP32[i7 >> 2] = HEAP32[i22 >> 2];
     _sprintf(i19, 78410, i7) | 0;
     do if (!(_do_search(0, 47, HEAP32[i18 >> 2] | 0, 1, HEAP32[i25 >> 2] | 0, 0, 0) | 0)) {
      i19 = HEAP32[i18 >> 2] | 0;
      HEAP32[i6 >> 2] = HEAP32[i22 >> 2];
      _sprintf(i19, 78419, i6) | 0;
      if (_do_search(0, 47, HEAP32[i18 >> 2] | 0, 1, HEAP32[i25 >> 2] | 0, 0, 0) | 0) break;
      HEAP32[i29 >> 2] = 0;
     } while (0);
     HEAP8[HEAP32[i22 + 4 >> 2] >> 0] = HEAP32[i30 >> 2];
    }
    if (!(HEAP32[i29 >> 2] | 0)) {
     _emsg(78445) | 0;
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i16 >> 2];
     break;
    }
    do if (!((HEAP32[i29 >> 2] | 0) != 2 & (HEAP32[i15 >> 2] | 0) != 0)) {
     _msg(78474) | 0;
     if (!((HEAP32[27044] | 0) == 0 & (HEAP32[26809] | 0) == 0)) break;
     _out_flush();
     _ui_delay(1e3, 1);
    } while (0);
    HEAP32[i23 >> 2] = 1;
   } while (0);
   HEAP32[27038] = HEAP32[i13 >> 2];
   HEAP32[26933] = HEAP32[i15 >> 2];
   HEAP32[26991] = HEAP32[i14 >> 2];
   _check_cursor();
  } else {
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
   _do_cmdline_cmd(HEAP32[i18 >> 2] | 0) | 0;
   HEAP32[i23 >> 2] = 1;
  }
  if ((HEAP32[26783] | 0) == 2) _wait_return(1);
  HEAP32[26783] = HEAP32[i11 >> 2];
  HEAP32[26946] = HEAP32[i12 >> 2];
  if ((HEAP32[i24 >> 2] | 0) == -1) HEAP32[i23 >> 2] = 1;
  if ((HEAP32[i23 >> 2] | 0) == 1) if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) {
   i24 = HEAP32[26881] | 0;
   _set_topline(i24 | 0, HEAP32[i24 + 24 >> 2] | 0);
  }
  HEAP32[26814] = (HEAP32[26814] | 0) + -1;
  i31 = HEAP32[i28 >> 2] | 0;
  _vim_free(i31);
  i32 = HEAP32[i18 >> 2] | 0;
  _vim_free(i32);
  i33 = HEAP32[i20 >> 2] | 0;
  _vim_free(i33);
  i34 = HEAP32[i26 >> 2] | 0;
  _vim_free(i34);
  i35 = HEAP32[i23 >> 2] | 0;
  STACKTOP = i5;
  return i35 | 0;
 }
 HEAP32[i22 + 12 >> 2] = 0;
 i31 = HEAP32[i28 >> 2] | 0;
 _vim_free(i31);
 i32 = HEAP32[i18 >> 2] | 0;
 _vim_free(i32);
 i33 = HEAP32[i20 >> 2] | 0;
 _vim_free(i33);
 i34 = HEAP32[i26 >> 2] | 0;
 _vim_free(i34);
 i35 = HEAP32[i23 >> 2] | 0;
 STACKTOP = i5;
 return i35 | 0;
}

function _unix_expandpath(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i8 = i7 + 240 | 0;
 i9 = i7 + 236 | 0;
 i10 = i7 + 232 | 0;
 i11 = i7 + 228 | 0;
 i12 = i7 + 224 | 0;
 i13 = i7 + 220 | 0;
 i14 = i7 + 216 | 0;
 i15 = i7 + 212 | 0;
 i16 = i7 + 208 | 0;
 i17 = i7 + 204 | 0;
 i18 = i7 + 200 | 0;
 i19 = i7 + 196 | 0;
 i20 = i7 + 192 | 0;
 i21 = i7 + 104 | 0;
 i22 = i7 + 96 | 0;
 i23 = i7 + 92 | 0;
 i24 = i7 + 88 | 0;
 i25 = i7 + 84 | 0;
 i26 = i7 + 80 | 0;
 i27 = i7 + 76 | 0;
 i28 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i19 >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
 HEAP32[i25 >> 2] = 0;
 if ((HEAP32[26056] | 0) > 0) {
  _ui_breakcheck();
  if (HEAP32[26834] | 0) {
   HEAP32[i8 >> 2] = 0;
   i29 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i29 | 0;
  }
 }
 HEAP32[i14 >> 2] = _alloc((_strlen(HEAP32[i10 >> 2] | 0) | 0) + 250 + 5 | 0) | 0;
 if (!(HEAP32[i14 >> 2] | 0)) {
  HEAP32[i8 >> 2] = 0;
  i29 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i29 | 0;
 }
 HEAP32[i16 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i17 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i18 >> 2] = 0;
 HEAP32[i15 >> 2] = HEAP32[i10 >> 2];
 L10 : while (1) {
  if (!(HEAPU8[HEAP32[i15 >> 2] >> 0] | 0)) break;
  if ((HEAP32[i15 >> 2] | 0) >>> 0 >= ((HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) >>> 0) if (_rem_backslash(HEAP32[i15 >> 2] | 0) | 0) {
   i5 = HEAP32[i15 >> 2] | 0;
   HEAP32[i15 >> 2] = i5 + 1;
   i4 = HEAP8[i5 >> 0] | 0;
   i5 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i5 + 1;
   HEAP8[i5 >> 0] = i4;
  } else i6 = 11; else i6 = 11;
  do if ((i6 | 0) == 11) {
   i6 = 0;
   if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) == 47) {
    if (HEAP32[i18 >> 2] | 0) break L10;
    HEAP32[i17 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    break;
   }
   if ((HEAP32[i15 >> 2] | 0) >>> 0 >= ((HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) >>> 0) {
    if (!(_vim_strchr(60172, HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) | 0)) {
     if (HEAP32[26918] | 0) break;
     if (!(HEAP32[i12 >> 2] & 256)) break;
     if (!(_isalpha(HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) | 0)) break;
    }
    HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
   }
  } while (0);
  i4 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i4 + 1;
  i5 = HEAP8[i4 >> 0] | 0;
  i4 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = i5;
 }
 HEAP32[i18 >> 2] = HEAP32[i16 >> 2];
 HEAP8[HEAP32[i18 >> 2] >> 0] = 0;
 HEAP32[i16 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 while (1) {
  if ((HEAP32[i16 >> 2] | 0) >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) break;
  if (_rem_backslash(HEAP32[i16 >> 2] | 0) | 0) {
   i11 = HEAP32[i16 >> 2] | 0;
   i5 = i11 | 0;
   i4 = i11 + 1 | 0;
   _memmove(i5 | 0, i4 | 0, (_strlen((HEAP32[i16 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
  }
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
 while (1) {
  if ((HEAP32[i16 >> 2] | 0) >>> 0 >= (HEAP32[i18 >> 2] | 0) >>> 0) break;
  if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) == 42) if ((HEAPU8[(HEAP32[i16 >> 2] | 0) + 1 >> 0] | 0) == 42) HEAP32[i25 >> 2] = 1;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 HEAP32[i22 >> 2] = (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) == 46 & 1;
 HEAP32[i20 >> 2] = _file_pat_to_reg_pat(HEAP32[i17 >> 2] | 0, HEAP32[i18 >> 2] | 0, 0, 0) | 0;
 if (!(HEAP32[i20 >> 2] | 0)) {
  _vim_free(HEAP32[i14 >> 2] | 0);
  HEAP32[i8 >> 2] = 0;
  i29 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i29 | 0;
 }
 if (HEAP32[i12 >> 2] & 256 | 0) HEAP32[i21 + 84 >> 2] = 1; else HEAP32[i21 + 84 >> 2] = HEAP32[26918];
 if (HEAP32[i12 >> 2] & 1536 | 0) HEAP32[26810] = (HEAP32[26810] | 0) + 1;
 HEAP32[i21 >> 2] = _vim_regcomp(HEAP32[i20 >> 2] | 0, 1) | 0;
 if (HEAP32[i12 >> 2] & 1536 | 0) HEAP32[26810] = (HEAP32[26810] | 0) + -1;
 _vim_free(HEAP32[i20 >> 2] | 0);
 if (!(HEAP32[i21 >> 2] | 0)) if (!(HEAP32[i12 >> 2] & 1024)) {
  _vim_free(HEAP32[i14 >> 2] | 0);
  HEAP32[i8 >> 2] = 0;
  i29 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i29 | 0;
 }
 if ((HEAP32[i13 >> 2] | 0) == 0 & (HEAP32[26056] | 0) < 100 & (HEAP32[i25 >> 2] | 0) != 0) if (((HEAP32[i18 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0) == 2) if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) == 47) {
  _strcpy(HEAP32[i17 >> 2] | 0, (HEAP32[i15 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[26056] = (HEAP32[26056] | 0) + 1;
  i13 = HEAP32[i14 >> 2] | 0;
  _unix_expandpath(HEAP32[i9 >> 2] | 0, i13 | 0, (HEAP32[i17 >> 2] | 0) - i13 | 0, HEAP32[i12 >> 2] | 0, 1) | 0;
  HEAP32[26056] = (HEAP32[26056] | 0) + -1;
 }
 HEAP8[HEAP32[i17 >> 2] >> 0] = 0;
 HEAP32[i26 >> 2] = _opendir((HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) == 0 ? 98579 : HEAP32[i14 >> 2] | 0) | 0;
 if (HEAP32[i26 >> 2] | 0) {
  while (1) {
   HEAP32[i27 >> 2] = _readdir(HEAP32[i26 >> 2] | 0) | 0;
   if (!(HEAP32[i27 >> 2] | 0)) break;
   if (HEAP32[i22 >> 2] | 0 ? 1 : (HEAP8[(HEAP32[i27 >> 2] | 0) + 11 >> 0] | 0) != 46) i6 = 56; else if (HEAP32[i12 >> 2] & 16384 | 0) if (HEAP8[(HEAP32[i27 >> 2] | 0) + 11 + 1 >> 0] | 0) if ((HEAP8[(HEAP32[i27 >> 2] | 0) + 11 + 1 >> 0] | 0) != 46) i6 = 56; else if (HEAP8[(HEAP32[i27 >> 2] | 0) + 11 + 2 >> 0] | 0) i6 = 56;
   do if ((i6 | 0) == 56) {
    i6 = 0;
    if (HEAP32[i21 >> 2] | 0) {
     if (!(_vim_regexec(i21, (HEAP32[i27 >> 2] | 0) + 11 | 0, 0) | 0)) i6 = 58;
    } else i6 = 58;
    if ((i6 | 0) == 58) {
     i6 = 0;
     if (!(HEAP32[i12 >> 2] & 1024)) break;
     if (_vim_fnamencmp((HEAP32[i10 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) - (HEAP32[i14 >> 2] | 0)) | 0, (HEAP32[i27 >> 2] | 0) + 11 | 0, (HEAP32[i18 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0) | 0) break;
    }
    _strcpy(HEAP32[i17 >> 2] | 0, (HEAP32[i27 >> 2] | 0) + 11 | 0) | 0;
    HEAP32[i24 >> 2] = _strlen(HEAP32[i14 >> 2] | 0) | 0;
    if ((HEAP32[i25 >> 2] | 0) != 0 & (HEAP32[26056] | 0) < 100) {
     _strcpy((HEAP32[i14 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) | 0, 60179) | 0;
     _strcpy((HEAP32[i14 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) + 3 | 0, HEAP32[i15 >> 2] | 0) | 0;
     HEAP32[26056] = (HEAP32[26056] | 0) + 1;
     _unix_expandpath(HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0, (HEAP32[i24 >> 2] | 0) + 1 | 0, HEAP32[i12 >> 2] | 0, 1) | 0;
     HEAP32[26056] = (HEAP32[26056] | 0) + -1;
    }
    _strcpy((HEAP32[i14 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) | 0, HEAP32[i15 >> 2] | 0) | 0;
    if (_mch_has_exp_wildcard(HEAP32[i15 >> 2] | 0) | 0) {
     _unix_expandpath(HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0, (HEAP32[i24 >> 2] | 0) + 1 | 0, HEAP32[i12 >> 2] | 0, 0) | 0;
     break;
    }
    if (HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) _backslash_halve((HEAP32[i14 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) + 1 | 0);
    i13 = HEAP32[i14 >> 2] | 0;
    if (HEAP32[i12 >> 2] & 4096 | 0) {
     if ((_lstat(i13, i28) | 0) < 0) break;
    } else if ((_mch_getperm(i13) | 0) < 0) break;
    _addfile(HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i12 >> 2] | 0);
   } while (0);
  }
  _closedir(HEAP32[i26 >> 2] | 0) | 0;
 }
 _vim_free(HEAP32[i14 >> 2] | 0);
 _vim_regfree(HEAP32[i21 >> 2] | 0);
 HEAP32[i23 >> 2] = (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) - (HEAP32[i19 >> 2] | 0);
 if ((HEAP32[i23 >> 2] | 0) > 0) _qsort((HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i19 >> 2] << 2) | 0, HEAP32[i23 >> 2] | 0, 4, 5);
 HEAP32[i8 >> 2] = HEAP32[i23 >> 2];
 i29 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i29 | 0;
}

function _screen_ins_lines(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i8 + 56 | 0;
 i10 = i8 + 52 | 0;
 i11 = i8 + 48 | 0;
 i12 = i8 + 44 | 0;
 i13 = i8 + 40 | 0;
 i14 = i8 + 36 | 0;
 i15 = i8 + 32 | 0;
 i16 = i8 + 28 | 0;
 i17 = i8 + 24 | 0;
 i18 = i8 + 20 | 0;
 i19 = i8 + 16 | 0;
 i20 = i8 + 12 | 0;
 i21 = i8 + 8 | 0;
 i22 = i8 + 4 | 0;
 i23 = i8;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i23 >> 2] = _can_clear(HEAP32[26520] | 0) | 0;
 i6 = (_screen_valid(1) | 0) == 0;
 if (!(i6 | (HEAP32[i12 >> 2] | 0) <= 0)) if ((HEAP32[i12 >> 2] | 0) <= (HEAP32[27017] | 0)) if (!((HEAPU16[54222] | 0) != 0 & 0 > 0)) {
  HEAP32[i22 >> 2] = ((HEAP32[i11 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0) >= (HEAP32[i13 >> 2] | 0) & 1;
  if (HEAP32[i15 >> 2] | 0) if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) if (!(HEAPU8[HEAP32[26587] >> 0] | 0)) HEAP32[i21 >> 2] = 9; else i7 = 9; else i7 = 9; else i7 = 9;
  L9 : do if ((i7 | 0) == 9) {
   i6 = (_can_clear(HEAP32[26527] | 0) | 0) != 0;
   if (i6 & (HEAP32[i22 >> 2] | 0) != 0) {
    HEAP32[i21 >> 2] = 8;
    break;
   }
   do if (HEAPU8[HEAP32[26522] >> 0] | 0) {
    if ((HEAP32[i12 >> 2] | 0) <= 1) if (HEAPU8[HEAP32[26521] >> 0] | 0) break;
    HEAP32[i21 >> 2] = 1;
    break L9;
   } while (0);
   if ((HEAPU8[HEAP32[26524] >> 0] | 0) != 0 & (HEAP32[i22 >> 2] | 0) != 0) if (!((HEAP32[i12 >> 2] | 0) <= 1 & (HEAP32[i23 >> 2] | 0) != 0)) {
    HEAP32[i21 >> 2] = 2;
    break;
   }
   if (HEAPU8[HEAP32[26521] >> 0] | 0) {
    HEAP32[i21 >> 2] = 3;
    break;
   }
   if ((HEAP32[i23 >> 2] | 0) != 0 & (HEAP32[i22 >> 2] | 0) != 0) {
    HEAP32[i21 >> 2] = 4;
    break;
   }
   if ((HEAPU8[HEAP32[26523] >> 0] | 0) != 0 & (HEAP32[i22 >> 2] | 0) != 0) {
    HEAP32[i21 >> 2] = 5;
    break;
   }
   if ((HEAPU8[HEAP32[26553] >> 0] | 0) != 0 & (HEAP32[i11 >> 2] | 0) == 0) if ((HEAPU8[HEAP32[26529] >> 0] | 0) == 0 | (HEAP32[i23 >> 2] | 0) != 0) {
    HEAP32[i21 >> 2] = 6;
    break;
   }
   HEAP32[i9 >> 2] = 0;
   i24 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i8;
   return i24 | 0;
  } while (0);
  if ((HEAP32[i21 >> 2] | 0) == 8 | (HEAP32[i21 >> 2] | 0) == 2 | (HEAP32[i21 >> 2] | 0) == 4 | (HEAP32[i21 >> 2] | 0) == 5) {
   HEAP32[i9 >> 2] = _screen_del_lines(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, 0, 0, HEAP32[i15 >> 2] | 0) | 0;
   i24 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i8;
   return i24 | 0;
  }
  if (HEAP8[HEAP32[26530] >> 0] | 0) {
   i23 = HEAP32[i12 >> 2] | 0;
   i22 = HEAP32[i13 >> 2] | 0;
   _screen_del_lines(HEAP32[i10 >> 2] | 0, i22 - i23 | 0, i23 | 0, i22 | 0, 0, 0, HEAP32[i15 >> 2] | 0) | 0;
  }
  do if (((HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) > 0) i7 = 35; else {
   if (HEAP32[i15 >> 2] | 0) if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) {
    i7 = 35;
    break;
   }
   _clip_scroll_selection(0 - (HEAP32[i12 >> 2] | 0) | 0);
  } while (0);
  if ((i7 | 0) == 35) _clip_clear_selection(108396);
  _gui_dont_update_cursor(((HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0) <= (HEAP32[26638] | 0) & 1);
  if (HEAP32[i15 >> 2] | 0) if (HEAP32[(HEAP32[i15 >> 2] | 0) + 96 >> 2] | 0) if (HEAPU8[HEAP32[26587] >> 0] | 0) if (!(HEAPU8[HEAP32[26561] >> 0] | 0)) HEAP32[i20 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 96 >> 2];
  i22 = HEAP32[i11 >> 2] | 0;
  if (HEAPU8[HEAP32[26561] >> 0] | 0) HEAP32[i19 >> 2] = i22; else HEAP32[i19 >> 2] = i22 + (HEAP32[i10 >> 2] | 0);
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  HEAP32[i16 >> 2] = 0;
  while (1) {
   if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
   if (HEAP32[i15 >> 2] | 0) if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) {
    HEAP32[i17 >> 2] = (HEAP32[i13 >> 2] | 0) - 1 - (HEAP32[i16 >> 2] | 0);
    while (1) {
     i22 = (HEAP32[i17 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0;
     HEAP32[i17 >> 2] = i22;
     if ((i22 | 0) < (HEAP32[i11 >> 2] | 0)) break;
     i22 = HEAP32[i17 >> 2] | 0;
     _linecopy(i22 + (HEAP32[i12 >> 2] | 0) | 0, i22 | 0, HEAP32[i15 >> 2] | 0);
    }
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
    i22 = (_can_clear(97452) | 0) != 0;
    i23 = HEAP32[i15 >> 2] | 0;
    i6 = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i17 >> 2] << 2) >> 2] | 0) + (HEAP32[i23 + 96 >> 2] | 0) | 0;
    i5 = HEAP32[i23 + 100 >> 2] | 0;
    if (i22) _lineclear(i6, i5, HEAP32[i14 >> 2] | 0); else _lineinvalid(i6, i5);
    HEAP8[(HEAP32[26694] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] = 0;
   } else i7 = 56; else i7 = 56;
   do if ((i7 | 0) == 56) {
    i7 = 0;
    HEAP32[i17 >> 2] = (HEAP32[i13 >> 2] | 0) - 1 - (HEAP32[i16 >> 2] | 0);
    HEAP32[i18 >> 2] = HEAP32[(HEAP32[26693] | 0) + (HEAP32[i17 >> 2] << 2) >> 2];
    while (1) {
     i5 = (HEAP32[i17 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0;
     HEAP32[i17 >> 2] = i5;
     if ((i5 | 0) < (HEAP32[i11 >> 2] | 0)) break;
     i5 = HEAP32[26693] | 0;
     HEAP32[i5 + ((HEAP32[i17 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) << 2) >> 2] = HEAP32[i5 + (HEAP32[i17 >> 2] << 2) >> 2];
     i5 = HEAP32[26694] | 0;
     i6 = HEAP32[i17 >> 2] | 0;
     HEAP8[i5 + (i6 + (HEAP32[i12 >> 2] | 0)) >> 0] = HEAP8[i5 + i6 >> 0] | 0;
    }
    HEAP32[(HEAP32[26693] | 0) + ((HEAP32[i17 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) << 2) >> 2] = HEAP32[i18 >> 2];
    HEAP8[(HEAP32[26694] | 0) + ((HEAP32[i17 >> 2] | 0) + (HEAP32[i12 >> 2] | 0)) >> 0] = 0;
    i6 = (_can_clear(97452) | 0) != 0;
    i5 = HEAP32[i18 >> 2] | 0;
    i22 = HEAP32[10174] | 0;
    if (i6) {
     _lineclear(i5, i22, HEAP32[i14 >> 2] | 0);
     break;
    } else {
     _lineinvalid(i5, i22);
     break;
    }
   } while (0);
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  }
  _screen_stop_highlight();
  _windgoto(HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0);
  if (HEAP32[i14 >> 2] | 0) _screen_start_highlight(HEAP32[i14 >> 2] | 0);
  L92 : do if ((HEAP32[i21 >> 2] | 0) == 9) _redraw_block(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i15 >> 2] | 0); else {
   if ((HEAP32[i21 >> 2] | 0) == 1) {
    _term_append_lines(HEAP32[i12 >> 2] | 0);
    _screen_start();
    break;
   }
   HEAP32[i16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break L92;
    if ((HEAP32[i21 >> 2] | 0) == 3) {
     if ((HEAP32[i16 >> 2] | 0) != 0 & (HEAP32[i19 >> 2] | 0) != 0) _windgoto(HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0);
     _out_str(HEAP32[26521] | 0);
    } else _out_str(HEAP32[26553] | 0);
    _screen_start();
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   }
  } while (0);
  L109 : do if ((HEAP32[i21 >> 2] | 0) == 6) if (HEAPU8[HEAP32[26529] >> 0] | 0) {
   HEAP32[i16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break L109;
    _windgoto((HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) | 0, HEAP32[i20 >> 2] | 0);
    _out_str(HEAP32[26520] | 0);
    _screen_start();
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   }
  } while (0);
  _gui_can_update_cursor();
  if (HEAP32[26627] | 0) _out_flush();
  HEAP32[i9 >> 2] = 1;
  i24 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i24 | 0;
 }
 HEAP32[i9 >> 2] = 0;
 i24 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i8;
 return i24 | 0;
}

function _do_more_prompt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 i12 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 >> 2] = HEAP32[10180];
 HEAP32[i10 >> 2] = 0;
 if (!(HEAP32[27230] | 0)) if (!((HEAP32[10180] | 0) == 513 & (HEAP32[i5 >> 2] | 0) == 0)) {
  HEAP32[27230] = 1;
  L4 : do if ((HEAP32[i5 >> 2] | 0) == 71) {
   HEAP32[i10 >> 2] = _msg_sb_start(HEAP32[27231] | 0) | 0;
   HEAP32[i12 >> 2] = 0;
   while (1) {
    if (!(HEAP32[i10 >> 2] | 0 ? (HEAP32[i12 >> 2] | 0) < ((HEAP32[10173] | 0) - 2 | 0) : 0)) break L4;
    if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0)) break L4;
    HEAP32[i10 >> 2] = _msg_sb_start(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) | 0;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[10180] = 768;
  _setmouse();
  if (!(HEAP32[i5 >> 2] | 0)) _msg_moremsg(0);
  L14 : while (1) {
   if (HEAP32[i6 >> 2] | 0) {
    HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i6 >> 2] = 0;
   } else HEAP32[i8 >> 2] = _get_keystroke() | 0;
   HEAP32[i9 >> 2] = 0;
   i5 = HEAP32[i8 >> 2] | 0;
   L20 : do if ((i5 | 0) < 27) {
    if ((i5 | 0) < -11517) if ((i5 | 0) < -25195) if ((i5 | 0) < -25707) switch (i5 | 0) {
    case -30059:
     {
      i2 = 16;
      break L20;
      break;
     }
    default:
     {
      i2 = 29;
      break L20;
     }
    } else switch (i5 | 0) {
    case -25707:
     {
      i2 = 17;
      break L20;
      break;
     }
    default:
     {
      i2 = 29;
      break L20;
     }
    } else if ((i5 | 0) < -20587) switch (i5 | 0) {
    case -25195:
     {
      i2 = 16;
      break L20;
      break;
     }
    default:
     {
      i2 = 29;
      break L20;
     }
    } else switch (i5 | 0) {
    case -20587:
     {
      i2 = 20;
      break L20;
      break;
     }
    case -20075:
     {
      i2 = 21;
      break L20;
      break;
     }
    default:
     {
      i2 = 29;
      break L20;
     }
    }
    if ((i5 | 0) < 10) if ((i5 | 0) < 3) switch (i5 | 0) {
    case -11517:
     {
      i2 = 21;
      break L20;
      break;
     }
    default:
     {
      i2 = 29;
      break L20;
     }
    } else switch (i5 | 0) {
    case 8:
     {
      i2 = 16;
      break L20;
      break;
     }
    case 3:
     {
      i2 = 25;
      break L20;
      break;
     }
    default:
     {
      i2 = 29;
      break L20;
     }
    }
    switch (i5 | 0) {
    case 10:
    case 13:
     {
      i2 = 17;
      break L20;
      break;
     }
    case 25:
     break;
    default:
     {
      i2 = 29;
      break L20;
     }
    }
    if ((HEAPU16[54222] | 0) == 2) _clip_copy_modeless_selection(1);
    continue L14;
   } else switch (i5 | 0) {
   case 107:
    {
     i2 = 16;
     break L20;
     break;
    }
   case 106:
    {
     i2 = 17;
     break L20;
     break;
    }
   case 98:
    {
     i2 = 20;
     break L20;
     break;
    }
   case 102:
   case 32:
    {
     i2 = 21;
     break L20;
     break;
    }
   case 27:
   case 113:
    {
     i2 = 25;
     break L20;
     break;
    }
   case 117:
    {
     HEAP32[i9 >> 2] = 0 - ((HEAP32[10173] | 0) / 2 | 0);
     break L20;
     break;
    }
   case 100:
    {
     HEAP32[i9 >> 2] = (HEAP32[10173] | 0) / 2 | 0;
     break L20;
     break;
    }
   case 103:
    {
     HEAP32[i9 >> 2] = -999999;
     break L20;
     break;
    }
   case 71:
    {
     HEAP32[i9 >> 2] = 999999;
     HEAP32[10176] = 999999;
     break L20;
     break;
    }
   case 58:
    {
     _typeahead_noflush(58);
     HEAP32[26876] = (HEAP32[10173] | 0) - 1;
     HEAP32[26829] = 1;
     HEAP32[26721] = 0;
     i2 = 25;
     break L20;
     break;
    }
   default:
    {
     i2 = 29;
     break L20;
    }
   } while (0);
   if ((i2 | 0) == 16) {
    i2 = 0;
    HEAP32[i9 >> 2] = -1;
   } else if ((i2 | 0) == 17) {
    i2 = 0;
    HEAP32[i9 >> 2] = 1;
   } else if ((i2 | 0) == 20) {
    i2 = 0;
    HEAP32[i9 >> 2] = 0 - ((HEAP32[10173] | 0) - 1);
   } else if ((i2 | 0) == 21) {
    i2 = 0;
    HEAP32[i9 >> 2] = (HEAP32[10173] | 0) - 1;
   } else if ((i2 | 0) == 25) {
    i2 = 0;
    HEAP32[26834] = 1;
    HEAP32[26723] = 1;
    HEAP32[10176] = (HEAP32[10173] | 0) - 1;
   } else if ((i2 | 0) == 29) {
    i2 = 0;
    _msg_moremsg(1);
    continue;
   }
   if (!(HEAP32[i9 >> 2] | 0)) break;
   L60 : do if ((HEAP32[i9 >> 2] | 0) < 0) {
    do if (!(HEAP32[i10 >> 2] | 0)) HEAP32[i11 >> 2] = _msg_sb_start(HEAP32[27231] | 0) | 0; else if (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) {
     HEAP32[i11 >> 2] = _msg_sb_start(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) | 0;
     break;
    } else {
     HEAP32[i11 >> 2] = 0;
     break;
    } while (0);
    HEAP32[i12 >> 2] = 0;
    while (1) {
     if (HEAP32[i11 >> 2] | 0 ? (HEAP32[i12 >> 2] | 0) < ((HEAP32[10173] | 0) - 2 | 0) : 0) i13 = (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) != 0; else i13 = 0;
     i14 = HEAP32[i11 >> 2] | 0;
     if (!i13) break;
     HEAP32[i11 >> 2] = _msg_sb_start(HEAP32[i14 + 4 >> 2] | 0) | 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    }
    if (i14 | 0) if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) {
     HEAP32[i12 >> 2] = 0;
     while (1) {
      if ((HEAP32[i11 >> 2] | 0) == 0 ? 1 : (HEAP32[i12 >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) break;
      if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0)) break;
      HEAP32[i11 >> 2] = _msg_sb_start(HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) | 0;
      if (!(HEAP32[i10 >> 2] | 0)) HEAP32[i10 >> 2] = _msg_sb_start(HEAP32[27231] | 0) | 0; else HEAP32[i10 >> 2] = _msg_sb_start(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) | 0;
      HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
     }
     if ((HEAP32[i9 >> 2] | 0) == -1) if ((_screen_ins_lines(0, 0, 1, HEAP32[10173] | 0, 0, 0) | 0) == 1) _disp_sb_line(0, HEAP32[i11 >> 2] | 0) | 0; else i2 = 54; else i2 = 54;
     L90 : do if ((i2 | 0) == 54) {
      i2 = 0;
      _screenclear();
      HEAP32[i12 >> 2] = 0;
      while (1) {
       if (!(HEAP32[i11 >> 2] | 0)) break L90;
       if ((HEAP32[i12 >> 2] | 0) >= ((HEAP32[10173] | 0) - 1 | 0)) break L90;
       HEAP32[i11 >> 2] = _disp_sb_line(HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
       HEAP32[27044] = (HEAP32[27044] | 0) + 1;
       HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
      }
     } while (0);
     HEAP32[i9 >> 2] = 0;
    }
   } else while (1) {
    if (!((HEAP32[i9 >> 2] | 0) > 0 ? (HEAP32[i10 >> 2] | 0) != 0 : 0)) break L60;
    _msg_scroll_up();
    _inc_msg_scrolled();
    i5 = HEAP32[10173] | 0;
    _screen_fill(i5 - 2 | 0, i5 - 1 | 0, 0, HEAP32[10174] | 0, 32, 32, 0);
    HEAP32[i10 >> 2] = _disp_sb_line((HEAP32[10173] | 0) - 2 | 0, HEAP32[i10 >> 2] | 0) | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
   } while (0);
   if ((HEAP32[i9 >> 2] | 0) > 0) {
    i2 = 64;
    break;
   }
   i5 = HEAP32[10173] | 0;
   _screen_fill(i5 - 1 | 0, i5 | 0, 0, HEAP32[10174] | 0, 32, 32, 0);
   _msg_moremsg(0);
  }
  if ((i2 | 0) == 64) HEAP32[10176] = HEAP32[i9 >> 2];
  i9 = HEAP32[10173] | 0;
  _screen_fill(i9 - 1 | 0, i9 | 0, 0, HEAP32[10174] | 0, 32, 32, 0);
  HEAP32[10180] = HEAP32[i7 >> 2];
  _setmouse();
  if (HEAP32[26723] | 0) {
   HEAP32[26877] = (HEAP32[10173] | 0) - 1;
   HEAP32[27043] = 0;
  }
  HEAP32[27230] = 0;
  HEAP32[i4 >> 2] = 0;
  i15 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i15 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i15 | 0;
}

function _get_varp(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 L1 : do if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0)) HEAP32[i3 >> 2] = 0; else {
  i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0;
  L4 : do if ((i1 | 0) < 16405) {
   if ((i1 | 0) >= 16388) do switch (i1 | 0) {
   case 16389:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 584;
     break L1;
     break;
    }
   case 16388:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 592;
     break L1;
     break;
    }
   case 16390:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 596;
     break L1;
     break;
    }
   case 16391:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 580;
     break L1;
     break;
    }
   case 16393:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 600;
     break L1;
     break;
    }
   case 16394:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 604;
     break L1;
     break;
    }
   case 16396:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 608;
     break L1;
     break;
    }
   case 16399:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 620;
     break L1;
     break;
    }
   case 16402:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 624;
     break L1;
     break;
    }
   case 16401:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 628;
     break L1;
     break;
    }
   case 16400:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 632;
     break L1;
     break;
    }
   case 16403:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 552;
     break L1;
     break;
    }
   case 16404:
    {
     HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 556;
     break L1;
     break;
    }
   default:
    break L4;
   } while (0);
   if ((i1 | 0) < 8197) {
    if ((i1 | 0) >= 8194) switch (i1 | 0) {
    case 8194:
     {
      HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200 + 4;
      break L1;
      break;
     }
    case 8195:
     {
      HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200 + 8;
      break L1;
      break;
     }
    case 8196:
     {
      HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200 + 24;
      break L1;
      break;
     }
    default:
     break L4;
    }
    if ((i1 | 0) < 8192) {
     switch (i1 | 0) {
     case 0:
      break;
     default:
      break L4;
     }
     HEAP32[i3 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
     break L1;
    }
    switch (i1 | 0) {
    case 8192:
     {
      HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200;
      break L1;
      break;
     }
    case 8193:
     {
      HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200 + 40;
      break L1;
      break;
     }
    default:
     break L4;
    }
   } else {
    if ((i1 | 0) < 8200) switch (i1 | 0) {
    case 8198:
     {
      HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200 + 12;
      break L1;
      break;
     }
    case 8199:
     {
      HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200 + 16;
      break L1;
      break;
     }
    case 8197:
     {
      HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200 + 20;
      break L1;
      break;
     }
    default:
     break L4;
    }
    if ((i1 | 0) < 16384) {
     switch (i1 | 0) {
     case 8200:
      break;
     default:
      break L4;
     }
     HEAP32[i3 >> 2] = (HEAP32[26881] | 0) + 200 + 36;
     break L1;
    }
    switch (i1 | 0) {
    case 16384:
     {
      HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 564;
      break L1;
      break;
     }
    case 16386:
     {
      HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 588;
      break L1;
      break;
     }
    default:
     break L4;
    }
   }
  } else do switch (i1 | 0) {
  case 20491:
   {
    if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 732 >> 2] >> 0] | 0 | 0) i5 = (HEAP32[26773] | 0) + 732 | 0; else i5 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i5;
    break L1;
    break;
   }
  case 20503:
   {
    if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 648 >> 2] >> 0] | 0 | 0) i6 = (HEAP32[26773] | 0) + 648 | 0; else i6 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i6;
    break L1;
    break;
   }
  case 20509:
   {
    if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 736 >> 2] >> 0] | 0 | 0) i7 = (HEAP32[26773] | 0) + 736 | 0; else i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i7;
    break L1;
    break;
   }
  case 20481:
   {
    if ((HEAP32[(HEAP32[26773] | 0) + 740 >> 2] | 0) >= 0) i8 = (HEAP32[26773] | 0) + 740 | 0; else i8 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i8;
    break L1;
    break;
   }
  case 20516:
   {
    if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 744 >> 2] >> 0] | 0 | 0) i9 = (HEAP32[26773] | 0) + 744 | 0; else i9 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i9;
    break L1;
    break;
   }
  case 20517:
   {
    if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 748 >> 2] >> 0] | 0 | 0) i10 = (HEAP32[26773] | 0) + 748 | 0; else i10 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i10;
    break L1;
    break;
   }
  case 20483:
   {
    if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 572 >> 2] >> 0] | 0 | 0) i11 = (HEAP32[26773] | 0) + 572 | 0; else i11 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i11;
    break L1;
    break;
   }
  case 20494:
   {
    if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 644 >> 2] >> 0] | 0 | 0) i12 = (HEAP32[26773] | 0) + 644 | 0; else i12 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i12;
    break L1;
    break;
   }
  case 20522:
   {
    if ((HEAP32[(HEAP32[26773] | 0) + 756 >> 2] | 0) != -123456) i13 = (HEAP32[26773] | 0) + 756 | 0; else i13 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[i3 >> 2] = i13;
    break L1;
    break;
   }
  case 16405:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 636;
    break L1;
    break;
   }
  case 16406:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 640;
    break L1;
    break;
   }
  case 16409:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 656;
    break L1;
    break;
   }
  case 16411:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 652;
    break L1;
    break;
   }
  case 16408:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 664;
    break L1;
    break;
   }
  case 16410:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 108;
    break L1;
    break;
   }
  case 16412:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 668;
    break L1;
    break;
   }
  case 16414:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 672;
    break L1;
    break;
   }
  case 16415:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 676;
    break L1;
    break;
   }
  case 16416:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 684;
    break L1;
    break;
   }
  case 16417:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 688;
    break L1;
    break;
   }
  case 16419:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 696;
    break L1;
    break;
   }
  case 16418:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 680;
    break L1;
    break;
   }
  case 16422:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 700;
    break L1;
    break;
   }
  case 16423:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 708;
    break L1;
    break;
   }
  case 16424:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 704;
    break L1;
    break;
   }
  case 16427:
   {
    HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 720;
    break L1;
    break;
   }
  default:
   break L4;
  } while (0); while (0);
  _iemsg(63525);
  HEAP32[i3 >> 2] = (HEAP32[26773] | 0) + 720;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _nv_ident(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 24 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2;
 i7 = i2 + 88 | 0;
 i8 = i2 + 84 | 0;
 i9 = i2 + 80 | 0;
 i10 = i2 + 76 | 0;
 i11 = i2 + 72 | 0;
 i12 = i2 + 68 | 0;
 i13 = i2 + 64 | 0;
 i14 = i2 + 60 | 0;
 i15 = i2 + 56 | 0;
 i16 = i2 + 52 | 0;
 i17 = i2 + 48 | 0;
 i18 = i2 + 44 | 0;
 i19 = i2 + 40 | 0;
 i20 = i2 + 36 | 0;
 i21 = i2 + 32 | 0;
 i22 = i2 + 28 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) == 103) {
  HEAP32[i17 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i18 >> 2] = 1;
 } else {
  HEAP32[i17 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i18 >> 2] = 0;
 }
 if ((HEAP32[i17 >> 2] | 0) == 163) HEAP32[i17 >> 2] = 35;
 if ((HEAP32[i17 >> 2] | 0) == 93 | (HEAP32[i17 >> 2] | 0) == 29 | (HEAP32[i17 >> 2] | 0) == 75) {
  if (HEAP32[26788] | 0) if (!(_get_visual_text(HEAP32[i7 >> 2] | 0, i8, i16) | 0)) {
   STACKTOP = i2;
   return;
  }
  if (_checkclearopq(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) | 0) {
   STACKTOP = i2;
   return;
  }
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  i1 = HEAP32[i17 >> 2] | 0;
  i23 = _find_ident_under_cursor(i8, ((i1 | 0) == 42 ? 1 : (i1 | 0) == 35) ? 3 : 1) | 0;
  HEAP32[i16 >> 2] = i23;
  if (!i23) {
   _clearop(HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
   STACKTOP = i2;
   return;
  }
 }
 if (!(HEAPU8[HEAP32[(HEAP32[26773] | 0) + 648 >> 2] >> 0] | 0)) i24 = HEAP32[26939] | 0; else i24 = HEAP32[(HEAP32[26773] | 0) + 648 >> 2] | 0;
 HEAP32[i13 >> 2] = i24;
 if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) i25 = 1; else if (!(_strcmp(HEAP32[i13 >> 2] | 0, 61942) | 0)) i25 = 1; else i25 = (_strcmp(HEAP32[i13 >> 2] | 0, 71492) | 0) == 0;
 HEAP32[i14 >> 2] = i25 & 1;
 if (HEAP32[i14 >> 2] | 0) if (!(HEAPU8[(_skipwhite(HEAP32[i8 >> 2] | 0) | 0) >> 0] | 0)) {
  _emsg(61781) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i15 >> 2] = (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) == 58 & 1;
 i25 = (HEAP32[i16 >> 2] << 1) + 30 | 0;
 HEAP32[i10 >> 2] = i25 + (_strlen(HEAP32[i13 >> 2] | 0) | 0);
 HEAP32[i9 >> 2] = _alloc(HEAP32[i10 >> 2] | 0) | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP8[HEAP32[i9 >> 2] >> 0] = 0;
 L37 : do switch (HEAP32[i17 >> 2] | 0) {
 case 35:
 case 42:
  {
   _setpcmark();
   i25 = (HEAP32[i8 >> 2] | 0) - (_ml_get_curline() | 0) | 0;
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = i25;
   if (!(HEAP32[i18 >> 2] | 0)) if (_vim_iswordp(HEAP32[i8 >> 2] | 0) | 0) _strcpy(HEAP32[i9 >> 2] | 0, 61946) | 0;
   HEAP32[26736] = 1;
   break;
  }
 case 75:
  {
   if (HEAP32[i14 >> 2] | 0) {
    _strcpy(HEAP32[i9 >> 2] | 0, 61949) | 0;
    break L37;
   }
   if (HEAP32[i15 >> 2] | 0) {
    i25 = HEAP32[i9 >> 2] | 0;
    if (HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) {
     i24 = HEAP32[i10 >> 2] | 0;
     i23 = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0;
     HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
     HEAP32[i6 + 4 >> 2] = i23;
     _vim_snprintf(i25, i24, 61954, i6) | 0;
    } else _strcpy(i25, HEAP32[i13 >> 2] | 0) | 0;
    _strcat(HEAP32[i9 >> 2] | 0, 97452) | 0;
    break L37;
   }
   while (1) {
    if (!((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 45 ? (HEAP32[i16 >> 2] | 0) > 0 : 0)) break;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
   }
   if (!(HEAP32[i16 >> 2] | 0)) {
    _emsg(61781) | 0;
    _vim_free(HEAP32[i9 >> 2] | 0);
    STACKTOP = i2;
    return;
   }
   HEAP32[i21 >> 2] = (_strcmp(HEAP32[i13 >> 2] | 0, 61961) | 0) == 0 & 1;
   HEAP32[i22 >> 2] = (_strcmp(HEAP32[i13 >> 2] | 0, 67611) | 0) == 0 & 1;
   if (!(HEAP32[i22 >> 2] | 0 ? 1 : HEAP32[i21 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) == 0)) {
    i25 = HEAP32[i9 >> 2] | 0;
    HEAP32[i5 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) - 1;
    _sprintf(i25, 61965, i5) | 0;
   }
   _strcat(HEAP32[i9 >> 2] | 0, 61973) | 0;
   i25 = HEAP32[i9 >> 2] | 0;
   if (HEAP32[i22 >> 2] | 0 ? (HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) == 0 : 0) _strcat(i25, 61961) | 0; else _strcat(i25, HEAP32[i13 >> 2] | 0) | 0;
   _strcat(HEAP32[i9 >> 2] | 0, 97452) | 0;
   if (HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) if ((HEAP32[i21 >> 2] | 0) != 0 | (HEAP32[i22 >> 2] | 0) != 0) {
    i25 = HEAP32[i9 >> 2] | 0;
    i24 = i25 + (_strlen(HEAP32[i9 >> 2] | 0) | 0) | 0;
    HEAP32[i4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
    _sprintf(i24, 97769, i4) | 0;
    _strcat(HEAP32[i9 >> 2] | 0, 97452) | 0;
   }
   break;
  }
 case 93:
  {
   HEAP32[i19 >> 2] = 1;
   _strcpy(HEAP32[i9 >> 2] | 0, 61976) | 0;
   break;
  }
 default:
  {
   HEAP32[i19 >> 2] = 1;
   if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) {
    _strcpy(HEAP32[i9 >> 2] | 0, 61949) | 0;
    break L37;
   }
   i24 = HEAP32[i9 >> 2] | 0;
   if (HEAP32[i18 >> 2] | 0) {
    _strcpy(i24, 61980) | 0;
    break L37;
   } else {
    HEAP32[i3 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
    _sprintf(i24, 61984, i3) | 0;
    break L37;
   }
  }
 } while (0);
 do if ((HEAP32[i17 >> 2] | 0) != 75 | (HEAP32[i14 >> 2] | 0) != 0) {
  do if ((HEAP32[i17 >> 2] | 0) == 42) HEAP32[i20 >> 2] = HEAP32[26946] | 0 ? 61991 : 62e3; else {
   if ((HEAP32[i17 >> 2] | 0) == 35) {
    HEAP32[i20 >> 2] = HEAP32[26946] | 0 ? 62005 : 62015;
    break;
   }
   if (!(HEAP32[i19 >> 2] | 0)) {
    HEAP32[i20 >> 2] = 62027;
    break;
   }
   if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) {
    HEAP32[i20 >> 2] = 114072;
    break;
   } else {
    HEAP32[i20 >> 2] = 62021;
    break;
   }
  } while (0);
  i3 = HEAP32[i9 >> 2] | 0;
  HEAP32[i12 >> 2] = i3 + (_strlen(HEAP32[i9 >> 2] | 0) | 0);
  while (1) {
   i3 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i3 + -1;
   if ((i3 | 0) <= 0) break;
   if (_vim_strchr(HEAP32[i20 >> 2] | 0, HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0) {
    i3 = HEAP32[i12 >> 2] | 0;
    HEAP32[i12 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = 92;
   }
   i3 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i3 + 1;
   i4 = HEAP8[i3 >> 0] | 0;
   i3 = HEAP32[i12 >> 2] | 0;
   HEAP32[i12 >> 2] = i3 + 1;
   HEAP8[i3 >> 0] = i4;
  }
  HEAP8[HEAP32[i12 >> 2] >> 0] = 0;
 } else {
  HEAP32[i8 >> 2] = _vim_strnsave(HEAP32[i8 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
  i4 = HEAP32[i8 >> 2] | 0;
  if (HEAP32[i15 >> 2] | 0) HEAP32[i12 >> 2] = _vim_strsave_fnameescape(i4, 0) | 0; else HEAP32[i12 >> 2] = _vim_strsave_shellescape(i4, 1, 1) | 0;
  _vim_free(HEAP32[i8 >> 2] | 0);
  i4 = HEAP32[i9 >> 2] | 0;
  if (!(HEAP32[i12 >> 2] | 0)) {
   _vim_free(i4);
   STACKTOP = i2;
   return;
  }
  i3 = _strlen(HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i11 >> 2] = _realloc(i4, i3 + (_strlen(HEAP32[i12 >> 2] | 0) | 0) + 1 | 0) | 0;
  if (HEAP32[i11 >> 2] | 0) {
   HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
   _strcat(HEAP32[i9 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
   _vim_free(HEAP32[i12 >> 2] | 0);
   break;
  }
  _vim_free(HEAP32[i9 >> 2] | 0);
  _vim_free(HEAP32[i12 >> 2] | 0);
  STACKTOP = i2;
  return;
 } while (0);
 if ((HEAP32[i17 >> 2] | 0) == 42 | (HEAP32[i17 >> 2] | 0) == 35) {
  if (!(HEAP32[i18 >> 2] | 0)) if (_vim_iswordc(HEAPU8[(HEAP32[i8 >> 2] | 0) + -1 >> 0] | 0) | 0) _strcat(HEAP32[i9 >> 2] | 0, 62035) | 0;
  _normal_search(HEAP32[i7 >> 2] | 0, (HEAP32[i17 >> 2] | 0) == 42 ? 47 : 63, HEAP32[i9 >> 2] | 0, 0) | 0;
 } else _do_cmdline_cmd(HEAP32[i9 >> 2] | 0) | 0;
 _vim_free(HEAP32[i9 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _dispose_chunk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i3 = i1 + i2 | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 do if (!(i4 & 1)) {
  i5 = HEAP32[i1 >> 2] | 0;
  if (!(i4 & 3)) return;
  i6 = i1 + (0 - i5) | 0;
  i7 = i5 + i2 | 0;
  if ((HEAP32[27243] | 0) == (i6 | 0)) {
   i8 = i3 + 4 | 0;
   i9 = HEAP32[i8 >> 2] | 0;
   if ((i9 & 3 | 0) != 3) {
    i10 = i6;
    i11 = i7;
    break;
   }
   HEAP32[27240] = i7;
   HEAP32[i8 >> 2] = i9 & -2;
   HEAP32[i6 + 4 >> 2] = i7 | 1;
   HEAP32[i3 >> 2] = i7;
   return;
  }
  i9 = i5 >>> 3;
  if (i5 >>> 0 < 256) {
   i5 = HEAP32[i6 + 8 >> 2] | 0;
   i8 = HEAP32[i6 + 12 >> 2] | 0;
   if ((i8 | 0) == (i5 | 0)) {
    HEAP32[27238] = HEAP32[27238] & ~(1 << i9);
    i10 = i6;
    i11 = i7;
    break;
   } else {
    HEAP32[i5 + 12 >> 2] = i8;
    HEAP32[i8 + 8 >> 2] = i5;
    i10 = i6;
    i11 = i7;
    break;
   }
  }
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i8 | 0) == (i6 | 0)) {
   i9 = i6 + 16 | 0;
   i12 = i9 + 4 | 0;
   i13 = HEAP32[i12 >> 2] | 0;
   if (!i13) {
    i14 = HEAP32[i9 >> 2] | 0;
    if (!i14) {
     i15 = 0;
     break;
    } else {
     i16 = i14;
     i17 = i9;
    }
   } else {
    i16 = i13;
    i17 = i12;
   }
   i12 = i16;
   i13 = i17;
   while (1) {
    i9 = i12 + 20 | 0;
    i14 = HEAP32[i9 >> 2] | 0;
    if (!i14) {
     i18 = i12 + 16 | 0;
     i19 = HEAP32[i18 >> 2] | 0;
     if (!i19) break; else {
      i20 = i19;
      i21 = i18;
     }
    } else {
     i20 = i14;
     i21 = i9;
    }
    i12 = i20;
    i13 = i21;
   }
   HEAP32[i13 >> 2] = 0;
   i15 = i12;
  } else {
   i9 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i9 + 12 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i9;
   i15 = i8;
  } while (0);
  if (!i5) {
   i10 = i6;
   i11 = i7;
  } else {
   i8 = HEAP32[i6 + 28 >> 2] | 0;
   i9 = 109256 + (i8 << 2) | 0;
   if ((HEAP32[i9 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i9 >> 2] = i15;
    if (!i15) {
     HEAP32[27239] = HEAP32[27239] & ~(1 << i8);
     i10 = i6;
     i11 = i7;
     break;
    }
   } else {
    i8 = i5 + 16 | 0;
    HEAP32[((HEAP32[i8 >> 2] | 0) == (i6 | 0) ? i8 : i5 + 20 | 0) >> 2] = i15;
    if (!i15) {
     i10 = i6;
     i11 = i7;
     break;
    }
   }
   HEAP32[i15 + 24 >> 2] = i5;
   i8 = i6 + 16 | 0;
   i9 = HEAP32[i8 >> 2] | 0;
   if (i9 | 0) {
    HEAP32[i15 + 16 >> 2] = i9;
    HEAP32[i9 + 24 >> 2] = i15;
   }
   i9 = HEAP32[i8 + 4 >> 2] | 0;
   if (!i9) {
    i10 = i6;
    i11 = i7;
   } else {
    HEAP32[i15 + 20 >> 2] = i9;
    HEAP32[i9 + 24 >> 2] = i15;
    i10 = i6;
    i11 = i7;
   }
  }
 } else {
  i10 = i1;
  i11 = i2;
 } while (0);
 i2 = i3 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 2)) {
  if ((HEAP32[27244] | 0) == (i3 | 0)) {
   i15 = (HEAP32[27241] | 0) + i11 | 0;
   HEAP32[27241] = i15;
   HEAP32[27244] = i10;
   HEAP32[i10 + 4 >> 2] = i15 | 1;
   if ((i10 | 0) != (HEAP32[27243] | 0)) return;
   HEAP32[27243] = 0;
   HEAP32[27240] = 0;
   return;
  }
  if ((HEAP32[27243] | 0) == (i3 | 0)) {
   i15 = (HEAP32[27240] | 0) + i11 | 0;
   HEAP32[27240] = i15;
   HEAP32[27243] = i10;
   HEAP32[i10 + 4 >> 2] = i15 | 1;
   HEAP32[i10 + i15 >> 2] = i15;
   return;
  }
  i15 = (i1 & -8) + i11 | 0;
  i21 = i1 >>> 3;
  do if (i1 >>> 0 < 256) {
   i20 = HEAP32[i3 + 8 >> 2] | 0;
   i17 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i17 | 0) == (i20 | 0)) {
    HEAP32[27238] = HEAP32[27238] & ~(1 << i21);
    break;
   } else {
    HEAP32[i20 + 12 >> 2] = i17;
    HEAP32[i17 + 8 >> 2] = i20;
    break;
   }
  } else {
   i20 = HEAP32[i3 + 24 >> 2] | 0;
   i17 = HEAP32[i3 + 12 >> 2] | 0;
   do if ((i17 | 0) == (i3 | 0)) {
    i16 = i3 + 16 | 0;
    i4 = i16 + 4 | 0;
    i9 = HEAP32[i4 >> 2] | 0;
    if (!i9) {
     i8 = HEAP32[i16 >> 2] | 0;
     if (!i8) {
      i22 = 0;
      break;
     } else {
      i23 = i8;
      i24 = i16;
     }
    } else {
     i23 = i9;
     i24 = i4;
    }
    i4 = i23;
    i9 = i24;
    while (1) {
     i16 = i4 + 20 | 0;
     i8 = HEAP32[i16 >> 2] | 0;
     if (!i8) {
      i14 = i4 + 16 | 0;
      i18 = HEAP32[i14 >> 2] | 0;
      if (!i18) break; else {
       i25 = i18;
       i26 = i14;
      }
     } else {
      i25 = i8;
      i26 = i16;
     }
     i4 = i25;
     i9 = i26;
    }
    HEAP32[i9 >> 2] = 0;
    i22 = i4;
   } else {
    i12 = HEAP32[i3 + 8 >> 2] | 0;
    HEAP32[i12 + 12 >> 2] = i17;
    HEAP32[i17 + 8 >> 2] = i12;
    i22 = i17;
   } while (0);
   if (i20 | 0) {
    i17 = HEAP32[i3 + 28 >> 2] | 0;
    i7 = 109256 + (i17 << 2) | 0;
    if ((HEAP32[i7 >> 2] | 0) == (i3 | 0)) {
     HEAP32[i7 >> 2] = i22;
     if (!i22) {
      HEAP32[27239] = HEAP32[27239] & ~(1 << i17);
      break;
     }
    } else {
     i17 = i20 + 16 | 0;
     HEAP32[((HEAP32[i17 >> 2] | 0) == (i3 | 0) ? i17 : i20 + 20 | 0) >> 2] = i22;
     if (!i22) break;
    }
    HEAP32[i22 + 24 >> 2] = i20;
    i17 = i3 + 16 | 0;
    i7 = HEAP32[i17 >> 2] | 0;
    if (i7 | 0) {
     HEAP32[i22 + 16 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i22;
    }
    i7 = HEAP32[i17 + 4 >> 2] | 0;
    if (i7 | 0) {
     HEAP32[i22 + 20 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i22;
    }
   }
  } while (0);
  HEAP32[i10 + 4 >> 2] = i15 | 1;
  HEAP32[i10 + i15 >> 2] = i15;
  if ((i10 | 0) == (HEAP32[27243] | 0)) {
   HEAP32[27240] = i15;
   return;
  } else i27 = i15;
 } else {
  HEAP32[i2 >> 2] = i1 & -2;
  HEAP32[i10 + 4 >> 2] = i11 | 1;
  HEAP32[i10 + i11 >> 2] = i11;
  i27 = i11;
 }
 i11 = i27 >>> 3;
 if (i27 >>> 0 < 256) {
  i1 = 108992 + (i11 << 1 << 2) | 0;
  i2 = HEAP32[27238] | 0;
  i15 = 1 << i11;
  if (!(i2 & i15)) {
   HEAP32[27238] = i2 | i15;
   i28 = i1;
   i29 = i1 + 8 | 0;
  } else {
   i15 = i1 + 8 | 0;
   i28 = HEAP32[i15 >> 2] | 0;
   i29 = i15;
  }
  HEAP32[i29 >> 2] = i10;
  HEAP32[i28 + 12 >> 2] = i10;
  HEAP32[i10 + 8 >> 2] = i28;
  HEAP32[i10 + 12 >> 2] = i1;
  return;
 }
 i1 = i27 >>> 8;
 if (!i1) i30 = 0; else if (i27 >>> 0 > 16777215) i30 = 31; else {
  i28 = (i1 + 1048320 | 0) >>> 16 & 8;
  i29 = i1 << i28;
  i1 = (i29 + 520192 | 0) >>> 16 & 4;
  i15 = i29 << i1;
  i29 = (i15 + 245760 | 0) >>> 16 & 2;
  i2 = 14 - (i1 | i28 | i29) + (i15 << i29 >>> 15) | 0;
  i30 = i27 >>> (i2 + 7 | 0) & 1 | i2 << 1;
 }
 i2 = 109256 + (i30 << 2) | 0;
 HEAP32[i10 + 28 >> 2] = i30;
 HEAP32[i10 + 20 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 i29 = HEAP32[27239] | 0;
 i15 = 1 << i30;
 if (!(i29 & i15)) {
  HEAP32[27239] = i29 | i15;
  HEAP32[i2 >> 2] = i10;
  HEAP32[i10 + 24 >> 2] = i2;
  HEAP32[i10 + 12 >> 2] = i10;
  HEAP32[i10 + 8 >> 2] = i10;
  return;
 }
 i15 = HEAP32[i2 >> 2] | 0;
 L104 : do if ((HEAP32[i15 + 4 >> 2] & -8 | 0) == (i27 | 0)) i31 = i15; else {
  i2 = i27 << ((i30 | 0) == 31 ? 0 : 25 - (i30 >>> 1) | 0);
  i29 = i15;
  while (1) {
   i32 = i29 + 16 + (i2 >>> 31 << 2) | 0;
   i28 = HEAP32[i32 >> 2] | 0;
   if (!i28) break;
   if ((HEAP32[i28 + 4 >> 2] & -8 | 0) == (i27 | 0)) {
    i31 = i28;
    break L104;
   } else {
    i2 = i2 << 1;
    i29 = i28;
   }
  }
  HEAP32[i32 >> 2] = i10;
  HEAP32[i10 + 24 >> 2] = i29;
  HEAP32[i10 + 12 >> 2] = i10;
  HEAP32[i10 + 8 >> 2] = i10;
  return;
 } while (0);
 i32 = i31 + 8 | 0;
 i27 = HEAP32[i32 >> 2] | 0;
 HEAP32[i27 + 12 >> 2] = i10;
 HEAP32[i32 >> 2] = i10;
 HEAP32[i10 + 8 >> 2] = i27;
 HEAP32[i10 + 12 >> 2] = i31;
 HEAP32[i10 + 24 >> 2] = 0;
 return;
}

function _nv_zet(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 L1 : do if (((HEAP32[i7 >> 2] | 0) - 48 | 0) >>> 0 < 10) {
  if (_checkclearop(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) {
   STACKTOP = i3;
   return;
  }
  HEAP32[i5 >> 2] = (HEAP32[i7 >> 2] | 0) - 48;
  while (1) {
   HEAP32[26802] = (HEAP32[26802] | 0) + 1;
   HEAP32[26804] = (HEAP32[26804] | 0) + 1;
   HEAP32[i7 >> 2] = _plain_vgetc() | 0;
   HEAP32[26802] = (HEAP32[26802] | 0) + -1;
   HEAP32[26804] = (HEAP32[26804] | 0) + -1;
   if ((HEAP32[i7 >> 2] | 0) == -17515 | (HEAP32[i7 >> 2] | 0) == -20733) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) / 10 | 0; else {
    if (((HEAP32[i7 >> 2] | 0) - 48 | 0) >>> 0 >= 10) break;
    HEAP32[i5 >> 2] = ((HEAP32[i5 >> 2] | 0) * 10 | 0) + ((HEAP32[i7 >> 2] | 0) - 48);
   }
  }
  do if ((HEAP32[i7 >> 2] | 0) == 13) {
   HEAP32[26757] = 1;
   _win_setheight(HEAP32[i5 >> 2] | 0);
  } else {
   if (!((HEAP32[i7 >> 2] | 0) == 108 | (HEAP32[i7 >> 2] | 0) == 104 | (HEAP32[i7 >> 2] | 0) == -27755 | (HEAP32[i7 >> 2] | 0) == -29291)) {
    _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
    break;
   }
   if (HEAP32[i5 >> 2] | 0) i8 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0; else i8 = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] = i8;
   break L1;
  } while (0);
  HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] = 0;
  STACKTOP = i3;
  return;
 } while (0);
 if (_checkclearop(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i3;
  return;
 }
 if (_vim_strchr(61716, HEAP32[i7 >> 2] | 0) | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  _setpcmark();
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2]; else HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2];
  _check_cursor_col();
 }
 i8 = HEAP32[i7 >> 2] | 0;
 L39 : do if ((i8 | 0) < 76) {
  L41 : do if ((i8 | 0) < 13) {
   if ((i8 | 0) < -16715) switch (i8 | 0) {
   case -27755:
    {
     i2 = 43;
     break L39;
     break;
    }
   case -29291:
    {
     i2 = 49;
     break L39;
     break;
    }
   default:
    {
     i2 = 63;
     break L39;
    }
   }
   if ((i8 | 0) < 10) switch (i8 | 0) {
   case -16715:
    {
     break L41;
     break;
    }
   default:
    {
     i2 = 63;
     break L39;
    }
   } else switch (i8 | 0) {
   case 10:
    {
     break L41;
     break;
    }
   default:
    {
     i2 = 63;
     break L39;
    }
   }
  } else switch (i8 | 0) {
  case 45:
   {
    i2 = 40;
    break L39;
    break;
   }
  case 13:
   {
    break L41;
    break;
   }
  case 43:
   {
    if (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) break L41;
    _validate_botline();
    if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
     HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
     break L41;
    } else {
     i7 = HEAP32[26881] | 0;
     HEAP32[i7 + 24 >> 2] = HEAP32[i7 + 144 >> 2];
     break L41;
    }
    break;
   }
  case 46:
   {
    _beginline(5);
    i2 = 34;
    break L39;
    break;
   }
  case 72:
   {
    i7 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
    HEAP32[i7 >> 2] = Math_imul(HEAP32[i7 >> 2] | 0, (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) / 2 | 0) | 0;
    i2 = 43;
    break L39;
    break;
   }
  default:
   {
    i2 = 63;
    break L39;
   }
  } while (0);
  _beginline(5);
  i2 = 32;
 } else switch (i8 | 0) {
 case 116:
  {
   i2 = 32;
   break L39;
   break;
  }
 case 122:
  {
   i2 = 34;
   break L39;
   break;
  }
 case 98:
  {
   break L39;
   break;
  }
 case 104:
  {
   i2 = 43;
   break L39;
   break;
  }
 case 108:
  {
   i2 = 49;
   break L39;
   break;
  }
 case 94:
  {
   if (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) {
    _scroll_cursor_bot(0, 1);
    i7 = HEAP32[26881] | 0;
    HEAP32[i7 + 24 >> 2] = HEAP32[i7 + 68 >> 2];
    i2 = 40;
    break L39;
   }
   i7 = HEAP32[26881] | 0;
   if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) == 1) {
    HEAP32[i7 + 24 >> 2] = 1;
    i2 = 40;
    break L39;
   } else {
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = (HEAP32[i7 + 68 >> 2] | 0) - 1;
    i2 = 40;
    break L39;
   }
   break;
  }
 case 76:
  {
   i7 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
   HEAP32[i7 >> 2] = Math_imul(HEAP32[i7 >> 2] | 0, (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) / 2 | 0) | 0;
   i2 = 49;
   break L39;
   break;
  }
 case 115:
  {
   if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) {
    STACKTOP = i3;
    return;
   }
   i7 = HEAP32[26881] | 0;
   _getvcol(i7 | 0, i7 + 24 | 0, i6, 0, 0);
   if ((HEAP32[i6 >> 2] | 0) > (HEAP32[26990] | 0)) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[26990] | 0); else HEAP32[i6 >> 2] = 0;
   if ((HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) {
    STACKTOP = i3;
    return;
   }
   HEAP32[(HEAP32[26881] | 0) + 76 >> 2] = HEAP32[i6 >> 2];
   _redraw_later(40);
   STACKTOP = i3;
   return;
  }
 case 101:
  {
   if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) {
    STACKTOP = i3;
    return;
   }
   i7 = HEAP32[26881] | 0;
   _getvcol(i7 | 0, i7 + 24 | 0, 0, 0, i6);
   HEAP32[i5 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (_curwin_col_off() | 0);
   if (((HEAP32[i6 >> 2] | 0) + (HEAP32[26990] | 0) | 0) < (HEAP32[i5 >> 2] | 0)) HEAP32[i6 >> 2] = 0; else HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[26990] | 0) - (HEAP32[i5 >> 2] | 0) + 1;
   if ((HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) {
    STACKTOP = i3;
    return;
   }
   HEAP32[(HEAP32[26881] | 0) + 76 >> 2] = HEAP32[i6 >> 2];
   _redraw_later(40);
   STACKTOP = i3;
   return;
  }
 default:
  {
   i2 = 63;
   break L39;
  }
 } while (0);
 if ((i2 | 0) == 32) {
  _scroll_cursor_top(0, 1);
  _redraw_later(10);
  _set_fraction(HEAP32[26881] | 0);
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 34) {
  _scroll_cursor_halfway(1);
  _redraw_later(10);
  _set_fraction(HEAP32[26881] | 0);
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 40) _beginline(5); else if ((i2 | 0) == 43) {
  if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 76 >> 2] = 0; else {
   i6 = (HEAP32[26881] | 0) + 76 | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0);
  }
  _leftcol_changed() | 0;
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 49) {
  if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
  i6 = (HEAP32[26881] | 0) + 76 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0);
  _leftcol_changed() | 0;
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 63) {
  _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 _scroll_cursor_bot(0, 1);
 _redraw_later(10);
 _set_fraction(HEAP32[26881] | 0);
 STACKTOP = i3;
 return;
}

function _file_pat_to_reg_pat(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 44 | 0;
 i7 = i5 + 40 | 0;
 i8 = i5 + 36 | 0;
 i9 = i5 + 32 | 0;
 i10 = i5 + 24 | 0;
 i11 = i5 + 20 | 0;
 i12 = i5 + 16 | 0;
 i13 = i5 + 12 | 0;
 i14 = i5 + 8 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i5 + 28 >> 2] = i4;
 HEAP32[i10 >> 2] = 2;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 1;
 if (HEAP32[i9 >> 2] | 0) HEAP8[HEAP32[i9 >> 2] >> 0] = 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  i4 = HEAP32[i7 >> 2] | 0;
  HEAP32[i8 >> 2] = i4 + (_strlen(HEAP32[i7 >> 2] | 0) | 0);
 }
 HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) >>> 0 >= (HEAP32[i8 >> 2] | 0) >>> 0) break;
  switch (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) {
  case 126:
  case 125:
  case 123:
  case 44:
  case 46:
  case 42:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 2;
    break;
   }
  default:
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 HEAP32[i12 >> 2] = _alloc((HEAP32[i10 >> 2] | 0) + 1 | 0) | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i17 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i17 | 0;
 }
 HEAP32[i14 >> 2] = 0;
 L19 : do if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 42) while (1) {
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) != 42) break L19;
  if ((HEAP32[i7 >> 2] | 0) >>> 0 >= ((HEAP32[i8 >> 2] | 0) + -1 | 0) >>> 0) break L19;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } else {
  i10 = HEAP32[i12 >> 2] | 0;
  i4 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i4 + 1;
  HEAP8[i10 + i4 >> 0] = 94;
 } while (0);
 HEAP32[i11 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
 if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 42) {
  while (1) {
   if (((HEAP32[i11 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) <= 0) break;
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 42) break;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
  }
  HEAP32[i16 >> 2] = 0;
 }
 HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if (!((HEAP32[i15 >> 2] | 0) >= 0 ? (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) != 0 : 0)) break;
  if ((HEAP32[i13 >> 2] | 0) >>> 0 > (HEAP32[i11 >> 2] | 0) >>> 0) break;
  L40 : do switch (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) {
  case 42:
   {
    i7 = HEAP32[i12 >> 2] | 0;
    i8 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i8 + 1;
    HEAP8[i7 + i8 >> 0] = 46;
    i8 = HEAP32[i12 >> 2] | 0;
    i7 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i7 + 1;
    HEAP8[i8 + i7 >> 0] = 42;
    while (1) {
     if ((HEAPU8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] | 0 | 0) != 42) break L40;
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
    }
    break;
   }
  case 126:
  case 46:
   {
    i7 = HEAP32[i12 >> 2] | 0;
    i8 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i8 + 1;
    HEAP8[i7 + i8 >> 0] = 92;
    i8 = HEAP8[HEAP32[i13 >> 2] >> 0] | 0;
    i7 = HEAP32[i12 >> 2] | 0;
    i4 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i4 + 1;
    HEAP8[i7 + i4 >> 0] = i8;
    break;
   }
  case 63:
   {
    i8 = HEAP32[i12 >> 2] | 0;
    i4 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i4 + 1;
    HEAP8[i8 + i4 >> 0] = 46;
    break;
   }
  case 92:
   {
    if (HEAPU8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] | 0 | 0) {
     i4 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
     HEAP32[i13 >> 2] = i4;
     if ((HEAPU8[i4 >> 0] | 0 | 0) == 63) {
      i4 = HEAP32[i12 >> 2] | 0;
      i8 = HEAP32[i14 >> 2] | 0;
      HEAP32[i14 >> 2] = i8 + 1;
      HEAP8[i4 + i8 >> 0] = 63;
      break L40;
     }
     if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) != 44) if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) != 37) if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) != 35) if (!(_vim_isspace(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) | 0)) if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) != 123) if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) != 125) {
      do if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) == 92) {
       if ((HEAPU8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] | 0 | 0) != 92) break;
       if ((HEAPU8[(HEAP32[i13 >> 2] | 0) + 2 >> 0] | 0 | 0) != 123) break;
       i8 = HEAP32[i12 >> 2] | 0;
       i4 = HEAP32[i14 >> 2] | 0;
       HEAP32[i14 >> 2] = i4 + 1;
       HEAP8[i8 + i4 >> 0] = 92;
       i4 = HEAP32[i12 >> 2] | 0;
       i8 = HEAP32[i14 >> 2] | 0;
       HEAP32[i14 >> 2] = i8 + 1;
       HEAP8[i4 + i8 >> 0] = 123;
       HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 2;
       break L40;
      } while (0);
      do if (HEAP32[i9 >> 2] | 0) {
       if (!(_vim_ispathsep(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) | 0)) break;
       HEAP8[HEAP32[i9 >> 2] >> 0] = 1;
      } while (0);
      i8 = HEAP32[i12 >> 2] | 0;
      i4 = HEAP32[i14 >> 2] | 0;
      HEAP32[i14 >> 2] = i4 + 1;
      HEAP8[i8 + i4 >> 0] = 92;
      i4 = HEAP8[HEAP32[i13 >> 2] >> 0] | 0;
      i8 = HEAP32[i12 >> 2] | 0;
      i7 = HEAP32[i14 >> 2] | 0;
      HEAP32[i14 >> 2] = i7 + 1;
      HEAP8[i8 + i7 >> 0] = i4;
      break L40;
     }
     i4 = HEAP8[HEAP32[i13 >> 2] >> 0] | 0;
     i7 = HEAP32[i12 >> 2] | 0;
     i8 = HEAP32[i14 >> 2] | 0;
     HEAP32[i14 >> 2] = i8 + 1;
     HEAP8[i7 + i8 >> 0] = i4;
    }
    break;
   }
  case 123:
   {
    i4 = HEAP32[i12 >> 2] | 0;
    i8 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i8 + 1;
    HEAP8[i4 + i8 >> 0] = 92;
    i8 = HEAP32[i12 >> 2] | 0;
    i4 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i4 + 1;
    HEAP8[i8 + i4 >> 0] = 40;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    break;
   }
  case 125:
   {
    i4 = HEAP32[i12 >> 2] | 0;
    i8 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i8 + 1;
    HEAP8[i4 + i8 >> 0] = 92;
    i8 = HEAP32[i12 >> 2] | 0;
    i4 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i4 + 1;
    HEAP8[i8 + i4 >> 0] = 41;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    break;
   }
  case 44:
   {
    i4 = (HEAP32[i15 >> 2] | 0) != 0;
    i8 = HEAP32[i12 >> 2] | 0;
    i7 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i7 + 1;
    i10 = i8 + i7 | 0;
    if (i4) {
     HEAP8[i10 >> 0] = 92;
     i4 = HEAP32[i12 >> 2] | 0;
     i7 = HEAP32[i14 >> 2] | 0;
     HEAP32[i14 >> 2] = i7 + 1;
     HEAP8[i4 + i7 >> 0] = 124;
     break L40;
    } else {
     HEAP8[i10 >> 0] = 44;
     break L40;
    }
    break;
   }
  default:
   {
    if (HEAP32[i9 >> 2] | 0) if (_vim_ispathsep(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) | 0) HEAP8[HEAP32[i9 >> 2] >> 0] = 1;
    i10 = HEAP8[HEAP32[i13 >> 2] >> 0] | 0;
    i7 = HEAP32[i12 >> 2] | 0;
    i4 = HEAP32[i14 >> 2] | 0;
    HEAP32[i14 >> 2] = i4 + 1;
    HEAP8[i7 + i4 >> 0] = i10;
   }
  } while (0);
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if (HEAP32[i16 >> 2] | 0) {
  i16 = HEAP32[i12 >> 2] | 0;
  i13 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i13 + 1;
  HEAP8[i16 + i13 >> 0] = 36;
 }
 HEAP8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) >> 0] = 0;
 if (HEAP32[i15 >> 2] | 0) {
  if ((HEAP32[i15 >> 2] | 0) < 0) _emsg(55107) | 0; else _emsg(55124) | 0;
  if (HEAP32[i12 >> 2] | 0) {
   _vim_free(HEAP32[i12 >> 2] | 0);
   HEAP32[i12 >> 2] = 0;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 i17 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i17 | 0;
}

function _ExpandOne(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 52 | 0;
 i9 = i7 + 48 | 0;
 i10 = i7 + 44 | 0;
 i11 = i7 + 40 | 0;
 i12 = i7 + 36 | 0;
 i13 = i7 + 32 | 0;
 i14 = i7 + 28 | 0;
 i15 = i7 + 24 | 0;
 i16 = i7 + 20 | 0;
 i17 = i7 + 16 | 0;
 i18 = i7 + 12 | 0;
 i19 = i7 + 8 | 0;
 i20 = i7 + 4 | 0;
 i21 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 i5 = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0;
 if ((HEAP32[i13 >> 2] | 0) == 4 | (HEAP32[i13 >> 2] | 0) == 5) {
  if ((i5 | 0) <= 0) {
   HEAP32[i8 >> 2] = 0;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i22 | 0;
  }
  i4 = HEAP32[25264] | 0;
  if ((HEAP32[i13 >> 2] | 0) == 5) {
   if ((i4 | 0) == -1) HEAP32[25264] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2];
   HEAP32[25264] = (HEAP32[25264] | 0) + -1;
  } else HEAP32[25264] = i4 + 1;
  do if ((HEAP32[25264] | 0) < 0) if (!(HEAP32[25265] | 0)) {
   HEAP32[25264] = (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) - 1;
   break;
  } else {
   HEAP32[25264] = -1;
   break;
  } while (0);
  do if ((HEAP32[25264] | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) if (!(HEAP32[25265] | 0)) {
   HEAP32[25264] = 0;
   break;
  } else {
   HEAP32[25264] = -1;
   break;
  } while (0);
  if ((HEAP32[25264] | 0) == -1) {
   HEAP32[i8 >> 2] = _vim_strsave(HEAP32[25265] | 0) | 0;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i22 | 0;
  } else {
   HEAP32[i8 >> 2] = _vim_strsave(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0) + (HEAP32[25264] << 2) >> 2] | 0) | 0;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i22 | 0;
  }
 }
 if ((i5 | 0) != -1 & (HEAP32[i13 >> 2] | 0) != 6 & (HEAP32[i13 >> 2] | 0) != 7) {
  i5 = HEAP32[i9 >> 2] | 0;
  _FreeWild(HEAP32[i5 + 20 >> 2] | 0, HEAP32[i5 + 24 >> 2] | 0);
  HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = -1;
  if (HEAP32[25265] | 0) {
   _vim_free(HEAP32[25265] | 0);
   HEAP32[25265] = 0;
  }
 }
 HEAP32[25264] = 0;
 if ((HEAP32[i13 >> 2] | 0) == 1) {
  HEAP32[i8 >> 2] = 0;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i22 | 0;
 }
 do if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) == -1) {
  _vim_free(HEAP32[25265] | 0);
  HEAP32[25265] = HEAP32[i11 >> 2];
  HEAP32[i15 >> 2] = 1;
  if (_ExpandFromContext(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, (HEAP32[i9 >> 2] | 0) + 20 | 0, (HEAP32[i9 >> 2] | 0) + 24 | 0, HEAP32[i12 >> 2] | 0) | 0) {
   if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) {
    if (HEAP32[i12 >> 2] & 64 | 0) break;
    _emsg2(93046, HEAP32[i10 >> 2] | 0) | 0;
    break;
   }
   i5 = HEAP32[i9 >> 2] | 0;
   _ExpandEscape(i5 | 0, HEAP32[i10 >> 2] | 0, HEAP32[i5 + 20 >> 2] | 0, HEAP32[i5 + 24 >> 2] | 0, HEAP32[i12 >> 2] | 0);
   if ((HEAP32[i13 >> 2] | 0) != 6 & (HEAP32[i13 >> 2] | 0) != 8 & (HEAP32[i13 >> 2] | 0) != 7) {
    if (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) HEAP32[i18 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2]; else HEAP32[i18 >> 2] = 1;
    if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 2) i6 = 36; else if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 3) i6 = 36;
    L54 : do if ((i6 | 0) == 36) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) > 1) {
     HEAP32[i18 >> 2] = 0;
     HEAP32[i16 >> 2] = 0;
     while (1) {
      if ((HEAP32[i16 >> 2] | 0) >= 2) break L54;
      if (_match_suffix(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0) | 0) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     }
    } while (0);
    do if ((HEAP32[i18 >> 2] | 0) != 1) {
     if (!(HEAP32[i12 >> 2] & 64)) {
      _emsg(93819) | 0;
      break;
     }
     if (!(HEAP32[i12 >> 2] & 8)) _beep_flush();
    } while (0);
    if (!((HEAP32[i18 >> 2] | 0) != 1 & (HEAP32[i13 >> 2] | 0) == 2)) HEAP32[i14 >> 2] = _vim_strsave(HEAP32[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] >> 2] | 0) | 0;
   }
  }
 } while (0);
 if ((HEAP32[i13 >> 2] | 0) == 7) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) > 0) {
  HEAP32[i19 >> 2] = 1;
  HEAP32[i17 >> 2] = 0;
  while (1) {
   if (!(HEAP8[(HEAP32[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] | 0)) break;
   HEAP32[i20 >> 2] = HEAPU8[(HEAP32[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0];
   HEAP32[i16 >> 2] = 1;
   L79 : while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) break;
    HEAP32[i21 >> 2] = HEAPU8[(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0];
    do if (HEAP32[26918] | 0) {
     if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 3) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 2) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 32) if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != 9) {
      i6 = 61;
      break;
     }
     i18 = _tolower(HEAP32[i20 >> 2] | 0) | 0;
     if ((i18 | 0) != (_tolower(HEAP32[i21 >> 2] | 0) | 0)) break L79;
    } else i6 = 61; while (0);
    if ((i6 | 0) == 61) {
     i6 = 0;
     if ((HEAP32[i20 >> 2] | 0) != (HEAP32[i21 >> 2] | 0)) break;
    }
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   }
   if ((HEAP32[i16 >> 2] | 0) < (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) {
    i6 = 64;
    break;
   }
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
  }
  if ((i6 | 0) == 64) if (!(HEAP32[i12 >> 2] & 8)) _vim_beep(262144);
  HEAP32[i14 >> 2] = _alloc((HEAP32[i17 >> 2] | 0) + 1 | 0) | 0;
  if (HEAP32[i14 >> 2] | 0) _vim_strncpy(HEAP32[i14 >> 2] | 0, HEAP32[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] >> 2] | 0, HEAP32[i17 >> 2] | 0);
  HEAP32[25264] = -1;
 }
 L102 : do if ((HEAP32[i13 >> 2] | 0) == 6) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) > 0) {
  HEAP32[i17 >> 2] = 0;
  HEAP32[i16 >> 2] = 0;
  while (1) {
   if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) break;
   i6 = (_strlen(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0) | 0) + 1 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + i6;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  }
  HEAP32[i14 >> 2] = _lalloc(HEAP32[i17 >> 2] | 0, 1) | 0;
  if (HEAP32[i14 >> 2] | 0) {
   HEAP8[HEAP32[i14 >> 2] >> 0] = 0;
   HEAP32[i16 >> 2] = 0;
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) break L102;
    _strcat(HEAP32[i14 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0) | 0;
    if ((HEAP32[i16 >> 2] | 0) != ((HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) - 1 | 0)) _strcat(HEAP32[i14 >> 2] | 0, HEAP32[i12 >> 2] & 4 | 0 ? 97581 : 97452) | 0;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   }
  }
 } while (0);
 if ((HEAP32[i13 >> 2] | 0) == 2 | (HEAP32[i13 >> 2] | 0) == 6) _ExpandCleanup(HEAP32[i9 >> 2] | 0);
 if (!(HEAP32[i15 >> 2] | 0)) _vim_free(HEAP32[i11 >> 2] | 0);
 HEAP32[i8 >> 2] = HEAP32[i14 >> 2];
 i22 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i22 | 0;
}

function _expand_env_esc(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i9 = i8 + 96 | 0;
 i10 = i8 + 92 | 0;
 i11 = i8 + 88 | 0;
 i12 = i8 + 84 | 0;
 i13 = i8 + 80 | 0;
 i14 = i8 + 76 | 0;
 i15 = i8 + 72 | 0;
 i16 = i8 + 68 | 0;
 i17 = i8 + 64 | 0;
 i18 = i8 + 60 | 0;
 i19 = i8 + 56 | 0;
 i20 = i8 + 52 | 0;
 i21 = i8 + 48 | 0;
 i22 = i8 + 44 | 0;
 i23 = i8 + 40 | 0;
 i24 = i8 + 4 | 0;
 i25 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i21 >> 2] = 1;
 HEAP32[i22 >> 2] = 0;
 if (HEAP32[i14 >> 2] | 0) HEAP32[i22 >> 2] = _strlen(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = _skipwhite(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
 while (1) {
  if (!(HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0 ? (HEAP32[i11 >> 2] | 0) > 0 : 0)) break;
  HEAP32[i19 >> 2] = 1;
  if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) == 36) i7 = 7; else if (HEAP32[i21 >> 2] | 0 ? (HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) == 126 : 0) i7 = 7;
  if ((i7 | 0) == 7) {
   i7 = 0;
   HEAP32[i20 >> 2] = 0;
   i6 = (HEAP32[i15 >> 2] | 0) + 1 | 0;
   do if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) != 126) {
    HEAP32[i16 >> 2] = i6;
    HEAP32[i18 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i17 >> 2] = (HEAP32[i11 >> 2] | 0) - 1;
    L13 : do if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) == 123) if (_vim_isIDc(123) | 0) i7 = 15; else {
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     while (1) {
      i5 = HEAP32[i17 >> 2] | 0;
      HEAP32[i17 >> 2] = i5 + -1;
      if ((i5 | 0) <= 0) break L13;
      if (!(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0)) break L13;
      if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) == 125) break L13;
      i5 = HEAP32[i16 >> 2] | 0;
      HEAP32[i16 >> 2] = i5 + 1;
      i4 = HEAP8[i5 >> 0] | 0;
      i5 = HEAP32[i18 >> 2] | 0;
      HEAP32[i18 >> 2] = i5 + 1;
      HEAP8[i5 >> 0] = i4;
     }
    } else i7 = 15; while (0);
    L21 : do if ((i7 | 0) == 15) {
     i7 = 0;
     while (1) {
      i4 = HEAP32[i17 >> 2] | 0;
      HEAP32[i17 >> 2] = i4 + -1;
      if ((i4 | 0) <= 0) break L21;
      if (!(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0)) break L21;
      if (!(_vim_isIDc(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) | 0)) break L21;
      i4 = HEAP32[i16 >> 2] | 0;
      HEAP32[i16 >> 2] = i4 + 1;
      i5 = HEAP8[i4 >> 0] | 0;
      i4 = HEAP32[i18 >> 2] | 0;
      HEAP32[i18 >> 2] = i4 + 1;
      HEAP8[i4 >> 0] = i5;
     }
    } while (0);
    if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0 | 0) == 123) if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) != 125) {
     HEAP32[i18 >> 2] = 0;
     break;
    }
    if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0 | 0) == 123) HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    HEAP8[HEAP32[i18 >> 2] >> 0] = 0;
    HEAP32[i18 >> 2] = _vim_getenv(HEAP32[i10 >> 2] | 0, i20) | 0;
   } else {
    if (HEAPU8[i6 >> 0] | 0 | 0) if (!(_vim_ispathsep(HEAPU8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0) | 0)) if (!(_vim_strchr(60097, HEAPU8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0) | 0)) {
     HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
     HEAP32[i18 >> 2] = HEAP32[i10 >> 2];
     HEAP32[i17 >> 2] = (HEAP32[i11 >> 2] | 0) - 1;
     while (1) {
      i5 = HEAP32[i17 >> 2] | 0;
      HEAP32[i17 >> 2] = i5 + -1;
      if ((i5 | 0) <= 0) break;
      if (!(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0)) break;
      if (!(_vim_isfilec(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) | 0)) break;
      if (!((_vim_ispathsep(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) | 0) != 0 ^ 1)) break;
      i5 = HEAP32[i16 >> 2] | 0;
      HEAP32[i16 >> 2] = i5 + 1;
      i4 = HEAP8[i5 >> 0] | 0;
      i5 = HEAP32[i18 >> 2] | 0;
      HEAP32[i18 >> 2] = i5 + 1;
      HEAP8[i5 >> 0] = i4;
     }
     HEAP8[HEAP32[i18 >> 2] >> 0] = 0;
     if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) i26 = 0; else i26 = _getpwnam((HEAP32[i10 >> 2] | 0) + 1 | 0) | 0;
     HEAP32[i23 >> 2] = i26;
     if (!(HEAP32[i23 >> 2] | 0)) i27 = 0; else i27 = HEAP32[(HEAP32[i23 >> 2] | 0) + 20 >> 2] | 0;
     HEAP32[i18 >> 2] = i27;
     if (HEAP32[i18 >> 2] | 0) break;
     _ExpandInit(i24);
     HEAP32[i24 >> 2] = 2;
     HEAP32[i18 >> 2] = _ExpandOne(i24, HEAP32[i10 >> 2] | 0, 0, 80, 2) | 0;
     HEAP32[i20 >> 2] = 1;
     break;
    }
    HEAP32[i18 >> 2] = HEAP32[26053];
    HEAP32[i16 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   } while (0);
   if ((HEAP32[i12 >> 2] | 0) != 0 & (HEAP32[i18 >> 2] | 0) != 0) if (_strpbrk(HEAP32[i18 >> 2] | 0, 60102) | 0) {
    HEAP32[i25 >> 2] = _vim_strsave_escaped(HEAP32[i18 >> 2] | 0, 60102) | 0;
    if (HEAP32[i25 >> 2] | 0) {
     if (HEAP32[i20 >> 2] | 0) _vim_free(HEAP32[i18 >> 2] | 0);
     HEAP32[i18 >> 2] = HEAP32[i25 >> 2];
     HEAP32[i20 >> 2] = 1;
    }
   }
   if (HEAP32[i18 >> 2] | 0) if (HEAPU8[HEAP32[i18 >> 2] >> 0] | 0 | 0) {
    i6 = _strlen(HEAP32[i18 >> 2] | 0) | 0;
    i4 = i6 + (_strlen(HEAP32[i16 >> 2] | 0) | 0) + 1 | 0;
    if (i4 >>> 0 < (HEAP32[i11 >> 2] | 0) >>> 0) {
     _strcpy(HEAP32[i10 >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0;
     i4 = _strlen(HEAP32[i18 >> 2] | 0) | 0;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - i4;
     HEAP32[i17 >> 2] = _strlen(HEAP32[i18 >> 2] | 0) | 0;
     if (HEAPU8[HEAP32[i18 >> 2] >> 0] | 0 | 0) if (_vim_ispathsep(HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) + -1 >> 0] | 0) | 0) if (_vim_ispathsep(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) | 0) HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
     HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
     HEAP32[i19 >> 2] = 0;
    }
   }
   if (HEAP32[i20 >> 2] | 0) _vim_free(HEAP32[i18 >> 2] | 0);
  }
  if (HEAP32[i19 >> 2] | 0) {
   HEAP32[i21 >> 2] = 0;
   if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) == 92) if (HEAPU8[(HEAP32[i15 >> 2] | 0) + 1 >> 0] | 0 | 0) {
    i4 = HEAP32[i15 >> 2] | 0;
    HEAP32[i15 >> 2] = i4 + 1;
    i6 = HEAP8[i4 >> 0] | 0;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i6;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
   } else i7 = 62; else i7 = 62;
   do if ((i7 | 0) == 62) {
    i7 = 0;
    if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) == 32) {
     if (HEAP32[i13 >> 2] | 0) break;
    } else if (HEAP32[i13 >> 2] | 0 ? 1 : (HEAPU8[HEAP32[i15 >> 2] >> 0] | 0 | 0) != 44) break;
    HEAP32[i21 >> 2] = 1;
   } while (0);
   if ((HEAP32[i11 >> 2] | 0) > 0) {
    i6 = HEAP32[i15 >> 2] | 0;
    HEAP32[i15 >> 2] = i6 + 1;
    i4 = HEAP8[i6 >> 0] | 0;
    i6 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i6 + 1;
    HEAP8[i6 >> 0] = i4;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
    if (HEAP32[i14 >> 2] | 0) if (((HEAP32[i15 >> 2] | 0) + (0 - (HEAP32[i22 >> 2] | 0)) | 0) >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) if (!(_strncmp((HEAP32[i15 >> 2] | 0) + (0 - (HEAP32[i22 >> 2] | 0)) | 0, HEAP32[i14 >> 2] | 0, HEAP32[i22 >> 2] | 0) | 0)) HEAP32[i21 >> 2] = 1;
   }
  }
 }
 HEAP8[HEAP32[i10 >> 2] >> 0] = 0;
 STACKTOP = i8;
 return;
}

function _recover_names(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 4272 | 0;
 i7 = i6 + 160 | 0;
 i8 = i6 + 156 | 0;
 i9 = i6 + 152 | 0;
 i10 = i6 + 148 | 0;
 i11 = i6 + 144 | 0;
 i12 = i6 + 120 | 0;
 i13 = i6 + 116 | 0;
 i14 = i6 + 112 | 0;
 i15 = i6 + 108 | 0;
 i16 = i6 + 104 | 0;
 i17 = i6 + 100 | 0;
 i18 = i6 + 96 | 0;
 i19 = i6 + 92 | 0;
 i20 = i6 + 88 | 0;
 i21 = i6 + 84 | 0;
 i22 = i6 + 168 | 0;
 i23 = i6 + 80 | 0;
 i24 = i6 + 4 | 0;
 i25 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 do if (HEAP32[i7 >> 2] | 0) if ((_resolve_symlink(HEAP32[i7 >> 2] | 0, i22) | 0) == 1) {
  HEAP32[i21 >> 2] = i22;
  break;
 } else {
  HEAP32[i21 >> 2] = HEAP32[i7 >> 2];
  break;
 } while (0);
 if (HEAP32[i8 >> 2] | 0) {
  _msg(59604) | 0;
  _msg_putchar(10);
 }
 HEAP32[i20 >> 2] = _alloc((_strlen(HEAP32[26906] | 0) | 0) + 1 | 0) | 0;
 HEAP32[i19 >> 2] = HEAP32[26906];
 while (1) {
  if (HEAP32[i20 >> 2] | 0) i26 = (HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 0; else i26 = 0;
  i27 = HEAP32[i20 >> 2] | 0;
  if (!i26) break;
  _copy_option_part(i19, i27, 31e3, 84434) | 0;
  do if ((HEAPU8[HEAP32[i20 >> 2] >> 0] | 0) == 46) if (!(HEAPU8[(HEAP32[i20 >> 2] | 0) + 1 >> 0] | 0)) if (!(HEAP32[i7 >> 2] | 0)) {
   HEAP32[i12 >> 2] = _vim_strsave(59622) | 0;
   HEAP32[i12 + 4 >> 2] = _vim_strsave(59628) | 0;
   HEAP32[i12 + 8 >> 2] = _vim_strsave(59635) | 0;
   HEAP32[i11 >> 2] = 3;
   break;
  } else {
   HEAP32[i11 >> 2] = _recov_file_names(i12, HEAP32[i21 >> 2] | 0, 1) | 0;
   break;
  } else i5 = 16; else i5 = 16; while (0);
  do if ((i5 | 0) == 16) {
   i5 = 0;
   i22 = HEAP32[i20 >> 2] | 0;
   if (!(HEAP32[i7 >> 2] | 0)) {
    HEAP32[i12 >> 2] = _concat_fnames(i22, 59622, 1) | 0;
    HEAP32[i12 + 4 >> 2] = _concat_fnames(HEAP32[i20 >> 2] | 0, 59628, 1) | 0;
    HEAP32[i12 + 8 >> 2] = _concat_fnames(HEAP32[i20 >> 2] | 0, 59635, 1) | 0;
    HEAP32[i11 >> 2] = 3;
    break;
   }
   HEAP32[i23 >> 2] = _strlen(i22) | 0;
   HEAP32[i14 >> 2] = (HEAP32[i20 >> 2] | 0) + (HEAP32[i23 >> 2] | 0);
   i22 = (_vim_ispathsep(HEAPU8[(HEAP32[i14 >> 2] | 0) + -1 >> 0] | 0) | 0) != 0;
   if (i22 & (HEAP32[i23 >> 2] | 0) > 1) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + -1 >> 0] | 0) == (HEAPU8[(HEAP32[i14 >> 2] | 0) + -2 >> 0] | 0)) HEAP32[i13 >> 2] = _make_percent_swname(HEAP32[i20 >> 2] | 0, HEAP32[i21 >> 2] | 0) | 0; else i5 = 21; else i5 = 21;
   if ((i5 | 0) == 21) {
    i5 = 0;
    HEAP32[i13 >> 2] = _gettail(HEAP32[i21 >> 2] | 0) | 0;
    HEAP32[i13 >> 2] = _concat_fnames(HEAP32[i20 >> 2] | 0, HEAP32[i13 >> 2] | 0, 1) | 0;
   }
   if (!(HEAP32[i13 >> 2] | 0)) {
    HEAP32[i11 >> 2] = 0;
    break;
   } else {
    HEAP32[i11 >> 2] = _recov_file_names(i12, HEAP32[i13 >> 2] | 0, 0) | 0;
    _vim_free(HEAP32[i13 >> 2] | 0);
    break;
   }
  } while (0);
  HEAP32[i18 >> 2] = 0;
  while (1) {
   if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
   if (!(HEAP32[i12 + (HEAP32[i18 >> 2] << 2) >> 2] | 0)) {
    HEAP32[i18 >> 2] = 0;
    while (1) {
     if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
     _vim_free(HEAP32[i12 + (HEAP32[i18 >> 2] << 2) >> 2] | 0);
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
    }
    HEAP32[i11 >> 2] = 0;
   }
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  }
  if (!(HEAP32[i11 >> 2] | 0)) HEAP32[i15 >> 2] = 0; else if (!(_expand_wildcards(HEAP32[i11 >> 2] | 0, i12, i15, i17, 50) | 0)) HEAP32[i15 >> 2] = 0;
  if (!(HEAPU8[HEAP32[i19 >> 2] >> 0] | 0)) if (HEAP32[i7 >> 2] | 0 ? ((HEAP32[i16 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) == 0 : 0) {
   HEAP32[i25 >> 2] = _modname(HEAP32[i21 >> 2] | 0, 57799, 1) | 0;
   if (HEAP32[i25 >> 2] | 0) {
    if ((_stat(HEAP32[i25 >> 2] | 0, i24) | 0) != -1) {
     HEAP32[i17 >> 2] = _alloc(4) | 0;
     if (HEAP32[i17 >> 2] | 0) {
      HEAP32[HEAP32[i17 >> 2] >> 2] = HEAP32[i25 >> 2];
      HEAP32[i25 >> 2] = 0;
      HEAP32[i15 >> 2] = 1;
     }
    }
    _vim_free(HEAP32[i25 >> 2] | 0);
   }
  }
  L62 : do if (HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0) {
   i22 = HEAP32[HEAP32[(HEAP32[26773] | 0) + 4 >> 2] >> 2] | 0;
   HEAP32[i14 >> 2] = i22;
   if (i22 | 0) {
    HEAP32[i18 >> 2] = 0;
    while (1) {
     if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break L62;
     L68 : do if ((_fullpathcmp(HEAP32[i14 >> 2] | 0, HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0, 1) | 0) & 1 | 0) {
      _vim_free(HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0);
      i22 = (HEAP32[i15 >> 2] | 0) + -1 | 0;
      HEAP32[i15 >> 2] = i22;
      if (!i22) {
       _vim_free(HEAP32[i17 >> 2] | 0);
       break;
      }
      while (1) {
       if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break L68;
       i22 = HEAP32[i17 >> 2] | 0;
       HEAP32[i22 + (HEAP32[i18 >> 2] << 2) >> 2] = HEAP32[i22 + ((HEAP32[i18 >> 2] | 0) + 1 << 2) >> 2];
       HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
      }
     } while (0);
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
    }
   }
  } while (0);
  do if ((HEAP32[i9 >> 2] | 0) > 0) {
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
   if ((HEAP32[i9 >> 2] | 0) <= (HEAP32[i16 >> 2] | 0)) {
    i22 = _vim_strsave(HEAP32[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) - 1 + (HEAP32[i15 >> 2] | 0) - (HEAP32[i16 >> 2] | 0) << 2) >> 2] | 0) | 0;
    HEAP32[HEAP32[i10 >> 2] >> 2] = i22;
    HEAP32[i19 >> 2] = 114072;
   }
  } else {
   if (!(HEAP32[i8 >> 2] | 0)) {
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
    break;
   }
   do if ((HEAPU8[HEAP32[i20 >> 2] >> 0] | 0) == 46) if (!(HEAPU8[(HEAP32[i20 >> 2] | 0) + 1 >> 0] | 0)) if (!(HEAP32[i7 >> 2] | 0)) {
    _msg_puts(59640);
    break;
   } else {
    _msg_puts(59666);
    break;
   } else i5 = 64; else i5 = 64; while (0);
   if ((i5 | 0) == 64) {
    i5 = 0;
    _msg_puts(59692);
    _msg_home_replace(HEAP32[i20 >> 2] | 0);
    _msg_puts(59709);
   }
   L94 : do if (HEAP32[i15 >> 2] | 0) {
    HEAP32[i18 >> 2] = 0;
    while (1) {
     if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break L94;
     i22 = (HEAP32[i16 >> 2] | 0) + 1 | 0;
     HEAP32[i16 >> 2] = i22;
     _msg_outnum(i22);
     _msg_puts(59712);
     _msg_puts(_gettail(HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0) | 0);
     _msg_putchar(10);
     _swapfile_info(HEAP32[(HEAP32[i17 >> 2] | 0) + (HEAP32[i18 >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
    }
   } else _msg_puts(59718); while (0);
   _out_flush();
  } while (0);
  HEAP32[i18 >> 2] = 0;
  while (1) {
   if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
   _vim_free(HEAP32[i12 + (HEAP32[i18 >> 2] << 2) >> 2] | 0);
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  }
  if ((HEAP32[i15 >> 2] | 0) > 0) _FreeWild(HEAP32[i15 >> 2] | 0, HEAP32[i17 >> 2] | 0);
 }
 _vim_free(i27);
 STACKTOP = i6;
 return HEAP32[i16 >> 2] | 0;
}

function _do_filter(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i8;
 i10 = i8 + 60 | 0;
 i11 = i8 + 56 | 0;
 i12 = i8 + 52 | 0;
 i13 = i8 + 48 | 0;
 i14 = i8 + 44 | 0;
 i15 = i8 + 40 | 0;
 i16 = i8 + 36 | 0;
 i17 = i8 + 32 | 0;
 i18 = i8 + 28 | 0;
 i19 = i8 + 24 | 0;
 i20 = i8 + 16 | 0;
 i21 = i8 + 12 | 0;
 i22 = i8 + 8 | 0;
 i23 = i8 + 4 | 0;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i22 >> 2] = HEAP32[26773];
 HEAP32[i23 >> 2] = 0;
 if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) {
  STACKTOP = i8;
  return;
 }
 i6 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i20 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i20 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i18 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) + 1;
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i10 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 _changed_line_abv_curs();
 _invalidate_botline();
 if (HEAP32[i15 >> 2] | 0) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 8;
 do if ((HEAP32[i14 >> 2] | 0) == 0 & (HEAP32[i15 >> 2] | 0) != 0 ^ 1 | (HEAP32[26983] | 0) != 0) {
  if (!((HEAP32[i14 >> 2] | 0) == 0 | (HEAP32[i15 >> 2] | 0) != 0 | (HEAP32[26983] | 0) != 0)) {
   HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 64;
   HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = HEAP32[i10 >> 2];
   HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = HEAP32[i11 >> 2];
   i7 = 15;
   break;
  }
  if (!((HEAP32[i14 >> 2] | 0) != 0 & (HEAP32[i15 >> 2] | 0) != 0 ^ 1 | (HEAP32[26983] | 0) != 0)) {
   HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 96;
   HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = HEAP32[i10 >> 2];
   HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = HEAP32[i11 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i11 >> 2];
   i7 = 15;
   break;
  }
  if (HEAP32[i14 >> 2] | 0) {
   i6 = _vim_tempname(105, 0) | 0;
   HEAP32[i16 >> 2] = i6;
   if (i6 | 0) i7 = 12;
  } else i7 = 12;
  if ((i7 | 0) == 12) {
   if (!(HEAP32[i15 >> 2] | 0)) {
    i7 = 15;
    break;
   }
   i6 = _vim_tempname(111, 0) | 0;
   HEAP32[i17 >> 2] = i6;
   if (i6 | 0) {
    i7 = 15;
    break;
   }
  }
  _emsg(93262) | 0;
 } else {
  HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 32;
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i11 >> 2];
  i7 = 15;
 } while (0);
 L22 : do if ((i7 | 0) == 15) {
  HEAP32[26720] = (HEAP32[26720] | 0) + 1;
  if (HEAP32[i16 >> 2] | 0) if (!(_buf_write(HEAP32[26773] | 0, HEAP32[i16 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, 0, 0, 1) | 0)) {
   _msg_putchar(10);
   HEAP32[26720] = (HEAP32[26720] | 0) + -1;
   _emsg2(93235, HEAP32[i16 >> 2] | 0) | 0;
   break;
  }
  if ((HEAP32[26773] | 0) == (HEAP32[i22 >> 2] | 0)) {
   if (!(HEAP32[i15 >> 2] | 0)) _msg_putchar(10);
   HEAP32[i21 >> 2] = _make_filter_cmd(HEAP32[i13 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
   if (HEAP32[i21 >> 2] | 0) {
    _windgoto((HEAP32[10173] | 0) - 1 | 0, 0);
    _cursor_on();
    if (HEAP32[i15 >> 2] | 0) {
     i6 = (_strcmp(HEAP32[26982] | 0, 72083) | 0) != 0;
     if (!(i6 & (HEAP32[i14 >> 2] | 0) != 0)) i7 = 24;
    } else i7 = 24;
    if ((i7 | 0) == 24) _redraw_later_clear();
    do if (HEAP32[i15 >> 2] | 0) if (!(_u_save(HEAP32[i11 >> 2] | 0, (HEAP32[i11 >> 2] | 0) + 1 | 0) | 0)) {
     _vim_free(HEAP32[i21 >> 2] | 0);
     break;
    } else {
     _redraw_curbuf_later(10);
     i7 = 29;
     break;
    } else i7 = 29; while (0);
    L43 : do if ((i7 | 0) == 29) {
     HEAP32[i19 >> 2] = HEAP32[HEAP32[26773] >> 2];
     if (_call_shell(HEAP32[i21 >> 2] | 0, 5 | HEAP32[i23 >> 2]) | 0) {
      _redraw_later_clear();
      _wait_return(0);
     }
     _vim_free(HEAP32[i21 >> 2] | 0);
     HEAP32[26738] = 0;
     HEAP32[26737] = 1;
     _ui_breakcheck();
     HEAP32[26834] = 0;
     if (HEAP32[i15 >> 2] | 0) {
      do if (HEAP32[i17 >> 2] | 0) if ((_readfile(HEAP32[i17 >> 2] | 0, 0, HEAP32[i11 >> 2] | 0, 0, 2147483647, HEAP32[i12 >> 2] | 0, 2) | 0) != 1) {
       _msg_putchar(10);
       _emsg2(93318, HEAP32[i17 >> 2] | 0) | 0;
       break L43;
      } else if ((HEAP32[26773] | 0) != (HEAP32[i22 >> 2] | 0)) break L22; else break; while (0);
      HEAP32[i19 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i19 >> 2] | 0);
      if (HEAP32[i23 >> 2] & 32 | 0) {
       HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
       HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
       _appended_lines_mark(HEAP32[i11 >> 2] | 0, HEAP32[i19 >> 2] | 0);
      }
      if (HEAP32[i14 >> 2] | 0) {
       if (HEAP32[27131] | 0) i7 = 41; else if (!(_vim_strchr(HEAP32[26904] | 0, 82) | 0)) i7 = 41;
       do if ((i7 | 0) == 41) {
        i6 = HEAP32[i10 >> 2] | 0;
        if ((HEAP32[i19 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) {
         _mark_adjust(i6, HEAP32[i11 >> 2] | 0, HEAP32[i18 >> 2] | 0, 0);
         break;
        } else {
         _mark_adjust(i6, (HEAP32[i10 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) - 1 | 0, HEAP32[i18 >> 2] | 0, 0);
         _mark_adjust((HEAP32[i10 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) | 0, HEAP32[i11 >> 2] | 0, 2147483647, 0);
         break;
        }
       } while (0);
       HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i10 >> 2];
       _del_lines(HEAP32[i18 >> 2] | 0, 1);
       i6 = (HEAP32[26773] | 0) + 476 | 0;
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
       i6 = (HEAP32[26773] | 0) + 492 | 0;
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
       _write_lnum_adjust(0 - (HEAP32[i18 >> 2] | 0) | 0);
      } else {
       i6 = HEAP32[26773] | 0;
       HEAP32[i18 >> 2] = (HEAP32[i6 + 492 >> 2] | 0) - (HEAP32[i6 + 476 >> 2] | 0) + 1;
       HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[26773] | 0) + 492 >> 2];
      }
      _beginline(5);
      HEAP32[26720] = (HEAP32[26720] | 0) + -1;
      if ((HEAP32[i18 >> 2] | 0) <= (HEAP32[26967] | 0)) break L22;
      i6 = HEAP32[i18 >> 2] | 0;
      if (!(HEAP32[i14 >> 2] | 0)) {
       _msgmore(i6);
       break L22;
      }
      HEAP32[i9 >> 2] = i6;
      _vim_snprintf(113988, 80, 42838, i9) | 0;
      i6 = (_msg(113988) | 0) == 0;
      if (i6 | (HEAP32[26710] | 0) != 0) break L22;
      _set_keep_msg(113988, 0);
      break L22;
     }
    } while (0);
    i6 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i6 >> 2] = HEAP32[i20 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
    HEAP32[26720] = (HEAP32[26720] | 0) + -1;
    _wait_return(0);
   }
  }
 } while (0);
 if ((HEAP32[26773] | 0) != (HEAP32[i22 >> 2] | 0)) {
  HEAP32[26720] = (HEAP32[26720] | 0) + -1;
  _emsg(42857) | 0;
 }
 if (HEAP32[i16 >> 2] | 0) _unlink(HEAP32[i16 >> 2] | 0) | 0;
 if (HEAP32[i17 >> 2] | 0) _unlink(HEAP32[i17 >> 2] | 0) | 0;
 _vim_free(HEAP32[i16 >> 2] | 0);
 _vim_free(HEAP32[i17 >> 2] | 0);
 STACKTOP = i8;
 return;
}

function _clip_process_selection(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 24 | 0;
 i8 = i6 + 20 | 0;
 i9 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i12 = i6 + 4 | 0;
 i13 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = 108396;
 HEAP32[i13 >> 2] = 1;
 if ((HEAP32[i7 >> 2] | 0) == 3) {
  if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0)) if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 8 + 4 >> 2] | 0) == (HEAP32[(HEAP32[i11 >> 2] | 0) + 16 + 4 >> 2] | 0)) {
   if (HEAP32[26627] | 0) _gui_update_cursor(0, 0);
   HEAP16[(HEAP32[i11 >> 2] | 0) + 48 >> 1] = 0;
   STACKTOP = i6;
   return;
  }
  do if (_clip_isautosel_star() | 0) i5 = 11; else if (HEAP32[26627] | 0) if (_vim_strchr(HEAP32[26926] | 0, 65) | 0) {
   i5 = 11;
   break;
  } else break; else if (HEAP32[26765] | 0) {
   i5 = 11;
   break;
  } else break; while (0);
  if ((i5 | 0) == 11) _clip_copy_modeless_selection(0);
  if (HEAP32[26627] | 0) _gui_update_cursor(0, 0);
  HEAP16[(HEAP32[i11 >> 2] | 0) + 48 >> 1] = 2;
  STACKTOP = i6;
  return;
 }
 HEAP32[i9 >> 2] = _check_row(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = _check_col(HEAP32[i8 >> 2] | 0) | 0;
 if ((HEAP32[i8 >> 2] | 0) == (HEAP32[(HEAP32[i11 >> 2] | 0) + 40 + 4 >> 2] | 0)) if (!(HEAP32[i10 >> 2] | 0 ? 1 : (HEAP32[i9 >> 2] | 0) != (HEAP32[(HEAP32[i11 >> 2] | 0) + 40 >> 2] | 0))) {
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) == 2 ? (HEAPU16[(HEAP32[i11 >> 2] | 0) + 48 >> 1] | 0) == 2 : 0) {
  do if ((_clip_compare_pos(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 8 + 4 >> 2] | 0) | 0) < 0) i5 = 25; else {
   if ((_clip_compare_pos(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 16 + 4 >> 2] | 0) | 0) < 0) {
    if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0)) if (((HEAP32[(HEAP32[i11 >> 2] | 0) + 16 + 4 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) > ((HEAP32[i8 >> 2] | 0) - (HEAP32[(HEAP32[i11 >> 2] | 0) + 8 + 4 >> 2] | 0) | 0)) {
     i5 = 25;
     break;
    }
    i7 = HEAP32[i9 >> 2] | 0;
    i4 = HEAP32[i11 >> 2] | 0;
    i3 = (HEAP32[i4 + 16 >> 2] | 0) - i7 - (i7 - (HEAP32[i4 + 8 >> 2] | 0)) | 0;
    HEAP32[i12 >> 2] = i3;
    if ((i3 | 0) > 0) {
     i5 = 25;
     break;
    }
    if (!(HEAP32[i12 >> 2] | 0)) if ((HEAP32[i8 >> 2] | 0) < (((HEAP32[(HEAP32[i11 >> 2] | 0) + 8 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i11 >> 2] | 0) + 16 + 4 >> 2] | 0) | 0) / 2 | 0 | 0)) {
     i5 = 25;
     break;
    }
   }
   i3 = HEAP32[i11 >> 2] | 0;
   HEAP16[i3 + 28 >> 1] = HEAP32[i3 + 8 >> 2];
   i3 = HEAP32[i11 >> 2] | 0;
   HEAP16[i3 + 30 >> 1] = HEAP32[i3 + 8 + 4 >> 2];
   i3 = HEAP32[i11 >> 2] | 0;
   HEAP16[i3 + 32 >> 1] = HEAP32[i3 + 8 + 4 >> 2];
  } while (0);
  if ((i5 | 0) == 25) {
   i5 = HEAP32[i11 >> 2] | 0;
   HEAP16[i5 + 28 >> 1] = HEAP32[i5 + 16 >> 2];
   i5 = HEAP32[i11 >> 2] | 0;
   HEAP16[i5 + 30 >> 1] = (HEAP32[i5 + 16 + 4 >> 2] | 0) - 1;
   i5 = HEAP32[i11 >> 2] | 0;
   HEAP16[i5 + 32 >> 1] = HEAP32[i5 + 16 + 4 >> 2];
  }
  if (!(HEAP32[i10 >> 2] | 0 ? 1 : (HEAPU16[(HEAP32[i11 >> 2] | 0) + 50 >> 1] | 0) != 1)) HEAP16[(HEAP32[i11 >> 2] | 0) + 50 >> 1] = 0;
 }
 HEAP16[(HEAP32[i11 >> 2] | 0) + 48 >> 1] = 1;
 if (HEAP32[i10 >> 2] | 0) {
  i5 = (HEAP32[i11 >> 2] | 0) + 50 | 0;
  i12 = (HEAP16[i5 >> 1] | 0) + 1 << 16 >> 16;
  HEAP16[i5 >> 1] = i12;
  if ((i12 & 65535 | 0) > 2) HEAP16[(HEAP32[i11 >> 2] | 0) + 50 >> 1] = 0;
 }
 L49 : do switch (HEAPU16[(HEAP32[i11 >> 2] | 0) + 50 >> 1] | 0) {
 case 0:
  {
   if ((HEAP32[i9 >> 2] | 0) != (HEAP32[(HEAP32[i11 >> 2] | 0) + 40 >> 2] | 0)) {
    i12 = (_clip_get_line_end(HEAP32[i9 >> 2] | 0) | 0) & 65535;
    HEAP16[(HEAP32[i11 >> 2] | 0) + 36 >> 1] = i12;
   }
   i12 = HEAP32[i11 >> 2] | 0;
   i5 = (_clip_compare_pos(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAPU16[i12 + 28 >> 1] | 0, HEAPU16[i12 + 30 >> 1] | 0) | 0) >= 0;
   i12 = HEAP32[i11 >> 2] | 0;
   i3 = (HEAP32[i8 >> 2] | 0) >= (HEAPU16[i12 + 36 >> 1] | 0);
   i4 = i12 | 0;
   if (i5) {
    i5 = HEAP32[i11 >> 2] | 0;
    i12 = HEAPU16[i5 + 28 >> 1] | 0;
    i7 = HEAPU16[i5 + 30 >> 1] | 0;
    i5 = HEAP32[i9 >> 2] | 0;
    if (i3) {
     _clip_update_modeless_selection(i4, i12, i7, i5, HEAP32[10174] | 0);
     break L49;
    } else {
     _clip_update_modeless_selection(i4, i12, i7, i5, (HEAP32[i8 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0);
     break L49;
    }
   } else {
    i5 = HEAP32[i9 >> 2] | 0;
    if (i3) {
     i3 = HEAP32[i11 >> 2] | 0;
     _clip_update_modeless_selection(i4, i5, HEAPU16[i3 + 36 >> 1] | 0, HEAPU16[i3 + 28 >> 1] | 0, (HEAPU16[i3 + 30 >> 1] | 0) + (HEAP32[i13 >> 2] | 0) | 0);
     break L49;
    } else {
     i3 = HEAP32[i11 >> 2] | 0;
     _clip_update_modeless_selection(i4, i5, HEAP32[i8 >> 2] | 0, HEAPU16[i3 + 28 >> 1] | 0, (HEAPU16[i3 + 30 >> 1] | 0) + (HEAP32[i13 >> 2] | 0) | 0);
     break L49;
    }
   }
   break;
  }
 case 1:
  {
   if ((HEAP32[i9 >> 2] | 0) == (HEAP32[(HEAP32[i11 >> 2] | 0) + 40 >> 2] | 0)) if ((HEAP32[i8 >> 2] | 0) >= (HEAPU16[(HEAP32[i11 >> 2] | 0) + 34 >> 1] | 0)) if (!(HEAP32[i10 >> 2] | 0 ? 1 : (HEAP32[i8 >> 2] | 0) >= (HEAPU16[(HEAP32[i11 >> 2] | 0) + 36 >> 1] | 0))) {
    STACKTOP = i6;
    return;
   }
   _clip_get_word_boundaries(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0);
   i3 = HEAP32[i11 >> 2] | 0;
   i5 = (_clip_compare_pos(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAPU16[i3 + 28 >> 1] | 0, HEAPU16[i3 + 30 >> 1] | 0) | 0) >= 0;
   i3 = HEAP32[i11 >> 2] | 0;
   if (i5) {
    i5 = HEAP32[i11 >> 2] | 0;
    _clip_update_modeless_selection(i3, HEAPU16[i5 + 28 >> 1] | 0, HEAPU16[i5 + 30 >> 1] | 0, HEAP32[i9 >> 2] | 0, HEAPU16[i5 + 36 >> 1] | 0);
    break L49;
   } else {
    i5 = HEAP32[i11 >> 2] | 0;
    _clip_update_modeless_selection(i3, HEAP32[i9 >> 2] | 0, HEAPU16[i5 + 34 >> 1] | 0, HEAPU16[i5 + 28 >> 1] | 0, HEAPU16[i5 + 32 >> 1] | 0);
    break L49;
   }
   break;
  }
 case 2:
  {
   if (!(HEAP32[i10 >> 2] | 0 ? 1 : (HEAP32[i9 >> 2] | 0) != (HEAP32[(HEAP32[i11 >> 2] | 0) + 40 >> 2] | 0))) {
    STACKTOP = i6;
    return;
   }
   i5 = HEAP32[i11 >> 2] | 0;
   i3 = (_clip_compare_pos(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAPU16[i5 + 28 >> 1] | 0, HEAPU16[i5 + 30 >> 1] | 0) | 0) >= 0;
   i5 = HEAP32[i11 >> 2] | 0;
   if (i3) {
    _clip_update_modeless_selection(i5, HEAPU16[(HEAP32[i11 >> 2] | 0) + 28 >> 1] | 0, 0, HEAP32[i9 >> 2] | 0, HEAP32[10174] | 0);
    break L49;
   } else {
    _clip_update_modeless_selection(i5, HEAP32[i9 >> 2] | 0, 0, HEAPU16[(HEAP32[i11 >> 2] | 0) + 28 >> 1] | 0, HEAP32[10174] | 0);
    break L49;
   }
   break;
  }
 default:
  {}
 } while (0);
 HEAP32[(HEAP32[i11 >> 2] | 0) + 40 >> 2] = HEAP32[i9 >> 2];
 HEAP32[(HEAP32[i11 >> 2] | 0) + 40 + 4 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i6;
 return;
}

function _ml_find_line(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i5 + 68 | 0;
 i7 = i5 + 64 | 0;
 i8 = i5 + 60 | 0;
 i9 = i5 + 56 | 0;
 i10 = i5 + 52 | 0;
 i11 = i5 + 48 | 0;
 i12 = i5 + 44 | 0;
 i13 = i5 + 40 | 0;
 i14 = i5 + 36 | 0;
 i15 = i5 + 32 | 0;
 i16 = i5 + 28 | 0;
 i17 = i5 + 24 | 0;
 i18 = i5 + 20 | 0;
 i19 = i5 + 16 | 0;
 i20 = i5 + 12 | 0;
 i21 = i5 + 8 | 0;
 i22 = i5 + 4 | 0;
 i23 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0) {
  if (HEAP32[i9 >> 2] & 16 | 0) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] | 0) <= (HEAP32[i8 >> 2] | 0)) if (!(HEAP32[26774] | 0 ? 1 : (HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] | 0) < (HEAP32[i8 >> 2] | 0))) {
   if ((HEAP32[i9 >> 2] | 0) == 18) {
    i3 = (HEAP32[i7 >> 2] | 0) + 44 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    i3 = (HEAP32[i7 >> 2] | 0) + 40 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   } else if ((HEAP32[i9 >> 2] | 0) == 17) {
    i3 = (HEAP32[i7 >> 2] | 0) + 44 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
    i3 = (HEAP32[i7 >> 2] | 0) + 40 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
   }
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2];
   i24 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i24 | 0;
  }
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = (HEAP32[i7 >> 2] | 0) + 8 | 0;
  _mf_put(HEAP32[i14 >> 2] | 0, HEAP32[i3 + 32 >> 2] | 0, HEAP32[i2 >> 2] & 4, HEAP32[i2 >> 2] & 8);
  HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] = 0;
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] | 0) {
   i2 = HEAP32[i7 >> 2] | 0;
   _ml_lineadd(i2 | 0, HEAP32[i2 + 44 >> 2] | 0);
  }
 }
 if ((HEAP32[i9 >> 2] | 0) == 2) {
  HEAP32[i6 >> 2] = 0;
  i24 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i24 | 0;
 }
 HEAP32[i16 >> 2] = 1;
 HEAP32[i22 >> 2] = 1;
 HEAP32[i19 >> 2] = 1;
 HEAP32[i20 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 i2 = (HEAP32[i7 >> 2] | 0) + 16 | 0;
 if ((HEAP32[i9 >> 2] | 0) == 19) {
  HEAP32[i21 >> 2] = (HEAP32[i2 >> 2] | 0) - 1;
  while (1) {
   if ((HEAP32[i21 >> 2] | 0) < 0) break;
   HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[i21 >> 2] << 4);
   if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) <= (HEAP32[i8 >> 2] | 0)) if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
    i4 = 19;
    break;
   }
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
  }
  if ((i4 | 0) == 19) {
   HEAP32[i16 >> 2] = HEAP32[HEAP32[i12 >> 2] >> 2];
   HEAP32[i19 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2];
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2];
   HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] = HEAP32[i21 >> 2];
  }
  if ((HEAP32[i21 >> 2] | 0) < 0) HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] = 0;
 } else HEAP32[i2 >> 2] = 0;
 while (1) {
  i2 = _mf_get(HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i22 >> 2] | 0) | 0;
  HEAP32[i13 >> 2] = i2;
  if (!i2) break;
  if ((HEAP32[i9 >> 2] | 0) == 18) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1; else if ((HEAP32[i9 >> 2] | 0) == 17) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2];
  if ((HEAPU16[HEAP32[i10 >> 2] >> 1] | 0) == 25697) {
   i4 = 31;
   break;
  }
  HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  if ((HEAPU16[HEAP32[i11 >> 2] >> 1] | 0) != 28788) {
   i4 = 33;
   break;
  }
  i2 = _ml_add_stack(HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i21 >> 2] = i2;
  if ((i2 | 0) < 0) {
   i4 = 51;
   break;
  }
  HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[i21 >> 2] << 4);
  HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i16 >> 2];
  HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = HEAP32[i19 >> 2];
  HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] = HEAP32[i20 >> 2];
  HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] = -1;
  HEAP32[i18 >> 2] = 0;
  HEAP32[i23 >> 2] = 0;
  while (1) {
   if ((HEAP32[i23 >> 2] | 0) >= (HEAPU16[(HEAP32[i11 >> 2] | 0) + 2 >> 1] | 0)) break;
   HEAP32[i15 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 8 + (HEAP32[i23 >> 2] << 4) + 4 >> 2];
   i2 = (HEAP32[i19 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0;
   HEAP32[i19 >> 2] = i2;
   i25 = HEAP32[i23 >> 2] | 0;
   if ((i2 | 0) > (HEAP32[i8 >> 2] | 0)) {
    i4 = 38;
    break;
   }
   HEAP32[i23 >> 2] = i25 + 1;
  }
  if ((i4 | 0) == 38) {
   i4 = 0;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] = i25;
   HEAP32[i16 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 8 + (HEAP32[i23 >> 2] << 4) >> 2];
   HEAP32[i22 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 8 + (HEAP32[i23 >> 2] << 4) + 12 >> 2];
   HEAP32[i20 >> 2] = (HEAP32[i19 >> 2] | 0) - 1;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
   if ((HEAP32[i16 >> 2] | 0) < 0) {
    HEAP32[i17 >> 2] = _mf_trans_del(HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
    if ((HEAP32[i16 >> 2] | 0) != (HEAP32[i17 >> 2] | 0)) {
     HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
     HEAP32[(HEAP32[i11 >> 2] | 0) + 8 + (HEAP32[i23 >> 2] << 4) >> 2] = HEAP32[i16 >> 2];
     HEAP32[i18 >> 2] = 1;
    }
   }
  }
  if ((HEAP32[i23 >> 2] | 0) >= (HEAPU16[(HEAP32[i11 >> 2] | 0) + 2 >> 1] | 0)) {
   i4 = 43;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 17) {
   i2 = (HEAP32[i11 >> 2] | 0) + 8 + (HEAP32[i23 >> 2] << 4) + 4 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
   HEAP32[i18 >> 2] = 1;
  } else if ((HEAP32[i9 >> 2] | 0) == 18) {
   i2 = (HEAP32[i11 >> 2] | 0) + 8 + (HEAP32[i23 >> 2] << 4) + 4 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
   HEAP32[i18 >> 2] = 1;
  }
  _mf_put(HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i18 >> 2] | 0, 0);
 }
 do if ((i4 | 0) == 31) {
  HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] = HEAP32[i13 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] = HEAP32[i19 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] = HEAP32[i20 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] = 0;
  i18 = (HEAP32[i7 >> 2] | 0) + 8 | 0;
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] & -13;
  HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
  i24 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i24 | 0;
 } else if ((i4 | 0) == 33) {
  _iemsg(59339);
  i4 = 51;
 } else if ((i4 | 0) == 43) if ((HEAP32[i8 >> 2] | 0) > (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) {
  _iemsgn(59368, (HEAP32[i8 >> 2] | 0) - (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) | 0);
  i4 = 51;
  break;
 } else {
  _iemsgn(59417, HEAP32[i16 >> 2] | 0);
  i4 = 51;
  break;
 } while (0);
 if ((i4 | 0) == 51) _mf_put(HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0, 0, 0);
 if ((HEAP32[i9 >> 2] | 0) == 17) _ml_lineadd(HEAP32[i7 >> 2] | 0, 1); else if ((HEAP32[i9 >> 2] | 0) == 18) _ml_lineadd(HEAP32[i7 >> 2] | 0, -1);
 HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i24 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i24 | 0;
}

function _eval_vars(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i8 = i7 + 8 | 0;
 i9 = i7;
 i10 = i7 + 68 | 0;
 i11 = i7 + 64 | 0;
 i12 = i7 + 60 | 0;
 i13 = i7 + 56 | 0;
 i14 = i7 + 52 | 0;
 i15 = i7 + 48 | 0;
 i16 = i7 + 44 | 0;
 i17 = i7 + 40 | 0;
 i18 = i7 + 36 | 0;
 i19 = i7 + 32 | 0;
 i20 = i7 + 28 | 0;
 i21 = i7 + 24 | 0;
 i22 = i7 + 20 | 0;
 i23 = i7 + 16 | 0;
 i24 = i7 + 12 | 0;
 i25 = i7 + 72 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i23 >> 2] = 3;
 HEAP32[HEAP32[i15 >> 2] >> 2] = 0;
 if (HEAP32[i16 >> 2] | 0) HEAP32[HEAP32[i16 >> 2] >> 2] = 0;
 HEAP32[i24 >> 2] = _find_cmdline_var(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
 if ((HEAP32[i24 >> 2] | 0) < 0) {
  HEAP32[HEAP32[i13 >> 2] >> 2] = 1;
  HEAP32[i10 >> 2] = 0;
  i26 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i7;
  return i26 | 0;
 }
 if ((HEAP32[i11 >> 2] | 0) >>> 0 > (HEAP32[i12 >> 2] | 0) >>> 0) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + -1 >> 0] | 0) == 92) {
  HEAP32[HEAP32[i13 >> 2] >> 2] = 0;
  i12 = HEAP32[i11 >> 2] | 0;
  i6 = i12 + -1 | 0;
  i5 = i12 | 0;
  _memmove(i6 | 0, i5 | 0, (_strlen(HEAP32[i11 >> 2] | 0) | 0) + 1 | 0) | 0;
  HEAP32[i10 >> 2] = 0;
  i26 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i7;
  return i26 | 0;
 }
 i5 = HEAP32[i24 >> 2] | 0;
 if ((HEAP32[i24 >> 2] | 0) == 2 | (HEAP32[i24 >> 2] | 0) == 3 | (HEAP32[i24 >> 2] | 0) == 4) {
  if ((i5 | 0) == 2) i27 = 3; else i27 = (HEAP32[i24 >> 2] | 0) == 4 ? 7 : 2;
  HEAP32[i21 >> 2] = _find_ident_under_cursor(i19, i27) | 0;
  if (!(HEAP32[i21 >> 2] | 0)) {
   HEAP32[HEAP32[i15 >> 2] >> 2] = 114072;
   HEAP32[i10 >> 2] = 0;
   i26 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i7;
   return i26 | 0;
  }
 } else {
  L21 : do switch (i5 | 0) {
  case 0:
   {
    if (!(HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0)) {
     HEAP32[i19 >> 2] = 114072;
     HEAP32[i23 >> 2] = 0;
     break L21;
    } else {
     HEAP32[i19 >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2];
     break L21;
    }
    break;
   }
  case 1:
   {
    if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) == 35) {
     HEAP32[i19 >> 2] = _arg_all() | 0;
     HEAP32[i20 >> 2] = HEAP32[i19 >> 2];
     HEAP32[HEAP32[i13 >> 2] >> 2] = 2;
     if (!(HEAP32[i16 >> 2] | 0)) break L21;
     HEAP32[HEAP32[i16 >> 2] >> 2] = 1;
     break L21;
    }
    HEAP32[i18 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0) == 60) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
    HEAP32[i17 >> 2] = _getdigits(i18) | 0;
    if ((HEAP32[i18 >> 2] | 0) == ((HEAP32[i11 >> 2] | 0) + 2 | 0)) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) == 45) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
    HEAP32[HEAP32[i13 >> 2] >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
    if (HEAP32[i17 >> 2] | 0 ? (HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) == 60 : 0) if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) < 2) {
     HEAP32[HEAP32[i13 >> 2] >> 2] = 1;
     HEAP32[i10 >> 2] = 0;
     i26 = HEAP32[i10 >> 2] | 0;
     STACKTOP = i7;
     return i26 | 0;
    } else {
     HEAP32[HEAP32[i15 >> 2] >> 2] = 45989;
     HEAP32[i10 >> 2] = 0;
     i26 = HEAP32[i10 >> 2] | 0;
     STACKTOP = i7;
     return i26 | 0;
    }
    if (!(HEAP32[i17 >> 2] | 0)) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) == 60) if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) > 1) HEAP32[HEAP32[i13 >> 2] >> 2] = 1;
    HEAP32[i22 >> 2] = _buflist_findnr(HEAP32[i17 >> 2] | 0) | 0;
    if (!(HEAP32[i22 >> 2] | 0)) {
     HEAP32[HEAP32[i15 >> 2] >> 2] = 46041;
     HEAP32[i10 >> 2] = 0;
     i26 = HEAP32[i10 >> 2] | 0;
     STACKTOP = i7;
     return i26 | 0;
    }
    if (HEAP32[i14 >> 2] | 0) HEAP32[HEAP32[i14 >> 2] >> 2] = -1;
    if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 76 >> 2] | 0)) {
     HEAP32[i19 >> 2] = 114072;
     HEAP32[i23 >> 2] = 0;
     break L21;
    } else {
     HEAP32[i19 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 76 >> 2];
     break L21;
    }
    break;
   }
  case 8:
   {
    HEAP32[i19 >> 2] = HEAP32[26845];
    if (!((HEAP32[i19 >> 2] | 0) == 0 | (HEAP32[27179] | 0) != 0)) {
     HEAP32[27179] = 1;
     HEAP32[i19 >> 2] = _FullName_save(HEAP32[26845] | 0, 0) | 0;
     _vim_free(HEAP32[26845] | 0);
     HEAP32[26845] = HEAP32[i19 >> 2];
    }
    if (HEAP32[i19 >> 2] | 0) {
     HEAP32[i19 >> 2] = _shorten_fname1(HEAP32[i19 >> 2] | 0) | 0;
     break L21;
    }
    HEAP32[HEAP32[i15 >> 2] >> 2] = 46092;
    HEAP32[i10 >> 2] = 0;
    i26 = HEAP32[i10 >> 2] | 0;
    STACKTOP = i7;
    return i26 | 0;
   }
  case 9:
   {
    if ((HEAP32[26846] | 0) > 0) {
     HEAP32[i9 >> 2] = HEAP32[26846];
     _sprintf(i25, 78969, i9) | 0;
     HEAP32[i19 >> 2] = i25;
     break L21;
    }
    HEAP32[HEAP32[i15 >> 2] >> 2] = 46151;
    HEAP32[i10 >> 2] = 0;
    i26 = HEAP32[i10 >> 2] | 0;
    STACKTOP = i7;
    return i26 | 0;
   }
  case 10:
   {
    HEAP32[i19 >> 2] = HEAP32[26847];
    if (!(HEAP32[i19 >> 2] | 0)) {
     HEAP32[HEAP32[i15 >> 2] >> 2] = 46213;
     HEAP32[i10 >> 2] = 0;
     i26 = HEAP32[i10 >> 2] | 0;
     STACKTOP = i7;
     return i26 | 0;
    }
    break;
   }
  case 6:
   {
    HEAP32[i19 >> 2] = HEAP32[26731];
    if (!(HEAP32[i19 >> 2] | 0)) {
     HEAP32[HEAP32[i15 >> 2] >> 2] = 46274;
     HEAP32[i10 >> 2] = 0;
     i26 = HEAP32[i10 >> 2] | 0;
     STACKTOP = i7;
     return i26 | 0;
    }
    break;
   }
  case 7:
   {
    if (!((HEAP32[26731] | 0) == 0 | (HEAP32[26732] | 0) == 0)) {
     HEAP32[i8 >> 2] = HEAP32[26732];
     _sprintf(i25, 97769, i8) | 0;
     HEAP32[i19 >> 2] = i25;
     break L21;
    }
    HEAP32[HEAP32[i15 >> 2] >> 2] = 46329;
    HEAP32[i10 >> 2] = 0;
    i26 = HEAP32[i10 >> 2] | 0;
    STACKTOP = i7;
    return i26 | 0;
   }
  default:
   HEAP32[i19 >> 2] = 114072;
  } while (0);
  HEAP32[i21 >> 2] = _strlen(HEAP32[i19 >> 2] | 0) | 0;
  if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[HEAP32[i13 >> 2] >> 2] | 0) >> 0] | 0) == 60) {
   i11 = HEAP32[i13 >> 2] | 0;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
   i11 = _vim_strrchr(HEAP32[i19 >> 2] | 0, 46) | 0;
   HEAP32[i18 >> 2] = i11;
   if (i11 | 0) {
    i11 = HEAP32[i18 >> 2] | 0;
    if (i11 >>> 0 >= (_gettail(HEAP32[i19 >> 2] | 0) | 0) >>> 0) HEAP32[i21 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i19 >> 2] | 0);
   }
  }
 }
 if ((HEAP32[i21 >> 2] | 0) == 0 | (HEAP32[i23 >> 2] | 0) != 3) {
  i18 = HEAP32[i15 >> 2] | 0;
  if ((HEAP32[i23 >> 2] | 0) != 3) HEAP32[i18 >> 2] = 46371; else HEAP32[i18 >> 2] = 46432;
  HEAP32[i19 >> 2] = 0;
 } else HEAP32[i19 >> 2] = _vim_strnsave(HEAP32[i19 >> 2] | 0, HEAP32[i21 >> 2] | 0) | 0;
 _vim_free(HEAP32[i20 >> 2] | 0);
 HEAP32[i10 >> 2] = HEAP32[i19 >> 2];
 i26 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i7;
 return i26 | 0;
}

function _winframe_remove(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 40 | 0;
 i7 = i5 + 36 | 0;
 i8 = i5 + 32 | 0;
 i9 = i5 + 28 | 0;
 i10 = i5 + 24 | 0;
 i11 = i5 + 20 | 0;
 i12 = i5 + 16 | 0;
 i13 = i5 + 12 | 0;
 i14 = i5 + 8 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
 if (!(HEAP32[i9 >> 2] | 0)) {
  if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) i4 = 4;
 } else if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) i4 = 4;
 if ((i4 | 0) == 4) {
  HEAP32[i6 >> 2] = 0;
  i17 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i17 | 0;
 }
 HEAP32[i11 >> 2] = _win_altframe(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = _frame2win(HEAP32[i11 >> 2] | 0) | 0;
 _frame_remove(HEAP32[i13 >> 2] | 0);
 i9 = (HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0) != 0;
 if ((HEAP8[HEAP32[(HEAP32[i13 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 2) {
  L10 : do if (i9) if (HEAP32[(HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0) + 200 + 12 >> 2] | 0) {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2];
   HEAP32[i12 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2];
   while (1) {
    if (!(HEAP32[i10 >> 2] | 0 ? 1 : (HEAP32[i12 >> 2] | 0) != 0)) break L10;
    if (HEAP32[i10 >> 2] | 0) {
     if (HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0) if (!(HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0) + 200 + 12 >> 2] | 0)) {
      i4 = 13;
      break;
     }
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2];
    }
    if (HEAP32[i12 >> 2] | 0) {
     if (HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] | 0) if (!(HEAP32[(HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] | 0) + 200 + 12 >> 2] | 0)) {
      i4 = 18;
      break;
     }
     HEAP32[i12 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2];
    }
   }
   if ((i4 | 0) == 13) {
    HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i14 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2];
    break;
   } else if ((i4 | 0) == 18) {
    HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
    HEAP32[i14 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2];
    break;
   }
  } while (0);
  i3 = HEAP32[i11 >> 2] | 0;
  i2 = HEAP32[i13 >> 2] | 0;
  _frame_new_height(i3 | 0, (HEAP32[i3 + 12 >> 2] | 0) + (HEAP32[i2 + 12 >> 2] | 0) | 0, (i3 | 0) == (HEAP32[i2 + 24 >> 2] | 0) ? 1 : 0, 0);
  HEAP32[HEAP32[i8 >> 2] >> 2] = 118;
 } else {
  L33 : do if (i9) if (HEAP32[(HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0) + 200 + 16 >> 2] | 0) {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2];
   HEAP32[i12 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2];
   while (1) {
    if (!(HEAP32[i10 >> 2] | 0 ? 1 : (HEAP32[i12 >> 2] | 0) != 0)) break L33;
    if (HEAP32[i10 >> 2] | 0) {
     if (HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0) if (!(HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0) + 200 + 16 >> 2] | 0)) {
      i4 = 29;
      break;
     }
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2];
    }
    if (HEAP32[i12 >> 2] | 0) {
     if (HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] | 0) if (!(HEAP32[(HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] | 0) + 200 + 16 >> 2] | 0)) {
      i4 = 34;
      break;
     }
     HEAP32[i12 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2];
    }
   }
   if ((i4 | 0) == 29) {
    HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i14 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2];
    break;
   } else if ((i4 | 0) == 34) {
    HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
    HEAP32[i14 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2];
    break;
   }
  } while (0);
  i4 = HEAP32[i11 >> 2] | 0;
  i9 = HEAP32[i13 >> 2] | 0;
  _frame_new_width(i4 | 0, (HEAP32[i4 + 4 >> 2] | 0) + (HEAP32[i9 + 4 >> 2] | 0) | 0, (i4 | 0) == (HEAP32[i9 + 24 >> 2] | 0) ? 1 : 0, 0);
  HEAP32[HEAP32[i8 >> 2] >> 2] = 104;
 }
 if ((HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[i13 >> 2] | 0) + 24 >> 2] | 0)) {
  HEAP32[i15 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 84 >> 2];
  HEAP32[i16 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 96 >> 2];
  _frame_comp_pos(HEAP32[i11 >> 2] | 0, i15, i16);
 }
 if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0)) if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] | 0)) {
  HEAP8[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] >> 0] = HEAP8[HEAP32[i11 >> 2] >> 0] | 0;
  i16 = HEAP32[i11 >> 2] | 0;
  HEAP32[(HEAP32[i16 + 20 >> 2] | 0) + 32 >> 2] = HEAP32[i16 + 32 >> 2];
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2];
  while (1) {
   i18 = HEAP32[i11 >> 2] | 0;
   if (!(HEAP32[i10 >> 2] | 0)) break;
   HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = HEAP32[i18 + 20 >> 2];
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2];
  }
  HEAP32[(HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] | 0) + 36 >> 2] = HEAP32[i18 + 36 >> 2];
  if (HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0) {
   i18 = HEAP32[i11 >> 2] | 0;
   HEAP32[(HEAP32[i18 + 36 >> 2] | 0) + 20 >> 2] = HEAP32[i18 + 20 >> 2];
  }
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2];
  if ((HEAP32[(HEAP32[27114] | 0) + 32 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) HEAP32[(HEAP32[27114] | 0) + 32 >> 2] = HEAP32[i10 >> 2];
  _vim_free(HEAP32[i11 >> 2] | 0);
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2];
  if (HEAP32[i11 >> 2] | 0) if ((HEAP8[HEAP32[i11 >> 2] >> 0] | 0) == (HEAP8[HEAP32[i10 >> 2] >> 0] | 0)) {
   if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2];
   i18 = HEAP32[i10 >> 2] | 0;
   HEAP32[(HEAP32[i18 + 32 >> 2] | 0) + 28 >> 2] = HEAP32[i18 + 28 >> 2];
   if (HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] | 0) {
    i18 = HEAP32[i10 >> 2] | 0;
    HEAP32[(HEAP32[i18 + 28 >> 2] | 0) + 24 >> 2] = HEAP32[i18 + 32 >> 2];
   }
   HEAP32[i12 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2];
   while (1) {
    HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] = HEAP32[i11 >> 2];
    if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2] | 0)) break;
    HEAP32[i12 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2];
   }
   HEAP32[(HEAP32[i12 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2];
   if (HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) + 28 >> 2] = HEAP32[i12 >> 2];
   if ((HEAP32[(HEAP32[27114] | 0) + 32 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) HEAP32[(HEAP32[27114] | 0) + 32 >> 2] = HEAP32[i11 >> 2];
   _vim_free(HEAP32[i10 >> 2] | 0);
  }
 }
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 i17 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i17 | 0;
}

function _buf_check_timestamp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i5 = i4;
 i6 = i4 + 152 | 0;
 i7 = i4 + 148 | 0;
 i8 = i4 + 144 | 0;
 i9 = i4 + 68 | 0;
 i10 = i4 + 64 | 0;
 i11 = i4 + 60 | 0;
 i12 = i4 + 56 | 0;
 i13 = i4 + 52 | 0;
 i14 = i4 + 48 | 0;
 i15 = i4 + 44 | 0;
 i16 = i4 + 40 | 0;
 i17 = i4 + 36 | 0;
 i18 = i4 + 32 | 0;
 i19 = i4 + 28 | 0;
 i20 = i4 + 24 | 0;
 i21 = i4 + 20 | 0;
 i22 = i4 + 16 | 0;
 i23 = i4 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 114072;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i19 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 180 >> 2];
 HEAP32[i20 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 184 >> 2];
 HEAP32[i21 >> 2] = HEAP32[26757];
 _set_bufref(i23, HEAP32[i7 >> 2] | 0);
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) if (!(HEAPU8[HEAP32[(HEAP32[i7 >> 2] | 0) + 592 >> 2] >> 0] | 0)) if (!(HEAP32[25467] | 0 ? 1 : (HEAP32[(HEAP32[i7 >> 2] | 0) + 148 >> 2] | 0) != 0)) {
  do if (HEAP32[(HEAP32[i7 >> 2] | 0) + 60 >> 2] & 8 | 0) i3 = 45; else if (HEAP32[(HEAP32[i7 >> 2] | 0) + 172 >> 2] | 0) {
   i2 = _stat(HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0, i9) | 0;
   HEAP32[i10 >> 2] = i2;
   if ((i2 | 0) >= 0) if (!(_time_differs(HEAP32[i9 + 56 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 172 >> 2] | 0) | 0)) if ((HEAP32[i9 + 36 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 180 >> 2] | 0)) if ((HEAP32[i9 + 12 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 184 >> 2] | 0)) {
    i3 = 45;
    break;
   }
   HEAP32[i11 >> 2] = 1;
   i2 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[i10 >> 2] | 0) < 0) {
    HEAP32[i2 + 172 >> 2] = 0;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 180 >> 2] = 0;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 184 >> 2] = 0;
   } else _buf_store_time(i2, i9, HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0);
   if (!(_mch_isdir(HEAP32[(HEAP32[i7 >> 2] | 0) + 76 >> 2] | 0) | 0)) {
    if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 740 >> 2] | 0) >= 0) {
     if (HEAP32[(HEAP32[i7 >> 2] | 0) + 740 >> 2] | 0) i3 = 19;
    } else if (HEAP32[26889] | 0) i3 = 19;
    if ((i3 | 0) == 19) {
     i2 = (_bufIsChanged(HEAP32[i7 >> 2] | 0) | 0) == 0;
     if (i2 & (HEAP32[i10 >> 2] | 0) >= 0) {
      HEAP32[i17 >> 2] = 1;
      break;
     }
    }
    do if ((HEAP32[i10 >> 2] | 0) < 0) HEAP32[i18 >> 2] = 55281; else {
     if (_bufIsChanged(HEAP32[i7 >> 2] | 0) | 0) {
      HEAP32[i18 >> 2] = 55289;
      break;
     }
     if ((HEAP32[i19 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 180 >> 2] | 0)) if (!(_buf_contents_changed(HEAP32[i7 >> 2] | 0) | 0)) if ((HEAP32[i20 >> 2] | 0) != (HEAP32[(HEAP32[i7 >> 2] | 0) + 184 >> 2] | 0)) {
      HEAP32[i18 >> 2] = 55306;
      break;
     } else {
      HEAP32[i18 >> 2] = 55311;
      break;
     }
     HEAP32[i18 >> 2] = 55298;
    } while (0);
    HEAP32[25467] = 1;
    HEAP32[26786] = (HEAP32[26786] | 0) + 1;
    i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 76 >> 2] | 0;
    i1 = HEAP32[i7 >> 2] | 0;
    HEAP32[i22 >> 2] = _apply_autocmds(39, i2 | 0, i2 | 0, 0, i1 | 0) | 0;
    HEAP32[26786] = (HEAP32[26786] | 0) + -1;
    HEAP32[25467] = 0;
    if (HEAP32[i22 >> 2] | 0) {
     if (!(_bufref_valid(i23) | 0)) _emsg(55316) | 0;
     HEAP32[i6 >> 2] = 2;
     i24 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i4;
     return i24 | 0;
    }
    if (!(HEAP32[i22 >> 2] | 0)) {
     if ((HEAP8[HEAP32[i18 >> 2] >> 0] | 0) == 100) {
      HEAP32[i14 >> 2] = 55366;
      break;
     }
     HEAP32[i16 >> 2] = 1;
     if ((HEAP8[(HEAP32[i18 >> 2] | 0) + 2 >> 0] | 0) == 110) {
      HEAP32[i14 >> 2] = 55402;
      HEAP32[i15 >> 2] = 55480;
      break;
     }
     if ((HEAP8[(HEAP32[i18 >> 2] | 0) + 1 >> 0] | 0) == 104) {
      HEAP32[i14 >> 2] = 55511;
      HEAP32[i15 >> 2] = 55569;
      break;
     }
     if ((HEAP8[HEAP32[i18 >> 2] >> 0] | 0) == 109) {
      HEAP32[i14 >> 2] = 55600;
      HEAP32[i15 >> 2] = 55666;
      break;
     } else {
      i1 = HEAP32[i7 >> 2] | 0;
      HEAP32[i1 + 176 >> 2] = HEAP32[i1 + 172 >> 2];
      break;
     }
    }
   }
  } else i3 = 45; while (0);
  if ((i3 | 0) == 45) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 60 >> 2] & 16 | 0) if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 60 >> 2] & 32)) if (_vim_fexists(HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0) | 0) {
   HEAP32[i11 >> 2] = 1;
   HEAP32[i14 >> 2] = 55697;
   i18 = (HEAP32[i7 >> 2] | 0) + 60 | 0;
   HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 32;
  }
  if (HEAP32[i14 >> 2] | 0) {
   i18 = HEAP32[i7 >> 2] | 0;
   HEAP32[i12 >> 2] = _home_replace_save(i18 | 0, HEAP32[i18 + 76 >> 2] | 0) | 0;
   if (HEAP32[i12 >> 2] | 0) {
    if (!(HEAP32[i16 >> 2] | 0)) HEAP32[i15 >> 2] = 114072;
    i16 = _strlen(HEAP32[i12 >> 2] | 0) | 0;
    i18 = i16 + (_strlen(HEAP32[i14 >> 2] | 0) | 0) | 0;
    HEAP32[i13 >> 2] = _alloc(i18 + (_strlen(HEAP32[i15 >> 2] | 0) | 0) + 2 | 0) | 0;
    i18 = HEAP32[i13 >> 2] | 0;
    i16 = HEAP32[i14 >> 2] | 0;
    HEAP32[i5 >> 2] = HEAP32[i12 >> 2];
    _sprintf(i18, i16, i5) | 0;
    if ((HEAP32[10180] | 0) > 257) i3 = 55; else if ((HEAP32[10180] & 8 | 0) != 0 | (HEAP32[25466] | 0) != 0) i3 = 55; else {
     if (!(HEAP32[26744] | 0)) {
      _msg_start();
      _msg_puts_attr(HEAP32[i13 >> 2] | 0, (HEAP32[27052] | 0) + 4096 | 0);
      if (HEAP8[HEAP32[i15 >> 2] >> 0] | 0) _msg_puts_attr(HEAP32[i15 >> 2] | 0, (HEAP32[27067] | 0) + 4096 | 0);
      _msg_clr_eos();
      _msg_end() | 0;
      if (!(HEAP32[26810] | 0)) {
       _out_flush();
       if (!(HEAP32[i8 >> 2] | 0)) _ui_delay(1e3, 1);
       HEAP32[26699] = 0;
      }
     }
     HEAP32[25466] = 1;
    }
    if ((i3 | 0) == 55) {
     if (HEAP8[HEAP32[i15 >> 2] >> 0] | 0) {
      _strcat(HEAP32[i13 >> 2] | 0, 55760) | 0;
      _strcat(HEAP32[i13 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
     }
     _emsg(HEAP32[i13 >> 2] | 0) | 0;
     HEAP32[i11 >> 2] = 2;
    }
    _vim_free(HEAP32[i12 >> 2] | 0);
    _vim_free(HEAP32[i13 >> 2] | 0);
   }
  }
  if (HEAP32[i17 >> 2] | 0) _buf_reload(HEAP32[i7 >> 2] | 0, HEAP32[i20 >> 2] | 0);
  i20 = (_bufref_valid(i23) | 0) != 0;
  if (i20 & (HEAP32[i11 >> 2] | 0) != 0) {
   i20 = HEAP32[(HEAP32[i7 >> 2] | 0) + 76 >> 2] | 0;
   i23 = HEAP32[i7 >> 2] | 0;
   _apply_autocmds(40, i20 | 0, i20 | 0, 0, i23 | 0) | 0;
  }
  HEAP32[26757] = HEAP32[i21 >> 2];
  HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
  i24 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i4;
  return i24 | 0;
 }
 HEAP32[i6 >> 2] = 0;
 i24 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i4;
 return i24 | 0;
}

function _screenalloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 52 | 0;
 i5 = i3 + 48 | 0;
 i6 = i3 + 44 | 0;
 i7 = i3 + 40 | 0;
 i8 = i3 + 36 | 0;
 i9 = i3 + 32 | 0;
 i10 = i3 + 28 | 0;
 i11 = i3 + 24 | 0;
 i12 = i3 + 20 | 0;
 i13 = i3 + 16 | 0;
 i14 = i3 + 12 | 0;
 i15 = i3 + 8 | 0;
 i16 = i3 + 4 | 0;
 i17 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 while (1) {
  if (HEAP32[26691] | 0) if ((HEAP32[10173] | 0) == (HEAP32[26696] | 0)) {
   if (((HEAP32[10173] | 0) == 0 ? 1 : (HEAP32[10174] | 0) == (HEAP32[26697] | 0)) | (HEAP32[10174] | 0) == 0) {
    i2 = 69;
    break;
   }
  } else i2 = 5; else i2 = 5;
  if ((i2 | 0) == 5) {
   i2 = 0;
   if ((HEAP32[10173] | 0) == 0 | (HEAP32[10174] | 0) == 0) {
    i2 = 69;
    break;
   }
  }
  if ((HEAP32[26781] | 0) == 0 & (HEAP32[26691] | 0) == 0 | (HEAP32[26463] | 0) != 0) {
   i2 = 69;
   break;
  }
  HEAP32[26463] = 1;
  HEAP32[26814] = (HEAP32[26814] | 0) + 1;
  _win_new_shellsize();
  _comp_col();
  HEAP32[i16 >> 2] = HEAP32[26884];
  while (1) {
   if (!(HEAP32[i16 >> 2] | 0)) break;
   if ((HEAP32[i16 >> 2] | 0) == (HEAP32[26886] | 0)) i18 = HEAP32[26887] | 0; else i18 = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0;
   HEAP32[i8 >> 2] = i18;
   while (1) {
    if (!(HEAP32[i8 >> 2] | 0)) break;
    _win_free_lsize(HEAP32[i8 >> 2] | 0);
    HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2];
   }
   HEAP32[i16 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
  }
  if (HEAP32[27113] | 0) _win_free_lsize(HEAP32[27113] | 0);
  HEAP32[i11 >> 2] = _lalloc(Math_imul((HEAP32[10173] | 0) + 1 | 0, HEAP32[10174] | 0) | 0, 0) | 0;
  HEAP32[i12 >> 2] = _lalloc((Math_imul((HEAP32[10173] | 0) + 1 | 0, HEAP32[10174] | 0) | 0) << 1, 0) | 0;
  HEAP32[i13 >> 2] = _lalloc(HEAP32[10173] << 2, 0) | 0;
  HEAP32[i14 >> 2] = _lalloc(HEAP32[10173] | 0, 0) | 0;
  HEAP32[i15 >> 2] = _lalloc(HEAP32[10174] << 1, 0) | 0;
  HEAP32[i16 >> 2] = HEAP32[26884];
  L25 : while (1) {
   if (!(HEAP32[i16 >> 2] | 0)) {
    i2 = 29;
    break;
   }
   if ((HEAP32[i16 >> 2] | 0) == (HEAP32[26886] | 0)) i19 = HEAP32[26887] | 0; else i19 = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2] | 0;
   HEAP32[i8 >> 2] = i19;
   while (1) {
    if (!(HEAP32[i8 >> 2] | 0)) break;
    if (!(_win_alloc_lines(HEAP32[i8 >> 2] | 0) | 0)) {
     i2 = 26;
     break L25;
    }
    HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2];
   }
   HEAP32[i16 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
  }
  if ((i2 | 0) == 26) {
   i2 = 0;
   HEAP32[i9 >> 2] = 1;
  } else if ((i2 | 0) == 29) {
   i2 = 0;
   if (HEAP32[27113] | 0) if (!(HEAP32[(HEAP32[27113] | 0) + 156 >> 2] | 0)) if (!(_win_alloc_lines(HEAP32[27113] | 0) | 0)) HEAP32[i9 >> 2] = 1;
  }
  if ((HEAP32[i11 >> 2] | 0) == 0 | (HEAP32[i12 >> 2] | 0) == 0 | (HEAP32[i13 >> 2] | 0) == 0 | (HEAP32[i14 >> 2] | 0) == 0 | (HEAP32[i15 >> 2] | 0) == 0 | (HEAP32[i9 >> 2] | 0) != 0) {
   if (!((HEAP32[26691] | 0) == 0 & (HEAP32[26464] | 0) != 0)) {
    _do_outofmem_msg(Math_imul((HEAP32[10173] | 0) + 1 | 0, HEAP32[10174] | 0) | 0);
    HEAP32[26464] = 1;
   }
   if (HEAP32[i11 >> 2] | 0) {
    _vim_free(HEAP32[i11 >> 2] | 0);
    HEAP32[i11 >> 2] = 0;
   }
   if (HEAP32[i12 >> 2] | 0) {
    _vim_free(HEAP32[i12 >> 2] | 0);
    HEAP32[i12 >> 2] = 0;
   }
   if (HEAP32[i13 >> 2] | 0) {
    _vim_free(HEAP32[i13 >> 2] | 0);
    HEAP32[i13 >> 2] = 0;
   }
   if (HEAP32[i14 >> 2] | 0) {
    _vim_free(HEAP32[i14 >> 2] | 0);
    HEAP32[i14 >> 2] = 0;
   }
   if (HEAP32[i15 >> 2] | 0) {
    _vim_free(HEAP32[i15 >> 2] | 0);
    HEAP32[i15 >> 2] = 0;
   }
  } else {
   HEAP32[26464] = 0;
   HEAP32[i5 >> 2] = 0;
   while (1) {
    if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[10173] | 0)) break;
    i1 = Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[10174] | 0) | 0;
    HEAP32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] = i1;
    HEAP8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] = 0;
    if (!(HEAP32[i4 >> 2] | 0)) {
     i1 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[10174] | 0) | 0) | 0;
     _memset(i1 | 0, 32, HEAP32[10174] | 0) | 0;
     i1 = (HEAP32[i12 >> 2] | 0) + ((Math_imul(HEAP32[i5 >> 2] | 0, HEAP32[10174] | 0) | 0) << 1) | 0;
     _memset(i1 | 0, 0, HEAP32[10174] << 1 | 0) | 0;
     HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) + ((HEAP32[26696] | 0) - (HEAP32[10173] | 0));
     if ((HEAP32[i6 >> 2] | 0) >= 0 & (HEAP32[26691] | 0) != 0) {
      if ((HEAP32[26697] | 0) < (HEAP32[10174] | 0)) HEAP32[i10 >> 2] = HEAP32[26697]; else HEAP32[i10 >> 2] = HEAP32[10174];
      _memmove((HEAP32[i11 >> 2] | 0) + (HEAP32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0) | 0, (HEAP32[26691] | 0) + (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0) | 0, HEAP32[i10 >> 2] | 0) | 0;
      _memmove((HEAP32[i12 >> 2] | 0) + (HEAP32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] << 1) | 0, (HEAP32[26692] | 0) + (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] << 1) | 0, HEAP32[i10 >> 2] << 1 | 0) | 0;
     }
    }
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   }
   HEAP32[26456] = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[10173] | 0, HEAP32[10174] | 0) | 0);
  }
  _free_screenlines();
  HEAP32[26691] = HEAP32[i11 >> 2];
  HEAP32[26692] = HEAP32[i12 >> 2];
  HEAP32[26693] = HEAP32[i13 >> 2];
  HEAP32[26694] = HEAP32[i14 >> 2];
  HEAP32[26695] = HEAP32[i15 >> 2];
  HEAP32[i7 >> 2] = HEAP32[26696];
  HEAP32[26696] = HEAP32[10173];
  HEAP32[26697] = HEAP32[10174];
  HEAP32[26828] = 50;
  if (HEAP32[i4 >> 2] | 0) _screenclear2(); else if ((((HEAP32[26627] | 0) == 0 | (HEAP32[26628] | 0) != 0) ^ 1) & (HEAP32[26691] | 0) != 0) if ((HEAP32[i7 >> 2] | 0) != (HEAP32[10173] | 0)) {
   _gui_redraw_block(0, 0, (HEAP32[10173] | 0) - 1 | 0, (HEAP32[10174] | 0) - 1 | 0, 0) | 0;
   i1 = HEAP32[10173] | 0;
   if ((HEAP32[26877] | 0) >= (HEAP32[10173] | 0)) HEAP32[26877] = i1 - 1; else if ((i1 | 0) > (HEAP32[i7 >> 2] | 0)) HEAP32[26877] = (HEAP32[26877] | 0) + ((HEAP32[10173] | 0) - (HEAP32[i7 >> 2] | 0));
   if ((HEAP32[27043] | 0) >= (HEAP32[10174] | 0)) HEAP32[27043] = (HEAP32[10174] | 0) - 1;
  }
  HEAP32[26463] = 0;
  HEAP32[26814] = (HEAP32[26814] | 0) + -1;
  if (HEAP32[10177] | 0) {
   i2 = 69;
   break;
  }
  i1 = (HEAP32[i17 >> 2] | 0) + 1 | 0;
  HEAP32[i17 >> 2] = i1;
  if ((i1 | 0) > 3) {
   i2 = 69;
   break;
  }
  _apply_autocmds(92, 0, 0, 0, HEAP32[26773] | 0) | 0;
 }
 if ((i2 | 0) == 69) {
  STACKTOP = i3;
  return;
 }
}

function _current_search(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i4 + 72 | 0;
 i6 = i4 + 68 | 0;
 i7 = i4 + 64 | 0;
 i8 = i4 + 56 | 0;
 i9 = i4 + 48 | 0;
 i10 = i4 + 40 | 0;
 i11 = i4 + 32 | 0;
 i12 = i4 + 28 | 0;
 i13 = i4 + 24 | 0;
 i14 = i4 + 20 | 0;
 i15 = i4 + 76 | 0;
 i16 = i4 + 16 | 0;
 i17 = i4 + 8 | 0;
 i18 = i4 + 4 | 0;
 i19 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP8[i15 >> 0] = HEAP32[27038];
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = HEAP32[27117];
 HEAP32[i17 + 4 >> 2] = HEAP32[27118];
 HEAP32[i19 >> 2] = HEAP32[i7 >> 2] | 0 ? 1 : -1;
 HEAP32[27038] = 0;
 do if (HEAP32[26788] | 0) if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) {
  if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
   if ((HEAP32[27117] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) break;
  } else if ((HEAP32[27118] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
  _dec_cursor() | 0;
 } while (0);
 i2 = (HEAP32[26881] | 0) + 24 | 0;
 do if (HEAP32[26788] | 0) {
  HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  i1 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  if (HEAP32[26788] | 0) if (HEAP32[i7 >> 2] | 0) {
   _incl(i11) | 0;
   break;
  } else {
   _decl(i11) | 0;
   break;
  }
 } else {
  HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 } while (0);
 HEAP32[i18 >> 2] = _is_one_char(HEAP32[30064 + ((HEAP32[26465] | 0) * 28 | 0) >> 2] | 0, 1, (HEAP32[26881] | 0) + 24 | 0, 1) | 0;
 if ((HEAP32[i18 >> 2] | 0) == -1) {
  HEAP32[27038] = HEAPU8[i15 >> 0];
  HEAP32[i5 >> 2] = 0;
  i20 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i20 | 0;
 }
 HEAP32[i12 >> 2] = 0;
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) >= 2) break;
  i2 = HEAP32[i12 >> 2] | 0;
  if (HEAP32[i7 >> 2] | 0) HEAP32[i13 >> 2] = i2; else HEAP32[i13 >> 2] = ((i2 | 0) != 0 ^ 1) & 1;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i16 >> 2] = (HEAP32[i13 >> 2] | 0) != 0 | (HEAP32[i18 >> 2] | 0) != 0 ? 0 : 64;
  HEAP32[i14 >> 2] = _searchit(HEAP32[26881] | 0, HEAP32[26773] | 0, i11, HEAP32[i13 >> 2] | 0 ? 1 : -1, HEAP32[30064 + ((HEAP32[26465] | 0) * 28 | 0) >> 2] | 0, HEAP32[i12 >> 2] | 0 ? HEAP32[i6 >> 2] | 0 : 1, 1024 | HEAP32[i16 >> 2], 0, 0, 0, 0) | 0;
  if ((HEAP32[i14 >> 2] | 0) == 0 & (HEAP32[i12 >> 2] | 0) != 0) {
   i3 = 21;
   break;
  }
  do if (!((HEAP32[i12 >> 2] | 0) != 0 | (HEAP32[i14 >> 2] | 0) != 0)) if (HEAP32[i7 >> 2] | 0) {
   HEAP32[i11 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   break;
  } else {
   HEAP32[i11 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 4 >> 2] >> 2];
   HEAP32[i11 + 4 >> 2] = _strlen(_ml_get(HEAP32[HEAP32[(HEAP32[26881] | 0) + 4 >> 2] >> 2] | 0) | 0) | 0;
   break;
  } while (0);
  if (!(HEAP32[i12 >> 2] | 0)) {
   HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  }
  HEAP32[27038] = HEAPU8[i15 >> 0];
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 21) {
  i6 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  if (HEAP32[26788] | 0) {
   HEAP32[27117] = HEAP32[i17 >> 2];
   HEAP32[27118] = HEAP32[i17 + 4 >> 2];
  }
  HEAP32[27038] = HEAPU8[i15 >> 0];
  HEAP32[i5 >> 2] = 0;
  i20 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i20 | 0;
 };
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i16 >> 2] = HEAP32[i7 >> 2] | 0 ? 64 : 256;
 HEAP32[i18 >> 2] = _is_one_char(HEAP32[30064 + ((HEAP32[26465] | 0) * 28 | 0) >> 2] | 0, 0, i11, HEAP32[i19 >> 2] | 0) | 0;
 if ((HEAP32[i18 >> 2] | 0) < 0) {
  HEAP32[i5 >> 2] = 0;
  i20 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i20 | 0;
 }
 L49 : do if (!(HEAP32[i18 >> 2] | 0)) {
  HEAP32[27038] = 0;
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >= 2) break L49;
   HEAP32[i14 >> 2] = _searchit(HEAP32[26881] | 0, HEAP32[26773] | 0, i11, HEAP32[i19 >> 2] | 0, HEAP32[30064 + ((HEAP32[26465] | 0) * 28 | 0) >> 2] | 0, 0, HEAP32[i16 >> 2] | 1024, 0, 0, 0, 0) | 0;
   if (HEAP32[i14 >> 2] | 0) break L49;
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[27038] = HEAPU8[i15 >> 0];
 if (!(HEAP32[i14 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i20 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i20 | 0;
 }
 if (!(HEAP32[26788] | 0)) {
  HEAP32[27117] = HEAP32[i8 >> 2];
  HEAP32[27118] = HEAP32[i8 + 4 >> 2];
 }
 i8 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[26788] = 1;
 HEAP32[10179] = 118;
 L63 : do if (HEAP32[26788] | 0) {
  _redraw_curbuf_later(20);
  if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) {
   do if (HEAP32[i7 >> 2] | 0) {
    if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
     if ((HEAP32[27117] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i3 = 48;
    } else if ((HEAP32[27118] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i3 = 48;
    if ((i3 | 0) == 48) {
     if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) break;
     if ((HEAP32[27118] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
    }
    _inc_cursor() | 0;
    break L63;
   } while (0);
   if (!(HEAP32[i7 >> 2] | 0)) {
    i11 = (HEAP32[26881] | 0) + 24 | 0;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27117] | 0)) {
     if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[27117] | 0)) i3 = 55;
    } else if ((HEAP32[i11 + 4 >> 2] | 0) >= (HEAP32[27118] | 0)) i3 = 55;
    if ((i3 | 0) == 55) {
     if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27117] | 0)) break;
     if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) != (HEAP32[27118] | 0)) break;
    }
    _inc(108468) | 0;
   }
  }
 } while (0);
 _may_start_select(99);
 _setmouse();
 HEAP32[27105] = 0;
 _redraw_curbuf_later(20);
 _showmode() | 0;
 HEAP32[i5 >> 2] = 1;
 i20 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i20 | 0;
}

function _showmatches(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i4 + 64 | 0;
 i6 = i4 + 60 | 0;
 i7 = i4 + 52 | 0;
 i8 = i4 + 48 | 0;
 i9 = i4 + 44 | 0;
 i10 = i4 + 40 | 0;
 i11 = i4 + 36 | 0;
 i12 = i4 + 32 | 0;
 i13 = i4 + 28 | 0;
 i14 = i4 + 24 | 0;
 i15 = i4 + 20 | 0;
 i16 = i4 + 16 | 0;
 i17 = i4 + 12 | 0;
 i18 = i4 + 8 | 0;
 i19 = i4 + 4 | 0;
 i20 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 + 56 >> 2] = i2;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) == -1) {
  _set_expand_context(i2);
  HEAP32[i9 >> 2] = _expand_cmdline(HEAP32[i6 >> 2] | 0, HEAP32[25236] | 0, HEAP32[25239] | 0, i7, i8) | 0;
  HEAP32[i18 >> 2] = _expand_showtail(HEAP32[i6 >> 2] | 0) | 0;
  if ((HEAP32[i9 >> 2] | 0) != -1) {
   HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
   i21 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i21 | 0;
  }
 } else {
  HEAP32[i7 >> 2] = HEAP32[i2 + 20 >> 2];
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
  HEAP32[i18 >> 2] = HEAP32[25263];
 }
 HEAP32[26712] = 0;
 _msg_start();
 _msg_putchar(10);
 _out_flush();
 HEAP32[26876] = HEAP32[26877];
 HEAP32[26712] = 0;
 _msg_start();
 if (HEAP32[26834] | 0) HEAP32[26834] = 0; else {
  HEAP32[i12 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
   do if (HEAP32[i18 >> 2] | 0) i3 = 14; else {
    if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 2) if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 32) if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 9) {
     i3 = 14;
     break;
    }
    _home_replace(0, HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, HEAP32[26885] | 0, 4096, 1);
    HEAP32[i10 >> 2] = _vim_strsize(HEAP32[26885] | 0) | 0;
   } while (0);
   if ((i3 | 0) == 14) {
    i3 = 0;
    i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0;
    if (HEAP32[i18 >> 2] | 0) i22 = _sm_gettail(i2) | 0; else i22 = i2;
    HEAP32[i10 >> 2] = _vim_strsize(i22) | 0;
   }
   if ((HEAP32[i10 >> 2] | 0) > (HEAP32[i12 >> 2] | 0)) HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 17) HEAP32[i13 >> 2] = HEAP32[i7 >> 2]; else {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 2;
   i22 = ((HEAP32[10174] | 0) + 2 | 0) / (HEAP32[i12 >> 2] | 0) | 0;
   HEAP32[i14 >> 2] = i22;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) < 1 ? 1 : i22;
   i22 = HEAP32[i14 >> 2] | 0;
   HEAP32[i13 >> 2] = ((HEAP32[i7 >> 2] | 0) + i22 - 1 | 0) / (i22 | 0) | 0;
  }
  HEAP32[i17 >> 2] = HEAP32[27051];
  if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 17) {
   _msg_puts_attr(51858, HEAP32[27064] | 0);
   _msg_clr_eos();
   _msg_advance((HEAP32[i12 >> 2] | 0) - 3 | 0);
   _msg_puts_attr(51866, HEAP32[27064] | 0);
  }
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break;
   HEAP32[i16 >> 2] = 999;
   HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
   while (1) {
    if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
    if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 17) {
     i3 = 30;
     break;
    }
    HEAP32[i10 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i16 >> 2] | 0);
    while (1) {
     i22 = (HEAP32[i10 >> 2] | 0) + -1 | 0;
     HEAP32[i10 >> 2] = i22;
     if ((i22 | 0) < 0) break;
     _msg_putchar(32);
    }
    if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 2) i3 = 37; else if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 32) i3 = 37; else if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 9) i3 = 37; else {
     HEAP32[i10 >> 2] = 0;
     i22 = HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
     if (HEAP32[i18 >> 2] | 0) i23 = _sm_gettail(i22) | 0; else i23 = i22;
     HEAP32[i15 >> 2] = i23;
    }
    do if ((i3 | 0) == 37) {
     i3 = 0;
     i22 = HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
     if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) != -1) {
      HEAP32[i20 >> 2] = _expand_env_save_opt(i22, 1) | 0;
      if (HEAP32[i20 >> 2] | 0) i24 = HEAP32[i20 >> 2] | 0; else i24 = HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
      HEAP32[i19 >> 2] = _backslash_halve_save(i24) | 0;
      if (HEAP32[i19 >> 2] | 0) i25 = HEAP32[i19 >> 2] | 0; else i25 = HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
      HEAP32[i10 >> 2] = _mch_isdir(i25) | 0;
      _vim_free(HEAP32[i20 >> 2] | 0);
      _vim_free(HEAP32[i19 >> 2] | 0);
     } else HEAP32[i10 >> 2] = _mch_isdir(i22) | 0;
     if (!(HEAP32[i18 >> 2] | 0)) {
      _home_replace(0, HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0, HEAP32[26885] | 0, 4096, 1);
      HEAP32[i15 >> 2] = HEAP32[26885];
      break;
     }
     i22 = HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
     if (HEAP32[i18 >> 2] | 0) i26 = _sm_gettail(i22) | 0; else i26 = i22;
     HEAP32[i15 >> 2] = i26;
    } while (0);
    HEAP32[i16 >> 2] = _msg_outtrans_attr(HEAP32[i15 >> 2] | 0, HEAP32[i10 >> 2] | 0 ? HEAP32[i17 >> 2] | 0 : 0) | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
   }
   if ((i3 | 0) == 30) {
    i3 = 0;
    _msg_outtrans_attr(HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0, HEAP32[27051] | 0) | 0;
    i22 = HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0;
    HEAP32[i15 >> 2] = i22 + (_strlen(HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) | 0) + 1;
    _msg_advance((HEAP32[i12 >> 2] | 0) + 1 | 0);
    _msg_puts(HEAP32[i15 >> 2] | 0);
    _msg_advance((HEAP32[i12 >> 2] | 0) + 3 | 0);
    _msg_puts_long_attr((HEAP32[i15 >> 2] | 0) + 2 | 0, HEAP32[27051] | 0);
   }
   if ((HEAP32[27043] | 0) > 0) {
    _msg_clr_eos();
    _msg_putchar(10);
   }
   _out_flush();
   if (HEAP32[26834] | 0) {
    i3 = 58;
    break;
   }
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  if ((i3 | 0) == 58) HEAP32[26834] = 0;
  HEAP32[26876] = HEAP32[26877];
 }
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) == -1) _FreeWild(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0);
 HEAP32[i5 >> 2] = -1;
 i21 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i21 | 0;
}

function _str_to_reg(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i8 + 68 | 0;
 i10 = i8 + 64 | 0;
 i11 = i8 + 60 | 0;
 i12 = i8 + 56 | 0;
 i13 = i8 + 52 | 0;
 i14 = i8 + 48 | 0;
 i15 = i8 + 44 | 0;
 i16 = i8 + 40 | 0;
 i17 = i8 + 36 | 0;
 i18 = i8 + 32 | 0;
 i19 = i8 + 28 | 0;
 i20 = i8 + 24 | 0;
 i21 = i8 + 20 | 0;
 i22 = i8 + 16 | 0;
 i23 = i8 + 12 | 0;
 i24 = i8 + 8 | 0;
 i25 = i8 + 4 | 0;
 i26 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 if (!(HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = 0;
 if ((HEAP32[i10 >> 2] | 0) == 255) {
  if (HEAP32[i14 >> 2] | 0) i27 = 1; else if ((HEAP32[i12 >> 2] | 0) > 0) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) - 1) >> 0] | 0) == 10) i27 = 1; else i27 = (HEAPU8[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) - 1) >> 0] | 0) == 13; else i27 = 0;
  HEAP32[i15 >> 2] = i27 ? 1 : 0;
 } else HEAP32[i15 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i20 >> 2] = 0;
 L13 : do if (HEAP32[i14 >> 2] | 0) {
  HEAP32[i24 >> 2] = HEAP32[i11 >> 2];
  while (1) {
   if (!(HEAP32[HEAP32[i24 >> 2] >> 2] | 0)) break L13;
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
   HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 4;
  }
 } else {
  HEAP32[i18 >> 2] = 0;
  while (1) {
   if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
   if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) >> 0] | 0) == 10) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  }
  if ((HEAP32[i15 >> 2] | 0) == 0 | (HEAP32[i12 >> 2] | 0) == 0) i7 = 21; else if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) - 1) >> 0] | 0) != 10) i7 = 21;
  if ((i7 | 0) == 21) {
   HEAP32[i21 >> 2] = 1;
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) > 0) if (!(HEAPU8[(HEAP32[i9 >> 2] | 0) + 8 >> 0] | 0)) {
   HEAP32[i22 >> 2] = 1;
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
  }
 } while (0);
 i7 = HEAP32[i9 >> 2] | 0;
 if (!((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) | 0)) {
  if (!(HEAP32[i7 >> 2] | 0)) {
   STACKTOP = i8;
   return;
  }
  _vim_free(HEAP32[HEAP32[i9 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i9 >> 2] >> 2] = 0;
  STACKTOP = i8;
  return;
 }
 HEAP32[i25 >> 2] = _lalloc_clear((HEAP32[i7 + 4 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) << 2, 1) | 0;
 if (!(HEAP32[i25 >> 2] | 0)) {
  STACKTOP = i8;
  return;
 }
 HEAP32[i16 >> 2] = 0;
 while (1) {
  i28 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) break;
  i20 = HEAP32[i16 >> 2] << 2 | 0;
  HEAP32[(HEAP32[i25 >> 2] | 0) + i20 >> 2] = HEAP32[i28 + i20 >> 2];
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 _vim_free(i28);
 HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i25 >> 2];
 HEAP32[i26 >> 2] = 0;
 L48 : do if (HEAP32[i14 >> 2] | 0) {
  HEAP32[i24 >> 2] = HEAP32[i11 >> 2];
  while (1) {
   if (!(HEAP32[HEAP32[i24 >> 2] >> 2] | 0)) break L48;
   HEAP32[i18 >> 2] = _strlen(HEAP32[HEAP32[i24 >> 2] >> 2] | 0) | 0;
   i28 = _vim_strnsave(HEAP32[HEAP32[i24 >> 2] >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i25 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] = i28;
   if ((HEAP32[i18 >> 2] | 0) > (HEAP32[i26 >> 2] | 0)) HEAP32[i26 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 4;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  }
 } else {
  HEAP32[i17 >> 2] = 0;
  while (1) {
   if ((HEAP32[i17 >> 2] | 0) >= ((HEAP32[i12 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) | 0)) break L48;
   HEAP32[i18 >> 2] = HEAP32[i17 >> 2];
   while (1) {
    if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
    if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) >> 0] | 0) == 10) break;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   }
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i17 >> 2] | 0);
   if ((HEAP32[i18 >> 2] | 0) > (HEAP32[i26 >> 2] | 0)) HEAP32[i26 >> 2] = HEAP32[i18 >> 2];
   if (HEAP32[i22 >> 2] | 0) {
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + -1;
    HEAP32[i19 >> 2] = _strlen(HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0) | 0;
   } else HEAP32[i19 >> 2] = 0;
   HEAP32[i23 >> 2] = _alloc((HEAP32[i18 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + 1 | 0) | 0;
   if (!(HEAP32[i23 >> 2] | 0)) break L48;
   if (HEAP32[i19 >> 2] | 0) _memmove(HEAP32[i23 >> 2] | 0, HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0, HEAP32[i19 >> 2] | 0) | 0;
   if (HEAP32[i22 >> 2] | 0) _vim_free(HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0);
   if (HEAP32[i18 >> 2] | 0) _memmove((HEAP32[i23 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) | 0, (HEAP32[i11 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0) | 0;
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
   HEAP8[(HEAP32[i23 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] = 0;
   i28 = HEAP32[i23 >> 2] | 0;
   i20 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
   i7 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i7 + 1;
   HEAP32[i20 + (i7 << 2) >> 2] = i28;
   while (1) {
    i28 = (HEAP32[i19 >> 2] | 0) + -1 | 0;
    HEAP32[i19 >> 2] = i28;
    if ((i28 | 0) < 0) break;
    if (!(HEAPU8[HEAP32[i23 >> 2] >> 0] | 0)) HEAP8[HEAP32[i23 >> 2] >> 0] = 10;
    HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
   }
   HEAP32[i22 >> 2] = 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i18 >> 2] | 0) + 1);
  }
 } while (0);
 HEAP8[(HEAP32[i9 >> 2] | 0) + 8 >> 0] = HEAP32[i15 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = HEAP32[i16 >> 2];
 if ((HEAP32[i15 >> 2] | 0) == 2) {
  i15 = HEAP32[i13 >> 2] | 0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] = (i15 | 0) < 0 ? (HEAP32[i26 >> 2] | 0) - 1 | 0 : i15 | 0;
  STACKTOP = i8;
  return;
 } else {
  HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] = 0;
  STACKTOP = i8;
  return;
 }
}

function _ex_listdo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i8 >> 2] = HEAP32[26773];
 HEAP32[i9 >> 2] = 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) != 57) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) != 216) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) != 61) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) != 222) {
  _start_global_changes();
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 512) i2 = 10; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 443) i2 = 10; else if (_buf_hide(HEAP32[26773] | 0) | 0) i2 = 10; else if (!(_check_changed(HEAP32[26773] | 0, 1 | (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0 ? 4 : 0) | 16) | 0)) i2 = 10;
  if ((i2 | 0) == 10) {
   HEAP32[i5 >> 2] = 0;
   HEAP32[i6 >> 2] = HEAP32[26887];
   HEAP32[i7 >> 2] = HEAP32[26884];
   L12 : do switch (HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) {
   case 512:
    {
     while (1) {
      if (!(HEAP32[i6 >> 2] | 0)) break L12;
      if (((HEAP32[i5 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) break L12;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
      HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
     }
     break;
    }
   case 443:
    {
     while (1) {
      if (!(HEAP32[i7 >> 2] | 0)) break L12;
      if (((HEAP32[i5 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) break L12;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
      HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
     }
     break;
    }
   case 10:
    {
     HEAP32[i5 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) - 1;
     break;
    }
   default:
    {}
   } while (0);
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 39) {
    HEAP32[i8 >> 2] = HEAP32[26771];
    while (1) {
     if (!(HEAP32[i8 >> 2] | 0)) break;
     if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) if (!((HEAP32[(HEAP32[i8 >> 2] | 0) + 596 >> 2] | 0) != 0 ^ 1)) break;
     if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0)) {
      i2 = 26;
      break;
     }
     HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2];
    }
    if ((i2 | 0) == 26) HEAP32[i8 >> 2] = 0;
    if (HEAP32[i8 >> 2] | 0) _goto_buffer(HEAP32[i4 >> 2] | 0, 1, 1, HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] | 0);
   } else _setpcmark();
   HEAP32[26842] = 1;
   L40 : while (1) {
    if (!(HEAP32[26834] | 0 ? 0 : (HEAP32[i8 >> 2] | 0) != 0)) break;
    L43 : do if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 10) {
     if ((HEAP32[i5 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) break L40;
     if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) i2 = 37; else if (!(_editing_arg_idx(HEAP32[26881] | 0) | 0)) i2 = 37;
     if ((i2 | 0) == 37) {
      i2 = 0;
      HEAP32[i10 >> 2] = _vim_strsave(HEAP32[26985] | 0) | 0;
      _set_option_value(62997, 0, 114072, 0) | 0;
      _do_argfile(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
      _set_option_value(62997, 0, HEAP32[i10 >> 2] | 0, 0) | 0;
      _vim_free(HEAP32[i10 >> 2] | 0);
     }
     if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) break L40;
    } else {
     if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 512) {
      if (!(_win_valid(HEAP32[i6 >> 2] | 0) | 0)) break L40;
      _win_goto(HEAP32[i6 >> 2] | 0);
      if ((HEAP32[26881] | 0) != (HEAP32[i6 >> 2] | 0)) break L40;
      HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 12 >> 2];
      break;
     }
     if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 443) {
      if (!(_valid_tabpage(HEAP32[i7 >> 2] | 0) | 0)) break L40;
      _goto_tabpage_tp(HEAP32[i7 >> 2] | 0, 1, 1);
      HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
      break;
     }
     if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 39) {
      HEAP32[i9 >> 2] = -1;
      HEAP32[i8 >> 2] = HEAP32[(HEAP32[26773] | 0) + 48 >> 2];
      while (1) {
       if (!(HEAP32[i8 >> 2] | 0)) break L43;
       i11 = HEAP32[i8 >> 2] | 0;
       if (HEAP32[(HEAP32[i8 >> 2] | 0) + 596 >> 2] | 0) break;
       HEAP32[i8 >> 2] = HEAP32[i11 + 48 >> 2];
      }
      HEAP32[i9 >> 2] = HEAP32[i11 + 92 >> 2];
     }
    } while (0);
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    i1 = HEAP32[i4 >> 2] | 0;
    _do_cmdline(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[i1 + 92 >> 2] | 0, HEAP32[i1 + 96 >> 2] | 0, 3) | 0;
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 39) {
     if ((HEAP32[i9 >> 2] | 0) < 0) break;
     if ((HEAP32[i9 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0)) break;
     HEAP32[i8 >> 2] = HEAP32[26771];
     while (1) {
      if (!(HEAP32[i8 >> 2] | 0)) break;
      if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) break;
      HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2];
     }
     if (!(HEAP32[i8 >> 2] | 0)) break;
     HEAP32[i10 >> 2] = _vim_strsave(HEAP32[26985] | 0) | 0;
     _set_option_value(62997, 0, 114072, 0) | 0;
     _goto_buffer(HEAP32[i4 >> 2] | 0, 1, 1, HEAP32[i9 >> 2] | 0);
     _set_option_value(62997, 0, HEAP32[i10 >> 2] | 0, 0) | 0;
     _vim_free(HEAP32[i10 >> 2] | 0);
     if ((HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) break;
    }
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 512) {
     _validate_cursor();
     if (HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0) _do_check_scrollbind(1);
    }
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 512) i2 = 66; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 443) i2 = 66;
    if ((i2 | 0) == 66) {
     i2 = 0;
     if (((HEAP32[i5 >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0)) break;
    }
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 10) if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0)) break;
   }
   HEAP32[26842] = 0;
  }
  _end_global_changes();
  STACKTOP = i3;
  return;
 }
 _ex_ni(HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _buflist_new(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i6 + 120 | 0;
 i8 = i6 + 116 | 0;
 i9 = i6 + 112 | 0;
 i10 = i6 + 108 | 0;
 i11 = i6 + 104 | 0;
 i12 = i6 + 100 | 0;
 i13 = i6 + 24 | 0;
 i14 = i6 + 12 | 0;
 i15 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 if ((HEAP32[258] | 0) == 1) _hash_init(100636);
 _fname_expand(HEAP32[26773] | 0, i8, i9);
 if (!(HEAP32[i9 >> 2] | 0)) i5 = 5; else if ((_stat(HEAP32[i9 >> 2] | 0, i13) | 0) < 0) i5 = 5;
 if ((i5 | 0) == 5) HEAP32[i13 >> 2] = -1;
 if (HEAP32[i8 >> 2] | 0) if (!(HEAP32[i11 >> 2] & 12)) {
  i4 = _buflist_findname_stat(HEAP32[i8 >> 2] | 0, i13) | 0;
  HEAP32[i12 >> 2] = i4;
  if (i4 | 0) {
   _vim_free(HEAP32[i8 >> 2] | 0);
   if (HEAP32[i10 >> 2] | 0) _buflist_setfpos(HEAP32[i12 >> 2] | 0, HEAP32[26881] | 0, HEAP32[i10 >> 2] | 0, 0, 0);
   if (!(HEAP32[i11 >> 2] & 16)) _buf_copy_options(HEAP32[i12 >> 2] | 0, 0);
   if (HEAP32[i11 >> 2] & 2 | 0) if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 596 >> 2] | 0)) {
    HEAP32[(HEAP32[i12 >> 2] | 0) + 596 >> 2] = 1;
    _set_bufref(i14, HEAP32[i12 >> 2] | 0);
    if (!(HEAP32[i11 >> 2] & 4)) if (_apply_autocmds(0, 0, 0, 0, HEAP32[i12 >> 2] | 0) | 0) if (!(_bufref_valid(i14) | 0)) {
     HEAP32[i7 >> 2] = 0;
     i16 = HEAP32[i7 >> 2] | 0;
     STACKTOP = i6;
     return i16 | 0;
    }
   }
   HEAP32[i7 >> 2] = HEAP32[i12 >> 2];
   i16 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i16 | 0;
  }
 }
 HEAP32[i12 >> 2] = 0;
 if (HEAP32[i11 >> 2] & 1 | 0) if (_curbuf_reusable() | 0) {
  HEAP32[i12 >> 2] = HEAP32[26773];
  if (HEAP32[(HEAP32[26773] | 0) + 596 >> 2] | 0) _apply_autocmds(1, 0, 0, 0, HEAP32[26773] | 0) | 0;
  if ((HEAP32[i12 >> 2] | 0) == (HEAP32[26773] | 0)) _apply_autocmds(15, 0, 0, 0, HEAP32[26773] | 0) | 0;
  if ((HEAP32[i12 >> 2] | 0) == (HEAP32[26773] | 0)) {
   _clear_string_option((HEAP32[i12 >> 2] | 0) + 588 | 0);
   _clear_string_option((HEAP32[i12 >> 2] | 0) + 592 | 0);
  }
 }
 do if ((HEAP32[26773] | 0) == 0 ? 1 : (HEAP32[i12 >> 2] | 0) != (HEAP32[26773] | 0)) {
  HEAP32[i12 >> 2] = _alloc_clear(792) | 0;
  if (HEAP32[i12 >> 2] | 0) {
   _init_changedtick(HEAP32[i12 >> 2] | 0);
   break;
  }
  _vim_free(HEAP32[i8 >> 2] | 0);
  HEAP32[i7 >> 2] = 0;
  i16 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i16 | 0;
 } while (0);
 if (HEAP32[i8 >> 2] | 0) {
  HEAP32[(HEAP32[i12 >> 2] | 0) + 68 >> 2] = HEAP32[i8 >> 2];
  i14 = _vim_strsave(HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i12 >> 2] | 0) + 72 >> 2] = i14;
 }
 _clear_wininfo(HEAP32[i12 >> 2] | 0);
 i14 = _alloc_clear(72) | 0;
 HEAP32[(HEAP32[i12 >> 2] | 0) + 168 >> 2] = i14;
 if (HEAP32[i8 >> 2] | 0) {
  if (HEAP32[(HEAP32[i12 >> 2] | 0) + 68 >> 2] | 0) if (HEAP32[(HEAP32[i12 >> 2] | 0) + 72 >> 2] | 0) i5 = 37;
 } else i5 = 37;
 if ((i5 | 0) == 37) if (HEAP32[(HEAP32[i12 >> 2] | 0) + 168 >> 2] | 0) {
  i5 = HEAP32[i12 >> 2] | 0;
  do if ((HEAP32[i12 >> 2] | 0) == (HEAP32[26773] | 0)) {
   _buf_freeall(i5, 0);
   if ((HEAP32[i12 >> 2] | 0) == (HEAP32[26773] | 0)) {
    _free_buffer_stuff(HEAP32[i12 >> 2] | 0, 0);
    HEAP32[(HEAP32[i12 >> 2] | 0) + 560 >> 2] = 0;
    _buf_copy_options(HEAP32[i12 >> 2] | 0, 1);
    break;
   }
   HEAP32[i7 >> 2] = 0;
   i16 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i16 | 0;
  } else {
   HEAP32[i5 + 48 >> 2] = 0;
   i8 = HEAP32[i12 >> 2] | 0;
   if (!(HEAP32[26771] | 0)) {
    HEAP32[i8 + 52 >> 2] = 0;
    HEAP32[26771] = HEAP32[i12 >> 2];
   } else {
    HEAP32[(HEAP32[26772] | 0) + 48 >> 2] = i8;
    HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] = HEAP32[26772];
   }
   HEAP32[26772] = HEAP32[i12 >> 2];
   i8 = HEAP32[258] | 0;
   HEAP32[258] = i8 + 1;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 92 >> 2] = i8;
   if ((HEAP32[258] | 0) < 0) {
    _emsg(41782) | 0;
    if (!(HEAP32[26810] | 0)) {
     _out_flush();
     _ui_delay(3e3, 1);
    }
    HEAP32[258] = 1;
   }
   _buf_hashtab_add(HEAP32[i12 >> 2] | 0);
   _buf_copy_options(HEAP32[i12 >> 2] | 0, 2);
  } while (0);
  HEAP32[(HEAP32[(HEAP32[i12 >> 2] | 0) + 168 >> 2] | 0) + 12 >> 2] = HEAP32[i10 >> 2];
  HEAP32[(HEAP32[(HEAP32[i12 >> 2] | 0) + 168 >> 2] | 0) + 8 >> 2] = HEAP32[26881];
  i10 = HEAP32[i12 >> 2] | 0;
  HEAP32[i10 + 76 >> 2] = HEAP32[i10 + 72 >> 2];
  i10 = (HEAP32[i12 >> 2] | 0) + 80 | 0;
  if ((HEAP32[i13 >> 2] | 0) == -1) HEAP32[i10 >> 2] = 0; else {
   HEAP32[i10 >> 2] = 1;
   HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] = HEAP32[i13 >> 2];
   HEAP32[(HEAP32[i12 >> 2] | 0) + 88 >> 2] = HEAP32[i13 + 72 >> 2];
  }
  HEAP32[(HEAP32[i12 >> 2] | 0) + 516 >> 2] = 1;
  HEAP32[(HEAP32[i12 >> 2] | 0) + 60 >> 2] = 6;
  if (HEAP32[i11 >> 2] & 4 | 0) {
   i13 = (HEAP32[i12 >> 2] | 0) + 60 | 0;
   HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 128;
  }
  _buf_clear_file(HEAP32[i12 >> 2] | 0);
  _clrallmarks(HEAP32[i12 >> 2] | 0);
  _fmarks_check_names(HEAP32[i12 >> 2] | 0);
  HEAP32[(HEAP32[i12 >> 2] | 0) + 596 >> 2] = HEAP32[i11 >> 2] & 2 | 0 ? 1 : 0;
  if (!(HEAP32[i11 >> 2] & 4)) {
   _set_bufref(i15, HEAP32[i12 >> 2] | 0);
   if (_apply_autocmds(7, 0, 0, 0, HEAP32[i12 >> 2] | 0) | 0) if (!(_bufref_valid(i15) | 0)) {
    HEAP32[i7 >> 2] = 0;
    i16 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i16 | 0;
   }
   if (HEAP32[i11 >> 2] & 2 | 0) if (_apply_autocmds(0, 0, 0, 0, HEAP32[i12 >> 2] | 0) | 0) if (!(_bufref_valid(i15) | 0)) {
    HEAP32[i7 >> 2] = 0;
    i16 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i16 | 0;
   }
  }
  HEAP32[i7 >> 2] = HEAP32[i12 >> 2];
  i16 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i16 | 0;
 }
 if (HEAP32[(HEAP32[i12 >> 2] | 0) + 68 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[i12 >> 2] | 0) + 68 >> 2] | 0);
  HEAP32[(HEAP32[i12 >> 2] | 0) + 68 >> 2] = 0;
 }
 if (HEAP32[(HEAP32[i12 >> 2] | 0) + 72 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[i12 >> 2] | 0) + 72 >> 2] | 0);
  HEAP32[(HEAP32[i12 >> 2] | 0) + 72 >> 2] = 0;
 }
 if ((HEAP32[i12 >> 2] | 0) != (HEAP32[26773] | 0)) _free_buffer(HEAP32[i12 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 i16 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i16 | 0;
}

function _screen_line(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i6 + 56 | 0;
 i8 = i6 + 52 | 0;
 i9 = i6 + 48 | 0;
 i10 = i6 + 44 | 0;
 i11 = i6 + 36 | 0;
 i12 = i6 + 32 | 0;
 i13 = i6 + 28 | 0;
 i14 = i6 + 24 | 0;
 i15 = i6 + 20 | 0;
 i16 = i6 + 16 | 0;
 i17 = i6 + 12 | 0;
 i18 = i6 + 8 | 0;
 i19 = i6 + 4 | 0;
 i20 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i6 + 40 >> 2] = i5;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 1;
 if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[10173] | 0)) HEAP32[i7 >> 2] = (HEAP32[10173] | 0) - 1;
 if ((HEAP32[i9 >> 2] | 0) > (HEAP32[10174] | 0)) HEAP32[i9 >> 2] = HEAP32[10174];
 i5 = HEAP32[i7 >> 2] | 0;
 _clip_may_clear_selection(i5 | 0, i5 | 0);
 HEAP32[i11 >> 2] = (HEAP32[26456] | 0) - (HEAP32[26691] | 0);
 HEAP32[i12 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
 HEAP32[i17 >> 2] = _char_needs_redraw(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, (HEAP32[i9 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0) | 0;
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
  if (HEAP32[i15 >> 2] | 0) i21 = 1; else i21 = (_char_needs_redraw((HEAP32[i11 >> 2] | 0) + 1 | 0, (HEAP32[i12 >> 2] | 0) + 1 | 0, (HEAP32[i9 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) - 1 | 0) | 0) != 0;
  HEAP32[i17 >> 2] = i21 & 1;
  if ((HEAP32[i17 >> 2] | 0) != 0 & (HEAP32[26627] | 0) != 0) {
   HEAP32[i14 >> 2] = HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[i12 >> 2] | 0) + 1 << 1) >> 1];
   if ((HEAP32[i14 >> 2] | 0) > 255) HEAP32[i14 >> 2] = _syn_attr2attr(HEAP32[i14 >> 2] | 0) | 0;
   if (HEAP32[i14 >> 2] & 2 | 0) HEAP32[i16 >> 2] = 1;
  }
  i5 = (HEAP32[27028] | 0) != 0 ^ 1;
  do if (HEAP32[i16 >> 2] | 0) {
   do if (!(i5 | (HEAP32[i15 >> 2] | 0) != 0 | (HEAP32[26627] | 0) != 0)) if (HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] | 0) if ((HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i11 >> 2] << 1) >> 1] | 0) != (HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] | 0)) {
    _windgoto(HEAP32[i7 >> 2] | 0, (HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0);
    _out_str(HEAP32[26520] | 0);
    _screen_start();
    HEAP32[i15 >> 2] = 1;
    HEAP32[i17 >> 2] = 1;
    if (((HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0) > 0) if (HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[i12 >> 2] | 0) - 1 << 1) >> 1] | 0) {
     HEAP32[26455] = HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[i12 >> 2] | 0) - 1 << 1) >> 1];
     _term_windgoto(HEAP32[i7 >> 2] | 0, (HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0);
     _screen_stop_highlight();
     break;
    }
    HEAP32[26455] = 0;
   } while (0);
   i4 = HEAP32[26691] | 0;
   HEAP8[i4 + (HEAP32[i12 >> 2] | 0) >> 0] = HEAP8[i4 + (HEAP32[i11 >> 2] | 0) >> 0] | 0;
   if ((HEAP32[26627] | 0) != 0 | (HEAP32[26867] | 0) != 0) {
    HEAP32[i14 >> 2] = HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1];
    if ((HEAP32[i14 >> 2] | 0) > 255) HEAP32[i14 >> 2] = _syn_attr2attr(HEAP32[i14 >> 2] | 0) | 0;
    if (HEAP32[i14 >> 2] & 2 | 0) HEAP32[i17 >> 2] = 1;
   }
   i4 = HEAP32[26692] | 0;
   HEAP16[i4 + (HEAP32[i12 >> 2] << 1) >> 1] = HEAP16[i4 + (HEAP32[i11 >> 2] << 1) >> 1] | 0;
   _screen_char(HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0, (HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0);
  } else if (!(i5 | (HEAP32[26627] | 0) != 0)) if (((HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0) > 0) {
   if ((HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] | 0) == (HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[i12 >> 2] | 0) - 1 << 1) >> 1] | 0)) {
    HEAP32[26455] = 0;
    break;
   }
   if (HEAP32[26455] | 0) _screen_stop_highlight();
  } while (0);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if ((HEAP32[i10 >> 2] | 0) > 0) {
  HEAP32[i18 >> 2] = HEAP32[i13 >> 2];
  while (1) {
   if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
   if ((HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] | 0) != 32) break;
   if (HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] | 0) break;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  if ((HEAP32[i13 >> 2] | 0) < (HEAP32[i10 >> 2] | 0)) {
   do if (HEAP32[26627] | 0) if (!(HEAP32[i16 >> 2] | 0 ? (HEAP32[i13 >> 2] | 0) <= (HEAP32[i18 >> 2] | 0) : 0)) {
    HEAP32[i14 >> 2] = HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1];
    if ((HEAP32[i14 >> 2] | 0) <= 255) if (!(HEAP32[i14 >> 2] & 2)) break;
    HEAP32[i19 >> 2] = 1;
    i11 = HEAP32[i19 >> 2] | 0;
    _screen_char((HEAP32[i12 >> 2] | 0) - i11 | 0, HEAP32[i7 >> 2] | 0, (HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) - i11 | 0);
   } while (0);
   i19 = HEAP32[i7 >> 2] | 0;
   i18 = HEAP32[i8 >> 2] | 0;
   _screen_fill(i19 | 0, i19 + 1 | 0, (HEAP32[i13 >> 2] | 0) + i18 | 0, (HEAP32[i10 >> 2] | 0) + i18 | 0, 32, 32, 0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) - (HEAP32[i13 >> 2] | 0));
   HEAP32[i13 >> 2] = HEAP32[i10 >> 2];
  }
 }
 if ((HEAP32[i10 >> 2] | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 if (((HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0) >= (HEAP32[10174] | 0)) {
  HEAP8[(HEAP32[26694] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] = 0;
  STACKTOP = i6;
  return;
 }
 HEAP32[i20 >> 2] = _fillchar_vsep(i14) | 0;
 if ((HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] | 0) == (HEAP32[i20 >> 2] & 255 | 0)) if ((HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] | 0) == (HEAP32[i14 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP8[(HEAP32[26691] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] = HEAP32[i20 >> 2];
 HEAP16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] = HEAP32[i14 >> 2];
 _screen_char(HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0, (HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0);
 STACKTOP = i6;
 return;
}

function _block_prep(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 36 | 0;
 i7 = i5 + 32 | 0;
 i8 = i5 + 28 | 0;
 i9 = i5 + 24 | 0;
 i10 = i5 + 20 | 0;
 i11 = i5 + 16 | 0;
 i12 = i5 + 12 | 0;
 i13 = i5 + 8 | 0;
 i14 = i5 + 4 | 0;
 i15 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i10 >> 2] = 0;
 HEAP32[HEAP32[i7 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] = 0;
 HEAP32[i13 >> 2] = _ml_get(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
 while (1) {
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) >= (HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] | 0)) break;
  if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) break;
  HEAP32[i10 >> 2] = _lbr_chartabsize(HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) | 0;
  i8 = (HEAP32[i7 >> 2] | 0) + 20 | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] = HEAP32[i10 >> 2];
 i8 = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0;
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) < (HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] | 0)) {
  HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = i8;
  if (HEAP32[i9 >> 2] | 0) if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 18) {
   i16 = HEAP32[i12 >> 2] | 0;
   i17 = HEAP32[i13 >> 2] | 0;
   i18 = i16;
   i19 = i17;
   i20 = i18 - i19 | 0;
   i21 = HEAP32[i7 >> 2] | 0;
   i22 = i21 + 16 | 0;
   HEAP32[i22 >> 2] = i20;
   i23 = HEAP32[i12 >> 2] | 0;
   i24 = HEAP32[i7 >> 2] | 0;
   i25 = i24 + 12 | 0;
   HEAP32[i25 >> 2] = i23;
   STACKTOP = i5;
   return;
  }
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = (HEAP32[i4 + 72 >> 2] | 0) - (HEAP32[i4 + 68 >> 2] | 0) + 1;
  i16 = HEAP32[i12 >> 2] | 0;
  i17 = HEAP32[i13 >> 2] | 0;
  i18 = i16;
  i19 = i17;
  i20 = i18 - i19 | 0;
  i21 = HEAP32[i7 >> 2] | 0;
  i22 = i21 + 16 | 0;
  HEAP32[i22 >> 2] = i20;
  i23 = HEAP32[i12 >> 2] | 0;
  i24 = HEAP32[i7 >> 2] | 0;
  i25 = i24 + 12 | 0;
  HEAP32[i25 >> 2] = i23;
  STACKTOP = i5;
  return;
 }
 HEAP32[HEAP32[i7 >> 2] >> 2] = i8 - (HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] | 0);
 if (HEAP32[i9 >> 2] | 0) if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) HEAP32[HEAP32[i7 >> 2] >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] | 0) - (HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
 HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
 i8 = HEAP32[i7 >> 2] | 0;
 HEAP32[i8 + 24 >> 2] = HEAP32[i8 + 20 >> 2];
 L18 : do if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] | 0)) {
  if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 17) {
   i8 = HEAP32[i7 >> 2] | 0;
   HEAP32[i8 + 4 >> 2] = (HEAP32[i8 + 28 >> 2] | 0) - (HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
   break;
  }
  i8 = HEAP32[i6 >> 2] | 0;
  i4 = (HEAP32[i8 + 72 >> 2] | 0) - (HEAP32[i8 + 68 >> 2] | 0) + 1 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 18) {
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i4;
   i3 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 + 4 >> 2] = (HEAP32[i3 + 28 >> 2] | 0) - (HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
   break;
  }
  HEAP32[i8 >> 2] = i4;
  if (HEAP32[i9 >> 2] | 0) if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 4) {
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[HEAP32[i7 >> 2] >> 2] = (HEAP32[i4 + 28 >> 2] | 0) - ((HEAP32[i4 + 20 >> 2] | 0) - (HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] | 0));
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i4 + 4 >> 2] = (HEAP32[i4 + 24 >> 2] | 0) - (HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] | 0) - 1;
  }
 } else {
  HEAP32[i15 >> 2] = HEAP32[i11 >> 2];
  while (1) {
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] | 0)) break;
   if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) break;
   HEAP32[i15 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i10 >> 2] = _lbr_chartabsize_adv(HEAP32[i13 >> 2] | 0, i11, HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) | 0;
   i4 = (HEAP32[i7 >> 2] | 0) + 24 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  }
  do if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) <= (HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] | 0)) {
   if (HEAP32[i9 >> 2] | 0) if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 18) if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) != 16) break;
   if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 18) {
    i4 = HEAP32[i7 >> 2] | 0;
    i8 = HEAP32[i6 >> 2] | 0;
    HEAP32[i4 + 4 >> 2] = (HEAP32[i8 + 72 >> 2] | 0) - (HEAP32[i4 + 24 >> 2] | 0) + (HEAP32[i8 + 20 >> 2] | 0);
    break L18;
   } else {
    HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = 0;
    break L18;
   }
  } while (0);
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] | 0)) {
   i8 = HEAP32[i7 >> 2] | 0;
   HEAP32[i8 + 4 >> 2] = (HEAP32[i8 + 24 >> 2] | 0) - (HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] | 0) - 1;
   if (!(HEAP32[i9 >> 2] | 0)) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) {
    i8 = (HEAP32[i7 >> 2] | 0) + 4 | 0;
    HEAP32[i8 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
    if ((HEAP32[i11 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[i15 >> 2];
   }
  }
 } while (0);
 if (HEAP32[i9 >> 2] | 0) if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 i16 = HEAP32[i12 >> 2] | 0;
 i17 = HEAP32[i13 >> 2] | 0;
 i18 = i16;
 i19 = i17;
 i20 = i18 - i19 | 0;
 i21 = HEAP32[i7 >> 2] | 0;
 i22 = i21 + 16 | 0;
 HEAP32[i22 >> 2] = i20;
 i23 = HEAP32[i12 >> 2] | 0;
 i24 = HEAP32[i7 >> 2] | 0;
 i25 = i24 + 12 | 0;
 HEAP32[i25 >> 2] = i23;
 STACKTOP = i5;
 return;
}

function _do_join(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i8 = i7 + 68 | 0;
 i9 = i7 + 64 | 0;
 i10 = i7 + 60 | 0;
 i11 = i7 + 56 | 0;
 i12 = i7 + 48 | 0;
 i13 = i7 + 44 | 0;
 i14 = i7 + 40 | 0;
 i15 = i7 + 36 | 0;
 i16 = i7 + 32 | 0;
 i17 = i7 + 28 | 0;
 i18 = i7 + 24 | 0;
 i19 = i7 + 20 | 0;
 i20 = i7 + 16 | 0;
 i21 = i7 + 12 | 0;
 i22 = i7 + 8 | 0;
 i23 = i7 + 4 | 0;
 i24 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i7 + 52 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i24 >> 2] = 1;
 if (HEAP32[i11 >> 2] | 0) if (!(_u_save((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0) | 0)) {
  HEAP32[i8 >> 2] = 0;
  i25 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i25 | 0;
 }
 HEAP32[i17 >> 2] = _lalloc_clear(HEAP32[i9 >> 2] | 0, 1) | 0;
 if (!(HEAP32[i17 >> 2] | 0)) {
  HEAP32[i8 >> 2] = 0;
  i25 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i25 | 0;
 }
 HEAP32[i22 >> 2] = 0;
 while (1) {
  if ((HEAP32[i22 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) {
   i6 = 26;
   break;
  }
  i11 = _ml_get((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0) | 0;
  HEAP32[i14 >> 2] = i11;
  HEAP32[i13 >> 2] = i11;
  if ((HEAP32[i22 >> 2] | 0) == 0 & (HEAP32[i12 >> 2] | 0) != 0) {
   i11 = HEAP32[26881] | 0;
   HEAP32[(HEAP32[i11 + 4 >> 2] | 0) + 476 >> 2] = HEAP32[i11 + 24 >> 2];
   i11 = _strlen(HEAP32[i13 >> 2] | 0) | 0;
   HEAP32[(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) + 476 + 4 >> 2] = i11;
  }
  do if ((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i22 >> 2] | 0) > 0) {
   HEAP32[i13 >> 2] = _skipwhite(HEAP32[i13 >> 2] | 0) | 0;
   if ((HEAP32[i18 >> 2] | 0) != 9 ? (HEAP32[i20 >> 2] | 0 ? (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) != 41 : 0) : 0) {
    if ((HEAP32[i18 >> 2] | 0) == 32) HEAP32[i18 >> 2] = HEAP32[i19 >> 2]; else {
     i11 = (HEAP32[i17 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0;
     HEAP8[i11 >> 0] = (HEAP8[i11 >> 0] | 0) + 1 << 24 >> 24;
    }
    if (HEAP32[26938] | 0) {
     if ((HEAP32[i18 >> 2] | 0) != 46) {
      if (_vim_strchr(HEAP32[26904] | 0, 106) | 0) break;
      if (!((HEAP32[i18 >> 2] | 0) == 63 | (HEAP32[i18 >> 2] | 0) == 33)) break;
     }
     i11 = (HEAP32[i17 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) | 0;
     HEAP8[i11 >> 0] = (HEAP8[i11 >> 0] | 0) + 1 << 24 >> 24;
    }
   }
  } while (0);
  HEAP32[i20 >> 2] = _strlen(HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) + (HEAPU8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0));
  HEAP32[i19 >> 2] = 0;
  HEAP32[i18 >> 2] = 0;
  if ((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i20 >> 2] | 0) > 0) {
   HEAP32[i18 >> 2] = HEAPU8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) + -1 >> 0];
   if ((HEAP32[i20 >> 2] | 0) > 1) HEAP32[i19 >> 2] = HEAPU8[(HEAP32[i13 >> 2] | 0) + (HEAP32[i20 >> 2] | 0) + -2 >> 0];
  }
  _line_breakcheck();
  if (HEAP32[26834] | 0) {
   i6 = 24;
   break;
  }
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 1;
 }
 if ((i6 | 0) == 24) HEAP32[i24 >> 2] = 0; else if ((i6 | 0) == 26) {
  HEAP32[i23 >> 2] = (HEAP32[i21 >> 2] | 0) - (HEAP32[i20 >> 2] | 0) - (HEAPU8[(HEAP32[i17 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) - 1) >> 0] | 0);
  HEAP32[i16 >> 2] = _alloc_check((HEAP32[i21 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[i15 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i21 >> 2] | 0);
  HEAP8[HEAP32[i15 >> 2] >> 0] = 0;
  HEAP32[i22 >> 2] = (HEAP32[i9 >> 2] | 0) - 1;
  while (1) {
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (0 - (HEAP32[i20 >> 2] | 0));
   _memmove(HEAP32[i15 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i20 >> 2] | 0) | 0;
   if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0) > 0) {
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (0 - (HEAPU8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0));
    _memset(HEAP32[i15 >> 2] | 0, 32, HEAPU8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i22 >> 2] | 0) >> 0] | 0) | 0;
   }
   i21 = HEAP32[i22 >> 2] | 0;
   _mark_col_adjust((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + i21 | 0, 0, 0 - i21 | 0, (HEAP32[i15 >> 2] | 0) - (HEAP32[i16 >> 2] | 0) + (HEAPU8[(HEAP32[i17 >> 2] | 0) + i21 >> 0] | 0) - ((HEAP32[i13 >> 2] | 0) - (HEAP32[i14 >> 2] | 0)) | 0);
   i26 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
   if (!(HEAP32[i22 >> 2] | 0)) break;
   i21 = _ml_get(i26 + (HEAP32[i22 >> 2] | 0) - 1 | 0) | 0;
   HEAP32[i14 >> 2] = i21;
   HEAP32[i13 >> 2] = i21;
   if ((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i22 >> 2] | 0) > 1) HEAP32[i13 >> 2] = _skipwhite(HEAP32[i13 >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = _strlen(HEAP32[i13 >> 2] | 0) | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + -1;
  }
  _ml_replace(i26, HEAP32[i16 >> 2] | 0, 0) | 0;
  if (HEAP32[i12 >> 2] | 0) {
   i12 = HEAP32[26881] | 0;
   HEAP32[(HEAP32[i12 + 4 >> 2] | 0) + 492 >> 2] = HEAP32[i12 + 24 >> 2];
   i12 = _strlen(HEAP32[i16 >> 2] | 0) | 0;
   HEAP32[(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) + 492 + 4 >> 2] = i12;
  }
  i12 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
  _changed_lines(i12 | 0, HEAP32[i20 >> 2] | 0, i12 + 1 | 0, 0);
  HEAP32[i22 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  i12 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  _del_lines((HEAP32[i9 >> 2] | 0) - 1 | 0, 0);
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i22 >> 2];
  i22 = (_vim_strchr(HEAP32[26904] | 0, 113) | 0) != 0;
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = i22 ? HEAP32[i20 >> 2] | 0 : HEAP32[i23 >> 2] | 0;
  _check_cursor_col();
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 }
 _vim_free(HEAP32[i17 >> 2] | 0);
 HEAP32[i8 >> 2] = HEAP32[i24 >> 2];
 i25 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i25 | 0;
}

function _frame_setheight(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4 + 4 | 0;
 i13 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0)) {
  i2 = HEAP32[i6 >> 2] | 0;
  i1 = (HEAP32[10173] | 0) - (HEAP32[26875] | 0) | 0;
  if ((i2 | 0) > (i1 - (_tabline_height() | 0) | 0)) {
   i1 = (HEAP32[10173] | 0) - (HEAP32[26875] | 0) | 0;
   HEAP32[i6 >> 2] = i1 - (_tabline_height() | 0);
  }
  if ((HEAP32[i6 >> 2] | 0) <= 0) {
   STACKTOP = i4;
   return;
  }
  _frame_new_height(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, 0);
  STACKTOP = i4;
  return;
 }
 if ((HEAP8[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 1) {
  HEAP32[i12 >> 2] = _frame_minheight(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0, 0) | 0;
  if ((HEAP32[i6 >> 2] | 0) < (HEAP32[i12 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
  _frame_setheight(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  STACKTOP = i4;
  return;
 }
 HEAP32[i10 >> 2] = 1;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) > 2) break;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i11 >> 2] | 0)) break;
   if ((HEAP32[i11 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) if (HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0) if (HEAP32[(HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0) + 200 + 12 >> 2] | 0) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0);
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0);
   if ((HEAP32[i11 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
    i1 = _frame_minheight(HEAP32[i11 >> 2] | 0, 0) | 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i1;
   }
   HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2];
  }
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[10174] | 0)) HEAP32[i9 >> 2] = 0; else {
   i1 = HEAP32[27112] | 0;
   i2 = (HEAP32[10173] | 0) - (HEAP32[26875] | 0) - ((HEAP32[i1 + 84 >> 2] | 0) + (HEAP32[i1 + 88 >> 2] | 0) + (HEAP32[i1 + 92 >> 2] | 0)) | 0;
   HEAP32[i9 >> 2] = i2;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) < 0 ? 0 : i2;
  }
  if ((HEAP32[i6 >> 2] | 0) <= ((HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0)) break;
  if ((HEAP32[i10 >> 2] | 0) == 2) {
   i3 = 28;
   break;
  }
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[10174] | 0)) {
   i3 = 28;
   break;
  }
  i2 = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i14 = i1 + (_frame_minheight(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0, -1) | 0) | 0;
  _frame_setheight(i2, i14 - (HEAP32[27035] | 0) - 1 | 0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 28) if ((HEAP32[i6 >> 2] | 0) > ((HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0)) HEAP32[i6 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 HEAP32[i8 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0);
 if ((HEAP32[i6 >> 2] | 0) > ((HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0)) HEAP32[i13 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
 if ((HEAP32[i8 >> 2] | 0) < 0) if (((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) | 0) < (HEAP32[i13 >> 2] | 0)) HEAP32[i13 >> 2] = 0;
 if ((HEAP32[i8 >> 2] | 0) > 0 & (HEAP32[i9 >> 2] | 0) > 0) {
  if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
  i7 = (HEAP32[27114] | 0) + 12 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 }
 _frame_new_height(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, 0);
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= 2) break;
  i6 = HEAP32[i5 >> 2] | 0;
  if (!(HEAP32[i10 >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[i6 + 24 >> 2]; else HEAP32[i11 >> 2] = HEAP32[i6 + 28 >> 2];
  while (1) {
   if (!(HEAP32[i11 >> 2] | 0 ? (HEAP32[i8 >> 2] | 0) != 0 : 0)) break;
   HEAP32[i12 >> 2] = _frame_minheight(HEAP32[i11 >> 2] | 0, 0) | 0;
   do if ((HEAP32[i13 >> 2] | 0) > 0) if (HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0) if (HEAP32[(HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0) + 200 + 12 >> 2] | 0) {
    i6 = HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0;
    i9 = HEAP32[i13 >> 2] | 0;
    if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0)) {
     HEAP32[i13 >> 2] = i9 - i6;
     break;
    }
    if ((i6 - i9 | 0) > (HEAP32[i8 >> 2] | 0)) HEAP32[i13 >> 2] = (HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - ((HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) - (HEAP32[i13 >> 2] | 0));
    _frame_new_height(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0, 0, 0);
    HEAP32[i13 >> 2] = 0;
   } else i3 = 55; else i3 = 55; else i3 = 55; while (0);
   do if ((i3 | 0) == 55) {
    i3 = 0;
    i9 = HEAP32[i11 >> 2] | 0;
    if (((HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) < (HEAP32[i12 >> 2] | 0)) {
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - ((HEAP32[i9 + 12 >> 2] | 0) - (HEAP32[i12 >> 2] | 0));
     _frame_new_height(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, 0);
     break;
    } else {
     _frame_new_height(i9, (HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0, 0, 0);
     HEAP32[i8 >> 2] = 0;
     break;
    }
   } while (0);
   i9 = HEAP32[i11 >> 2] | 0;
   if (!(HEAP32[i10 >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[i9 + 24 >> 2]; else HEAP32[i11 >> 2] = HEAP32[i9 + 28 >> 2];
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 STACKTOP = i4;
 return;
}

function _windgoto(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 44 | 0;
 i6 = i4 + 40 | 0;
 i7 = i4 + 36 | 0;
 i8 = i4 + 32 | 0;
 i9 = i4 + 28 | 0;
 i10 = i4 + 24 | 0;
 i11 = i4 + 20 | 0;
 i12 = i4 + 16 | 0;
 i13 = i4 + 12 | 0;
 i14 = i4 + 8 | 0;
 i15 = i4 + 4 | 0;
 i16 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAP32[26691] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26457] | 0)) if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26458] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) < 0) HEAP32[i5 >> 2] = 0;
 if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[26696] | 0)) HEAP32[i5 >> 2] = (HEAP32[26696] | 0) - 1;
 if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[26697] | 0)) HEAP32[i6 >> 2] = (HEAP32[26697] | 0) - 1;
 if (HEAP32[26455] | 0) if (!(HEAPU8[HEAP32[26551] >> 0] | 0)) HEAP32[i12 >> 2] = 5; else i3 = 13; else i3 = 13;
 if ((i3 | 0) == 13) HEAP32[i12 >> 2] = 0;
 HEAP32[i14 >> 2] = 7 + (HEAP32[i12 >> 2] | 0);
 L23 : do if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[26458] | 0)) if ((HEAP32[26457] | 0) < (HEAP32[10174] | 0)) {
  HEAP32[i13 >> 2] = 0;
  HEAP32[i15 >> 2] = HEAP32[26455];
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26458] | 0)) if ((HEAP32[i6 >> 2] | 0) < (HEAP32[26457] | 0)) {
   if (HEAP8[HEAP32[26570] >> 0] | 0) HEAP32[i13 >> 2] = HEAP32[26570]; else HEAP32[i13 >> 2] = HEAP32[26560];
   if (HEAP8[HEAP32[i13 >> 2] >> 0] | 0) {
    i2 = (HEAP32[26457] | 0) - (HEAP32[i6 >> 2] | 0) | 0;
    HEAP32[i10 >> 2] = Math_imul(i2, _strlen(HEAP32[i13 >> 2] | 0) | 0) | 0;
   } else HEAP32[i10 >> 2] = 999;
   if (((HEAP32[i6 >> 2] | 0) + 1 | 0) < (HEAP32[i10 >> 2] | 0)) {
    HEAP32[i9 >> 2] = 2;
    HEAP32[i11 >> 2] = 0;
    HEAP32[i10 >> 2] = 1;
   } else {
    HEAP32[i9 >> 2] = 1;
    HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
   }
   if (HEAP32[i12 >> 2] | 0) {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
    HEAP32[i15 >> 2] = 0;
   }
  } else i3 = 29; else i3 = 29;
  do if ((i3 | 0) == 29) {
   if ((HEAP32[i5 >> 2] | 0) <= (HEAP32[26458] | 0)) {
    HEAP32[i9 >> 2] = 4;
    HEAP32[i11 >> 2] = HEAP32[26457];
    HEAP32[i10 >> 2] = 0;
    break;
   }
   HEAP32[i9 >> 2] = 3;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i10 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[26458] | 0) << 1;
   if (HEAP32[i12 >> 2] | 0) {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
    HEAP32[i15 >> 2] = 0;
   }
  } while (0);
  HEAP32[i8 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
  if ((HEAP32[i8 >> 2] | 0) > 0) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i8 >> 2] | 0) > 0 ? (HEAP32[i10 >> 2] | 0) < (HEAP32[i14 >> 2] | 0) : 0) {
   HEAP32[i7 >> 2] = (HEAP32[26692] | 0) + (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] << 1) + (HEAP32[i11 >> 2] << 1);
   while (1) {
    if (HEAP32[i8 >> 2] | 0) {
     i2 = HEAP32[i7 >> 2] | 0;
     HEAP32[i7 >> 2] = i2 + 2;
     i17 = (HEAPU16[i2 >> 1] | 0) == (HEAP32[i15 >> 2] | 0);
    } else i17 = 0;
    i18 = HEAP32[i8 >> 2] | 0;
    if (!i17) break;
    HEAP32[i8 >> 2] = i18 + -1;
   }
   if (i18 | 0) {
    i2 = (HEAP32[i7 >> 2] | 0) + -2 | 0;
    HEAP32[i7 >> 2] = i2;
    L62 : do if (!(HEAPU16[i2 >> 1] | 0)) {
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
     while (1) {
      if (!(HEAP32[i8 >> 2] | 0)) break L62;
      i1 = HEAP32[i7 >> 2] | 0;
      HEAP32[i7 >> 2] = i1 + 2;
      if (HEAPU16[i1 >> 1] | 0) break L62;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     }
    } while (0);
    if (HEAP32[i8 >> 2] | 0) HEAP32[i10 >> 2] = 999;
   }
  }
  if ((HEAP32[i10 >> 2] | 0) < (HEAP32[i14 >> 2] | 0)) {
   L72 : do if ((HEAP32[i9 >> 2] | 0) == 1) {
    if (HEAP32[i12 >> 2] | 0) _screen_stop_highlight();
    while (1) {
     if ((HEAP32[26457] | 0) <= (HEAP32[i6 >> 2] | 0)) break L72;
     _out_str(HEAP32[i13 >> 2] | 0);
     HEAP32[26457] = (HEAP32[26457] | 0) + -1;
    }
   } else {
    if ((HEAP32[i9 >> 2] | 0) == 2) {
     if (HEAP32[i12 >> 2] | 0) _screen_stop_highlight();
     _out_char(13);
     HEAP32[26457] = 0;
     break;
    }
    if ((HEAP32[i9 >> 2] | 0) == 3) {
     if (HEAP32[i12 >> 2] | 0) _screen_stop_highlight();
     while (1) {
      if ((HEAP32[26458] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
      _out_char(10);
      HEAP32[26458] = (HEAP32[26458] | 0) + 1;
     }
     HEAP32[26457] = 0;
    }
   } while (0);
   HEAP32[i8 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[26457] | 0);
   if ((HEAP32[i8 >> 2] | 0) > 0) {
    if (HEAPU8[HEAP32[26571] >> 0] | 0) if (!(HEAPU8[(HEAP32[26571] | 0) + 1 >> 0] | 0)) while (1) {
     i2 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i2 + -1;
     if ((i2 | 0) <= 0) break L23;
     _out_char(HEAPU8[HEAP32[26571] >> 0] | 0);
    }
    HEAP32[i16 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0) + (HEAP32[26457] | 0);
    while (1) {
     i2 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i2 + -1;
     if ((i2 | 0) <= 0) break L23;
     if ((HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i16 >> 2] << 1) >> 1] | 0) != (HEAP32[26455] | 0)) _screen_stop_highlight();
     _out_char(HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0);
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
   }
  }
 } else i3 = 78; else i3 = 78; while (0);
 if ((i3 | 0) == 78) HEAP32[i10 >> 2] = 999;
 do if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) {
  if (HEAP32[i12 >> 2] | 0) _screen_stop_highlight();
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26458] | 0)) if ((HEAP32[i6 >> 2] | 0) > (HEAP32[26457] | 0)) if (HEAPU8[HEAP32[26554] >> 0] | 0) {
   _term_cursor_right((HEAP32[i6 >> 2] | 0) - (HEAP32[26457] | 0) | 0);
   break;
  }
  _term_windgoto(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 } while (0);
 HEAP32[26458] = HEAP32[i5 >> 2];
 HEAP32[26457] = HEAP32[i6 >> 2];
 STACKTOP = i4;
 return;
}

function _scroll_cursor_bot(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4 + 60 | 0;
 i6 = i4 + 56 | 0;
 i7 = i4 + 52 | 0;
 i8 = i4 + 48 | 0;
 i9 = i4 + 44 | 0;
 i10 = i4 + 40 | 0;
 i11 = i4 + 36 | 0;
 i12 = i4 + 32 | 0;
 i13 = i4 + 24 | 0;
 i14 = i4 + 16 | 0;
 i15 = i4 + 12 | 0;
 i16 = i4 + 8 | 0;
 i17 = i4 + 4 | 0;
 i18 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 HEAP32[i15 >> 2] = HEAP32[(HEAP32[26881] | 0) + 144 >> 2];
 HEAP32[i16 >> 2] = HEAP32[(HEAP32[26881] | 0) + 108 >> 2];
 HEAP32[i17 >> 2] = HEAP32[(HEAP32[26881] | 0) + 148 >> 2];
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 if (HEAP32[i6 >> 2] | 0) {
  HEAP32[i7 >> 2] = 0;
  HEAP32[(HEAP32[26881] | 0) + 144 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  i2 = HEAP32[26881] | 0;
  HEAP32[i2 + 68 >> 2] = HEAP32[i2 + 144 >> 2];
  while (1) {
   if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) <= 1) break;
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
   _topline_back(i13);
   if ((HEAP32[i13 + 4 >> 2] | 0) == 2147483647) break;
   if (((HEAP32[i7 >> 2] | 0) + (HEAP32[i13 + 4 >> 2] | 0) | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) break;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i13 + 4 >> 2] | 0);
   HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[i13 >> 2];
  }
  _set_empty_rows(HEAP32[26881] | 0, HEAP32[i7 >> 2] | 0);
  i2 = (HEAP32[26881] | 0) + 108 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 96;
  if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) {
   i2 = (HEAP32[26881] | 0) + 108 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -18;
  }
 } else _validate_botline();
 _validate_cheight();
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 124 >> 2];
 if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) {
  HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
  if ((HEAP32[i18 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 148 >> 2] | 0);
 }
 HEAP32[i13 >> 2] = HEAP32[i18 >> 2];
 HEAP32[i14 >> 2] = HEAP32[i18 >> 2];
 L16 : while (1) {
  if ((HEAP32[i13 >> 2] | 0) <= 1) break;
  if ((HEAP32[i8 >> 2] | 0) <= 0) i3 = 17; else if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) i3 = 17; else i3 = 18;
  if ((i3 | 0) == 17) {
   i3 = 0;
   if ((HEAP32[i9 >> 2] | 0) >= (((HEAP32[26756] | 0) > 0 ? (HEAP32[26756] | 0) - 1 | 0 : HEAP32[26971] | 0) | 0)) i3 = 19; else i3 = 18;
  }
  if ((i3 | 0) == 18) {
   i3 = 0;
   if (((HEAP32[i14 >> 2] | 0) + 1 | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) i3 = 19;
  }
  if ((i3 | 0) == 19) {
   i3 = 0;
   if ((HEAP32[i13 >> 2] | 0) <= (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) break;
  }
  _topline_back(i13);
  if ((HEAP32[i13 + 4 >> 2] | 0) == 2147483647) HEAP32[i7 >> 2] = 2147483647; else HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i13 + 4 >> 2] | 0);
  if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) break;
  if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) {
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i13 + 4 >> 2] | 0);
   if ((HEAP32[i13 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 148 >> 2] | 0);
  }
  do if ((HEAP32[i14 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
   _botline_forw(i14);
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i14 + 4 >> 2] | 0);
   if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) break L16;
   if ((HEAP32[i9 >> 2] | 0) >= (((HEAP32[26756] | 0) > 0 ? (HEAP32[26756] | 0) - 1 | 0 : HEAP32[26971] | 0) | 0)) if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i14 + 4 >> 2] | 0);
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) {
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i14 + 4 >> 2] | 0);
    if ((HEAP32[i14 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 148 >> 2] | 0);
   }
  } while (0);
 }
 do if ((HEAP32[i8 >> 2] | 0) <= 0) HEAP32[i11 >> 2] = 0; else {
  if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) {
   HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
   break;
  }
  HEAP32[i11 >> 2] = 0;
  HEAP32[i14 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) - 1;
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) break;
   _botline_forw(i14);
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i14 + 4 >> 2] | 0);
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  if ((HEAP32[i10 >> 2] | 0) < (HEAP32[i8 >> 2] | 0)) HEAP32[i11 >> 2] = 9999;
 } while (0);
 if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) if ((HEAP32[i11 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) _scroll_cursor_halfway(0); else i3 = 48; else i3 = 48;
 if ((i3 | 0) == 48) _scrollup(HEAP32[i11 >> 2] | 0, 1);
 if (!(HEAP32[i6 >> 2] | 0 ? (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) == (HEAP32[i12 >> 2] | 0) : 0)) {
  i19 = HEAP32[26881] | 0;
  i20 = i19 + 108 | 0;
  i21 = HEAP32[i20 >> 2] | 0;
  i22 = i21 | 128;
  HEAP32[i20 >> 2] = i22;
  STACKTOP = i4;
  return;
 }
 HEAP32[(HEAP32[26881] | 0) + 144 >> 2] = HEAP32[i15 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 148 >> 2] = HEAP32[i17 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 108 >> 2] = HEAP32[i16 >> 2];
 i19 = HEAP32[26881] | 0;
 i20 = i19 + 108 | 0;
 i21 = HEAP32[i20 >> 2] | 0;
 i22 = i21 | 128;
 HEAP32[i20 >> 2] = i22;
 STACKTOP = i4;
 return;
}

function _buf_init_chartab(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4 + 4 | 0;
 i13 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 L1 : do if (HEAP32[i7 >> 2] | 0) {
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= 32) break;
   i2 = (HEAP32[26908] & 4 | 0 ? 4 : 2) & 255;
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i1 + 1;
   HEAP8[113724 + i1 >> 0] = i2;
  }
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) > 126) break;
   i2 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i2 + 1;
   HEAP8[113724 + i2 >> 0] = 17;
  }
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= 256) break L1;
   i2 = (HEAP32[26908] & 4 | 0 ? 4 : 2) & 255;
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i1 + 1;
   HEAP8[113724 + i1 >> 0] = i2;
  }
 } while (0);
 i2 = (HEAP32[i6 >> 2] | 0) + 444 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[i7 >> 2] | 0 ? 0 : 3;
 L15 : while (1) {
  if ((HEAP32[i11 >> 2] | 0) > 3) {
   i3 = 69;
   break;
  }
  do if (!(HEAP32[i11 >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[26936]; else {
   if ((HEAP32[i11 >> 2] | 0) == 1) {
    HEAP32[i10 >> 2] = HEAP32[26937];
    break;
   }
   if ((HEAP32[i11 >> 2] | 0) == 2) {
    HEAP32[i10 >> 2] = HEAP32[26935];
    break;
   } else {
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 640 >> 2];
    break;
   }
  } while (0);
  while (1) {
   if (!(HEAP8[HEAP32[i10 >> 2] >> 0] | 0)) break;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i13 >> 2] = 0;
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 94) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 1 >> 0] | 0) {
    HEAP32[i12 >> 2] = 1;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   }
   if (((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i8 >> 2] = _getdigits(i10) | 0; else {
    i7 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i7 + 1;
    HEAP32[i8 >> 2] = HEAPU8[i7 >> 0];
   }
   HEAP32[i9 >> 2] = -1;
   do if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 45) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 1 >> 0] | 0) {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
    if (((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) {
     HEAP32[i9 >> 2] = _getdigits(i10) | 0;
     break;
    } else {
     i7 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i7 + 1;
     HEAP32[i9 >> 2] = HEAPU8[i7 >> 0];
     break;
    }
   } while (0);
   if ((HEAP32[i8 >> 2] | 0) <= 0 | (HEAP32[i8 >> 2] | 0) >= 256) {
    i3 = 37;
    break L15;
   }
   if (((HEAP32[i9 >> 2] | 0) != -1 ? (HEAP32[i9 >> 2] | 0) < (HEAP32[i8 >> 2] | 0) : 0) | (HEAP32[i9 >> 2] | 0) >= 256) {
    i3 = 37;
    break L15;
   }
   if (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) != 44) {
    i3 = 37;
    break L15;
   }
   do if ((HEAP32[i9 >> 2] | 0) == -1) if ((HEAP32[i8 >> 2] | 0) == 64) {
    HEAP32[i13 >> 2] = 1;
    HEAP32[i8 >> 2] = 1;
    HEAP32[i9 >> 2] = 255;
    break;
   } else {
    HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
    break;
   } while (0);
   while (1) {
    if ((HEAP32[i8 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) break;
    if (HEAP32[i13 >> 2] | 0) {
     if (_islower(HEAP32[i8 >> 2] | 0) | 0) i3 = 47; else if (_isupper(HEAP32[i8 >> 2] | 0) | 0) i3 = 47;
    } else i3 = 47;
    do if ((i3 | 0) == 47) {
     i3 = 0;
     if (!(HEAP32[i11 >> 2] | 0)) {
      i7 = 113724 + (HEAP32[i8 >> 2] | 0) | 0;
      i2 = HEAPU8[i7 >> 0] | 0;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP8[i7 >> 0] = i2 & -33;
       break;
      } else {
       HEAP8[i7 >> 0] = i2 | 32;
       break;
      }
     }
     if ((HEAP32[i11 >> 2] | 0) == 1) {
      if (!((HEAP32[i8 >> 2] | 0) < 32 | (HEAP32[i8 >> 2] | 0) > 126)) break;
      i2 = HEAPU8[113724 + (HEAP32[i8 >> 2] | 0) >> 0] & -8;
      if (HEAP32[i12 >> 2] | 0) {
       HEAP8[113724 + (HEAP32[i8 >> 2] | 0) >> 0] = i2 + (HEAP32[26908] & 4 | 0 ? 4 : 2);
       i7 = 113724 + (HEAP32[i8 >> 2] | 0) | 0;
       HEAP8[i7 >> 0] = HEAPU8[i7 >> 0] & -17;
       break;
      } else {
       HEAP8[113724 + (HEAP32[i8 >> 2] | 0) >> 0] = i2 + 1;
       i2 = 113724 + (HEAP32[i8 >> 2] | 0) | 0;
       HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] | 16;
       break;
      }
     }
     i2 = (HEAP32[i12 >> 2] | 0) != 0;
     i7 = HEAP32[i8 >> 2] | 0;
     if ((HEAP32[i11 >> 2] | 0) == 2) {
      i1 = 113724 + i7 | 0;
      i14 = HEAPU8[i1 >> 0] | 0;
      if (i2) {
       HEAP8[i1 >> 0] = i14 & -65;
       break;
      } else {
       HEAP8[i1 >> 0] = i14 | 64;
       break;
      }
     } else {
      i14 = 1 << (i7 & 7);
      if (i2) {
       i2 = (HEAP32[i6 >> 2] | 0) + 444 + ((HEAP32[i8 >> 2] | 0) >>> 3) | 0;
       HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] & ~i14;
       break;
      } else {
       i2 = (HEAP32[i6 >> 2] | 0) + 444 + ((HEAP32[i8 >> 2] | 0) >>> 3) | 0;
       HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] | i14;
       break;
      }
     }
    } while (0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   HEAP32[i8 >> 2] = HEAPU8[HEAP32[i10 >> 2] >> 0];
   HEAP32[i10 >> 2] = _skip_to_option_part(HEAP32[i10 >> 2] | 0) | 0;
   if ((HEAP32[i8 >> 2] | 0) == 44) if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) {
    i3 = 66;
    break L15;
   }
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 37) {
  HEAP32[i5 >> 2] = 0;
  i15 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 } else if ((i3 | 0) == 66) {
  HEAP32[i5 >> 2] = 0;
  i15 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 } else if ((i3 | 0) == 69) {
  HEAP32[26690] = 1;
  HEAP32[i5 >> 2] = 1;
  i15 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 return 0;
}

function _update_screen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 i12 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i9 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 if (!(_screen_valid(1) | 0)) {
  HEAP32[i4 >> 2] = 0;
  i13 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i13 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) == 5) {
  HEAP32[i12 >> 2] = 1;
  HEAP32[i6 >> 2] = 0;
 }
 if (HEAP32[26828] | 0) {
  if ((HEAP32[i6 >> 2] | 0) < (HEAP32[26828] | 0)) HEAP32[i6 >> 2] = HEAP32[26828];
  HEAP32[26828] = 0;
 }
 if ((HEAP32[i6 >> 2] | 0) < 40 ? (HEAP32[(HEAP32[26881] | 0) + 152 >> 2] | 0) == 0 : 0) HEAP32[i6 >> 2] = 40;
 i5 = (_redrawing() | 0) == 0;
 if (i5 | (HEAP32[26758] | 0) != 0) {
  _redraw_later(HEAP32[i6 >> 2] | 0);
  HEAP32[26828] = HEAP32[i6 >> 2];
  if ((HEAP32[i6 >> 2] | 0) > 25) HEAP32[(HEAP32[26881] | 0) + 152 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i13 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i13 | 0;
 }
 HEAP32[26758] = 1;
 if (HEAP32[i12 >> 2] | 0) HEAP32[26702] = (HEAP32[26702] | 0) + 1;
 if (HEAP32[27044] | 0) {
  HEAP32[26700] = 1;
  if ((HEAP32[27044] | 0) > ((HEAP32[10173] | 0) - 5 | 0)) HEAP32[i6 >> 2] = 50; else if ((HEAP32[i6 >> 2] | 0) != 50) {
   _check_for_delay(0);
   if (!(_screen_ins_lines(0, 0, HEAP32[27044] | 0, HEAP32[10173] | 0, 0, 0) | 0)) HEAP32[i6 >> 2] = 50;
   HEAP32[i7 >> 2] = HEAP32[26887];
   while (1) {
    if (!(HEAP32[i7 >> 2] | 0)) break;
    L39 : do if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 84 >> 2] | 0) < (HEAP32[27044] | 0)) {
     do if (((HEAP32[(HEAP32[i7 >> 2] | 0) + 84 >> 2] | 0) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 88 >> 2] | 0) | 0) > (HEAP32[27044] | 0)) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 160 >> 2] | 0) < 30) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 152 >> 2] | 0) > 0) {
      if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[i7 >> 2] | 0) + 156 >> 2] >> 2] | 0)) break;
      i5 = HEAP32[i7 >> 2] | 0;
      HEAP32[i5 + 164 >> 2] = (HEAP32[27044] | 0) - (HEAP32[i5 + 84 >> 2] | 0);
      HEAP32[(HEAP32[i7 >> 2] | 0) + 160 >> 2] = 30;
      break L39;
     } while (0);
     HEAP32[(HEAP32[i7 >> 2] | 0) + 160 >> 2] = 40;
     if (((HEAP32[(HEAP32[i7 >> 2] | 0) + 84 >> 2] | 0) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 88 >> 2] | 0) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 92 >> 2] | 0) | 0) <= (HEAP32[27044] | 0)) HEAP32[(HEAP32[i7 >> 2] | 0) + 176 >> 2] = 1;
    } while (0);
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
   }
   if (!(HEAP32[i12 >> 2] | 0)) HEAP32[26699] = 1;
   HEAP32[26770] = 1;
  }
  HEAP32[27044] = 0;
  HEAP32[26721] = 0;
 }
 _compute_cmdrow();
 if (HEAP32[10183] | 0) _highlight_changed() | 0;
 if ((HEAP32[i6 >> 2] | 0) == 50) {
  _screenclear();
  HEAP32[i6 >> 2] = 40;
  HEAP32[26828] = 0;
 }
 if (HEAP32[26700] | 0) _check_for_delay(0);
 if ((HEAP32[i6 >> 2] | 0) == 20) _update_curswant();
 do if ((HEAP32[(HEAP32[26881] | 0) + 160 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) {
  if ((HEAP32[i6 >> 2] | 0) == 10) if (HEAP8[(HEAP32[(HEAP32[26881] | 0) + 156 >> 2] | 0) + 6 >> 0] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[26881] | 0) + 156 >> 2] >> 2] | 0)) break;
  if ((HEAP32[i6 >> 2] | 0) == 20 & (HEAP32[26788] | 0) != 0) if ((HEAP32[(HEAP32[26881] | 0) + 44 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP8[(HEAP32[26881] | 0) + 40 >> 0] | 0) == (HEAP32[10179] | 0)) if (HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 4 | 0) if ((HEAP32[(HEAP32[26881] | 0) + 64 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0)) break;
  HEAP32[(HEAP32[26881] | 0) + 160 >> 2] = HEAP32[i6 >> 2];
 } while (0);
 if ((HEAP32[26770] | 0) != 0 | (HEAP32[i6 >> 2] | 0) >= 40) _draw_tabline();
 HEAP32[i8 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 160 >> 2] | 0) {
   _cursor_off();
   do if (!(HEAP32[i8 >> 2] | 0)) {
    HEAP32[i8 >> 2] = 1;
    do if (HEAP32[27099] | 0) {
     if (!(_clip_isautosel_star() | 0)) break;
     _clip_update_selection(108396);
    } while (0);
    do if (HEAP32[27099] | 0) {
     if (!(_clip_isautosel_plus() | 0)) break;
     _clip_update_selection(108396);
    } while (0);
    if (!(HEAP32[26627] | 0)) break;
    if ((HEAP32[i7 >> 2] | 0) != (HEAP32[26881] | 0)) break;
    HEAP32[i10 >> 2] = HEAP32[26637];
    HEAP32[i11 >> 2] = HEAP32[26638];
    _gui_undraw_cursor();
    HEAP32[i9 >> 2] = 1;
   } while (0);
   _win_update(HEAP32[i7 >> 2] | 0);
  }
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 176 >> 2] | 0) {
   _cursor_off();
   _win_redr_status(HEAP32[i7 >> 2] | 0, 1);
  }
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
 }
 HEAP32[i7 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 152 >> 2] = 0;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
 }
 _reset_updating_screen(1);
 if ((HEAP32[26700] | 0) != 0 | (HEAP32[26699] | 0) != 0) _showmode() | 0;
 if (HEAP32[i12 >> 2] | 0) HEAP32[26702] = (HEAP32[26702] | 0) + -1;
 if (!(HEAP32[26460] | 0)) _maybe_intro_message();
 HEAP32[26460] = 1;
 if (HEAP32[26627] | 0) {
  do if (HEAP32[i9 >> 2] | 0) {
   if (_gui_mch_is_blink_off() | 0) {
    i2 = 88;
    break;
   }
   _gui_disable_flush();
   _out_flush();
   _gui_enable_flush();
   HEAP32[26635] = HEAP32[i10 >> 2];
   HEAP32[26636] = HEAP32[i11 >> 2];
   _gui_update_cursor(0, 0);
   _gui_may_flush();
   HEAP32[26457] = HEAP32[26635];
   HEAP32[26458] = HEAP32[26636];
  } else i2 = 88; while (0);
  if ((i2 | 0) == 88) _out_flush();
  _gui_update_scrollbars(0);
 }
 HEAP32[i4 >> 2] = 1;
 i13 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i13 | 0;
}

function _ex_buffer_all(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 56 | 0;
 i5 = i3 + 52 | 0;
 i6 = i3 + 48 | 0;
 i7 = i3 + 44 | 0;
 i8 = i3 + 40 | 0;
 i9 = i3 + 36 | 0;
 i10 = i3 + 32 | 0;
 i11 = i3 + 28 | 0;
 i12 = i3 + 24 | 0;
 i13 = i3 + 20 | 0;
 i14 = i3 + 16 | 0;
 i15 = i3 + 12 | 0;
 i16 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i8 >> 2] = 1;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i14 >> 2] = HEAP32[27129];
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0)) HEAP32[i12 >> 2] = 9999; else HEAP32[i12 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 481) i2 = 6; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 427) i2 = 6; else HEAP32[i13 >> 2] = 1;
 if ((i2 | 0) == 6) HEAP32[i13 >> 2] = 0;
 _setpcmark();
 HEAP32[26757] = 1;
 if ((HEAP32[i14 >> 2] | 0) > 0) _goto_tabpage_tp(HEAP32[26884] | 0, 1, 1);
 while (1) {
  HEAP32[i15 >> 2] = HEAP32[HEAP32[26886] >> 2];
  HEAP32[i6 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[i6 >> 2] | 0)) break;
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
   do if ((HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + 56 >> 2] | 0) > 1) i2 = 19; else {
    i4 = HEAP32[i6 >> 2] | 0;
    if (HEAP32[27128] & 2 | 0) {
     i1 = (HEAP32[i4 + 88 >> 2] | 0) + (HEAP32[(HEAP32[i6 >> 2] | 0) + 92 >> 2] | 0) | 0;
     i17 = (HEAP32[10173] | 0) - (HEAP32[26875] | 0) | 0;
     if ((i1 | 0) < (i17 - (_tabline_height() | 0) | 0)) {
      i2 = 19;
      break;
     }
    } else if ((HEAP32[i4 + 100 >> 2] | 0) != (HEAP32[10174] | 0)) {
     i2 = 19;
     break;
    }
    if ((HEAP32[i14 >> 2] | 0) > 0) if ((HEAP32[i6 >> 2] | 0) != (HEAP32[26887] | 0)) i2 = 19; else i2 = 23; else i2 = 23;
   } while (0);
   if ((i2 | 0) == 19) {
    i2 = 0;
    if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) i2 = 23; else if (HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0) i2 = 23; else if ((HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + 64 >> 2] | 0) > 0) i2 = 23; else {
     _win_close(HEAP32[i6 >> 2] | 0, 0) | 0;
     HEAP32[i7 >> 2] = HEAP32[26887];
     HEAP32[i15 >> 2] = HEAP32[26884];
     HEAP32[i10 >> 2] = 0;
    }
   }
   if ((i2 | 0) == 23) {
    i2 = 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   }
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  }
  if ((HEAP32[i14 >> 2] | 0) == 0 | (HEAP32[i15 >> 2] | 0) == 0) break;
  _goto_tabpage_tp(HEAP32[i15 >> 2] | 0, 1, 1);
 }
 HEAP32[26745] = (HEAP32[26745] | 0) + 1;
 _win_enter(HEAP32[27112] | 0, 0);
 HEAP32[26746] = (HEAP32[26746] | 0) + 1;
 HEAP32[i5 >> 2] = HEAP32[26771];
 L37 : while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) break;
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) break;
  if (HEAP32[i13 >> 2] | 0) i2 = 32; else if (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) i2 = 32;
  L43 : do if ((i2 | 0) == 32) {
   i2 = 0;
   if (HEAP32[(HEAP32[i5 >> 2] | 0) + 596 >> 2] | 0) {
    do if (HEAP32[i14 >> 2] | 0) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] | 0) > 0) {
     HEAP32[i6 >> 2] = HEAP32[27112];
     break;
    } else {
     HEAP32[i6 >> 2] = 0;
     break;
    } else {
     HEAP32[i6 >> 2] = HEAP32[26887];
     while (1) {
      if (!(HEAP32[i6 >> 2] | 0)) break;
      if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) break;
      HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
     }
     if (HEAP32[i6 >> 2] | 0) _win_move_after(HEAP32[i6 >> 2] | 0, HEAP32[26881] | 0);
    } while (0);
    do if ((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[i8 >> 2] | 0) == 1) {
     _set_bufref(i16, HEAP32[i5 >> 2] | 0);
     HEAP32[i9 >> 2] = HEAP32[26911];
     HEAP32[26911] = 1;
     HEAP32[i8 >> 2] = _win_split(0, 33) | 0;
     HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
     HEAP32[26911] = HEAP32[i9 >> 2];
     if (!(HEAP32[i8 >> 2] | 0)) break L43;
     HEAP32[26812] = 1;
     _set_curbuf(HEAP32[i5 >> 2] | 0, 0);
     if (!(_bufref_valid(i16) | 0)) {
      i2 = 46;
      break L37;
     }
     if ((HEAP32[26812] | 0) == 2) {
      _win_close(HEAP32[26881] | 0, 1) | 0;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
      HEAP32[26812] = 0;
      HEAP32[26813] = 1;
      break;
     } else {
      _handle_swap_exists(0);
      break;
     }
    } while (0);
    _ui_breakcheck();
    if (HEAP32[26834] | 0) {
     i2 = 51;
     break L37;
    }
    if ((HEAP32[i14 >> 2] | 0) > 0) {
     i15 = _tabpage_index(0) | 0;
     if ((i15 | 0) <= (HEAP32[26994] | 0)) HEAP32[27129] = 9999;
    }
   }
  } while (0);
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2];
 }
 if ((i2 | 0) == 46) HEAP32[26812] = 0; else if ((i2 | 0) == 51) _vgetc() | 0;
 HEAP32[26745] = (HEAP32[26745] | 0) + -1;
 _win_enter(HEAP32[26887] | 0, 0);
 HEAP32[26746] = (HEAP32[26746] | 0) + -1;
 HEAP32[i6 >> 2] = HEAP32[27112];
 L75 : while (1) {
  if ((HEAP32[i10 >> 2] | 0) <= (HEAP32[i12 >> 2] | 0)) {
   i2 = 67;
   break;
  }
  if (_buf_hide(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) i18 = 1; else if (_bufIsChanged(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) i18 = (_autowrite(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0, 0) | 0) == 1; else i18 = 1;
  HEAP32[i11 >> 2] = i18 & 1;
  do if (_win_valid(HEAP32[i6 >> 2] | 0) | 0) {
   i5 = HEAP32[i6 >> 2] | 0;
   if (HEAP32[i11 >> 2] | 0) {
    _win_close(i5, ((_buf_hide(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) != 0 ^ 1) & 1) | 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
    HEAP32[i6 >> 2] = HEAP32[27112];
    break;
   } else {
    HEAP32[i6 >> 2] = HEAP32[i5 + 8 >> 2];
    if (!(HEAP32[i6 >> 2] | 0)) {
     i2 = 67;
     break L75;
    } else break;
   }
  } else HEAP32[i6 >> 2] = HEAP32[27112]; while (0);
 }
 if ((i2 | 0) == 67) {
  STACKTOP = i3;
  return;
 }
}

function _ml_delete_int(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5 + 60 | 0;
 i7 = i5 + 56 | 0;
 i8 = i5 + 52 | 0;
 i9 = i5 + 48 | 0;
 i10 = i5 + 44 | 0;
 i11 = i5 + 40 | 0;
 i12 = i5 + 36 | 0;
 i13 = i5 + 32 | 0;
 i14 = i5 + 28 | 0;
 i15 = i5 + 24 | 0;
 i16 = i5 + 20 | 0;
 i17 = i5 + 16 | 0;
 i18 = i5 + 12 | 0;
 i19 = i5 + 8 | 0;
 i20 = i5 + 4 | 0;
 i21 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 if ((HEAP32[i8 >> 2] | 0) >= 1) if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) {
  if (HEAP32[26049] | 0) if ((HEAP32[26049] | 0) > (HEAP32[i8 >> 2] | 0)) HEAP32[26049] = (HEAP32[26049] | 0) + -1;
  if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) == 1) {
   if (HEAP32[i9 >> 2] | 0) _set_keep_msg(92115, 0);
   HEAP32[i21 >> 2] = _ml_replace(1, 114072, 1) | 0;
   i9 = (HEAP32[i7 >> 2] | 0) + 8 | 0;
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 1;
   HEAP32[i6 >> 2] = HEAP32[i21 >> 2];
   i22 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i22 | 0;
  }
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
  if (!(HEAP32[i11 >> 2] | 0)) {
   HEAP32[i6 >> 2] = 0;
   i22 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i22 | 0;
  }
  i9 = _ml_find_line(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 17) | 0;
  HEAP32[i10 >> 2] = i9;
  if (!i9) {
   HEAP32[i6 >> 2] = 0;
   i22 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i22 | 0;
  }
  HEAP32[i12 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2];
  i9 = HEAP32[i7 >> 2] | 0;
  HEAP32[i15 >> 2] = (HEAP32[i9 + 40 >> 2] | 0) - (HEAP32[i9 + 36 >> 2] | 0) + 2;
  HEAP32[i16 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] | 0);
  i8 = HEAP32[i7 >> 2] | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
  HEAP32[i19 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 20 + (HEAP32[i16 >> 2] << 2) >> 2] & 2147483647;
  i8 = HEAP32[i12 >> 2] | 0;
  if (!(HEAP32[i16 >> 2] | 0)) HEAP32[i20 >> 2] = (HEAP32[i8 + 12 >> 2] | 0) - (HEAP32[i19 >> 2] | 0); else HEAP32[i20 >> 2] = (HEAP32[i8 + 20 + ((HEAP32[i16 >> 2] | 0) - 1 << 2) >> 2] & 2147483647) - (HEAP32[i19 >> 2] | 0);
  L27 : do if ((HEAP32[i15 >> 2] | 0) == 1) {
   _mf_free(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0);
   HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] = 0;
   HEAP32[i17 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) - 1;
   while (1) {
    if ((HEAP32[i17 >> 2] | 0) < 0) break L27;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] = 0;
    HEAP32[i14 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[i17 >> 2] << 4);
    HEAP32[i16 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2];
    i8 = _mf_get(HEAP32[i11 >> 2] | 0, HEAP32[HEAP32[i14 >> 2] >> 2] | 0, 1) | 0;
    HEAP32[i10 >> 2] = i8;
    if (!i8) {
     i4 = 22;
     break;
    }
    HEAP32[i13 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2];
    if ((HEAPU16[HEAP32[i13 >> 2] >> 1] | 0) != 28788) {
     i4 = 24;
     break;
    }
    i8 = (HEAP32[i13 >> 2] | 0) + 2 | 0;
    i9 = (HEAP16[i8 >> 1] | 0) + -1 << 16 >> 16;
    HEAP16[i8 >> 1] = i9;
    HEAP32[i15 >> 2] = i9 & 65535;
    if (HEAP32[i15 >> 2] | 0) {
     i4 = 27;
     break;
    }
    _mf_free(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0);
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
   }
   if ((i4 | 0) == 22) {
    HEAP32[i6 >> 2] = 0;
    i22 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i22 | 0;
   } else if ((i4 | 0) == 24) {
    _iemsg(59511);
    _mf_put(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0, 0);
    HEAP32[i6 >> 2] = 0;
    i22 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i22 | 0;
   } else if ((i4 | 0) == 27) {
    if ((HEAP32[i15 >> 2] | 0) != (HEAP32[i16 >> 2] | 0)) {
     i9 = (HEAP32[i13 >> 2] | 0) + 8 | 0;
     i8 = HEAP32[i16 >> 2] | 0;
     _memmove(i9 + (HEAP32[i16 >> 2] << 4) | 0, i9 + (i8 + 1 << 4) | 0, (HEAP32[i15 >> 2] | 0) - i8 << 4 | 0) | 0;
    }
    _mf_put(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, 1, 0);
    HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] = HEAP32[i17 >> 2];
    if (HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] | 0) {
     i8 = HEAP32[i7 >> 2] | 0;
     _ml_lineadd(i8 | 0, HEAP32[i8 + 44 >> 2] | 0);
     i8 = HEAP32[i7 >> 2] | 0;
     i9 = (HEAP32[i8 + 12 >> 2] | 0) + (HEAP32[i8 + 16 >> 2] << 4) + 8 | 0;
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] | 0);
    }
    i9 = (HEAP32[i7 >> 2] | 0) + 16 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    break;
   }
  } else {
   HEAP32[i18 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2];
   i9 = (HEAP32[i12 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) | 0;
   i8 = HEAP32[i18 >> 2] | 0;
   _memmove(i9 + (HEAP32[i20 >> 2] | 0) | 0, i9 | 0, (HEAP32[i19 >> 2] | 0) - i8 | 0) | 0;
   HEAP32[i21 >> 2] = HEAP32[i16 >> 2];
   while (1) {
    if ((HEAP32[i21 >> 2] | 0) >= ((HEAP32[i15 >> 2] | 0) - 1 | 0)) break;
    i8 = (HEAP32[i12 >> 2] | 0) + 20 | 0;
    HEAP32[i8 + (HEAP32[i21 >> 2] << 2) >> 2] = (HEAP32[i8 + ((HEAP32[i21 >> 2] | 0) + 1 << 2) >> 2] | 0) + (HEAP32[i20 >> 2] | 0);
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
   }
   i8 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + ((HEAP32[i20 >> 2] | 0) + 4);
   i8 = (HEAP32[i12 >> 2] | 0) + 8 | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i20 >> 2] | 0);
   i8 = (HEAP32[i12 >> 2] | 0) + 16 | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
   i8 = (HEAP32[i7 >> 2] | 0) + 8 | 0;
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 12;
  } while (0);
  HEAP32[i6 >> 2] = 1;
  i22 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i22 | 0;
 }
 HEAP32[i6 >> 2] = 0;
 i22 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i22 | 0;
}

function _ex_retab(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3 + 72 | 0;
 i5 = i3 + 68 | 0;
 i6 = i3 + 64 | 0;
 i7 = i3 + 60 | 0;
 i8 = i3 + 56 | 0;
 i9 = i3 + 52 | 0;
 i10 = i3 + 48 | 0;
 i11 = i3 + 44 | 0;
 i12 = i3 + 40 | 0;
 i13 = i3 + 36 | 0;
 i14 = i3 + 32 | 0;
 i15 = i3 + 28 | 0;
 i16 = i3 + 24 | 0;
 i17 = i3 + 20 | 0;
 i18 = i3 + 16 | 0;
 i19 = i3 + 12 | 0;
 i20 = i3 + 8 | 0;
 i21 = i3 + 4 | 0;
 i22 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i16 >> 2] = 1;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i20 >> 2] = HEAP32[(HEAP32[26881] | 0) + 200 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = 0;
 HEAP32[i19 >> 2] = _getdigits(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAP32[i19 >> 2] | 0) < 0) {
  _emsg(93410) | 0;
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[i19 >> 2] | 0)) HEAP32[i19 >> 2] = HEAP32[(HEAP32[26773] | 0) + 700 >> 2];
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2];
 while (1) {
  if (HEAP32[26834] | 0) break;
  if ((HEAP32[i5 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0)) break;
  HEAP32[i15 >> 2] = _ml_get(HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i17 >> 2] = 0;
  L12 : while (1) {
   if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0) == 32) i2 = 11; else if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0) == 9) i2 = 11; else {
    if (HEAP32[i6 >> 2] | 0) i2 = 18; else if ((HEAP32[i7 >> 2] | 0) > 1 ? (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) != 0 : 0) i2 = 18;
    do if ((i2 | 0) == 18) {
     i2 = 0;
     i1 = (HEAP32[i11 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) | 0;
     HEAP32[i7 >> 2] = i1;
     HEAP32[i9 >> 2] = i1;
     HEAP32[i8 >> 2] = 0;
     if (!(HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0)) {
      i1 = HEAP32[i19 >> 2] | 0;
      HEAP32[i18 >> 2] = (i1 | 0) - ((HEAP32[i13 >> 2] | 0) % (i1 | 0) | 0);
      if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i18 >> 2] | 0)) {
       HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
       HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
      }
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) / (HEAP32[i19 >> 2] | 0) | 0);
      i1 = HEAP32[i19 >> 2] | 0;
      i23 = Math_imul((HEAP32[i7 >> 2] | 0) / (i1 | 0) | 0, i1 | 0) | 0;
      HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i23;
     }
     if (!(HEAP32[i6 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0) != 0)) if (((HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0) >= (HEAP32[i9 >> 2] | 0)) break;
     if (!(HEAP32[i17 >> 2] | 0)) {
      HEAP32[i17 >> 2] = 1;
      if (!(_u_save((HEAP32[i5 >> 2] | 0) - 1 | 0, (HEAP32[i5 >> 2] | 0) + 1 | 0) | 0)) {
       i2 = 26;
       break L12;
      }
     }
     HEAP32[i9 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
     HEAP32[i14 >> 2] = _strlen(HEAP32[i15 >> 2] | 0) | 0;
     HEAP32[i16 >> 2] = _lalloc((HEAP32[i14 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) + 1 | 0, 1) | 0;
     if (!(HEAP32[i16 >> 2] | 0)) break L12;
     if ((HEAP32[i12 >> 2] | 0) > 0) _memmove(HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
     i23 = HEAP32[i10 >> 2] | 0;
     _memmove((HEAP32[i16 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0, (HEAP32[i15 >> 2] | 0) + i23 | 0, (HEAP32[i14 >> 2] | 0) - i23 + 1 | 0) | 0;
     HEAP32[i15 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
     HEAP32[i10 >> 2] = 0;
     while (1) {
      if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
      i23 = HEAP32[i10 >> 2] | 0;
      HEAP8[(HEAP32[i15 >> 2] | 0) + i23 >> 0] = (i23 | 0) < (HEAP32[i8 >> 2] | 0) ? 9 : 32;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
     }
     _ml_replace(HEAP32[i5 >> 2] | 0, HEAP32[i16 >> 2] | 0, 0) | 0;
     if (!(HEAP32[i21 >> 2] | 0)) HEAP32[i21 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i22 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i15 >> 2] = HEAP32[i16 >> 2];
     HEAP32[i10 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
    } while (0);
    HEAP32[i6 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
   }
   do if ((i2 | 0) == 11) {
    i2 = 0;
    if ((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[i7 >> 2] | 0) == 0) {
     HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
    }
    if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0) == 32) {
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
     break;
    } else {
     HEAP32[i6 >> 2] = 1;
     break;
    }
   } while (0);
   if (!(HEAPU8[(HEAP32[i15 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0)) break;
   i23 = _chartabsize((HEAP32[i15 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0, HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i23;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  if ((i2 | 0) == 26) {
   i2 = 0;
   HEAP32[i16 >> 2] = 0;
  }
  if (!(HEAP32[i16 >> 2] | 0)) break;
  _line_breakcheck();
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if (HEAP32[26834] | 0) _emsg(92420) | 0;
 if ((HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0) != (HEAP32[i19 >> 2] | 0)) _redraw_curbuf_later(40);
 if (HEAP32[i21 >> 2] | 0) _changed_lines(HEAP32[i21 >> 2] | 0, 0, (HEAP32[i22 >> 2] | 0) + 1 | 0, 0);
 HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = HEAP32[i20 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 700 >> 2] = HEAP32[i19 >> 2];
 _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 _u_clearline();
 STACKTOP = i3;
 return;
}

function _format_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i4 + 76 | 0;
 i6 = i4 + 72 | 0;
 i7 = i4 + 68 | 0;
 i8 = i4 + 64 | 0;
 i9 = i4 + 60 | 0;
 i10 = i4 + 56 | 0;
 i11 = i4 + 52 | 0;
 i12 = i4 + 48 | 0;
 i13 = i4 + 44 | 0;
 i14 = i4 + 40 | 0;
 i15 = i4 + 36 | 0;
 i16 = i4 + 32 | 0;
 i17 = i4 + 28 | 0;
 i18 = i4 + 24 | 0;
 i19 = i4 + 20 | 0;
 i20 = i4 + 16 | 0;
 i21 = i4 + 12 | 0;
 i22 = i4 + 8 | 0;
 i23 = i4 + 4 | 0;
 i24 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = 1;
 HEAP32[i14 >> 2] = -1;
 HEAP32[i18 >> 2] = 1;
 HEAP32[i21 >> 2] = 1;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i23 >> 2] = HEAP32[10180];
 HEAP32[i7 >> 2] = (_comp_textwidth(1) | 0) * 3;
 HEAP32[i15 >> 2] = _has_format_option(50) | 0;
 HEAP32[i16 >> 2] = _has_format_option(110) | 0;
 HEAP32[i17 >> 2] = _has_format_option(119) | 0;
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > 1) HEAP32[i8 >> 2] = _fmt_check_par((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1 | 0) | 0; else HEAP32[i8 >> 2] = 1;
 HEAP32[i9 >> 2] = _fmt_check_par(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = (HEAP32[i8 >> 2] | 0 ? 1 : (HEAP32[i9 >> 2] | 0) != 0) & 1;
 if ((HEAP32[i10 >> 2] | 0) == 0 & (HEAP32[i17 >> 2] | 0) != 0) HEAP32[i10 >> 2] = ((_ends_in_white((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1 | 0) | 0) != 0 ^ 1) & 1;
 i2 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
 HEAP32[i20 >> 2] = HEAP32[i5 >> 2];
 L8 : while (1) {
  if (!(HEAP32[i20 >> 2] | 0)) {
   i3 = 55;
   break;
  }
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
   i3 = 55;
   break;
  }
  if (HEAP32[i13 >> 2] | 0) {
   i2 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
  }
  if ((HEAP32[i20 >> 2] | 0) == 1) i3 = 13; else if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) i3 = 13; else {
   HEAP32[i9 >> 2] = _fmt_check_par((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0) | 0;
   if (HEAP32[i16 >> 2] | 0) HEAP32[i12 >> 2] = (_get_number_indent((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0) | 0) > 0 & 1;
  }
  if ((i3 | 0) == 13) {
   i3 = 0;
   HEAP32[i9 >> 2] = 1;
  }
  HEAP32[i13 >> 2] = 1;
  if ((HEAP32[i8 >> 2] | 0) != 0 | (HEAP32[i9 >> 2] | 0) != 0) i25 = 1; else i25 = (HEAP32[i12 >> 2] | 0) != 0;
  HEAP32[i10 >> 2] = i25 & 1;
  if ((HEAP32[i10 >> 2] | 0) == 0 & (HEAP32[i17 >> 2] | 0) != 0) HEAP32[i10 >> 2] = ((_ends_in_white(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) != 0 ^ 1) & 1;
  do if (HEAP32[i8 >> 2] | 0) {
   if ((HEAP32[i5 >> 2] | 0) < 0) {
    i3 = 55;
    break L8;
   }
  } else {
   do if (HEAP32[i18 >> 2] | 0) if (((HEAP32[i15 >> 2] | 0) != 0 | (HEAP32[i16 >> 2] | 0) != 0) & (HEAP32[i11 >> 2] | 0) != 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
    if (HEAP32[i15 >> 2] | 0) if (HEAPU8[(_ml_get((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0) | 0) >> 0] | 0 | 0) {
     HEAP32[i14 >> 2] = _get_indent_lnum((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0) | 0;
     break;
    }
    if (HEAP32[i16 >> 2] | 0) HEAP32[i14 >> 2] = _get_number_indent(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0;
   } while (0);
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i10 >> 2] = 1;
   if ((HEAP32[i10 >> 2] | 0) != 0 | (HEAP32[i22 >> 2] | 0) != 0) {
    if (HEAP32[i21 >> 2] | 0) _set_indent(_get_indent() | 0, 1) | 0;
    HEAP32[10180] = 1;
    _coladvance(2147483647) | 0;
    while (1) {
     if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
     if (!(_vim_isspace(_gchar_cursor() | 0) | 0)) break;
     _dec_cursor() | 0;
    }
    HEAP32[10180] = 16;
    HEAP32[i19 >> 2] = HEAP32[26988];
    HEAP32[26988] = 0;
    _insertchar(0, 1 + (HEAP32[i6 >> 2] | 0 ? 8 : 0) | 0, HEAP32[i14 >> 2] | 0);
    HEAP32[10180] = HEAP32[i23 >> 2];
    HEAP32[26988] = HEAP32[i19 >> 2];
    HEAP32[i14 >> 2] = -1;
    HEAP32[i21 >> 2] = HEAP32[i10 >> 2];
    if (HEAP32[i10 >> 2] | 0) {
     if ((HEAP32[i5 >> 2] | 0) < 0) {
      i3 = 55;
      break L8;
     }
     HEAP32[i18 >> 2] = 1;
    }
    HEAP32[i22 >> 2] = 0;
   }
   if (!(HEAP32[i10 >> 2] | 0)) {
    HEAP32[i13 >> 2] = 0;
    i2 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
    if ((HEAP32[i5 >> 2] | 0) < 0) if (!(_u_save_cursor() | 0)) {
     i3 = 55;
     break L8;
    }
    if ((HEAP32[i14 >> 2] | 0) > 0) {
     HEAP32[i24 >> 2] = _getwhitecols_curline() | 0;
     if ((HEAP32[i24 >> 2] | 0) > 0) {
      _del_bytes(HEAP32[i24 >> 2] | 0, 0, 0) | 0;
      _mark_col_adjust(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 0, 0, 0 - (HEAP32[i24 >> 2] | 0) | 0);
     }
    }
    i2 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
    if (!(_do_join(2, 1, 0, 0, 0) | 0)) {
     i3 = 50;
     break L8;
    }
    HEAP32[i18 >> 2] = 0;
    i2 = _strlen(_ml_get_curline() | 0) | 0;
    if (i2 >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
     HEAP32[i22 >> 2] = 1;
     break;
    } else {
     HEAP32[i22 >> 2] = 0;
     break;
    }
   }
  } while (0);
  _line_breakcheck();
  HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
 }
 if ((i3 | 0) == 50) {
  _beep_flush();
  STACKTOP = i4;
  return;
 } else if ((i3 | 0) == 55) {
  STACKTOP = i4;
  return;
 }
}

function _internal_format(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i8 = i7 + 72 | 0;
 i9 = i7 + 68 | 0;
 i10 = i7 + 64 | 0;
 i11 = i7 + 60 | 0;
 i12 = i7 + 56 | 0;
 i13 = i7 + 52 | 0;
 i14 = i7 + 48 | 0;
 i15 = i7 + 44 | 0;
 i16 = i7 + 40 | 0;
 i17 = i7 + 36 | 0;
 i18 = i7 + 32 | 0;
 i19 = i7 + 28 | 0;
 i20 = i7 + 24 | 0;
 i21 = i7 + 20 | 0;
 i22 = i7 + 16 | 0;
 i23 = i7 + 12 | 0;
 i24 = i7 + 8 | 0;
 i25 = i7 + 4 | 0;
 i26 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = _has_format_option(98) | 0;
 HEAP32[i17 >> 2] = _has_format_option(119) | 0;
 HEAP32[i18 >> 2] = 1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 564 >> 2] | 0)) {
  HEAP32[i13 >> 2] = _gchar_cursor() | 0;
  if ((HEAP32[i13 >> 2] | 0) == 32 | (HEAP32[i13 >> 2] | 0) == 9) {
   HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
   _pchar_cursor(120);
  }
 }
 while (1) {
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  HEAP32[i22 >> 2] = 0;
  i5 = _get_nolist_virtcol() | 0;
  if (HEAP32[i12 >> 2] | 0) i27 = HEAP32[i12 >> 2] | 0; else i27 = _gchar_cursor() | 0;
  HEAP32[i24 >> 2] = i5 + (_char2cells(i27) | 0);
  if ((HEAP32[i24 >> 2] | 0) <= (HEAP32[i8 >> 2] | 0)) break;
  if (!(HEAP32[i10 >> 2] & 1)) if (!(_has_format_option(116) | 0)) break;
  i5 = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0;
  HEAP32[i19 >> 2] = i5;
  if (!i5) break;
  _coladvance(HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i20 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i19 >> 2];
  HEAP32[i21 >> 2] = 0;
  L17 : while (1) {
   if (HEAP32[i16 >> 2] | 0) i6 = 16; else if (_has_format_option(118) | 0) i6 = 16;
   if ((i6 | 0) == 16) {
    i6 = 0;
    if (!(HEAP32[i10 >> 2] & 1)) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27122] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) < (HEAP32[27123] | 0)) break;
   }
   if (HEAP32[i12 >> 2] | 0 ? (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) == (HEAP32[i19 >> 2] | 0) : 0) HEAP32[i13 >> 2] = HEAP32[i12 >> 2]; else HEAP32[i13 >> 2] = _gchar_cursor() | 0;
   if ((HEAP32[i13 >> 2] | 0) == 32 | (HEAP32[i13 >> 2] | 0) == 9) {
    HEAP32[i26 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
    while (1) {
     if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= 0) break;
     if (!((HEAP32[i13 >> 2] | 0) == 32 ? 1 : (HEAP32[i13 >> 2] | 0) == 9)) break;
     _dec_cursor() | 0;
     HEAP32[i13 >> 2] = _gchar_cursor() | 0;
    }
    if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) if ((HEAP32[i13 >> 2] | 0) == 32 | (HEAP32[i13 >> 2] | 0) == 9) break;
    do if (_has_format_option(49) | 0) {
     if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break L17;
     HEAP32[i25 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
     _dec_cursor() | 0;
     HEAP32[i13 >> 2] = _gchar_cursor() | 0;
     if ((HEAP32[i13 >> 2] | 0) == 32 | (HEAP32[i13 >> 2] | 0) == 9) continue L17; else {
      HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i25 >> 2];
      break;
     }
    } while (0);
    _inc_cursor() | 0;
    HEAP32[i22 >> 2] = (HEAP32[i26 >> 2] | 0) + 1;
    HEAP32[i21 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
    if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= (HEAP32[i20 >> 2] | 0)) break;
   }
   if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
   _dec_cursor() | 0;
  }
  if (!(HEAP32[i21 >> 2] | 0)) {
   i6 = 38;
   break;
  }
  _undisplay_dollar();
  HEAP32[26853] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i22 >> 2] | 0);
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i21 >> 2];
  while (1) {
   HEAP32[i13 >> 2] = _gchar_cursor() | 0;
   if (!((HEAP32[i13 >> 2] | 0) == 32 ? 1 : (HEAP32[i13 >> 2] | 0) == 9)) break;
   if (HEAP32[i17 >> 2] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) >= (HEAP32[i19 >> 2] | 0)) break;
   _inc_cursor() | 0;
  }
  i5 = (HEAP32[i19 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) | 0;
  HEAP32[i19 >> 2] = i5;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) < 0 ? 0 : i5;
  if (!(HEAP32[i17 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i21 >> 2];
  _open_line(1, 9 + (HEAP32[i17 >> 2] | 0 ? 4 : 0) | 0, HEAP32[i10 >> 2] & 16 | 0 ? HEAP32[i9 >> 2] | 0 : HEAP32[25203] | 0) | 0;
  if (!(HEAP32[i10 >> 2] & 16)) HEAP32[25203] = 0;
  HEAP32[26853] = 0;
  if (HEAP32[i18 >> 2] | 0) {
   if (!(HEAP32[i10 >> 2] & 16)) {
    if ((HEAP32[i9 >> 2] | 0) < 0) if (_has_format_option(110) | 0) HEAP32[i9 >> 2] = _get_number_indent((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1 | 0) | 0;
    if ((HEAP32[i9 >> 2] | 0) >= 0) _set_indent(HEAP32[i9 >> 2] | 0, 1) | 0;
   }
   HEAP32[i18 >> 2] = 0;
  }
  i5 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i19 >> 2] | 0);
  HEAP32[i23 >> 2] = _strlen(_ml_get_curline() | 0) | 0;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > (HEAP32[i23 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i23 >> 2];
  HEAP32[i15 >> 2] = 1;
  HEAP32[26791] = 0;
  _line_breakcheck();
 }
 if ((i6 | 0) == 38) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i19 >> 2];
 if (HEAP32[i14 >> 2] | 0) _pchar_cursor(HEAP32[i14 >> 2] | 0);
 if (!((HEAP32[i11 >> 2] | 0) == 0 & (HEAP32[i15 >> 2] | 0) != 0)) {
  STACKTOP = i7;
  return;
 }
 _update_topline();
 _redraw_curbuf_later(10);
 STACKTOP = i7;
 return;
}

function _buf_copy_options(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = 1;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 if (HEAP32[26904] | 0) {
  if (!(_vim_strchr(HEAP32[26904] | 0, 83) | 0)) i3 = 4; else if (!(HEAP32[i6 >> 2] & 1)) i3 = 4;
  do if ((i3 | 0) == 4) {
   if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 560 >> 2] | 0)) {
    if (HEAP32[i6 >> 2] & 1 | 0) break;
    if (!(_vim_strchr(HEAP32[26904] | 0, 115) | 0)) break;
   }
   HEAP32[i7 >> 2] = 0;
  } while (0);
  if (HEAP32[i7 >> 2] | 0) i3 = 10; else if (HEAP32[i6 >> 2] & 2 | 0) i3 = 10;
  do if ((i3 | 0) == 10) {
   if (HEAP32[i6 >> 2] & 4 | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 780 >> 2] | 0) i11 = 1; else i3 = 12; else i3 = 12;
   if ((i3 | 0) == 12) i11 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 560 >> 2] | 0) != 0;
   HEAP32[i9 >> 2] = i11 & 1;
   if (HEAP32[i9 >> 2] | 0) {
    HEAP32[i8 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 640 >> 2];
    HEAP32[(HEAP32[i5 >> 2] | 0) + 640 >> 2] = 0;
   }
   i2 = HEAP32[i5 >> 2] | 0;
   if (HEAP32[(HEAP32[i5 >> 2] | 0) + 560 >> 2] | 0) _free_buf_options(i2, 0); else {
    _free_buf_options(i2, 1);
    HEAP32[(HEAP32[i5 >> 2] | 0) + 676 >> 2] = 0;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 704 >> 2] = HEAP32[26284];
    switch (HEAPU8[HEAP32[26917] >> 0] | 0) {
    case 109:
     {
      i2 = _vim_strsave(64250) | 0;
      HEAP32[(HEAP32[i5 >> 2] | 0) + 620 >> 2] = i2;
      break;
     }
    case 100:
     {
      i2 = _vim_strsave(64304) | 0;
      HEAP32[(HEAP32[i5 >> 2] | 0) + 620 >> 2] = i2;
      break;
     }
    case 117:
     {
      i2 = _vim_strsave(64299) | 0;
      HEAP32[(HEAP32[i5 >> 2] | 0) + 620 >> 2] = i2;
      break;
     }
    default:
     {
      i2 = _vim_strsave(HEAP32[26262] | 0) | 0;
      HEAP32[(HEAP32[i5 >> 2] | 0) + 620 >> 2] = i2;
     }
    }
    if (HEAP32[(HEAP32[i5 >> 2] | 0) + 620 >> 2] | 0) {
     i2 = HEAP32[i5 >> 2] | 0;
     HEAP32[i2 + 768 >> 2] = HEAPU8[HEAP32[i2 + 620 >> 2] >> 0];
    }
    HEAP32[(HEAP32[i5 >> 2] | 0) + 588 >> 2] = 114072;
    HEAP32[(HEAP32[i5 >> 2] | 0) + 592 >> 2] = 114072;
   }
   HEAP32[(HEAP32[i5 >> 2] | 0) + 564 >> 2] = HEAP32[26243];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 568 >> 2] = HEAP32[26244];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 680 >> 2] = HEAP32[26280];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 708 >> 2] = HEAP32[26249];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 716 >> 2] = HEAP32[26250];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 712 >> 2] = HEAP32[26253];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 720 >> 2] = HEAP32[26251];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 728 >> 2] = HEAP32[26252];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 724 >> 2] = HEAP32[26254];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 584 >> 2] = HEAP32[26258];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 604 >> 2] = HEAP32[26271];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 608 >> 2] = HEAP32[26245];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 612 >> 2] = HEAP32[26257];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 616 >> 2] = HEAP32[26246];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 656 >> 2] = HEAP32[26255];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 660 >> 2] = HEAP32[26256];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 636 >> 2] = HEAP32[26274];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 696 >> 2] = HEAP32[27135] | 0 ? 0 : HEAP32[26282] | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 688 >> 2] = HEAP32[26247];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 692 >> 2] = HEAP32[26248];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 684 >> 2] = HEAP32[26281];
   i2 = _vim_strsave(HEAP32[26272] | 0) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 628 >> 2] = i2;
   i2 = _vim_strsave(HEAP32[26273] | 0) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 632 >> 2] = i2;
   i2 = _vim_strsave(HEAP32[26261] | 0) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 668 >> 2] = i2;
   i2 = _vim_strsave(HEAP32[26263] | 0) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 652 >> 2] = i2;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 580 >> 2] = HEAP32[26269];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 624 >> 2] = 114072;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 672 >> 2] = HEAP32[26278];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 644 >> 2] = 114072;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 552 >> 2] = HEAP32[26259];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 556 >> 2] = HEAP32[26260];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 740 >> 2] = -1;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 756 >> 2] = -123456;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 572 >> 2] = 114072;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 576 >> 2] = 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 732 >> 2] = 114072;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 648 >> 2] = 114072;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 736 >> 2] = 114072;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 744 >> 2] = 114072;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 748 >> 2] = 114072;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 752 >> 2] = 0;
   if (HEAP32[i9 >> 2] | 0) {
    HEAP32[(HEAP32[i5 >> 2] | 0) + 640 >> 2] = HEAP32[i8 >> 2];
    break;
   }
   i2 = _vim_strsave(HEAP32[26275] | 0) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 640 >> 2] = i2;
   HEAP32[i10 >> 2] = 1;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 700 >> 2] = HEAP32[26283];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 780 >> 2] = 0;
   if ((HEAPU8[HEAP32[(HEAP32[i5 >> 2] | 0) + 592 >> 2] >> 0] | 0) == 104) _clear_string_option((HEAP32[i5 >> 2] | 0) + 592 | 0);
   HEAP32[(HEAP32[i5 >> 2] | 0) + 664 >> 2] = HEAP32[26276];
  } while (0);
  if (HEAP32[i7 >> 2] | 0) HEAP32[(HEAP32[i5 >> 2] | 0) + 560 >> 2] = 1;
 }
 _check_buf_options(HEAP32[i5 >> 2] | 0);
 if (!(HEAP32[i10 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 _buf_init_chartab(HEAP32[i5 >> 2] | 0, 0) | 0;
 STACKTOP = i4;
 return;
}

function _win_close(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4 + 48 | 0;
 i6 = i4 + 44 | 0;
 i7 = i4 + 40 | 0;
 i8 = i4 + 36 | 0;
 i9 = i4 + 32 | 0;
 i10 = i4 + 28 | 0;
 i11 = i4 + 24 | 0;
 i12 = i4 + 20 | 0;
 i13 = i4 + 16 | 0;
 i14 = i4 + 12 | 0;
 i15 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = HEAP32[26886];
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) + 20 >> 2];
 if (_last_window() | 0) {
  _emsg(83945) | 0;
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 do if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0)) {
  if (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + 64 >> 2] | 0) > 0) break;
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[27113] | 0)) {
   _emsg(83976) | 0;
   HEAP32[i5 >> 2] = 0;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
  if ((HEAP32[26887] | 0) == (HEAP32[27113] | 0)) i3 = 11; else if ((HEAP32[27112] | 0) == (HEAP32[27113] | 0)) i3 = 11;
  if ((i3 | 0) == 11) if (_one_window() | 0) {
   _emsg(84010) | 0;
   HEAP32[i5 >> 2] = 0;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
  if (_close_last_window_tabpage(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0) {
   HEAP32[i5 >> 2] = 0;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
  if (_bt_help(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) HEAP32[i12 >> 2] = 1; else _clear_snapshot(HEAP32[26886] | 0, 0);
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26881] | 0)) {
   HEAP32[i8 >> 2] = _frame2win(_win_altframe(HEAP32[i6 >> 2] | 0, 0) | 0) | 0;
   if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[26773] | 0)) {
    HEAP32[i9 >> 2] = 1;
    HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 1;
    _apply_autocmds(6, 0, 0, 0, HEAP32[26773] | 0) | 0;
    if (!(_win_valid(HEAP32[i6 >> 2] | 0) | 0)) {
     HEAP32[i5 >> 2] = 0;
     i16 = HEAP32[i5 >> 2] | 0;
     STACKTOP = i4;
     return i16 | 0;
    }
    HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 0;
    if (_last_window() | 0) {
     HEAP32[i5 >> 2] = 0;
     i16 = HEAP32[i5 >> 2] | 0;
     STACKTOP = i4;
     return i16 | 0;
    }
   }
   HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 1;
   _apply_autocmds(94, 0, 0, 0, HEAP32[26773] | 0) | 0;
   if (!(_win_valid(HEAP32[i6 >> 2] | 0) | 0)) {
    HEAP32[i5 >> 2] = 0;
    i16 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i16 | 0;
   }
   HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 0;
   if (_last_window() | 0) {
    HEAP32[i5 >> 2] = 0;
    i16 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i16 | 0;
   }
  }
  if (HEAP32[26627] | 0) _out_flush();
  if (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) {
   _set_bufref(i15, HEAP32[26773] | 0);
   HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 1;
   i2 = HEAP32[i6 >> 2] | 0;
   _close_buffer(i2 | 0, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0 ? 2 : 0, 1);
   if (_win_valid_any_tab(HEAP32[i6 >> 2] | 0) | 0) HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 0;
   if (!(_bufref_valid(i15) | 0)) HEAP32[26773] = HEAP32[26771];
  }
  do if (_only_one_window() | 0) if (_win_valid(HEAP32[i6 >> 2] | 0) | 0) if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
   if (!(_last_window() | 0)) if ((HEAP32[26886] | 0) == (HEAP32[i13 >> 2] | 0)) if (!(_close_last_window_tabpage(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0)) break;
   if (!(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 4 >> 2] = HEAP32[26773];
   _getout(0);
  } while (0);
  if ((HEAP32[26886] | 0) != (HEAP32[i13 >> 2] | 0)) if (_win_valid_any_tab(HEAP32[i6 >> 2] | 0) | 0) if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
   _win_close_othertab(HEAP32[i6 >> 2] | 0, 0, HEAP32[i13 >> 2] | 0);
   HEAP32[i5 >> 2] = 0;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
  if (_win_valid(HEAP32[i6 >> 2] | 0) | 0) if (!(_last_window() | 0)) if (!(_close_last_window_tabpage(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0)) {
   HEAP32[i8 >> 2] = _win_free_mem(HEAP32[i6 >> 2] | 0, i11, 0) | 0;
   if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26881] | 0)) {
    HEAP32[26881] = HEAP32[i8 >> 2];
    HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
    HEAP32[i10 >> 2] = 1;
    _check_cursor();
   }
   do if (HEAP32[26911] | 0) {
    if ((HEAPU8[HEAP32[26910] >> 0] | 0) != 98) if ((HEAPU8[HEAP32[26910] >> 0] | 0) != (HEAP32[i11 >> 2] | 0)) {
     i3 = 58;
     break;
    }
    i2 = HEAP32[26881] | 0;
    _win_equal(i2 | 0, (HEAP32[(HEAP32[i2 + 20 >> 2] | 0) + 20 >> 2] | 0) == (HEAP32[i14 >> 2] | 0) & 1, HEAP32[i11 >> 2] | 0);
   } else i3 = 58; while (0);
   if ((i3 | 0) == 58) _win_comp_pos() | 0;
   do if (HEAP32[i10 >> 2] | 0) {
    _win_enter_ext(HEAP32[i8 >> 2] | 0, 0, 1, 0, 1, 1);
    if (!(HEAP32[i9 >> 2] | 0)) break;
    _apply_autocmds(2, 0, 0, 0, HEAP32[26773] | 0) | 0;
   } while (0);
   _last_status(0);
   if (HEAP32[i12 >> 2] | 0) _restore_snapshot(0, HEAP32[i10 >> 2] | 0);
   do if (HEAP32[26627] | 0) {
    if (_win_hasvertsplit() | 0) break;
    _gui_init_which_components(0);
   } while (0);
   _redraw_all_later(40);
   HEAP32[i5 >> 2] = 1;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 } while (0);
 HEAP32[i5 >> 2] = 0;
 i16 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i16 | 0;
}

function _simplify_filename(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i4 = i3 + 180 | 0;
 i5 = i3 + 176 | 0;
 i6 = i3 + 172 | 0;
 i7 = i3 + 168 | 0;
 i8 = i3 + 164 | 0;
 i9 = i3 + 160 | 0;
 i10 = i3 + 156 | 0;
 i11 = i3 + 152 | 0;
 i12 = i3 + 184 | 0;
 i13 = i3 + 76 | 0;
 i14 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 1;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 if (_vim_ispathsep(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) {
  HEAP32[i10 >> 2] = 0;
  do HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1; while ((_vim_ispathsep(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) != 0);
 }
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 do {
  i1 = (_vim_ispathsep(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) != 0;
  i15 = HEAP32[i6 >> 2] | 0;
  L8 : do if (i1) {
   i16 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
   _memmove(i15 | 0, i16 | 0, (_strlen((HEAP32[i6 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
  } else {
   do if ((HEAPU8[i15 >> 0] | 0) == 46) {
    if (!(_vim_ispathsep(HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) | 0)) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) break;
    i16 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
    if (HEAP32[i10 >> 2] | 0 ? (HEAP32[i6 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) : 0) {
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (1 + ((HEAPU8[i16 >> 0] | 0) != 0 & 1));
     break L8;
    }
    HEAP32[i7 >> 2] = i16;
    L19 : do if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) while (1) {
     if (!(_vim_ispathsep(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) | 0)) break L19;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    } else if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[i8 >> 2] | 0) >>> 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1; while (0);
    i16 = HEAP32[i6 >> 2] | 0;
    i17 = HEAP32[i7 >> 2] | 0;
    _memmove(i16 | 0, i17 | 0, (_strlen(HEAP32[i7 >> 2] | 0) | 0) + 1 | 0) | 0;
    break L8;
   } while (0);
   do if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 46) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 46) {
    if (!(_vim_ispathsep(HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0) | 0)) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0) break;
    HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
    while (1) {
     if (!(_vim_ispathsep(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) | 0)) break;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    }
    if ((HEAP32[i5 >> 2] | 0) <= 0) {
     i17 = HEAP32[i6 >> 2] | 0;
     if (!(HEAP32[i10 >> 2] | 0 ? 1 : (HEAP32[i6 >> 2] | 0) != (HEAP32[i8 >> 2] | 0))) {
      i16 = HEAP32[i7 >> 2] | 0;
      _memmove(i17 | 0, i16 | 0, (_strlen(HEAP32[i7 >> 2] | 0) | 0) + 1 | 0) | 0;
      break L8;
     }
     if ((i17 | 0) == ((HEAP32[i8 >> 2] | 0) + 2 | 0)) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + -2 >> 0] | 0) == 46) {
      i17 = HEAP32[i6 >> 2] | 0;
      i16 = i17 + -2 | 0;
      i18 = i17 | 0;
      _memmove(i16 | 0, i18 | 0, (_strlen(HEAP32[i6 >> 2] | 0) | 0) + 1 | 0) | 0;
      HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -2;
     }
     HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
     break L8;
    }
    HEAP32[i11 >> 2] = 0;
    do if (!(HEAP32[i9 >> 2] | 0)) {
     HEAP8[i12 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] | 0;
     HEAP8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] = 0;
     if ((_lstat(HEAP32[i4 >> 2] | 0, i13) | 0) < 0) HEAP32[i11 >> 2] = 1;
     HEAP8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] = HEAP8[i12 >> 0] | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
     while (1) {
      if ((HEAP32[i6 >> 2] | 0) >>> 0 <= (HEAP32[i8 >> 2] | 0) >>> 0) break;
      if (!((_vim_ispathsep(HEAPU8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] | 0) | 0) != 0 ^ 1)) break;
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
     }
     if (!(HEAP32[i11 >> 2] | 0)) {
      HEAP8[i12 >> 0] = HEAP8[HEAP32[i7 >> 2] >> 0] | 0;
      HEAP8[HEAP32[i7 >> 2] >> 0] = 0;
      if ((_stat(HEAP32[i4 >> 2] | 0, i13) | 0) >= 0) HEAP32[i11 >> 2] = 1; else HEAP32[i9 >> 2] = 1;
      HEAP8[HEAP32[i7 >> 2] >> 0] = HEAP8[i12 >> 0] | 0;
      if (HEAP32[i11 >> 2] | 0) {
       if (HEAP32[i10 >> 2] | 0 ? (HEAP32[i6 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) : 0) _stat(98579, i14) | 0; else {
        HEAP8[i12 >> 0] = HEAP8[HEAP32[i6 >> 2] >> 0] | 0;
        HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
        _stat(HEAP32[i4 >> 2] | 0, i14) | 0;
        HEAP8[HEAP32[i6 >> 2] >> 0] = HEAP8[i12 >> 0] | 0;
       }
       if ((HEAP32[i14 + 72 >> 2] | 0) == (HEAP32[i13 + 72 >> 2] | 0)) if ((HEAP32[i14 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) break;
       HEAP32[i11 >> 2] = 0;
      }
     }
    } while (0);
    if (!(HEAP32[i11 >> 2] | 0)) {
     HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
     HEAP32[i5 >> 2] = 0;
     break L8;
    }
    if (HEAP32[i10 >> 2] | 0 ? (HEAP32[i6 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) : 0) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) == 46) {
     i18 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i18 + 1;
     HEAP8[i18 >> 0] = 46;
     HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
    } else i2 = 50; else i2 = 50;
    if ((i2 | 0) == 50) {
     i2 = 0;
     if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[i8 >> 2] | 0) >>> 0) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) == 46) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
     i18 = HEAP32[i6 >> 2] | 0;
     i16 = HEAP32[i7 >> 2] | 0;
     _memmove(i18 | 0, i16 | 0, (_strlen(HEAP32[i7 >> 2] | 0) | 0) + 1 | 0) | 0;
    }
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
    break L8;
   } while (0);
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   HEAP32[i6 >> 2] = _getnextcomp(HEAP32[i6 >> 2] | 0) | 0;
  } while (0);
 } while ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 0);
 STACKTOP = i3;
 return;
}
function _open_line(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i5 + 80 | 0;
 i7 = i5 + 76 | 0;
 i8 = i5 + 72 | 0;
 i9 = i5 + 68 | 0;
 i10 = i5 + 64 | 0;
 i11 = i5 + 60 | 0;
 i12 = i5 + 56 | 0;
 i13 = i5 + 52 | 0;
 i14 = i5 + 48 | 0;
 i15 = i5 + 40 | 0;
 i16 = i5 + 32 | 0;
 i17 = i5 + 28 | 0;
 i18 = i5 + 24 | 0;
 i19 = i5 + 20 | 0;
 i20 = i5 + 16 | 0;
 i21 = i5 + 12 | 0;
 i22 = i5 + 8 | 0;
 i23 = i5 + 4 | 0;
 i24 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i24 >> 2] = HEAP32[(HEAP32[26773] | 0) + 672 >> 2];
 HEAP32[i10 >> 2] = _vim_strsave(_ml_get_curline() | 0) | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i25 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i25 | 0;
 }
 if (HEAP32[10180] & 16 | 0) {
  HEAP32[i12 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
  HEAP32[i22 >> 2] = HEAPU8[HEAP32[i12 >> 2] >> 0];
  HEAP8[HEAP32[i12 >> 2] >> 0] = 0;
 }
 _u_clearline();
 HEAP32[26792] = 0;
 if ((HEAP32[i7 >> 2] | 0) == 1 & (HEAP32[26791] | 0) != 0) HEAP32[i19 >> 2] = 1;
 if (HEAP32[(HEAP32[26773] | 0) + 564 >> 2] | 0) {
  HEAP32[i17 >> 2] = _get_indent_str(HEAP32[i10 >> 2] | 0, HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0, 0) | 0;
  if (!(HEAP32[i17 >> 2] | 0)) if (!(HEAP32[i8 >> 2] & 16)) HEAP32[i17 >> 2] = HEAP32[i9 >> 2];
  HEAP32[26791] = 1;
 }
 if (HEAP32[i12 >> 2] | 0) {
  HEAP8[HEAP32[i12 >> 2] >> 0] = HEAP32[i22 >> 2];
  if (HEAP32[10180] & 64 | 0) _replace_push(0);
  if (HEAP32[(HEAP32[26773] | 0) + 564 >> 2] | 0) i4 = 17; else if (HEAP32[i8 >> 2] & 1 | 0) i4 = 17;
  L25 : do if ((i4 | 0) == 17) while (1) {
   if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) != 9) break L25;
   if (HEAP32[10180] & 64 | 0) _replace_push(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  } while (0);
  if (HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) HEAP32[26791] = 0;
  HEAP32[i13 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i10 >> 2] | 0);
 }
 if (!(HEAP32[i12 >> 2] | 0)) HEAP32[i12 >> 2] = 114072;
 i22 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i15 >> 2] = HEAP32[i22 >> 2];
 HEAP32[i15 + 4 >> 2] = HEAP32[i22 + 4 >> 2];
 if ((HEAP32[i7 >> 2] | 0) == -1) {
  i22 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + -1;
 }
 if (_ml_append(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, 0) | 0) {
  if (((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) _mark_adjust((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0, 2147483647, 1, 0);
  HEAP32[i23 >> 2] = 1;
  if (HEAP32[i17 >> 2] | 0) {
   i12 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   i12 = HEAP32[i17 >> 2] | 0;
   if (HEAP32[(HEAP32[26773] | 0) + 580 >> 2] | 0) {
    _copy_indent(i12, HEAP32[i10 >> 2] | 0) | 0;
    HEAP32[(HEAP32[26773] | 0) + 672 >> 2] = 1;
   } else _set_indent(i12, 2) | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
   HEAP32[26792] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
   L57 : do if (HEAP32[10180] & 64 | 0) {
    HEAP32[i18 >> 2] = 0;
    while (1) {
     if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break L57;
     _replace_push(0);
     HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
  }
  i18 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i18 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  if ((HEAP32[i7 >> 2] | 0) == 1) {
   if (HEAP32[i19 >> 2] | 0) i4 = 45; else if (HEAP32[10180] & 16 | 0) i4 = 45;
   do if ((i4 | 0) == 45) {
    HEAP8[(HEAP32[i10 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) >> 0] = 0;
    if (HEAP32[i19 >> 2] | 0) if (!(HEAP32[i8 >> 2] & 4)) _truncate_spaces(HEAP32[i10 >> 2] | 0);
    _ml_replace(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
    HEAP32[i10 >> 2] = 0;
    i7 = (HEAP32[26881] | 0) + 24 | 0;
    i18 = HEAP32[i7 >> 2] | 0;
    i12 = HEAP32[i7 + 4 >> 2] | 0;
    if (!(HEAP32[i23 >> 2] | 0)) {
     _changed_bytes(i18, i12);
     break;
    }
    _changed_lines(i18, i12, (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0, 1);
    HEAP32[i23 >> 2] = 0;
    if (HEAP32[i8 >> 2] & 8 | 0) {
     i12 = (HEAP32[26881] | 0) + 24 | 0;
     _mark_col_adjust(HEAP32[i12 >> 2] | 0, (HEAP32[i12 + 4 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0, 1, 0 - (HEAP32[i13 >> 2] | 0) | 0);
    }
   } while (0);
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  if (HEAP32[i23 >> 2] | 0) {
   i23 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
   _changed_lines(i23 | 0, 0, i23 | 0, 1);
  }
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i20 >> 2] = 1;
 }
 HEAP32[(HEAP32[26773] | 0) + 672 >> 2] = HEAP32[i24 >> 2];
 _vim_free(HEAP32[i10 >> 2] | 0);
 _vim_free(HEAP32[i11 >> 2] | 0);
 _vim_free(HEAP32[i21 >> 2] | 0);
 HEAP32[i6 >> 2] = HEAP32[i20 >> 2];
 i25 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i25 | 0;
}

function _ex_append(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 i12 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
 HEAP32[i8 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) {
  i1 = (HEAP32[26773] | 0) + 564 | 0;
  HEAP32[i1 >> 2] = ((HEAP32[i1 >> 2] | 0) != 0 ^ 1) & 1;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) != 42) if ((HEAP32[i7 >> 2] | 0) > 0 ? (HEAP32[(HEAP32[26773] | 0) + 564 >> 2] | 0) != 0 : 0) HEAP32[25223] = _get_indent_lnum(HEAP32[i7 >> 2] | 0) | 0;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 if ((HEAP32[i11 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) == 1) HEAP32[i7 >> 2] = 0;
 HEAP32[10180] = 16;
 if ((HEAP32[(HEAP32[26773] | 0) + 552 >> 2] | 0) == 1) HEAP32[10180] = HEAP32[10180] | 32;
 while (1) {
  HEAP32[26710] = 1;
  HEAP32[26721] = 0;
  do if (HEAP32[(HEAP32[26773] | 0) + 564 >> 2] | 0) {
   if ((HEAP32[25223] | 0) >= 0) {
    HEAP32[i8 >> 2] = HEAP32[25223];
    HEAP32[25223] = -1;
    break;
   }
   if ((HEAP32[i7 >> 2] | 0) > 0) HEAP32[i8 >> 2] = _get_indent_lnum(HEAP32[i7 >> 2] | 0) | 0;
  } while (0);
  HEAP32[26726] = 0;
  if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] | 0)) {
   if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0)) break;
   if (!(HEAPU8[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] >> 0] | 0)) break;
   HEAP32[i9 >> 2] = _vim_strchr(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0, 10) | 0;
   if (!(HEAP32[i9 >> 2] | 0)) {
    i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0;
    HEAP32[i9 >> 2] = i1 + (_strlen(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0);
   }
   i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0;
   HEAP32[i5 >> 2] = _vim_strnsave(i1 | 0, (HEAP32[i9 >> 2] | 0) - i1 | 0) | 0;
   if (HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = HEAP32[i9 >> 2];
  } else {
   HEAP32[i12 >> 2] = HEAP32[10180];
   HEAP32[10180] = 8;
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i5 >> 2] = FUNCTION_TABLE_iiii[HEAP32[i1 + 92 >> 2] & 15](0, HEAP32[i1 + 96 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[10180] = HEAP32[i12 >> 2];
  }
  HEAP32[10176] = (HEAP32[10173] | 0) - 1;
  if (!(HEAP32[i5 >> 2] | 0)) break;
  if (HEAP32[26726] | 0) HEAP32[25223] = HEAP32[i8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i9 >> 2] = HEAP32[i5 >> 2];
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[i10 >> 2] | 0)) break;
   if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 32) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1; else {
    if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) != 9) break;
    i1 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = (i1 | 0) + (8 - ((i1 | 0) % 8 | 0));
   }
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 46) if (!(HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0)) {
   i2 = 41;
   break;
  }
  if (!(HEAP32[i6 >> 2] | 0)) if (!(_u_save(HEAP32[i7 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 + (HEAP32[i11 >> 2] | 0 ? 1 : 0) | 0) | 0)) {
   i2 = 41;
   break;
  }
  if (!(HEAPU8[HEAP32[i9 >> 2] >> 0] | 0)) HEAP8[HEAP32[i5 >> 2] >> 0] = 0;
  HEAP32[i6 >> 2] = 1;
  _ml_append(HEAP32[i7 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0, 0) | 0;
  _appended_lines_mark((HEAP32[i7 >> 2] | 0) + (HEAP32[i11 >> 2] | 0 ? 1 : 0) | 0, 1);
  _vim_free(HEAP32[i5 >> 2] | 0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  if (HEAP32[i11 >> 2] | 0) {
   _ml_delete(2, 0) | 0;
   HEAP32[i11 >> 2] = 0;
  }
 }
 if ((i2 | 0) == 41) _vim_free(HEAP32[i5 >> 2] | 0);
 HEAP32[10180] = 1;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) {
  i5 = (HEAP32[26773] | 0) + 564 | 0;
  HEAP32[i5 >> 2] = ((HEAP32[i5 >> 2] | 0) != 0 ^ 1) & 1;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) i13 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) + 1 | 0; else i13 = HEAP32[HEAP32[26773] >> 2] | 0;
 HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = i13;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) {
  i13 = (HEAP32[26773] | 0) + 476 | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) {
  i14 = HEAP32[i7 >> 2] | 0;
  i15 = HEAP32[26773] | 0;
  i16 = i15 + 492 | 0;
  HEAP32[i16 >> 2] = i14;
  i17 = HEAP32[26773] | 0;
  i18 = i17 + 492 | 0;
  i19 = i18 + 4 | 0;
  HEAP32[i19 >> 2] = 0;
  i20 = HEAP32[26773] | 0;
  i21 = i20 + 476 | 0;
  i22 = i21 + 4 | 0;
  HEAP32[i22 >> 2] = 0;
  i23 = HEAP32[i7 >> 2] | 0;
  i24 = HEAP32[26881] | 0;
  i25 = i24 + 24 | 0;
  HEAP32[i25 >> 2] = i23;
  _check_cursor_lnum();
  _beginline(6);
  HEAP32[26721] = 0;
  HEAP32[26799] = 1;
  STACKTOP = i3;
  return;
 } else {
  i4 = HEAP32[26773] | 0;
  i14 = HEAP32[i4 + 476 >> 2] | 0;
  i15 = i4 | 0;
  i16 = i15 + 492 | 0;
  HEAP32[i16 >> 2] = i14;
  i17 = HEAP32[26773] | 0;
  i18 = i17 + 492 | 0;
  i19 = i18 + 4 | 0;
  HEAP32[i19 >> 2] = 0;
  i20 = HEAP32[26773] | 0;
  i21 = i20 + 476 | 0;
  i22 = i21 + 4 | 0;
  HEAP32[i22 >> 2] = 0;
  i23 = HEAP32[i7 >> 2] | 0;
  i24 = HEAP32[26881] | 0;
  i25 = i24 + 24 | 0;
  HEAP32[i25 >> 2] = i23;
  _check_cursor_lnum();
  _beginline(6);
  HEAP32[26721] = 0;
  HEAP32[26799] = 1;
  STACKTOP = i3;
  return;
 }
}

function _ins_tab() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i1 + 56 | 0;
 i3 = i1 + 52 | 0;
 i4 = i1 + 48 | 0;
 i5 = i1 + 44 | 0;
 i6 = i1 + 40 | 0;
 i7 = i1 + 32 | 0;
 i8 = i1 + 24 | 0;
 i9 = i1 + 20 | 0;
 i10 = i1 + 16 | 0;
 i11 = i1 + 12 | 0;
 i12 = i1 + 8 | 0;
 i13 = i1 + 4 | 0;
 i14 = i1;
 if ((HEAP32[25199] | 0) == 2147483647) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27122] | 0)) HEAP32[25199] = _get_nolist_virtcol() | 0;
 if (_echeck_abbr(265) | 0) {
  HEAP32[i2 >> 2] = 0;
  i15 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i15 | 0;
 }
 HEAP32[i3 >> 2] = _inindent(0) | 0;
 do if (!(HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0)) {
  if ((HEAP32[26992] | 0) != 0 & (HEAP32[i3 >> 2] | 0) != 0) {
   i16 = HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0;
   if ((i16 | 0) != (_get_sw_value(HEAP32[26773] | 0) | 0)) break;
  }
  if (!(_get_sts_value() | 0)) {
   HEAP32[i2 >> 2] = 1;
   i15 = HEAP32[i2 >> 2] | 0;
   STACKTOP = i1;
   return i15 | 0;
  }
 } while (0);
 if (!(_stop_arrow() | 0)) {
  HEAP32[i2 >> 2] = 1;
  i15 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i15 | 0;
 }
 HEAP32[26791] = 0;
 _AppendToRedobuff(42701);
 i16 = HEAP32[26773] | 0;
 do if ((HEAP32[26992] | 0) != 0 & (HEAP32[i3 >> 2] | 0) != 0) HEAP32[i5 >> 2] = _get_sw_value(i16) | 0; else if (HEAP32[i16 + 688 >> 2] | 0) {
  HEAP32[i5 >> 2] = _get_sts_value() | 0;
  break;
 } else {
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[26773] | 0) + 700 >> 2];
  break;
 } while (0);
 i16 = _get_nolist_virtcol() | 0;
 i17 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = (i17 | 0) - ((i16 | 0) % (i17 | 0) | 0);
 _ins_char(32);
 while (1) {
  i17 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  HEAP32[i5 >> 2] = i17;
  if ((i17 | 0) <= 0) break;
  _ins_str(97452);
  if (HEAP32[10180] & 64 | 0) _replace_push(0);
 }
 do if (!(HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0)) {
  if (!(_get_sts_value() | 0)) if (!((HEAP32[26992] | 0) != 0 & (HEAP32[i3 >> 2] | 0) != 0)) break;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i12 >> 2] = HEAP32[(HEAP32[26881] | 0) + 200 >> 2];
  HEAP32[i6 >> 2] = _ml_get_cursor() | 0;
  HEAP32[i8 >> 2] = (HEAP32[26881] | 0) + 24;
  if (!(_vim_strchr(HEAP32[26904] | 0, 76) | 0)) HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = 0;
  i17 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i7 >> 2] = HEAP32[i17 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
  while (1) {
   if ((HEAP32[i7 + 4 >> 2] | 0) <= 0) break;
   if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] | 0) != 32) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] | 0) != 9) break;
   i17 = i7 + 4 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  }
  if (HEAP32[10180] & 64 | 0) if ((HEAP32[i7 >> 2] | 0) == (HEAP32[27122] | 0)) if ((HEAP32[i7 + 4 >> 2] | 0) < (HEAP32[27123] | 0)) {
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + ((HEAP32[27123] | 0) - (HEAP32[i7 + 4 >> 2] | 0));
   HEAP32[i7 + 4 >> 2] = HEAP32[27123];
  }
  _getvcol(HEAP32[26881] | 0, i7, i10, 0, 0);
  _getvcol(HEAP32[26881] | 0, HEAP32[i8 >> 2] | 0, i9, 0, 0);
  while (1) {
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 9) break;
   HEAP32[i4 >> 2] = _lbr_chartabsize(0, 42701, HEAP32[i10 >> 2] | 0) | 0;
   if (((HEAP32[i10 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0) > (HEAP32[i9 >> 2] | 0)) break;
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 9) {
    HEAP8[HEAP32[i6 >> 2] >> 0] = 9;
    if ((HEAP32[i11 >> 2] | 0) < 0) {
     HEAP32[i11 >> 2] = HEAP32[i7 + 4 >> 2];
     if ((HEAP32[i7 >> 2] | 0) == (HEAP32[27122] | 0)) if ((HEAP32[i7 + 4 >> 2] | 0) < (HEAP32[27123] | 0)) HEAP32[27123] = HEAP32[i7 + 4 >> 2];
    }
   }
   i17 = i7 + 4 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i4 >> 2] | 0);
  }
  if ((HEAP32[i11 >> 2] | 0) >= 0) {
   HEAP32[i13 >> 2] = 0;
   HEAP32[i14 >> 2] = HEAP32[i6 >> 2];
   while (1) {
    if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
    if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 32) break;
    i17 = _lbr_chartabsize(HEAP32[i14 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i17;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
   if ((HEAP32[i10 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
   }
   i17 = i7 + 4 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
   HEAP32[i4 >> 2] = (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i7 + 4 >> 2] | 0);
   L78 : do if ((HEAP32[i4 >> 2] | 0) > 0) {
    i17 = HEAP32[i6 >> 2] | 0;
    i16 = i17 | 0;
    i18 = i17 + (HEAP32[i4 >> 2] | 0) | 0;
    _memmove(i16 | 0, i18 | 0, (_strlen((HEAP32[i6 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0) | 0) + 1 | 0) | 0;
    if (HEAP32[10180] & 64 | 0) {
     HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
     while (1) {
      i18 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
      HEAP32[i5 >> 2] = i18;
      if ((i18 | 0) < 0) break L78;
      _replace_join(HEAP32[i13 >> 2] | 0);
     }
    }
   } while (0);
   i18 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) - (HEAP32[i4 >> 2] | 0);
  }
  HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = HEAP32[i12 >> 2];
 } while (0);
 HEAP32[i2 >> 2] = 0;
 i15 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i15 | 0;
}

function _close_buffer(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i6 + 56 | 0;
 i8 = i6 + 52 | 0;
 i9 = i6 + 48 | 0;
 i10 = i6 + 44 | 0;
 i11 = i6 + 40 | 0;
 i12 = i6 + 36 | 0;
 i13 = i6 + 24 | 0;
 i14 = i6 + 20 | 0;
 i15 = i6 + 16 | 0;
 i16 = i6 + 12 | 0;
 i17 = i6 + 8 | 0;
 i18 = i6 + 4 | 0;
 i19 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 if (HEAP32[26881] | 0) i20 = (HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) == (HEAP32[i8 >> 2] | 0); else i20 = 0;
 HEAP32[i14 >> 2] = i20 & 1;
 HEAP32[i15 >> 2] = HEAP32[26881];
 HEAP32[i16 >> 2] = HEAP32[26886];
 HEAP32[i17 >> 2] = (HEAP32[i9 >> 2] | 0) != 0 & 1;
 i20 = HEAP32[i9 >> 2] | 0;
 HEAP32[i18 >> 2] = ((i20 | 0) == 3 ? 1 : (i20 | 0) == 4) & 1;
 HEAP32[i19 >> 2] = (HEAP32[i9 >> 2] | 0) == 4 & 1;
 do if ((HEAPU8[HEAP32[(HEAP32[i8 >> 2] | 0) + 588 >> 2] >> 0] | 0) == 100) {
  HEAP32[i18 >> 2] = 1;
  HEAP32[i17 >> 2] = 1;
 } else {
  if ((HEAPU8[HEAP32[(HEAP32[i8 >> 2] | 0) + 588 >> 2] >> 0] | 0) == 119) {
   HEAP32[i18 >> 2] = 1;
   HEAP32[i17 >> 2] = 1;
   HEAP32[i19 >> 2] = 1;
   break;
  }
  if ((HEAPU8[HEAP32[(HEAP32[i8 >> 2] | 0) + 588 >> 2] >> 0] | 0) == 117) HEAP32[i17 >> 2] = 1;
 } while (0);
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 64 >> 2] | 0) > 0) if ((HEAP32[i18 >> 2] | 0) != 0 | (HEAP32[i19 >> 2] | 0) != 0) {
  _emsg(41734) | 0;
  STACKTOP = i6;
  return;
 }
 if (HEAP32[i7 >> 2] | 0) if (_win_valid_any_tab(HEAP32[i7 >> 2] | 0) | 0) {
  if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 56 >> 2] | 0) == 1) _set_last_cursor(HEAP32[i7 >> 2] | 0);
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) == 1) i21 = 0; else i21 = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0;
  i9 = HEAP32[i7 >> 2] | 0;
  _buflist_setfpos(HEAP32[i8 >> 2] | 0, i9 | 0, i21, HEAP32[i9 + 24 + 4 >> 2] | 0, 1);
 }
 _set_bufref(i13, HEAP32[i8 >> 2] | 0);
 L27 : do if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 56 >> 2] | 0) == 1) {
  i9 = (HEAP32[i8 >> 2] | 0) + 64 | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  if (_apply_autocmds(14, HEAP32[(HEAP32[i8 >> 2] | 0) + 76 >> 2] | 0, HEAP32[(HEAP32[i8 >> 2] | 0) + 76 >> 2] | 0, 0, HEAP32[i8 >> 2] | 0) | 0) {
   if (_bufref_valid(i13) | 0) i5 = 23;
  } else i5 = 23;
  do if ((i5 | 0) == 23) {
   i9 = (HEAP32[i8 >> 2] | 0) + 64 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
   if (HEAP32[i10 >> 2] | 0) if (_one_window() | 0) break;
   if (HEAP32[i17 >> 2] | 0) break L27;
   i9 = (HEAP32[i8 >> 2] | 0) + 64 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   if (_apply_autocmds(5, HEAP32[(HEAP32[i8 >> 2] | 0) + 76 >> 2] | 0, HEAP32[(HEAP32[i8 >> 2] | 0) + 76 >> 2] | 0, 0, HEAP32[i8 >> 2] | 0) | 0) if (!(_bufref_valid(i13) | 0)) break;
   i9 = (HEAP32[i8 >> 2] | 0) + 64 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
   if (!(HEAP32[i10 >> 2] | 0)) break L27;
   if (!(_one_window() | 0)) break L27;
  } while (0);
  _emsg(41691) | 0;
  STACKTOP = i6;
  return;
 } while (0);
 if (HEAP32[i14 >> 2] | 0) if ((HEAP32[26881] | 0) != (HEAP32[i15 >> 2] | 0)) if (_win_valid_any_tab(HEAP32[i15 >> 2] | 0) | 0) {
  _block_autocmds();
  _goto_tabpage_win(HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0);
  _unblock_autocmds();
 }
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 56 >> 2];
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 56 >> 2] | 0) > 0) {
  i15 = (HEAP32[i8 >> 2] | 0) + 56 | 0;
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
 }
 if (!(HEAP32[i17 >> 2] | 0 ? (HEAP32[(HEAP32[i8 >> 2] | 0) + 56 >> 2] | 0) <= 0 : 0)) {
  STACKTOP = i6;
  return;
 }
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 68 >> 2] | 0)) HEAP32[i18 >> 2] = 1;
 if (HEAP32[26788] | 0 ? (HEAP32[i8 >> 2] | 0) == (HEAP32[26773] | 0) : 0) _end_visual_mode();
 HEAP32[i11 >> 2] = (HEAP32[i8 >> 2] | 0) == (HEAP32[26773] | 0) & 1;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 56 >> 2] = HEAP32[i12 >> 2];
 _buf_freeall(HEAP32[i8 >> 2] | 0, (HEAP32[i18 >> 2] | 0 ? 1 : 0) + (HEAP32[i19 >> 2] | 0 ? 2 : 0) | 0);
 if (!(_bufref_valid(i13) | 0)) {
  STACKTOP = i6;
  return;
 }
 if (!(HEAP32[i11 >> 2] | 0 ? 1 : (HEAP32[i8 >> 2] | 0) != (HEAP32[26773] | 0))) {
  STACKTOP = i6;
  return;
 }
 if (_win_valid_any_tab(HEAP32[i7 >> 2] | 0) | 0) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = 0;
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 56 >> 2] | 0) > 0) {
  i7 = (HEAP32[i8 >> 2] | 0) + 56 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 }
 if (!(HEAP32[i19 >> 2] | 0)) {
  if (HEAP32[i18 >> 2] | 0) {
   _free_buffer_stuff(HEAP32[i8 >> 2] | 0, 1);
   HEAP32[(HEAP32[i8 >> 2] | 0) + 60 >> 2] = 6;
   HEAP32[(HEAP32[i8 >> 2] | 0) + 560 >> 2] = 0;
  }
  _buf_clear_file(HEAP32[i8 >> 2] | 0);
  if (!(HEAP32[i18 >> 2] | 0)) {
   STACKTOP = i6;
   return;
  }
  HEAP32[(HEAP32[i8 >> 2] | 0) + 596 >> 2] = 0;
  STACKTOP = i6;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i8 >> 2] | 0) + 68 >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i8 >> 2] | 0) + 72 >> 2] | 0);
 i18 = HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 52 >> 2] | 0)) HEAP32[26771] = i18; else HEAP32[(HEAP32[(HEAP32[i8 >> 2] | 0) + 52 >> 2] | 0) + 48 >> 2] = i18;
 i18 = HEAP32[(HEAP32[i8 >> 2] | 0) + 52 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] | 0)) HEAP32[26772] = i18; else HEAP32[(HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] | 0) + 52 >> 2] = i18;
 _free_buffer(HEAP32[i8 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _addstar(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 20 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 8 | 0;
 i13 = i5 + 4 | 0;
 i14 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (!((HEAP32[i8 >> 2] | 0) != 2 & (HEAP32[i8 >> 2] | 0) != 38 & (HEAP32[i8 >> 2] | 0) != 32 & (HEAP32[i8 >> 2] | 0) != 3)) {
  HEAP32[i9 >> 2] = _alloc((HEAP32[i7 >> 2] | 0) + 4 | 0) | 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   i15 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i5;
   return i15 | 0;
  }
  _vim_strncpy(HEAP32[i9 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  HEAP32[i13 >> 2] = _gettail(HEAP32[i9 >> 2] | 0) | 0;
  if ((HEAP32[i7 >> 2] | 0) > 0) i16 = (HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] | 0 | 0) == 42; else i16 = 0;
  HEAP32[i14 >> 2] = i16 & 1;
  HEAP32[i10 >> 2] = (HEAP32[i7 >> 2] | 0) - 2;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) < 0) break;
   if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) != 92) break;
   HEAP32[i14 >> 2] = ((HEAP32[i14 >> 2] | 0) != 0 ^ 1) & 1;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
  }
  if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 126) if (HEAP32[i14 >> 2] | 0) i4 = 48; else i4 = 45; else if (HEAP32[i14 >> 2] | 0 ? 1 : (HEAP32[i13 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) i4 = 48; else i4 = 45;
  if ((i4 | 0) == 45) if (!(_vim_strchr(HEAP32[i13 >> 2] | 0, 36) | 0)) if (!(_vim_strchr(HEAP32[i9 >> 2] | 0, 96) | 0)) {
   i13 = HEAP32[i9 >> 2] | 0;
   i14 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i14 + 1;
   HEAP8[i13 + i14 >> 0] = 42;
  } else i4 = 48; else i4 = 48;
  if ((i4 | 0) == 48) if ((HEAP32[i7 >> 2] | 0) > 0) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] | 0 | 0) == 36) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  HEAP8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] = 0;
  i15 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 do if (!((HEAP32[i8 >> 2] | 0) == 8 | (HEAP32[i8 >> 2] | 0) == 28 | (HEAP32[i8 >> 2] | 0) == 29 | (HEAP32[i8 >> 2] | 0) == 39 | (HEAP32[i8 >> 2] | 0) == 37 | (HEAP32[i8 >> 2] | 0) == 45)) {
  if ((HEAP32[i8 >> 2] | 0) == 17 | (HEAP32[i8 >> 2] | 0) == 6) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 47) break;
  HEAP32[i12 >> 2] = (HEAP32[i7 >> 2] | 0) + 2;
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
   if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) == 42) i4 = 10; else if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) == 126) i4 = 10;
   if ((i4 | 0) == 10) {
    i4 = 0;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   }
   if ((HEAP32[i8 >> 2] | 0) == 9) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) == 46) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   if ((HEAP32[i8 >> 2] | 0) == 30 | (HEAP32[i8 >> 2] | 0) == 31) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) == 92) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  HEAP32[i9 >> 2] = _alloc(HEAP32[i12 >> 2] | 0) | 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   i15 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i5;
   return i15 | 0;
  }
  HEAP8[HEAP32[i9 >> 2] >> 0] = 94;
  HEAP32[i11 >> 2] = 1;
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
   if ((HEAP32[i8 >> 2] | 0) != 30 & (HEAP32[i8 >> 2] | 0) != 31) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) == 92) {
    i14 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
    HEAP32[i10 >> 2] = i14;
    if ((i14 | 0) == (HEAP32[i7 >> 2] | 0)) break;
   }
   switch (HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) {
   case 42:
    {
     i14 = HEAP32[i9 >> 2] | 0;
     i13 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i13 + 1;
     HEAP8[i14 + i13 >> 0] = 46;
     i4 = 32;
     break;
    }
   case 126:
    {
     i13 = HEAP32[i9 >> 2] | 0;
     i14 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i14 + 1;
     HEAP8[i13 + i14 >> 0] = 92;
     i4 = 32;
     break;
    }
   case 63:
    {
     HEAP8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] = 46;
     break;
    }
   case 46:
    {
     if ((HEAP32[i8 >> 2] | 0) == 9) {
      i14 = HEAP32[i9 >> 2] | 0;
      i13 = HEAP32[i11 >> 2] | 0;
      HEAP32[i11 >> 2] = i13 + 1;
      HEAP8[i14 + i13 >> 0] = 92;
      i4 = 32;
     } else i4 = 32;
     break;
    }
   case 92:
    {
     if ((HEAP32[i8 >> 2] | 0) == 30 | (HEAP32[i8 >> 2] | 0) == 31) {
      i13 = HEAP32[i9 >> 2] | 0;
      i14 = HEAP32[i11 >> 2] | 0;
      HEAP32[i11 >> 2] = i14 + 1;
      HEAP8[i13 + i14 >> 0] = 92;
      i4 = 32;
     } else i4 = 32;
     break;
    }
   default:
    i4 = 32;
   }
   if ((i4 | 0) == 32) {
    i4 = 0;
    HEAP8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0;
   }
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  HEAP8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] = 0;
  i15 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } while (0);
 HEAP32[i9 >> 2] = _vim_strnsave(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 i15 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i5;
 return i15 | 0;
}

function _vim_str2nr(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = i9 + 48 | 0;
 i11 = i9 + 44 | 0;
 i12 = i9 + 40 | 0;
 i13 = i9 + 36 | 0;
 i14 = i9 + 32 | 0;
 i15 = i9 + 28 | 0;
 i16 = i9 + 24 | 0;
 i17 = i9 + 20 | 0;
 i18 = i9 + 16 | 0;
 i19 = i9 + 12 | 0;
 i20 = i9 + 8 | 0;
 i21 = i9 + 4 | 0;
 i22 = i9;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i16 >> 2] = i7;
 HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 45) {
  HEAP32[i19 >> 2] = 1;
  HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
 }
 L4 : do if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 48) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0 | 0) != 56) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0 | 0) != 57) if ((HEAP32[i16 >> 2] | 0) == 0 | (HEAP32[i16 >> 2] | 0) > 1) {
  HEAP32[i18 >> 2] = HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0];
  if (HEAP32[i13 >> 2] & 4 | 0) if ((HEAP32[i18 >> 2] | 0) == 88 | (HEAP32[i18 >> 2] | 0) == 120) if (_vim_isxdigit(HEAPU8[(HEAP32[i17 >> 2] | 0) + 2 >> 0] | 0) | 0) if ((HEAP32[i16 >> 2] | 0) == 0 | (HEAP32[i16 >> 2] | 0) > 2) {
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 2;
   break;
  }
  if (HEAP32[i13 >> 2] & 1 | 0) if ((HEAP32[i18 >> 2] | 0) == 66 | (HEAP32[i18 >> 2] | 0) == 98) if (_vim_isbdigit(HEAPU8[(HEAP32[i17 >> 2] | 0) + 2 >> 0] | 0) | 0) if ((HEAP32[i16 >> 2] | 0) == 0 | (HEAP32[i16 >> 2] | 0) > 2) {
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 2;
   break;
  }
  HEAP32[i18 >> 2] = 0;
  if (HEAP32[i13 >> 2] & 2 | 0) {
   HEAP32[i21 >> 2] = 1;
   while (1) {
    if ((HEAP32[i21 >> 2] | 0) == (HEAP32[i16 >> 2] | 0)) break L4;
    if (((HEAPU8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) >> 0] | 0) - 48 | 0) >>> 0 >= 10) break L4;
    if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i21 >> 2] | 0) >> 0] | 0 | 0) > 55) break;
    HEAP32[i18 >> 2] = 48;
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 1;
   }
   HEAP32[i18 >> 2] = 0;
  }
 } while (0);
 HEAP32[i21 >> 2] = 1;
 i7 = HEAP32[i18 >> 2] | 0;
 L29 : do if ((HEAP32[i18 >> 2] | 0) == 66 | (HEAP32[i18 >> 2] | 0) == 98 | (HEAP32[i13 >> 2] | 0) == 9) {
  if (i7 | 0) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 2;
  while (1) {
   if (48 > (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0)) break L29;
   if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) > 49) break L29;
   if ((HEAP32[i20 >> 2] | 0) >>> 0 <= 2147483647) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] << 1) + ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) - 48); else HEAP32[i20 >> 2] = -1;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   i6 = HEAP32[i21 >> 2] | 0;
   HEAP32[i21 >> 2] = i6 + 1;
   if ((i6 | 0) == (HEAP32[i16 >> 2] | 0)) break L29;
  }
 } else {
  if ((i7 | 0) == 48 | (HEAP32[i13 >> 2] | 0) == 10) while (1) {
   if (48 > (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0)) break L29;
   if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) > 55) break L29;
   if ((HEAP32[i20 >> 2] | 0) >>> 0 <= 536870911) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] << 3) + ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) - 48); else HEAP32[i20 >> 2] = -1;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   i6 = HEAP32[i21 >> 2] | 0;
   HEAP32[i21 >> 2] = i6 + 1;
   if ((i6 | 0) == (HEAP32[i16 >> 2] | 0)) break L29;
  }
  if (!((HEAP32[i18 >> 2] | 0) != 0 | (HEAP32[i13 >> 2] | 0) == 12)) while (1) {
   if (((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break L29;
   HEAP32[i22 >> 2] = (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) - 48;
   if ((HEAP32[i20 >> 2] | 0) >>> 0 < 429496729) i8 = 58; else if ((HEAP32[i20 >> 2] | 0) == 429496729 & (HEAP32[i22 >> 2] | 0) >>> 0 <= 5) i8 = 58; else HEAP32[i20 >> 2] = -1;
   if ((i8 | 0) == 58) {
    i8 = 0;
    HEAP32[i20 >> 2] = ((HEAP32[i20 >> 2] | 0) * 10 | 0) + (HEAP32[i22 >> 2] | 0);
   }
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   i6 = HEAP32[i21 >> 2] | 0;
   HEAP32[i21 >> 2] = i6 + 1;
   if ((i6 | 0) == (HEAP32[i16 >> 2] | 0)) break L29;
  }
  if (HEAP32[i18 >> 2] | 0) HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 2;
  while (1) {
   if (!(_vim_isxdigit(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) | 0)) break L29;
   if ((HEAP32[i20 >> 2] | 0) >>> 0 <= 268435455) {
    i6 = HEAP32[i20 >> 2] << 4;
    HEAP32[i20 >> 2] = i6 + (_hex2nr(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) | 0);
   } else HEAP32[i20 >> 2] = -1;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   i6 = HEAP32[i21 >> 2] | 0;
   HEAP32[i21 >> 2] = i6 + 1;
   if ((i6 | 0) == (HEAP32[i16 >> 2] | 0)) break L29;
  }
 } while (0);
 if (HEAP32[i11 >> 2] | 0) HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i18 >> 2];
 if (HEAP32[i12 >> 2] | 0) HEAP32[HEAP32[i12 >> 2] >> 2] = (HEAP32[i17 >> 2] | 0) - (HEAP32[i10 >> 2] | 0);
 do if (HEAP32[i14 >> 2] | 0) {
  i10 = (HEAP32[i20 >> 2] | 0) >>> 0 > 2147483647;
  if (HEAP32[i19 >> 2] | 0) if (i10) {
   HEAP32[HEAP32[i14 >> 2] >> 2] = -2147483648;
   break;
  } else {
   HEAP32[HEAP32[i14 >> 2] >> 2] = 0 - (HEAP32[i20 >> 2] | 0);
   break;
  } else {
   if (i10) HEAP32[i20 >> 2] = 2147483647;
   HEAP32[HEAP32[i14 >> 2] >> 2] = HEAP32[i20 >> 2];
   break;
  }
 } while (0);
 if (!(HEAP32[i15 >> 2] | 0)) {
  STACKTOP = i9;
  return;
 }
 HEAP32[HEAP32[i15 >> 2] >> 2] = HEAP32[i20 >> 2];
 STACKTOP = i9;
 return;
}

function _vim_findfile_init(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i10 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i12 = i11 + 56 | 0;
 i13 = i11 + 52 | 0;
 i14 = i11 + 48 | 0;
 i15 = i11 + 40 | 0;
 i16 = i11 + 36 | 0;
 i17 = i11 + 32 | 0;
 i18 = i11 + 28 | 0;
 i19 = i11 + 24 | 0;
 i20 = i11 + 20 | 0;
 i21 = i11 + 16 | 0;
 i22 = i11 + 12 | 0;
 i23 = i11 + 8 | 0;
 i24 = i11 + 4 | 0;
 i25 = i11;
 HEAP32[i13 >> 2] = i1;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i11 + 44 >> 2] = i3;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i18 >> 2] = i7;
 HEAP32[i19 >> 2] = i8;
 HEAP32[i20 >> 2] = i9;
 if (HEAP32[i18 >> 2] | 0) {
  HEAP32[i22 >> 2] = HEAP32[i18 >> 2];
  i10 = 5;
 } else {
  HEAP32[i22 >> 2] = _alloc(40) | 0;
  if (HEAP32[i22 >> 2] | 0) {
   i18 = HEAP32[i22 >> 2] | 0;
   i9 = i18 + 40 | 0;
   do {
    HEAP32[i18 >> 2] = 0;
    i18 = i18 + 4 | 0;
   } while ((i18 | 0) < (i9 | 0));
   i10 = 5;
  }
 }
 L5 : do if ((i10 | 0) == 5) {
  HEAP32[(HEAP32[i22 >> 2] | 0) + 32 >> 2] = HEAP32[i17 >> 2];
  HEAP32[(HEAP32[i22 >> 2] | 0) + 36 >> 2] = HEAP32[i19 >> 2];
  _ff_clear(HEAP32[i22 >> 2] | 0);
  if ((HEAP32[i16 >> 2] | 0) == 1) _vim_findfile_free_visited(HEAP32[i22 >> 2] | 0); else {
   i18 = _ff_get_visited_list(HEAP32[i14 >> 2] | 0, (HEAP32[i22 >> 2] | 0) + 12 | 0) | 0;
   HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] = i18;
   if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] | 0)) break;
   i18 = _ff_get_visited_list(HEAP32[i14 >> 2] | 0, (HEAP32[i22 >> 2] | 0) + 16 | 0) | 0;
   HEAP32[(HEAP32[i22 >> 2] | 0) + 8 >> 2] = i18;
   if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 8 >> 2] | 0)) break;
  }
  if (!(HEAP32[26058] | 0)) {
   HEAP32[26058] = _alloc(4096) | 0;
   if (!(HEAP32[26058] | 0)) break;
  }
  do if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) == 46) {
   if (!(_vim_ispathsep(HEAPU8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] | 0) | 0)) if (HEAPU8[(HEAP32[i13 >> 2] | 0) + 1 >> 0] | 0 | 0) {
    i10 = 24;
    break;
   }
   if (HEAP32[i19 >> 2] | 0) {
    i18 = (_vim_strchr(HEAP32[26904] | 0, 100) | 0) == 0;
    if (!(i18 & (HEAP32[i20 >> 2] | 0) != 0)) {
     i10 = 24;
     break;
    }
   } else if (!(HEAP32[i20 >> 2] | 0)) {
    i10 = 24;
    break;
   }
   i18 = _gettail(HEAP32[i20 >> 2] | 0) | 0;
   HEAP32[i23 >> 2] = i18 - (HEAP32[i20 >> 2] | 0);
   if (_vim_isAbsName(HEAP32[i20 >> 2] | 0) | 0) i10 = 20; else if (((HEAP32[i23 >> 2] | 0) + 1 | 0) < 4096) {
    _vim_strncpy(HEAP32[26058] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i23 >> 2] | 0);
    i18 = _FullName_save(HEAP32[26058] | 0, 0) | 0;
    HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] = i18;
   } else i10 = 20;
   if ((i10 | 0) == 20) {
    i18 = _vim_strnsave(HEAP32[i20 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0;
    HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] = i18;
   }
   if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] | 0)) break L5;
   i18 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
   HEAP32[i13 >> 2] = i18;
   if (HEAPU8[i18 >> 0] | 0 | 0) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  } else i10 = 24; while (0);
  do if ((i10 | 0) == 24) {
   if (HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) if (_vim_isAbsName(HEAP32[i13 >> 2] | 0) | 0) break;
   if (!(_mch_dirname(HEAP32[26058] | 0, 4096) | 0)) break L5;
   i18 = _vim_strsave(HEAP32[26058] | 0) | 0;
   HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] = i18;
   if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] | 0)) break L5;
  } while (0);
  i18 = _vim_strsave(HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] = i18;
  if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] | 0)) {
   i18 = _vim_strsave(HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] = i18;
   if (!(HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] | 0)) break;
   HEAP8[HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] >> 0] = 0;
  }
  i18 = _strlen(HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] | 0) | 0;
  if ((i18 + (_strlen(HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] | 0) | 0) + 3 | 0) >>> 0 >= 4096) {
   _emsg(61629) | 0;
   break;
  }
  _strcpy(HEAP32[26058] | 0, HEAP32[(HEAP32[i22 >> 2] | 0) + 24 >> 2] | 0) | 0;
  _add_pathsep(HEAP32[26058] | 0);
  HEAP32[i24 >> 2] = _strlen(HEAP32[26058] | 0) | 0;
  i18 = HEAP32[i24 >> 2] | 0;
  HEAP32[i25 >> 2] = _alloc(i18 + (_strlen(HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] | 0) | 0) + 1 | 0) | 0;
  _strcpy(HEAP32[i25 >> 2] | 0, HEAP32[26058] | 0) | 0;
  _strcpy((HEAP32[i25 >> 2] | 0) + (HEAP32[i24 >> 2] | 0) | 0, HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] | 0) | 0;
  if (_mch_isdir(HEAP32[i25 >> 2] | 0) | 0) {
   _strcat(HEAP32[26058] | 0, HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] | 0) | 0;
   _add_pathsep(HEAP32[26058] | 0);
  }
  _vim_free(HEAP32[i25 >> 2] | 0);
  HEAP32[i21 >> 2] = _ff_create_stack_element(HEAP32[26058] | 0, HEAP32[i15 >> 2] | 0, 0) | 0;
  if (HEAP32[i21 >> 2] | 0) {
   _ff_push(HEAP32[i22 >> 2] | 0, HEAP32[i21 >> 2] | 0);
   i18 = _vim_strsave(HEAP32[i14 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i22 >> 2] | 0) + 20 >> 2] = i18;
   if (HEAP32[(HEAP32[i22 >> 2] | 0) + 20 >> 2] | 0) {
    HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
    i26 = HEAP32[i12 >> 2] | 0;
    STACKTOP = i11;
    return i26 | 0;
   }
  }
 } while (0);
 _vim_findfile_cleanup(HEAP32[i22 >> 2] | 0);
 HEAP32[i12 >> 2] = 0;
 i26 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i11;
 return i26 | 0;
}

function _getmark_buf_fnum(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i7 = i6 + 140 | 0;
 i8 = i6 + 136 | 0;
 i9 = i6 + 132 | 0;
 i10 = i6 + 128 | 0;
 i11 = i6 + 124 | 0;
 i12 = i6 + 120 | 0;
 i13 = i6 + 116 | 0;
 i14 = i6 + 112 | 0;
 i15 = i6 + 104 | 0;
 i16 = i6 + 20 | 0;
 i17 = i6 + 16 | 0;
 i18 = i6 + 8 | 0;
 i19 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = 0;
 if ((HEAP32[i9 >> 2] | 0) < 0) {
  HEAP32[i7 >> 2] = HEAP32[i12 >> 2];
  i20 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i20 | 0;
 }
 L5 : do if ((HEAP32[i9 >> 2] | 0) <= 126) {
  if ((HEAP32[i9 >> 2] | 0) == 39 | (HEAP32[i9 >> 2] | 0) == 96) {
   i4 = (HEAP32[26881] | 0) + 300 | 0;
   HEAP32[26044] = HEAP32[i4 >> 2];
   HEAP32[26045] = HEAP32[i4 + 4 >> 2];
   HEAP32[i12 >> 2] = 104176;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 34) {
   HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) + 420;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 94) {
   HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) + 428;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 46) {
   HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) + 436;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 91) {
   HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) + 476;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 93) {
   HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) + 492;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 123 | (HEAP32[i9 >> 2] | 0) == 125) {
   HEAP32[i17 >> 2] = HEAP32[26842];
   i4 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i15 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[26842] = 1;
   if (_findpar(i16 + 20 | 0, (HEAP32[i9 >> 2] | 0) == 125 ? 1 : -1, 1, 0, 0) | 0) {
    i4 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[26044] = HEAP32[i4 >> 2];
    HEAP32[26045] = HEAP32[i4 + 4 >> 2];
    HEAP32[i12 >> 2] = 104176;
   }
   i4 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i4 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[26842] = HEAP32[i17 >> 2];
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 40 | (HEAP32[i9 >> 2] | 0) == 41) {
   HEAP32[i19 >> 2] = HEAP32[26842];
   i4 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i18 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i18 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[26842] = 1;
   if (_findsent((HEAP32[i9 >> 2] | 0) == 41 ? 1 : -1, 1) | 0) {
    i4 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[26044] = HEAP32[i4 >> 2];
    HEAP32[26045] = HEAP32[i4 + 4 >> 2];
    HEAP32[i12 >> 2] = 104176;
   }
   i4 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i4 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[26842] = HEAP32[i19 >> 2];
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) == 60 | (HEAP32[i9 >> 2] | 0) == 62) {
   HEAP32[i13 >> 2] = (HEAP32[i8 >> 2] | 0) + 396;
   HEAP32[i14 >> 2] = (HEAP32[i8 >> 2] | 0) + 396 + 8;
   i4 = HEAP32[i13 >> 2] | 0;
   if ((HEAP32[HEAP32[i13 >> 2] >> 2] | 0) != (HEAP32[HEAP32[i14 >> 2] >> 2] | 0)) i21 = (HEAP32[i4 >> 2] | 0) < (HEAP32[HEAP32[i14 >> 2] >> 2] | 0) & 1; else i21 = (HEAP32[i4 + 4 >> 2] | 0) < (HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] | 0) & 1;
   if (((HEAP32[i9 >> 2] | 0) == 60 | 0) == (i21 | 0)) i5 = 30; else if (!(HEAP32[HEAP32[i14 >> 2] >> 2] | 0)) i5 = 30; else i5 = 32;
   if ((i5 | 0) == 30) if (HEAP32[HEAP32[i13 >> 2] >> 2] | 0) HEAP32[i12 >> 2] = HEAP32[i13 >> 2]; else i5 = 32;
   if ((i5 | 0) == 32) HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
   if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 396 + 16 >> 2] | 0) != 86) break;
   i4 = HEAP32[i12 >> 2] | 0;
   HEAP32[26044] = HEAP32[i4 >> 2];
   HEAP32[26045] = HEAP32[i4 + 4 >> 2];
   HEAP32[i12 >> 2] = 104176;
   if ((HEAP32[i9 >> 2] | 0) == 60) {
    HEAP32[26045] = 0;
    break;
   } else {
    HEAP32[26045] = 2147483647;
    break;
   }
  }
  if (((HEAP32[i9 >> 2] | 0) - 97 | 0) >>> 0 < 26) {
   HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) + 188 + ((HEAP32[i9 >> 2] | 0) - 97 << 3);
   break;
  }
  if (((HEAP32[i9 >> 2] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAP32[i9 >> 2] | 0) - 48 | 0) >>> 0 >= 10) break;
  i4 = HEAP32[i9 >> 2] | 0;
  if (((HEAP32[i9 >> 2] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i9 >> 2] = i4 - 48 + 26; else HEAP32[i9 >> 2] = i4 - 65;
  HEAP32[i12 >> 2] = 103600 + (HEAP32[i9 >> 2] << 4);
  if (!(HEAP32[103600 + (HEAP32[i9 >> 2] << 4) + 8 >> 2] | 0)) _fname2fnum(103600 + (HEAP32[i9 >> 2] << 4) | 0);
  i4 = HEAP32[103600 + (HEAP32[i9 >> 2] << 4) + 8 >> 2] | 0;
  if (HEAP32[i11 >> 2] | 0) {
   HEAP32[HEAP32[i11 >> 2] >> 2] = i4;
   break;
  }
  if ((i4 | 0) != (HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] | 0)) {
   HEAP32[i12 >> 2] = 104176;
   do if (HEAP32[i10 >> 2] | 0 ? (HEAP32[103600 + (HEAP32[i9 >> 2] << 4) >> 2] | 0) != 0 : 0) {
    if (!(HEAP32[103600 + (HEAP32[i9 >> 2] << 4) + 8 >> 2] | 0)) break;
    if ((_buflist_getfile(HEAP32[103600 + (HEAP32[i9 >> 2] << 4) + 8 >> 2] | 0, 1, 1, 0) | 0) != 1) {
     HEAP32[26044] = -1;
     break L5;
    }
    i4 = (HEAP32[26881] | 0) + 24 | 0;
    i3 = 103600 + (HEAP32[i9 >> 2] << 4) | 0;
    HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i7 >> 2] = -1;
    i20 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i20 | 0;
   } while (0);
   HEAP32[26044] = 0;
  }
 } while (0);
 HEAP32[i7 >> 2] = HEAP32[i12 >> 2];
 i20 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i20 | 0;
}

function _ex_z(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 36 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 20 | 0;
 i10 = i3 + 16 | 0;
 i11 = i3 + 12 | 0;
 i12 = i3 + 8 | 0;
 i13 = i3 + 4 | 0;
 i14 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
 do if (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 88 >> 2]; else {
  i1 = HEAP32[26881] | 0;
  if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) {
   HEAP32[i6 >> 2] = HEAP32[i1 + 200 + 20 >> 2] << 1;
   break;
  } else {
   HEAP32[i6 >> 2] = (HEAP32[i1 + 88 >> 2] | 0) - 3;
   break;
  }
 } while (0);
 if ((HEAP32[i6 >> 2] | 0) < 1) HEAP32[i6 >> 2] = 1;
 HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 45) i2 = 13; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 43) i2 = 13; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 61) i2 = 13; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 94) i2 = 13; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 46) i2 = 13;
 if ((i2 | 0) == 13) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 while (1) {
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 45) i15 = 1; else i15 = (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 43;
  i16 = HEAP32[i5 >> 2] | 0;
  if (!i15) break;
  HEAP32[i5 >> 2] = i16 + 1;
 }
 if (HEAPU8[i16 >> 0] | 0) {
  if (((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) {
   _emsg(43316) | 0;
   STACKTOP = i3;
   return;
  }
  HEAP32[i6 >> 2] = _atol(HEAP32[i5 >> 2] | 0) | 0;
  if ((HEAP32[i6 >> 2] | 0) < 0 ? 1 : (HEAP32[i6 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] << 1 | 0)) HEAP32[i6 >> 2] = HEAP32[HEAP32[26773] >> 2] << 1;
  HEAP32[27026] = HEAP32[i6 >> 2];
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 61) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
 }
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 45) i2 = 28; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 43) i2 = 28;
 L39 : do if ((i2 | 0) == 28) {
  HEAP32[i5 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  while (1) {
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) != (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break L39;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
 } while (0);
 switch (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) {
 case 45:
  {
   HEAP32[i9 >> 2] = (HEAP32[i14 >> 2] | 0) - (Math_imul(HEAP32[i6 >> 2] | 0, (HEAP32[i5 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) | 0) + 1;
   HEAP32[i10 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) - 1;
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   break;
  }
 case 61:
  {
   HEAP32[i9 >> 2] = (HEAP32[i14 >> 2] | 0) - (((HEAP32[i6 >> 2] | 0) + 1 | 0) / 2 | 0) + 1;
   HEAP32[i10 >> 2] = (HEAP32[i14 >> 2] | 0) + (((HEAP32[i6 >> 2] | 0) + 1 | 0) / 2 | 0) - 1;
   HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i8 >> 2] = 1;
   break;
  }
 case 94:
  {
   HEAP32[i9 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i6 >> 2] << 1);
   HEAP32[i10 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
   HEAP32[i11 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
   break;
  }
 case 46:
  {
   HEAP32[i9 >> 2] = (HEAP32[i14 >> 2] | 0) - (((HEAP32[i6 >> 2] | 0) + 1 | 0) / 2 | 0) + 1;
   HEAP32[i10 >> 2] = (HEAP32[i14 >> 2] | 0) + (((HEAP32[i6 >> 2] | 0) + 1 | 0) / 2 | 0) - 1;
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   break;
  }
 default:
  {
   HEAP32[i9 >> 2] = HEAP32[i14 >> 2];
   if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 43) {
    i2 = (Math_imul(HEAP32[i6 >> 2] | 0, (HEAP32[i5 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) - 1 | 0) | 0) + 1 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i2;
   } else if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0)) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   HEAP32[i10 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) - 1;
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
  }
 }
 if ((HEAP32[i9 >> 2] | 0) < 1) HEAP32[i9 >> 2] = 1;
 if ((HEAP32[i10 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[HEAP32[26773] >> 2];
 if ((HEAP32[i11 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[HEAP32[26773] >> 2]; else if ((HEAP32[i11 >> 2] | 0) < 1) HEAP32[i11 >> 2] = 1;
 HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) > (HEAP32[i10 >> 2] | 0)) break;
  L71 : do if (HEAP32[i8 >> 2] | 0) if ((HEAP32[i12 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) {
   _msg_putchar(10);
   HEAP32[i13 >> 2] = 1;
   while (1) {
    if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[10174] | 0)) break L71;
    _msg_putchar(45);
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
  } while (0);
  i9 = (HEAP32[i4 >> 2] | 0) + 48 | 0;
  _print_line(HEAP32[i12 >> 2] | 0, HEAP32[i9 >> 2] & 2, HEAP32[i9 >> 2] & 1);
  L78 : do if (HEAP32[i8 >> 2] | 0) if ((HEAP32[i12 >> 2] | 0) == (HEAP32[i14 >> 2] | 0)) {
   _msg_putchar(10);
   HEAP32[i13 >> 2] = 1;
   while (1) {
    if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[10174] | 0)) break L78;
    _msg_putchar(45);
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[i11 >> 2] | 0)) {
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i11 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 }
 HEAP32[26799] = 1;
 STACKTOP = i3;
 return;
}

function _expand_filename(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i5 + 88 | 0;
 i7 = i5 + 84 | 0;
 i8 = i5 + 80 | 0;
 i9 = i5 + 76 | 0;
 i10 = i5 + 72 | 0;
 i11 = i5 + 68 | 0;
 i12 = i5 + 64 | 0;
 i13 = i5 + 60 | 0;
 i14 = i5 + 56 | 0;
 i15 = i5 + 52 | 0;
 i16 = i5 + 48 | 0;
 i17 = i5 + 44 | 0;
 i18 = i5 + 40 | 0;
 i19 = i5 + 4 | 0;
 i20 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i13 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 HEAP32[i10 >> 2] = _mch_has_wildcard(HEAP32[i13 >> 2] | 0) | 0;
 while (1) {
  if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) {
   i4 = 37;
   break;
  }
  i3 = (_vim_strchr(45983, HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) | 0) == 0;
  i2 = HEAP32[i13 >> 2] | 0;
  if (i3) {
   HEAP32[i13 >> 2] = i2 + 1;
   continue;
  }
  HEAP32[i11 >> 2] = _eval_vars(i2, HEAP32[HEAP32[i7 >> 2] >> 2] | 0, i12, (HEAP32[i7 >> 2] | 0) + 56 | 0, HEAP32[i9 >> 2] | 0, i15) | 0;
  if (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) {
   i4 = 6;
   break;
  }
  if (!(HEAP32[i11 >> 2] | 0)) {
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
   continue;
  }
  if (_vim_strchr(HEAP32[i11 >> 2] | 0, 36) | 0) i4 = 11; else if (_vim_strchr(HEAP32[i11 >> 2] | 0, 126) | 0) i4 = 11;
  if ((i4 | 0) == 11) {
   i4 = 0;
   HEAP32[i16 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i11 >> 2] = _expand_env_save(HEAP32[i11 >> 2] | 0) | 0;
   _vim_free(HEAP32[i16 >> 2] | 0);
  }
  L16 : do if (!(HEAP32[i15 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[i7 >> 2] | 0) + 64 >> 2] | 0) != 0)) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 532) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 163) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 164) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 172) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 227) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 228) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 236) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 261) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) != 460) {
   HEAP32[i17 >> 2] = HEAP32[i11 >> 2];
   while (1) {
    if (!(HEAP8[HEAP32[i17 >> 2] >> 0] | 0)) break L16;
    if (_vim_strchr(92109, HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) | 0) break;
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   }
   HEAP32[i17 >> 2] = _vim_strsave_escaped(HEAP32[i11 >> 2] | 0, 92109) | 0;
   if (HEAP32[i17 >> 2] | 0) {
    _vim_free(HEAP32[i11 >> 2] | 0);
    HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
   }
  } while (0);
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 64 >> 2] | 0) i4 = 31; else if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) == 532) i4 = 31; else if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) == 460) i4 = 31;
  if ((i4 | 0) == 31) {
   i4 = 0;
   if (_strpbrk(HEAP32[i11 >> 2] | 0, 61875) | 0) {
    HEAP32[i18 >> 2] = _vim_strsave_escaped(HEAP32[i11 >> 2] | 0, 61875) | 0;
    if (HEAP32[i18 >> 2] | 0) {
     _vim_free(HEAP32[i11 >> 2] | 0);
     HEAP32[i11 >> 2] = HEAP32[i18 >> 2];
    }
   }
  }
  HEAP32[i13 >> 2] = _repl_cmdline(HEAP32[i7 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  _vim_free(HEAP32[i11 >> 2] | 0);
  if (!(HEAP32[i13 >> 2] | 0)) {
   i4 = 35;
   break;
  }
 }
 if ((i4 | 0) == 6) {
  HEAP32[i6 >> 2] = 0;
  i21 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i21 | 0;
 } else if ((i4 | 0) == 35) {
  HEAP32[i6 >> 2] = 0;
  i21 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i21 | 0;
 } else if ((i4 | 0) == 37) {
  L45 : do if (HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] & 16 | 0) if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 64 >> 2] | 0)) {
   HEAP32[i14 >> 2] = 1;
   L48 : while (1) {
    if ((HEAP32[i14 >> 2] | 0) > 2) break L45;
    if (!((HEAP32[i14 >> 2] | 0) != 2 | (HEAP32[i10 >> 2] | 0) != 0)) _backslash_halve(HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
    if (HEAP32[i10 >> 2] | 0) {
     do if ((HEAP32[i14 >> 2] | 0) == 1) {
      if (!(_vim_strchr(HEAP32[HEAP32[i7 >> 2] >> 2] | 0, 36) | 0)) if (!(_vim_strchr(HEAP32[HEAP32[i7 >> 2] >> 2] | 0, 126) | 0)) {
       HEAP32[i13 >> 2] = 0;
       break;
      }
      _expand_env_esc(HEAP32[HEAP32[i7 >> 2] >> 2] | 0, HEAP32[26885] | 0, 4096, 1, 1, 0);
      HEAP32[i10 >> 2] = _mch_has_wildcard(HEAP32[26885] | 0) | 0;
      HEAP32[i13 >> 2] = HEAP32[26885];
     } else {
      HEAP32[i20 >> 2] = 17;
      _ExpandInit(i19);
      HEAP32[i19 >> 2] = 2;
      if (HEAP32[27032] | 0) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 256;
      HEAP32[i13 >> 2] = _ExpandOne(i19, HEAP32[HEAP32[i7 >> 2] >> 2] | 0, 0, HEAP32[i20 >> 2] | 0, 2) | 0;
      if (!(HEAP32[i13 >> 2] | 0)) break L48;
     } while (0);
     if (HEAP32[i13 >> 2] | 0) {
      i4 = HEAP32[i7 >> 2] | 0;
      i11 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
      i12 = _strlen(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) | 0;
      _repl_cmdline(i4, i11, i12, HEAP32[i13 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
      if ((HEAP32[i14 >> 2] | 0) == 2) _vim_free(HEAP32[i13 >> 2] | 0);
     }
    }
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   }
   HEAP32[i6 >> 2] = 0;
   i21 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i21 | 0;
  } while (0);
  HEAP32[i6 >> 2] = 1;
  i21 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i21 | 0;
 }
 return 0;
}

function _draw_tabline() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i1;
 i3 = i1 + 72 | 0;
 i4 = i1 + 68 | 0;
 i5 = i1 + 64 | 0;
 i6 = i1 + 60 | 0;
 i7 = i1 + 56 | 0;
 i8 = i1 + 52 | 0;
 i9 = i1 + 48 | 0;
 i10 = i1 + 44 | 0;
 i11 = i1 + 40 | 0;
 i12 = i1 + 36 | 0;
 i13 = i1 + 32 | 0;
 i14 = i1 + 28 | 0;
 i15 = i1 + 24 | 0;
 i16 = i1 + 20 | 0;
 i17 = i1 + 16 | 0;
 i18 = i1 + 12 | 0;
 i19 = i1 + 8 | 0;
 i20 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i15 >> 2] = HEAP32[27086];
 HEAP32[i16 >> 2] = HEAP32[27085];
 HEAP32[i17 >> 2] = HEAP32[27087];
 if ((HEAP32[26734] | 0) < 8) i21 = (HEAP32[26627] | 0) != 0 ^ 1; else i21 = 0;
 HEAP32[i20 >> 2] = i21 & 1;
 if (!(HEAP32[26691] | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[26770] = 0;
 if ((_tabline_height() | 0) < 1) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 }
 i21 = HEAP32[i3 >> 2] | 0;
 i22 = ((HEAP32[10174] | 0) - 1 + ((i21 | 0) / 2 | 0) | 0) / (i21 | 0) | 0;
 HEAP32[i5 >> 2] = i22;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) < 6 ? 6 : i22;
 HEAP32[i8 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i3 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i4 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  if ((HEAP32[i6 >> 2] | 0) >= ((HEAP32[10174] | 0) - 4 | 0)) break;
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[27114] | 0)) HEAP32[i8 >> 2] = HEAP32[i15 >> 2];
  if ((HEAP32[i20 >> 2] | 0) != 0 & (HEAP32[i6 >> 2] | 0) > 0) {
   i22 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i22 + 1;
   _screen_putchar(124, 0, i22, HEAP32[i8 >> 2] | 0);
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[27114] | 0)) HEAP32[i8 >> 2] = HEAP32[i16 >> 2];
  i22 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i22 + 1;
  _screen_putchar(32, 0, i22, HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i4 >> 2] | 0) == (HEAP32[26886] | 0)) {
   HEAP32[i10 >> 2] = HEAP32[26881];
   HEAP32[i9 >> 2] = HEAP32[26887];
  } else {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2];
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2];
  }
  HEAP32[i12 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  while (1) {
   if (!(HEAP32[i9 >> 2] | 0)) break;
   if (_bufIsChanged(HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) | 0) HEAP32[i12 >> 2] = 1;
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2];
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  if ((HEAP32[i12 >> 2] | 0) != 0 | (HEAP32[i11 >> 2] | 0) > 1) {
   if ((HEAP32[i11 >> 2] | 0) > 1) {
    i22 = HEAP32[26885] | 0;
    HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
    _vim_snprintf(i22, 4096, 78969, i2) | 0;
    HEAP32[i14 >> 2] = _strlen(HEAP32[26885] | 0) | 0;
    if (((HEAP32[i6 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0) >= ((HEAP32[10174] | 0) - 3 | 0)) break;
    _screen_puts_len(HEAP32[26885] | 0, HEAP32[i14 >> 2] | 0, 0, HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0);
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
   }
   if (HEAP32[i12 >> 2] | 0) {
    i22 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i22 + 1;
    _screen_puts_len(74578, 1, 0, i22, HEAP32[i8 >> 2] | 0);
   }
   i22 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i22 + 1;
   _screen_putchar(32, 0, i22, HEAP32[i8 >> 2] | 0);
  }
  HEAP32[i19 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) - 1;
  if ((HEAP32[i19 >> 2] | 0) > 0) {
   _get_trans_bufname(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0);
   _shorten_dir(HEAP32[26885] | 0);
   HEAP32[i14 >> 2] = _vim_strsize(HEAP32[26885] | 0) | 0;
   HEAP32[i18 >> 2] = HEAP32[26885];
   if ((HEAP32[i14 >> 2] | 0) > (HEAP32[i19 >> 2] | 0)) {
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) - (HEAP32[i19 >> 2] | 0));
    HEAP32[i14 >> 2] = HEAP32[i19 >> 2];
   }
   if ((HEAP32[i14 >> 2] | 0) > ((HEAP32[10174] | 0) - (HEAP32[i6 >> 2] | 0) - 1 | 0)) HEAP32[i14 >> 2] = (HEAP32[10174] | 0) - (HEAP32[i6 >> 2] | 0) - 1;
   i22 = HEAP32[i18 >> 2] | 0;
   i21 = _strlen(HEAP32[i18 >> 2] | 0) | 0;
   _screen_puts_len(i22, i21, 0, HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
  }
  i21 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i21 + 1;
  _screen_putchar(32, 0, i21, HEAP32[i8 >> 2] | 0);
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
   i21 = HEAP32[i3 >> 2] & 65535;
   i22 = HEAP32[26695] | 0;
   i23 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i23 + 1;
   HEAP16[i22 + (i23 << 1) >> 1] = i21;
  }
  HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 }
 if (HEAP32[i20 >> 2] | 0) HEAP32[i13 >> 2] = 95; else HEAP32[i13 >> 2] = 32;
 i20 = HEAP32[i13 >> 2] | 0;
 _screen_fill(0, 1, HEAP32[i6 >> 2] | 0, HEAP32[10174] | 0, i20 | 0, i20 | 0, HEAP32[i17 >> 2] | 0);
 if (HEAP32[HEAP32[26884] >> 2] | 0) {
  _screen_putchar(88, 0, (HEAP32[10174] | 0) - 1 | 0, HEAP32[i16 >> 2] | 0);
  HEAP16[(HEAP32[26695] | 0) + ((HEAP32[10174] | 0) - 1 << 1) >> 1] = -999;
 }
 HEAP32[26770] = 0;
 STACKTOP = i1;
 return;
}

function _gui_update_scrollbars(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 i12 = i3;
 HEAP32[i4 >> 2] = i1;
 _gui_update_horiz_scrollbar(HEAP32[i4 >> 2] | 0);
 if (!((HEAP32[26661] | 0) != 0 | (HEAP32[26662] | 0) != 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[i4 >> 2] | 0)) if (((HEAP32[26632] | 0) == 0 | (HEAP32[26632] | 0) == 1) & (HEAP32[26661] | 0) != 0 & (HEAP32[26662] | 0) != 0) {
  HEAP32[i10 >> 2] = 1 - (HEAP32[26632] | 0);
  if (HEAP32[26633] | 0) {
   i1 = (HEAP32[26633] | 0) + 812 | 0;
   _gui_mch_set_scrollbar_thumb(i1 + ((HEAP32[i10 >> 2] | 0) * 40 | 0) | 0, HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 16 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0);
  }
 }
 HEAP32[26759] = (HEAP32[26759] | 0) + 1;
 HEAP32[i5 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) break;
  do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) {
   if (!(HEAP32[i4 >> 2] | 0)) if ((HEAP32[26632] | 0) == 0 | (HEAP32[26632] | 0) == 1) if ((HEAP32[26633] | 0) == (HEAP32[i5 >> 2] | 0)) break;
   i1 = HEAP32[i5 >> 2] | 0;
   i10 = (HEAP32[HEAP32[i1 + 4 >> 2] >> 2] | 0) + (HEAP32[i1 + 88 >> 2] | 0) - 2 | 0;
   HEAP32[i9 >> 2] = i10;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) < 0 ? 0 : i10;
   HEAP32[i7 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0) - 1;
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 88 >> 2];
   if ((HEAP32[i8 >> 2] | 0) > ((HEAP32[i9 >> 2] | 0) + 1 | 0)) HEAP32[i8 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   if ((HEAP32[i7 >> 2] | 0) > ((HEAP32[i9 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) + 1 | 0)) HEAP32[i7 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) + 1;
   if ((HEAP32[i7 >> 2] | 0) < 0) HEAP32[i7 >> 2] = 0;
   HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) + 812;
   if ((HEAP32[i8 >> 2] | 0) >= 1) if (((HEAP32[(HEAP32[i5 >> 2] | 0) + 144 >> 2] | 0) - 2 | 0) <= (HEAP32[i9 >> 2] | 0)) {
    if (HEAP32[i4 >> 2] | 0) i2 = 30; else if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0) != (HEAP32[(HEAP32[i5 >> 2] | 0) + 88 >> 2] | 0)) i2 = 30; else if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0) != (HEAP32[(HEAP32[i5 >> 2] | 0) + 84 >> 2] | 0)) i2 = 30; else if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] | 0) != (HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2] | 0)) i2 = 30; else if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] | 0) != (HEAP32[(HEAP32[i5 >> 2] | 0) + 100 >> 2] | 0)) i2 = 30; else if ((HEAP32[26681] | 0) != (HEAP32[26881] | 0)) i2 = 30;
    if ((i2 | 0) == 30) {
     i2 = 0;
     HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 88 >> 2];
     HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 84 >> 2];
     HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2];
     HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 100 >> 2];
     i10 = HEAP32[i6 >> 2] | 0;
     HEAP32[i11 >> 2] = Math_imul((HEAP32[i10 + 28 >> 2] | 0) + (HEAP32[i10 + 36 >> 2] | 0) | 0, HEAP32[26666] | 0) | 0;
     i10 = Math_imul(HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0, HEAP32[26666] | 0) | 0;
     HEAP32[i12 >> 2] = i10 + (HEAP32[26669] | 0);
     if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 84 >> 2] | 0)) {
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[26669] | 0);
      HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[26669] | 0);
     }
     if (HEAP32[26661] | 0) {
      _gui_mch_set_scrollbar_pos((HEAP32[i5 >> 2] | 0) + 812 | 0, HEAP32[26649] | 0, HEAP32[i12 >> 2] | 0, HEAP32[26647] | 0, HEAP32[i11 >> 2] | 0);
      _gui_do_scrollbar(HEAP32[i5 >> 2] | 0, 0, 1);
     }
     if (HEAP32[26662] | 0) {
      _gui_mch_set_scrollbar_pos((HEAP32[i5 >> 2] | 0) + 812 + 40 | 0, HEAP32[26650] | 0, HEAP32[i12 >> 2] | 0, HEAP32[26647] | 0, HEAP32[i11 >> 2] | 0);
      _gui_do_scrollbar(HEAP32[i5 >> 2] | 0, 1, 1);
     }
    }
    if (!(HEAP32[i4 >> 2] | 0)) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) break;
    HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] = HEAP32[i7 >> 2];
    HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = HEAP32[i8 >> 2];
    HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = HEAP32[i9 >> 2];
    do if (HEAP32[26661] | 0) {
     if (!(HEAP32[26632] | 0)) if ((HEAP32[26633] | 0) == (HEAP32[i5 >> 2] | 0)) break;
     _gui_mch_set_scrollbar_thumb((HEAP32[i5 >> 2] | 0) + 812 | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
    } while (0);
    if (!(HEAP32[26662] | 0)) break;
    if ((HEAP32[26632] | 0) == 1) if ((HEAP32[26633] | 0) == (HEAP32[i5 >> 2] | 0)) break;
    _gui_mch_set_scrollbar_thumb((HEAP32[i5 >> 2] | 0) + 812 + 40 | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
    break;
   }
   HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = 0;
   if (HEAP32[26661] | 0) _gui_do_scrollbar(HEAP32[i5 >> 2] | 0, 0, 0);
   if (HEAP32[26662] | 0) _gui_do_scrollbar(HEAP32[i5 >> 2] | 0, 1, 0);
  } while (0);
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
 }
 HEAP32[26681] = HEAP32[26881];
 HEAP32[26759] = (HEAP32[26759] | 0) + -1;
 STACKTOP = i3;
 return;
}

function _regpiece(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i2 + 52 | 0;
 i6 = i2 + 48 | 0;
 i7 = i2 + 44 | 0;
 i8 = i2 + 40 | 0;
 i9 = i2 + 36 | 0;
 i10 = i2 + 32 | 0;
 i11 = i2 + 28 | 0;
 i12 = i2 + 24 | 0;
 i13 = i2 + 20 | 0;
 i14 = i2 + 16 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = _regatom(i10) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i15 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i2;
  return i15 | 0;
 }
 HEAP32[i8 >> 2] = _peekchr() | 0;
 i1 = (_re_multi_type(HEAP32[i8 >> 2] | 0) | 0) == 0;
 i16 = HEAP32[i10 >> 2] | 0;
 if (i1) {
  HEAP32[HEAP32[i6 >> 2] >> 2] = i16;
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  i15 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i2;
  return i15 | 0;
 }
 HEAP32[HEAP32[i6 >> 2] >> 2] = 4 | i16 & 24;
 _skipchr();
 L9 : do switch (HEAP32[i8 >> 2] | 0) {
 case -214:
  {
   i16 = HEAP32[i7 >> 2] | 0;
   if (HEAP32[i10 >> 2] & 2 | 0) {
    _reginsert(7, i16);
    break L9;
   } else {
    _reginsert(3, i16);
    i16 = HEAP32[i7 >> 2] | 0;
    _regoptail(i16, _regnode(4) | 0);
    i16 = HEAP32[i7 >> 2] | 0;
    _regoptail(i16 | 0, i16 | 0);
    i16 = HEAP32[i7 >> 2] | 0;
    _regtail(i16, _regnode(3) | 0);
    i16 = HEAP32[i7 >> 2] | 0;
    _regtail(i16, _regnode(6) | 0);
    break L9;
   }
   break;
  }
 case -213:
  {
   if (HEAP32[i10 >> 2] & 2 | 0) _reginsert(8, HEAP32[i7 >> 2] | 0); else {
    HEAP32[i9 >> 2] = _regnode(3) | 0;
    _regtail(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0);
    i16 = _regnode(4) | 0;
    _regtail(i16, HEAP32[i7 >> 2] | 0);
    i16 = HEAP32[i9 >> 2] | 0;
    _regtail(i16, _regnode(3) | 0);
    i16 = HEAP32[i7 >> 2] | 0;
    _regtail(i16, _regnode(6) | 0);
   }
   HEAP32[HEAP32[i6 >> 2] >> 2] = 1 | HEAP32[i10 >> 2] & 24;
   break;
  }
 case -192:
  {
   HEAP32[i13 >> 2] = 0;
   HEAP32[i14 >> 2] = _getdecchrs() | 0;
   L20 : do switch (_no_Magic(_getchr() | 0) | 0) {
   case 61:
    {
     HEAP32[i13 >> 2] = 9;
     break;
    }
   case 33:
    {
     HEAP32[i13 >> 2] = 10;
     break;
    }
   case 62:
    {
     HEAP32[i13 >> 2] = 13;
     break;
    }
   case 60:
    {
     switch (_no_Magic(_getchr() | 0) | 0) {
     case 61:
      {
       HEAP32[i13 >> 2] = 11;
       break L20;
       break;
      }
     case 33:
      {
       HEAP32[i13 >> 2] = 12;
       break L20;
       break;
      }
     default:
      break L20;
     }
     break;
    }
   default:
    {}
   } while (0);
   if (!(HEAP32[i13 >> 2] | 0)) {
    _emsg2(74133, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
    HEAP32[26719] = 1;
    HEAP32[i5 >> 2] = 0;
    i15 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i2;
    return i15 | 0;
   }
   if ((HEAP32[i13 >> 2] | 0) == 11 | (HEAP32[i13 >> 2] | 0) == 12) {
    i16 = HEAP32[i7 >> 2] | 0;
    _regtail(i16, _regnode(19) | 0);
    i16 = HEAP32[i6 >> 2] | 0;
    HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 16;
   }
   _regtail(HEAP32[i7 >> 2] | 0, _regnode(0) | 0);
   if (!((HEAP32[i13 >> 2] | 0) == 11 | (HEAP32[i13 >> 2] | 0) == 12)) {
    _reginsert(HEAP32[i13 >> 2] | 0, HEAP32[i7 >> 2] | 0);
    break L9;
   }
   if ((HEAP32[i14 >> 2] | 0) < 0) HEAP32[i14 >> 2] = 0;
   _reginsert_nr(HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i7 >> 2] | 0);
   break;
  }
 case -195:
 case -193:
  {
   _reginsert(3, HEAP32[i7 >> 2] | 0);
   _regtail(HEAP32[i7 >> 2] | 0, _regnode(3) | 0);
   HEAP32[i9 >> 2] = _regnode(6) | 0;
   _regtail(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0);
   _regoptail(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0);
   break;
  }
 case -133:
  {
   if (!(_read_limits(i11, i12) | 0)) {
    HEAP32[i5 >> 2] = 0;
    i15 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i2;
    return i15 | 0;
   }
   do if (HEAP32[i10 >> 2] & 2 | 0) {
    _reginsert(14, HEAP32[i7 >> 2] | 0);
    _reginsert_limits(17, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0);
   } else {
    if ((HEAP32[26403] | 0) < 10) {
     _reginsert(140 + (HEAP32[26403] | 0) | 0, HEAP32[i7 >> 2] | 0);
     i16 = HEAP32[i7 >> 2] | 0;
     _regoptail(i16, _regnode(4) | 0);
     i16 = HEAP32[i7 >> 2] | 0;
     _regoptail(i16 | 0, i16 | 0);
     _reginsert_limits(17, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0);
     HEAP32[26403] = (HEAP32[26403] | 0) + 1;
     break;
    }
    _emsg2(74166, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
    HEAP32[26719] = 1;
    HEAP32[i5 >> 2] = 0;
    i15 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i2;
    return i15 | 0;
   } while (0);
   if ((HEAP32[i11 >> 2] | 0) > 0 & (HEAP32[i12 >> 2] | 0) > 0) HEAP32[HEAP32[i6 >> 2] >> 2] = 1 | HEAP32[i10 >> 2] & 24;
   break;
  }
 default:
  {}
 } while (0);
 if (!(_re_multi_type(_peekchr() | 0) | 0)) {
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  i15 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i2;
  return i15 | 0;
 }
 i7 = (_peekchr() | 0) == -214;
 i10 = HEAP32[26882] | 0;
 i6 = HEAP32[26391] | 0;
 if (i7) {
  HEAP32[i4 >> 2] = (i6 | 0) >= 3 ? 114072 : 73093;
  _sprintf(i10, 74197, i4) | 0;
 } else {
  i4 = _no_Magic(_peekchr() | 0) | 0;
  HEAP32[i3 >> 2] = (i6 | 0) == 4 ? 114072 : 73093;
  HEAP32[i3 + 4 >> 2] = i4;
  _sprintf(i10, 74213, i3) | 0;
 }
 _emsg(HEAP32[26882] | 0) | 0;
 HEAP32[26719] = 1;
 HEAP32[i5 >> 2] = 0;
 i15 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i2;
 return i15 | 0;
}

function _replace_termcodes(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 56 | 0;
 i9 = i7 + 52 | 0;
 i10 = i7 + 48 | 0;
 i11 = i7 + 44 | 0;
 i12 = i7 + 40 | 0;
 i13 = i7 + 36 | 0;
 i14 = i7 + 32 | 0;
 i15 = i7 + 28 | 0;
 i16 = i7 + 24 | 0;
 i17 = i7 + 20 | 0;
 i18 = i7 + 16 | 0;
 i19 = i7 + 12 | 0;
 i20 = i7 + 8 | 0;
 i21 = i7 + 4 | 0;
 i22 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i19 >> 2] = (_vim_strchr(HEAP32[26904] | 0, 66) | 0) == 0 & 1;
 i5 = (_vim_strchr(HEAP32[26904] | 0, 60) | 0) == 0;
 HEAP32[i20 >> 2] = (i5 ? 1 : (HEAP32[i13 >> 2] | 0) != 0) & 1;
 HEAP32[i21 >> 2] = (_vim_strchr(HEAP32[26904] | 0, 107) | 0) == 0 & 1;
 HEAP32[i22 >> 2] = _alloc(((_strlen(HEAP32[i9 >> 2] | 0) | 0) * 6 | 0) + 1 | 0) | 0;
 if (!(HEAP32[i22 >> 2] | 0)) {
  HEAP32[HEAP32[i10 >> 2] >> 2] = 0;
  HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
  i23 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i23 | 0;
 }
 HEAP32[i18 >> 2] = HEAP32[i9 >> 2];
 if (HEAP32[i11 >> 2] | 0) if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0 | 0) == 35) if (((HEAPU8[(HEAP32[i18 >> 2] | 0) + 1 >> 0] | 0) - 48 | 0) >>> 0 < 10) {
  i13 = HEAP32[i22 >> 2] | 0;
  i5 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i5 + 1;
  HEAP8[i13 + i5 >> 0] = -128;
  i5 = HEAP32[i22 >> 2] | 0;
  i13 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i13 + 1;
  HEAP8[i5 + i13 >> 0] = 107;
  if ((HEAPU8[(HEAP32[i18 >> 2] | 0) + 1 >> 0] | 0 | 0) == 48) {
   i13 = HEAP32[i22 >> 2] | 0;
   i5 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i5 + 1;
   HEAP8[i13 + i5 >> 0] = 59;
  } else {
   i5 = HEAP8[(HEAP32[i18 >> 2] | 0) + 1 >> 0] | 0;
   i13 = HEAP32[i22 >> 2] | 0;
   i4 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i4 + 1;
   HEAP8[i13 + i4 >> 0] = i5;
  }
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 2;
 }
 L14 : while (1) {
  if (!(HEAPU8[HEAP32[i18 >> 2] >> 0] | 0)) break;
  do if (HEAP32[i20 >> 2] | 0) {
   if (!(HEAP32[i12 >> 2] | 0)) if (!(_strncmp(HEAP32[i18 >> 2] | 0, 80521, 4) | 0)) break;
   HEAP32[i15 >> 2] = _trans_special(i18, (HEAP32[i22 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) | 0, 1, 0) | 0;
   if (HEAP32[i15 >> 2] | 0) {
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
    continue L14;
   }
  } while (0);
  if (HEAP32[i21 >> 2] | 0) {
   HEAP32[i14 >> 2] = _find_term_bykeys(HEAP32[i18 >> 2] | 0) | 0;
   if ((HEAP32[i14 >> 2] | 0) >= 0) {
    i5 = HEAP32[i22 >> 2] | 0;
    i4 = HEAP32[i17 >> 2] | 0;
    HEAP32[i17 >> 2] = i4 + 1;
    HEAP8[i5 + i4 >> 0] = -128;
    i4 = HEAP8[(HEAP32[26602] | 0) + (HEAP32[i14 >> 2] << 4) >> 0] | 0;
    i5 = HEAP32[i22 >> 2] | 0;
    i13 = HEAP32[i17 >> 2] | 0;
    HEAP32[i17 >> 2] = i13 + 1;
    HEAP8[i5 + i13 >> 0] = i4;
    i4 = HEAP8[(HEAP32[26602] | 0) + (HEAP32[i14 >> 2] << 4) + 1 >> 0] | 0;
    i13 = HEAP32[i22 >> 2] | 0;
    i5 = HEAP32[i17 >> 2] | 0;
    HEAP32[i17 >> 2] = i5 + 1;
    HEAP8[i13 + i5 >> 0] = i4;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + (HEAP32[(HEAP32[26602] | 0) + (HEAP32[i14 >> 2] << 4) + 8 >> 2] | 0);
    continue;
   }
  }
  HEAP32[i16 >> 2] = HEAPU8[HEAP32[i18 >> 2] >> 0];
  if ((HEAP32[i16 >> 2] | 0) == 22) i6 = 22; else if ((HEAP32[i19 >> 2] | 0) != 0 & (HEAP32[i16 >> 2] | 0) == 92) i6 = 22;
  if ((i6 | 0) == 22) {
   i6 = 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   if (!(HEAPU8[HEAP32[i18 >> 2] >> 0] | 0)) {
    i6 = 23;
    break;
   }
  }
  do if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0 | 0) == 128) {
   i4 = HEAP32[i22 >> 2] | 0;
   i5 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i5 + 1;
   HEAP8[i4 + i5 >> 0] = -128;
   i5 = HEAP32[i22 >> 2] | 0;
   i4 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i4 + 1;
   HEAP8[i5 + i4 >> 0] = -2;
   i4 = HEAP32[i22 >> 2] | 0;
   i5 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i5 + 1;
   HEAP8[i4 + i5 >> 0] = 88;
  } else if ((HEAPU8[HEAP32[i18 >> 2] >> 0] | 0 | 0) == 155) {
   i5 = HEAP32[i22 >> 2] | 0;
   i4 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i4 + 1;
   HEAP8[i5 + i4 >> 0] = -128;
   i4 = HEAP32[i22 >> 2] | 0;
   i5 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i5 + 1;
   HEAP8[i4 + i5 >> 0] = -3;
   i5 = HEAP32[i22 >> 2] | 0;
   i4 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i4 + 1;
   HEAP8[i5 + i4 >> 0] = 81;
   break;
  } else {
   i4 = HEAP8[HEAP32[i18 >> 2] >> 0] | 0;
   i5 = HEAP32[i22 >> 2] | 0;
   i13 = HEAP32[i17 >> 2] | 0;
   HEAP32[i17 >> 2] = i13 + 1;
   HEAP8[i5 + i13 >> 0] = i4;
   break;
  } while (0);
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
 }
 if ((i6 | 0) == 23) if (HEAP32[i11 >> 2] | 0) {
  i11 = HEAP32[i16 >> 2] & 255;
  i16 = HEAP32[i22 >> 2] | 0;
  i6 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i6 + 1;
  HEAP8[i16 + i6 >> 0] = i11;
 }
 HEAP8[(HEAP32[i22 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] = 0;
 i17 = _vim_strsave(HEAP32[i22 >> 2] | 0) | 0;
 HEAP32[HEAP32[i10 >> 2] >> 2] = i17;
 if (i17 | 0) HEAP32[i9 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
 _vim_free(HEAP32[i22 >> 2] | 0);
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i23 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i23 | 0;
}

function _nfa_recognize_char_class(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 if ((HEAP32[i9 >> 2] | 0) == 1) HEAP32[i10 >> 2] = 1;
 L4 : do if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) != 93) HEAP32[i6 >> 2] = 0; else {
  HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
  if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 94) {
   HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 128;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  L10 : while (1) {
   i13 = HEAP32[i11 >> 2] | 0;
   if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i8 >> 2] | 0) >>> 0) {
    i4 = 39;
    break;
   }
   if ((i13 + 2 | 0) >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0 | 0) == 45) {
    L16 : do switch (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) {
    case 48:
     {
      if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 2 >> 0] | 0 | 0) == 57) {
       HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 2;
       break L16;
      }
      if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 2 >> 0] | 0 | 0) != 55) {
       i4 = 16;
       break L10;
      }
      HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 4;
      break;
     }
    case 97:
     {
      if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 2 >> 0] | 0 | 0) == 122) {
       HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 16;
       break L16;
      }
      if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 2 >> 0] | 0 | 0) != 102) {
       i4 = 21;
       break L10;
      }
      HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 64;
      break;
     }
    case 65:
     {
      if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 2 >> 0] | 0 | 0) == 90) {
       HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 8;
       break L16;
      }
      if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 2 >> 0] | 0 | 0) != 70) {
       i4 = 26;
       break L10;
      }
      HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 32;
      break;
     }
    default:
     {
      i4 = 27;
      break L10;
     }
    } while (0);
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 3;
   } else i4 = 29; else i4 = 29;
   do if ((i4 | 0) == 29) {
    i4 = 0;
    if (((HEAP32[i11 >> 2] | 0) + 1 | 0) >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 92) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0 | 0) == 110) {
     HEAP32[i10 >> 2] = 1;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 2;
     break;
    }
    if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 95) {
     HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 1;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     break;
    }
    if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 10) {
     i4 = 37;
     break L10;
    }
    HEAP32[i10 >> 2] = 1;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
   } while (0);
  }
  if ((i4 | 0) == 16) {
   HEAP32[i6 >> 2] = 0;
   break;
  } else if ((i4 | 0) == 21) {
   HEAP32[i6 >> 2] = 0;
   break;
  } else if ((i4 | 0) == 26) {
   HEAP32[i6 >> 2] = 0;
   break;
  } else if ((i4 | 0) == 27) {
   HEAP32[i6 >> 2] = 0;
   break;
  } else if ((i4 | 0) == 37) {
   HEAP32[i6 >> 2] = 0;
   break;
  } else if ((i4 | 0) == 39) {
   if ((i13 | 0) != (HEAP32[i8 >> 2] | 0)) {
    HEAP32[i6 >> 2] = 0;
    break;
   }
   if ((HEAP32[i10 >> 2] | 0) == 1) HEAP32[i9 >> 2] = 31;
   do switch (HEAP32[i12 >> 2] | 0) {
   case 2:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -935;
     break L4;
     break;
    }
   case 130:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -934;
     break L4;
     break;
    }
   case 98:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -933;
     break L4;
     break;
    }
   case 226:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -932;
     break L4;
     break;
    }
   case 4:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -931;
     break L4;
     break;
    }
   case 132:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -930;
     break L4;
     break;
    }
   case 27:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -929;
     break L4;
     break;
    }
   case 155:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -928;
     break L4;
     break;
    }
   case 25:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -927;
     break L4;
     break;
    }
   case 153:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -926;
     break L4;
     break;
    }
   case 24:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -925;
     break L4;
     break;
    }
   case 152:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -924;
     break L4;
     break;
    }
   case 16:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -919;
     break L4;
     break;
    }
   case 144:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -918;
     break L4;
     break;
    }
   case 8:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -917;
     break L4;
     break;
    }
   case 136:
    {
     HEAP32[i6 >> 2] = (HEAP32[i9 >> 2] | 0) + -916;
     break L4;
     break;
    }
   default:
    {
     HEAP32[i6 >> 2] = 0;
     break L4;
    }
   } while (0);
  }
 } while (0);
 STACKTOP = i5;
 return HEAP32[i6 >> 2] | 0;
}

function _set_bool_option(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
 if (HEAP32[26783] | 0) if (HEAP32[15328 + ((HEAP32[i7 >> 2] | 0) * 28 | 0) + 8 >> 2] & 524288 | 0) {
  HEAP32[i6 >> 2] = 93591;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i9 >> 2];
 HEAP32[26757] = 1;
 if (!(HEAP32[i10 >> 2] & 6)) {
  i4 = HEAP32[i9 >> 2] | 0;
  HEAP32[(_get_varp_scope(15328 + ((HEAP32[i7 >> 2] | 0) * 28 | 0) | 0, 2) | 0) >> 2] = i4;
 }
 do if ((HEAP32[i8 >> 2] | 0) == 107612) _compatible_set(); else {
  if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[26773] | 0) + 676 | 0)) {
   if (!(HEAP32[(HEAP32[26773] | 0) + 676 >> 2] | 0)) if (!(HEAP32[i10 >> 2] & 4)) HEAP32[26815] = 0;
   if (!(HEAP32[(HEAP32[26773] | 0) + 676 >> 2] | 0)) break;
   HEAP32[(HEAP32[26773] | 0) + 776 >> 2] = 0;
   break;
  }
  if ((HEAP32[i8 >> 2] | 0) == 107820) {
   if (HEAP32[26955] | 0) break;
   _gui_mch_mousehide(0);
   break;
  }
  if ((HEAP32[i8 >> 2] | 0) != ((HEAP32[26773] | 0) + 664 | 0)) {
   if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[26773] | 0) + 584 | 0)) {
    _set_options_bin(HEAP32[i11 >> 2] | 0, HEAP32[(HEAP32[26773] | 0) + 584 >> 2] | 0, HEAP32[i10 >> 2] | 0);
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[26773] | 0) + 596 | 0)) if ((HEAP32[i11 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 596 >> 2] | 0)) {
    i4 = HEAP32[26773] | 0;
    _apply_autocmds(HEAP32[i4 + 596 >> 2] | 0 ? 0 : 1, 0, 0, 1, i4 | 0) | 0;
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[26773] | 0) + 696 | 0)) {
    i4 = HEAP32[26773] | 0;
    if (HEAP32[26879] | 0 ? (HEAP32[(HEAP32[26773] | 0) + 696 >> 2] | 0) != 0 : 0) {
     _ml_open_file(i4);
     break;
    } else {
     _mf_close_file(i4, 1);
     break;
    }
   }
   if ((HEAP32[i8 >> 2] | 0) == 108032) {
    HEAP32[i12 >> 2] = _vim_strchr(HEAP32[26985] | 0, 115) | 0;
    if ((HEAP32[27008] | 0) != 0 & (HEAP32[i12 >> 2] | 0) == 0) {
     _strcpy(HEAP32[26882] | 0, HEAP32[26985] | 0) | 0;
     _strcat(HEAP32[26882] | 0, 63605) | 0;
     _set_string_option_direct(62997, -1, HEAP32[26882] | 0, 1, 0);
     break;
    }
    if (!((HEAP32[27008] | 0) == 0 & (HEAP32[i12 >> 2] | 0) != 0)) break;
    i4 = HEAP32[i12 >> 2] | 0;
    i3 = i4 | 0;
    i2 = i4 + 1 | 0;
    _memmove(i3 | 0, i2 | 0, (_strlen((HEAP32[i12 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == 107844) {
    _paste_option_changed();
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == 107532) {
    if (HEAP32[26883] | 0) {
     if (!(HEAP32[10180] & 16)) HEAP32[26843] = 1;
     HEAP32[27160] = 0;
     break;
    }
    if (!(HEAP32[i11 >> 2] | 0)) break;
    HEAP32[26843] = 0;
    HEAP32[27160] = 1;
    if ((HEAP32[26806] | 0) != 0 & (HEAP32[26701] | 0) != 0) HEAP32[26700] = 1;
    HEAP32[26806] = 0;
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == 107732 & (HEAP32[26931] | 0) != 0) {
    _redraw_all_later(35);
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[26881] | 0) + 200 + 24 | 0)) {
    if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0)) break;
    _do_check_scrollbind(0);
    i2 = HEAP32[26881] | 0;
    HEAP32[i2 + 296 >> 2] = HEAP32[i2 + 68 >> 2];
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[26773] | 0) + 704 | 0)) {
    _set_fileformat(HEAP32[(HEAP32[26773] | 0) + 704 >> 2] | 0 ? 1 : 0, HEAP32[i10 >> 2] | 0);
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == 108036) {
    _set_string_option_direct(63616, -1, HEAP32[27009] | 0 ? 63607 : 114072, 1 | HEAP32[i10 >> 2], 0);
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[26773] | 0) + 108 | 0)) {
    if (!(HEAP32[i9 >> 2] | 0)) _save_file_ff(HEAP32[26773] | 0);
    HEAP32[27094] = HEAP32[i9 >> 2];
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[26881] | 0) + 200 + 36 | 0)) {
    if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0)) break;
    HEAP32[(HEAP32[26881] | 0) + 76 >> 2] = 0;
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) == 107644) {
    if ((HEAP32[26911] | 0) == 0 | (HEAP32[i11 >> 2] | 0) != 0) break;
    _win_equal(HEAP32[26881] | 0, 0, 0);
    break;
   }
   if ((HEAP32[i8 >> 2] | 0) != 108112) break;
   do if ((HEAP32[27028] | 0) == 0 | (HEAP32[i11 >> 2] | 0) != 0) {
    if (!((HEAP32[27028] | 0) == 0 & (HEAP32[i11 >> 2] | 0) != 0)) break;
    HEAP32[26565] = 114072;
   } else HEAP32[26565] = 79180; while (0);
   HEAP32[27028] = (HEAPU8[HEAP32[26565] >> 0] | 0) != 0 & 1;
  }
 } while (0);
 i11 = 15328 + ((HEAP32[i7 >> 2] | 0) * 28 | 0) + 8 | 0;
 HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 256;
 _comp_col();
 if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) != 2147483647) if (HEAP32[15328 + ((HEAP32[i7 >> 2] | 0) * 28 | 0) + 8 >> 2] & 67133440 | 0) HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 _check_redraw(HEAP32[15328 + ((HEAP32[i7 >> 2] | 0) * 28 | 0) + 8 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 i13 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i13 | 0;
}

function _screen_fill(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = i9 + 56 | 0;
 i11 = i9 + 52 | 0;
 i12 = i9 + 48 | 0;
 i13 = i9 + 44 | 0;
 i14 = i9 + 40 | 0;
 i15 = i9 + 36 | 0;
 i16 = i9 + 32 | 0;
 i17 = i9 + 28 | 0;
 i18 = i9 + 24 | 0;
 i19 = i9 + 20 | 0;
 i20 = i9 + 16 | 0;
 i21 = i9 + 12 | 0;
 i22 = i9 + 8 | 0;
 i23 = i9 + 4 | 0;
 i24 = i9;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i16 >> 2] = i7;
 HEAP32[i24 >> 2] = 0;
 if ((HEAP32[i11 >> 2] | 0) > (HEAP32[26696] | 0)) HEAP32[i11 >> 2] = HEAP32[26696];
 if ((HEAP32[i13 >> 2] | 0) > (HEAP32[26697] | 0)) HEAP32[i13 >> 2] = HEAP32[26697];
 if (!(HEAP32[26691] | 0)) {
  STACKTOP = i9;
  return;
 }
 if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) {
  STACKTOP = i9;
  return;
 }
 if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) {
  STACKTOP = i9;
  return;
 }
 if (HEAP32[26627] | 0) i25 = 0; else i25 = (HEAP32[26734] | 0) > 1 ^ 1;
 HEAP32[i23 >> 2] = i25 & 1;
 HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
 while (1) {
  if ((HEAP32[i17 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
  HEAP32[i21 >> 2] = 0;
  do if ((HEAP32[i15 >> 2] | 0) == 32) if ((HEAP32[i13 >> 2] | 0) == (HEAP32[10174] | 0)) if (_can_clear(HEAP32[26520] | 0) | 0) {
   if (HEAP32[i16 >> 2] | 0) {
    if (!((HEAP32[i23 >> 2] | 0) != 0 & (HEAP32[i16 >> 2] | 0) <= 255)) break;
    if (HEAP32[i16 >> 2] & -7 | 0) break;
   }
   HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
   if ((HEAP32[i14 >> 2] | 0) != 32) HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   HEAP32[i19 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i17 >> 2] << 2) >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
   HEAP32[i20 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i17 >> 2] << 2) >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
   while (1) {
    if ((HEAP32[i19 >> 2] | 0) < (HEAP32[i20 >> 2] | 0)) if ((HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0 | 0) == 32) i26 = (HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i19 >> 2] << 1) >> 1] | 0 | 0) == 0; else i26 = 0; else i26 = 0;
    i27 = HEAP32[i19 >> 2] | 0;
    if (!i26) break;
    HEAP32[i19 >> 2] = i27 + 1;
   }
   L41 : do if ((i27 | 0) < (HEAP32[i20 >> 2] | 0)) {
    HEAP32[i18 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i17 >> 2] << 2) >> 2] | 0);
    _screen_stop_highlight();
    _term_windgoto(HEAP32[i17 >> 2] | 0, HEAP32[i18 >> 2] | 0);
    _out_str(HEAP32[26520] | 0);
    _screen_start();
    HEAP32[i18 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
    while (1) {
     i10 = HEAP32[i18 >> 2] | 0;
     HEAP32[i18 >> 2] = i10 + -1;
     if (!i10) break L41;
     _space_to_screenline(HEAP32[i19 >> 2] | 0, 0);
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[i21 >> 2] = 1;
  } while (0);
  HEAP32[i19 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i17 >> 2] << 2) >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
  HEAP32[i22 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
  while (1) {
   if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) break;
   if ((HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0 | 0) != (HEAP32[i22 >> 2] | 0)) i8 = 35; else if (HEAP32[i24 >> 2] | 0 ? 1 : (HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i19 >> 2] << 1) >> 1] | 0 | 0) != (HEAP32[i16 >> 2] | 0)) i8 = 35;
   if ((i8 | 0) == 35) {
    i8 = 0;
    L55 : do if ((HEAP32[26627] | 0) != 0 | (HEAP32[26867] | 0) != 0) {
     do if ((HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] | 0 | 0) != 32) {
      if ((HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i19 >> 2] << 1) >> 1] | 0 | 0) <= 255) if (!((HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i19 >> 2] << 1) >> 1] | 0) & 2)) break;
      HEAP32[i24 >> 2] = 1;
      break L55;
     } while (0);
     HEAP32[i24 >> 2] = 0;
    } while (0);
    HEAP8[(HEAP32[26691] | 0) + (HEAP32[i19 >> 2] | 0) >> 0] = HEAP32[i22 >> 2];
    HEAP16[(HEAP32[26692] | 0) + (HEAP32[i19 >> 2] << 1) >> 1] = HEAP32[i16 >> 2];
    if ((HEAP32[i21 >> 2] | 0) == 0 | (HEAP32[i22 >> 2] | 0) != 32) _screen_char(HEAP32[i19 >> 2] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i18 >> 2] | 0);
   }
   HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   if ((HEAP32[i18 >> 2] | 0) == (HEAP32[i12 >> 2] | 0)) {
    if (HEAP32[i21 >> 2] | 0) break;
    HEAP32[i22 >> 2] = HEAP32[i15 >> 2];
   }
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
  }
  if ((HEAP32[i13 >> 2] | 0) == (HEAP32[10174] | 0)) HEAP8[(HEAP32[26694] | 0) + (HEAP32[i17 >> 2] | 0) >> 0] = 0;
  if ((HEAP32[i17 >> 2] | 0) == ((HEAP32[10173] | 0) - 1 | 0)) {
   HEAP32[26699] = 1;
   if (!(HEAP32[i12 >> 2] | 0)) if (((HEAP32[i14 >> 2] | 0) == 32 ? (HEAP32[i13 >> 2] | 0) == (HEAP32[10174] | 0) : 0) & (HEAP32[i15 >> 2] | 0) == 32 & (HEAP32[i16 >> 2] | 0) == 0) HEAP32[26700] = 0;
   if (!(HEAP32[i12 >> 2] | 0)) HEAP32[26701] = 0;
  }
  HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
 }
 STACKTOP = i9;
 return;
}

function _check_abbr(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i5 + 60 | 0;
 i7 = i5 + 56 | 0;
 i8 = i5 + 52 | 0;
 i9 = i5 + 48 | 0;
 i10 = i5 + 44 | 0;
 i11 = i5 + 40 | 0;
 i12 = i5 + 36 | 0;
 i13 = i5 + 32 | 0;
 i14 = i5 + 28 | 0;
 i15 = i5 + 64 | 0;
 i16 = i5 + 24 | 0;
 i17 = i5 + 20 | 0;
 i18 = i5 + 16 | 0;
 i19 = i5 + 12 | 0;
 i20 = i5 + 8 | 0;
 i21 = i5 + 4 | 0;
 i22 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i17 >> 2] = 1;
 if (HEAP32[26824] | 0) {
  HEAP32[i6 >> 2] = 0;
  i23 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i23 | 0;
 }
 if ((HEAP32[25636] & 3 | 0) != 0 & (HEAP32[i7 >> 2] | 0) != 29) {
  HEAP32[i6 >> 2] = 0;
  i23 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i23 | 0;
 }
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i23 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i23 | 0;
 }
 if (_vim_iswordc(HEAPU8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) - 1) >> 0] | 0) | 0) {
  HEAP32[i18 >> 2] = 0;
  if ((HEAP32[i9 >> 2] | 0) > 1) HEAP32[i17 >> 2] = _vim_iswordc(HEAPU8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) - 2) >> 0] | 0) | 0;
 } else HEAP32[i18 >> 2] = 1;
 HEAP32[i12 >> 2] = (HEAP32[i9 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) <= 0) break;
  if (_vim_isspace(HEAPU8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) - 1) >> 0] | 0) | 0) break;
  if (!(HEAP32[i18 >> 2] | 0)) {
   i4 = HEAP32[i17 >> 2] | 0;
   if ((i4 | 0) != (_vim_iswordc(HEAPU8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) - 1) >> 0] | 0) | 0)) break;
  }
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
 }
 if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i10 >> 2] | 0)) HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) {
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
  HEAP32[i11 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
  HEAP32[i16 >> 2] = HEAP32[25899];
  while (1) {
   if (!(HEAP32[i16 >> 2] | 0)) break;
   HEAP32[i19 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 16 >> 2];
   HEAP32[i20 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2];
   if (_vim_strbyte(HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0, 128) | 0) {
    HEAP32[i22 >> 2] = _vim_strsave(HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0) | 0;
    if (HEAP32[i22 >> 2] | 0) {
     HEAP32[i20 >> 2] = HEAP32[i22 >> 2];
     _vim_unescape_csi(HEAP32[i20 >> 2] | 0);
     HEAP32[i19 >> 2] = _strlen(HEAP32[i20 >> 2] | 0) | 0;
    }
   }
   if (HEAP32[(HEAP32[i16 >> 2] | 0) + 20 >> 2] & HEAP32[10180] | 0) if ((HEAP32[i19 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) i24 = (_strncmp(HEAP32[i20 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) != 0 ^ 1; else i24 = 0; else i24 = 0;
   HEAP32[i21 >> 2] = i24 & 1;
   if ((HEAP32[i20 >> 2] | 0) != (HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0)) _vim_free(HEAP32[i20 >> 2] | 0);
   if (HEAP32[i21 >> 2] | 0) break;
   HEAP32[i16 >> 2] = HEAP32[HEAP32[i16 >> 2] >> 2];
  }
  if (HEAP32[i16 >> 2] | 0) {
   HEAP32[i13 >> 2] = 0;
   if ((HEAP32[i7 >> 2] | 0) != 29) {
    if ((HEAP32[i7 >> 2] | 0) < 0 | (HEAP32[i7 >> 2] | 0) == 128) {
     i21 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i21 + 1;
     HEAP8[i15 + i21 >> 0] = -128;
     if ((HEAP32[i7 >> 2] | 0) == 128) i25 = 254; else if (!(HEAP32[i7 >> 2] | 0)) i25 = 255; else i25 = 0 - (HEAP32[i7 >> 2] | 0) & 255;
     i21 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i21 + 1;
     HEAP8[i15 + i21 >> 0] = i25;
     if ((HEAP32[i7 >> 2] | 0) == 128 | (HEAP32[i7 >> 2] | 0) == 0) i26 = 88; else i26 = (0 - (HEAP32[i7 >> 2] | 0) | 0) >>> 8 & 255;
     i25 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i25 + 1;
     HEAP8[i15 + i25 >> 0] = i26;
    } else {
     if ((HEAP32[i7 >> 2] | 0) < 256) if ((HEAP32[i7 >> 2] | 0) < 32 | (HEAP32[i7 >> 2] | 0) > 126) {
      i26 = HEAP32[i13 >> 2] | 0;
      HEAP32[i13 >> 2] = i26 + 1;
      HEAP8[i15 + i26 >> 0] = 22;
     }
     i26 = HEAP32[i7 >> 2] & 255;
     i7 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i7 + 1;
     HEAP8[i15 + i7 >> 0] = i26;
    }
    HEAP8[i15 + (HEAP32[i13 >> 2] | 0) >> 0] = 0;
    _ins_typebuf(i15, 1, 0, 1, HEAP8[(HEAP32[i16 >> 2] | 0) + 28 >> 0] | 0) | 0;
   }
   HEAP32[i14 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 8 >> 2];
   if (HEAP32[i14 >> 2] | 0) {
    i26 = HEAP32[i16 >> 2] | 0;
    _ins_typebuf(HEAP32[i14 >> 2] | 0, HEAP32[i26 + 24 >> 2] | 0, 0, 1, HEAP8[i26 + 28 >> 0] | 0) | 0;
    i26 = _strlen(HEAP32[i14 >> 2] | 0) | 0;
    HEAP32[26824] = (HEAP32[26824] | 0) + (i26 + (HEAP32[i13 >> 2] | 0) + 1);
   }
   HEAP8[i15 >> 0] = 8;
   HEAP8[i15 + 1 >> 0] = 0;
   while (1) {
    i13 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i13 + -1;
    if ((i13 | 0) <= 0) break;
    _ins_typebuf(i15, 1, 0, 1, HEAP8[(HEAP32[i16 >> 2] | 0) + 28 >> 0] | 0) | 0;
   }
   HEAP32[i6 >> 2] = 1;
   i23 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i23 | 0;
  }
 }
 HEAP32[i6 >> 2] = 0;
 i23 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i23 | 0;
}

function _vim_findfile(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3;
 HEAP32[i5 >> 2] = i1;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = _alloc(4096) | 0;
 HEAP32[i6 >> 2] = i5;
 if (!i5) {
  HEAP32[i4 >> 2] = 0;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 L9 : while (1) {
  _ui_breakcheck();
  if (HEAP32[26834] | 0) {
   i2 = 46;
   break;
  }
  HEAP32[i7 >> 2] = _ff_pop(HEAP32[i10 >> 2] | 0) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) {
   i2 = 46;
   break;
  }
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0)) if (!(_ff_check_visited((HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) + 8 | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0)) {
   _ff_free_stack_element(HEAP32[i7 >> 2] | 0);
   continue;
  }
  if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) <= 0) {
   _ff_free_stack_element(HEAP32[i7 >> 2] | 0);
   continue;
  }
  HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0)) {
   HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i11 + 4 >> 2] = 0;
   if (!(_vim_isAbsName(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0)) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) {
    if (((_strlen(HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) | 0) + 1 | 0) >>> 0 >= 4096) {
     i2 = 46;
     break;
    }
    _strcpy(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) | 0;
    _add_pathsep(HEAP32[i6 >> 2] | 0);
   }
   i5 = _strlen(HEAP32[i6 >> 2] | 0) | 0;
   if ((i5 + (_strlen(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0) + 1 | 0) >>> 0 >= 4096) {
    i2 = 46;
    break;
   }
   _strcat(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0;
   _add_pathsep(HEAP32[i6 >> 2] | 0);
   do if (_path_with_url(HEAP32[i11 >> 2] | 0) | 0) {
    i5 = _alloc(4) | 0;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = i5;
    if (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) {
     i5 = _vim_strsave(HEAP32[i11 >> 2] | 0) | 0;
     HEAP32[HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] >> 2] = i5;
     if (i5 | 0) {
      HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] = 1;
      break;
     }
    }
    HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] = 0;
   } else {
    i5 = HEAP32[i7 >> 2] | 0;
    _expand_wildcards((HEAP32[i11 + 4 >> 2] | 0) == 0 ? 1 : 2, i11, i5 + 12 | 0, i5 + 8 | 0, 1065) | 0;
   } while (0);
   HEAP8[(HEAP32[i7 >> 2] | 0) + 16 >> 0] = 0;
   HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 0;
  }
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0)) {
   HEAP32[i8 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + 16 >> 0];
   while (1) {
    i13 = HEAP32[i7 >> 2] | 0;
    if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0)) break;
    if (_path_with_url(HEAP32[(HEAP32[i13 + 8 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0) i2 = 31; else if (_mch_isdir(HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0) i2 = 31;
    do if ((i2 | 0) == 31) {
     i2 = 0;
     i5 = (_strlen(HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0) + 1 | 0;
     if ((i5 + (_strlen(HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] | 0) | 0) | 0) >>> 0 >= 4096) {
      i2 = 46;
      break L9;
     }
     _strcpy(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0;
     _add_pathsep(HEAP32[i6 >> 2] | 0);
     _strcat(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] | 0) | 0;
     if (!(_path_with_url(HEAP32[i6 >> 2] | 0) | 0)) {
      if ((_mch_getperm(HEAP32[i6 >> 2] | 0) | 0) < 0) break;
      if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] | 0) != 2) {
       i5 = (HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] | 0) == 1 & 1;
       if ((i5 | 0) != (_mch_isdir(HEAP32[i6 >> 2] | 0) | 0)) break;
      }
     }
     if ((_ff_check_visited((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) + 8 | 0, HEAP32[i6 >> 2] | 0) | 0) == 1) break L9;
    } while (0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   HEAP8[i13 + 16 >> 0] = 0;
   HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = 1;
  }
  _ff_free_stack_element(HEAP32[i7 >> 2] | 0);
 }
 if ((i2 | 0) == 46) {
  _vim_free(HEAP32[i6 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 HEAP8[(HEAP32[i7 >> 2] | 0) + 16 >> 0] = (HEAP32[i8 >> 2] | 0) + 1;
 _ff_push(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 if (!(_path_with_url(HEAP32[i6 >> 2] | 0) | 0)) _simplify_filename(HEAP32[i6 >> 2] | 0);
 if ((_mch_dirname(HEAP32[26058] | 0, 4096) | 0) == 1) {
  HEAP32[i9 >> 2] = _shorten_fname(HEAP32[i6 >> 2] | 0, HEAP32[26058] | 0) | 0;
  if (HEAP32[i9 >> 2] | 0) {
   i7 = HEAP32[i6 >> 2] | 0;
   i10 = HEAP32[i9 >> 2] | 0;
   _memmove(i7 | 0, i10 | 0, (_strlen(HEAP32[i9 >> 2] | 0) | 0) + 1 | 0) | 0;
  }
 }
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 i12 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i12 | 0;
}

function _onepage(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 >> 2] = 1;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) {
  _beep_flush();
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) <= 0) break;
  _validate_botline();
  i2 = HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0;
  if ((HEAP32[i6 >> 2] | 0) == 1) {
   if ((i2 | 0) >= ((HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[26971] | 0) | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
    i3 = 9;
    break;
   }
  } else if ((i2 | 0) == 1) {
   i3 = 9;
   break;
  }
  i2 = (HEAP32[27026] | 0) > 0 ? (HEAP32[26887] | 0) == (HEAP32[27112] | 0) : 0;
  do if ((HEAP32[i6 >> 2] | 0) == 1) {
   if (i2) if ((HEAP32[27026] | 0) < ((HEAP32[10173] | 0) - 1 | 0)) {
    if ((HEAP32[27026] | 0) <= 2) {
     i1 = (HEAP32[26881] | 0) + 68 | 0;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    } else {
     i1 = (HEAP32[26881] | 0) + 68 | 0;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + ((HEAP32[27026] | 0) - 2);
    }
    if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[HEAP32[26773] >> 2];
    i1 = HEAP32[26881] | 0;
    HEAP32[i1 + 24 >> 2] = HEAP32[i1 + 68 >> 2];
    break;
   }
   if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
    HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[HEAP32[26773] >> 2];
    i1 = (HEAP32[26881] | 0) + 108 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -18;
    break;
   } else {
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[26881] | 0) + 144 >> 2];
    _get_scroll_overlap(i10, -1);
    HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[i10 >> 2];
    i1 = HEAP32[26881] | 0;
    HEAP32[i1 + 24 >> 2] = HEAP32[i1 + 68 >> 2];
    i1 = (HEAP32[26881] | 0) + 108 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -124;
    break;
   }
  } else {
   if (i2) if ((HEAP32[27026] | 0) < ((HEAP32[10173] | 0) - 1 | 0)) {
    if ((HEAP32[27026] | 0) <= 2) {
     i1 = (HEAP32[26881] | 0) + 68 | 0;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
    } else {
     i1 = (HEAP32[26881] | 0) + 68 | 0;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - ((HEAP32[27026] | 0) - 2);
    }
    if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) < 1) HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = 1;
    i1 = HEAP32[26881] | 0;
    HEAP32[i1 + 24 >> 2] = (HEAP32[i1 + 68 >> 2] | 0) + (HEAP32[27026] | 0) - 1;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) break;
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
    break;
   }
   HEAP32[i10 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) - 1;
   _get_scroll_overlap(i10, 1);
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[HEAP32[26773] >> 2];
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i8 >> 2] = 0;
   while (1) {
    if (!((HEAP32[i8 >> 2] | 0) <= (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) ? (HEAP32[i10 >> 2] | 0) >= 1 : 0)) break;
    _topline_back(i10);
    if ((HEAP32[i10 + 4 >> 2] | 0) == 2147483647) HEAP32[i8 >> 2] = 2147483647; else HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i10 + 4 >> 2] | 0);
   }
   if ((HEAP32[i10 >> 2] | 0) < 1) {
    HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = 1;
    i1 = (HEAP32[26881] | 0) + 108 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -50;
    break;
   }
   _botline_forw(i10);
   _botline_forw(i10);
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) {
    i1 = (HEAP32[26881] | 0) + 68 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
    _comp_botline(HEAP32[26881] | 0);
    i1 = HEAP32[26881] | 0;
    HEAP32[i1 + 24 >> 2] = (HEAP32[i1 + 144 >> 2] | 0) - 1;
    i1 = (HEAP32[26881] | 0) + 108 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -28;
    break;
   } else {
    HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[i10 >> 2];
    i1 = (HEAP32[26881] | 0) + 108 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -50;
    break;
   }
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 }
 if ((i3 | 0) == 9) {
  _beep_flush();
  HEAP32[i9 >> 2] = 0;
 }
 _cursor_correct();
 _check_cursor_col();
 if ((HEAP32[i9 >> 2] | 0) == 1) _beginline(6);
 i3 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -8;
 if ((HEAP32[i9 >> 2] | 0) == 1 & (HEAP32[i6 >> 2] | 0) == 1) if (_check_top_offset() | 0) {
  _scroll_cursor_top(1, 0);
  if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) <= (HEAP32[i11 >> 2] | 0)) if ((HEAP32[i11 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 _redraw_later(10);
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i12 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i12 | 0;
}

function _wait_return(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 24 | 0;
 i4 = i2 + 20 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == 1) HEAP32[26828] = 50;
 if ((HEAP32[26809] | 0) != 0 | (HEAP32[26727] | 0) > 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26721] = 1;
 if (HEAP32[26720] | 0) {
  if (HEAP32[26798] | 0) {
   STACKTOP = i2;
   return;
  }
  HEAP32[26876] = HEAP32[26877];
  STACKTOP = i2;
  return;
 }
 HEAP32[26855] = 1;
 HEAP32[i5 >> 2] = HEAP32[10180];
 do if (HEAP32[26723] | 0) {
  HEAP32[i4 >> 2] = 13;
  HEAP32[26723] = 0;
  HEAP32[26834] = 0;
 } else {
  if (HEAP32[26798] | 0) {
   _msg_puts(97452);
   HEAP32[i4 >> 2] = 13;
   HEAP32[26834] = 0;
   break;
  }
  _screenalloc(0);
  HEAP32[10180] = 513;
  _setmouse();
  HEAP32[26876] = HEAP32[26877];
  if (HEAP32[26737] | 0) _check_timestamps(0) | 0;
  _hit_return_msg();
  while (1) {
   HEAP32[i7 >> 2] = HEAP32[26834];
   HEAP32[26802] = (HEAP32[26802] | 0) + 1;
   HEAP32[26804] = (HEAP32[26804] | 0) + 1;
   HEAP32[i8 >> 2] = HEAP32[26800];
   HEAP32[i9 >> 2] = HEAP32[26832];
   HEAP32[26800] = 0;
   HEAP32[26832] = 0;
   HEAP32[i4 >> 2] = _safe_vgetc() | 0;
   if (!((HEAP32[i7 >> 2] | 0) == 0 | (HEAP32[26841] | 0) != 0)) HEAP32[26834] = 0;
   HEAP32[26802] = (HEAP32[26802] | 0) + -1;
   HEAP32[26804] = (HEAP32[26804] | 0) + -1;
   HEAP32[26800] = HEAP32[i8 >> 2];
   HEAP32[26832] = HEAP32[i9 >> 2];
   if ((HEAP32[i4 >> 2] | 0) == 25) if ((HEAPU16[54222] | 0 | 0) == 2) {
    _clip_copy_modeless_selection(1);
    HEAP32[i4 >> 2] = -13821;
   }
   do if (!((HEAP32[26958] | 0) == 0 | (HEAP32[26903] | 0) != 0)) {
    i1 = HEAP32[27044] | 0;
    i10 = HEAP32[10173] | 0;
    if (!((HEAP32[i4 >> 2] | 0) == 98 | (HEAP32[i4 >> 2] | 0) == 107 | (HEAP32[i4 >> 2] | 0) == 117 | (HEAP32[i4 >> 2] | 0) == 103 | (HEAP32[i4 >> 2] | 0) == -30059 | (HEAP32[i4 >> 2] | 0) == -20587)) {
     if ((i1 | 0) <= (i10 - 2 | 0)) break;
     if (!((HEAP32[i4 >> 2] | 0) == 106 | (HEAP32[i4 >> 2] | 0) == 100 | (HEAP32[i4 >> 2] | 0) == 102 | (HEAP32[i4 >> 2] | 0) == -25707 | (HEAP32[i4 >> 2] | 0) == -20075)) break;
     HEAP32[i4 >> 2] = -13821;
     break;
    }
    if ((i1 | 0) > (i10 | 0)) _do_more_prompt(HEAP32[i4 >> 2] | 0) | 0; else {
     HEAP32[26711] = 0;
     HEAP32[i4 >> 2] = -13821;
     HEAP32[27043] = 0;
    }
    if (HEAP32[26723] | 0) {
     HEAP32[i4 >> 2] = 13;
     HEAP32[26723] = 0;
     HEAP32[26834] = 0;
     break;
    }
    if ((HEAP32[i4 >> 2] | 0) != -13821) {
     HEAP32[i4 >> 2] = -13821;
     _hit_return_msg();
    }
   } while (0);
   if ((HEAP32[i7 >> 2] | 0) != 0 & (HEAP32[i4 >> 2] | 0) == 3 | (HEAP32[i4 >> 2] | 0) == -13821 | (HEAP32[i4 >> 2] | 0) == -22777 | (HEAP32[i4 >> 2] | 0) == -22776 | (HEAP32[i4 >> 2] | 0) == -11773 | (HEAP32[i4 >> 2] | 0) == -12029 | (HEAP32[i4 >> 2] | 0) == -12541 | (HEAP32[i4 >> 2] | 0) == -12797 | (HEAP32[i4 >> 2] | 0) == -13309 | (HEAP32[i4 >> 2] | 0) == -13565 | (HEAP32[i4 >> 2] | 0) == -19965 | (HEAP32[i4 >> 2] | 0) == -20221 | (HEAP32[i4 >> 2] | 0) == -19453 | (HEAP32[i4 >> 2] | 0) == -19709 | (HEAP32[i4 >> 2] | 0) == -25853) continue;
   if (_mouse_has(114) | 0) break;
   if ((HEAP32[27095] | 0) >= (HEAP32[26877] | 0)) break;
   if ((HEAP32[i4 >> 2] | 0) == -11517 | (HEAP32[i4 >> 2] | 0) == -12285 | (HEAP32[i4 >> 2] | 0) == -13053 | (HEAP32[i4 >> 2] | 0) == -23037) continue; else if ((HEAP32[i4 >> 2] | 0) == -23805) continue; else break;
  }
  _ui_breakcheck();
  if ((HEAP32[i4 >> 2] | 0) == -11517 | (HEAP32[i4 >> 2] | 0) == -12285 | (HEAP32[i4 >> 2] | 0) == -13053 | (HEAP32[i4 >> 2] | 0) == -23037 | (HEAP32[i4 >> 2] | 0) == -23805) {
   _jump_to_mouse(8, 0, 0) | 0;
   break;
  }
  i10 = (_vim_strchr(97454, HEAP32[i4 >> 2] | 0) | 0) == 0;
  if (i10 & (HEAP32[i4 >> 2] | 0) != 3) {
   _ins_char_typebuf(HEAP32[i4 >> 2] | 0);
   HEAP32[26830] = 1;
  }
 } while (0);
 HEAP32[26855] = 0;
 if ((HEAP32[i4 >> 2] | 0) == 58 | (HEAP32[i4 >> 2] | 0) == 63 | (HEAP32[i4 >> 2] | 0) == 47) {
  if (!(HEAP32[26798] | 0)) HEAP32[26876] = HEAP32[26877];
  HEAP32[26829] = 1;
  HEAP32[26830] = 0;
 }
 HEAP32[i6 >> 2] = HEAP32[10180];
 HEAP32[10180] = HEAP32[i5 >> 2];
 _setmouse();
 _msg_check();
 i5 = (_swapping_screen() | 0) == 0;
 if (!(i5 | (HEAP32[26835] | 0) != 0)) HEAP32[26724] = 1;
 HEAP32[26721] = 0;
 HEAP32[26722] = 1;
 HEAP32[26718] = 0;
 HEAP32[10176] = -1;
 _reset_last_sourcing();
 if (HEAP32[26706] | 0) {
  i5 = _vim_strsize(HEAP32[26706] | 0) | 0;
  i4 = Math_imul((HEAP32[10173] | 0) - (HEAP32[26876] | 0) - 1 | 0, HEAP32[10174] | 0) | 0;
  if (HEAP32[26706] | 0 ? (i5 | 0) >= (i4 + (HEAP32[27116] | 0) | 0) : 0) {
   _vim_free(HEAP32[26706] | 0);
   HEAP32[26706] = 0;
  }
 }
 if ((HEAP32[i6 >> 2] | 0) == 1024) {
  _starttermcap();
  _shell_resized();
  STACKTOP = i2;
  return;
 }
 if (HEAP32[26829] | 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) != 1) if (!((HEAP32[27044] | 0) != 0 & (HEAP32[i3 >> 2] | 0) != -1)) {
  STACKTOP = i2;
  return;
 }
 _starttermcap();
 _redraw_later(10);
 STACKTOP = i2;
 return;
}

function _gui_write(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) break;
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 27) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) == 124) {
   HEAP32[i7 >> 2] = (HEAP32[i5 >> 2] | 0) + 2;
   if (((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) i3 = 8; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 45) if (((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) - 48 | 0) >>> 0 < 10) i3 = 8;
   if ((i3 | 0) == 8) {
    i3 = 0;
    HEAP32[i8 >> 2] = _getdigits(i7) | 0;
    if ((HEAP32[i7 >> 2] | 0) >>> 0 > ((HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >>> 0) break;
    if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 59) {
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
     HEAP32[i9 >> 2] = _getdigits(i7) | 0;
     if ((HEAP32[i7 >> 2] | 0) >>> 0 > ((HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >>> 0) break;
    }
   }
   L15 : do switch (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) {
   case 67:
    {
     _clip_scroll_selection(9999);
     _gui_mch_clear_all();
     HEAP8[106556] = 0;
     HEAP32[i11 >> 2] = 1;
     break;
    }
   case 77:
    {
     _gui_set_cursor(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
     break;
    }
   case 115:
    {
     HEAP32[i10 >> 2] = 1;
     break;
    }
   case 82:
    {
     if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) {
      HEAP32[26642] = HEAP32[i8 >> 2];
      HEAP32[26643] = HEAP32[i9 >> 2];
      break L15;
     } else {
      HEAP32[26642] = HEAP32[i9 >> 2];
      HEAP32[26643] = HEAP32[i8 >> 2];
      break L15;
     }
     break;
    }
   case 86:
    {
     if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) {
      HEAP32[26644] = HEAP32[i8 >> 2];
      HEAP32[26645] = HEAP32[i9 >> 2];
      break L15;
     } else {
      HEAP32[26644] = HEAP32[i9 >> 2];
      HEAP32[26645] = HEAP32[i8 >> 2];
      break L15;
     }
     break;
    }
   case 100:
    {
     _gui_delete_lines(HEAP32[26636] | 0, 1);
     break;
    }
   case 68:
    {
     _gui_delete_lines(HEAP32[26636] | 0, HEAP32[i8 >> 2] | 0);
     break;
    }
   case 105:
    {
     _gui_insert_lines(HEAP32[26636] | 0, 1);
     break;
    }
   case 73:
    {
     _gui_insert_lines(HEAP32[26636] | 0, HEAP32[i8 >> 2] | 0);
     break;
    }
   case 36:
    {
     i2 = HEAP32[26636] | 0;
     _gui_clear_block(i2 | 0, HEAP32[26635] | 0, i2 | 0, (HEAP32[10174] | 0) - 1 | 0);
     break;
    }
   case 104:
    {
     _gui_start_highlight(HEAP32[i8 >> 2] | 0);
     break;
    }
   case 72:
    {
     _gui_stop_highlight(HEAP32[i8 >> 2] | 0);
     break;
    }
   case 102:
    {
     i2 = HEAP32[i8 >> 2] | 0;
     _gui_mch_flash((i2 | 0) == 0 ? 20 : i2 | 0);
     break;
    }
   default:
    HEAP32[i7 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   } while (0);
   i2 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
   HEAP32[i7 >> 2] = i2;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - (i2 - (HEAP32[i5 >> 2] | 0));
   HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  } else i3 = 31; else i3 = 31;
  do if ((i3 | 0) == 31) {
   i3 = 0;
   i2 = HEAP32[i5 >> 2] | 0;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) >= 32) {
    HEAP32[i7 >> 2] = i2;
    while (1) {
     if ((HEAP32[i6 >> 2] | 0) <= 0) break;
     if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) < 32) break;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    }
    i1 = HEAP32[i5 >> 2] | 0;
    _gui_outstr(i1 | 0, (HEAP32[i7 >> 2] | 0) - i1 | 0);
    HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
    break;
   }
   do if ((HEAPU8[i2 >> 0] | 0) == 10) {
    HEAP32[26635] = 0;
    if ((HEAP32[26636] | 0) < (HEAP32[26643] | 0)) {
     HEAP32[26636] = (HEAP32[26636] | 0) + 1;
     break;
    } else {
     _gui_delete_lines(HEAP32[26642] | 0, 1);
     break;
    }
   } else {
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 13) {
     HEAP32[26635] = 0;
     break;
    }
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 8) {
     if (!(HEAP32[26635] | 0)) break;
     HEAP32[26635] = (HEAP32[26635] | 0) + -1;
     break;
    }
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 12) {
     HEAP32[26635] = (HEAP32[26635] | 0) + 1;
     break;
    }
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 7) _gui_mch_beep();
   } while (0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  } while (0);
 }
 if (HEAP32[i10 >> 2] | 0) _gui_update_cursor(1, 1);
 if ((HEAP32[26688] | 0) != (HEAP32[26881] | 0)) HEAP32[26632] = -1;
 if (!(HEAP32[i11 >> 2] | 0)) if ((HEAP32[26688] | 0) == (HEAP32[26881] | 0)) {
  _gui_update_horiz_scrollbar(0);
  i12 = HEAP32[26881] | 0;
  HEAP32[26688] = i12;
  _gui_may_flush();
  STACKTOP = i4;
  return;
 }
 _gui_update_scrollbars(HEAP32[i11 >> 2] | 0);
 i12 = HEAP32[26881] | 0;
 HEAP32[26688] = i12;
 _gui_may_flush();
 STACKTOP = i4;
 return;
}

function _twoway_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 i5 = i4 + 1024 | 0;
 i6 = i4;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i5 + 20 >> 2] = 0;
 HEAP32[i5 + 24 >> 2] = 0;
 HEAP32[i5 + 28 >> 2] = 0;
 i7 = HEAP8[i2 >> 0] | 0;
 L1 : do if (!(i7 << 24 >> 24)) {
  i8 = 1;
  i9 = -1;
  i10 = 0;
  i11 = 1;
  i12 = -1;
  i3 = 25;
 } else {
  i13 = 0;
  i14 = i7;
  do {
   if (!(HEAP8[i1 + i13 >> 0] | 0)) {
    i15 = 0;
    break L1;
   }
   i16 = i14 & 255;
   i17 = i5 + (i16 >>> 5 << 2) | 0;
   HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1 << (i16 & 31);
   i13 = i13 + 1 | 0;
   HEAP32[i6 + (i16 << 2) >> 2] = i13;
   i14 = HEAP8[i2 + i13 >> 0] | 0;
  } while (i14 << 24 >> 24 != 0);
  i14 = i13 >>> 0 > 1;
  if (i14) {
   i16 = 1;
   i17 = 1;
   i18 = 0;
   i19 = -1;
   i20 = 1;
   while (1) {
    i21 = HEAP8[i2 + (i17 + i19) >> 0] | 0;
    i22 = HEAP8[i2 + i20 >> 0] | 0;
    do if (i21 << 24 >> 24 == i22 << 24 >> 24) if ((i17 | 0) == (i16 | 0)) {
     i23 = i16;
     i24 = 1;
     i25 = i16 + i18 | 0;
     i26 = i19;
     break;
    } else {
     i23 = i16;
     i24 = i17 + 1 | 0;
     i25 = i18;
     i26 = i19;
     break;
    } else if ((i21 & 255) > (i22 & 255)) {
     i23 = i20 - i19 | 0;
     i24 = 1;
     i25 = i20;
     i26 = i19;
     break;
    } else {
     i23 = 1;
     i24 = 1;
     i25 = i18 + 1 | 0;
     i26 = i18;
     break;
    } while (0);
    i20 = i24 + i25 | 0;
    if (i20 >>> 0 >= i13 >>> 0) break; else {
     i16 = i23;
     i17 = i24;
     i18 = i25;
     i19 = i26;
    }
   }
   if (i14) {
    i19 = 1;
    i18 = 1;
    i17 = 0;
    i16 = -1;
    i20 = 1;
    while (1) {
     i22 = HEAP8[i2 + (i18 + i16) >> 0] | 0;
     i21 = HEAP8[i2 + i20 >> 0] | 0;
     do if (i22 << 24 >> 24 == i21 << 24 >> 24) if ((i18 | 0) == (i19 | 0)) {
      i27 = i19;
      i28 = 1;
      i29 = i19 + i17 | 0;
      i30 = i16;
      break;
     } else {
      i27 = i19;
      i28 = i18 + 1 | 0;
      i29 = i17;
      i30 = i16;
      break;
     } else if ((i22 & 255) < (i21 & 255)) {
      i27 = i20 - i16 | 0;
      i28 = 1;
      i29 = i20;
      i30 = i16;
      break;
     } else {
      i27 = 1;
      i28 = 1;
      i29 = i17 + 1 | 0;
      i30 = i17;
      break;
     } while (0);
     i20 = i28 + i29 | 0;
     if (i20 >>> 0 >= i13 >>> 0) {
      i8 = i23;
      i9 = i26;
      i10 = i13;
      i11 = i27;
      i12 = i30;
      i3 = 25;
      break;
     } else {
      i19 = i27;
      i18 = i28;
      i17 = i29;
      i16 = i30;
     }
    }
   } else {
    i8 = i23;
    i9 = i26;
    i10 = i13;
    i11 = 1;
    i12 = -1;
    i3 = 25;
   }
  } else {
   i8 = 1;
   i9 = -1;
   i10 = i13;
   i11 = 1;
   i12 = -1;
   i3 = 25;
  }
 } while (0);
 L34 : do if ((i3 | 0) == 25) {
  i26 = (i12 + 1 | 0) >>> 0 > (i9 + 1 | 0) >>> 0;
  i23 = i26 ? i11 : i8;
  i30 = i26 ? i12 : i9;
  i26 = i30 + 1 | 0;
  if (!(_memcmp(i2, i2 + i23 | 0, i26) | 0)) {
   i29 = i10 - i23 | 0;
   i31 = i29;
   i32 = i23;
   i33 = i29;
  } else {
   i29 = i10 - i30 + -1 | 0;
   i23 = (i30 >>> 0 > i29 >>> 0 ? i30 : i29) + 1 | 0;
   i31 = 0;
   i32 = i23;
   i33 = i10 - i23 | 0;
  }
  i23 = i10 | 63;
  i29 = i10 + -1 | 0;
  i28 = (i31 | 0) != 0;
  i27 = i1;
  i25 = 0;
  i24 = i1;
  while (1) {
   i7 = i27;
   do if ((i24 - i7 | 0) >>> 0 < i10 >>> 0) {
    i16 = _memchr(i24, 0, i23) | 0;
    if (!i16) {
     i34 = i24 + i23 | 0;
     break;
    } else if ((i16 - i7 | 0) >>> 0 < i10 >>> 0) {
     i15 = 0;
     break L34;
    } else {
     i34 = i16;
     break;
    }
   } else i34 = i24; while (0);
   i7 = HEAPU8[i27 + i29 >> 0] | 0;
   L48 : do if (!(1 << (i7 & 31) & HEAP32[i5 + (i7 >>> 5 << 2) >> 2])) {
    i35 = 0;
    i36 = i10;
   } else {
    i16 = i10 - (HEAP32[i6 + (i7 << 2) >> 2] | 0) | 0;
    if (i16 | 0) {
     i35 = 0;
     i36 = i28 & (i25 | 0) != 0 & i16 >>> 0 < i32 >>> 0 ? i33 : i16;
     break;
    }
    i16 = i26 >>> 0 > i25 >>> 0;
    i17 = i16 ? i26 : i25;
    i18 = HEAP8[i2 + i17 >> 0] | 0;
    L53 : do if (i18 << 24 >> 24) {
     i19 = i17;
     i20 = i18;
     while (1) {
      if (i20 << 24 >> 24 != (HEAP8[i27 + i19 >> 0] | 0)) break;
      i14 = i19 + 1 | 0;
      i20 = HEAP8[i2 + i14 >> 0] | 0;
      if (!(i20 << 24 >> 24)) break L53; else i19 = i14;
     }
     i35 = 0;
     i36 = i19 - i30 | 0;
     break L48;
    } while (0);
    if (!i16) {
     i15 = i27;
     break L34;
    }
    i18 = i26;
    while (1) {
     i18 = i18 + -1 | 0;
     if ((HEAP8[i2 + i18 >> 0] | 0) != (HEAP8[i27 + i18 >> 0] | 0)) {
      i35 = i31;
      i36 = i32;
      break L48;
     }
     if (i18 >>> 0 <= i25 >>> 0) {
      i15 = i27;
      break L34;
     }
    }
   } while (0);
   i27 = i27 + i36 | 0;
   i25 = i35;
   i24 = i34;
  }
 } while (0);
 STACKTOP = i4;
 return i15 | 0;
}

function _find_special_key(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 60 | 0;
 i9 = i7 + 56 | 0;
 i10 = i7 + 52 | 0;
 i11 = i7 + 48 | 0;
 i12 = i7 + 44 | 0;
 i13 = i7 + 40 | 0;
 i14 = i7 + 36 | 0;
 i15 = i7 + 32 | 0;
 i16 = i7 + 28 | 0;
 i17 = i7 + 24 | 0;
 i18 = i7 + 20 | 0;
 i19 = i7 + 16 | 0;
 i20 = i7 + 12 | 0;
 i21 = i7 + 8 | 0;
 i22 = i7 + 4 | 0;
 i23 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i16 >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
 if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0 | 0) != 60) {
  HEAP32[i8 >> 2] = 0;
  i24 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i24 | 0;
 }
 HEAP32[i14 >> 2] = HEAP32[i16 >> 2];
 HEAP32[i17 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 while (1) {
  if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) != 45) if (!(_vim_isIDc(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) | 0)) break;
  do if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 45) {
   HEAP32[i14 >> 2] = HEAP32[i17 >> 2];
   if (HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0 | 0) {
    HEAP32[i22 >> 2] = 1;
    if (HEAP32[i13 >> 2] | 0) {
     if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0 | 0) != 34) i6 = 10;
    } else i6 = 10;
    if ((i6 | 0) == 10) {
     i6 = 0;
     if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 2 >> 0] | 0 | 0) == 62) {
      HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i22 >> 2] | 0);
      break;
     }
    }
    if (HEAP32[i13 >> 2] | 0) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0 | 0) == 92) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 2 >> 0] | 0 | 0) == 34) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 3 >> 0] | 0 | 0) == 62) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 2;
   }
  } while (0);
  if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 116) if ((HEAPU8[(HEAP32[i17 >> 2] | 0) + 1 >> 0] | 0 | 0) == 95) if (HEAPU8[(HEAP32[i17 >> 2] | 0) + 2 >> 0] | 0 | 0) if (HEAPU8[(HEAP32[i17 >> 2] | 0) + 3 >> 0] | 0 | 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 3; else i6 = 22; else i6 = 22; else i6 = 22; else i6 = 22;
  if ((i6 | 0) == 22) {
   i6 = 0;
   if (!(_strncasecmp(HEAP32[i17 >> 2] | 0, 61466, 5) | 0)) {
    i6 = 23;
    break;
   }
  }
  HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
 }
 if ((i6 | 0) == 23) {
  _vim_str2nr((HEAP32[i17 >> 2] | 0) + 5 | 0, 0, i22, 7, 0, 0, 0);
  HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + 5);
 }
 if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 62) {
  HEAP32[i15 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
  HEAP32[i18 >> 2] = 0;
  HEAP32[i17 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  while (1) {
   if ((HEAP32[i17 >> 2] | 0) >>> 0 >= (HEAP32[i14 >> 2] | 0) >>> 0) break;
   if ((HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) != 45) {
    HEAP32[i19 >> 2] = _name_to_mod_mask(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0) | 0;
    if (!(HEAP32[i19 >> 2] | 0)) break;
    HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | HEAP32[i19 >> 2];
   }
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
  }
  if ((HEAP32[i17 >> 2] | 0) >>> 0 >= (HEAP32[i14 >> 2] | 0) >>> 0) {
   if (!(_strncasecmp((HEAP32[i14 >> 2] | 0) + 1 | 0, 61466, 5) | 0)) if (((HEAPU8[(HEAP32[i14 >> 2] | 0) + 6 >> 0] | 0) - 48 | 0) >>> 0 < 10) {
    _vim_str2nr((HEAP32[i14 >> 2] | 0) + 6 | 0, 0, 0, 7, 0, i21, 0);
    HEAP32[i20 >> 2] = HEAP32[i21 >> 2];
   } else i6 = 36; else i6 = 36;
   do if ((i6 | 0) == 36) {
    HEAP32[i23 >> 2] = 1;
    if (HEAP32[i13 >> 2] | 0) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + 1 >> 0] | 0 | 0) == 92) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + 2 >> 0] | 0 | 0) == 34) HEAP32[i23 >> 2] = 2;
    HEAP32[i22 >> 2] = 1;
    if (HEAP32[i18 >> 2] | 0) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i22 >> 2] | 0) + (HEAP32[i23 >> 2] | 0)) >> 0] | 0 | 0) == 62) {
     HEAP32[i20 >> 2] = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) >> 0];
     break;
    }
    HEAP32[i20 >> 2] = _get_special_key_code((HEAP32[i14 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) | 0) | 0;
    if (!(HEAP32[i12 >> 2] | 0)) HEAP32[i20 >> 2] = _handle_x_keys(HEAP32[i20 >> 2] | 0) | 0;
   } while (0);
   if (HEAP32[i20 >> 2] | 0) {
    HEAP32[i20 >> 2] = _simplify_key(HEAP32[i20 >> 2] | 0, i18) | 0;
    do if (!(HEAP32[i11 >> 2] | 0)) {
     if ((HEAP32[i20 >> 2] | 0) == -25195) {
      HEAP32[i20 >> 2] = 8;
      break;
     }
     if ((HEAP32[i20 >> 2] | 0) == -17515 | (HEAP32[i20 >> 2] | 0) == -20733) HEAP32[i20 >> 2] = 127;
    } while (0);
    if ((HEAP32[i20 >> 2] | 0) >= 0) HEAP32[i20 >> 2] = _extract_modifiers(HEAP32[i20 >> 2] | 0, i18) | 0;
    HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i18 >> 2];
    HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i15 >> 2];
    HEAP32[i8 >> 2] = HEAP32[i20 >> 2];
    i24 = HEAP32[i8 >> 2] | 0;
    STACKTOP = i7;
    return i24 | 0;
   }
  }
 }
 HEAP32[i8 >> 2] = 0;
 i24 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i24 | 0;
}

function _add_termcode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (HEAP32[i7 >> 2] | 0) if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) {
  HEAP32[i12 >> 2] = _vim_strsave(HEAP32[i7 >> 2] | 0) | 0;
  if (!(HEAP32[i12 >> 2] | 0)) {
   STACKTOP = i5;
   return;
  }
  if ((HEAP32[i8 >> 2] | 0) != 0 & (HEAP32[i8 >> 2] | 0) != 55) if (_term_7to8bit(HEAP32[i7 >> 2] | 0) | 0) {
   i3 = HEAP32[i12 >> 2] | 0;
   i2 = i3 | 0;
   i1 = i3 + 1 | 0;
   _memmove(i2 | 0, i1 | 0, (_strlen((HEAP32[i12 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
   i1 = (_term_7to8bit(HEAP32[i7 >> 2] | 0) | 0) & 255;
   HEAP8[HEAP32[i12 >> 2] >> 0] = i1;
  }
  HEAP32[i13 >> 2] = _strlen(HEAP32[i12 >> 2] | 0) | 0;
  HEAP32[26599] = 1;
  if ((HEAP32[26600] | 0) == (HEAP32[26601] | 0)) {
   HEAP32[26601] = (HEAP32[26601] | 0) + 20;
   HEAP32[i9 >> 2] = _alloc(HEAP32[26601] << 4) | 0;
   if (!(HEAP32[i9 >> 2] | 0)) {
    HEAP32[26601] = (HEAP32[26601] | 0) - 20;
    STACKTOP = i5;
    return;
   }
   HEAP32[i10 >> 2] = 0;
   while (1) {
    if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[26600] | 0)) break;
    i1 = HEAP32[i10 >> 2] << 4 | 0;
    i7 = (HEAP32[i9 >> 2] | 0) + i1 | 0;
    i2 = (HEAP32[26602] | 0) + i1 | 0;
    HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   }
   _vim_free(HEAP32[26602] | 0);
   HEAP32[26602] = HEAP32[i9 >> 2];
  }
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[26600] | 0)) break;
   if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) >> 0] | 0) >= (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
    if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) >> 0] | 0) != (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
     i4 = 28;
     break;
    }
    if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 1 >> 0] | 0) >= (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0)) {
     i4 = 20;
     break;
    }
   }
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  do if ((i4 | 0) == 20) if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 1 >> 0] | 0) == (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0)) {
   if ((HEAP32[i8 >> 2] | 0) == 55) {
    i9 = (HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) | 0;
    i2 = _termcode_star(HEAP32[i9 + 4 >> 2] | 0, HEAP32[i9 + 8 >> 2] | 0) | 0;
    HEAP32[i11 >> 2] = i2;
    if ((i2 | 0) > 0) {
     if ((HEAP32[i13 >> 2] | 0) != ((HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 8 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0)) {
      i4 = 28;
      break;
     }
     if (_strncmp(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 4 >> 2] | 0, (HEAP32[i13 >> 2] | 0) - 1 | 0) | 0) {
      i4 = 28;
      break;
     }
     if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) - 1) >> 0] | 0) != (HEAPU8[(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 4 >> 2] | 0) + ((HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 8 >> 2] | 0) - 1) >> 0] | 0)) {
      i4 = 28;
      break;
     }
     _vim_free(HEAP32[i12 >> 2] | 0);
     STACKTOP = i5;
     return;
    }
   }
   _vim_free(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 4 >> 2] | 0);
   HEAP32[26600] = (HEAP32[26600] | 0) + -1;
  } else i4 = 28; while (0);
  L40 : do if ((i4 | 0) == 28) {
   HEAP32[i11 >> 2] = HEAP32[26600];
   while (1) {
    if ((HEAP32[i11 >> 2] | 0) <= (HEAP32[i10 >> 2] | 0)) break L40;
    i8 = HEAP32[26602] | 0;
    i2 = i8 + (HEAP32[i11 >> 2] << 4) | 0;
    i9 = i8 + ((HEAP32[i11 >> 2] | 0) - 1 << 4) | 0;
    HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
    HEAP32[i2 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
    HEAP32[i2 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
    HEAP32[i2 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
   }
  } while (0);
  HEAP8[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) >> 0] = HEAP8[HEAP32[i6 >> 2] >> 0] | 0;
  HEAP8[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 1 >> 0] = HEAP8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0;
  HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 4 >> 2] = HEAP32[i12 >> 2];
  HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 8 >> 2] = HEAP32[i13 >> 2];
  HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 12 >> 2] = 0;
  HEAP32[i11 >> 2] = _termcode_star(HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
  if ((HEAP32[i11 >> 2] | 0) > 0) HEAP32[(HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) + 12 >> 2] = (HEAP32[i13 >> 2] | 0) - 1 - (HEAP32[i11 >> 2] | 0);
  HEAP32[26600] = (HEAP32[26600] | 0) + 1;
  STACKTOP = i5;
  return;
 }
 _del_termcode(HEAP32[i6 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _get_special_key_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP8[111074] = 60;
 HEAP32[i7 >> 2] = 1;
 if ((HEAP32[i4 >> 2] | 0) < 0) if ((0 - (HEAP32[i4 >> 2] | 0) & 255 | 0) == 242) HEAP32[i4 >> 2] = (0 - (HEAP32[i4 >> 2] | 0) | 0) >>> 8 & 255;
 L5 : do if ((HEAP32[i4 >> 2] | 0) < 0) {
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if (!(HEAPU8[60288 + (HEAP32[i6 >> 2] | 0) >> 0] | 0)) break L5;
   if ((0 - (HEAP32[i4 >> 2] | 0) & 255 | 0) == (HEAPU8[60288 + ((HEAP32[i6 >> 2] | 0) + 1) >> 0] | 0)) if (((0 - (HEAP32[i4 >> 2] | 0) | 0) >>> 8 & 255 | 0) == (HEAPU8[60288 + ((HEAP32[i6 >> 2] | 0) + 2) >> 0] | 0)) break;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 5;
  }
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | HEAPU8[60288 + (HEAP32[i6 >> 2] | 0) >> 0];
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i4 >> 2] = 0 - ((HEAPU8[60288 + (i2 + 3) >> 0] | 0) + (HEAPU8[60288 + (i2 + 4) >> 0] << 8));
 } while (0);
 HEAP32[i8 >> 2] = _find_special_key_in_table(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  do if ((HEAP32[i8 >> 2] | 0) < 0) {
   if (_vim_isprintc(HEAP32[i4 >> 2] | 0) | 0) if ((HEAP32[i4 >> 2] & 127 | 0) != 32) break;
   if (HEAP32[i4 >> 2] & 128 | 0) {
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & 127;
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 8;
    HEAP32[i8 >> 2] = _find_special_key_in_table(HEAP32[i4 >> 2] | 0) | 0;
   }
  } while (0);
  if ((HEAP32[i8 >> 2] | 0) < 0) {
   i2 = (_vim_isprintc(HEAP32[i4 >> 2] | 0) | 0) == 0;
   if (i2 & (HEAP32[i4 >> 2] | 0) < 32) {
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 64;
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 4;
   }
  }
 }
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAPU8[41528 + ((HEAP32[i6 >> 2] | 0) * 6 | 0) + 4 >> 0] | 0) == 65) break;
  if ((HEAP32[i5 >> 2] & HEAP16[41528 + ((HEAP32[i6 >> 2] | 0) * 6 | 0) >> 1] | 0) == (HEAP16[41528 + ((HEAP32[i6 >> 2] | 0) * 6 | 0) + 2 >> 1] | 0)) {
   i2 = HEAP8[41528 + ((HEAP32[i6 >> 2] | 0) * 6 | 0) + 4 >> 0] | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i1 + 1;
   HEAP8[111074 + i1 >> 0] = i2;
   i2 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i2 + 1;
   HEAP8[111074 + i2 >> 0] = 45;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((HEAP32[i8 >> 2] | 0) >= 0) {
  HEAP32[i10 >> 2] = _strlen(HEAP32[11620 + (HEAP32[i8 >> 2] << 3) + 4 >> 2] | 0) | 0;
  if (((HEAP32[i10 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) + 2 | 0) >>> 0 > 32) {
   i11 = HEAP32[i7 >> 2] | 0;
   i12 = i11 + 1 | 0;
   HEAP32[i7 >> 2] = i12;
   i13 = 111074 + i11 | 0;
   HEAP8[i13 >> 0] = 62;
   i14 = HEAP32[i7 >> 2] | 0;
   i15 = 111074 + i14 | 0;
   HEAP8[i15 >> 0] = 0;
   STACKTOP = i3;
   return 111074;
  }
  _strcpy(111074 + (HEAP32[i7 >> 2] | 0) | 0, HEAP32[11620 + (HEAP32[i8 >> 2] << 3) + 4 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  i11 = HEAP32[i7 >> 2] | 0;
  i12 = i11 + 1 | 0;
  HEAP32[i7 >> 2] = i12;
  i13 = 111074 + i11 | 0;
  HEAP8[i13 >> 0] = 62;
  i14 = HEAP32[i7 >> 2] | 0;
  i15 = 111074 + i14 | 0;
  HEAP8[i15 >> 0] = 0;
  STACKTOP = i3;
  return 111074;
 }
 if ((HEAP32[i4 >> 2] | 0) < 0) {
  i10 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i10 + 1;
  HEAP8[111074 + i10 >> 0] = 116;
  i10 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i10 + 1;
  HEAP8[111074 + i10 >> 0] = 95;
  i10 = 0 - (HEAP32[i4 >> 2] | 0) & 255;
  i8 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i8 + 1;
  HEAP8[111074 + i8 >> 0] = i10;
  i10 = (0 - (HEAP32[i4 >> 2] | 0) | 0) >>> 8 & 255;
  i8 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i8 + 1;
  HEAP8[111074 + i8 >> 0] = i10;
  i11 = HEAP32[i7 >> 2] | 0;
  i12 = i11 + 1 | 0;
  HEAP32[i7 >> 2] = i12;
  i13 = 111074 + i11 | 0;
  HEAP8[i13 >> 0] = 62;
  i14 = HEAP32[i7 >> 2] | 0;
  i15 = 111074 + i14 | 0;
  HEAP8[i15 >> 0] = 0;
  STACKTOP = i3;
  return 111074;
 }
 i10 = (_vim_isprintc(HEAP32[i4 >> 2] | 0) | 0) != 0;
 i8 = HEAP32[i4 >> 2] | 0;
 if (i10) {
  i10 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i10 + 1;
  HEAP8[111074 + i10 >> 0] = i8;
  i11 = HEAP32[i7 >> 2] | 0;
  i12 = i11 + 1 | 0;
  HEAP32[i7 >> 2] = i12;
  i13 = 111074 + i11 | 0;
  HEAP8[i13 >> 0] = 62;
  i14 = HEAP32[i7 >> 2] | 0;
  i15 = 111074 + i14 | 0;
  HEAP8[i15 >> 0] = 0;
  STACKTOP = i3;
  return 111074;
 }
 HEAP32[i9 >> 2] = _transchar(i8) | 0;
 while (1) {
  if (!(HEAP8[HEAP32[i9 >> 2] >> 0] | 0)) break;
  i8 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i8 + 1;
  i10 = HEAP8[i8 >> 0] | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i8 + 1;
  HEAP8[111074 + i8 >> 0] = i10;
 }
 i11 = HEAP32[i7 >> 2] | 0;
 i12 = i11 + 1 | 0;
 HEAP32[i7 >> 2] = i12;
 i13 = 111074 + i11 | 0;
 HEAP8[i13 >> 0] = 62;
 i14 = HEAP32[i7 >> 2] | 0;
 i15 = 111074 + i14 | 0;
 HEAP8[i15 >> 0] = 0;
 STACKTOP = i3;
 return 111074;
}

function _ex_help(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3;
 i5 = i3 + 52 | 0;
 i6 = i3 + 48 | 0;
 i7 = i3 + 44 | 0;
 i8 = i3 + 40 | 0;
 i9 = i3 + 36 | 0;
 i10 = i3 + 32 | 0;
 i11 = i3 + 28 | 0;
 i12 = i3 + 24 | 0;
 i13 = i3 + 20 | 0;
 i14 = i3 + 16 | 0;
 i15 = i3 + 12 | 0;
 i16 = i3 + 8 | 0;
 i17 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 if (HEAP32[i5 >> 2] | 0) {
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  while (1) {
   if (!(HEAP8[HEAP32[i6 >> 2] >> 0] | 0)) break;
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 10) {
    i2 = 9;
    break;
   }
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 13) {
    i2 = 9;
    break;
   }
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 124) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) != 124) {
    i2 = 9;
    break;
   }
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  if ((i2 | 0) == 9) {
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i6 >> 2];
  }
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0) if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) if (!(HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0)) {
   _emsg(43708) | 0;
   STACKTOP = i3;
   return;
  }
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
 } else HEAP32[i6 >> 2] = 114072;
 i1 = HEAP32[i6 >> 2] | 0;
 HEAP32[i14 >> 2] = i1 + (_strlen(HEAP32[i6 >> 2] | 0) | 0) + -1;
 while (1) {
  if ((HEAP32[i14 >> 2] | 0) >>> 0 <= (HEAP32[i6 >> 2] | 0) >>> 0) break;
  if ((HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i14 >> 2] >> 0] | 0) != 9) break;
  if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + -1 >> 0] | 0) == 92) break;
  i1 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i1 + -1;
  HEAP8[i1 >> 0] = 0;
 }
 if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) HEAP32[i6 >> 2] = 43727;
 if (HEAP32[i5 >> 2] | 0) i18 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0) != 0; else i18 = 0;
 HEAP32[i9 >> 2] = _find_help_tags(HEAP32[i6 >> 2] | 0, i12, i13, i18 & 1) | 0;
 HEAP32[i10 >> 2] = 0;
 if ((HEAP32[i9 >> 2] | 0) == 0 ? 1 : (HEAP32[i10 >> 2] | 0) >= (HEAP32[i12 >> 2] | 0)) {
  _emsg2(43736, HEAP32[i6 >> 2] | 0) | 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   STACKTOP = i3;
   return;
  }
  _FreeWild(HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = _vim_strsave(HEAP32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0) | 0;
 _FreeWild(HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0);
 HEAP32[26757] = 1;
 i13 = (_bt_help(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) | 0) == 0;
 do if (i13 | (HEAP32[27129] | 0) != 0) {
  L47 : do if (HEAP32[27129] | 0) HEAP32[i11 >> 2] = 0; else {
   HEAP32[i11 >> 2] = HEAP32[26887];
   while (1) {
    if (!(HEAP32[i11 >> 2] | 0)) break L47;
    if (_bt_help(HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) | 0) break L47;
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2];
   }
  } while (0);
  if (HEAP32[i11 >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) + 56 >> 2] | 0) > 0) {
   _win_enter(HEAP32[i11 >> 2] | 0, 1);
   i2 = 52;
   break;
  }
  i12 = _fopen(HEAP32[26927] | 0, 94911) | 0;
  HEAP32[i8 >> 2] = i12;
  if (!i12) {
   HEAP32[i4 >> 2] = HEAP32[26927];
   _smsg(43764, i4) | 0;
   break;
  }
  _fclose(HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = 16;
  if (!(HEAP32[27128] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) < 80) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 4;
  if (_win_split(0, HEAP32[i9 >> 2] | 0) | 0) {
   if ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) < (HEAP32[26928] | 0)) _win_setheight(HEAP32[26928] | 0);
   HEAP32[i16 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
   _do_ecmd(0, 0, 0, 0, 0, 3, 0) | 0;
   if (!(HEAP32[27130] | 0)) HEAP32[(HEAP32[26881] | 0) + 180 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i15 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
   i2 = 52;
  }
 } else i2 = 52; while (0);
 if ((i2 | 0) == 52) {
  if (!(HEAP32[26883] | 0)) HEAP32[26806] = 0;
  if (HEAP32[i7 >> 2] | 0) _do_tag(HEAP32[i7 >> 2] | 0, 8, 1, 0, 1) | 0;
  if (HEAP32[i15 >> 2] | 0) if ((HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0) != (HEAP32[i15 >> 2] | 0)) {
   HEAP32[i17 >> 2] = _buflist_findnr(HEAP32[i15 >> 2] | 0) | 0;
   if (HEAP32[i17 >> 2] | 0) if (!(HEAP32[(HEAP32[i17 >> 2] | 0) + 56 >> 2] | 0)) _wipe_buffer(HEAP32[i17 >> 2] | 0, 1);
  }
  if (HEAP32[i16 >> 2] | 0) if (!(HEAP32[27130] | 0 ? 1 : (HEAP32[(HEAP32[26881] | 0) + 180 >> 2] | 0) != (HEAP32[i15 >> 2] | 0))) HEAP32[(HEAP32[26881] | 0) + 180 >> 2] = HEAP32[i16 >> 2];
 }
 _vim_free(HEAP32[i7 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _frame_setwidth(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i12 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP8[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 2) {
  HEAP32[i11 >> 2] = _frame_minwidth(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0, 0) | 0;
  if ((HEAP32[i6 >> 2] | 0) < (HEAP32[i11 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
  _frame_setwidth(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  STACKTOP = i4;
  return;
 }
 HEAP32[i9 >> 2] = 1;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) > 2) break;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i10 >> 2] | 0)) break;
   if ((HEAP32[i10 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0) if (HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0) + 200 + 16 >> 2] | 0) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0);
   if ((HEAP32[i10 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
    i2 = _frame_minwidth(HEAP32[i10 >> 2] | 0, 0) | 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i2;
   }
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2];
  }
  if ((HEAP32[i6 >> 2] | 0) <= (HEAP32[i7 >> 2] | 0)) break;
  if ((HEAP32[i9 >> 2] | 0) == 2) {
   i3 = 21;
   break;
  }
  i2 = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0;
  i1 = (HEAP32[10173] | 0) - (HEAP32[26875] | 0) | 0;
  if ((i2 | 0) >= (i1 - (_tabline_height() | 0) | 0)) {
   i3 = 21;
   break;
  }
  i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i13 = i2 + (_frame_minwidth(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0, -1) | 0) | 0;
  _frame_setwidth(i1, i13 - (HEAP32[27036] | 0) - 1 | 0);
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 21) if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i8 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0);
 if ((HEAP32[i6 >> 2] | 0) > ((HEAP32[i7 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0)) HEAP32[i12 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
 if ((HEAP32[i8 >> 2] | 0) < 0) if (((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0) < (HEAP32[i12 >> 2] | 0)) HEAP32[i12 >> 2] = 0;
 _frame_new_width(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, 0);
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= 2) break;
  i6 = HEAP32[i5 >> 2] | 0;
  if (!(HEAP32[i9 >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[i6 + 24 >> 2]; else HEAP32[i10 >> 2] = HEAP32[i6 + 28 >> 2];
  while (1) {
   if (!(HEAP32[i10 >> 2] | 0 ? (HEAP32[i8 >> 2] | 0) != 0 : 0)) break;
   HEAP32[i11 >> 2] = _frame_minwidth(HEAP32[i10 >> 2] | 0, 0) | 0;
   do if ((HEAP32[i12 >> 2] | 0) > 0) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0) if (HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] | 0) + 200 + 16 >> 2] | 0) {
    i6 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
    i7 = HEAP32[i12 >> 2] | 0;
    if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0)) {
     HEAP32[i12 >> 2] = i7 - i6;
     break;
    }
    if ((i6 - i7 | 0) > (HEAP32[i8 >> 2] | 0)) HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - ((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i12 >> 2] | 0));
    _frame_new_width(HEAP32[i10 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, 0);
    HEAP32[i12 >> 2] = 0;
   } else i3 = 44; else i3 = 44; else i3 = 44; while (0);
   do if ((i3 | 0) == 44) {
    i3 = 0;
    i7 = HEAP32[i10 >> 2] | 0;
    if (((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) < (HEAP32[i11 >> 2] | 0)) {
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - ((HEAP32[i7 + 4 >> 2] | 0) - (HEAP32[i11 >> 2] | 0));
     _frame_new_width(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0, 0);
     break;
    } else {
     _frame_new_width(i7, (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0, 0, 0);
     HEAP32[i8 >> 2] = 0;
     break;
    }
   } while (0);
   i7 = HEAP32[i10 >> 2] | 0;
   if (!(HEAP32[i9 >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[i7 + 24 >> 2]; else HEAP32[i10 >> 2] = HEAP32[i7 + 28 >> 2];
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 STACKTOP = i4;
 return;
}

function _nv_screengo(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 40 | 0;
 i7 = i5 + 36 | 0;
 i8 = i5 + 32 | 0;
 i9 = i5 + 28 | 0;
 i10 = i5 + 24 | 0;
 i11 = i5 + 20 | 0;
 i12 = i5 + 16 | 0;
 i13 = i5 + 12 | 0;
 i14 = i5 + 8 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = _linetabsize(_ml_get_curline() | 0) | 0;
 HEAP32[i10 >> 2] = 1;
 HEAP32[i11 >> 2] = 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) == 2147483647 & 1;
 HEAP32[i13 >> 2] = _curwin_col_off() | 0;
 i6 = HEAP32[i13 >> 2] | 0;
 HEAP32[i14 >> 2] = i6 - (_curwin_col_off2() | 0);
 HEAP32[i15 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[i13 >> 2] | 0);
 i13 = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = i13;
 HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) == 0 ? 1 : i13;
 L1 : do if (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) {
  do if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) == 2147483647) {
   HEAP32[i11 >> 2] = 1;
   _validate_virtcol();
   if ((HEAP32[i15 >> 2] | 0) <= 0) {
    HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 0;
    break;
   }
   HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = (HEAP32[i15 >> 2] | 0) - 1;
   if ((HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0)) {
    i13 = HEAP32[26881] | 0;
    i14 = HEAP32[i16 >> 2] | 0;
    i6 = Math_imul((((HEAP32[i13 + 132 >> 2] | 0) - (HEAP32[i13 + 32 >> 2] | 0) - 1 | 0) / (i14 | 0) | 0) + 1 | 0, i14 | 0) | 0;
    i14 = (HEAP32[26881] | 0) + 32 | 0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i6;
   }
  } else {
   if ((HEAP32[i9 >> 2] | 0) > (HEAP32[i15 >> 2] | 0)) {
    i6 = HEAP32[i16 >> 2] | 0;
    i14 = Math_imul((((HEAP32[i9 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) - 1 | 0) / (i6 | 0) | 0) + 1 | 0, i6 | 0) | 0;
    HEAP32[i12 >> 2] = i14 + (HEAP32[i15 >> 2] | 0);
   } else HEAP32[i12 >> 2] = HEAP32[i15 >> 2];
   if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) > ((HEAP32[i12 >> 2] | 0) + 1 | 0)) {
    i14 = HEAP32[i16 >> 2] | 0;
    i6 = Math_imul((((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0) / (i14 | 0) | 0) + 1 | 0, i14 | 0) | 0;
    i14 = (HEAP32[26881] | 0) + 32 | 0;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) - i6;
   }
  } while (0);
  L16 : while (1) {
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i6 + -1;
   if (!i6) break L1;
   do if ((HEAP32[i7 >> 2] | 0) == -1) {
    if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) >= (HEAP32[i16 >> 2] | 0)) {
     i6 = (HEAP32[26881] | 0) + 32 | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i16 >> 2] | 0);
     break;
    }
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == 1) {
     i4 = 18;
     break L16;
    }
    i6 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
    HEAP32[i9 >> 2] = _linetabsize(_ml_get_curline() | 0) | 0;
    if ((HEAP32[i9 >> 2] | 0) > (HEAP32[i15 >> 2] | 0)) {
     i6 = HEAP32[i16 >> 2] | 0;
     i14 = Math_imul((((HEAP32[i9 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) - 1 | 0) / (i6 | 0) | 0) + 1 | 0, i6 | 0) | 0;
     i6 = (HEAP32[26881] | 0) + 32 | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i14;
    }
   } else {
    if ((HEAP32[i9 >> 2] | 0) > (HEAP32[i15 >> 2] | 0)) {
     i14 = HEAP32[i16 >> 2] | 0;
     i6 = Math_imul((((HEAP32[i9 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) - 1 | 0) / (i14 | 0) | 0) + 1 | 0, i14 | 0) | 0;
     HEAP32[i12 >> 2] = i6 + (HEAP32[i15 >> 2] | 0);
    } else HEAP32[i12 >> 2] = HEAP32[i15 >> 2];
    if (((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) | 0) < (HEAP32[i12 >> 2] | 0)) {
     i6 = (HEAP32[26881] | 0) + 32 | 0;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
     break;
    }
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) {
     i4 = 27;
     break L16;
    }
    i6 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    i6 = (HEAP32[26881] | 0) + 32 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) % (HEAP32[i16 >> 2] | 0) | 0;
    HEAP32[i9 >> 2] = _linetabsize(_ml_get_curline() | 0) | 0;
   } while (0);
  }
  if ((i4 | 0) == 18) {
   HEAP32[i10 >> 2] = 0;
   break;
  } else if ((i4 | 0) == 27) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
 } while (0);
 _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  i17 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i5;
  return i17 | 0;
 }
 HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647;
 i17 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i5;
 return i17 | 0;
}

function _change_indent(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i6 + 52 | 0;
 i8 = i6 + 48 | 0;
 i9 = i6 + 44 | 0;
 i10 = i6 + 40 | 0;
 i11 = i6 + 36 | 0;
 i12 = i6 + 32 | 0;
 i13 = i6 + 28 | 0;
 i14 = i6 + 24 | 0;
 i15 = i6 + 20 | 0;
 i16 = i6 + 16 | 0;
 i17 = i6 + 12 | 0;
 i18 = i6 + 8 | 0;
 i19 = i6 + 4 | 0;
 i20 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[26881] | 0) + 200 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = 0;
 HEAP32[i20 >> 2] = _getvcol_nolist((HEAP32[26881] | 0) + 24 | 0) | 0;
 HEAP32[i12 >> 2] = HEAP32[i20 >> 2];
 HEAP32[i19 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 HEAP32[i15 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 _beginline(1);
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 if ((HEAP32[i15 >> 2] | 0) < 0) {
  i20 = _get_indent() | 0;
  HEAP32[i12 >> 2] = i20 - (HEAP32[i12 >> 2] | 0);
 }
 if ((HEAP32[i15 >> 2] | 0) > 0) HEAP32[i19 >> 2] = -1;
 if ((HEAP32[i7 >> 2] | 0) == 1) _set_indent(HEAP32[i8 >> 2] | 0, HEAP32[i11 >> 2] | 0 ? 1 : 0) | 0; else _shift_line((HEAP32[i7 >> 2] | 0) == 3 & 1, HEAP32[i9 >> 2] | 0, 1, HEAP32[i11 >> 2] | 0);
 HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
 do if ((HEAP32[i15 >> 2] | 0) >= 0) {
  if (!(HEAP32[i15 >> 2] | 0)) HEAP32[i14 >> 2] = 2147483647;
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
 } else {
  if (!(HEAP32[10180] & 16)) {
   HEAP32[i15 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
   break;
  }
  i11 = _get_indent() | 0;
  HEAP32[i12 >> 2] = i11 - (HEAP32[i12 >> 2] | 0);
  i11 = HEAP32[i12 >> 2] | 0;
  HEAP32[(HEAP32[26881] | 0) + 132 >> 2] = (i11 | 0) < 0 ? 0 : i11 | 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i15 >> 2] = -1;
  HEAP32[i17 >> 2] = _ml_get_curline() | 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0)) break;
   HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   i11 = HEAP32[i17 >> 2] | 0;
   i9 = _lbr_chartabsize(i11 | 0, i11 + (HEAP32[i15 >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0) | 0;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i9;
  }
  HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
  if ((HEAP32[i12 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i16 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
   HEAP32[i17 >> 2] = _alloc((HEAP32[i16 >> 2] | 0) + 1 | 0) | 0;
   if (HEAP32[i17 >> 2] | 0) {
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
    HEAP8[(HEAP32[i17 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] = 0;
    while (1) {
     i9 = (HEAP32[i16 >> 2] | 0) + -1 | 0;
     HEAP32[i16 >> 2] = i9;
     i21 = HEAP32[i17 >> 2] | 0;
     if ((i9 | 0) < 0) break;
     HEAP8[i21 + (HEAP32[i16 >> 2] | 0) >> 0] = 32;
    }
    _ins_str(i21);
    _vim_free(HEAP32[i17 >> 2] | 0);
   }
  }
  HEAP32[i14 >> 2] = 2147483647;
 } while (0);
 HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = HEAP32[i18 >> 2];
 if ((HEAP32[i15 >> 2] | 0) <= 0) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0; else HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i15 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 _changed_cline_bef_curs();
 do if (HEAP32[10180] & 16 | 0) {
  do if (HEAP32[27123] | 0 ? (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27122] | 0) : 0) if ((HEAP32[27123] | 0) <= (HEAP32[i14 >> 2] | 0)) {
   HEAP32[27123] = 0;
   break;
  } else {
   HEAP32[27123] = (HEAP32[27123] | 0) - (HEAP32[i14 >> 2] | 0);
   break;
  } while (0);
  if ((HEAP32[26792] | 0) <= (HEAP32[i14 >> 2] | 0)) {
   HEAP32[26792] = 0;
   break;
  } else {
   HEAP32[26792] = (HEAP32[26792] | 0) - (HEAP32[i14 >> 2] | 0);
   break;
  }
 } while (0);
 if (!((HEAP32[10180] & 64 | 0) != 0 & (HEAP32[i19 >> 2] | 0) >= 0)) {
  STACKTOP = i6;
  return;
 }
 while (1) {
  if ((HEAP32[i19 >> 2] | 0) <= (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
  _replace_join(0);
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + -1;
 }
 while (1) {
  if (!((HEAP32[i19 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) ? 1 : (HEAP32[i10 >> 2] | 0) != 0)) break;
  _replace_push(0);
  if (HEAP32[i10 >> 2] | 0) {
   _replace_push(HEAP32[i10 >> 2] | 0);
   HEAP32[i10 >> 2] = 0;
  }
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
 }
 STACKTOP = i6;
 return;
}

function _find_command(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 + 20 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2];
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 107) {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 196;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  i11 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 L5 : do if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 115) {
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == 99) {
   if (HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) != 115) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) != 114) {
    if (HEAPU8[(HEAP32[i7 >> 2] | 0) + 3 >> 0] | 0) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 3 >> 0] | 0) != 105) {
     if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 4 >> 0] | 0) == 112) i3 = 11;
    } else i3 = 11;
   } else i3 = 11; else i3 = 11;
  } else i3 = 11;
  do if ((i3 | 0) == 11) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) != 103) {
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == 105) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) != 109) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) != 108) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) != 103) break;
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) != 73) {
    if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) != 114) break L5;
    if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) == 101) break L5;
   }
  } while (0);
  HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 370;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  i11 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 } while (0);
 while (1) {
  if (((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) - 97 | 0) >>> 0 >= 26) break;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 L33 : do if ((HEAPU8[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] >> 0] | 0) == 112) if ((HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + 1 >> 0] | 0) == 121) while (1) {
  if (((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) - 97 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break L33;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } while (0);
 if ((HEAP32[i7 >> 2] | 0) == (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0)) if (_vim_strchr(51125, HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 HEAP32[i6 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0);
 do if ((HEAPU8[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] >> 0] | 0) == 100) {
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) != 108) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) != 112) break;
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
   if ((HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0) != (HEAPU8[64149 + (HEAP32[i8 >> 2] | 0) >> 0] | 0)) break;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  if ((HEAP32[i8 >> 2] | 0) == ((HEAP32[i6 >> 2] | 0) - 1 | 0)) {
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
   i3 = (HEAP32[i5 >> 2] | 0) + 48 | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) == 108) {
    HEAP32[i3 >> 2] = i2 | 1;
    break;
   } else {
    HEAP32[i3 >> 2] = i2 | 4;
    break;
   }
  }
 } while (0);
 i8 = HEAP32[i5 >> 2] | 0;
 if (((HEAPU8[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] >> 0] | 0) - 97 | 0) >>> 0 < 26) {
  HEAP32[i9 >> 2] = HEAPU8[HEAP32[i8 + 8 >> 2] >> 0];
  HEAP32[i10 >> 2] = HEAPU8[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + 1 >> 0];
  HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = HEAPU16[41476 + ((HEAP32[i9 >> 2] | 0) - 97 << 1) >> 1];
  if (((HEAP32[i10 >> 2] | 0) - 97 | 0) >>> 0 < 26) {
   i2 = (HEAP32[i5 >> 2] | 0) + 16 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAPU8[51135 + (((HEAP32[i9 >> 2] | 0) - 97 | 0) * 26 | 0) + ((HEAP32[i10 >> 2] | 0) - 97) >> 0] | 0);
  }
 } else HEAP32[i8 + 16 >> 2] = 532;
 while (1) {
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) >= 544) break;
  if (!(_strncmp(HEAP32[1336 + (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] << 4) >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) break;
  i8 = (HEAP32[i5 >> 2] | 0) + 16 | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((HEAP32[i7 >> 2] | 0) != (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0)) {
  i11 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 544;
 i11 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _find_decl(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i8 = i7;
 i9 = i7 + 88 | 0;
 i10 = i7 + 84 | 0;
 i11 = i7 + 80 | 0;
 i12 = i7 + 76 | 0;
 i13 = i7 + 72 | 0;
 i14 = i7 + 68 | 0;
 i15 = i7 + 64 | 0;
 i16 = i7 + 56 | 0;
 i17 = i7 + 48 | 0;
 i18 = i7 + 40 | 0;
 i19 = i7 + 36 | 0;
 i20 = i7 + 32 | 0;
 i21 = i7 + 28 | 0;
 i22 = i7 + 24 | 0;
 i23 = i7 + 16 | 0;
 i24 = i7 + 12 | 0;
 i25 = i7 + 8 | 0;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i22 >> 2] = 1;
 HEAP32[i23 >> 2] = HEAP32[i14 >> 2];
 i14 = _alloc((HEAP32[i11 >> 2] | 0) + 7 | 0) | 0;
 HEAP32[i15 >> 2] = i14;
 if (!i14) {
  HEAP32[i9 >> 2] = 0;
  i26 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i7;
  return i26 | 0;
 }
 i14 = HEAP32[i15 >> 2] | 0;
 i5 = (_vim_iswordp(HEAP32[i10 >> 2] | 0) | 0) != 0;
 i4 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 + 4 >> 2] = i4;
 _sprintf(i14, i5 ? 61734 : 61745, i8) | 0;
 i8 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i16 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i16 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i20 >> 2] = HEAP32[27038];
 HEAP32[i21 >> 2] = HEAP32[26991];
 HEAP32[27038] = 0;
 HEAP32[26991] = 0;
 L5 : do if (HEAP32[i12 >> 2] | 0) if (_findpar(i7 + 20 | 0, -1, 1, 123, 0) | 0) {
  i8 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i17 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  while (1) {
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= 1) break L5;
   if (!(HEAPU8[(_skipwhite(_ml_get_curline() | 0) | 0) >> 0] | 0)) break L5;
   i8 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
  }
 } else i6 = 5; else i6 = 5; while (0);
 if ((i6 | 0) == 5) {
  _setpcmark();
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
  i8 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i17 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 }
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 while (1) {
  HEAP32[i24 >> 2] = 0;
  i8 = HEAP32[26881] | 0;
  i5 = _searchit(i8 | 0, HEAP32[26773] | 0, i8 + 24 | 0, 1, HEAP32[i15 >> 2] | 0, 1, HEAP32[i23 >> 2] | 0, 2, 0, 0, 0) | 0;
  HEAP32[i19 >> 2] = i5;
  HEAP32[i19 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (HEAP32[i16 >> 2] | 0) ? 0 : i5;
  if ((HEAP32[i13 >> 2] | 0) != 0 & (HEAP32[i19 >> 2] | 0) != 0) {
   i5 = _findmatchlimit(0, 125, 2, (HEAP32[i16 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0) | 0;
   HEAP32[i25 >> 2] = i5;
   if (i5 | 0) if ((HEAP32[HEAP32[i25 >> 2] >> 2] | 0) < (HEAP32[i16 >> 2] | 0)) {
    i5 = (HEAP32[26881] | 0) + 24 | 0;
    i8 = HEAP32[i25 >> 2] | 0;
    HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
    continue;
   }
  }
  if (!(HEAP32[i19 >> 2] | 0)) {
   i6 = 16;
   break;
  }
  i8 = _ml_get_curline() | 0;
  HEAP32[i24 >> 2] = _is_ident(i8, HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) | 0;
  if (!(HEAP32[i24 >> 2] | 0)) if (HEAP32[i18 >> 2] | 0) {
   i6 = 20;
   break;
  }
  if (!((HEAP32[i24 >> 2] | 0) == 0 | (HEAP32[i12 >> 2] | 0) != 0)) break;
  if (HEAP32[i24 >> 2] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) {
   i6 = 24;
   break;
  }
  if (HEAP32[i24 >> 2] | 0) {
   i8 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i18 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i18 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  } else {
   HEAP32[i18 >> 2] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
  }
  HEAP32[i23 >> 2] = HEAP32[i23 >> 2] & -257;
 }
 if ((i6 | 0) == 16) {
  if (HEAP32[i18 >> 2] | 0) {
   i23 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i23 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i23 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[i19 >> 2] = 1;
  }
 } else if ((i6 | 0) == 20) {
  i23 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i23 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i23 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 } else if ((i6 | 0) == 24) if (HEAP32[i18 >> 2] | 0) {
  i6 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i6 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
 }
 if (!(HEAP32[i19 >> 2] | 0)) {
  HEAP32[i22 >> 2] = 0;
  i19 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i19 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
 } else {
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  _reset_search_dir();
 }
 _vim_free(HEAP32[i15 >> 2] | 0);
 HEAP32[27038] = HEAP32[i20 >> 2];
 HEAP32[26991] = HEAP32[i21 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i22 >> 2];
 i26 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i7;
 return i26 | 0;
}

function _gui_outstr_nowrap(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i9 = i8 + 60 | 0;
 i10 = i8 + 56 | 0;
 i11 = i8 + 52 | 0;
 i12 = i8 + 48 | 0;
 i13 = i8 + 44 | 0;
 i14 = i8 + 40 | 0;
 i15 = i8 + 36 | 0;
 i16 = i8 + 32 | 0;
 i17 = i8 + 28 | 0;
 i18 = i8 + 24 | 0;
 i19 = i8 + 20 | 0;
 i20 = i8 + 16 | 0;
 i21 = i8 + 12 | 0;
 i22 = i8 + 8 | 0;
 i23 = i8 + 4 | 0;
 i24 = i8;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i24 >> 2] = HEAP32[26635];
 if ((HEAP32[i11 >> 2] | 0) < 0) HEAP32[i11 >> 2] = _strlen(HEAP32[i10 >> 2] | 0) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[i9 >> 2] = 1;
  i25 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i25 | 0;
 }
 i6 = HEAP32[26646] | 0;
 do if ((HEAP32[26646] | 0) > 255) {
  HEAP32[i22 >> 2] = _syn_gui_attr2entry(i6) | 0;
  if (!(HEAP32[i22 >> 2] | 0)) {
   HEAP32[i16 >> 2] = 0;
   break;
  } else {
   HEAP32[i16 >> 2] = HEAP16[HEAP32[i22 >> 2] >> 1];
   break;
  }
 } else HEAP32[i16 >> 2] = i6; while (0);
 HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
 if (HEAP32[i22 >> 2] | 0) if (HEAP32[(HEAP32[i22 >> 2] | 0) + 4 + 12 >> 2] | 0) HEAP32[i21 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 4 + 12 >> 2]; else i7 = 13; else i7 = 13;
 do if ((i7 | 0) == 13) {
  i6 = (HEAP32[i17 >> 2] & 4 | 0) != 0;
  if (!(HEAP32[i17 >> 2] & 34)) if (i6 & (HEAP32[26672] | 0) != 0) {
   HEAP32[i21 >> 2] = HEAP32[26672];
   HEAP32[i17 >> 2] = HEAP32[i17 >> 2] & -5;
   break;
  } else {
   HEAP32[i21 >> 2] = HEAP32[26670];
   break;
  }
  if (i6 & (HEAP32[26673] | 0) != 0) {
   HEAP32[i21 >> 2] = HEAP32[26673];
   HEAP32[i17 >> 2] = HEAP32[i17 >> 2] & -39;
   break;
  }
  if (HEAP32[26671] | 0) {
   HEAP32[i21 >> 2] = HEAP32[26671];
   HEAP32[i17 >> 2] = HEAP32[i17 >> 2] & -35;
   break;
  } else {
   HEAP32[i21 >> 2] = HEAP32[26670];
   break;
  }
 } while (0);
 _gui_mch_set_font(HEAP32[i21 >> 2] | 0);
 HEAP32[i23 >> 2] = 0;
 HEAP32[i19 >> 2] = HEAP32[26674];
 do if ((HEAP32[i12 >> 2] & 4 | 0) != 0 & (HEAP32[26626] | 0) != 0) {
  HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 32;
  HEAP32[i18 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i19 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i20 >> 2] = HEAP32[i13 >> 2];
 } else {
  if (!(HEAP32[i22 >> 2] | 0)) {
   HEAP32[i18 >> 2] = HEAP32[26675];
   HEAP32[i20 >> 2] = HEAP32[i18 >> 2];
   break;
  }
  HEAP32[i18 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2];
  if ((HEAP32[i18 >> 2] | 0) == -11111) HEAP32[i18 >> 2] = HEAP32[26675];
  HEAP32[i19 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 4 + 4 >> 2];
  if ((HEAP32[i19 >> 2] | 0) == -11111) HEAP32[i19 >> 2] = HEAP32[26674];
  HEAP32[i20 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 4 + 8 >> 2];
  if ((HEAP32[i20 >> 2] | 0) == -11111) HEAP32[i20 >> 2] = HEAP32[i18 >> 2];
 } while (0);
 if (HEAP32[i16 >> 2] & 33 | 0) {
  _gui_mch_set_fg_color(HEAP32[i19 >> 2] | 0);
  _gui_mch_set_bg_color(HEAP32[i18 >> 2] | 0);
 } else {
  _gui_mch_set_fg_color(HEAP32[i18 >> 2] | 0);
  _gui_mch_set_bg_color(HEAP32[i19 >> 2] | 0);
 }
 _gui_mch_set_sp_color(HEAP32[i20 >> 2] | 0);
 if (!(HEAP32[i12 >> 2] & 16)) {
  i20 = HEAP32[26636] | 0;
  _clip_may_clear_selection(i20 | 0, i20 | 0);
 }
 if (HEAP32[i17 >> 2] & 34 | 0) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 do if (HEAP32[i15 >> 2] | 0) {
  if (!(HEAP32[i23 >> 2] & 2)) if (!(HEAP32[i16 >> 2] & 4)) break;
  HEAP32[i9 >> 2] = 0;
  i25 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i25 | 0;
 } while (0);
 if (HEAP32[i17 >> 2] & 8 | 0) i7 = 45; else if (HEAP32[i17 >> 2] & 4 | 0) i7 = 45;
 if ((i7 | 0) == 45) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 4;
 if (HEAP32[i17 >> 2] & 16 | 0) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 8;
 if (HEAP32[i17 >> 2] & 128 | 0) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 64;
 if (HEAP32[i12 >> 2] & 8 | 0) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 1;
 _gui_mch_draw_string(HEAP32[26636] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i23 >> 2] | 0);
 if (!(HEAP32[i12 >> 2] & 12)) HEAP32[26635] = (HEAP32[i24 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 if (HEAP32[i12 >> 2] & 16 | 0) _clip_may_redraw_selection(HEAP32[26636] | 0, HEAP32[i24 >> 2] | 0, HEAP32[i11 >> 2] | 0);
 if (!(HEAP32[i12 >> 2] & 12)) if ((HEAP32[26638] | 0) == (HEAP32[26636] | 0)) if ((HEAP32[26637] | 0) >= (HEAP32[i24 >> 2] | 0)) if ((HEAP32[26637] | 0) < ((HEAP32[i24 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0)) HEAP8[106556] = 0;
 HEAP32[i9 >> 2] = 1;
 i25 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i8;
 return i25 | 0;
}

function _gui_update_cursor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4 + 48 | 0;
 i6 = i4 + 44 | 0;
 i7 = i4 + 40 | 0;
 i8 = i4 + 36 | 0;
 i9 = i4 + 32 | 0;
 i10 = i4 + 28 | 0;
 i11 = i4 + 24 | 0;
 i12 = i4 + 20 | 0;
 i13 = i4 + 16 | 0;
 i14 = i4 + 12 | 0;
 i15 = i4 + 8 | 0;
 i16 = i4 + 4 | 0;
 i17 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 if (!(HEAP32[8608] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[26697] | 0) != (HEAP32[26640] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[26696] | 0) != (HEAP32[26641] | 0)) {
  STACKTOP = i4;
  return;
 }
 _gui_check_pos();
 if (!((HEAP8[106556] | 0) == 0 | (HEAP32[i5 >> 2] | 0) != 0)) if ((HEAP32[26636] | 0) == (HEAP32[26638] | 0)) if ((HEAP32[26635] | 0) == (HEAP32[26637] | 0)) {
  STACKTOP = i4;
  return;
 }
 _gui_undraw_cursor();
 if ((HEAP32[26636] | 0) < 0) {
  STACKTOP = i4;
  return;
 }
 HEAP32[26638] = HEAP32[26636];
 HEAP32[26637] = HEAP32[26635];
 if ((HEAP32[26704] | 0) == 0 | (HEAP32[26691] | 0) == 0) {
  STACKTOP = i4;
  return;
 }
 if (HEAP32[i6 >> 2] | 0) {
  i6 = HEAP32[26636] | 0;
  _clip_may_clear_selection(i6 | 0, i6 | 0);
 }
 if ((HEAP32[26636] | 0) >= (HEAP32[26696] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[26635] | 0) >= (HEAP32[26697] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP8[106556] = 1;
 HEAP32[i10 >> 2] = 10940 + ((_get_shape_idx(0) | 0) * 40 | 0);
 i6 = HEAP32[i10 >> 2] | 0;
 if (HEAP32[10180] & 32 | 0) HEAP32[i11 >> 2] = HEAP32[i6 + 28 >> 2]; else HEAP32[i11 >> 2] = HEAP32[i6 + 24 >> 2];
 HEAP32[i12 >> 2] = -11111;
 HEAP32[i13 >> 2] = -11111;
 HEAP32[i15 >> 2] = 1;
 i6 = HEAP32[i10 >> 2] | 0;
 _gui_mch_set_blinking(HEAP32[i6 + 12 >> 2] | 0, HEAP32[i6 + 16 >> 2] | 0, HEAP32[i6 + 20 >> 2] | 0);
 if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0)) i3 = 19; else if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] | 0)) i3 = 19; else if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] | 0)) i3 = 19;
 if ((i3 | 0) == 19) _gui_mch_stop_blink(0);
 if ((HEAP32[i11 >> 2] | 0) > 0) HEAP32[i15 >> 2] = _syn_id2colors(HEAP32[i11 >> 2] | 0, i12, i13) | 0;
 HEAP32[i16 >> 2] = HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[(HEAP32[26693] | 0) + (HEAP32[26636] << 2) >> 2] | 0) + (HEAP32[26635] | 0) << 1) >> 1];
 if ((HEAP32[i16 >> 2] | 0) > 255) HEAP32[i17 >> 2] = _syn_gui_attr2entry(HEAP32[i16 >> 2] | 0) | 0;
 if (HEAP32[i17 >> 2] | 0) {
  HEAP32[i16 >> 2] = HEAP16[HEAP32[i17 >> 2] >> 1];
  if ((HEAP32[i12 >> 2] | 0) == -11111) {
   i11 = (HEAP32[i17 >> 2] | 0) + 4 | 0;
   if (HEAP32[i16 >> 2] & 1 | 0) i18 = HEAP32[i11 + 4 >> 2] | 0; else i18 = HEAP32[i11 >> 2] | 0;
   HEAP32[i12 >> 2] = i18;
  }
  if ((HEAP32[i13 >> 2] | 0) == -11111) {
   i18 = (HEAP32[i17 >> 2] | 0) + 4 | 0;
   if (HEAP32[i16 >> 2] & 1 | 0) i19 = HEAP32[i18 >> 2] | 0; else i19 = HEAP32[i18 + 4 >> 2] | 0;
   HEAP32[i13 >> 2] = i19;
  }
 }
 if ((HEAP32[i12 >> 2] | 0) == -11111) HEAP32[i12 >> 2] = HEAP32[i16 >> 2] & 1 | 0 ? HEAP32[26674] | 0 : HEAP32[26675] | 0;
 if ((HEAP32[i13 >> 2] | 0) == -11111) HEAP32[i13 >> 2] = HEAP32[i16 >> 2] & 1 | 0 ? HEAP32[26675] | 0 : HEAP32[26674] | 0;
 HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -2;
 if (HEAP32[i15 >> 2] & 1 | 0) {
  HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 }
 HEAP32[i15 >> 2] = HEAP32[i15 >> 2] & -2;
 if (!(HEAP32[26626] | 0)) {
  _gui_mch_draw_hollow_cursor(HEAP32[i13 >> 2] | 0);
  STACKTOP = i4;
  return;
 }
 HEAP32[i9 >> 2] = HEAP32[26646];
 if (!(HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) {
  HEAP32[26646] = HEAP32[i15 >> 2] | HEAP32[i16 >> 2];
  _gui_screenchar((HEAP32[(HEAP32[26693] | 0) + (HEAP32[26636] << 2) >> 2] | 0) + (HEAP32[26635] | 0) | 0, 20, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, 0) | 0;
 } else {
  i12 = HEAP32[26666] | 0;
  if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == 2) {
   HEAP32[i8 >> 2] = i12;
   HEAP32[i7 >> 2] = ((Math_imul(HEAP32[26665] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) | 0) + 99 | 0) / 100 | 0;
  } else {
   HEAP32[i8 >> 2] = ((Math_imul(i12, HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) | 0) + 99 | 0) / 100 | 0;
   HEAP32[i7 >> 2] = HEAP32[26665];
  }
  _gui_mch_draw_part_cursor(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0);
  HEAP32[26646] = HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[(HEAP32[26693] | 0) + (HEAP32[26636] << 2) >> 2] | 0) + (HEAP32[26635] | 0) << 1) >> 1];
  _gui_screenchar((HEAP32[(HEAP32[26693] | 0) + (HEAP32[26636] << 2) >> 2] | 0) + (HEAP32[26635] | 0) | 0, 24, 0, 0, 0) | 0;
 }
 HEAP32[26646] = HEAP32[i9 >> 2];
 STACKTOP = i4;
 return;
}

function _do_bang(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i8 = i7 + 64 | 0;
 i9 = i7 + 60 | 0;
 i10 = i7 + 56 | 0;
 i11 = i7 + 52 | 0;
 i12 = i7 + 48 | 0;
 i13 = i7 + 44 | 0;
 i14 = i7 + 40 | 0;
 i15 = i7 + 36 | 0;
 i16 = i7 + 32 | 0;
 i17 = i7 + 28 | 0;
 i18 = i7 + 24 | 0;
 i19 = i7 + 20 | 0;
 i20 = i7 + 16 | 0;
 i21 = i7 + 12 | 0;
 i22 = i7 + 8 | 0;
 i23 = i7 + 4 | 0;
 i24 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2];
 HEAP32[i15 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 40 >> 2];
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i23 >> 2] = HEAP32[26710];
 if (_check_restricted() | 0) {
  STACKTOP = i7;
  return;
 }
 if (_check_secure() | 0) {
  STACKTOP = i7;
  return;
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[26710] = 0;
  _autowrite_all();
  HEAP32[26710] = HEAP32[i23 >> 2];
 }
 HEAP32[i18 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i21 >> 2] = HEAP32[i13 >> 2];
 while (1) {
  HEAP32[i22 >> 2] = (_strlen(HEAP32[i21 >> 2] | 0) | 0) + 1;
  if (HEAP32[i16 >> 2] | 0) {
   i13 = _strlen(HEAP32[i16 >> 2] | 0) | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + i13;
  }
  if (HEAP32[i18 >> 2] | 0) {
   if (!(HEAP32[25222] | 0)) {
    i6 = 10;
    break;
   }
   i13 = _strlen(HEAP32[25222] | 0) | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + i13;
  }
  i13 = _alloc(HEAP32[i22 >> 2] | 0) | 0;
  HEAP32[i19 >> 2] = i13;
  if (!i13) {
   i6 = 13;
   break;
  }
  HEAP8[HEAP32[i19 >> 2] >> 0] = 0;
  if (HEAP32[i16 >> 2] | 0) _strcat(HEAP32[i19 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0;
  if (HEAP32[i18 >> 2] | 0) _strcat(HEAP32[i19 >> 2] | 0, HEAP32[25222] | 0) | 0;
  i13 = HEAP32[i19 >> 2] | 0;
  HEAP32[i20 >> 2] = i13 + (_strlen(HEAP32[i19 >> 2] | 0) | 0);
  _strcat(HEAP32[i19 >> 2] | 0, HEAP32[i21 >> 2] | 0) | 0;
  _vim_free(HEAP32[i16 >> 2] | 0);
  HEAP32[i16 >> 2] = HEAP32[i19 >> 2];
  HEAP32[i21 >> 2] = 0;
  while (1) {
   if (!(HEAP8[HEAP32[i20 >> 2] >> 0] | 0)) break;
   if ((HEAPU8[HEAP32[i20 >> 2] >> 0] | 0) == 33) {
    if ((HEAP32[i20 >> 2] | 0) >>> 0 <= (HEAP32[i16 >> 2] | 0) >>> 0) {
     i6 = 24;
     break;
    }
    if ((HEAPU8[(HEAP32[i20 >> 2] | 0) + -1 >> 0] | 0) != 92) {
     i6 = 24;
     break;
    }
    i13 = HEAP32[i20 >> 2] | 0;
    i10 = i13 + -1 | 0;
    i23 = i13 | 0;
    _memmove(i10 | 0, i23 | 0, (_strlen(HEAP32[i20 >> 2] | 0) | 0) + 1 | 0) | 0;
   }
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
  if ((i6 | 0) == 24) {
   i6 = 0;
   HEAP32[i21 >> 2] = HEAP32[i20 >> 2];
   i23 = HEAP32[i21 >> 2] | 0;
   HEAP32[i21 >> 2] = i23 + 1;
   HEAP8[i23 >> 0] = 0;
   HEAP32[i18 >> 2] = 1;
  }
  if (!(HEAP32[i21 >> 2] | 0)) {
   i6 = 27;
   break;
  }
 }
 if ((i6 | 0) == 10) {
  _emsg(93130) | 0;
  _vim_free(HEAP32[i16 >> 2] | 0);
  STACKTOP = i7;
  return;
 } else if ((i6 | 0) == 13) {
  _vim_free(HEAP32[i16 >> 2] | 0);
  STACKTOP = i7;
  return;
 } else if ((i6 | 0) == 27) {
  _vim_free(HEAP32[25222] | 0);
  HEAP32[25222] = HEAP32[i16 >> 2];
  if (HEAP32[26837] | 0) {
   HEAP32[i24 >> 2] = _vim_strsave_escaped(HEAP32[25222] | 0, 42835) | 0;
   if (HEAP32[i24 >> 2] | 0) {
    _AppendToRedobuffLit(HEAP32[i24 >> 2] | 0, -1);
    _vim_free(HEAP32[i24 >> 2] | 0);
   } else _AppendToRedobuffLit(HEAP32[25222] | 0, -1);
   _AppendToRedobuff(97581);
   HEAP32[26837] = 0;
  }
  do if (HEAPU8[HEAP32[26979] >> 0] | 0) {
   i24 = _strlen(HEAP32[25222] | 0) | 0;
   HEAP32[i16 >> 2] = _alloc(i24 + ((_strlen(HEAP32[26979] | 0) | 0) << 1) + 1 | 0) | 0;
   if (!(HEAP32[i16 >> 2] | 0)) {
    STACKTOP = i7;
    return;
   } else {
    _strcpy(HEAP32[i16 >> 2] | 0, HEAP32[26979] | 0) | 0;
    _strcat(HEAP32[i16 >> 2] | 0, HEAP32[25222] | 0) | 0;
    _strcat(HEAP32[i16 >> 2] | 0, HEAP32[26979] | 0) | 0;
    HEAP32[i17 >> 2] = 1;
    break;
   }
  } while (0);
  if (!(HEAP32[i8 >> 2] | 0)) {
   _msg_start();
   _msg_putchar(58);
   _msg_putchar(33);
   _msg_outtrans(HEAP32[i16 >> 2] | 0) | 0;
   _msg_clr_eos();
   _windgoto(HEAP32[26877] | 0, HEAP32[27043] | 0);
   _do_shell(HEAP32[i16 >> 2] | 0, 0);
  } else {
   _do_filter(HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0);
   _apply_autocmds(69, 0, 0, 0, HEAP32[26773] | 0) | 0;
  }
  if (!(HEAP32[i17 >> 2] | 0)) {
   STACKTOP = i7;
   return;
  }
  _vim_free(HEAP32[i16 >> 2] | 0);
  STACKTOP = i7;
  return;
 }
}

function _hash_may_resize(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i5 = i4 + 184 | 0;
 i6 = i4 + 180 | 0;
 i7 = i4 + 176 | 0;
 i8 = i4 + 48 | 0;
 i9 = i4 + 40 | 0;
 i10 = i4 + 36 | 0;
 i11 = i4 + 32 | 0;
 i12 = i4 + 28 | 0;
 i13 = i4 + 24 | 0;
 i14 = i4 + 20 | 0;
 i15 = i4 + 16 | 0;
 i16 = i4 + 12 | 0;
 i17 = i4 + 8 | 0;
 i18 = i4 + 4 | 0;
 i19 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) > 0) {
  HEAP32[i5 >> 2] = 1;
  i20 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i20 | 0;
 }
 do if (!(HEAP32[i7 >> 2] | 0)) {
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) >>> 0 < 15) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) == ((HEAP32[i6 >> 2] | 0) + 24 | 0)) {
   HEAP32[i5 >> 2] = 1;
   i20 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i20 | 0;
  }
  HEAP32[i15 >> 2] = (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 1;
  if (((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) * 3 | 0) >>> 0 < HEAP32[i15 >> 2] << 1 >>> 0) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > (((HEAP32[i15 >> 2] | 0) >>> 0) / 5 | 0) >>> 0) {
   HEAP32[i5 >> 2] = 1;
   i20 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i20 | 0;
  }
  i2 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 1e3) {
   HEAP32[i17 >> 2] = i2 << 1;
   break;
  } else {
   HEAP32[i17 >> 2] = i2 << 2;
   break;
  }
 } else {
  if ((HEAP32[i7 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) >>> 0) HEAP32[i7 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2];
  HEAP32[i17 >> 2] = ((HEAP32[i7 >> 2] | 0) * 3 | 0) / 2 | 0;
 } while (0);
 HEAP32[i16 >> 2] = 16;
 while (1) {
  i21 = HEAP32[i16 >> 2] | 0;
  if ((HEAP32[i16 >> 2] | 0) >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) break;
  HEAP32[i16 >> 2] = i21 << 1;
  if (!(HEAP32[i16 >> 2] | 0)) {
   i3 = 19;
   break;
  }
 }
 if ((i3 | 0) == 19) {
  HEAP32[i5 >> 2] = 0;
  i20 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i20 | 0;
 }
 do if ((i21 | 0) == 16) {
  HEAP32[i10 >> 2] = (HEAP32[i6 >> 2] | 0) + 24;
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) {
   _memmove(i8 | 0, HEAP32[i10 >> 2] | 0, 128) | 0;
   HEAP32[i9 >> 2] = i8;
   break;
  } else {
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2];
   break;
  }
 } else {
  HEAP32[i10 >> 2] = _alloc(HEAP32[i16 >> 2] << 3) | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  if (HEAP32[i10 >> 2] | 0) {
   HEAP32[i9 >> 2] = HEAP32[i3 + 20 >> 2];
   break;
  }
  if ((HEAP32[i3 + 8 >> 2] | 0) >>> 0 < (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) >>> 0) {
   HEAP32[i5 >> 2] = 1;
   i20 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i20 | 0;
  } else {
   HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 1;
   HEAP32[i5 >> 2] = 0;
   i20 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i20 | 0;
  }
 } while (0);
 _memset(HEAP32[i10 >> 2] | 0, 0, HEAP32[i16 >> 2] << 3 | 0) | 0;
 HEAP32[i18 >> 2] = (HEAP32[i16 >> 2] | 0) - 1;
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 while (1) {
  if ((HEAP32[i14 >> 2] | 0) <= 0) break;
  if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) != 113987) {
   HEAP32[i13 >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2] & HEAP32[i18 >> 2];
   HEAP32[i12 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i13 >> 2] << 3);
   L54 : do if (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) {
    HEAP32[i19 >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
    while (1) {
     HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] << 2) + (HEAP32[i13 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + 1;
     HEAP32[i12 >> 2] = (HEAP32[i10 >> 2] | 0) + ((HEAP32[i13 >> 2] & HEAP32[i18 >> 2]) << 3);
     if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0)) break L54;
     HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) >>> 5;
    }
   } while (0);
   i9 = HEAP32[i12 >> 2] | 0;
   i16 = HEAP32[i11 >> 2] | 0;
   HEAP32[i9 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 8;
 }
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) != ((HEAP32[i6 >> 2] | 0) + 24 | 0)) _vim_free(HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0);
 HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = HEAP32[i10 >> 2];
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i18 >> 2];
 i18 = HEAP32[i6 >> 2] | 0;
 HEAP32[i18 + 8 >> 2] = HEAP32[i18 + 4 >> 2];
 HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[i5 >> 2] = 1;
 i20 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i20 | 0;
}

function _get_attr_entry(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = 20;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] = 7;
 HEAP32[i8 >> 2] = 0;
 L1 : while (1) {
  i10 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) break;
  HEAP32[i9 >> 2] = (HEAP32[i10 + 16 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) * 20 | 0);
  if ((HEAP16[HEAP32[i7 >> 2] >> 1] | 0) == (HEAP16[HEAP32[i9 >> 2] >> 1] | 0)) {
   if ((HEAP32[i6 >> 2] | 0) == 105964) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 4 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 8 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 8 >> 2] | 0)) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 12 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 12 >> 2] | 0)) {
    i3 = 19;
    break;
   }
   do if ((HEAP32[i6 >> 2] | 0) == 105984) if (((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) == 0 | 0) == ((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) == 0 | 0)) {
    if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) if (_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) | 0) break;
    if (((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 4 >> 2] | 0) == 0 | 0) == ((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 4 >> 2] | 0) == 0 | 0)) {
     if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 4 >> 2] | 0)) {
      i3 = 19;
      break L1;
     }
     if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 4 >> 2] | 0, HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 4 >> 2] | 0) | 0)) {
      i3 = 19;
      break L1;
     }
    }
   } while (0);
   if ((HEAP32[i6 >> 2] | 0) == 106004) if ((HEAPU16[(HEAP32[i7 >> 2] | 0) + 4 >> 1] | 0) == (HEAPU16[(HEAP32[i9 >> 2] | 0) + 4 >> 1] | 0)) if ((HEAPU16[(HEAP32[i7 >> 2] | 0) + 4 + 2 >> 1] | 0) == (HEAPU16[(HEAP32[i9 >> 2] | 0) + 4 + 2 >> 1] | 0)) {
    i3 = 19;
    break;
   }
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 19) {
  HEAP32[i5 >> 2] = (HEAP32[i8 >> 2] | 0) + 256;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 if (((HEAP32[i10 >> 2] | 0) + 256 | 0) > 65535) {
  if (HEAP32[26506] | 0) {
   _emsg(76858) | 0;
   HEAP32[i5 >> 2] = 0;
   i11 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i11 | 0;
  }
  HEAP32[26506] = 1;
  _clear_hl_tables();
  HEAP32[26828] = 50;
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[26486] | 0)) break;
   _set_hl_attr(HEAP32[i8 >> 2] | 0);
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  HEAP32[26506] = 0;
 }
 if (!(_ga_grow(HEAP32[i6 >> 2] | 0, 1) | 0)) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i9 >> 2] = (HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0) + ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) * 20 | 0);
 i8 = HEAP32[i9 >> 2] | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 HEAP16[HEAP32[i9 >> 2] >> 1] = HEAP16[HEAP32[i7 >> 2] >> 1] | 0;
 if ((HEAP32[i6 >> 2] | 0) == 105964) {
  HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
  HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 4 >> 2];
  HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 8 >> 2];
  HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 12 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 12 >> 2];
 }
 do if ((HEAP32[i6 >> 2] | 0) == 105984) {
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = 0; else {
   i8 = _vim_strsave(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = i8;
  }
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 4 >> 2] | 0)) {
   HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 4 >> 2] = 0;
   break;
  } else {
   i8 = _vim_strsave(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + 4 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i9 >> 2] | 0) + 4 + 4 >> 2] = i8;
   break;
  }
 } else if ((HEAP32[i6 >> 2] | 0) == 106004) {
  HEAP16[(HEAP32[i9 >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[i7 >> 2] | 0) + 4 >> 1] | 0;
  HEAP16[(HEAP32[i9 >> 2] | 0) + 4 + 2 >> 1] = HEAP16[(HEAP32[i7 >> 2] | 0) + 4 + 2 >> 1] | 0;
 } while (0);
 i7 = HEAP32[i6 >> 2] | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 HEAP32[i5 >> 2] = (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) - 1 + 256;
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _ins_typebuf(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 52 | 0;
 i9 = i7 + 48 | 0;
 i10 = i7 + 44 | 0;
 i11 = i7 + 40 | 0;
 i12 = i7 + 36 | 0;
 i13 = i7 + 32 | 0;
 i14 = i7 + 28 | 0;
 i15 = i7 + 24 | 0;
 i16 = i7 + 20 | 0;
 i17 = i7 + 16 | 0;
 i18 = i7 + 12 | 0;
 i19 = i7 + 8 | 0;
 i20 = i7 + 4 | 0;
 i21 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 _init_typebuf();
 i5 = (HEAP32[26825] | 0) + 1 | 0;
 HEAP32[26825] = i5;
 HEAP32[26825] = (i5 | 0) == 0 ? 1 : i5;
 HEAP32[i17 >> 2] = _strlen(HEAP32[i9 >> 2] | 0) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) if ((HEAP32[i17 >> 2] | 0) <= (HEAP32[26820] | 0)) {
  HEAP32[26820] = (HEAP32[26820] | 0) - (HEAP32[i17 >> 2] | 0);
  _memmove((HEAP32[26817] | 0) + (HEAP32[26820] | 0) | 0, HEAP32[i9 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
 } else i6 = 4; else i6 = 4;
 do if ((i6 | 0) == 4) {
  if (!(HEAP32[26821] | 0)) if ((HEAP32[26819] | 0) >= ((HEAP32[i17 >> 2] | 0) + 162 | 0)) {
   HEAP32[26820] = ((HEAP32[26819] | 0) - (HEAP32[i17 >> 2] | 0) - 162 | 0) / 2 | 0;
   _memmove((HEAP32[26817] | 0) + (HEAP32[26820] | 0) | 0, HEAP32[i9 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
   break;
  }
  HEAP32[i19 >> 2] = 54;
  HEAP32[i16 >> 2] = (HEAP32[26821] | 0) + (HEAP32[i17 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + 216;
  if ((HEAP32[i16 >> 2] | 0) < 0) {
   _emsg(93759) | 0;
   _setcursor();
   HEAP32[i8 >> 2] = 0;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i22 | 0;
  }
  HEAP32[i14 >> 2] = _alloc(HEAP32[i16 >> 2] | 0) | 0;
  if (!(HEAP32[i14 >> 2] | 0)) {
   HEAP32[i8 >> 2] = 0;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i22 | 0;
  }
  HEAP32[i15 >> 2] = _alloc(HEAP32[i16 >> 2] | 0) | 0;
  if (!(HEAP32[i15 >> 2] | 0)) {
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i8 >> 2] = 0;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i22 | 0;
  }
  HEAP32[26819] = HEAP32[i16 >> 2];
  _memmove((HEAP32[i14 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) | 0, (HEAP32[26817] | 0) + (HEAP32[26820] | 0) | 0, HEAP32[i11 >> 2] | 0) | 0;
  _memmove((HEAP32[i14 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0, HEAP32[i9 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
  i5 = HEAP32[i11 >> 2] | 0;
  _memmove((HEAP32[i14 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + i5 + (HEAP32[i17 >> 2] | 0) | 0, (HEAP32[26817] | 0) + (HEAP32[26820] | 0) + i5 | 0, (HEAP32[26821] | 0) - i5 + 1 | 0) | 0;
  if ((HEAP32[26817] | 0) != 110540) _vim_free(HEAP32[26817] | 0);
  HEAP32[26817] = HEAP32[i14 >> 2];
  _memmove((HEAP32[i15 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) | 0, (HEAP32[26818] | 0) + (HEAP32[26820] | 0) | 0, HEAP32[i11 >> 2] | 0) | 0;
  i5 = HEAP32[i11 >> 2] | 0;
  _memmove((HEAP32[i15 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) + i5 + (HEAP32[i17 >> 2] | 0) | 0, (HEAP32[26818] | 0) + (HEAP32[26820] | 0) + i5 | 0, (HEAP32[26821] | 0) - i5 | 0) | 0;
  if ((HEAP32[26818] | 0) != 110805) _vim_free(HEAP32[26818] | 0);
  HEAP32[26818] = HEAP32[i15 >> 2];
  HEAP32[26820] = HEAP32[i19 >> 2];
 } while (0);
 HEAP32[26821] = (HEAP32[26821] | 0) + (HEAP32[i17 >> 2] | 0);
 do if ((HEAP32[i10 >> 2] | 0) == -2) HEAP32[i20 >> 2] = 2; else if ((HEAP32[i10 >> 2] | 0) == -3) {
  HEAP32[i20 >> 2] = 4;
  break;
 } else {
  HEAP32[i20 >> 2] = 1;
  break;
 } while (0);
 do if ((HEAP32[i10 >> 2] | 0) == -3) HEAP32[i21 >> 2] = 1; else if ((HEAP32[i10 >> 2] | 0) < 0) {
  HEAP32[i21 >> 2] = HEAP32[i17 >> 2];
  break;
 } else {
  HEAP32[i21 >> 2] = HEAP32[i10 >> 2];
  break;
 } while (0);
 HEAP32[i18 >> 2] = 0;
 while (1) {
  if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i17 >> 2] | 0)) break;
  i10 = (HEAP32[i21 >> 2] | 0) + -1 | 0;
  HEAP32[i21 >> 2] = i10;
  HEAP8[(HEAP32[26818] | 0) + ((HEAP32[26820] | 0) + (HEAP32[i18 >> 2] | 0) + (HEAP32[i11 >> 2] | 0)) >> 0] = (i10 | 0) >= 0 ? HEAP32[i20 >> 2] | 0 : 0;
  HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
 }
 if (HEAP32[i12 >> 2] | 0) i6 = 33; else if ((HEAP32[26822] | 0) > (HEAP32[i11 >> 2] | 0)) i6 = 33;
 if ((i6 | 0) == 33) HEAP32[26822] = (HEAP32[26822] | 0) + (HEAP32[i17 >> 2] | 0);
 if (HEAP32[i13 >> 2] | 0) i6 = 36; else if ((HEAP32[26823] | 0) > (HEAP32[i11 >> 2] | 0)) i6 = 36;
 if ((i6 | 0) == 36) {
  HEAP32[26823] = (HEAP32[26823] | 0) + (HEAP32[i17 >> 2] | 0);
  HEAP32[26811] = 1;
 }
 if ((HEAP32[26824] | 0) != 0 & (HEAP32[i11 >> 2] | 0) == 0) HEAP32[26824] = (HEAP32[26824] | 0) + (HEAP32[i17 >> 2] | 0);
 HEAP32[i8 >> 2] = 1;
 i22 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i22 | 0;
}

function _findsent(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4 + 48 | 0;
 i6 = i4 + 44 | 0;
 i7 = i4 + 40 | 0;
 i8 = i4 + 32 | 0;
 i9 = i4 + 24 | 0;
 i10 = i4 + 20 | 0;
 i11 = i4 + 16 | 0;
 i12 = i4 + 12 | 0;
 i13 = i4 + 8 | 0;
 i14 = i4 + 4 | 0;
 i15 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i13 >> 2] = 0;
 i2 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 if ((HEAP32[i6 >> 2] | 0) == 1) HEAP32[i11 >> 2] = 2; else HEAP32[i11 >> 2] = 3;
 L5 : while (1) {
  i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i2 + -1;
  if (!i2) {
   i3 = 60;
   break;
  }
  do if (!(_gchar_pos(i8) | 0)) {
   do if ((FUNCTION_TABLE_ii[HEAP32[i11 >> 2] & 3](i8) | 0) == -1) break; while (!(_gchar_pos(i8) | 0));
   if ((HEAP32[i6 >> 2] | 0) != 1) i3 = 19;
  } else {
   if ((HEAP32[i6 >> 2] | 0) == 1) if (!(HEAP32[i8 + 4 >> 2] | 0)) if (_startPS(HEAP32[i8 >> 2] | 0, 0, 0) | 0) {
    if ((HEAP32[i8 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) {
     i3 = 15;
     break L5;
    }
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    break;
   }
   if ((HEAP32[i6 >> 2] | 0) == -1) {
    _decl(i8) | 0;
    i3 = 19;
   } else i3 = 19;
  } while (0);
  do if ((i3 | 0) == 19) {
   i3 = 0;
   HEAP32[i15 >> 2] = 0;
   while (1) {
    HEAP32[i10 >> 2] = _gchar_pos(i8) | 0;
    if (!((HEAP32[i10 >> 2] | 0) == 32 | (HEAP32[i10 >> 2] | 0) == 9)) if (!(_vim_strchr(74750, HEAP32[i10 >> 2] | 0) | 0)) break;
    HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
    if ((_decl(i9) | 0) == -1) break;
    i2 = (HEAPU8[(_ml_get(HEAP32[i9 >> 2] | 0) | 0) >> 0] | 0 | 0) == 0;
    if (i2 & (HEAP32[i6 >> 2] | 0) == 1 | (HEAP32[i15 >> 2] | 0) != 0) break;
    if (_vim_strchr(74758, HEAP32[i10 >> 2] | 0) | 0) HEAP32[i15 >> 2] = 1;
    if (_vim_strchr(74762, HEAP32[i10 >> 2] | 0) | 0) if (!(_vim_strchr(74750, _gchar_pos(i9) | 0) | 0)) break;
    _decl(i8) | 0;
   }
   HEAP32[i12 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i14 >> 2] = (_vim_strchr(HEAP32[26904] | 0, 74) | 0) != 0 & 1;
   while (1) {
    HEAP32[i10 >> 2] = _gchar_pos(i8) | 0;
    if (!(HEAP32[i10 >> 2] | 0)) {
     i3 = 33;
     break;
    }
    if (!(HEAP32[i8 + 4 >> 2] | 0)) if (_startPS(HEAP32[i8 >> 2] | 0, 0, 0) | 0) {
     i3 = 33;
     break;
    }
    if ((HEAP32[i10 >> 2] | 0) == 46 | (HEAP32[i10 >> 2] | 0) == 33 | (HEAP32[i10 >> 2] | 0) == 63) {
     HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
     HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
     do {
      i2 = _inc(i9) | 0;
      HEAP32[i10 >> 2] = i2;
      if ((i2 | 0) == -1) break;
      i2 = _gchar_pos(i9) | 0;
      HEAP32[i10 >> 2] = i2;
     } while ((_vim_strchr(74762, i2) | 0) != 0);
     if ((HEAP32[i10 >> 2] | 0) == -1) {
      i3 = 47;
      break;
     }
     i2 = HEAP32[i10 >> 2] | 0;
     if (HEAP32[i14 >> 2] | 0) {
      if (!i2) {
       i3 = 47;
       break;
      }
     } else if ((i2 | 0) == 32 | (HEAP32[i10 >> 2] | 0) == 9 | (HEAP32[i10 >> 2] | 0) == 0) {
      i3 = 47;
      break;
     }
     if ((HEAP32[i14 >> 2] | 0) != 0 & (HEAP32[i10 >> 2] | 0) == 32) if ((_inc(i9) | 0) >= 0) if ((_gchar_pos(i9) | 0) == 32) {
      i3 = 47;
      break;
     }
    }
    if ((FUNCTION_TABLE_ii[HEAP32[i11 >> 2] & 3](i8) | 0) == -1) {
     i3 = 50;
     break;
    }
   }
   if ((i3 | 0) == 33) {
    i3 = 0;
    if ((HEAP32[i6 >> 2] | 0) != -1) break;
    if ((HEAP32[i8 >> 2] | 0) == (HEAP32[i12 >> 2] | 0)) break;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    break;
   } else if ((i3 | 0) == 47) {
    i3 = 0;
    HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
    HEAP32[i8 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
    if (_gchar_pos(i8) | 0) break;
    _inc(i8) | 0;
    break;
   } else if ((i3 | 0) == 50) {
    i3 = 0;
    if (HEAP32[i7 >> 2] | 0) {
     i3 = 51;
     break L5;
    }
    HEAP32[i13 >> 2] = 1;
    break;
   }
  } while (0);
  do {
   if (HEAP32[i13 >> 2] | 0) break;
   i2 = _gchar_pos(i8) | 0;
   HEAP32[i10 >> 2] = i2;
   if (!((i2 | 0) == 32 ? 1 : (HEAP32[i10 >> 2] | 0) == 9)) break;
  } while ((_incl(i8) | 0) != -1);
 }
 if ((i3 | 0) == 15) {
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 } else if ((i3 | 0) == 51) {
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 } else if ((i3 | 0) == 60) {
  _setpcmark();
  i3 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i5 >> 2] = 1;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 return 0;
}

function _buflist_list(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3;
 i6 = i3 + 56 | 0;
 i7 = i3 + 52 | 0;
 i8 = i3 + 48 | 0;
 i9 = i3 + 44 | 0;
 i10 = i3 + 40 | 0;
 i11 = i3 + 36 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) {
   i2 = 48;
   break;
  }
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
   i2 = 48;
   break;
  }
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 596 >> 2] | 0) i2 = 7; else if (HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0) i2 = 7; else if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 117) | 0) i2 = 7;
  do if ((i2 | 0) == 7) {
   i2 = 0;
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 117) | 0) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 596 >> 2] | 0) break;
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 43) | 0) {
    if (HEAP32[(HEAP32[i7 >> 2] | 0) + 60 >> 2] & 64 | 0) break;
    if (!(_bufIsChanged(HEAP32[i7 >> 2] | 0) | 0)) break;
   }
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 97) | 0) {
    if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0)) break;
    if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 56 >> 2] | 0)) break;
   }
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 104) | 0) {
    if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0)) break;
    if (HEAP32[(HEAP32[i7 >> 2] | 0) + 56 >> 2] | 0) break;
   }
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 45) | 0) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 664 >> 2] | 0) break;
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 61) | 0) if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 676 >> 2] | 0)) break;
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 120) | 0) if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 60 >> 2] & 64)) break;
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 37) | 0) if ((HEAP32[i7 >> 2] | 0) != (HEAP32[26773] | 0)) break;
   if (_vim_strchr(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 35) | 0) {
    if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26773] | 0)) break;
    if ((HEAP32[(HEAP32[26881] | 0) + 180 >> 2] | 0) != (HEAP32[(HEAP32[i7 >> 2] | 0) + 92 >> 2] | 0)) break;
   }
   if (_buf_spname(HEAP32[i7 >> 2] | 0) | 0) {
    i1 = HEAP32[26885] | 0;
    _vim_strncpy(i1, _buf_spname(HEAP32[i7 >> 2] | 0) | 0, 4095);
   } else {
    i1 = HEAP32[i7 >> 2] | 0;
    _home_replace(i1 | 0, HEAP32[i1 + 76 >> 2] | 0, HEAP32[26885] | 0, 4096, 1);
   }
   if (!(_message_filtered(HEAP32[26885] | 0) | 0)) {
    if (HEAP32[(HEAP32[i7 >> 2] | 0) + 60 >> 2] & 64 | 0) i12 = 120; else {
     i1 = (_bufIsChanged(HEAP32[i7 >> 2] | 0) | 0) != 0;
     i12 = i1 ? 43 : 32;
    }
    HEAP32[i11 >> 2] = i12;
    if (HEAP32[(HEAP32[i7 >> 2] | 0) + 664 >> 2] | 0) i13 = HEAP32[(HEAP32[i7 >> 2] | 0) + 676 >> 2] | 0 ? 61 : 32; else i13 = 45;
    HEAP32[i10 >> 2] = i13;
    _msg_putchar(10);
    i1 = HEAP32[26882] | 0;
    i14 = HEAP32[(HEAP32[i7 >> 2] | 0) + 596 >> 2] | 0 ? 32 : 117;
    if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26773] | 0)) i15 = 37; else i15 = (HEAP32[(HEAP32[26881] | 0) + 180 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 92 >> 2] | 0) ? 35 : 32;
    if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0)) i16 = 32; else i16 = (HEAP32[(HEAP32[i7 >> 2] | 0) + 56 >> 2] | 0) == 0 ? 104 : 97;
    i17 = HEAP32[i10 >> 2] | 0;
    i18 = HEAP32[i11 >> 2] | 0;
    i19 = HEAP32[26885] | 0;
    HEAP32[i5 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 92 >> 2];
    HEAP32[i5 + 4 >> 2] = i14;
    HEAP32[i5 + 8 >> 2] = i15;
    HEAP32[i5 + 12 >> 2] = i16;
    HEAP32[i5 + 16 >> 2] = i17;
    HEAP32[i5 + 20 >> 2] = i18;
    HEAP32[i5 + 24 >> 2] = i19;
    i19 = _vim_snprintf(i1, 1005, 42469, i5) | 0;
    HEAP32[i8 >> 2] = i19;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) > 1005 ? 1005 : i19;
    HEAP32[i9 >> 2] = 40 - (_vim_strsize(HEAP32[26882] | 0) | 0);
    do {
     i19 = HEAP32[26882] | 0;
     i1 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i1 + 1;
     HEAP8[i19 + i1 >> 0] = 32;
     i1 = (HEAP32[i9 >> 2] | 0) + -1 | 0;
     HEAP32[i9 >> 2] = i1;
    } while ((i1 | 0) > 0 ? (HEAP32[i8 >> 2] | 0) < 1007 : 0);
    i1 = HEAP32[i8 >> 2] | 0;
    i19 = (HEAP32[26882] | 0) + i1 | 0;
    i18 = 1025 - i1 | 0;
    if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26773] | 0)) i20 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0; else i20 = _buflist_findlnum(HEAP32[i7 >> 2] | 0) | 0;
    HEAP32[i4 >> 2] = i20;
    _vim_snprintf(i19, i18, 42488, i4) | 0;
    _msg_outtrans(HEAP32[26882] | 0) | 0;
    _out_flush();
    _ui_breakcheck();
   }
  } while (0);
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2];
 }
 if ((i2 | 0) == 48) {
  STACKTOP = i3;
  return;
 }
}

function _recursive_regmatch(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i9 = i8 + 68 | 0;
 i10 = i8 + 64 | 0;
 i11 = i8 + 60 | 0;
 i12 = i8 + 56 | 0;
 i13 = i8 + 52 | 0;
 i14 = i8 + 48 | 0;
 i15 = i8 + 44 | 0;
 i16 = i8 + 40 | 0;
 i17 = i8 + 36 | 0;
 i18 = i8 + 32 | 0;
 i19 = i8 + 28 | 0;
 i20 = i8 + 24 | 0;
 i21 = i8 + 16 | 0;
 i22 = i8 + 8 | 0;
 i23 = i8 + 4 | 0;
 i24 = i8;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i16 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0);
 HEAP32[i17 >> 2] = HEAP32[26326];
 HEAP32[i18 >> 2] = HEAP32[26335];
 HEAP32[i19 >> 2] = HEAP32[26330];
 HEAP32[i20 >> 2] = HEAP32[26336];
 HEAP32[i22 >> 2] = 0;
 HEAP32[i24 >> 2] = 0;
 do if (HEAP32[i11 >> 2] | 0) if (!(HEAP32[26312] | 0)) {
  HEAP32[26334] = (HEAP32[26325] | 0) + (HEAP32[(HEAP32[i11 >> 2] | 0) + 172 + 4 >> 2] | 0);
  break;
 } else {
  HEAP32[26334] = HEAP32[(HEAP32[i11 >> 2] | 0) + 172 >> 2];
  break;
 } while (0);
 if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == -993) i7 = 9; else if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == -992) i7 = 9; else if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == -991) i7 = 9; else if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == -990) i7 = 9;
 do if ((i7 | 0) == 9) {
  HEAP32[i22 >> 2] = i21;
  i6 = (HEAP32[i11 >> 2] | 0) == 0;
  do if (!(HEAP32[26312] | 0)) if (i6) {
   HEAP32[i21 + 4 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0);
   HEAP32[i21 >> 2] = HEAP32[26326];
   break;
  } else {
   i5 = (HEAP32[i11 >> 2] | 0) + 172 | 0;
   HEAP32[i21 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i21 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
   break;
  } else if (i6) {
   HEAP32[i21 >> 2] = HEAP32[26334];
   break;
  } else {
   HEAP32[i21 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 172 >> 2];
   break;
  } while (0);
  i6 = (HEAP32[26312] | 0) == 0;
  if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) <= 0) {
   if (i6) {
    i5 = (HEAP32[26326] | 0) + -1 | 0;
    HEAP32[26326] = i5;
    HEAP32[26325] = _reg_getline(i5) | 0;
    if (!(HEAP32[26325] | 0)) {
     i5 = (HEAP32[26326] | 0) + 1 | 0;
     HEAP32[26326] = i5;
     HEAP32[26325] = _reg_getline(i5) | 0;
    }
   }
   HEAP32[26334] = HEAP32[26325];
   break;
  }
  do if (i6) if (((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) < (HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0)) {
   i5 = (HEAP32[26326] | 0) + -1 | 0;
   HEAP32[26326] = i5;
   HEAP32[26325] = _reg_getline(i5) | 0;
   if (!(HEAP32[26325] | 0)) {
    i5 = (HEAP32[26326] | 0) + 1 | 0;
    HEAP32[26326] = i5;
    HEAP32[26325] = _reg_getline(i5) | 0;
    HEAP32[26334] = HEAP32[26325];
    break;
   } else {
    i5 = HEAP32[26325] | 0;
    HEAP32[26334] = i5 + (_strlen(HEAP32[26325] | 0) | 0);
    break;
   }
  } while (0);
  if (((HEAP32[26334] | 0) - (HEAP32[26325] | 0) | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0)) {
   HEAP32[26334] = (HEAP32[26334] | 0) + (0 - (HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0));
   break;
  } else {
   HEAP32[26334] = HEAP32[26325];
   break;
  }
 } while (0);
 if ((HEAP32[26339] | 0) == 1) {
  if (!(HEAP32[HEAP32[i15 >> 2] >> 2] | 0)) {
   i11 = _lalloc(HEAP32[26333] << 2, 1) | 0;
   HEAP32[HEAP32[i15 >> 2] >> 2] = i11;
   if (!(HEAP32[HEAP32[i15 >> 2] >> 2] | 0)) {
    _emsg(72750) | 0;
    HEAP32[i9 >> 2] = 0;
    i25 = HEAP32[i9 >> 2] | 0;
    STACKTOP = i8;
    return i25 | 0;
   }
  }
  _nfa_save_listids(HEAP32[i12 >> 2] | 0, HEAP32[HEAP32[i15 >> 2] >> 2] | 0);
  HEAP32[i24 >> 2] = 1;
 } else {
  HEAP32[26339] = (HEAP32[26339] | 0) + 1;
  if ((HEAP32[26330] | 0) <= (HEAP32[26331] | 0)) HEAP32[26330] = HEAP32[26331];
 }
 HEAP32[26336] = HEAP32[i22 >> 2];
 HEAP32[i23 >> 2] = _nfa_regmatch(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
 if (HEAP32[i24 >> 2] | 0) _nfa_restore_listids(HEAP32[i12 >> 2] | 0, HEAP32[HEAP32[i15 >> 2] >> 2] | 0); else {
  HEAP32[26339] = (HEAP32[26339] | 0) + -1;
  HEAP32[26331] = HEAP32[26330];
 }
 HEAP32[26326] = HEAP32[i17 >> 2];
 if (!(HEAP32[26312] | 0)) HEAP32[26325] = _reg_getline(HEAP32[26326] | 0) | 0;
 HEAP32[26334] = (HEAP32[26325] | 0) + (HEAP32[i16 >> 2] | 0);
 if ((HEAP32[i23 >> 2] | 0) != -1) {
  HEAP32[26335] = HEAP32[i18 >> 2];
  HEAP32[26330] = HEAP32[i19 >> 2];
 }
 HEAP32[26336] = HEAP32[i20 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i23 >> 2];
 i25 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i8;
 return i25 | 0;
}

function _buf_modname(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 40 | 0;
 i8 = i6 + 36 | 0;
 i9 = i6 + 32 | 0;
 i10 = i6 + 28 | 0;
 i11 = i6 + 24 | 0;
 i12 = i6 + 20 | 0;
 i13 = i6 + 16 | 0;
 i14 = i6 + 12 | 0;
 i15 = i6 + 8 | 0;
 i16 = i6 + 4 | 0;
 i17 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i17 >> 2] = _strlen(HEAP32[i10 >> 2] | 0) | 0;
 do if (!(HEAP32[i9 >> 2] | 0)) i5 = 3; else if (!(HEAPU8[HEAP32[i9 >> 2] >> 0] | 0)) i5 = 3; else {
  HEAP32[i16 >> 2] = _strlen(HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i12 >> 2] = _alloc((HEAP32[i16 >> 2] | 0) + (HEAP32[i17 >> 2] | 0) + 3 | 0) | 0;
  if (HEAP32[i12 >> 2] | 0) {
   _strcpy(HEAP32[i12 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   break;
  }
  HEAP32[i7 >> 2] = 0;
  i18 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i18 | 0;
 } while (0);
 do if ((i5 | 0) == 3) {
  HEAP32[i12 >> 2] = _alloc(4096 + (HEAP32[i17 >> 2] | 0) + 3 | 0) | 0;
  if (!(HEAP32[i12 >> 2] | 0)) {
   HEAP32[i7 >> 2] = 0;
   i18 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i18 | 0;
  }
  if (_mch_dirname(HEAP32[i12 >> 2] | 0, 4096) | 0) {
   i4 = _strlen(HEAP32[i12 >> 2] | 0) | 0;
   HEAP32[i16 >> 2] = i4;
   if (i4 | 0) {
    if (!(_vim_ispathsep(HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) + -1 >> 0] | 0) | 0)) {
     i4 = HEAP32[i12 >> 2] | 0;
     i3 = HEAP32[i16 >> 2] | 0;
     HEAP32[i16 >> 2] = i3 + 1;
     HEAP8[i4 + i3 >> 0] = 47;
     HEAP8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] = 0;
    }
    HEAP32[i11 >> 2] = 0;
    break;
   }
  }
  _vim_free(HEAP32[i12 >> 2] | 0);
  HEAP32[i7 >> 2] = 0;
  i18 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i18 | 0;
 } while (0);
 HEAP32[i15 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
 while (1) {
  if ((HEAP32[i15 >> 2] | 0) >>> 0 <= (HEAP32[i12 >> 2] | 0) >>> 0) break;
  if (HEAP32[i8 >> 2] | 0 ? (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 46 : 0) if ((HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) == 46) HEAP8[HEAP32[i15 >> 2] >> 0] = 95;
  i16 = (_vim_ispathsep(HEAPU8[HEAP32[i15 >> 2] >> 0] | 0) | 0) != 0;
  i19 = HEAP32[i15 >> 2] | 0;
  if (i16) {
   i5 = 20;
   break;
  }
  HEAP32[i15 >> 2] = i19 + -1;
 }
 if ((i5 | 0) == 20) HEAP32[i15 >> 2] = i19 + 1;
 if ((_strlen(HEAP32[i15 >> 2] | 0) | 0) >>> 0 > 250) HEAP8[(HEAP32[i15 >> 2] | 0) + 250 >> 0] = 0;
 i19 = HEAP32[i15 >> 2] | 0;
 HEAP32[i13 >> 2] = i19 + (_strlen(HEAP32[i15 >> 2] | 0) | 0);
 do if (HEAP32[i8 >> 2] | 0) {
  if (HEAP32[i9 >> 2] | 0) if (HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) {
   i19 = HEAP32[i9 >> 2] | 0;
   if (!(_vim_ispathsep(HEAPU8[i19 + ((_strlen(HEAP32[i9 >> 2] | 0) | 0) - 1) >> 0] | 0) | 0)) {
    if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 46) {
     if (((HEAP32[i13 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0) >>> 0 <= 8) break;
     HEAP32[i13 >> 2] = (HEAP32[i15 >> 2] | 0) + 8;
     HEAP8[HEAP32[i13 >> 2] >> 0] = 0;
     break;
    }
    i19 = _vim_strchr(HEAP32[i15 >> 2] | 0, 46) | 0;
    HEAP32[i14 >> 2] = i19;
    if (!i19) {
     i19 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = i19 + 1;
     HEAP8[i19 >> 0] = 46;
     break;
    }
    i19 = _strlen(HEAP32[i14 >> 2] | 0) | 0;
    if ((i19 + (HEAP32[i17 >> 2] | 0) | 0) <= 4) break;
    HEAP32[i13 >> 2] = (HEAP32[i14 >> 2] | 0) + 4 + (0 - (HEAP32[i17 >> 2] | 0));
    break;
   }
  }
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 46) {
   i19 = HEAP32[i13 >> 2] | 0;
   HEAP32[i13 >> 2] = i19 + 1;
   HEAP8[i19 >> 0] = 95;
  }
 } while (0);
 _strcpy(HEAP32[i13 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 if (!((HEAP32[i11 >> 2] | 0) == 0 | (HEAP32[i8 >> 2] | 0) != 0)) {
  i8 = _gettail(HEAP32[i12 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = i8;
  if ((HEAPU8[i8 >> 0] | 0) != 46) {
   i8 = HEAP32[i14 >> 2] | 0;
   i11 = i8 + 1 | 0;
   i10 = i8 | 0;
   _memmove(i11 | 0, i10 | 0, (_strlen(HEAP32[i14 >> 2] | 0) | 0) + 1 | 0) | 0;
   HEAP8[HEAP32[i14 >> 2] >> 0] = 46;
  }
 }
 if (HEAP32[i9 >> 2] | 0) if (!(_strcmp(HEAP32[i9 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0)) {
  while (1) {
   i9 = (HEAP32[i13 >> 2] | 0) + -1 | 0;
   HEAP32[i13 >> 2] = i9;
   if (i9 >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) break;
   if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) != 95) {
    i5 = 45;
    break;
   }
  }
  if ((i5 | 0) == 45) HEAP8[HEAP32[i13 >> 2] >> 0] = 95;
  if ((HEAP32[i13 >> 2] | 0) >>> 0 < (HEAP32[i15 >> 2] | 0) >>> 0) HEAP8[HEAP32[i15 >> 2] >> 0] = 118;
 }
 HEAP32[i7 >> 2] = HEAP32[i12 >> 2];
 i18 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i18 | 0;
}

function _do_write(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 36 | 0;
 i5 = i3 + 32 | 0;
 i6 = i3 + 28 | 0;
 i7 = i3 + 24 | 0;
 i8 = i3 + 20 | 0;
 i9 = i3 + 16 | 0;
 i10 = i3 + 12 | 0;
 i11 = i3 + 8 | 0;
 i12 = i3 + 4 | 0;
 i13 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 if (_not_writing() | 0) {
  HEAP32[i4 >> 2] = 0;
  i14 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i14 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 do if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 375) {
  _emsg(92160) | 0;
  break;
 } else {
  HEAP32[i6 >> 2] = 0;
  i2 = 10;
  break;
 } else {
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i10 >> 2] = _fix_fname(HEAP32[i8 >> 2] | 0) | 0;
  if (HEAP32[i10 >> 2] | 0) HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i6 >> 2] = _otherfile(HEAP32[i8 >> 2] | 0) | 0;
  i2 = 10;
 } while (0);
 L14 : do if ((i2 | 0) == 10) {
  if (HEAP32[i6 >> 2] | 0) {
   if (_vim_strchr(HEAP32[26904] | 0, 65) | 0) i2 = 13; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 375) i2 = 13; else HEAP32[i11 >> 2] = _buflist_findname(HEAP32[i8 >> 2] | 0) | 0;
   if ((i2 | 0) == 13) HEAP32[i11 >> 2] = _setaltfname(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1) | 0;
   if (HEAP32[i11 >> 2] | 0) if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) {
    _emsg(94226) | 0;
    break;
   }
  }
  if (!(HEAP32[i6 >> 2] | 0)) {
   if (!(_check_fname() | 0)) break;
   if (_check_readonly((HEAP32[i5 >> 2] | 0) + 28 | 0, HEAP32[26773] | 0) | 0) break;
  }
  do if (!(HEAP32[i6 >> 2] | 0)) {
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[26773] | 0) + 68 >> 2];
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2];
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) break;
   if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0)) if (!(HEAP32[27040] | 0 ? 1 : (HEAP32[(HEAP32[i5 >> 2] | 0) + 60 >> 2] | 0) != 0)) {
    _emsg(43017) | 0;
    break L14;
   }
  } while (0);
  if ((_check_overwrite(HEAP32[i5 >> 2] | 0, HEAP32[26773] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) == 1) {
   if (HEAP32[i11 >> 2] | 0 ? (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 375 : 0) {
    HEAP32[i13 >> 2] = HEAP32[26773];
    _apply_autocmds(4, 0, 0, 0, HEAP32[26773] | 0) | 0;
    _apply_autocmds(4, 0, 0, 0, HEAP32[i11 >> 2] | 0) | 0;
    if ((HEAP32[26773] | 0) != (HEAP32[i13 >> 2] | 0)) {
     HEAP32[i9 >> 2] = 0;
     break;
    }
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 76 >> 2];
    HEAP32[(HEAP32[i11 >> 2] | 0) + 76 >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2];
    HEAP32[(HEAP32[26773] | 0) + 76 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 68 >> 2];
    HEAP32[(HEAP32[i11 >> 2] | 0) + 68 >> 2] = HEAP32[(HEAP32[26773] | 0) + 68 >> 2];
    HEAP32[(HEAP32[26773] | 0) + 68 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 72 >> 2];
    HEAP32[(HEAP32[i11 >> 2] | 0) + 72 >> 2] = HEAP32[(HEAP32[26773] | 0) + 72 >> 2];
    HEAP32[(HEAP32[26773] | 0) + 72 >> 2] = HEAP32[i7 >> 2];
    _buf_name_changed(HEAP32[26773] | 0);
    _apply_autocmds(3, 0, 0, 0, HEAP32[26773] | 0) | 0;
    _apply_autocmds(3, 0, 0, 0, HEAP32[i11 >> 2] | 0) | 0;
    if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 596 >> 2] | 0)) {
     HEAP32[(HEAP32[i11 >> 2] | 0) + 596 >> 2] = 1;
     _apply_autocmds(0, 0, 0, 0, HEAP32[i11 >> 2] | 0) | 0;
    }
    if ((HEAP32[26773] | 0) != (HEAP32[i13 >> 2] | 0)) {
     HEAP32[i9 >> 2] = 0;
     break;
    }
    if (!(HEAPU8[HEAP32[(HEAP32[26773] | 0) + 624 >> 2] >> 0] | 0)) {
     if (_au_has_group(53842) | 0) _do_doautocmd(53857, 1, 0) | 0;
     _do_modelines(0);
    }
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[26773] | 0) + 72 >> 2];
   }
   HEAP32[i12 >> 2] = (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) == 0 & 1;
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP32[i9 >> 2] = _buf_write(HEAP32[26773] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0, i1 | 0, HEAP32[i1 + 60 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0, 1, 0) | 0;
   if ((HEAP32[i9 >> 2] | 0) == 1 ? (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 375 : 0) {
    HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 0;
    HEAP32[26770] = 1;
   }
  }
 } while (0);
 _vim_free(HEAP32[i10 >> 2] | 0);
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 i14 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i14 | 0;
}

function _do_exedit(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4 + 4 | 0;
 i13 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i9 >> 2] = HEAP32[26798];
 do if (HEAP32[26798] | 0) {
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) != 492) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) != 493) break;
  HEAP32[26798] = 0;
  if (!(HEAPU8[HEAP32[HEAP32[i5 >> 2] >> 2] >> 0] | 0)) {
   if (!(HEAP32[26841] | 0)) {
    STACKTOP = i4;
    return;
   }
   HEAP32[i10 >> 2] = HEAP32[26814];
   HEAP32[i11 >> 2] = HEAP32[26720];
   HEAP32[i12 >> 2] = HEAP32[26710];
   HEAP32[i13 >> 2] = HEAP32[26759];
   if (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) {
    _stuffReadbuff(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0);
    HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = 0;
   }
   if ((HEAP32[i9 >> 2] | 0) != 2) _settmode(2);
   HEAP32[26814] = 0;
   HEAP32[26720] = 0;
   HEAP32[26721] = 0;
   HEAP32[26710] = 0;
   HEAP32[26759] = 0;
   HEAP32[26828] = 50;
   _main_loop(0, 1);
   HEAP32[26814] = HEAP32[i10 >> 2];
   HEAP32[26720] = HEAP32[i11 >> 2];
   HEAP32[26710] = HEAP32[i12 >> 2];
   HEAP32[26759] = HEAP32[i13 >> 2];
   STACKTOP = i4;
   return;
  }
 } while (0);
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 281) i3 = 15; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 450) i3 = 15; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 444) i3 = 15; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 501) i3 = 15; else i3 = 17;
 if ((i3 | 0) == 15) if (!(HEAPU8[HEAP32[HEAP32[i5 >> 2] >> 2] >> 0] | 0)) {
  _setpcmark();
  i13 = HEAP32[i5 >> 2] | 0;
  _do_ecmd(0, 0, 0, i13 | 0, 1, 1 + (HEAP32[i13 + 28 >> 2] | 0 ? 8 : 0) | 0, (HEAP32[i6 >> 2] | 0) == 0 ? HEAP32[26881] | 0 : 0) | 0;
 } else i3 = 17;
 do if ((i3 | 0) == 17) {
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) != 410) {
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 503) i3 = 19;
  } else i3 = 19;
  if ((i3 | 0) == 19) if (!(HEAPU8[HEAP32[HEAP32[i5 >> 2] >> 2] >> 0] | 0)) {
   if (HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) _do_cmdline_cmd(HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0) | 0;
   _check_arg_idx(HEAP32[26881] | 0);
   break;
  }
  if (HEAPU8[HEAP32[HEAP32[i5 >> 2] >> 2] >> 0] | 0) if (_curbuf_locked() | 0) {
   STACKTOP = i4;
   return;
  }
  HEAP32[i7 >> 2] = HEAP32[26815];
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 493) i3 = 24; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 431) i3 = 24; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 140) HEAP32[26815] = 0;
  if ((i3 | 0) == 24) HEAP32[26815] = 1;
  _setpcmark();
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 140) i14 = 0; else i14 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
  i13 = HEAP32[i5 >> 2] | 0;
  if (!(HEAPU8[HEAP32[HEAP32[i5 >> 2] >> 2] >> 0] | 0)) if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] | 0)) if (_vim_strchr(HEAP32[26904] | 0, 103) | 0) i15 = 1; else i3 = 32; else i3 = 32; else i3 = 32;
  if ((i3 | 0) == 32) i15 = HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] | 0;
  i12 = (_buf_hide(HEAP32[26773] | 0) | 0) != 0;
  do if (!(_do_ecmd(0, i14, 0, i13, i15, (i12 ? 1 : 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0 ? 8 : 0) + (HEAP32[i6 >> 2] | 0 ? 4 : 0) + ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) == 22 ? 16 : 0) | 0, (HEAP32[i6 >> 2] | 0) == 0 ? HEAP32[26881] | 0 : 0) | 0)) {
   if (HEAP32[i6 >> 2] | 0) {
    if (_curbufIsChanged() | 0) i16 = (HEAP32[(HEAP32[26773] | 0) + 56 >> 2] | 0) <= 1; else i16 = 0;
    HEAP32[i8 >> 2] = i16 & 1;
    if (HEAP32[i8 >> 2] | 0) if (!(_buf_hide(HEAP32[26773] | 0) | 0)) break;
    HEAP32[26757] = 1;
    i11 = HEAP32[26881] | 0;
    if (HEAP32[i8 >> 2] | 0) i17 = 0; else i17 = (_buf_hide(HEAP32[26773] | 0) | 0) != 0 ^ 1;
    _win_close(i11, i17 & 1) | 0;
   }
  } else if (HEAP32[26815] | 0) if ((HEAP32[(HEAP32[26773] | 0) + 56 >> 2] | 0) == 1) HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1; while (0);
  HEAP32[26815] = HEAP32[i7 >> 2];
 } while (0);
 if (HEAP32[i6 >> 2] | 0) if (HEAPU8[HEAP32[HEAP32[i5 >> 2] >> 2] >> 0] | 0) if ((HEAP32[26881] | 0) != (HEAP32[i6 >> 2] | 0)) if (_win_valid(HEAP32[i6 >> 2] | 0) | 0) if (!(HEAP32[27130] | 0 ? 1 : (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[26773] | 0))) HEAP32[(HEAP32[i6 >> 2] | 0) + 180 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
 HEAP32[26799] = 1;
 STACKTOP = i4;
 return;
}

function _vim_rename(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 4320 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4;
 i8 = i4 + 212 | 0;
 i9 = i4 + 208 | 0;
 i10 = i4 + 204 | 0;
 i11 = i4 + 200 | 0;
 i12 = i4 + 196 | 0;
 i13 = i4 + 192 | 0;
 i14 = i4 + 188 | 0;
 i15 = i4 + 184 | 0;
 i16 = i4 + 108 | 0;
 i17 = i4 + 104 | 0;
 i18 = i4 + 100 | 0;
 i19 = i4 + 96 | 0;
 i20 = i4 + 20 | 0;
 i21 = i4 + 216 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 do if (!(_vim_fnamecmp(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
  if (HEAP32[26918] | 0) {
   i2 = _gettail(HEAP32[i9 >> 2] | 0) | 0;
   if (_strcmp(i2, _gettail(HEAP32[i10 >> 2] | 0) | 0) | 0) {
    HEAP32[i19 >> 2] = 1;
    break;
   }
  }
  HEAP32[i8 >> 2] = 0;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i22 | 0;
 } while (0);
 if ((_stat(HEAP32[i9 >> 2] | 0, i16) | 0) < 0) {
  HEAP32[i8 >> 2] = -1;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i22 | 0;
 }
 if ((_stat(HEAP32[i10 >> 2] | 0, i20) | 0) >= 0) if ((HEAP32[i16 >> 2] | 0) == (HEAP32[i20 >> 2] | 0)) if ((HEAP32[i16 + 72 >> 2] | 0) == (HEAP32[i20 + 72 >> 2] | 0)) HEAP32[i19 >> 2] = 1;
 if (HEAP32[i19 >> 2] | 0) {
  if ((_strlen(HEAP32[i9 >> 2] | 0) | 0) >>> 0 >= 4091) {
   HEAP32[i8 >> 2] = -1;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i4;
   return i22 | 0;
  }
  _strcpy(i21, HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i13 >> 2] = 123;
  while (1) {
   if ((HEAP32[i13 >> 2] | 0) >= 99999) {
    i3 = 24;
    break;
   }
   i19 = _gettail(i21) | 0;
   HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
   _sprintf(i19, 78969, i7) | 0;
   if ((_stat(i21, i16) | 0) < 0) break;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  if ((i3 | 0) == 24) {
   HEAP32[i8 >> 2] = -1;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i4;
   return i22 | 0;
  }
  if (_rename(HEAP32[i9 >> 2] | 0, i21) | 0) {
   HEAP32[i8 >> 2] = -1;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i4;
   return i22 | 0;
  }
  if (!(_rename(i21, HEAP32[i10 >> 2] | 0) | 0)) {
   HEAP32[i8 >> 2] = 0;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i4;
   return i22 | 0;
  } else {
   _rename(i21, HEAP32[i9 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = -1;
   i22 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i4;
   return i22 | 0;
  }
 }
 _unlink(HEAP32[i10 >> 2] | 0) | 0;
 if (!(_rename(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
  HEAP32[i8 >> 2] = 0;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i22 | 0;
 }
 HEAP32[i17 >> 2] = _mch_getperm(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i18 >> 2] = _mch_get_acl(HEAP32[i9 >> 2] | 0) | 0;
 i21 = HEAP32[i9 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i11 >> 2] = _open(i21, 0, i6) | 0;
 if ((HEAP32[i11 >> 2] | 0) == -1) {
  _mch_free_acl(HEAP32[i18 >> 2] | 0);
  HEAP32[i8 >> 2] = -1;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i22 | 0;
 }
 i6 = HEAP32[i10 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i17 >> 2];
 HEAP32[i12 >> 2] = _open(i6, 131265, i5) | 0;
 if ((HEAP32[i12 >> 2] | 0) == -1) {
  _close(HEAP32[i11 >> 2] | 0) | 0;
  _mch_free_acl(HEAP32[i18 >> 2] | 0);
  HEAP32[i8 >> 2] = -1;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i22 | 0;
 }
 HEAP32[i15 >> 2] = _alloc(8192) | 0;
 if (!(HEAP32[i15 >> 2] | 0)) {
  _close(HEAP32[i12 >> 2] | 0) | 0;
  _close(HEAP32[i11 >> 2] | 0) | 0;
  _mch_free_acl(HEAP32[i18 >> 2] | 0);
  HEAP32[i8 >> 2] = -1;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i22 | 0;
 }
 while (1) {
  i5 = _read_eintr(HEAP32[i11 >> 2] | 0, HEAP32[i15 >> 2] | 0, 8192) | 0;
  HEAP32[i13 >> 2] = i5;
  if ((i5 | 0) <= 0) break;
  i5 = _write_eintr(HEAP32[i12 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
  if ((i5 | 0) != (HEAP32[i13 >> 2] | 0)) {
   i3 = 36;
   break;
  }
 }
 if ((i3 | 0) == 36) HEAP32[i14 >> 2] = 55029;
 _vim_free(HEAP32[i15 >> 2] | 0);
 _close(HEAP32[i11 >> 2] | 0) | 0;
 if ((_close(HEAP32[i12 >> 2] | 0) | 0) < 0) HEAP32[i14 >> 2] = 55057;
 if ((HEAP32[i13 >> 2] | 0) < 0) {
  HEAP32[i14 >> 2] = 55082;
  HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 }
 _mch_set_acl(HEAP32[i10 >> 2] | 0, HEAP32[i18 >> 2] | 0);
 _mch_free_acl(HEAP32[i18 >> 2] | 0);
 if (HEAP32[i14 >> 2] | 0) {
  _emsg2(HEAP32[i14 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = -1;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i22 | 0;
 } else {
  _unlink(HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = 0;
  i22 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i22 | 0;
 }
 return 0;
}

function _peekchr() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 L1 : do if ((HEAP32[26398] | 0) == -1) {
  i5 = HEAPU8[HEAP32[26392] >> 0] | 0;
  HEAP32[26398] = i5;
  switch (i5 | 0) {
  case 126:
  case 91:
  case 46:
   {
    if ((HEAP32[26391] | 0) < 3) break L1;
    HEAP32[26398] = (HEAP32[26398] | 0) - 256;
    break L1;
    break;
   }
  case 47:
  case 96:
  case 59:
  case 58:
  case 45:
  case 44:
  case 39:
  case 34:
  case 35:
  case 62:
  case 60:
  case 124:
  case 38:
  case 33:
  case 64:
  case 63:
  case 61:
  case 43:
  case 37:
  case 123:
  case 41:
  case 40:
   {
    if ((HEAP32[26391] | 0) != 4) break L1;
    HEAP32[26398] = (HEAP32[26398] | 0) - 256;
    break L1;
    break;
   }
  case 42:
   {
    if ((HEAP32[26391] | 0) < 3 | (HEAP32[26394] | 0) != 0) break L1;
    if ((HEAP32[26395] | 0) != 0 & (HEAP32[26396] | 0) == -162) break L1;
    if (!(HEAP32[26400] | 0)) if (!((HEAP32[26396] | 0) != -216 & (HEAP32[26396] | 0) != -218 & (HEAP32[26396] | 0) != -132)) break L1;
    HEAP32[26398] = -214;
    break L1;
    break;
   }
  case 94:
   {
    if ((HEAP32[26391] | 0) < 2) break L1;
    if (!((HEAP32[26394] | 0) != 0 | (HEAP32[26391] | 0) == 4 | (HEAP32[26396] | 0) == -216 | (HEAP32[26396] | 0) == -132 | (HEAP32[26396] | 0) == -218 | (HEAP32[26396] | 0) == -146)) {
     i5 = (_no_Magic(HEAP32[26396] | 0) | 0) == 40;
     if (!(i5 & (HEAP32[26397] | 0) == -219)) break L1;
    }
    HEAP32[26398] = -162;
    HEAP32[26394] = 1;
    HEAP32[26395] = 0;
    break L1;
    break;
   }
  case 36:
   {
    if ((HEAP32[26391] | 0) < 2) break L1;
    HEAP32[i2 >> 2] = (HEAP32[26392] | 0) + 1;
    HEAP32[i3 >> 2] = (HEAP32[26391] | 0) == 4 & 1;
    while (1) {
     if ((HEAPU8[HEAP32[i2 >> 2] >> 0] | 0 | 0) == 92) if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 99) i6 = 1; else if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 67) i6 = 1; else if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 109) i6 = 1; else if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 77) i6 = 1; else if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 118) i6 = 1; else if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 86) i6 = 1; else i6 = (HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 90; else i6 = 0;
     i7 = HEAP32[i2 >> 2] | 0;
     if (!i6) break;
     do if ((HEAPU8[i7 + 1 >> 0] | 0 | 0) == 118) HEAP32[i3 >> 2] = 1; else {
      if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) != 109) if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) != 77) if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) != 86) break;
      HEAP32[i3 >> 2] = 0;
     } while (0);
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 2;
    }
    do if (HEAPU8[i7 >> 0] | 0 | 0) {
     if ((HEAPU8[HEAP32[i2 >> 2] >> 0] | 0 | 0) == 92) {
      if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 124) break;
      if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 38) break;
      if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 41) break;
      if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] | 0 | 0) == 110) break;
     }
     if (!(HEAP32[i3 >> 2] | 0)) if ((HEAP32[26391] | 0) == 4) break; else break L1;
     if ((HEAPU8[HEAP32[i2 >> 2] >> 0] | 0 | 0) != 124) if ((HEAPU8[HEAP32[i2 >> 2] >> 0] | 0 | 0) != 38) if (!((HEAP32[26391] | 0) == 4 ? 1 : (HEAPU8[HEAP32[i2 >> 2] >> 0] | 0 | 0) == 41)) break L1;
    } while (0);
    HEAP32[26398] = -220;
    break L1;
    break;
   }
  case 92:
   {
    HEAP32[i4 >> 2] = HEAPU8[(HEAP32[26392] | 0) + 1 >> 0];
    if (!(HEAP32[i4 >> 2] | 0)) {
     HEAP32[26398] = 92;
     break L1;
    }
    if ((HEAP32[i4 >> 2] | 0) <= 126) if (HEAPU8[73198 + (HEAP32[i4 >> 2] | 0) >> 0] | 0 | 0) {
     HEAP32[26398] = -1;
     HEAP32[26395] = HEAP32[26394];
     HEAP32[26394] = 0;
     HEAP32[26392] = (HEAP32[26392] | 0) + 1;
     HEAP32[26400] = (HEAP32[26400] | 0) + 1;
     _peekchr() | 0;
     HEAP32[26392] = (HEAP32[26392] | 0) + -1;
     HEAP32[26400] = (HEAP32[26400] | 0) + -1;
     HEAP32[26398] = _toggle_Magic(HEAP32[26398] | 0) | 0;
     break L1;
    }
    if (_vim_strchr(72551, HEAP32[i4 >> 2] | 0) | 0) {
     HEAP32[26398] = _backslash_trans(HEAP32[i4 >> 2] | 0) | 0;
     break L1;
    }
    if ((HEAP32[26391] | 0) == 1) if ((HEAP32[i4 >> 2] | 0) == 36 | (HEAP32[i4 >> 2] | 0) == 94) {
     HEAP32[26398] = _toggle_Magic(HEAP32[i4 >> 2] | 0) | 0;
     break L1;
    }
    HEAP32[26398] = HEAP32[i4 >> 2];
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 STACKTOP = i1;
 return HEAP32[26398] | 0;
}

function _bt_regexec_both(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 32 | 0;
 i8 = i6 + 28 | 0;
 i9 = i6 + 24 | 0;
 i10 = i6 + 20 | 0;
 i11 = i6 + 16 | 0;
 i12 = i6 + 12 | 0;
 i13 = i6 + 8 | 0;
 i14 = i6 + 4 | 0;
 i15 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i13 >> 2] = 0;
 if (!(HEAP32[26412] | 0)) {
  _ga_init2(105632, 1, 2048);
  _ga_grow(105632, 2048) | 0;
  HEAP32[26411] = 16384;
 }
 if (!(HEAP32[26417] | 0)) {
  _ga_init2(105652, 16, 64);
  _ga_grow(105652, 64) | 0;
  HEAP32[26416] = 512;
 }
 if (!(HEAP32[26312] | 0)) {
  HEAP32[i11 >> 2] = HEAP32[HEAP32[26313] >> 2];
  HEAP32[i7 >> 2] = _reg_getline(0) | 0;
  HEAP32[26316] = (HEAP32[26313] | 0) + 4;
  HEAP32[26317] = (HEAP32[26313] | 0) + 84;
 } else {
  HEAP32[i11 >> 2] = HEAP32[HEAP32[26312] >> 2];
  HEAP32[26314] = (HEAP32[26312] | 0) + 4;
  HEAP32[26315] = (HEAP32[26312] | 0) + 44;
 }
 L11 : do if ((HEAP32[i11 >> 2] | 0) == 0 | (HEAP32[i7 >> 2] | 0) == 0) _emsg(93343) | 0; else if (!(_prog_magic_wrong() | 0)) {
  if ((HEAP32[26324] | 0) > 0) if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[26324] | 0)) break;
  if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] & 1 | 0) HEAP32[26323] = 1; else if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] & 2 | 0) HEAP32[26323] = 0;
  if (HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0) {
   HEAP32[i14 >> 2] = HEAPU8[HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] >> 0];
   HEAP32[i12 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   L25 : do if (HEAP32[26323] | 0) while (1) {
    i4 = _cstrchr(HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
    HEAP32[i12 >> 2] = i4;
    if (!i4) break L25;
    if (!(_cstrncmp(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0, (HEAP32[i11 >> 2] | 0) + 28 | 0) | 0)) break L25;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   } else while (1) {
    i4 = _vim_strbyte(HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
    HEAP32[i12 >> 2] = i4;
    if (!i4) break L25;
    if (!(_cstrncmp(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0, (HEAP32[i11 >> 2] | 0) + 28 | 0) | 0)) break L25;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   } while (0);
   if (!(HEAP32[i12 >> 2] | 0)) break;
  }
  HEAP32[26325] = HEAP32[i7 >> 2];
  HEAP32[26326] = 0;
  HEAP32[26405] = 0;
  if (HEAP8[(HEAP32[i11 >> 2] | 0) + 20 >> 0] | 0) {
   HEAP32[i15 >> 2] = HEAPU8[(HEAP32[26325] | 0) + (HEAP32[i8 >> 2] | 0) >> 0];
   do if (HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0) if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[i15 >> 2] | 0)) {
    if (HEAP32[26323] | 0) {
     i4 = _tolower(HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0) | 0;
     if ((i4 | 0) == (_tolower(HEAP32[i15 >> 2] | 0) | 0)) break;
    }
    HEAP32[i13 >> 2] = 0;
    break L11;
   } while (0);
   HEAP32[i13 >> 2] = _regtry(HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
   break;
  }
  while (1) {
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break L11;
   if (HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0) {
    i4 = (HEAP32[26325] | 0) + (HEAP32[i8 >> 2] | 0) | 0;
    i3 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
    if (HEAP32[26323] | 0) HEAP32[i12 >> 2] = _cstrchr(i4, i3) | 0; else HEAP32[i12 >> 2] = _vim_strbyte(i4, i3) | 0;
    if (!(HEAP32[i12 >> 2] | 0)) {
     i5 = 42;
     break;
    }
    HEAP32[i8 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[26325] | 0);
   }
   if ((HEAP32[26324] | 0) > 0) if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[26324] | 0)) {
    i5 = 46;
    break;
   }
   HEAP32[i13 >> 2] = _regtry(HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
   if ((HEAP32[i13 >> 2] | 0) > 0) break L11;
   if (HEAP32[26326] | 0) {
    HEAP32[26326] = 0;
    HEAP32[26325] = _reg_getline(0) | 0;
   }
   if (!(HEAPU8[(HEAP32[26325] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0)) break L11;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  if ((i5 | 0) == 42) {
   HEAP32[i13 >> 2] = 0;
   break;
  } else if ((i5 | 0) == 46) {
   HEAP32[i13 >> 2] = 0;
   break;
  }
 } while (0);
 if ((HEAP32[26338] | 0) >>> 0 > 400 & (HEAP32[26337] | 0) != 0) {
  _vim_free(HEAP32[26337] | 0);
  HEAP32[26337] = 0;
 }
 if ((HEAP32[26409] | 0) > 2048) _ga_clear(105632);
 if ((HEAP32[26414] | 0) <= 64) {
  i16 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i6;
  return i16 | 0;
 }
 _ga_clear(105652);
 i16 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i6;
 return i16 | 0;
}

function _do_in_path(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i8 = i7 + 16 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7;
 i11 = i7 + 88 | 0;
 i12 = i7 + 84 | 0;
 i13 = i7 + 80 | 0;
 i14 = i7 + 76 | 0;
 i15 = i7 + 72 | 0;
 i16 = i7 + 68 | 0;
 i17 = i7 + 64 | 0;
 i18 = i7 + 60 | 0;
 i19 = i7 + 56 | 0;
 i20 = i7 + 52 | 0;
 i21 = i7 + 48 | 0;
 i22 = i7 + 44 | 0;
 i23 = i7 + 40 | 0;
 i24 = i7 + 36 | 0;
 i25 = i7 + 32 | 0;
 i26 = i7 + 28 | 0;
 i27 = i7 + 24 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i19 >> 2] = _vim_strsave(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i18 >> 2] = _alloc(4096) | 0;
 L1 : do if ((HEAP32[i18 >> 2] | 0) != 0 & (HEAP32[i19 >> 2] | 0) != 0) {
  if ((HEAP32[26888] | 0) > 1 & (HEAP32[i12 >> 2] | 0) != 0) {
   _verbose_enter();
   i5 = HEAP32[i11 >> 2] | 0;
   HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i10 + 4 >> 2] = i5;
   _smsg(45314, i10) | 0;
   _verbose_leave();
  }
  HEAP32[i16 >> 2] = HEAP32[i19 >> 2];
  L6 : while (1) {
   if (!(HEAPU8[HEAP32[i16 >> 2] >> 0] | 0)) break L1;
   if (!(HEAP32[i13 >> 2] & 1)) if (!((HEAP32[i24 >> 2] | 0) != 0 ^ 1)) break L1;
   _copy_option_part(i16, HEAP32[i18 >> 2] | 0, 4096, 84434) | 0;
   HEAP32[i25 >> 2] = _strlen(HEAP32[i18 >> 2] | 0) | 0;
   do if (HEAP32[i13 >> 2] & 192 | 0) {
    if ((HEAP32[i25 >> 2] | 0) >>> 0 >= 5) i28 = (_strcmp((HEAP32[i18 >> 2] | 0) + (HEAP32[i25 >> 2] | 0) + -5 | 0, 80841) | 0) == 0; else i28 = 0;
    HEAP32[i26 >> 2] = i28 & 1;
    if (HEAP32[i26 >> 2] | 0) {
     if (!(HEAP32[i13 >> 2] & 64)) i6 = 13;
    } else i6 = 13;
    if ((i6 | 0) == 13) {
     i6 = 0;
     if (HEAP32[i26 >> 2] | 0) break;
     if (!(HEAP32[i13 >> 2] & 128)) break;
    }
    continue L6;
   } while (0);
   L24 : do if (!(HEAP32[i12 >> 2] | 0)) {
    FUNCTION_TABLE_vii[HEAP32[i14 >> 2] & 3](HEAP32[i18 >> 2] | 0, i15);
    if (!(HEAP32[i24 >> 2] | 0)) HEAP32[i24 >> 2] = (HEAP32[i15 >> 2] | 0) == 0 & 1;
   } else {
    i5 = HEAP32[i25 >> 2] | 0;
    if ((i5 + (_strlen(HEAP32[i12 >> 2] | 0) | 0) + 2 | 0) >>> 0 < 4096) {
     _add_pathsep(HEAP32[i18 >> 2] | 0);
     i5 = HEAP32[i18 >> 2] | 0;
     HEAP32[i20 >> 2] = i5 + (_strlen(HEAP32[i18 >> 2] | 0) | 0);
     HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
     while (1) {
      if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) break L24;
      if (!(HEAP32[i13 >> 2] & 1)) if (!((HEAP32[i24 >> 2] | 0) != 0 ^ 1)) break L24;
      i5 = HEAP32[i20 >> 2] | 0;
      _copy_option_part(i17, i5 | 0, 4096 - (i5 - (HEAP32[i18 >> 2] | 0)) | 0, 45341) | 0;
      if ((HEAP32[26888] | 0) > 2) {
       _verbose_enter();
       HEAP32[i9 >> 2] = HEAP32[i18 >> 2];
       _smsg(45344, i9) | 0;
       _verbose_leave();
      }
      if ((_gen_expand_wildcards(1, i18, i21, i22, HEAP32[i13 >> 2] & 2 | 0 ? 1 : 2) | 0) == 1) {
       HEAP32[i23 >> 2] = 0;
       while (1) {
        if ((HEAP32[i23 >> 2] | 0) >= (HEAP32[i21 >> 2] | 0)) break;
        FUNCTION_TABLE_vii[HEAP32[i14 >> 2] & 3](HEAP32[(HEAP32[i22 >> 2] | 0) + (HEAP32[i23 >> 2] << 2) >> 2] | 0, HEAP32[i15 >> 2] | 0);
        HEAP32[i24 >> 2] = 1;
        if (!(HEAP32[i13 >> 2] & 1)) break;
        HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
       }
       _FreeWild(HEAP32[i21 >> 2] | 0, HEAP32[i22 >> 2] | 0);
      }
     }
    }
   } while (0);
  }
 } while (0);
 _vim_free(HEAP32[i18 >> 2] | 0);
 _vim_free(HEAP32[i19 >> 2] | 0);
 if (!((HEAP32[i24 >> 2] | 0) == 0 & (HEAP32[i12 >> 2] | 0) != 0)) {
  i29 = HEAP32[i24 >> 2] | 0;
  i30 = (i29 | 0) != 0;
  i31 = i30 ? 1 : 0;
  STACKTOP = i7;
  return i31 | 0;
 }
 HEAP32[i27 >> 2] = (HEAP32[i11 >> 2] | 0) == (HEAP32[26969] | 0) ? 63035 : 63093;
 if (HEAP32[i13 >> 2] & 4 | 0) {
  _emsg3(94265, HEAP32[i27 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
  i29 = HEAP32[i24 >> 2] | 0;
  i30 = (i29 | 0) != 0;
  i31 = i30 ? 1 : 0;
  STACKTOP = i7;
  return i31 | 0;
 }
 if ((HEAP32[26888] | 0) <= 0) {
  i29 = HEAP32[i24 >> 2] | 0;
  i30 = (i29 | 0) != 0;
  i31 = i30 ? 1 : 0;
  STACKTOP = i7;
  return i31 | 0;
 }
 _verbose_enter();
 i13 = HEAP32[i12 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i27 >> 2];
 HEAP32[i8 + 4 >> 2] = i13;
 _smsg(45363, i8) | 0;
 _verbose_leave();
 i29 = HEAP32[i24 >> 2] | 0;
 i30 = (i29 | 0) != 0;
 i31 = i30 ? 1 : 0;
 STACKTOP = i7;
 return i31 | 0;
}

function _fix_help_buffer() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i2 + 48 | 0;
 i4 = i2 + 44 | 0;
 i5 = i2 + 40 | 0;
 i6 = i2 + 36 | 0;
 i7 = i2 + 32 | 0;
 i8 = i2 + 28 | 0;
 i9 = i2 + 24 | 0;
 i10 = i2 + 20 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 12 | 0;
 i13 = i2 + 8 | 0;
 i14 = i2 + 4 | 0;
 i15 = i2;
 HEAP32[i5 >> 2] = 0;
 if (_strcmp(HEAP32[(HEAP32[26773] | 0) + 624 >> 2] | 0, 94752) | 0) {
  HEAP32[26785] = (HEAP32[26785] | 0) + 1;
  _set_option_value(65816, 0, 94752, 4) | 0;
  HEAP32[26785] = (HEAP32[26785] | 0) + -1;
 }
 HEAP32[i3 >> 2] = 1;
 while (1) {
  i16 = HEAP32[26773] | 0;
  if ((HEAP32[i3 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) break;
  HEAP32[i4 >> 2] = _ml_get_buf(i16, HEAP32[i3 >> 2] | 0, 0) | 0;
  HEAP32[i6 >> 2] = _strlen(HEAP32[i4 >> 2] | 0) | 0;
  if ((HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[i6 >> 2] | 0) > 0) if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 32) if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 9) {
   if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 60) {
    HEAP32[i4 >> 2] = _ml_get_buf(HEAP32[26773] | 0, HEAP32[i3 >> 2] | 0, 1) | 0;
    HEAP8[HEAP32[i4 >> 2] >> 0] = 32;
   }
   HEAP32[i5 >> 2] = 0;
  }
  L15 : do if ((HEAP32[i5 >> 2] | 0) == 0 & (HEAP32[i6 >> 2] | 0) > 0) {
   do if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 1) >> 0] | 0 | 0) == 62) {
    if ((HEAP32[i6 >> 2] | 0) != 1) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 2) >> 0] | 0 | 0) != 32) break;
    HEAP32[i4 >> 2] = _ml_get_buf(HEAP32[26773] | 0, HEAP32[i3 >> 2] | 0, 1) | 0;
    HEAP8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 1) >> 0] = 32;
    HEAP32[i5 >> 2] = 1;
    break L15;
   } while (0);
   if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 1) >> 0] | 0 | 0) == 126) {
    HEAP32[i4 >> 2] = _ml_get_buf(HEAP32[26773] | 0, HEAP32[i3 >> 2] | 0, 1) | 0;
    HEAP8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 1) >> 0] = 32;
   }
  } while (0);
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 HEAP32[i7 >> 2] = _gettail(HEAP32[i16 + 76 >> 2] | 0) | 0;
 if (_vim_fnamecmp(HEAP32[i7 >> 2] | 0, 43727) | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 >> 2] = 1;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) {
   i1 = 48;
   break;
  }
  HEAP32[i4 >> 2] = _ml_get_buf(HEAP32[26773] | 0, HEAP32[i3 >> 2] | 0, 0) | 0;
  if (_strstr(HEAP32[i4 >> 2] | 0, 44233) | 0) break;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 48) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[26969];
 while (1) {
  if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
  _copy_option_part(i8, HEAP32[26885] | 0, 4096, 84434) | 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i9 >> 2] = _vim_getenv(63936, i10) | 0;
  if (HEAP32[i9 >> 2] | 0) if ((_fullpathcmp(HEAP32[i9 >> 2] | 0, HEAP32[26885] | 0, 0) | 0) != 1) {
   _add_pathsep(HEAP32[26885] | 0);
   _strcat(HEAP32[26885] | 0, 44251) | 0;
   i4 = (_gen_expand_wildcards(1, 107540, i11, i12, 34) | 0) == 1;
   if (i4 & (HEAP32[i11 >> 2] | 0) > 0) {
    HEAP32[i15 >> 2] = 0;
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
     if (HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] | 0) {
      HEAP32[i13 >> 2] = _fopen(HEAP32[(HEAP32[i12 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] | 0, 94911) | 0;
      if (HEAP32[i13 >> 2] | 0) {
       _vim_fgets(HEAP32[26882] | 0, 1025, HEAP32[i13 >> 2] | 0) | 0;
       if ((HEAPU8[HEAP32[26882] >> 0] | 0 | 0) == 42) {
        i4 = _vim_strchr((HEAP32[26882] | 0) + 1 | 0, 42) | 0;
        HEAP32[i14 >> 2] = i4;
        if (i4 | 0) {
         HEAP8[HEAP32[26882] >> 0] = 124;
         HEAP8[HEAP32[i14 >> 2] >> 0] = 124;
         while (1) {
          if (!(HEAPU8[HEAP32[i14 >> 2] >> 0] | 0)) break;
          if ((HEAPU8[HEAP32[i14 >> 2] >> 0] | 0 | 0) == 13) i1 = 38; else if ((HEAPU8[HEAP32[i14 >> 2] >> 0] | 0 | 0) == 10) i1 = 38;
          if ((i1 | 0) == 38) {
           i1 = 0;
           HEAP8[HEAP32[i14 >> 2] >> 0] = 0;
          }
          HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
         }
         _ml_append(HEAP32[i3 >> 2] | 0, HEAP32[26882] | 0, 0, 0) | 0;
         HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
        }
       }
       _fclose(HEAP32[i13 >> 2] | 0) | 0;
      }
     }
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    }
    _FreeWild(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0);
   }
  }
  if (HEAP32[i10 >> 2] | 0) _vim_free(HEAP32[i9 >> 2] | 0);
 }
 STACKTOP = i2;
 return;
}

function _msg_puts_display(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 40 | 0;
 i8 = i6 + 36 | 0;
 i9 = i6 + 32 | 0;
 i10 = i6 + 28 | 0;
 i11 = i6 + 24 | 0;
 i12 = i6 + 20 | 0;
 i13 = i6 + 16 | 0;
 i14 = i6 + 12 | 0;
 i15 = i6 + 8 | 0;
 i16 = i6 + 4 | 0;
 i17 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i15 >> 2] = HEAP32[27043];
 HEAP32[26722] = 0;
 L1 : while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= 0) if (((HEAP32[i11 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) >= (HEAP32[i8 >> 2] | 0)) break;
  if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) break;
  do if (!(HEAP32[i10 >> 2] | 0)) if ((HEAP32[26877] | 0) >= ((HEAP32[10173] | 0) - 1 | 0)) {
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 10) if (((HEAP32[27043] | 0) + (HEAP32[i13 >> 2] | 0) | 0) < ((HEAP32[10174] | 0) - 1 | 0)) {
    if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 9) break;
    if (((HEAP32[27043] | 0) + (HEAP32[i13 >> 2] | 0) | 0) < ((HEAP32[10174] | 0) - 1 & -8 | 0)) break;
   }
   if ((HEAP32[i13 >> 2] | 0) > 0) _t_puts(i13, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0);
   if ((HEAP32[26730] | 0) != 0 & (HEAP32[10176] | 0) == 0) break L1;
   _msg_scroll_up();
   HEAP32[26877] = (HEAP32[10173] | 0) - 2;
   if ((HEAP32[27043] | 0) >= (HEAP32[10174] | 0)) HEAP32[27043] = (HEAP32[10174] | 0) - 1;
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) >= 32) {
    i4 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i4 + 1;
    _msg_screen_putchar(HEAPU8[i4 >> 0] | 0, HEAP32[i9 >> 2] | 0);
    HEAP32[i17 >> 2] = 1;
   } else HEAP32[i17 >> 2] = 0;
   if (HEAP32[26958] | 0) _store_sb_text(i14, HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, i15, 1);
   _inc_msg_scrolled();
   HEAP32[26721] = 1;
   HEAP32[26699] = 1;
   if (!((HEAP32[26876] | 0) <= 0 | (HEAP32[26798] | 0) != 0)) HEAP32[26876] = (HEAP32[26876] | 0) + -1;
   if ((HEAP32[10176] | 0) > 0) HEAP32[10176] = (HEAP32[10176] | 0) + -1;
   if (!((HEAP32[26958] | 0) != 0 & (HEAP32[10176] | 0) == 0 & (HEAP32[10180] | 0) != 513 ^ 1 | (HEAP32[26730] | 0) != 0 | (HEAP32[26798] | 0) != 0)) {
    _do_more_prompt(0) | 0;
    if (HEAP32[26723] | 0) {
     i5 = 62;
     break L1;
    }
   }
   if (HEAP32[i17 >> 2] | 0) continue L1;
  } while (0);
  if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 10) i18 = 1; else i18 = ((HEAP32[27043] | 0) + (HEAP32[i13 >> 2] | 0) | 0) >= (HEAP32[10174] | 0);
  HEAP32[i16 >> 2] = i18 & 1;
  do if ((HEAP32[i13 >> 2] | 0) > 0) {
   if (!(HEAP32[i16 >> 2] | 0)) if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 13) if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 8) if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 9) if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 7) break;
   _t_puts(i13, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0);
  } while (0);
  if (!((HEAP32[i16 >> 2] | 0) != 0 & (HEAP32[26958] | 0) != 0 ^ 1 | (HEAP32[i10 >> 2] | 0) != 0)) _store_sb_text(i14, HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, i15, 1);
  L55 : do if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 10) {
   HEAP32[26711] = 0;
   HEAP32[27043] = 0;
   i4 = (HEAP32[26877] | 0) + 1 | 0;
   HEAP32[26877] = i4;
   if ((i4 | 0) >= (HEAP32[10173] | 0)) HEAP32[26877] = (HEAP32[10173] | 0) - 1;
  } else {
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 13) {
    HEAP32[27043] = 0;
    break;
   }
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 8) {
    if (!(HEAP32[27043] | 0)) break;
    HEAP32[27043] = (HEAP32[27043] | 0) + -1;
    break;
   }
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 9) while (1) {
    _msg_screen_putchar(32, HEAP32[i9 >> 2] | 0);
    if (!(HEAP32[27043] & 7)) break L55;
   }
   if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 7) {
    _vim_beep(65536);
    break;
   }
   if (!(HEAP32[i13 >> 2] | 0)) HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  } while (0);
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 62) {
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i13 >> 2] | 0) > 0) _t_puts(i13, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 if (!((HEAP32[26958] | 0) == 0 | (HEAP32[i10 >> 2] | 0) != 0)) _store_sb_text(i14, HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, i15, 0);
 _msg_check();
 STACKTOP = i6;
 return;
}

function _check_changed_any(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3 + 68 | 0;
 i5 = i3 + 64 | 0;
 i6 = i3 + 60 | 0;
 i7 = i3 + 56 | 0;
 i8 = i3 + 52 | 0;
 i9 = i3 + 48 | 0;
 i10 = i3 + 44 | 0;
 i11 = i3 + 40 | 0;
 i12 = i3 + 36 | 0;
 i13 = i3 + 32 | 0;
 i14 = i3 + 28 | 0;
 i15 = i3 + 24 | 0;
 i16 = i3 + 12 | 0;
 i17 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i8 >> 2] = HEAP32[26771];
 while (1) {
  i18 = HEAP32[i12 >> 2] | 0;
  if (!(HEAP32[i8 >> 2] | 0)) break;
  HEAP32[i12 >> 2] = i18 + 1;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2];
 }
 if (!i18) {
  HEAP32[i4 >> 2] = 0;
  i19 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i19 | 0;
 }
 HEAP32[i13 >> 2] = _alloc(HEAP32[i12 >> 2] << 2) | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i19 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i19 | 0;
 }
 i12 = HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = i2 + 1;
 HEAP32[i18 + (i2 << 2) >> 2] = i12;
 HEAP32[i15 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i15 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[26773] | 0)) _add_bufnum(HEAP32[i13 >> 2] | 0, i11, HEAP32[(HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) + 92 >> 2] | 0);
  HEAP32[i15 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2];
 }
 HEAP32[i14 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i14 >> 2] | 0)) break;
  L23 : do if ((HEAP32[i14 >> 2] | 0) != (HEAP32[26886] | 0)) {
   HEAP32[i15 >> 2] = HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2];
   while (1) {
    if (!(HEAP32[i15 >> 2] | 0)) break L23;
    _add_bufnum(HEAP32[i13 >> 2] | 0, i11, HEAP32[(HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) + 92 >> 2] | 0);
    HEAP32[i15 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2];
   }
  } while (0);
  HEAP32[i14 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
 }
 HEAP32[i8 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) break;
  _add_bufnum(HEAP32[i13 >> 2] | 0, i11, HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] | 0);
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2];
 }
 HEAP32[i10 >> 2] = 0;
 L34 : while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = _buflist_findnr(HEAP32[(HEAP32[i13 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0) | 0;
  do if (HEAP32[i8 >> 2] | 0) {
   if (HEAP32[i5 >> 2] | 0) if (HEAP32[(HEAP32[i8 >> 2] | 0) + 56 >> 2] | 0) break;
   if (_bufIsChanged(HEAP32[i8 >> 2] | 0) | 0) {
    _set_bufref(i16, HEAP32[i8 >> 2] | 0);
    if (_check_changed(HEAP32[i8 >> 2] | 0, (HEAP32[26891] | 0 ? 1 : 0) | 2 | 8) | 0) if (_bufref_valid(i16) | 0) break L34;
   }
  } while (0);
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 L46 : do if ((HEAP32[i10 >> 2] | 0) < (HEAP32[i11 >> 2] | 0)) {
  HEAP32[i7 >> 2] = 1;
  HEAP32[26778] = 0;
  if ((HEAP32[26727] | 0) > 0) {
   HEAP32[26877] = HEAP32[26876];
   HEAP32[27043] = 0;
   HEAP32[26711] = 0;
  }
  i16 = (_buf_spname(HEAP32[i8 >> 2] | 0) | 0) != 0;
  i5 = HEAP32[i8 >> 2] | 0;
  if (i16) i20 = _buf_spname(i5) | 0; else i20 = HEAP32[i5 + 76 >> 2] | 0;
  if (_emsg2(45114, i20) | 0) {
   HEAP32[i9 >> 2] = HEAP32[26720];
   HEAP32[26720] = 0;
   _wait_return(0);
   HEAP32[26720] = HEAP32[i9 >> 2];
  }
  L58 : do if ((HEAP32[i8 >> 2] | 0) != (HEAP32[26773] | 0)) {
   HEAP32[i14 >> 2] = HEAP32[26884];
   L60 : while (1) {
    if (!(HEAP32[i14 >> 2] | 0)) break L58;
    if ((HEAP32[i14 >> 2] | 0) == (HEAP32[26886] | 0)) i21 = HEAP32[26887] | 0; else i21 = HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] | 0;
    HEAP32[i15 >> 2] = i21;
    while (1) {
     if (!(HEAP32[i15 >> 2] | 0)) break;
     if ((HEAP32[(HEAP32[i15 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) break L60;
     HEAP32[i15 >> 2] = HEAP32[(HEAP32[i15 >> 2] | 0) + 12 >> 2];
    }
    HEAP32[i14 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
   }
   _set_bufref(i17, HEAP32[i8 >> 2] | 0);
   _goto_tabpage_win(HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0);
   if (!(_bufref_valid(i17) | 0)) break L46;
  } while (0);
  if ((HEAP32[i8 >> 2] | 0) != (HEAP32[26773] | 0)) _set_curbuf(HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0 ? 2 : 0);
 } while (0);
 _vim_free(HEAP32[i13 >> 2] | 0);
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i19 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i19 | 0;
}

function _makeset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5;
 i7 = i5 + 52 | 0;
 i8 = i5 + 48 | 0;
 i9 = i5 + 44 | 0;
 i10 = i5 + 40 | 0;
 i11 = i5 + 36 | 0;
 i12 = i5 + 32 | 0;
 i13 = i5 + 28 | 0;
 i14 = i5 + 24 | 0;
 i15 = i5 + 20 | 0;
 i16 = i5 + 16 | 0;
 i17 = i5 + 12 | 0;
 i18 = i5 + 8 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i17 >> 2] = 1;
 L1 : while (1) {
  if ((HEAP32[i17 >> 2] | 0) < 0) {
   i4 = 45;
   break;
  }
  HEAP32[i11 >> 2] = 15328;
  while (1) {
   if (!((_istermoption(HEAP32[i11 >> 2] | 0) | 0) != 0 ^ 1)) break;
   L7 : do if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 512)) if (!(_istermoption(HEAP32[i11 >> 2] | 0) | 0)) if (((HEAP32[i17 >> 2] | 0) == 1 | 0) == ((HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 16777216 | 0) != 0 | 0)) {
    if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0)) if (!(HEAP32[i9 >> 2] & 2)) break;
    if (HEAP32[i9 >> 2] & 2 | 0) if (HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 2097152 | 0) break;
    HEAP32[i12 >> 2] = _get_varp_scope(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
    if (HEAP32[i9 >> 2] & 2 | 0) if (_optval_default(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) break;
    HEAP32[i16 >> 2] = 2;
    if (HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0) if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) == (-1 | 0)) {
     if (!(HEAP32[i9 >> 2] & 4)) break;
     if (!((HEAP32[i9 >> 2] & 2 | 0) != 0 | (HEAP32[i10 >> 2] | 0) != 0)) {
      HEAP32[i13 >> 2] = _get_varp_scope(HEAP32[i11 >> 2] | 0, 2) | 0;
      if (!(_optval_default(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0)) {
       HEAP32[i16 >> 2] = 1;
       HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
       HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
      }
     }
    }
    while (1) {
     if ((HEAP32[i16 >> 2] | 0) > 2) break L7;
     if ((HEAP32[i16 >> 2] | 0) == 1) i4 = 24; else if (HEAP32[i9 >> 2] & 2 | 0) i4 = 24; else HEAP32[i15 >> 2] = 71657;
     if ((i4 | 0) == 24) {
      i4 = 0;
      HEAP32[i15 >> 2] = 71653;
     }
     do if (HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 1 | 0) {
      if (!(_put_setbool(HEAP32[i8 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[HEAP32[i11 >> 2] >> 2] | 0, HEAP32[HEAP32[i12 >> 2] >> 2] | 0) | 0)) {
       i4 = 28;
       break L1;
      }
     } else {
      if (HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 2 | 0) if (!(_put_setnum(HEAP32[i8 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[HEAP32[i11 >> 2] >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0)) {
       i4 = 31;
       break L1;
      } else break;
      HEAP32[i18 >> 2] = 0;
      if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0) == 16402) {
       i3 = HEAP32[i8 >> 2] | 0;
       i2 = HEAP32[HEAP32[i12 >> 2] >> 2] | 0;
       HEAP32[i6 >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
       HEAP32[i6 + 4 >> 2] = i2;
       if ((_fprintf(i3, 71666, i6) | 0) < 0) {
        i4 = 35;
        break L1;
       }
       if ((_put_eol(HEAP32[i8 >> 2] | 0) | 0) < 0) {
        i4 = 35;
        break L1;
       }
       HEAP32[i18 >> 2] = 1;
      }
      if (!(_put_setstring(HEAP32[i8 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[HEAP32[i11 >> 2] >> 2] | 0, HEAP32[i12 >> 2] | 0, (HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 16 | 0) != 0 & 1) | 0)) {
       i4 = 38;
       break L1;
      }
      if (!(HEAP32[i18 >> 2] | 0)) break;
      if (!(_put_line(HEAP32[i8 >> 2] | 0, 74741) | 0)) {
       i4 = 41;
       break L1;
      }
     } while (0);
     HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 28;
  }
  HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
 }
 if ((i4 | 0) == 28) {
  HEAP32[i7 >> 2] = 0;
  i19 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i19 | 0;
 } else if ((i4 | 0) == 31) {
  HEAP32[i7 >> 2] = 0;
  i19 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i19 | 0;
 } else if ((i4 | 0) == 35) {
  HEAP32[i7 >> 2] = 0;
  i19 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i19 | 0;
 } else if ((i4 | 0) == 38) {
  HEAP32[i7 >> 2] = 0;
  i19 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i19 | 0;
 } else if ((i4 | 0) == 41) {
  HEAP32[i7 >> 2] = 0;
  i19 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i19 | 0;
 } else if ((i4 | 0) == 45) {
  HEAP32[i7 >> 2] = 1;
  i19 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i19 | 0;
 }
 return 0;
}

function ___udivmoddi4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i6 = i1;
 i7 = i2;
 i8 = i7;
 i9 = i3;
 i10 = i4;
 i11 = i10;
 if (!i8) {
  i12 = (i5 | 0) != 0;
  if (!i11) {
   if (i12) {
    HEAP32[i5 >> 2] = (i6 >>> 0) % (i9 >>> 0);
    HEAP32[i5 + 4 >> 2] = 0;
   }
   i13 = 0;
   i14 = (i6 >>> 0) / (i9 >>> 0) >>> 0;
   return (tempRet0 = i13, i14) | 0;
  } else {
   if (!i12) {
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   HEAP32[i5 >> 2] = i1 | 0;
   HEAP32[i5 + 4 >> 2] = i2 & 0;
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
 }
 i12 = (i11 | 0) == 0;
 do if (!i9) {
  if (i12) {
   if (i5 | 0) {
    HEAP32[i5 >> 2] = (i8 >>> 0) % (i9 >>> 0);
    HEAP32[i5 + 4 >> 2] = 0;
   }
   i13 = 0;
   i14 = (i8 >>> 0) / (i9 >>> 0) >>> 0;
   return (tempRet0 = i13, i14) | 0;
  }
  if (!i6) {
   if (i5 | 0) {
    HEAP32[i5 >> 2] = 0;
    HEAP32[i5 + 4 >> 2] = (i8 >>> 0) % (i11 >>> 0);
   }
   i13 = 0;
   i14 = (i8 >>> 0) / (i11 >>> 0) >>> 0;
   return (tempRet0 = i13, i14) | 0;
  }
  i15 = i11 - 1 | 0;
  if (!(i15 & i11)) {
   if (i5 | 0) {
    HEAP32[i5 >> 2] = i1 | 0;
    HEAP32[i5 + 4 >> 2] = i15 & i8 | i2 & 0;
   }
   i13 = 0;
   i14 = i8 >>> ((_llvm_cttz_i32(i11 | 0) | 0) >>> 0);
   return (tempRet0 = i13, i14) | 0;
  }
  i15 = (Math_clz32(i11 | 0) | 0) - (Math_clz32(i8 | 0) | 0) | 0;
  if (i15 >>> 0 <= 30) {
   i16 = i15 + 1 | 0;
   i17 = 31 - i15 | 0;
   i18 = i16;
   i19 = i8 << i17 | i6 >>> (i16 >>> 0);
   i20 = i8 >>> (i16 >>> 0);
   i21 = 0;
   i22 = i6 << i17;
   break;
  }
  if (!i5) {
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
  HEAP32[i5 >> 2] = i1 | 0;
  HEAP32[i5 + 4 >> 2] = i7 | i2 & 0;
  i13 = 0;
  i14 = 0;
  return (tempRet0 = i13, i14) | 0;
 } else {
  if (!i12) {
   i17 = (Math_clz32(i11 | 0) | 0) - (Math_clz32(i8 | 0) | 0) | 0;
   if (i17 >>> 0 <= 31) {
    i16 = i17 + 1 | 0;
    i15 = 31 - i17 | 0;
    i23 = i17 - 31 >> 31;
    i18 = i16;
    i19 = i6 >>> (i16 >>> 0) & i23 | i8 << i15;
    i20 = i8 >>> (i16 >>> 0) & i23;
    i21 = 0;
    i22 = i6 << i15;
    break;
   }
   if (!i5) {
    i13 = 0;
    i14 = 0;
    return (tempRet0 = i13, i14) | 0;
   }
   HEAP32[i5 >> 2] = i1 | 0;
   HEAP32[i5 + 4 >> 2] = i7 | i2 & 0;
   i13 = 0;
   i14 = 0;
   return (tempRet0 = i13, i14) | 0;
  }
  i15 = i9 - 1 | 0;
  if (i15 & i9 | 0) {
   i23 = (Math_clz32(i9 | 0) | 0) + 33 - (Math_clz32(i8 | 0) | 0) | 0;
   i16 = 64 - i23 | 0;
   i17 = 32 - i23 | 0;
   i24 = i17 >> 31;
   i25 = i23 - 32 | 0;
   i26 = i25 >> 31;
   i18 = i23;
   i19 = i17 - 1 >> 31 & i8 >>> (i25 >>> 0) | (i8 << i17 | i6 >>> (i23 >>> 0)) & i26;
   i20 = i26 & i8 >>> (i23 >>> 0);
   i21 = i6 << i16 & i24;
   i22 = (i8 << i16 | i6 >>> (i25 >>> 0)) & i24 | i6 << i17 & i23 - 33 >> 31;
   break;
  }
  if (i5 | 0) {
   HEAP32[i5 >> 2] = i15 & i6;
   HEAP32[i5 + 4 >> 2] = 0;
  }
  if ((i9 | 0) == 1) {
   i13 = i7 | i2 & 0;
   i14 = i1 | 0 | 0;
   return (tempRet0 = i13, i14) | 0;
  } else {
   i15 = _llvm_cttz_i32(i9 | 0) | 0;
   i13 = i8 >>> (i15 >>> 0) | 0;
   i14 = i8 << 32 - i15 | i6 >>> (i15 >>> 0) | 0;
   return (tempRet0 = i13, i14) | 0;
  }
 } while (0);
 if (!i18) {
  i27 = i22;
  i28 = i21;
  i29 = i20;
  i30 = i19;
  i31 = 0;
  i32 = 0;
 } else {
  i6 = i3 | 0 | 0;
  i3 = i10 | i4 & 0;
  i4 = _i64Add(i6 | 0, i3 | 0, -1, -1) | 0;
  i10 = tempRet0;
  i8 = i22;
  i22 = i21;
  i21 = i20;
  i20 = i19;
  i19 = i18;
  i18 = 0;
  do {
   i9 = i8;
   i8 = i22 >>> 31 | i8 << 1;
   i22 = i18 | i22 << 1;
   i1 = i20 << 1 | i9 >>> 31 | 0;
   i9 = i20 >>> 31 | i21 << 1 | 0;
   _i64Subtract(i4 | 0, i10 | 0, i1 | 0, i9 | 0) | 0;
   i2 = tempRet0;
   i7 = ((i2 | 0) < 0 ? -1 : 0) << 1 | 0;
   i11 = i2 >> 31 | i7;
   i18 = i11 & 1;
   i20 = _i64Subtract(i1 | 0, i9 | 0, i11 & i6 | 0, (((i2 | 0) < 0 ? -1 : 0) >> 31 | i7) & i3 | 0) | 0;
   i21 = tempRet0;
   i19 = i19 - 1 | 0;
  } while ((i19 | 0) != 0);
  i27 = i8;
  i28 = i22;
  i29 = i21;
  i30 = i20;
  i31 = 0;
  i32 = i18;
 }
 i18 = i28;
 i28 = 0;
 if (i5 | 0) {
  HEAP32[i5 >> 2] = i30;
  HEAP32[i5 + 4 >> 2] = i29;
 }
 i13 = (i18 | 0) >>> 31 | (i27 | i28) << 1 | (i28 << 1 | i18 >>> 31) & 0 | i31;
 i14 = (i18 << 1 | 0 >>> 31) & -2 | i32;
 return (tempRet0 = i13, i14) | 0;
}

function _chk_modeline(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 44 | 0;
 i6 = i4 + 40 | 0;
 i7 = i4 + 36 | 0;
 i8 = i4 + 32 | 0;
 i9 = i4 + 28 | 0;
 i10 = i4 + 24 | 0;
 i11 = i4 + 20 | 0;
 i12 = i4 + 16 | 0;
 i13 = i4 + 12 | 0;
 i14 = i4 + 8 | 0;
 i15 = i4 + 4 | 0;
 i16 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i14 >> 2] = 1;
 HEAP32[i11 >> 2] = -1;
 HEAP32[i8 >> 2] = _ml_get(HEAP32[i6 >> 2] | 0) | 0;
 L1 : while (1) {
  if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
  if ((HEAP32[i11 >> 2] | 0) == -1) i3 = 5; else if (_vim_isspace(HEAP32[i11 >> 2] | 0) | 0) i3 = 5;
  do if ((i3 | 0) == 5) {
   i3 = 0;
   if ((HEAP32[i11 >> 2] | 0) != -1) if (!(_strncmp(HEAP32[i8 >> 2] | 0, 41674, 3) | 0)) break L1;
   if (!(_strncmp(HEAP32[i8 >> 2] | 0, 41678, 3) | 0)) break L1;
   if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 118) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 86) break;
   if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) == 105) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] | 0) == 109) {
    if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) == 60) i3 = 15; else if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) == 61) i3 = 15; else if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) == 62) i3 = 15; else HEAP32[i9 >> 2] = (HEAP32[i8 >> 2] | 0) + 3;
    if ((i3 | 0) == 15) {
     i3 = 0;
     HEAP32[i9 >> 2] = (HEAP32[i8 >> 2] | 0) + 4;
    }
    HEAP32[i12 >> 2] = _getdigits(i9) | 0;
    if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 58) {
     if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 86) if (_strncmp(_skipwhite((HEAP32[i9 >> 2] | 0) + 1 | 0) | 0, 71653, 3) | 0) break;
     if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) == 58) break L1;
     if (801 >= (HEAP32[i12 >> 2] | 0)) if (_isdigit(HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) | 0) break L1;
     if (801 < (HEAP32[i12 >> 2] | 0)) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) == 60) break L1;
     if (801 > (HEAP32[i12 >> 2] | 0)) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) == 62) break L1;
     if (801 == (HEAP32[i12 >> 2] | 0)) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 3 >> 0] | 0) == 61) break L1;
    }
   }
  } while (0);
  HEAP32[i11 >> 2] = HEAPU8[HEAP32[i8 >> 2] >> 0];
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if (HEAP8[HEAP32[i8 >> 2] >> 0] | 0) {
  do HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1; while ((HEAPU8[(HEAP32[i8 >> 2] | 0) + -1 >> 0] | 0) != 58);
  i11 = _vim_strsave(HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = i11;
  HEAP32[i8 >> 2] = i11;
  if (!(HEAP32[i10 >> 2] | 0)) {
   HEAP32[i5 >> 2] = 0;
   i17 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i17 | 0;
  }
  HEAP32[i16 >> 2] = HEAP32[26732];
  HEAP32[i15 >> 2] = HEAP32[26731];
  HEAP32[26732] = HEAP32[i6 >> 2];
  HEAP32[26731] = 68005;
  HEAP32[i13 >> 2] = 0;
  while (1) {
   if (HEAP32[i13 >> 2] | 0) break;
   HEAP32[i8 >> 2] = _skipwhite(HEAP32[i8 >> 2] | 0) | 0;
   if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
   HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
   while (1) {
    if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) != 58) i18 = (HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) != 0; else i18 = 0;
    i19 = HEAP32[i9 >> 2] | 0;
    if (!i18) break;
    if ((HEAPU8[i19 >> 0] | 0) == 92) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0) == 58) {
     i6 = HEAP32[i9 >> 2] | 0;
     i11 = i6 | 0;
     i12 = i6 + 1 | 0;
     _memmove(i11 | 0, i12 | 0, (_strlen((HEAP32[i9 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
    }
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   }
   if (!(HEAPU8[i19 >> 0] | 0)) HEAP32[i13 >> 2] = 1;
   if (!(_strncmp(HEAP32[i8 >> 2] | 0, 41682, 4) | 0)) i3 = 50; else if (!(_strncmp(HEAP32[i8 >> 2] | 0, 41687, 3) | 0)) i3 = 50;
   if ((i3 | 0) == 50) {
    i3 = 0;
    if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) != 58) break;
    HEAP32[i13 >> 2] = 1;
    HEAP32[i8 >> 2] = (_vim_strchr(HEAP32[i8 >> 2] | 0, 32) | 0) + 1;
   }
   HEAP8[HEAP32[i9 >> 2] >> 0] = 0;
   if (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) {
    HEAP32[i14 >> 2] = _do_set(HEAP32[i8 >> 2] | 0, 12 | HEAP32[i7 >> 2]) | 0;
    if (!(HEAP32[i14 >> 2] | 0)) break;
   }
   HEAP32[i8 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  HEAP32[26732] = HEAP32[i16 >> 2];
  HEAP32[26731] = HEAP32[i15 >> 2];
  _vim_free(HEAP32[i10 >> 2] | 0);
 }
 HEAP32[i5 >> 2] = HEAP32[i14 >> 2];
 i17 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i17 | 0;
}

function _scroll_to_fraction(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2];
 do if ((HEAP32[i9 >> 2] | 0) > 0) {
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 200 + 24 >> 2] | 0) if ((HEAP32[i4 >> 2] | 0) != (HEAP32[26881] | 0)) break;
  i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i6 >> 2] = i2;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) < 1 ? 1 : i2;
  i2 = ((Math_imul(HEAP32[(HEAP32[i4 >> 2] | 0) + 804 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) - 1 + 8192 | 0) / 16384 | 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 136 >> 2] = i2;
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i8 >> 2] = (_plines_win_col(i2 | 0, HEAP32[i6 >> 2] | 0, HEAP32[i2 + 24 + 4 >> 2] | 0) | 0) - 1;
  HEAP32[i7 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 136 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
  if ((HEAP32[i7 >> 2] | 0) >= 0) {
   HEAP32[i10 >> 2] = _plines_win(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0;
   if ((HEAP32[i7 >> 2] | 0) > ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0)) {
    HEAP32[i7 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i10 >> 2] | 0);
    i2 = (HEAP32[i4 >> 2] | 0) + 136 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - ((HEAP32[i10 >> 2] | 0) - (HEAP32[i8 >> 2] | 0));
   }
  }
  if ((HEAP32[i7 >> 2] | 0) < 0) {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 136 >> 2] = HEAP32[i8 >> 2];
   L12 : do if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 136 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
    i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0;
    if ((i2 - (_win_col_off(HEAP32[i4 >> 2] | 0) | 0) | 0) > 0) {
     i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0;
     i1 = i2 - (_win_col_off(HEAP32[i4 >> 2] | 0) | 0) | 0;
     i2 = (HEAP32[i4 >> 2] | 0) + 80 | 0;
     HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i1;
     i1 = (HEAP32[i4 >> 2] | 0) + 136 | 0;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
     while (1) {
      if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 136 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) break L12;
      i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0;
      i2 = i1 - (_win_col_off(HEAP32[i4 >> 2] | 0) | 0) | 0;
      i1 = i2 + (_win_col_off2(HEAP32[i4 >> 2] | 0) | 0) | 0;
      i2 = (HEAP32[i4 >> 2] | 0) + 80 | 0;
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i1;
      i1 = (HEAP32[i4 >> 2] | 0) + 136 | 0;
      HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
     }
    }
   } while (0);
   _set_topline(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0);
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) > 0) {
   while (1) {
    if (!((HEAP32[i7 >> 2] | 0) > 0 ? (HEAP32[i6 >> 2] | 0) > 1 : 0)) break;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
    HEAP32[i8 >> 2] = _plines_win(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 1) | 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
   }
   if ((HEAP32[i7 >> 2] | 0) < 0) {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    i1 = (HEAP32[i4 >> 2] | 0) + 136 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - ((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0));
   } else if ((HEAP32[i7 >> 2] | 0) > 0) {
    HEAP32[i6 >> 2] = 1;
    i1 = (HEAP32[i4 >> 2] | 0) + 136 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
   }
   _set_topline(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  }
 } while (0);
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[26881] | 0)) {
  if (HEAP32[26971] | 0) _update_topline();
  _curs_columns(0);
 }
 if ((HEAP32[i5 >> 2] | 0) <= 0) {
  i11 = HEAP32[i4 >> 2] | 0;
  _win_comp_scroll(i11);
  i12 = HEAP32[i4 >> 2] | 0;
  _redraw_win_later(i12, 35);
  i13 = HEAP32[i4 >> 2] | 0;
  i14 = i13 + 176 | 0;
  HEAP32[i14 >> 2] = 1;
  i15 = HEAP32[i4 >> 2] | 0;
  _invalidate_botline_win(i15);
  STACKTOP = i3;
  return;
 }
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 + 808 >> 2] = HEAP32[i5 + 136 >> 2];
 i11 = HEAP32[i4 >> 2] | 0;
 _win_comp_scroll(i11);
 i12 = HEAP32[i4 >> 2] | 0;
 _redraw_win_later(i12, 35);
 i13 = HEAP32[i4 >> 2] | 0;
 i14 = i13 + 176 | 0;
 HEAP32[i14 >> 2] = 1;
 i15 = HEAP32[i4 >> 2] | 0;
 _invalidate_botline_win(i15);
 STACKTOP = i3;
 return;
}

function _do_cmdline(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i6;
 i8 = i6 + 52 | 0;
 i9 = i6 + 48 | 0;
 i10 = i6 + 44 | 0;
 i11 = i6 + 40 | 0;
 i12 = i6 + 36 | 0;
 i13 = i6 + 32 | 0;
 i14 = i6 + 28 | 0;
 i15 = i6 + 24 | 0;
 i16 = i6 + 20 | 0;
 i17 = i6 + 16 | 0;
 i18 = i6 + 12 | 0;
 i19 = i6 + 8 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = 1;
 if ((HEAP32[25227] | 0) >= 200) {
  _emsg(45655) | 0;
  HEAP32[i8 >> 2] = 0;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i6;
  return i20 | 0;
 }
 HEAP32[25227] = (HEAP32[25227] | 0) + 1;
 HEAP32[26880] = 0;
 if (!(HEAP32[i12 >> 2] & 8)) if (!(_getline_equal(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 6) | 0)) HEAP32[27161] = 0;
 HEAP32[i13 >> 2] = HEAP32[i9 >> 2];
 L9 : while (1) {
  if (!(HEAP32[i13 >> 2] | 0)) HEAP32[26880] = 0;
  do if (!(HEAP32[i13 >> 2] | 0)) {
   if ((HEAP32[i17 >> 2] | 0) == 1) if (_getline_equal(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 6) | 0) HEAP32[26711] = 1;
   if (!(HEAP32[i10 >> 2] | 0)) {
    i5 = 16;
    break L9;
   }
   i9 = FUNCTION_TABLE_iiii[HEAP32[i10 >> 2] & 15](58, HEAP32[i11 >> 2] | 0, 0) | 0;
   HEAP32[i13 >> 2] = i9;
   if (!i9) {
    i5 = 16;
    break L9;
   }
   HEAP32[i15 >> 2] = 1;
   if (HEAP32[i12 >> 2] & 32 | 0) {
    _vim_free(HEAP32[26844] | 0);
    if (!(HEAP32[i17 >> 2] | 0)) {
     HEAP32[26844] = _vim_strsave(HEAP32[i13 >> 2] | 0) | 0;
     break;
    } else {
     HEAP32[26844] = 0;
     break;
    }
   }
  } else if (!(HEAP32[i14 >> 2] | 0)) {
   HEAP32[i13 >> 2] = _vim_strsave(HEAP32[i13 >> 2] | 0) | 0;
   if (!(HEAP32[i13 >> 2] | 0)) {
    i5 = 26;
    break L9;
   }
  } while (0);
  HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
  i9 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i9 + 1;
  if (!i9) if (!((HEAP32[i12 >> 2] & 2 | 0) != 0 | (HEAP32[25228] | 0) != 0)) {
   HEAP32[i16 >> 2] = HEAP32[26711];
   HEAP32[26712] = 0;
   _msg_start();
   HEAP32[26710] = 1;
   HEAP32[26720] = (HEAP32[26720] | 0) + 1;
   HEAP32[26814] = (HEAP32[26814] | 0) + 1;
   HEAP32[i18 >> 2] = 1;
  }
  if ((HEAP32[26888] | 0) >= 15 & (HEAP32[26731] | 0) != 0) {
   HEAP32[26720] = (HEAP32[26720] | 0) + 1;
   _verbose_enter_scroll();
   i9 = HEAP32[i14 >> 2] | 0;
   HEAP32[i7 >> 2] = HEAP32[26732];
   HEAP32[i7 + 4 >> 2] = i9;
   _smsg(45683, i7) | 0;
   if (!(HEAP32[26809] | 0)) _msg_puts(97581);
   _verbose_leave_scroll();
   HEAP32[26720] = (HEAP32[26720] | 0) + -1;
  }
  HEAP32[25228] = (HEAP32[25228] | 0) + 1;
  HEAP32[i13 >> 2] = _do_one_cmd(i14, HEAP32[i12 >> 2] & 1, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[25228] = (HEAP32[25228] | 0) + -1;
  i9 = HEAP32[i14 >> 2] | 0;
  if (!(HEAP32[i13 >> 2] | 0)) {
   if (i9 | 0) {
    _vim_free(HEAP32[i14 >> 2] | 0);
    HEAP32[i14 >> 2] = 0;
   }
  } else {
   i4 = HEAP32[i13 >> 2] | 0;
   _memmove(i9 | 0, i4 | 0, (_strlen(HEAP32[i13 >> 2] | 0) | 0) + 1 | 0) | 0;
   HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
  }
  if (HEAP32[26834] | 0) break;
  if ((HEAP32[26880] | 0) != 0 & (HEAP32[i15 >> 2] | 0) != 0) {
   if (_getline_equal(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 7) | 0) break;
   if (_getline_equal(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 6) | 0) break;
  }
  if (HEAP32[i13 >> 2] | 0) continue; else if (HEAP32[i12 >> 2] & 4 | 0) continue; else break;
 }
 if ((i5 | 0) == 16) {
  if (HEAP32[27161] | 0) if (!(HEAP32[i12 >> 2] & 4)) HEAP32[26721] = 0;
  HEAP32[i19 >> 2] = 0;
 } else if ((i5 | 0) == 26) {
  _emsg(93362) | 0;
  HEAP32[i19 >> 2] = 0;
 }
 _vim_free(HEAP32[i14 >> 2] | 0);
 do if (HEAP32[i18 >> 2] | 0) {
  HEAP32[26814] = (HEAP32[26814] | 0) + -1;
  HEAP32[26720] = (HEAP32[26720] | 0) + -1;
  HEAP32[26710] = 0;
  if (!(HEAP32[i19 >> 2] | 0)) {
   HEAP32[26721] = 0;
   HEAP32[26712] = 0;
   break;
  }
  if (HEAP32[26721] | 0) {
   HEAP32[26711] = HEAP32[26711] | HEAP32[i16 >> 2];
   _wait_return(0);
  }
 } while (0);
 HEAP32[25229] = 0;
 HEAP32[25227] = (HEAP32[25227] | 0) + -1;
 HEAP32[i8 >> 2] = HEAP32[i19 >> 2];
 i20 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i6;
 return i20 | 0;
}

function _win_drag_status_line(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i12 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 if ((HEAP32[i8 >> 2] | 0) != (HEAP32[27114] | 0)) {
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
  if ((HEAP8[HEAP32[i8 >> 2] >> 0] | 0) != 2) {
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   if ((HEAP32[i8 >> 2] | 0) != (HEAP32[27114] | 0)) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
  }
 }
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) == (HEAP32[27114] | 0)) break;
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) break;
  if ((HEAP32[i8 >> 2] | 0) != (HEAP32[27114] | 0)) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  if ((HEAP32[i8 >> 2] | 0) != (HEAP32[27114] | 0)) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
 }
 if ((HEAP32[i6 >> 2] | 0) < 0) {
  HEAP32[i11 >> 2] = 1;
  HEAP32[i6 >> 2] = 0 - (HEAP32[i6 >> 2] | 0);
  L19 : do if ((HEAP32[i8 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) {
   i5 = HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0;
   HEAP32[i9 >> 2] = i5 - (_frame_minheight(HEAP32[i8 >> 2] | 0, 0) | 0);
  } else {
   HEAP32[i9 >> 2] = 0;
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2];
   while (1) {
    i5 = HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0;
    i2 = i5 - (_frame_minheight(HEAP32[i8 >> 2] | 0, 0) | 0) | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i2;
    if ((HEAP32[i8 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) break L19;
    HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
   }
  } while (0);
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
 } else {
  HEAP32[i11 >> 2] = 0;
  HEAP32[i9 >> 2] = (HEAP32[10173] | 0) - (HEAP32[26876] | 0);
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0)) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - 1; else HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[26875] | 0);
  if ((HEAP32[i9 >> 2] | 0) < 0) HEAP32[i9 >> 2] = 0;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
  while (1) {
   if (!(HEAP32[i8 >> 2] | 0)) break;
   i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0;
   i5 = i2 - (_frame_minheight(HEAP32[i8 >> 2] | 0, 0) | 0) | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i5;
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
  }
  HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 }
 if ((HEAP32[i9 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
 if ((HEAP32[i6 >> 2] | 0) <= 0) {
  STACKTOP = i4;
  return;
 }
 if (HEAP32[i8 >> 2] | 0) {
  i9 = HEAP32[i8 >> 2] | 0;
  _frame_new_height(i9 | 0, (HEAP32[i9 + 12 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i11 >> 2] | 0, 0);
 }
 i9 = HEAP32[i7 >> 2] | 0;
 if (HEAP32[i11 >> 2] | 0) HEAP32[i8 >> 2] = i9; else HEAP32[i8 >> 2] = HEAP32[i9 + 24 >> 2];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0 ? (HEAP32[i6 >> 2] | 0) > 0 : 0)) break;
  HEAP32[i12 >> 2] = _frame_minheight(HEAP32[i8 >> 2] | 0, 0) | 0;
  i13 = HEAP32[i8 >> 2] | 0;
  if (((HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) > (HEAP32[i12 >> 2] | 0)) {
   i3 = 41;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - ((HEAP32[i13 + 12 >> 2] | 0) - (HEAP32[i12 >> 2] | 0));
  _frame_new_height(HEAP32[i8 >> 2] | 0, HEAP32[i12 >> 2] | 0, ((HEAP32[i11 >> 2] | 0) != 0 ^ 1) & 1, 0);
  i9 = HEAP32[i8 >> 2] | 0;
  if (HEAP32[i11 >> 2] | 0) HEAP32[i8 >> 2] = HEAP32[i9 + 28 >> 2]; else HEAP32[i8 >> 2] = HEAP32[i9 + 24 >> 2];
 }
 if ((i3 | 0) == 41) _frame_new_height(i13, (HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0, ((HEAP32[i11 >> 2] | 0) != 0 ^ 1) & 1, 0);
 HEAP32[i10 >> 2] = _win_comp_pos() | 0;
 _screen_fill(HEAP32[i10 >> 2] | 0, HEAP32[26876] | 0, 0, HEAP32[10174] | 0, 32, 32, 0);
 HEAP32[26876] = HEAP32[i10 >> 2];
 i10 = (HEAP32[10173] | 0) - (HEAP32[26876] | 0) | 0;
 HEAP32[26875] = i10;
 HEAP32[26875] = (HEAP32[26875] | 0) < 1 ? 1 : i10;
 HEAP32[(HEAP32[26886] | 0) + 32 >> 2] = HEAP32[26875];
 _redraw_all_later(35);
 _showmode() | 0;
 STACKTOP = i4;
 return;
}

function _highlight_changed() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 24 | 0;
 i4 = i2 + 20 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[10183] = 0;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= 46) break;
  HEAP32[108192 + (HEAP32[i4 >> 2] << 2) >> 2] = 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 HEAP32[i5 >> 2] = 0;
 L5 : while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 2) {
   i1 = 46;
   break;
  }
  if (HEAP32[i5 >> 2] | 0) HEAP32[i6 >> 2] = HEAP32[26930]; else HEAP32[i6 >> 2] = _get_highlight_default() | 0;
  L12 : do if (HEAP32[i6 >> 2] | 0) while (1) {
   if (!(HEAP8[HEAP32[i6 >> 2] >> 0] | 0)) break L12;
   HEAP32[i4 >> 2] = 0;
   while (1) {
    if ((HEAP32[i4 >> 2] | 0) >= 46) break;
    if ((HEAP32[30940 + (HEAP32[i4 >> 2] << 2) >> 2] | 0) == (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   }
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   if ((HEAP32[i4 >> 2] | 0) == 46) {
    i1 = 18;
    break L5;
   }
   if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
    i1 = 18;
    break L5;
   }
   HEAP32[i7 >> 2] = 0;
   while (1) {
    if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
    if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 44) break;
    L28 : do if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 9) {
     if ((HEAP32[i7 >> 2] | 0) > 255) {
      i1 = 25;
      break L5;
     }
     switch (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) {
     case 110:
     case 45:
      {
       break L28;
       break;
      }
     case 98:
      {
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
       break L28;
       break;
      }
     case 105:
      {
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4;
       break L28;
       break;
      }
     case 114:
      {
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 1;
       break L28;
       break;
      }
     case 115:
      {
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 32;
       break L28;
       break;
      }
     case 117:
      {
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 8;
       break L28;
       break;
      }
     case 99:
      {
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 16;
       break L28;
       break;
      }
     case 116:
      {
       HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 128;
       break L28;
       break;
      }
     case 58:
      {
       HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
       if (HEAP32[i7 >> 2] | 0) {
        i1 = 36;
        break L5;
       }
       if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
        i1 = 36;
        break L5;
       }
       HEAP32[i8 >> 2] = _vim_strchr(HEAP32[i6 >> 2] | 0, 44) | 0;
       if (!(HEAP32[i8 >> 2] | 0)) {
        i10 = HEAP32[i6 >> 2] | 0;
        HEAP32[i8 >> 2] = i10 + (_strlen(HEAP32[i6 >> 2] | 0) | 0);
       }
       i10 = HEAP32[i6 >> 2] | 0;
       HEAP32[i9 >> 2] = _syn_check_group(i10 | 0, (HEAP32[i8 >> 2] | 0) - i10 | 0) | 0;
       if (!(HEAP32[i9 >> 2] | 0)) {
        i1 = 40;
        break L5;
       }
       HEAP32[i7 >> 2] = _syn_id2attr(HEAP32[i9 >> 2] | 0) | 0;
       HEAP32[i6 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
       break L28;
       break;
      }
     default:
      {
       i1 = 42;
       break L5;
      }
     }
    } while (0);
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   }
   HEAP32[108192 + (HEAP32[i4 >> 2] << 2) >> 2] = HEAP32[i7 >> 2];
   HEAP32[i6 >> 2] = _skip_to_option_part(HEAP32[i6 >> 2] | 0) | 0;
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 18) {
  HEAP32[i3 >> 2] = 0;
  i11 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 } else if ((i1 | 0) == 25) {
  HEAP32[i3 >> 2] = 0;
  i11 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 } else if ((i1 | 0) == 36) {
  HEAP32[i3 >> 2] = 0;
  i11 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 } else if ((i1 | 0) == 40) {
  HEAP32[i3 >> 2] = 0;
  i11 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 } else if ((i1 | 0) == 42) {
  HEAP32[i3 >> 2] = 0;
  i11 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 } else if ((i1 | 0) == 46) {
  HEAP32[i3 >> 2] = 1;
  i11 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 }
 return 0;
}

function _reg_match_visual() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i2 + 56 | 0;
 i4 = i2 + 48 | 0;
 i5 = i2 + 40 | 0;
 i6 = i2 + 32 | 0;
 i7 = i2 + 28 | 0;
 i8 = i2 + 24 | 0;
 i9 = i2 + 20 | 0;
 i10 = i2 + 16 | 0;
 i11 = i2 + 12 | 0;
 i12 = i2 + 8 | 0;
 i13 = i2 + 4 | 0;
 i14 = i2;
 i15 = HEAP32[26318] | 0;
 HEAP32[i8 >> 2] = (i15 | 0) == 0 ? HEAP32[26881] | 0 : i15 | 0;
 if ((HEAP32[27117] | 0) == 0 ? 1 : (HEAP32[26319] | 0) != (HEAP32[26773] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i16 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i16 | 0;
 }
 if (HEAP32[26788] | 0) {
  if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0)) if ((HEAP32[27117] | 0) < (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0)) i1 = 7; else i1 = 8; else if ((HEAP32[27118] | 0) < (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 + 4 >> 2] | 0)) i1 = 7; else i1 = 8;
  if ((i1 | 0) == 7) {
   HEAP32[i4 >> 2] = HEAP32[27117];
   HEAP32[i4 + 4 >> 2] = HEAP32[27118];
   i15 = (HEAP32[i8 >> 2] | 0) + 24 | 0;
   HEAP32[i5 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  } else if ((i1 | 0) == 8) {
   i15 = (HEAP32[i8 >> 2] | 0) + 24 | 0;
   HEAP32[i4 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i5 >> 2] = HEAP32[27117];
   HEAP32[i5 + 4 >> 2] = HEAP32[27118];
  }
  HEAP32[i9 >> 2] = HEAP32[10179];
 } else {
  i15 = (HEAP32[26773] | 0) + 396 | 0;
  if ((HEAP32[(HEAP32[26773] | 0) + 396 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 396 + 8 >> 2] | 0)) if ((HEAP32[i15 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 396 + 8 >> 2] | 0)) i1 = 13; else i1 = 14; else if ((HEAP32[i15 + 4 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 396 + 8 + 4 >> 2] | 0)) i1 = 13; else i1 = 14;
  if ((i1 | 0) == 13) {
   i15 = (HEAP32[26773] | 0) + 396 | 0;
   HEAP32[i4 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   i15 = (HEAP32[26773] | 0) + 396 + 8 | 0;
   HEAP32[i5 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  } else if ((i1 | 0) == 14) {
   i15 = (HEAP32[26773] | 0) + 396 + 8 | 0;
   HEAP32[i4 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
   i15 = (HEAP32[26773] | 0) + 396 | 0;
   HEAP32[i5 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  }
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[26773] | 0) + 396 + 16 >> 2];
 }
 HEAP32[i6 >> 2] = (HEAP32[26326] | 0) + (HEAP32[26320] | 0);
 if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) if ((HEAP32[i6 >> 2] | 0) <= (HEAP32[i5 >> 2] | 0)) {
  do if ((HEAP32[i9 >> 2] | 0) == 118) {
   HEAP32[i7 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0);
   if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) {
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i4 + 4 >> 2] | 0)) i1 = 22;
   } else i1 = 22;
   if ((i1 | 0) == 22) {
    if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) break;
    if ((HEAP32[i7 >> 2] | 0) < ((HEAP32[i5 + 4 >> 2] | 0) + ((HEAPU8[HEAP32[26975] >> 0] | 0) != 101 & 1) | 0)) break;
   }
   HEAP32[i3 >> 2] = 0;
   i16 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i16 | 0;
  } else if ((HEAP32[i9 >> 2] | 0) == 22) {
   _getvcol(HEAP32[i8 >> 2] | 0, i4, i10, 0, i11);
   _getvcol(HEAP32[i8 >> 2] | 0, i5, i12, 0, i13);
   if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i10 >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
   if ((HEAP32[i13 >> 2] | 0) > (HEAP32[i11 >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
   if ((HEAP32[i4 + 4 >> 2] | 0) == 2147483647) i1 = 32; else if ((HEAP32[i5 + 4 >> 2] | 0) == 2147483647) i1 = 32;
   if ((i1 | 0) == 32) HEAP32[i11 >> 2] = 2147483647;
   i15 = HEAP32[26325] | 0;
   HEAP32[i14 >> 2] = _win_linetabsize(HEAP32[i8 >> 2] | 0, i15 | 0, (HEAP32[26334] | 0) - i15 | 0) | 0;
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) if ((HEAP32[i14 >> 2] | 0) <= ((HEAP32[i11 >> 2] | 0) - ((HEAPU8[HEAP32[26975] >> 0] | 0) == 101 & 1) | 0)) break;
   HEAP32[i3 >> 2] = 0;
   i16 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i16 | 0;
  } while (0);
  HEAP32[i3 >> 2] = 1;
  i16 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i16 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i16 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i16 | 0;
}

function _nextwild(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 44 | 0;
 i7 = i5 + 40 | 0;
 i8 = i5 + 36 | 0;
 i9 = i5 + 32 | 0;
 i10 = i5 + 28 | 0;
 i11 = i5 + 24 | 0;
 i12 = i5 + 20 | 0;
 i13 = i5 + 16 | 0;
 i14 = i5 + 12 | 0;
 i15 = i5 + 8 | 0;
 i16 = i5 + 4 | 0;
 i17 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) == -1) {
  _set_expand_context(HEAP32[i7 >> 2] | 0);
  HEAP32[25263] = _expand_showtail(HEAP32[i7 >> 2] | 0) | 0;
 }
 if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) == -2) {
  _beep_flush();
  HEAP32[i6 >> 2] = 1;
  i18 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i18 | 0;
 }
 if (!(HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i18 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i18 | 0;
 }
 _msg_puts(97674);
 _out_flush();
 HEAP32[i11 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[25236] | 0);
 HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = (HEAP32[25239] | 0) - (HEAP32[i11 >> 2] | 0);
 i4 = HEAP32[i7 >> 2] | 0;
 do if ((HEAP32[i8 >> 2] | 0) == 4 | (HEAP32[i8 >> 2] | 0) == 5) HEAP32[i14 >> 2] = _ExpandOne(i4, 0, 0, 0, HEAP32[i8 >> 2] | 0) | 0; else {
  i3 = _addstar(HEAP32[i4 + 4 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0, HEAP32[HEAP32[i7 >> 2] >> 2] | 0) | 0;
  HEAP32[i13 >> 2] = i3;
  if (!i3) {
   HEAP32[i14 >> 2] = 0;
   break;
  }
  HEAP32[i17 >> 2] = HEAP32[i9 >> 2] | 2 | 16 | 64;
  if (HEAP32[i10 >> 2] | 0) HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 128;
  if (HEAP32[27032] | 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 256;
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i13 >> 2] | 0;
  i1 = _vim_strnsave((HEAP32[25236] | 0) + (HEAP32[i11 >> 2] | 0) | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = _ExpandOne(i3, i2, i1, HEAP32[i17 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  _vim_free(HEAP32[i13 >> 2] | 0);
  if ((HEAP32[i14 >> 2] | 0) != 0 & (HEAP32[i8 >> 2] | 0) == 7) {
   HEAP32[i12 >> 2] = 0;
   while (1) {
    if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0)) break;
    if ((HEAPU8[(HEAP32[25236] | 0) + ((HEAP32[i11 >> 2] | 0) + (HEAP32[i12 >> 2] | 0)) >> 0] | 0) == 42) break;
    if ((HEAPU8[(HEAP32[25236] | 0) + ((HEAP32[i11 >> 2] | 0) + (HEAP32[i12 >> 2] | 0)) >> 0] | 0) == 63) break;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   }
   i1 = _strlen(HEAP32[i14 >> 2] | 0) | 0;
   if (HEAP32[i14 >> 2] | 0 ? (i1 | 0) < (HEAP32[i12 >> 2] | 0) : 0) {
    _vim_free(HEAP32[i14 >> 2] | 0);
    HEAP32[i14 >> 2] = 0;
   }
  }
 } while (0);
 if (HEAP32[i14 >> 2] | 0) if (!(HEAP32[26834] | 0)) {
  i12 = _strlen(HEAP32[i14 >> 2] | 0) | 0;
  HEAP32[i15 >> 2] = i12 - (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0);
  if (((HEAP32[25238] | 0) + (HEAP32[i15 >> 2] | 0) + 4 | 0) > (HEAP32[25237] | 0)) {
   HEAP32[i16 >> 2] = _realloc_cmdbuff((HEAP32[25238] | 0) + (HEAP32[i15 >> 2] | 0) + 4 | 0) | 0;
   HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = (HEAP32[25236] | 0) + (HEAP32[i11 >> 2] | 0);
  } else HEAP32[i16 >> 2] = 1;
  if ((HEAP32[i16 >> 2] | 0) == 1) {
   i16 = HEAP32[25236] | 0;
   i12 = HEAP32[25239] | 0;
   _memmove(i16 + (i12 + (HEAP32[i15 >> 2] | 0)) | 0, i16 + i12 | 0, (HEAP32[25238] | 0) - i12 + 1 | 0) | 0;
   i12 = (HEAP32[25236] | 0) + (HEAP32[i11 >> 2] | 0) | 0;
   i11 = HEAP32[i14 >> 2] | 0;
   _memmove(i12 | 0, i11 | 0, _strlen(HEAP32[i14 >> 2] | 0) | 0) | 0;
   HEAP32[25238] = (HEAP32[25238] | 0) + (HEAP32[i15 >> 2] | 0);
   HEAP32[25239] = (HEAP32[25239] | 0) + (HEAP32[i15 >> 2] | 0);
  }
 }
 _vim_free(HEAP32[i14 >> 2] | 0);
 _redrawcmd();
 _cursorcmd();
 if ((HEAP32[i14 >> 2] | 0) == 0 ? (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) == 16 : 0) {
  HEAP32[i6 >> 2] = 0;
  i18 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i18 | 0;
 }
 if ((HEAP32[i14 >> 2] | 0) == 0 ? (HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) <= 0 : 0) _beep_flush(); else if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) == 1) _ExpandOne(HEAP32[i7 >> 2] | 0, 0, 0, 0, 1) | 0;
 HEAP32[i6 >> 2] = 1;
 i18 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i18 | 0;
}

function _update_topline() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2 + 28 | 0;
 i5 = i2 + 24 | 0;
 i6 = i2 + 20 | 0;
 i7 = i2 + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2 + 8 | 0;
 i10 = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[26971];
 if (_screen_valid(1) | 0) if (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) {
  _check_cursor_moved(HEAP32[26881] | 0);
  if (HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 128 | 0) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[26756] | 0) > 0) HEAP32[26971] = (HEAP32[26756] | 0) - 1;
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
  if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) if (!(HEAPU8[(_ml_get(1) | 0) >> 0] | 0)) {
   if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) != 1) _redraw_later(40);
   HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = 1;
   HEAP32[(HEAP32[26881] | 0) + 144 >> 2] = 2;
   i11 = (HEAP32[26881] | 0) + 108 | 0;
   HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 96;
   HEAP32[(HEAP32[26881] | 0) + 296 >> 2] = 1;
  } else i1 = 12; else i1 = 12;
  do if ((i1 | 0) == 12) {
   do if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) > 1) {
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) {
     HEAP32[i7 >> 2] = 1;
     break;
    }
    if (_check_top_offset() | 0) HEAP32[i7 >> 2] = 1;
   } while (0);
   if (!(HEAP32[i7 >> 2] | 0)) {
    HEAP32[i8 >> 2] = 1;
    break;
   }
   i11 = ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) / 2 | 0) - 1 | 0;
   HEAP32[i4 >> 2] = i11;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) < 2 ? 2 : i11;
   i11 = HEAP32[26881] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i11 + 68 >> 2] | 0) + (HEAP32[26971] | 0) - (HEAP32[i11 + 24 >> 2] | 0);
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) {
    _scroll_cursor_halfway(0);
    break;
   } else {
    _scroll_cursor_top(_scrolljump_value() | 0, 0);
    HEAP32[i8 >> 2] = 1;
    break;
   }
  } while (0);
  do if (HEAP32[i8 >> 2] | 0) {
   if (!(HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 64)) _validate_botline();
   if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
    do if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) {
     if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) - (HEAP32[26971] | 0) | 0)) {
      HEAP32[i8 >> 2] = 0;
      break;
     }
     HEAP32[i5 >> 2] = HEAP32[(HEAP32[26881] | 0) + 148 >> 2];
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
     HEAP32[i10 + 4 >> 2] = 0;
     while (1) {
      if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) break;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 + 4 >> 2] | 0);
      if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[26971] | 0)) break;
      _botline_forw(i10);
     }
     if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[26971] | 0)) HEAP32[i8 >> 2] = 0;
    } while (0);
    if (HEAP32[i8 >> 2] | 0) {
     i4 = HEAP32[26881] | 0;
     HEAP32[i3 >> 2] = (HEAP32[i4 + 24 >> 2] | 0) - (HEAP32[i4 + 144 >> 2] | 0) + 1 + (HEAP32[26971] | 0);
     if ((HEAP32[i3 >> 2] | 0) <= ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) + 1 | 0)) {
      _scroll_cursor_bot(_scrolljump_value() | 0, 0);
      break;
     } else {
      _scroll_cursor_halfway(0);
      break;
     }
    }
   }
  } while (0);
  i3 = (HEAP32[26881] | 0) + 108 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 128;
  if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) {
   HEAP32[10175] = -1;
   if (HEAP32[(HEAP32[26881] | 0) + 80 >> 2] | 0) {
    HEAP32[(HEAP32[26881] | 0) + 80 >> 2] = 0;
    _redraw_later(40);
   } else _redraw_later(10);
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) _validate_cursor();
  }
  HEAP32[26971] = HEAP32[i9 >> 2];
  STACKTOP = i2;
  return;
 }
 i9 = HEAP32[26881] | 0;
 HEAP32[i9 + 68 >> 2] = HEAP32[i9 + 24 >> 2];
 i9 = HEAP32[26881] | 0;
 HEAP32[i9 + 144 >> 2] = HEAP32[i9 + 68 >> 2];
 i9 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 96;
 HEAP32[(HEAP32[26881] | 0) + 296 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _try_realloc_chunk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i3 = i1 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i4 & -8;
 i6 = i1 + i5 | 0;
 if (!(i4 & 3)) {
  if (i2 >>> 0 < 256) {
   i7 = 0;
   return i7 | 0;
  }
  if (i5 >>> 0 >= (i2 + 4 | 0) >>> 0) if ((i5 - i2 | 0) >>> 0 <= HEAP32[27358] << 1 >>> 0) {
   i7 = i1;
   return i7 | 0;
  }
  i7 = 0;
  return i7 | 0;
 }
 if (i5 >>> 0 >= i2 >>> 0) {
  i8 = i5 - i2 | 0;
  if (i8 >>> 0 <= 15) {
   i7 = i1;
   return i7 | 0;
  }
  i9 = i1 + i2 | 0;
  HEAP32[i3 >> 2] = i4 & 1 | i2 | 2;
  HEAP32[i9 + 4 >> 2] = i8 | 3;
  i10 = i6 + 4 | 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
  _dispose_chunk(i9, i8);
  i7 = i1;
  return i7 | 0;
 }
 if ((HEAP32[27244] | 0) == (i6 | 0)) {
  i8 = (HEAP32[27241] | 0) + i5 | 0;
  i9 = i8 - i2 | 0;
  i10 = i1 + i2 | 0;
  if (i8 >>> 0 <= i2 >>> 0) {
   i7 = 0;
   return i7 | 0;
  }
  HEAP32[i3 >> 2] = i4 & 1 | i2 | 2;
  HEAP32[i10 + 4 >> 2] = i9 | 1;
  HEAP32[27244] = i10;
  HEAP32[27241] = i9;
  i7 = i1;
  return i7 | 0;
 }
 if ((HEAP32[27243] | 0) == (i6 | 0)) {
  i9 = (HEAP32[27240] | 0) + i5 | 0;
  if (i9 >>> 0 < i2 >>> 0) {
   i7 = 0;
   return i7 | 0;
  }
  i10 = i9 - i2 | 0;
  if (i10 >>> 0 > 15) {
   i8 = i1 + i2 | 0;
   i11 = i1 + i9 | 0;
   HEAP32[i3 >> 2] = i4 & 1 | i2 | 2;
   HEAP32[i8 + 4 >> 2] = i10 | 1;
   HEAP32[i11 >> 2] = i10;
   i12 = i11 + 4 | 0;
   HEAP32[i12 >> 2] = HEAP32[i12 >> 2] & -2;
   i13 = i8;
   i14 = i10;
  } else {
   HEAP32[i3 >> 2] = i4 & 1 | i9 | 2;
   i10 = i1 + i9 + 4 | 0;
   HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
   i13 = 0;
   i14 = 0;
  }
  HEAP32[27240] = i14;
  HEAP32[27243] = i13;
  i7 = i1;
  return i7 | 0;
 }
 i13 = HEAP32[i6 + 4 >> 2] | 0;
 if (i13 & 2 | 0) {
  i7 = 0;
  return i7 | 0;
 }
 i14 = (i13 & -8) + i5 | 0;
 if (i14 >>> 0 < i2 >>> 0) {
  i7 = 0;
  return i7 | 0;
 }
 i5 = i14 - i2 | 0;
 i10 = i13 >>> 3;
 do if (i13 >>> 0 < 256) {
  i9 = HEAP32[i6 + 8 >> 2] | 0;
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i8 | 0) == (i9 | 0)) {
   HEAP32[27238] = HEAP32[27238] & ~(1 << i10);
   break;
  } else {
   HEAP32[i9 + 12 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i9;
   break;
  }
 } else {
  i9 = HEAP32[i6 + 24 >> 2] | 0;
  i8 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i8 | 0) == (i6 | 0)) {
   i12 = i6 + 16 | 0;
   i11 = i12 + 4 | 0;
   i15 = HEAP32[i11 >> 2] | 0;
   if (!i15) {
    i16 = HEAP32[i12 >> 2] | 0;
    if (!i16) {
     i17 = 0;
     break;
    } else {
     i18 = i16;
     i19 = i12;
    }
   } else {
    i18 = i15;
    i19 = i11;
   }
   i11 = i18;
   i15 = i19;
   while (1) {
    i12 = i11 + 20 | 0;
    i16 = HEAP32[i12 >> 2] | 0;
    if (!i16) {
     i20 = i11 + 16 | 0;
     i21 = HEAP32[i20 >> 2] | 0;
     if (!i21) break; else {
      i22 = i21;
      i23 = i20;
     }
    } else {
     i22 = i16;
     i23 = i12;
    }
    i11 = i22;
    i15 = i23;
   }
   HEAP32[i15 >> 2] = 0;
   i17 = i11;
  } else {
   i12 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i12 + 12 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i12;
   i17 = i8;
  } while (0);
  if (i9 | 0) {
   i8 = HEAP32[i6 + 28 >> 2] | 0;
   i12 = 109256 + (i8 << 2) | 0;
   if ((HEAP32[i12 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i12 >> 2] = i17;
    if (!i17) {
     HEAP32[27239] = HEAP32[27239] & ~(1 << i8);
     break;
    }
   } else {
    i8 = i9 + 16 | 0;
    HEAP32[((HEAP32[i8 >> 2] | 0) == (i6 | 0) ? i8 : i9 + 20 | 0) >> 2] = i17;
    if (!i17) break;
   }
   HEAP32[i17 + 24 >> 2] = i9;
   i8 = i6 + 16 | 0;
   i12 = HEAP32[i8 >> 2] | 0;
   if (i12 | 0) {
    HEAP32[i17 + 16 >> 2] = i12;
    HEAP32[i12 + 24 >> 2] = i17;
   }
   i12 = HEAP32[i8 + 4 >> 2] | 0;
   if (i12 | 0) {
    HEAP32[i17 + 20 >> 2] = i12;
    HEAP32[i12 + 24 >> 2] = i17;
   }
  }
 } while (0);
 if (i5 >>> 0 < 16) {
  HEAP32[i3 >> 2] = i4 & 1 | i14 | 2;
  i17 = i1 + i14 + 4 | 0;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
  i7 = i1;
  return i7 | 0;
 } else {
  i17 = i1 + i2 | 0;
  HEAP32[i3 >> 2] = i4 & 1 | i2 | 2;
  HEAP32[i17 + 4 >> 2] = i5 | 3;
  i2 = i1 + i14 + 4 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
  _dispose_chunk(i17, i5);
  i7 = i1;
  return i7 | 0;
 }
 return 0;
}

function _win_redr_status(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 + 24 >> 2] = i2;
 if (HEAP32[26461] | 0) {
  STACKTOP = i4;
  return;
 }
 HEAP32[26461] = 1;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 176 >> 2] = 0;
 do if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2] | 0)) HEAP32[26699] = 1; else {
  i2 = (_redrawing() | 0) != 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if (!i2) {
   HEAP32[i1 + 176 >> 2] = 1;
   break;
  }
  HEAP32[i9 >> 2] = _fillchar_status(i10, i1) | 0;
  _get_trans_bufname(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0);
  HEAP32[i7 >> 2] = HEAP32[26885];
  HEAP32[i8 >> 2] = _strlen(HEAP32[i7 >> 2] | 0) | 0;
  if (_bt_help(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0) i3 = 9; else if (_bufIsChanged(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0) i3 = 9; else if (HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) + 676 >> 2] | 0) i3 = 9;
  if ((i3 | 0) == 9) {
   i1 = HEAP32[i7 >> 2] | 0;
   i2 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i2 + 1;
   HEAP8[i1 + i2 >> 0] = 32;
  }
  if (_bt_help(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0) {
   _strcpy((HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0, 74534) | 0;
   i2 = _strlen((HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i2;
  }
  if (_bufIsChanged(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0) {
   _strcpy((HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0, 74541) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 3;
  }
  if (HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) + 676 >> 2] | 0) {
   _strcpy((HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0, 74545) | 0;
   i2 = _strlen((HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i2;
  }
  HEAP32[i11 >> 2] = (HEAP32[27115] | 0) - ((HEAP32[10174] | 0) - (HEAP32[(HEAP32[i5 >> 2] | 0) + 100 >> 2] | 0));
  if ((HEAP32[i11 >> 2] | 0) < (((HEAP32[(HEAP32[i5 >> 2] | 0) + 100 >> 2] | 0) + 1 | 0) / 2 | 0 | 0)) HEAP32[i11 >> 2] = ((HEAP32[(HEAP32[i5 >> 2] | 0) + 100 >> 2] | 0) + 1 | 0) / 2 | 0;
  if ((HEAP32[i11 >> 2] | 0) <= 1) {
   HEAP32[i7 >> 2] = 74550;
   HEAP32[i8 >> 2] = 1;
  } else if ((HEAP32[i8 >> 2] | 0) > ((HEAP32[i11 >> 2] | 0) - 1 | 0)) {
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) - ((HEAP32[i11 >> 2] | 0) - 1));
   HEAP8[HEAP32[i7 >> 2] >> 0] = 60;
   HEAP32[i8 >> 2] = (HEAP32[i11 >> 2] | 0) - 1;
  }
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i6 >> 2] = (HEAP32[i2 + 84 >> 2] | 0) + (HEAP32[i2 + 88 >> 2] | 0);
  _screen_puts(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 96 >> 2] | 0, HEAP32[i10 >> 2] | 0);
  i2 = HEAP32[i6 >> 2] | 0;
  i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 96 >> 2] | 0;
  i12 = HEAP32[i9 >> 2] | 0;
  _screen_fill(i2 | 0, i2 + 1 | 0, (HEAP32[i8 >> 2] | 0) + i1 | 0, (HEAP32[i11 >> 2] | 0) + i1 | 0, i12 | 0, i12 | 0, HEAP32[i10 >> 2] | 0);
  if (_get_keymap_str(HEAP32[i5 >> 2] | 0, 74552, HEAP32[26885] | 0, 4096) | 0) {
   i12 = (HEAP32[i11 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0;
   if ((i12 | 0) > ((_strlen(HEAP32[26885] | 0) | 0) + 1 | 0)) {
    i12 = HEAP32[26885] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
    i2 = HEAP32[i11 >> 2] | 0;
    i13 = i2 - (_strlen(HEAP32[26885] | 0) | 0) - 1 | 0;
    _screen_puts(i12, i1, i13 + (HEAP32[(HEAP32[i5 >> 2] | 0) + 96 >> 2] | 0) | 0, HEAP32[i10 >> 2] | 0);
   }
  }
 } while (0);
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 104 >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2] | 0) if (_redrawing() | 0) {
  if (_stl_connected(HEAP32[i5 >> 2] | 0) | 0) HEAP32[i9 >> 2] = _fillchar_status(i10, HEAP32[i5 >> 2] | 0) | 0; else HEAP32[i9 >> 2] = _fillchar_vsep(i10) | 0;
  i11 = HEAP32[i5 >> 2] | 0;
  _screen_putchar(HEAP32[i9 >> 2] | 0, (HEAP32[i11 + 84 >> 2] | 0) + (HEAP32[i11 + 88 >> 2] | 0) | 0, (HEAP32[i11 + 96 >> 2] | 0) + (HEAP32[i11 + 100 >> 2] | 0) | 0, HEAP32[i10 >> 2] | 0);
 }
 HEAP32[26461] = 0;
 STACKTOP = i4;
 return;
}

function _get_tagfname(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 if (HEAP32[i8 >> 2] | 0) {
  i3 = HEAP32[i7 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP32[i3 + 16 >> 2] = 0;
 }
 i3 = (HEAP32[i8 >> 2] | 0) != 0;
 if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) {
  if (i3) {
   _ga_clear_strings(106056);
   _ga_init2(106056, 4, 10);
   _do_in_runtimepath(78734, 1, 3, 0) | 0;
  }
  L9 : do if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) >= (HEAP32[26514] | 0)) {
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) <= (HEAP32[26514] | 0)) if (HEAPU8[HEAP32[26927] >> 0] | 0) {
    i8 = (HEAP32[i7 >> 2] | 0) + 12 | 0;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
    _strcpy(HEAP32[i9 >> 2] | 0, HEAP32[26927] | 0) | 0;
    _strcpy(_gettail(HEAP32[i9 >> 2] | 0) | 0, 78743) | 0;
    _simplify_filename(HEAP32[i9 >> 2] | 0);
    HEAP32[i12 >> 2] = 0;
    while (1) {
     if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[26514] | 0)) break L9;
     if (!(_strcmp(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[26518] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0) | 0)) break;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    }
    HEAP32[i6 >> 2] = 0;
    i14 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i14 | 0;
   }
   HEAP32[i6 >> 2] = 0;
   i14 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i14 | 0;
  } else {
   i8 = HEAP32[i9 >> 2] | 0;
   i2 = HEAP32[26518] | 0;
   i1 = (HEAP32[i7 >> 2] | 0) + 12 | 0;
   i15 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = i15 + 1;
   _vim_strncpy(i8, HEAP32[i2 + (i15 << 2) >> 2] | 0, 4095);
  } while (0);
  HEAP32[i6 >> 2] = 1;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 do if (i3) {
  if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 744 >> 2] >> 0] | 0) i16 = HEAP32[(HEAP32[26773] | 0) + 744 >> 2] | 0; else i16 = HEAP32[27006] | 0;
  i12 = _vim_strsave(i16) | 0;
  HEAP32[HEAP32[i7 >> 2] >> 2] = i12;
  if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) {
   HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
   break;
  }
  HEAP32[i6 >> 2] = 0;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 } while (0);
 while (1) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) {
  HEAP32[i10 >> 2] = _vim_findfile(HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) | 0;
  if (HEAP32[i10 >> 2] | 0) {
   i4 = 33;
   break;
  }
  HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = 0;
 } else {
  HEAP32[i13 >> 2] = 0;
  if (!(HEAPU8[HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] >> 0] | 0)) {
   i4 = 29;
   break;
  }
  HEAP8[HEAP32[i9 >> 2] >> 0] = 0;
  _copy_option_part((HEAP32[i7 >> 2] | 0) + 4 | 0, HEAP32[i9 >> 2] | 0, 4095, 78748) | 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i13 >> 2] = _gettail(HEAP32[i9 >> 2] | 0) | 0;
  i16 = HEAP32[i13 >> 2] | 0;
  i3 = i16 + 1 | 0;
  i12 = i16 | 0;
  _memmove(i3 | 0, i12 | 0, (_strlen(HEAP32[i13 >> 2] | 0) | 0) + 1 | 0) | 0;
  i12 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = 0;
  i12 = _vim_findfile_init(HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0, 100, 0, 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0, 1, HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] = i12;
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = 1;
 }
 if ((i4 | 0) == 29) {
  _vim_findfile_cleanup(HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0);
  HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 } else if ((i4 | 0) == 33) {
  _strcpy(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
  _vim_free(HEAP32[i10 >> 2] | 0);
  HEAP32[i6 >> 2] = 1;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 return 0;
}

function _ml_open(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = 0;
 if (HEAP32[27135] | 0) HEAP32[(HEAP32[i5 >> 2] | 0) + 696 >> 2] = 0;
 if (HEAP32[26879] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 696 >> 2] | 0) HEAP32[(HEAP32[i5 >> 2] | 0) + 772 >> 2] = 1; else i2 = 6; else i2 = 6;
 if ((i2 | 0) == 6) HEAP32[(HEAP32[i5 >> 2] | 0) + 772 >> 2] = 0;
 HEAP32[i6 >> 2] = _mf_open(0, 0) | 0;
 do if (HEAP32[i6 >> 2] | 0) {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i6 >> 2];
  HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = 1;
  HEAP32[HEAP32[i5 >> 2] >> 2] = 1;
  i2 = _mf_new(HEAP32[i6 >> 2] | 0, 0, 1) | 0;
  HEAP32[i7 >> 2] = i2;
  if (i2 | 0) {
   if (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) {
    _iemsg(56627);
    break;
   }
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
   HEAP8[HEAP32[i8 >> 2] >> 0] = 98;
   HEAP8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] = 48;
   HEAP32[(HEAP32[i8 >> 2] | 0) + 1008 >> 2] = 808530483;
   HEAP32[(HEAP32[i8 >> 2] | 0) + 1012 >> 2] = 539042339;
   HEAP16[(HEAP32[i8 >> 2] | 0) + 1016 >> 1] = 4627;
   HEAP8[(HEAP32[i8 >> 2] | 0) + 1018 >> 0] = 85;
   _memmove((HEAP32[i8 >> 2] | 0) + 2 | 0, 56656, 4) | 0;
   _strncpy((HEAP32[i8 >> 2] | 0) + 2 + 4 | 0, 81103, 6) | 0;
   _long_to_char(HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2] | 0, (HEAP32[i8 >> 2] | 0) + 12 | 0);
   HEAP8[(HEAP32[i8 >> 2] | 0) + 108 + 899 >> 0] = HEAP32[(HEAP32[i5 >> 2] | 0) + 108 >> 2] | 0 ? 85 : 0;
   i2 = (_get_fileformat(HEAP32[i5 >> 2] | 0) | 0) + 1 & 255;
   HEAP8[(HEAP32[i8 >> 2] | 0) + 108 + 898 >> 0] = i2;
   _set_b0_fname(HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0);
   _get_user_name((HEAP32[i8 >> 2] | 0) + 28 | 0, 40) | 0;
   HEAP8[(HEAP32[i8 >> 2] | 0) + 28 + 39 >> 0] = 0;
   _mch_get_host_name((HEAP32[i8 >> 2] | 0) + 68 | 0, 40);
   HEAP8[(HEAP32[i8 >> 2] | 0) + 68 + 39 >> 0] = 0;
   i2 = _mch_get_pid() | 0;
   _long_to_char(i2, (HEAP32[i8 >> 2] | 0) + 24 | 0);
   _mf_put(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1, 0);
   if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 780 >> 2] | 0)) _mf_sync(HEAP32[i6 >> 2] | 0, 0) | 0;
   i2 = _ml_new_ptr(HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i2;
   if (i2 | 0) {
    if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) != 1) {
     _iemsg(56661);
     break;
    }
    HEAP32[i9 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
    HEAP16[(HEAP32[i9 >> 2] | 0) + 2 >> 1] = 1;
    HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = 2;
    HEAP32[(HEAP32[i9 >> 2] | 0) + 8 + 12 >> 2] = 1;
    HEAP32[(HEAP32[i9 >> 2] | 0) + 8 + 8 >> 2] = 1;
    HEAP32[(HEAP32[i9 >> 2] | 0) + 8 + 4 >> 2] = 1;
    _mf_put(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1, 0);
    i2 = _ml_new_data(HEAP32[i6 >> 2] | 0, 0, 1) | 0;
    HEAP32[i7 >> 2] = i2;
    if (i2 | 0) {
     if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) != 2) {
      _iemsg(56690);
      break;
     }
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
     i2 = (HEAP32[i10 >> 2] | 0) + 8 | 0;
     i1 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
     HEAP32[i2 >> 2] = i1;
     HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = i1;
     i1 = (HEAP32[i10 >> 2] | 0) + 4 | 0;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - 5;
     HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] = 1;
     i1 = HEAP32[i10 >> 2] | 0;
     HEAP8[i1 + (HEAP32[i1 + 8 >> 2] | 0) >> 0] = 0;
     HEAP32[i4 >> 2] = 1;
     i11 = HEAP32[i4 >> 2] | 0;
     STACKTOP = i3;
     return i11 | 0;
    }
   }
  }
 } while (0);
 if (HEAP32[i6 >> 2] | 0) {
  if (HEAP32[i7 >> 2] | 0) _mf_put(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0, 0);
  _mf_close(HEAP32[i6 >> 2] | 0, 1);
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 i11 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i11 | 0;
}

function _put_escstr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 44 | 0;
 i9 = i5 + 40 | 0;
 i10 = i5 + 36 | 0;
 i11 = i5 + 32 | 0;
 i12 = i5 + 28 | 0;
 i13 = i5 + 24 | 0;
 i14 = i5 + 20 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 if ((HEAP32[i11 >> 2] | 0) == 1 ? (HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) == 0 : 0) if ((_fprintf(HEAP32[i9 >> 2] | 0, 56351, i5) | 0) < 0) {
  HEAP32[i8 >> 2] = 0;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } else {
  HEAP32[i8 >> 2] = 1;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 L9 : while (1) {
  if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) {
   i4 = 38;
   break;
  }
  HEAP32[i13 >> 2] = HEAPU8[HEAP32[i12 >> 2] >> 0];
  if ((HEAP32[i13 >> 2] | 0) == 128 & (HEAP32[i11 >> 2] | 0) != 2) {
   HEAP32[i14 >> 2] = 0;
   if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) == 252) {
    HEAP32[i14 >> 2] = HEAPU8[(HEAP32[i12 >> 2] | 0) + 2 >> 0];
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 3;
    HEAP32[i13 >> 2] = HEAPU8[HEAP32[i12 >> 2] >> 0];
   }
   if ((HEAP32[i13 >> 2] | 0) == 128) {
    if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) == 254) i16 = 128; else if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) == 255) i16 = -22783; else {
     i3 = HEAP32[i12 >> 2] | 0;
     i16 = 0 - ((HEAPU8[i3 + 1 >> 0] | 0) + (HEAPU8[i3 + 2 >> 0] << 8)) | 0;
    }
    HEAP32[i13 >> 2] = i16;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 2;
   }
   if ((HEAP32[i13 >> 2] | 0) < 0 | (HEAP32[i14 >> 2] | 0) != 0) {
    i3 = _get_special_key_name(HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
    if ((_fputs(i3, HEAP32[i9 >> 2] | 0) | 0) < 0) {
     i4 = 17;
     break;
    }
   } else i4 = 18;
  } else i4 = 18;
  do if ((i4 | 0) == 18) {
   i4 = 0;
   i3 = (HEAP32[i11 >> 2] | 0) == 2;
   if ((HEAP32[i13 >> 2] | 0) == 10) {
    i2 = HEAP32[i9 >> 2] | 0;
    if (i3) if ((_fprintf(i2, 56503, i7) | 0) < 0) {
     i4 = 21;
     break L9;
    } else break; else if ((_fprintf(i2, 56507, i6) | 0) < 0) {
     i4 = 23;
     break L9;
    } else break;
   }
   if (i3) if ((HEAP32[i13 >> 2] | 0) == 32 | (HEAP32[i13 >> 2] | 0) == 9 | (HEAP32[i13 >> 2] | 0) == 34 | (HEAP32[i13 >> 2] | 0) == 92) {
    if ((_putc(92, HEAP32[i9 >> 2] | 0) | 0) < 0) {
     i4 = 27;
     break L9;
    }
   } else i4 = 28; else i4 = 28;
   L36 : do if ((i4 | 0) == 28) {
    i4 = 0;
    do if (!((HEAP32[i13 >> 2] | 0) < 32 | (HEAP32[i13 >> 2] | 0) > 126 | (HEAP32[i13 >> 2] | 0) == 124)) if (!((HEAP32[i11 >> 2] | 0) == 0 & (HEAP32[i13 >> 2] | 0) == 32)) {
     if ((HEAP32[i11 >> 2] | 0) == 1) if ((HEAP32[i13 >> 2] | 0) == 32 ? (HEAP32[i12 >> 2] | 0) == (HEAP32[i10 >> 2] | 0) : 0) break;
     if (!((HEAP32[i11 >> 2] | 0) != 2 & (HEAP32[i13 >> 2] | 0) == 60)) break L36;
    } while (0);
    if ((_putc(22, HEAP32[i9 >> 2] | 0) | 0) < 0) {
     i4 = 34;
     break L9;
    }
   } while (0);
   if ((_putc(HEAP32[i13 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) < 0) {
    i4 = 36;
    break L9;
   }
  } while (0);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 17) {
  HEAP32[i8 >> 2] = 0;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } else if ((i4 | 0) == 21) {
  HEAP32[i8 >> 2] = 0;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } else if ((i4 | 0) == 23) {
  HEAP32[i8 >> 2] = 0;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } else if ((i4 | 0) == 27) {
  HEAP32[i8 >> 2] = 0;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } else if ((i4 | 0) == 34) {
  HEAP32[i8 >> 2] = 0;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } else if ((i4 | 0) == 36) {
  HEAP32[i8 >> 2] = 0;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } else if ((i4 | 0) == 38) {
  HEAP32[i8 >> 2] = 1;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 return 0;
}

function _open_buffer(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i5 + 80 | 0;
 i7 = i5 + 76 | 0;
 i8 = i5 + 72 | 0;
 i9 = i5 + 68 | 0;
 i10 = i5 + 64 | 0;
 i11 = i5 + 52 | 0;
 i12 = i5 + 48 | 0;
 i13 = i5 + 44 | 0;
 i14 = i5 + 40 | 0;
 i15 = i5 + 36 | 0;
 i16 = i5 + 32 | 0;
 i17 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = 1;
 HEAP32[i12 >> 2] = 0;
 if (HEAP32[26815] | 0) if (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) if (HEAP32[(HEAP32[26773] | 0) + 60 >> 2] & 4 | 0) HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1;
 i3 = (_ml_open(HEAP32[26773] | 0) | 0) == 0;
 i2 = HEAP32[26773] | 0;
 if (i3) {
  _close_buffer(0, i2, 0, 0);
  HEAP32[26773] = HEAP32[26771];
  while (1) {
   if (!(HEAP32[26773] | 0)) break;
   if (HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0) break;
   HEAP32[26773] = HEAP32[(HEAP32[26773] | 0) + 48 >> 2];
  }
  if (!(HEAP32[26773] | 0)) {
   _emsg(41582) | 0;
   _getout(2);
  }
  _emsg(41626) | 0;
  _enter_buffer(HEAP32[26773] | 0);
  HEAP32[i6 >> 2] = 0;
  i18 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i18 | 0;
 }
 _set_bufref(i11, i2);
 HEAP32[27094] = 0;
 HEAP32[(HEAP32[26881] | 0) + 108 >> 2] = 0;
 if (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) {
  HEAP32[i13 >> 2] = HEAP32[26809];
  HEAP32[i14 >> 2] = HEAP32[(HEAP32[26773] | 0) + 584 >> 2];
  HEAP32[i15 >> 2] = _mch_getperm(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) | 0;
  do if ((HEAP32[i15 >> 2] | 0) >= 0) {
   if ((HEAP32[i15 >> 2] & 61440 | 0) != 4096) if ((HEAP32[i15 >> 2] & 61440 | 0) != 49152) break;
   HEAP32[i12 >> 2] = 1;
  } while (0);
  if (HEAP32[i12 >> 2] | 0) HEAP32[(HEAP32[26773] | 0) + 584 >> 2] = 1;
  if (_shortmess(70) | 0) HEAP32[26809] = 1;
  i15 = HEAP32[26773] | 0;
  HEAP32[i10 >> 2] = _readfile(HEAP32[i15 + 68 >> 2] | 0, HEAP32[i15 + 76 >> 2] | 0, 0, 0, 2147483647, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 1 | (HEAP32[i12 >> 2] | 0 ? 64 : 0)) | 0;
  if (HEAP32[i12 >> 2] | 0) {
   HEAP32[(HEAP32[26773] | 0) + 584 >> 2] = HEAP32[i14 >> 2];
   if ((HEAP32[i10 >> 2] | 0) == 1) HEAP32[i10 >> 2] = _read_buffer(0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  }
  HEAP32[26809] = HEAP32[i13 >> 2];
  if (_bt_help(HEAP32[26773] | 0) | 0) _fix_help_buffer();
 } else if (HEAP32[i7 >> 2] | 0) {
  HEAP32[i16 >> 2] = HEAP32[(HEAP32[26773] | 0) + 584 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 584 >> 2] = 1;
  HEAP32[i10 >> 2] = _readfile(0, 0, 0, 0, 2147483647, 0, HEAP32[i9 >> 2] | 5) | 0;
  HEAP32[(HEAP32[26773] | 0) + 584 >> 2] = HEAP32[i16 >> 2];
  if ((HEAP32[i10 >> 2] | 0) == 1) HEAP32[i10 >> 2] = _read_buffer(1, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 }
 if (HEAP32[(HEAP32[26773] | 0) + 60 >> 2] & 4 | 0) _buf_init_chartab(HEAP32[26773] | 0, 0) | 0;
 if (HEAP32[26834] | 0) {
  i9 = (_vim_strchr(HEAP32[26904] | 0, 105) | 0) != 0;
  if (i9 | (HEAP32[27094] | 0) != 0) i4 = 35; else i4 = 36;
 } else if (HEAP32[27094] | 0) i4 = 35; else i4 = 36;
 if ((i4 | 0) == 35) _changed(); else if ((i4 | 0) == 36) if (!((HEAP32[i10 >> 2] | 0) != 1 | (HEAP32[i7 >> 2] | 0) != 0 | (HEAP32[i12 >> 2] | 0) != 0)) _unchanged(HEAP32[26773] | 0, 0);
 _save_file_ff(HEAP32[26773] | 0);
 i12 = HEAP32[26773] | 0;
 HEAP32[i12 + 144 >> 2] = HEAP32[i12 + 112 + 8 >> 2];
 if (HEAP32[26834] | 0) {
  i12 = (HEAP32[26773] | 0) + 60 | 0;
  HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 64;
 }
 if (!(HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 128)) HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = 1;
 _apply_autocmds(2, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if ((HEAP32[i10 >> 2] | 0) == 1) if (_bufref_valid(i11) | 0) if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) {
  _aucmd_prepbuf(i17, HEAP32[i11 >> 2] | 0);
  _do_modelines(0);
  i11 = (HEAP32[26773] | 0) + 60 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] & -7;
  _apply_autocmds(13, 0, 0, 0, HEAP32[26773] | 0) | 0;
  _aucmd_restbuf(i17);
 }
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 i18 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i18 | 0;
}

function _op_addsub(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i4;
 i6 = i4 + 80 | 0;
 i7 = i4 + 76 | 0;
 i8 = i4 + 72 | 0;
 i9 = i4 + 64 | 0;
 i10 = i4 + 32 | 0;
 i11 = i4 + 28 | 0;
 i12 = i4 + 24 | 0;
 i13 = i4 + 20 | 0;
 i14 = i4 + 16 | 0;
 i15 = i4 + 8 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 if (!(HEAP32[26788] | 0)) {
  i3 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  if (!(_u_save_cursor() | 0)) {
   STACKTOP = i4;
   return;
  }
  HEAP32[i11 >> 2] = _do_addsub(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, i9, 0, HEAP32[i12 >> 2] | 0) | 0;
  if (!(HEAP32[i11 >> 2] | 0)) {
   STACKTOP = i4;
   return;
  }
  i3 = HEAP32[i9 >> 2] | 0;
  _changed_lines(i3 | 0, 0, i3 + 1 | 0, 0);
  STACKTOP = i4;
  return;
 }
 if (!(_u_save((HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i4;
  return;
 }
 i3 = (HEAP32[i6 >> 2] | 0) + 28 | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] | 0)) break;
  i3 = HEAP32[i6 >> 2] | 0;
  do if (HEAP32[(HEAP32[i6 >> 2] | 0) + 64 >> 2] | 0) {
   _block_prep(i3, i10, HEAP32[i9 >> 2] | 0, 0);
   HEAP32[i9 + 4 >> 2] = HEAP32[i10 + 16 >> 2];
   HEAP32[i14 >> 2] = HEAP32[i10 + 8 >> 2];
  } else {
   if ((HEAP32[i3 + 8 >> 2] | 0) == 1) {
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
    HEAP32[i9 + 4 >> 2] = 0;
    HEAP32[i14 >> 2] = _strlen(_ml_get(HEAP32[i9 >> 2] | 0) | 0) | 0;
    break;
   }
   if ((HEAP32[i9 >> 2] | 0) == (HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0)) if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0)) _dec((HEAP32[i6 >> 2] | 0) + 36 | 0) | 0;
   HEAP32[i14 >> 2] = _strlen(_ml_get(HEAP32[i9 >> 2] | 0) | 0) | 0;
   HEAP32[i9 + 4 >> 2] = 0;
   if ((HEAP32[i9 >> 2] | 0) == (HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0)) {
    i2 = i9 + 4 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[(HEAP32[i6 >> 2] | 0) + 28 + 4 >> 2] | 0);
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[(HEAP32[i6 >> 2] | 0) + 28 + 4 >> 2] | 0);
   }
   if ((HEAP32[i9 >> 2] | 0) == (HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] | 0)) {
    HEAP32[i14 >> 2] = _strlen(_ml_get(HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] | 0) | 0) | 0;
    if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 36 + 4 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) HEAP32[(HEAP32[i6 >> 2] | 0) + 36 + 4 >> 2] = (HEAP32[i14 >> 2] | 0) - 1;
    HEAP32[i14 >> 2] = (HEAP32[(HEAP32[i6 >> 2] | 0) + 36 + 4 >> 2] | 0) - (HEAP32[i9 + 4 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i13 >> 2] = _do_addsub(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, i9, HEAP32[i14 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
  if (HEAP32[i13 >> 2] | 0) {
   if (!(HEAP32[i11 >> 2] | 0)) {
    i3 = (HEAP32[26773] | 0) + 476 | 0;
    HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i15 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   }
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
  if ((HEAP32[i8 >> 2] | 0) != 0 & (HEAP32[i13 >> 2] | 0) != 0) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if (HEAP32[i11 >> 2] | 0) {
  i9 = HEAP32[i6 >> 2] | 0;
  _changed_lines(HEAP32[i9 + 28 >> 2] | 0, 0, (HEAP32[i9 + 36 >> 2] | 0) + 1 | 0, 0);
 }
 if (!(HEAP32[i11 >> 2] | 0)) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 60 >> 2] | 0) _redraw_curbuf_later(20);
 if ((HEAP32[i11 >> 2] | 0) > 0) {
  i6 = (HEAP32[26773] | 0) + 476 | 0;
  HEAP32[i6 >> 2] = HEAP32[i15 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 }
 if ((HEAP32[i11 >> 2] | 0) <= (HEAP32[26967] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i11 >> 2] | 0) == 1) {
  _msg(62462) | 0;
  STACKTOP = i4;
  return;
 } else {
  HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
  _smsg(62477, i5) | 0;
  STACKTOP = i4;
  return;
 }
}

function _frame_new_width(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 28 | 0;
 i8 = i6 + 24 | 0;
 i9 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i11 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 i4 = HEAP32[i7 >> 2] | 0;
 L1 : do if (!(HEAP8[HEAP32[i7 >> 2] >> 0] | 0)) {
  HEAP32[i14 >> 2] = HEAP32[i4 + 36 >> 2];
  HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
  while (1) {
   if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] | 0)) break;
   if ((HEAP8[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 1) if (HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0) break;
   HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2];
  }
  if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] | 0)) HEAP32[(HEAP32[i14 >> 2] | 0) + 104 >> 2] = 0;
  i3 = HEAP32[i14 >> 2] | 0;
  _win_new_width(i3 | 0, (HEAP32[i8 >> 2] | 0) - (HEAP32[i3 + 104 >> 2] | 0) | 0);
 } else {
  if ((HEAP8[i4 >> 0] | 0) == 2) while (1) {
   HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2];
   while (1) {
    if (!(HEAP32[i11 >> 2] | 0)) break;
    _frame_new_width(HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
    i15 = HEAP32[i11 >> 2] | 0;
    if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) > (HEAP32[i8 >> 2] | 0)) {
     i5 = 15;
     break;
    }
    HEAP32[i11 >> 2] = HEAP32[i15 + 24 >> 2];
   }
   if ((i5 | 0) == 15) {
    i5 = 0;
    HEAP32[i8 >> 2] = HEAP32[i15 + 4 >> 2];
   }
   if (!(HEAP32[i11 >> 2] | 0)) break L1;
  }
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2];
  L26 : do if (HEAP32[i10 >> 2] | 0) {
   do {
    if (!(_frame_fixed_width(HEAP32[i11 >> 2] | 0) | 0)) break L26;
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2];
   } while ((HEAP32[i11 >> 2] | 0) != 0);
   STACKTOP = i6;
   return;
  } while (0);
  L34 : do if (!(HEAP32[i9 >> 2] | 0)) {
   while (1) {
    if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0)) break;
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2];
   }
   if (HEAP32[i10 >> 2] | 0) while (1) {
    if (!(_frame_fixed_width(HEAP32[i11 >> 2] | 0) | 0)) break L34;
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2];
   }
  } while (0);
  HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0);
  if ((HEAP32[i12 >> 2] | 0) >= 0) {
   if ((HEAP32[i12 >> 2] | 0) <= 0) break;
   i3 = HEAP32[i11 >> 2] | 0;
   _frame_new_width(i3 | 0, (HEAP32[i3 + 4 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
   break;
  }
  while (1) {
   if (!(HEAP32[i11 >> 2] | 0)) break L1;
   HEAP32[i13 >> 2] = _frame_minwidth(HEAP32[i11 >> 2] | 0, 0) | 0;
   i16 = HEAP32[i11 >> 2] | 0;
   if (((HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0) >= (HEAP32[i13 >> 2] | 0)) break;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i16 + 4 >> 2] | 0) - (HEAP32[i13 >> 2] | 0));
   _frame_new_width(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
   L53 : do if (HEAP32[i9 >> 2] | 0) do {
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2];
    if (!((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) != 0)) break L53;
   } while ((_frame_fixed_width(HEAP32[i11 >> 2] | 0) | 0) != 0); else do {
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2];
    if (!((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) != 0)) break L53;
   } while ((_frame_fixed_width(HEAP32[i11 >> 2] | 0) | 0) != 0); while (0);
   if (!(HEAP32[i11 >> 2] | 0)) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
  }
  _frame_new_width(i16, (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 } while (0);
 HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i6;
 return;
}

function _sub_equal(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4 + 4 | 0;
 i13 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) > (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) i14 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0; else i14 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
 HEAP32[i9 >> 2] = i14;
 i14 = (HEAP32[26312] | 0) == 0;
 HEAP32[i8 >> 2] = 0;
 L5 : do if (i14) {
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break L5;
   if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 4) >> 2]; else HEAP32[i10 >> 2] = -1;
   if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 4) >> 2]; else HEAP32[i11 >> 2] = -1;
   if ((HEAP32[i10 >> 2] | 0) != (HEAP32[i11 >> 2] | 0)) {
    i3 = 14;
    break;
   }
   if ((HEAP32[i10 >> 2] | 0) != -1) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 4) + 8 >> 2] | 0) != (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 4) + 8 >> 2] | 0)) {
    i3 = 17;
    break;
   }
   if (HEAP32[26328] | 0) {
    if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 4) + 4 >> 2]; else HEAP32[i10 >> 2] = -1;
    if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 4) + 4 >> 2]; else HEAP32[i11 >> 2] = -1;
    if ((HEAP32[i10 >> 2] | 0) != (HEAP32[i11 >> 2] | 0)) {
     i3 = 26;
     break;
    }
    if ((HEAP32[i10 >> 2] | 0) != -1) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 4) + 12 >> 2] | 0) != (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 4) + 12 >> 2] | 0)) {
     i3 = 29;
     break;
    }
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  if ((i3 | 0) == 14) {
   HEAP32[i5 >> 2] = 0;
   i15 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i15 | 0;
  } else if ((i3 | 0) == 17) {
   HEAP32[i5 >> 2] = 0;
   i15 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i15 | 0;
  } else if ((i3 | 0) == 26) {
   HEAP32[i5 >> 2] = 0;
   i15 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i15 | 0;
  } else if ((i3 | 0) == 29) {
   HEAP32[i5 >> 2] = 0;
   i15 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i15 | 0;
  }
 } else {
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break L5;
   if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) HEAP32[i12 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 3) >> 2]; else HEAP32[i12 >> 2] = 0;
   if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) HEAP32[i13 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 3) >> 2]; else HEAP32[i13 >> 2] = 0;
   if ((HEAP32[i12 >> 2] | 0) != (HEAP32[i13 >> 2] | 0)) {
    i3 = 40;
    break;
   }
   if (HEAP32[26328] | 0) {
    if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) HEAP32[i12 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 3) + 4 >> 2]; else HEAP32[i12 >> 2] = 0;
    if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) HEAP32[i13 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 + (HEAP32[i8 >> 2] << 3) + 4 >> 2]; else HEAP32[i13 >> 2] = 0;
    if ((HEAP32[i12 >> 2] | 0) != (HEAP32[i13 >> 2] | 0)) {
     i3 = 49;
     break;
    }
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  if ((i3 | 0) == 40) {
   HEAP32[i5 >> 2] = 0;
   i15 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i15 | 0;
  } else if ((i3 | 0) == 49) {
   HEAP32[i5 >> 2] = 0;
   i15 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i15 | 0;
  }
 } while (0);
 HEAP32[i5 >> 2] = 1;
 i15 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i15 | 0;
}

function _nv_replace(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 if (_checkclearop(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 22) {
  HEAP32[i6 >> 2] = 22;
  i1 = _get_literal() | 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = i1;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) > 127) HEAP32[i6 >> 2] = 0;
 } else HEAP32[i6 >> 2] = 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) < 0) {
  _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 if (HEAP32[26788] | 0) {
  if (HEAP32[26834] | 0) _reset_VIsual();
  do if (HEAP32[i6 >> 2] | 0) {
   i1 = (HEAP32[i4 >> 2] | 0) + 12 | 0;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 13) {
    HEAP32[i1 >> 2] = -1;
    break;
   }
   if ((HEAP32[i1 >> 2] | 0) == 10) HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = -2;
  } while (0);
  _nv_operator(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 HEAP32[i5 >> 2] = _ml_get_cursor() | 0;
 i1 = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 if (i1 >>> 0 < (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) >>> 0) {
  _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i6 >> 2] | 0) != 22) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 9) if (HEAP32[26992] | 0 ? 1 : (HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0) != 0) {
  _stuffnumReadbuff(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0);
  _stuffcharReadbuff(82);
  _stuffcharReadbuff(9);
  _stuffcharReadbuff(27);
  STACKTOP = i3;
  return;
 }
 if (!(_u_save_cursor() | 0)) {
  STACKTOP = i3;
  return;
 }
 do if ((HEAP32[i6 >> 2] | 0) != 22) {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 13) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) != 10) break;
  _del_bytes(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, 0, 0) | 0;
  _stuffcharReadbuff(13);
  _stuffcharReadbuff(27);
  _invoke_edit(HEAP32[i4 >> 2] | 0, 1, 114, 0);
  STACKTOP = i3;
  return;
 } while (0);
 i1 = HEAP32[i4 >> 2] | 0;
 _prep_redo(HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0, 0, 114, 0, HEAP32[i6 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0);
 i1 = (HEAP32[26773] | 0) + 476 | 0;
 i6 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) <= 0) break;
  HEAP32[i5 >> 2] = _ml_get_buf(HEAP32[26773] | 0, HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 1) | 0;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 5) i2 = 32; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 25) i2 = 32; else HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) >> 0] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
  if ((i2 | 0) == 32) {
   i2 = 0;
   HEAP32[i8 >> 2] = _ins_copychar((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 25 ? -1 : 1) | 0) | 0;
   if (HEAP32[i8 >> 2] | 0) HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) >> 0] = HEAP32[i8 >> 2];
  }
  if ((HEAP32[26987] | 0) != 0 & (HEAP32[26809] | 0) == 0) _showmatch(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0);
  i6 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 }
 i7 = (HEAP32[26881] | 0) + 24 | 0;
 _changed_bytes(HEAP32[i7 >> 2] | 0, (HEAP32[i7 + 4 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0);
 i7 = (HEAP32[26881] | 0) + 24 + 4 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 i7 = (HEAP32[26773] | 0) + 492 | 0;
 i8 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 _set_last_insert(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _home_replace(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i7;
 i9 = i7 + 44 | 0;
 i10 = i7 + 40 | 0;
 i11 = i7 + 36 | 0;
 i12 = i7 + 32 | 0;
 i13 = i7 + 28 | 0;
 i14 = i7 + 24 | 0;
 i15 = i7 + 20 | 0;
 i16 = i7 + 16 | 0;
 i17 = i7 + 12 | 0;
 i18 = i7 + 8 | 0;
 i19 = i7 + 4 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP8[HEAP32[i11 >> 2] >> 0] = 0;
  STACKTOP = i7;
  return;
 }
 if (HEAP32[i9 >> 2] | 0) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 780 >> 2] | 0) {
  i9 = HEAP32[i11 >> 2] | 0;
  i5 = HEAP32[i12 >> 2] | 0;
  HEAP32[i8 >> 2] = _gettail(HEAP32[i10 >> 2] | 0) | 0;
  _vim_snprintf(i9, i5, 97576, i8) | 0;
  STACKTOP = i7;
  return;
 }
 if (HEAP32[26053] | 0) HEAP32[i14 >> 2] = _strlen(HEAP32[26053] | 0) | 0;
 i8 = _getenv(60092) | 0;
 HEAP32[i17 >> 2] = i8;
 HEAP32[i18 >> 2] = i8;
 if (HEAP32[i17 >> 2] | 0) if (!(HEAPU8[HEAP32[i17 >> 2] >> 0] | 0)) HEAP32[i17 >> 2] = 0;
 if (HEAP32[i17 >> 2] | 0) HEAP32[i15 >> 2] = _strlen(HEAP32[i17 >> 2] | 0) | 0;
 if (!(HEAP32[i13 >> 2] | 0)) HEAP32[i10 >> 2] = _skipwhite(HEAP32[i10 >> 2] | 0) | 0;
 while (1) {
  if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0 ? (HEAP32[i12 >> 2] | 0) > 0 : 0)) break;
  HEAP32[i19 >> 2] = HEAP32[26053];
  HEAP32[i16 >> 2] = HEAP32[i14 >> 2];
  while (1) {
   if (HEAP32[i16 >> 2] | 0) if (!(_vim_fnamencmp(HEAP32[i10 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0)) {
    if (_vim_ispathsep(HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0) | 0) {
     i6 = 25;
     break;
    }
    if (!(HEAP32[i13 >> 2] | 0)) {
     if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0 | 0) == 44) {
      i6 = 25;
      break;
     }
     if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0 | 0) == 32) {
      i6 = 25;
      break;
     }
    }
    if (!(HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0)) {
     i6 = 25;
     break;
    }
   }
   if ((HEAP32[i19 >> 2] | 0) == (HEAP32[i17 >> 2] | 0)) break;
   HEAP32[i19 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i16 >> 2] = HEAP32[i15 >> 2];
  }
  if ((i6 | 0) == 25) {
   i6 = 0;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
   i8 = (HEAP32[i12 >> 2] | 0) + -1 | 0;
   HEAP32[i12 >> 2] = i8;
   if ((i8 | 0) > 0) {
    i8 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i8 + 1;
    HEAP8[i8 >> 0] = 126;
   }
   if (!(_vim_ispathsep(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) | 0)) {
    i8 = (HEAP32[i12 >> 2] | 0) + -1 | 0;
    HEAP32[i12 >> 2] = i8;
    if ((i8 | 0) > 0) {
     i8 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i8 + 1;
     HEAP8[i8 >> 0] = 47;
    }
   }
  }
  while (1) {
   if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
   if (!(HEAP32[i13 >> 2] | 0)) {
    if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 44) break;
    if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 32) break;
   }
   i8 = (HEAP32[i12 >> 2] | 0) + -1 | 0;
   HEAP32[i12 >> 2] = i8;
   if ((i8 | 0) <= 0) break;
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i8 + 1;
   i5 = HEAP8[i8 >> 0] | 0;
   i8 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i8 + 1;
   HEAP8[i8 >> 0] = i5;
  }
  while (1) {
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) != 32) if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) != 44) break;
   i5 = (HEAP32[i12 >> 2] | 0) + -1 | 0;
   HEAP32[i12 >> 2] = i5;
   if ((i5 | 0) <= 0) break;
   i5 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i5 + 1;
   i8 = HEAP8[i5 >> 0] | 0;
   i5 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i5 + 1;
   HEAP8[i5 >> 0] = i8;
  }
 }
 HEAP8[HEAP32[i11 >> 2] >> 0] = 0;
 if ((HEAP32[i17 >> 2] | 0) == (HEAP32[i18 >> 2] | 0)) {
  STACKTOP = i7;
  return;
 }
 _vim_free(HEAP32[i17 >> 2] | 0);
 STACKTOP = i7;
 return;
}

function _fileinfo(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i5 + 40 | 0;
 i7 = i5 + 32 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5;
 i10 = i5 + 80 | 0;
 i11 = i5 + 76 | 0;
 i12 = i5 + 72 | 0;
 i13 = i5 + 68 | 0;
 i14 = i5 + 64 | 0;
 i15 = i5 + 60 | 0;
 i16 = i5 + 56 | 0;
 i17 = i5 + 52 | 0;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i16 >> 2] = _alloc(1025) | 0;
 if (!(HEAP32[i16 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 i3 = HEAP32[i16 >> 2] | 0;
 if ((HEAP32[i10 >> 2] | 0) > 1) {
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
  _vim_snprintf(i3, 1025, 42549, i9) | 0;
  i9 = HEAP32[i16 >> 2] | 0;
  HEAP32[i15 >> 2] = i9 + (_strlen(HEAP32[i16 >> 2] | 0) | 0);
 } else HEAP32[i15 >> 2] = i3;
 i3 = HEAP32[i15 >> 2] | 0;
 HEAP32[i15 >> 2] = i3 + 1;
 HEAP8[i3 >> 0] = 34;
 if (_buf_spname(HEAP32[26773] | 0) | 0) {
  i3 = HEAP32[i15 >> 2] | 0;
  i9 = _buf_spname(HEAP32[26773] | 0) | 0;
  _vim_strncpy(i3, i9, 1025 - ((HEAP32[i15 >> 2] | 0) - (HEAP32[i16 >> 2] | 0)) - 1 | 0);
 } else {
  if (HEAP32[i10 >> 2] | 0) i4 = 10; else if (HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0) HEAP32[i13 >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2]; else i4 = 10;
  if ((i4 | 0) == 10) HEAP32[i13 >> 2] = HEAP32[(HEAP32[26773] | 0) + 68 >> 2];
  i4 = HEAP32[i15 >> 2] | 0;
  _home_replace(HEAP32[i11 >> 2] | 0 ? HEAP32[26773] | 0 : 0, HEAP32[i13 >> 2] | 0, i4 | 0, 1025 - (i4 - (HEAP32[i16 >> 2] | 0)) | 0, 1);
 }
 i4 = HEAP32[i16 >> 2] | 0;
 if (_curbufIsChanged() | 0) {
  i13 = (_shortmess(109) | 0) != 0;
  i18 = i13 ? 42558 : 42563;
 } else i18 = 97452;
 i13 = (HEAP32[26773] | 0) + 60 | 0;
 i11 = HEAP32[i13 >> 2] & 8 | 0 ? 42575 : 114072;
 i10 = HEAP32[i13 >> 2] & 16 | 0 ? 42588 : 114072;
 i9 = HEAP32[i13 >> 2] & 64 | 0 ? 42599 : 114072;
 if (HEAP32[(HEAP32[26773] | 0) + 676 >> 2] | 0) {
  i13 = (_shortmess(114) | 0) != 0;
  i19 = i13 ? 74545 : 52296;
 } else i19 = 114072;
 if (_curbufIsChanged() | 0) i20 = 1; else if (HEAP32[(HEAP32[26773] | 0) + 60 >> 2] & 88 | 0) i20 = 1; else i20 = (HEAP32[(HEAP32[26773] | 0) + 676 >> 2] | 0) != 0;
 HEAP32[i8 >> 2] = i18;
 HEAP32[i8 + 4 >> 2] = i11;
 HEAP32[i8 + 8 >> 2] = i10;
 HEAP32[i8 + 12 >> 2] = i9;
 HEAP32[i8 + 16 >> 2] = i19;
 HEAP32[i8 + 20 >> 2] = i20 ? 97452 : 114072;
 _vim_snprintf_add(i4, 1025, 42613, i8) | 0;
 i8 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > 1e6) HEAP32[i14 >> 2] = (i8 | 0) / ((HEAP32[HEAP32[26773] >> 2] | 0) / 100 | 0 | 0) | 0; else HEAP32[i14 >> 2] = (i8 * 100 | 0) / (HEAP32[HEAP32[26773] >> 2] | 0) | 0;
 i8 = HEAP32[i16 >> 2] | 0;
 if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) {
  HEAP32[i7 >> 2] = 92115;
  _vim_snprintf_add(i8, 1025, 97576, i7) | 0;
 } else {
  i7 = HEAP32[HEAP32[26773] >> 2] | 0;
  i4 = HEAP32[i14 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  HEAP32[i6 + 4 >> 2] = i7;
  HEAP32[i6 + 8 >> 2] = i4;
  _vim_snprintf_add(i8, 1025, 42627, i6) | 0;
  _validate_virtcol();
  HEAP32[i17 >> 2] = _strlen(HEAP32[i16 >> 2] | 0) | 0;
  i6 = HEAP32[i17 >> 2] | 0;
  i17 = HEAP32[26881] | 0;
  _col_print((HEAP32[i16 >> 2] | 0) + i6 | 0, 1025 - i6 | 0, (HEAP32[i17 + 24 + 4 >> 2] | 0) + 1 | 0, (HEAP32[i17 + 132 >> 2] | 0) + 1 | 0);
 }
 i17 = HEAP32[26881] | 0;
 i6 = HEAP32[i16 >> 2] | 0;
 _append_arg_number(i17, i6, 1025, ((_shortmess(102) | 0) != 0 ^ 1) & 1) | 0;
 do if (HEAP32[i12 >> 2] | 0) {
  _msg_start();
  HEAP32[i14 >> 2] = HEAP32[26710];
  HEAP32[26710] = 1;
  _msg(HEAP32[i16 >> 2] | 0) | 0;
  HEAP32[26710] = HEAP32[i14 >> 2];
 } else {
  HEAP32[i15 >> 2] = _msg_trunc_attr(HEAP32[i16 >> 2] | 0, 0, 0) | 0;
  if (!(HEAP32[26806] | 0)) if ((HEAP32[27044] | 0) == 0 | (HEAP32[26721] | 0) != 0) break;
  _set_keep_msg(HEAP32[i15 >> 2] | 0, 0);
 } while (0);
 _vim_free(HEAP32[i16 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _curs_rows(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 if (_redrawing() | 0) if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) i9 = 1; else {
  i1 = HEAP32[i4 >> 2] | 0;
  i9 = (HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0) > (HEAP32[i1 + 68 >> 2] | 0);
 } else i9 = 1;
 HEAP32[i7 >> 2] = i9 & 1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 128 >> 2] = 0;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2];
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = 0;
  do if (HEAP32[i7 >> 2] | 0) i2 = 14; else if ((HEAP32[i6 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) {
   if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i6 >> 2] << 3) >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) if (HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i6 >> 2] << 3) + 6 >> 0] | 0) {
    if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i6 >> 2] << 3) >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
     HEAP32[i8 >> 2] = 1;
     i2 = 14;
     break;
    }
    if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i6 >> 2] << 3) >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) {
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
     i2 = 14;
    } else i2 = 14;
   }
  } else i2 = 14; while (0);
  do if ((i2 | 0) == 14) {
   i2 = 0;
   if (HEAP32[i8 >> 2] | 0) {
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    i9 = (HEAP32[i4 >> 2] | 0) + 128 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAPU16[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i6 >> 2] << 3) + 4 >> 1] | 0);
    break;
   } else {
    i9 = HEAP32[i4 >> 2] | 0;
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP32[i5 >> 2] = i1 + 1;
    i10 = _plines_win(i9, i1, 1) | 0;
    i1 = (HEAP32[i4 >> 2] | 0) + 128 | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i10;
    break;
   }
  } while (0);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 _check_cursor_moved(HEAP32[i4 >> 2] | 0);
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 108 >> 2] & 8 | 0) {
  i11 = HEAP32[26881] | 0;
  _redraw_for_cursorline(i11);
  i12 = HEAP32[i4 >> 2] | 0;
  i13 = i12 + 108 | 0;
  i14 = HEAP32[i13 >> 2] | 0;
  i15 = i14 | 24;
  HEAP32[i13 >> 2] = i15;
  STACKTOP = i3;
  return;
 }
 do if (!(HEAP32[i7 >> 2] | 0)) if ((HEAP32[i6 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) {
  if ((HEAP32[i6 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) {
   if (!(HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i6 >> 2] << 3) + 6 >> 0] | 0)) break;
   if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i6 >> 2] << 3) >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0)) break;
  }
  i5 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[i6 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) {
   HEAP32[i5 + 124 >> 2] = 0;
   i11 = HEAP32[26881] | 0;
   _redraw_for_cursorline(i11);
   i12 = HEAP32[i4 >> 2] | 0;
   i13 = i12 + 108 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   i15 = i14 | 24;
   HEAP32[i13 >> 2] = i15;
   STACKTOP = i3;
   return;
  } else {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 124 >> 2] = HEAPU16[(HEAP32[i5 + 156 >> 2] | 0) + (HEAP32[i6 >> 2] << 3) + 4 >> 1];
   i11 = HEAP32[26881] | 0;
   _redraw_for_cursorline(i11);
   i12 = HEAP32[i4 >> 2] | 0;
   i13 = i12 + 108 | 0;
   i14 = HEAP32[i13 >> 2] | 0;
   i15 = i14 | 24;
   HEAP32[i13 >> 2] = i15;
   STACKTOP = i3;
   return;
  }
 } while (0);
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = _plines_win(i6 | 0, HEAP32[i6 + 24 >> 2] | 0, 1) | 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 124 >> 2] = i7;
 i11 = HEAP32[26881] | 0;
 _redraw_for_cursorline(i11);
 i12 = HEAP32[i4 >> 2] | 0;
 i13 = i12 + 108 | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 i15 = i14 | 24;
 HEAP32[i13 >> 2] = i15;
 STACKTOP = i3;
 return;
}

function _vgetc() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 L1 : do if ((HEAP32[2733] | 0) != -1) {
  HEAP32[i3 >> 2] = HEAP32[2733];
  HEAP32[2733] = -1;
  HEAP32[26698] = HEAP32[25637];
  HEAP32[27095] = HEAP32[25897];
  HEAP32[27096] = HEAP32[25898];
 } else {
  HEAP32[26698] = 0;
  HEAP32[25476] = 0;
  while (1) {
   HEAP32[i5 >> 2] = 0;
   if (HEAP32[26698] | 0) {
    HEAP32[26802] = (HEAP32[26802] | 0) + 1;
    HEAP32[26804] = (HEAP32[26804] | 0) + 1;
    HEAP32[i5 >> 2] = 1;
   }
   HEAP32[i3 >> 2] = _vgetorpeek(1) | 0;
   if (HEAP32[i5 >> 2] | 0) {
    HEAP32[26802] = (HEAP32[26802] | 0) + -1;
    HEAP32[26804] = (HEAP32[26804] | 0) + -1;
   }
   if (!((HEAP32[i3 >> 2] | 0) == 128 | (HEAP32[i3 >> 2] | 0) == 155)) break;
   HEAP32[i6 >> 2] = HEAP32[26804];
   HEAP32[26802] = (HEAP32[26802] | 0) + 1;
   HEAP32[26804] = 0;
   HEAP32[i4 >> 2] = _vgetorpeek(1) | 0;
   HEAP32[i3 >> 2] = _vgetorpeek(1) | 0;
   HEAP32[26802] = (HEAP32[26802] | 0) + -1;
   HEAP32[26804] = HEAP32[i6 >> 2];
   if ((HEAP32[i4 >> 2] | 0) != 252) {
    i1 = 11;
    break;
   }
   HEAP32[26698] = HEAP32[i3 >> 2];
  }
  if ((i1 | 0) == 11) {
   if ((HEAP32[i4 >> 2] | 0) == 254) i7 = 128; else if ((HEAP32[i4 >> 2] | 0) == 255) i7 = -22783; else i7 = 0 - ((HEAP32[i4 >> 2] | 0) + (HEAP32[i3 >> 2] << 8)) | 0;
   HEAP32[i3 >> 2] = i7;
   if ((HEAP32[i3 >> 2] | 0) == -25341 | (HEAP32[i3 >> 2] | 0) == -25597) {
    _ui_focus_change((HEAP32[i3 >> 2] | 0) == -25341 & 1);
    HEAP32[i3 >> 2] = -13821;
   }
   if ((HEAP32[i3 >> 2] | 0) == -20989) HEAP32[i3 >> 2] = 155;
  }
  do switch (HEAP32[i3 >> 2] | 0) {
  case -13899:
   {
    HEAP32[i3 >> 2] = 43;
    break L1;
    break;
   }
  case -14155:
   {
    HEAP32[i3 >> 2] = 45;
    break L1;
    break;
   }
  case -14411:
   {
    HEAP32[i3 >> 2] = 47;
    break L1;
    break;
   }
  case -14667:
   {
    HEAP32[i3 >> 2] = 42;
    break L1;
    break;
   }
  case -16715:
   {
    HEAP32[i3 >> 2] = 13;
    break L1;
    break;
   }
  case -16971:
   {
    HEAP32[i3 >> 2] = 46;
    break L1;
    break;
   }
  case -17227:
   {
    HEAP32[i3 >> 2] = 48;
    break L1;
    break;
   }
  case -17483:
   {
    HEAP32[i3 >> 2] = 49;
    break L1;
    break;
   }
  case -17739:
   {
    HEAP32[i3 >> 2] = 50;
    break L1;
    break;
   }
  case -17995:
   {
    HEAP32[i3 >> 2] = 51;
    break L1;
    break;
   }
  case -18251:
   {
    HEAP32[i3 >> 2] = 52;
    break L1;
    break;
   }
  case -18507:
   {
    HEAP32[i3 >> 2] = 53;
    break L1;
    break;
   }
  case -18763:
   {
    HEAP32[i3 >> 2] = 54;
    break L1;
    break;
   }
  case -19019:
   {
    HEAP32[i3 >> 2] = 55;
    break L1;
    break;
   }
  case -19275:
   {
    HEAP32[i3 >> 2] = 56;
    break L1;
    break;
   }
  case -19531:
   {
    HEAP32[i3 >> 2] = 57;
    break L1;
    break;
   }
  case -16637:
  case -16381:
   {
    if ((HEAP32[26698] | 0) == 2) {
     HEAP32[i3 >> 2] = -12835;
     HEAP32[26698] = 0;
     break L1;
    }
    if ((HEAP32[26698] | 0) == 4) {
     HEAP32[i3 >> 2] = -22525;
     HEAP32[26698] = 0;
     break L1;
    } else {
     HEAP32[i3 >> 2] = -26731;
     break L1;
    }
    break;
   }
  case -16125:
  case -15869:
   {
    if ((HEAP32[26698] | 0) == 2) {
     HEAP32[i3 >> 2] = -14122;
     HEAP32[26698] = 0;
     break L1;
    }
    if ((HEAP32[26698] | 0) == 4) {
     HEAP32[i3 >> 2] = -22781;
     HEAP32[26698] = 0;
     break L1;
    } else {
     HEAP32[i3 >> 2] = -14144;
     break L1;
    }
    break;
   }
  case -16893:
   {
    HEAP32[i3 >> 2] = -30059;
    break L1;
    break;
   }
  case -17149:
   {
    HEAP32[i3 >> 2] = -25707;
    break L1;
    break;
   }
  case -17405:
   {
    HEAP32[i3 >> 2] = -27755;
    break L1;
    break;
   }
  case -17661:
   {
    HEAP32[i3 >> 2] = -29291;
    break L1;
    break;
   }
  default:
   break L1;
  } while (0);
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _nfa_max_width(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i11 >> 2] = 0;
 if ((HEAP32[i7 >> 2] | 0) > 4) {
  HEAP32[i5 >> 2] = -1;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 L5 : while (1) {
  if (!(HEAP32[i10 >> 2] | 0)) {
   i3 = 20;
   break;
  }
  switch (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) {
  case -987:
  case -988:
   {
    i3 = 6;
    break L5;
    break;
   }
  case -1024:
   {
    i3 = 7;
    break L5;
    break;
   }
  case -967:
  case -1002:
  case -968:
  case -969:
  case -970:
  case -971:
  case -972:
  case -973:
  case -974:
  case -975:
  case -976:
   {
    i3 = 15;
    break L5;
    break;
   }
  case -1019:
  case -1021:
  case -946:
   {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) != -946) {
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2];
     continue L5;
    }
    break;
   }
  case -931:
  case -933:
  case -937:
  case -935:
   {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    break;
   }
  case -983:
  case -916:
  case -917:
  case -918:
  case -919:
  case -920:
  case -921:
  case -922:
  case -923:
  case -924:
  case -925:
  case -926:
  case -927:
  case -928:
  case -929:
  case -930:
  case -932:
  case -934:
  case -936:
  case -938:
  case -939:
  case -940:
  case -941:
  case -942:
  case -943:
  case -944:
  case -945:
   {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    break;
   }
  case -991:
  case -993:
  case -995:
  case -997:
   {
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2];
    continue L5;
    break;
   }
  case -984:
  case -985:
  case -986:
  case -989:
  case -1022:
  case -982:
  case -1e3:
  case -1001:
  case -874:
  case -877:
  case -880:
  case -884:
  case -883:
  case -871:
  case -872:
  case -873:
  case -875:
  case -876:
  case -878:
  case -879:
  case -881:
  case -882:
  case -998:
  case -999:
  case -947:
  case -948:
  case -949:
  case -950:
  case -951:
  case -952:
  case -953:
  case -954:
  case -955:
  case -956:
  case -957:
  case -958:
  case -959:
  case -960:
  case -961:
  case -962:
  case -963:
  case -964:
  case -965:
  case -966:
  case -1005:
  case -1006:
  case -1003:
  case -1004:
  case -1007:
  case -1008:
   break;
  default:
   {
    if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) < 0) {
     i3 = 17;
     break L5;
    }
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
   }
  }
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2];
 }
 if ((i3 | 0) == 6) {
  HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 } else if ((i3 | 0) == 7) {
  HEAP32[i8 >> 2] = _nfa_max_width(HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[i9 >> 2] = _nfa_max_width(HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0;
  if ((HEAP32[i8 >> 2] | 0) < 0 | (HEAP32[i9 >> 2] | 0) < 0) {
   HEAP32[i5 >> 2] = -1;
   i12 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i12 | 0;
  } else {
   i7 = HEAP32[i8 >> 2] | 0;
   i8 = HEAP32[i9 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i11 >> 2] | 0) + ((i7 | 0) > (i8 | 0) ? i7 | 0 : i8 | 0);
   i12 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i12 | 0;
  }
 } else if ((i3 | 0) == 15) {
  HEAP32[i5 >> 2] = -1;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 } else if ((i3 | 0) == 17) {
  HEAP32[i5 >> 2] = -1;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 } else if ((i3 | 0) == 20) {
  HEAP32[i5 >> 2] = -1;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 return 0;
}

function _halfpage(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 if (HEAP32[i5 >> 2] | 0) {
  if ((HEAP32[i5 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) i10 = HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0; else i10 = HEAP32[i5 >> 2] | 0;
  HEAP32[(HEAP32[26881] | 0) + 200 + 20 >> 2] = i10;
 }
 i10 = HEAP32[26881] | 0;
 if ((HEAP32[(HEAP32[26881] | 0) + 200 + 20 >> 2] | 0) <= (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) i11 = HEAP32[i10 + 200 + 20 >> 2] | 0; else i11 = HEAP32[i10 + 88 >> 2] | 0;
 HEAP32[i8 >> 2] = i11;
 _update_topline();
 _validate_botline();
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[26881] | 0) + 148 >> 2];
 if (HEAP32[i4 >> 2] | 0) {
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) <= 0) break;
   if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) break;
   HEAP32[i7 >> 2] = _plines(HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
   if ((HEAP32[i8 >> 2] | 0) < 0 & (HEAP32[i6 >> 2] | 0) > 0) break;
   i4 = (HEAP32[26881] | 0) + 68 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
    i4 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
    i4 = (HEAP32[26881] | 0) + 108 | 0;
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -15;
   }
   i4 = (HEAP32[26881] | 0) + 108 | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -18;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
   do {
    HEAP32[i7 >> 2] = _plines(HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) | 0;
    if ((HEAP32[i7 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) break;
    i4 = (HEAP32[26881] | 0) + 144 | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
   } while ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0));
  }
  if ((HEAP32[i8 >> 2] | 0) <= 0) {
   _cursor_correct();
   _beginline(6);
   _redraw_later(10);
   STACKTOP = i3;
   return;
  }
  i9 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
  _check_cursor_lnum();
  _cursor_correct();
  _beginline(6);
  _redraw_later(10);
  STACKTOP = i3;
  return;
 } else {
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) <= 0) break;
   if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) <= 1) break;
   HEAP32[i7 >> 2] = _plines((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) - 1 | 0) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
   if ((HEAP32[i8 >> 2] | 0) < 0 & (HEAP32[i6 >> 2] | 0) > 0) break;
   i9 = (HEAP32[26881] | 0) + 68 | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
   i9 = (HEAP32[26881] | 0) + 108 | 0;
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & -114;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > 1) {
    i9 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
    i9 = (HEAP32[26881] | 0) + 108 | 0;
    HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & -15;
   }
  }
  if ((HEAP32[i8 >> 2] | 0) <= 0) {
   _cursor_correct();
   _beginline(6);
   _redraw_later(10);
   STACKTOP = i3;
   return;
  }
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= (HEAP32[i8 >> 2] | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
   _cursor_correct();
   _beginline(6);
   _redraw_later(10);
   STACKTOP = i3;
   return;
  } else {
   i7 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
   _cursor_correct();
   _beginline(6);
   _redraw_later(10);
   STACKTOP = i3;
   return;
  }
 }
}

function _do_source(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i4 + 48 | 0;
 i6 = i4 + 40 | 0;
 i7 = i4 + 32 | 0;
 i8 = i4 + 24 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4;
 i12 = i4 + 100 | 0;
 i13 = i4 + 96 | 0;
 i14 = i4 + 92 | 0;
 i15 = i4 + 88 | 0;
 i16 = i4 + 76 | 0;
 i17 = i4 + 72 | 0;
 i18 = i4 + 68 | 0;
 i19 = i4 + 64 | 0;
 i20 = i4 + 60 | 0;
 i21 = i4 + 56 | 0;
 i22 = i4 + 52 | 0;
 HEAP32[i13 >> 2] = i1;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i3;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i19 >> 2] = _expand_env_save(HEAP32[i13 >> 2] | 0) | 0;
 if (!(HEAP32[i19 >> 2] | 0)) {
  HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
  i23 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i4;
  return i23 | 0;
 }
 HEAP32[i20 >> 2] = _fix_fname(HEAP32[i19 >> 2] | 0) | 0;
 _vim_free(HEAP32[i19 >> 2] | 0);
 if (!(HEAP32[i20 >> 2] | 0)) {
  HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
  i23 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i4;
  return i23 | 0;
 }
 do if (_mch_isdir(HEAP32[i20 >> 2] | 0) | 0) {
  HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
  _smsg(45387, i11) | 0;
 } else {
  if (_has_autocmd(70, HEAP32[i20 >> 2] | 0, 0) | 0) if (_apply_autocmds(70, HEAP32[i20 >> 2] | 0, HEAP32[i20 >> 2] | 0, 0, HEAP32[26773] | 0) | 0) {
   HEAP32[i22 >> 2] = 1;
   break;
  }
  i3 = HEAP32[i20 >> 2] | 0;
  _apply_autocmds(71, i3 | 0, i3 | 0, 0, HEAP32[26773] | 0) | 0;
  HEAP32[i16 >> 2] = _fopen_noinh_readbin(HEAP32[i20 >> 2] | 0) | 0;
  do if ((HEAP32[i16 >> 2] | 0) == 0 & (HEAP32[i14 >> 2] | 0) != 0) {
   HEAP32[i19 >> 2] = _gettail(HEAP32[i20 >> 2] | 0) | 0;
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 46) if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) != 95) break;
   if (_strcasecmp((HEAP32[i19 >> 2] | 0) + 1 | 0, 45419) | 0) if (_strcasecmp((HEAP32[i19 >> 2] | 0) + 1 | 0, 45425) | 0) if (_strcasecmp((HEAP32[i19 >> 2] | 0) + 1 | 0, 65719) | 0) break;
   i3 = HEAP32[i19 >> 2] | 0;
   if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0) == 95) HEAP8[i3 >> 0] = 46; else HEAP8[i3 >> 0] = 95;
   HEAP32[i16 >> 2] = _fopen_noinh_readbin(HEAP32[i20 >> 2] | 0) | 0;
  } while (0);
  i3 = HEAP32[26888] | 0;
  if (!(HEAP32[i16 >> 2] | 0)) {
   if ((i3 | 0) <= 0) break;
   _verbose_enter();
   if (!(HEAP32[26731] | 0)) {
    HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
    _smsg(45432, i10) | 0;
   } else {
    i2 = HEAP32[i13 >> 2] | 0;
    HEAP32[i9 >> 2] = HEAP32[26732];
    HEAP32[i9 + 4 >> 2] = i2;
    _smsg(45454, i9) | 0;
   }
   _verbose_leave();
   break;
  }
  if ((i3 | 0) > 1) {
   _verbose_enter();
   if (!(HEAP32[26731] | 0)) {
    HEAP32[i8 >> 2] = HEAP32[i13 >> 2];
    _smsg(45486, i8) | 0;
   } else {
    i3 = HEAP32[i13 >> 2] | 0;
    HEAP32[i7 >> 2] = HEAP32[26732];
    HEAP32[i7 + 4 >> 2] = i3;
    _smsg(45500, i7) | 0;
   }
   _verbose_leave();
  }
  if ((HEAP32[i15 >> 2] | 0) == 1) _vimrc_found(HEAP32[i20 >> 2] | 0, 45524); else if ((HEAP32[i15 >> 2] | 0) == 2) _vimrc_found(HEAP32[i20 >> 2] | 0, 45532);
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 8 >> 2] = 0;
  HEAP32[i17 >> 2] = HEAP32[26731];
  HEAP32[26731] = HEAP32[i20 >> 2];
  HEAP32[i18 >> 2] = HEAP32[26732];
  HEAP32[26732] = 0;
  _do_cmdline(HEAP32[i21 >> 2] | 0, 5, i16, 7) | 0;
  HEAP32[i22 >> 2] = 1;
  if (HEAP32[26834] | 0) _emsg(92420) | 0;
  HEAP32[26731] = HEAP32[i17 >> 2];
  HEAP32[26732] = HEAP32[i18 >> 2];
  if ((HEAP32[26888] | 0) > 1) {
   _verbose_enter();
   HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
   _smsg(45541, i6) | 0;
   if (HEAP32[26731] | 0) {
    HEAP32[i5 >> 2] = HEAP32[26731];
    _smsg(45562, i5) | 0;
   }
   _verbose_leave();
  }
  _fclose(HEAP32[i16 >> 2] | 0) | 0;
  _vim_free(HEAP32[i16 + 4 >> 2] | 0);
  _vim_free(HEAP32[i21 >> 2] | 0);
 } while (0);
 _vim_free(HEAP32[i20 >> 2] | 0);
 HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
 i23 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i4;
 return i23 | 0;
}

function _bt_regcomp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i12 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (!(HEAP32[i6 >> 2] | 0)) {
  _emsg(93343) | 0;
  HEAP32[26719] = 1;
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 _init_class_tab();
 _regcomp_start(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 HEAP32[26453] = -1;
 _regc(156);
 if (!(_reg(0, i12) | 0)) {
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 HEAP32[i8 >> 2] = _lalloc(36 + (HEAP32[26404] | 0) | 0, 1) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 _regcomp_start(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 HEAP32[26453] = (HEAP32[i8 >> 2] | 0) + 32;
 _regc(156);
 i7 = (_reg(0, i12) | 0) == 0;
 i6 = HEAP32[i8 >> 2] | 0;
 if (i7 | (HEAP32[26405] | 0) != 0) {
  _vim_free(i6);
  if (HEAP32[26405] | 0) {
   _emsg(74092) | 0;
   HEAP32[26719] = 1;
   HEAP32[i5 >> 2] = 0;
   i13 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i13 | 0;
  } else {
   HEAP32[i5 >> 2] = 0;
   i13 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i13 | 0;
  }
 }
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP8[(HEAP32[i8 >> 2] | 0) + 20 >> 0] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = HEAP32[26386];
 if (HEAP32[i12 >> 2] & 8 | 0) {
  i6 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4;
 }
 if (HEAP32[i12 >> 2] & 16 | 0) {
  i6 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 16;
 }
 HEAP32[i9 >> 2] = (HEAP32[i8 >> 2] | 0) + 32 + 1;
 do if (!(HEAPU8[(_regnext(HEAP32[i9 >> 2] | 0) | 0) >> 0] | 0)) {
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 3;
  if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 1) i3 = 18; else if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 201) i3 = 18;
  if ((i3 | 0) == 18) {
   i6 = (HEAP32[i8 >> 2] | 0) + 20 | 0;
   HEAP8[i6 >> 0] = (HEAP8[i6 >> 0] | 0) + 1 << 24 >> 24;
   HEAP32[i9 >> 2] = _regnext(HEAP32[i9 >> 2] | 0) | 0;
  }
  i6 = HEAP32[i9 >> 2] | 0;
  do if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 5) HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = HEAPU8[i6 + 3 >> 0]; else {
   if ((HEAPU8[i6 >> 0] | 0 | 0) != 15) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 16) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 6) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 80) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 150) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 90) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 151) break;
   if ((HEAPU8[(_regnext(HEAP32[i9 >> 2] | 0) | 0) >> 0] | 0 | 0) == 5) {
    i7 = HEAPU8[(_regnext(HEAP32[i9 >> 2] | 0) | 0) + 3 >> 0] | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = i7;
   }
  } while (0);
  if (!(HEAP32[i12 >> 2] & 4)) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 15) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 16) break;
  if (!(HEAP32[i12 >> 2] & 8)) {
   HEAP32[i10 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   while (1) {
    if (!(HEAP32[i9 >> 2] | 0)) break;
    if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 5) {
     i6 = _strlen((HEAP32[i9 >> 2] | 0) + 3 | 0) | 0;
     if (i6 >>> 0 >= (HEAP32[i11 >> 2] | 0) >>> 0) {
      HEAP32[i10 >> 2] = (HEAP32[i9 >> 2] | 0) + 3;
      HEAP32[i11 >> 2] = _strlen((HEAP32[i9 >> 2] | 0) + 3 | 0) | 0;
     }
    }
    HEAP32[i9 >> 2] = _regnext(HEAP32[i9 >> 2] | 0) | 0;
   }
   HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = HEAP32[i10 >> 2];
   HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = HEAP32[i11 >> 2];
  }
 } while (0);
 HEAP32[HEAP32[i8 >> 2] >> 2] = 29936;
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 i13 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i13 | 0;
}

function _do_move(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4;
 i6 = i4 + 36 | 0;
 i7 = i4 + 32 | 0;
 i8 = i4 + 28 | 0;
 i9 = i4 + 24 | 0;
 i10 = i4 + 20 | 0;
 i11 = i4 + 16 | 0;
 i12 = i4 + 12 | 0;
 i13 = i4 + 8 | 0;
 i14 = i4 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) if ((HEAP32[i9 >> 2] | 0) < (HEAP32[i8 >> 2] | 0)) {
  _emsg(42773) | 0;
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 HEAP32[i13 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) + 1;
 if (!(_u_save(HEAP32[i9 >> 2] | 0, (HEAP32[i9 >> 2] | 0) + 1 | 0) | 0)) {
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 HEAP32[i12 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) > (HEAP32[i8 >> 2] | 0)) break;
  HEAP32[i10 >> 2] = _vim_strsave(_ml_get((HEAP32[i11 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0) | 0) | 0;
  if (HEAP32[i10 >> 2] | 0) {
   _ml_append((HEAP32[i9 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i10 >> 2] | 0, 0, 0) | 0;
   _vim_free(HEAP32[i10 >> 2] | 0);
   if ((HEAP32[i9 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 HEAP32[i14 >> 2] = HEAP32[HEAP32[26773] >> 2];
 i10 = HEAP32[i8 >> 2] | 0;
 _mark_adjust_nofold(HEAP32[i7 >> 2] | 0, i10 | 0, (HEAP32[i14 >> 2] | 0) - i10 | 0, 0);
 if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
  _mark_adjust_nofold((HEAP32[i8 >> 2] | 0) + 1 | 0, HEAP32[i9 >> 2] | 0, 0 - (HEAP32[i13 >> 2] | 0) | 0, 0);
  HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i13 >> 2] | 0) + 1;
  HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = HEAP32[i9 >> 2];
 } else {
  _mark_adjust_nofold((HEAP32[i9 >> 2] | 0) + 1 | 0, (HEAP32[i7 >> 2] | 0) - 1 | 0, HEAP32[i13 >> 2] | 0, 0);
  HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
 }
 HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = 0;
 HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
 i10 = HEAP32[i14 >> 2] | 0;
 _mark_adjust_nofold(i10 - (HEAP32[i13 >> 2] | 0) + 1 | 0, i10 | 0, 0 - (i10 - (HEAP32[i9 >> 2] | 0) - (HEAP32[i12 >> 2] | 0)) | 0, 0);
 if (!(_u_save((HEAP32[i7 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) - 1 | 0, (HEAP32[i8 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) + 1 | 0) | 0)) {
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) > (HEAP32[i8 >> 2] | 0)) break;
  _ml_delete((HEAP32[i7 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0, 1) | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 do if (!(HEAP32[26841] | 0)) if ((HEAP32[i13 >> 2] | 0) > (HEAP32[26967] | 0)) if ((HEAP32[i13 >> 2] | 0) == 1) {
  _msg(42806) | 0;
  break;
 } else {
  HEAP32[i5 >> 2] = HEAP32[i13 >> 2];
  _smsg(42819, i5) | 0;
  break;
 } while (0);
 i5 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i5; else HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i5 + ((HEAP32[i8 >> 2] | 0) - (HEAP32[i7 >> 2] | 0)) + 1;
 if ((HEAP32[i7 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) {
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + 1);
  HEAP32[i14 >> 2] = HEAP32[HEAP32[26773] >> 2];
  if ((HEAP32[i9 >> 2] | 0) > ((HEAP32[i14 >> 2] | 0) + 1 | 0)) HEAP32[i9 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  _changed_lines(HEAP32[i7 >> 2] | 0, 0, HEAP32[i9 >> 2] | 0, 0);
 } else _changed_lines((HEAP32[i9 >> 2] | 0) + 1 | 0, 0, (HEAP32[i7 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0, 0);
 HEAP32[i6 >> 2] = 1;
 i15 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i4;
 return i15 | 0;
}

function _stop_insert(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 40 | 0;
 i7 = i5 + 36 | 0;
 i8 = i5 + 32 | 0;
 i9 = i5 + 28 | 0;
 i10 = i5 + 24 | 0;
 i11 = i5 + 16 | 0;
 i12 = i5 + 8 | 0;
 i13 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 _stop_redo_ins();
 _replace_flush();
 HEAP32[i10 >> 2] = _get_inserted() | 0;
 do if (!(HEAP32[25197] | 0)) i4 = 4; else {
  if (HEAP32[i10 >> 2] | 0) {
   i3 = _strlen(HEAP32[i10 >> 2] | 0) | 0;
   if ((i3 | 0) > (HEAP32[25202] | 0)) {
    i4 = 4;
    break;
   }
  }
  _vim_free(HEAP32[i10 >> 2] | 0);
 } while (0);
 if ((i4 | 0) == 4) {
  _vim_free(HEAP32[25208] | 0);
  HEAP32[25208] = HEAP32[i10 >> 2];
  HEAP32[25209] = HEAP32[25202];
 }
 do if ((HEAP32[27126] | 0) == 0 & (HEAP32[i6 >> 2] | 0) != 0) {
  if (!(HEAP32[25201] | 0)) if (_has_format_option(97) | 0) {
   i10 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i9 >> 2] = 120;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > 0) if (!(_gchar_cursor() | 0)) {
    _dec_cursor() | 0;
    HEAP32[i9 >> 2] = _gchar_cursor() | 0;
    if (!((HEAP32[i9 >> 2] | 0) == 32 | (HEAP32[i9 >> 2] | 0) == 9)) {
     i10 = (HEAP32[26881] | 0) + 24 | 0;
     HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
    }
   }
   _auto_format(1, 0);
   if ((HEAP32[i9 >> 2] | 0) == 32 | (HEAP32[i9 >> 2] | 0) == 9) if (_gchar_cursor() | 0) _inc_cursor() | 0;
  }
  _check_auto_format(1);
  if ((HEAP32[i8 >> 2] | 0) == 0 & (HEAP32[26791] | 0) != 0) {
   if (!(HEAP32[i7 >> 2] | 0)) {
    if (_vim_strchr(HEAP32[26904] | 0, 73) | 0) break;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) break;
   }
   if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
    i10 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
    i10 = (HEAP32[26881] | 0) + 24 | 0;
    i4 = HEAP32[i6 >> 2] | 0;
    HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
    _check_cursor_col();
    do {
     if (!(_gchar_cursor() | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > 0) {
      i4 = (HEAP32[26881] | 0) + 24 + 4 | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
     }
     HEAP32[i9 >> 2] = _gchar_cursor() | 0;
     if (!((HEAP32[i9 >> 2] | 0) == 32 | (HEAP32[i9 >> 2] | 0) == 9)) break;
    } while ((_del_char(1) | 0) != 0);
    i4 = (HEAP32[26881] | 0) + 24 | 0;
    if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) {
     HEAP32[i4 >> 2] = HEAP32[i12 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
    } else {
     HEAP32[i12 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i12 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
     i4 = i12 + 4 | 0;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
     if (HEAP32[i9 >> 2] | 0) if (!(_gchar_pos(i12) | 0)) {
      i4 = (HEAP32[26881] | 0) + 24 + 4 | 0;
      HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
     }
    }
    if (HEAP32[26788] | 0) if ((HEAP32[27117] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
     HEAP32[i13 >> 2] = _strlen(_ml_get_curline() | 0) | 0;
     if ((HEAP32[27118] | 0) > (HEAP32[i13 >> 2] | 0)) HEAP32[27118] = HEAP32[i13 >> 2];
    }
   }
  }
 } while (0);
 HEAP32[26791] = 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 i13 = (HEAP32[26773] | 0) + 476 | 0;
 HEAP32[i13 >> 2] = HEAP32[27122];
 HEAP32[i13 + 4 >> 2] = HEAP32[27123];
 i13 = (HEAP32[26773] | 0) + 484 | 0;
 HEAP32[i13 >> 2] = HEAP32[27124];
 HEAP32[i13 + 4 >> 2] = HEAP32[27125];
 i13 = (HEAP32[26773] | 0) + 492 | 0;
 i12 = HEAP32[i6 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 STACKTOP = i5;
 return;
}

function _ex_undolist(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 20 | 0;
 i10 = i3 + 16 | 0;
 i11 = i3 + 12 | 0;
 HEAP32[i3 + 52 >> 2] = i1;
 HEAP32[i10 >> 2] = 1;
 i1 = (HEAP32[26625] | 0) + 1 | 0;
 HEAP32[26625] = i1;
 HEAP32[i8 >> 2] = i1;
 i1 = (HEAP32[26625] | 0) + 1 | 0;
 HEAP32[26625] = i1;
 HEAP32[i9 >> 2] = i1;
 _ga_init2(i6, 4, 20);
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[26773] | 0) + 500 >> 2];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) {
   if (!(_ga_grow(i6, 1) | 0)) break;
   i1 = HEAP32[26882] | 0;
   i12 = HEAP32[i10 >> 2] | 0;
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2];
   HEAP32[i5 + 4 >> 2] = i12;
   _vim_snprintf(i1, 1025, 80987, i5) | 0;
   i1 = HEAP32[26882] | 0;
   i12 = i1 + (_strlen(HEAP32[26882] | 0) | 0) | 0;
   i1 = 1025 - (_strlen(HEAP32[26882] | 0) | 0) | 0;
   _u_add_time(i12, i1, HEAP32[(HEAP32[i7 >> 2] | 0) + 276 >> 2] | 0);
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 280 >> 2] | 0) > 0) {
    while (1) {
     i1 = (_strlen(HEAP32[26882] | 0) | 0) >>> 0 < 33;
     i13 = HEAP32[26882] | 0;
     if (!i1) break;
     _strcat(i13, 97452) | 0;
    }
    HEAP32[i4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 280 >> 2];
    _vim_snprintf_add(i13, 1025, 80998, i4) | 0;
   }
   i1 = _vim_strsave(HEAP32[26882] | 0) | 0;
   i12 = HEAP32[i6 + 16 >> 2] | 0;
   i14 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i14 + 1;
   HEAP32[i12 + (i14 << 2) >> 2] = i1;
  }
  HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = HEAP32[i8 >> 2];
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) {
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  } else i2 = 17; else i2 = 17; else i2 = 17;
  do if ((i2 | 0) == 17) {
   i2 = 0;
   if (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) {
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2];
    break;
   }
   if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0)) if ((HEAP32[(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) if ((HEAP32[(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) {
    HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
    break;
   }
   HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = HEAP32[i9 >> 2];
   i1 = HEAP32[i7 >> 2] | 0;
   if (HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) {
    HEAP32[i7 >> 2] = HEAP32[i1 + 12 >> 2];
    break;
   } else {
    HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
    break;
   }
  } while (0);
 }
 if (!(HEAP32[i6 >> 2] | 0)) {
  _msg(81005) | 0;
  STACKTOP = i3;
  return;
 }
 _sort_strings(HEAP32[i6 + 16 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 _msg_start();
 _msg_puts_attr(81021, HEAP32[27064] | 0);
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  _msg_putchar(10);
  if (HEAP32[26834] | 0) break;
  _msg_puts(HEAP32[(HEAP32[i6 + 16 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0);
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 _msg_end() | 0;
 _ga_clear_strings(i6);
 STACKTOP = i3;
 return;
}

function _nv_edit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == -18795) i2 = 3; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == -20477) i2 = 3;
 if ((i2 | 0) == 3) HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = 105;
 do if (HEAP32[26788] | 0) {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) != 65) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) != 73) break;
  _v_visop(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 } while (0);
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 97) i2 = 10; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 105) i2 = 10;
 if ((i2 | 0) == 10) if (HEAP32[26788] | 0 ? 1 : (HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) != 0) {
  _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[26883] | 0 ? 1 : (HEAP32[(HEAP32[26773] | 0) + 664 >> 2] | 0) != 0)) {
  _emsg(92640) | 0;
  _clearop(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) != -21328) {
   STACKTOP = i3;
   return;
  }
  _bracketed_paste(0, 1, 0) | 0;
  STACKTOP = i3;
  return;
 }
 if (HEAP32[26788] | 0 ? (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == -21328 : 0) {
  i1 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i6 >> 2] = HEAP32[27117];
  HEAP32[i6 + 4 >> 2] = HEAP32[27118];
  if ((HEAP32[10179] | 0) == 86) i2 = 18; else if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27117] | 0)) i2 = 18; else HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2] = 45;
  if ((i2 | 0) == 18) {
   _shift_delete_registers();
   HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2] = 49;
  }
  HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = 100;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = 0;
  _nv_operator(HEAP32[i4 >> 2] | 0);
  _do_pending_operator(HEAP32[i4 >> 2] | 0, 0, 0);
  HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = -21328;
  do if (HEAPU8[(_ml_get_cursor() | 0) >> 0] | 0) {
   i1 = (HEAP32[26881] | 0) + 24 | 0;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
    if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
   } else if ((HEAP32[i1 + 4 >> 2] | 0) >= (HEAP32[i5 + 4 >> 2] | 0)) break;
   i1 = (HEAP32[26881] | 0) + 24 | 0;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) {
    if ((HEAP32[i1 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
   } else if ((HEAP32[i1 + 4 >> 2] | 0) >= (HEAP32[i6 + 4 >> 2] | 0)) break;
   _inc_cursor() | 0;
  } while (0);
  i6 = HEAP32[i4 >> 2] | 0;
  _invoke_edit(i6 | 0, 0, HEAP32[i6 + 8 >> 2] | 0, 0);
  STACKTOP = i3;
  return;
 }
 i6 = (_checkclearopq(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) != 0;
 i5 = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0;
 if (i6) {
  if ((i5 | 0) != -21328) {
   STACKTOP = i3;
   return;
  }
  _bracketed_paste(0, 1, 0) | 0;
  STACKTOP = i3;
  return;
 }
 L55 : do if ((i5 | 0) < 73) if ((i5 | 0) < 65) {
  switch (i5 | 0) {
  case -21328:
   break;
  default:
   break L55;
  }
  if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break; else {
   i2 = 36;
   break;
  }
 } else {
  switch (i5 | 0) {
  case 65:
   break;
  default:
   break L55;
  }
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  i6 = _strlen(_ml_get_cursor() | 0) | 0;
  i1 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i6;
  break;
 } else {
  switch (i5 | 0) {
  case 97:
   {
    i2 = 36;
    break L55;
    break;
   }
  case 73:
   break;
  default:
   break L55;
  }
  if (!(_vim_strchr(HEAP32[26904] | 0, 72) | 0)) {
   _beginline(1);
   break;
  } else {
   _beginline(5);
   break;
  }
 } while (0);
 if ((i2 | 0) == 36) if (HEAPU8[(_ml_get_cursor() | 0) >> 0] | 0) _inc_cursor() | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 _invoke_edit(i2 | 0, 0, HEAP32[i2 + 8 >> 2] | 0, 0);
 STACKTOP = i3;
 return;
}

function _buf_reload(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i5 = i4 + 184 | 0;
 i6 = i4 + 180 | 0;
 i7 = i4 + 80 | 0;
 i8 = i4 + 72 | 0;
 i9 = i4 + 64 | 0;
 i10 = i4 + 60 | 0;
 i11 = i4 + 56 | 0;
 i12 = i4 + 44 | 0;
 i13 = i4 + 40 | 0;
 i14 = i4 + 8 | 0;
 i15 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 676 >> 2];
 HEAP32[i13 >> 2] = 1;
 HEAP32[i15 >> 2] = 1;
 _aucmd_prepbuf(i14, HEAP32[i5 >> 2] | 0);
 if ((_prep_exarg(i7, HEAP32[i5 >> 2] | 0) | 0) != 1) {
  _aucmd_restbuf(i14);
  STACKTOP = i4;
  return;
 }
 i2 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 if ((HEAP32[27021] | 0) < 0) i3 = 4; else if ((HEAP32[HEAP32[26773] >> 2] | 0) <= (HEAP32[27021] | 0)) i3 = 4;
 if ((i3 | 0) == 4) {
  _u_sync(0);
  HEAP32[i13 >> 2] = _u_savecommon(0, (HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0, 0, 1) | 0;
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 32;
 }
 if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) {
  i2 = (HEAPU8[(_ml_get(1) | 0) >> 0] | 0) == 0;
  if (i2 | (HEAP32[i13 >> 2] | 0) == 0) i3 = 8; else i3 = 9;
 } else if (!(HEAP32[i13 >> 2] | 0)) i3 = 8; else i3 = 9;
 do if ((i3 | 0) == 8) HEAP32[i11 >> 2] = 0; else if ((i3 | 0) == 9) {
  HEAP32[i11 >> 2] = _buflist_new(0, 0, 1, 4) | 0;
  _set_bufref(i12, HEAP32[i11 >> 2] | 0);
  if (HEAP32[i11 >> 2] | 0) if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26773] | 0)) {
   HEAP32[26773] = HEAP32[i11 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 4 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i13 >> 2] = _ml_open(HEAP32[26773] | 0) | 0;
   HEAP32[26773] = HEAP32[i5 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 4 >> 2] = HEAP32[i5 >> 2];
  }
  if (!((HEAP32[i11 >> 2] | 0) == 0 | (HEAP32[i13 >> 2] | 0) == 0)) if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26773] | 0)) if (_move_lines(HEAP32[i5 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) break;
  _emsg2(55763, HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0) | 0;
  HEAP32[i13 >> 2] = 0;
 } while (0);
 do if ((HEAP32[i13 >> 2] | 0) == 1) {
  i3 = (HEAP32[26773] | 0) + 60 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
  HEAP32[26748] = 1;
  i3 = HEAP32[i5 >> 2] | 0;
  i2 = (_readfile(HEAP32[i3 + 68 >> 2] | 0, HEAP32[i3 + 76 >> 2] | 0, 0, 0, 2147483647, i7, HEAP32[i15 >> 2] | 0) | 0) != 1;
  i3 = HEAP32[i5 >> 2] | 0;
  if (!i2) {
   if ((i3 | 0) != (HEAP32[26773] | 0)) break;
   _unchanged(HEAP32[i5 >> 2] | 0, 1);
   if (!(HEAP32[i15 >> 2] & 32)) {
    _u_blockfree(HEAP32[i5 >> 2] | 0);
    _u_clearall(HEAP32[i5 >> 2] | 0);
    break;
   } else {
    _u_unchanged(HEAP32[26773] | 0);
    break;
   }
  }
  _emsg2(55806, HEAP32[i3 + 76 >> 2] | 0) | 0;
  if (HEAP32[i11 >> 2] | 0) if (_bufref_valid(i12) | 0) if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26773] | 0)) {
   do {
    if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) i16 = (HEAPU8[(_ml_get(1) | 0) >> 0] | 0) == 0; else i16 = 0;
    if (!(i16 ^ 1)) break;
   } while ((_ml_delete(HEAP32[HEAP32[i5 >> 2] >> 2] | 0, 0) | 0) != 0);
   _move_lines(HEAP32[i11 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  }
 } while (0);
 _vim_free(HEAP32[i7 + 8 >> 2] | 0);
 if (HEAP32[i11 >> 2] | 0) if (_bufref_valid(i12) | 0) _wipe_buffer(HEAP32[i11 >> 2] | 0, 0);
 if ((HEAP32[i9 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[HEAP32[26773] >> 2]; else HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[i9 >> 2];
 i9 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 _check_cursor();
 _update_topline();
 HEAP32[26748] = 0;
 if ((HEAP32[i6 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 184 >> 2] | 0)) {
  i6 = (HEAP32[26773] | 0) + 676 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | HEAP32[i10 >> 2];
 }
 _do_modelines(0);
 _aucmd_restbuf(i14);
 STACKTOP = i4;
 return;
}

function _vim_strsave_shellescape(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 20 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 8 | 0;
 i13 = i5 + 4 | 0;
 i14 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i14 >> 2] = _csh_like_shell() | 0;
 HEAP32[i9 >> 2] = (_strlen(HEAP32[i6 >> 2] | 0) | 0) + 3;
 HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 39) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 3;
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 10) if ((HEAP32[i14 >> 2] | 0) != 0 | (HEAP32[i8 >> 2] | 0) != 0) i4 = 9; else i4 = 7; else i4 = 7;
  if ((i4 | 0) == 7) {
   i4 = 0;
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 33) if ((HEAP32[i14 >> 2] | 0) != 0 | (HEAP32[i7 >> 2] | 0) != 0) i4 = 9;
  }
  if ((i4 | 0) == 9) {
   i4 = 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   if ((HEAP32[i14 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) != 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  if (HEAP32[i7 >> 2] | 0) if ((_find_cmdline_var(HEAP32[i10 >> 2] | 0, i13) | 0) >= 0) {
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) - 1);
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 HEAP32[i12 >> 2] = _alloc(HEAP32[i9 >> 2] | 0) | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i15 = HEAP32[i12 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
 i9 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = i9 + 1;
 HEAP8[i9 >> 0] = 39;
 HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
 L24 : while (1) {
  if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 39) {
   i6 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i6 + 1;
   HEAP8[i6 >> 0] = 39;
   i6 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i6 + 1;
   HEAP8[i6 >> 0] = 92;
   i6 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i6 + 1;
   HEAP8[i6 >> 0] = 39;
   i6 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i6 + 1;
   HEAP8[i6 >> 0] = 39;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   continue;
  }
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 10) {
   if (!((HEAP32[i14 >> 2] | 0) != 0 | (HEAP32[i8 >> 2] | 0) != 0)) i4 = 22;
  } else i4 = 22;
  do if ((i4 | 0) == 22) {
   i4 = 0;
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 33) if ((HEAP32[i14 >> 2] | 0) != 0 | (HEAP32[i7 >> 2] | 0) != 0) break;
   if (HEAP32[i7 >> 2] | 0) if ((_find_cmdline_var(HEAP32[i10 >> 2] | 0, i13) | 0) >= 0) {
    i6 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i6 + 1;
    HEAP8[i6 >> 0] = 92;
    while (1) {
     i6 = (HEAP32[i13 >> 2] | 0) + -1 | 0;
     HEAP32[i13 >> 2] = i6;
     if ((i6 | 0) < 0) break;
     i6 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i6 + 1;
     i9 = HEAP8[i6 >> 0] | 0;
     i6 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i6 + 1;
     HEAP8[i6 >> 0] = i9;
    }
    continue L24;
   }
   i9 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i9 + 1;
   i6 = HEAP8[i9 >> 0] | 0;
   i9 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i9 + 1;
   HEAP8[i9 >> 0] = i6;
   continue L24;
  } while (0);
  i6 = HEAP32[i11 >> 2] | 0;
  HEAP32[i11 >> 2] = i6 + 1;
  HEAP8[i6 >> 0] = 92;
  if ((HEAP32[i14 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) != 0) {
   i6 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i6 + 1;
   HEAP8[i6 >> 0] = 92;
  }
  i6 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i6 + 1;
  i9 = HEAP8[i6 >> 0] | 0;
  i6 = HEAP32[i11 >> 2] | 0;
  HEAP32[i11 >> 2] = i6 + 1;
  HEAP8[i6 >> 0] = i9;
 }
 i10 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = i10 + 1;
 HEAP8[i10 >> 0] = 39;
 HEAP8[HEAP32[i11 >> 2] >> 0] = 0;
 i15 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i5;
 return i15 | 0;
}

function _find_ident_at_pos(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i7 + 36 | 0;
 i9 = i7 + 32 | 0;
 i10 = i7 + 28 | 0;
 i11 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i13 = i7 + 16 | 0;
 i14 = i7 + 12 | 0;
 i15 = i7 + 8 | 0;
 i16 = i7 + 4 | 0;
 i17 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i14 >> 2] = _ml_get_buf(HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
 HEAP32[i16 >> 2] = HEAP32[i13 >> 2] & 1 | 0 ? 0 : 1;
 while (1) {
  if ((HEAP32[i16 >> 2] | 0) >= 2) break;
  HEAP32[i15 >> 2] = HEAP32[i11 >> 2];
  while (1) {
   if (!(HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0)) break;
   i10 = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0;
   if (!(HEAP32[i16 >> 2] | 0)) {
    if (_vim_iswordc(i10) | 0) break;
   } else if ((i10 | 0) != 32) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0 | 0) != 9) break;
   if (HEAP32[i13 >> 2] & 4 | 0) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0 | 0) == 93) break;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  HEAP32[i17 >> 2] = (HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0 | 0) == 93 & 1;
  while (1) {
   if ((HEAP32[i15 >> 2] | 0) <= 0) break;
   i10 = HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0;
   if (!(HEAP32[i16 >> 2] | 0)) {
    if (!(_vim_iswordc(i10) | 0)) i6 = 20;
   } else if ((i10 | 0) == 32) i6 = 20; else if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0 | 0) == 9) i6 = 20; else if (HEAP32[i13 >> 2] & 1 | 0) if (_vim_iswordc(HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0) | 0) i6 = 20;
   if ((i6 | 0) == 20) {
    i6 = 0;
    if (!((HEAP32[i13 >> 2] & 4 | 0) != 0 & (HEAP32[i15 >> 2] | 0) > 1)) break;
    if (!(_find_is_eval_item((HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) + -1 | 0, i15, i17, -1) | 0)) break;
   }
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  }
  if (!(HEAP32[i13 >> 2] & 2)) break;
  if (_vim_iswordc(HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) | 0) break;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 do if (HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0 | 0) {
  if (!(HEAP32[i16 >> 2] | 0)) if (!(_vim_iswordc(HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0) | 0)) break;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
  HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i14 >> 2];
  HEAP32[i17 >> 2] = 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i15 >> 2] | 0);
  HEAP32[i15 >> 2] = 0;
  while (1) {
   i10 = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0;
   if (!(HEAP32[i16 >> 2] | 0)) if (_vim_iswordc(i10) | 0) i18 = 1; else i6 = 39; else if (i10 | 0) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0 | 0) == 32) i6 = 39; else if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0 | 0) == 9) i6 = 39; else i18 = 1; else i6 = 39;
   if ((i6 | 0) == 39) {
    i6 = 0;
    if (HEAP32[i13 >> 2] & 4 | 0) if ((HEAP32[i15 >> 2] | 0) <= (HEAP32[i11 >> 2] | 0)) i18 = (_find_is_eval_item((HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0, i15, i17, 1) | 0) != 0; else i18 = 0; else i18 = 0;
   }
   i19 = HEAP32[i15 >> 2] | 0;
   if (!i18) break;
   HEAP32[i15 >> 2] = i19 + 1;
  }
  HEAP32[i8 >> 2] = i19;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 } while (0);
 if (HEAP32[i13 >> 2] & 2 | 0) _emsg(61752) | 0; else _emsg(61781) | 0;
 HEAP32[i8 >> 2] = 0;
 i20 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i20 | 0;
}

function _buflist_findpat(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i8 = i7 + 148 | 0;
 i9 = i7 + 144 | 0;
 i10 = i7 + 140 | 0;
 i11 = i7 + 136 | 0;
 i12 = i7 + 128 | 0;
 i13 = i7 + 124 | 0;
 i14 = i7 + 120 | 0;
 i15 = i7 + 116 | 0;
 i16 = i7 + 112 | 0;
 i17 = i7 + 108 | 0;
 i18 = i7 + 104 | 0;
 i19 = i7 + 100 | 0;
 i20 = i7 + 96 | 0;
 i21 = i7 + 8 | 0;
 i22 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i7 + 132 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i14 >> 2] = -1;
 do if ((HEAP32[i10 >> 2] | 0) == ((HEAP32[i9 >> 2] | 0) + 1 | 0)) {
  if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 37) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 35) {
   i6 = 7;
   break;
  }
  if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 37) {
   HEAP32[i14 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
   break;
  } else {
   HEAP32[i14 >> 2] = HEAP32[(HEAP32[26881] | 0) + 180 >> 2];
   break;
  }
 } else i6 = 7; while (0);
 do if ((i6 | 0) == 7) {
  HEAP32[i16 >> 2] = _file_pat_to_reg_pat(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0, 0) | 0;
  if (!(HEAP32[i16 >> 2] | 0)) {
   HEAP32[i8 >> 2] = -1;
   i23 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i23 | 0;
  }
  i5 = HEAP32[i16 >> 2] | 0;
  HEAP32[i17 >> 2] = i5 + (_strlen(HEAP32[i16 >> 2] | 0) | 0) + -1;
  if ((HEAP32[i17 >> 2] | 0) >>> 0 > (HEAP32[i16 >> 2] | 0) >>> 0) i24 = (HEAPU8[HEAP32[i17 >> 2] >> 0] | 0 | 0) == 36; else i24 = 0;
  HEAP32[i20 >> 2] = i24 & 1;
  HEAP32[i15 >> 2] = 1;
  L18 : while (1) {
   HEAP32[i18 >> 2] = 0;
   while (1) {
    if ((HEAP32[i18 >> 2] | 0) > 3) break;
    if (HEAP32[i20 >> 2] | 0) HEAP8[HEAP32[i17 >> 2] >> 0] = (HEAP32[i18 >> 2] | 0) < 2 ? 0 : 36;
    HEAP32[i19 >> 2] = HEAP32[i16 >> 2];
    if ((HEAPU8[HEAP32[i19 >> 2] >> 0] | 0 | 0) == 94) if (!(HEAP32[i18 >> 2] & 1)) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
    HEAP32[i21 >> 2] = _vim_regcomp(HEAP32[i19 >> 2] | 0, HEAP32[26946] | 0 ? 1 : 0) | 0;
    if (!(HEAP32[i21 >> 2] | 0)) break L18;
    HEAP32[i13 >> 2] = HEAP32[26772];
    L31 : while (1) {
     if (!(HEAP32[i13 >> 2] | 0)) break;
     do if ((HEAP32[(HEAP32[i13 >> 2] | 0) + 596 >> 2] | 0) == (HEAP32[i15 >> 2] | 0)) if (_buflist_match(i21, HEAP32[i13 >> 2] | 0, 0) | 0) {
      if (HEAP32[i12 >> 2] | 0) {
       HEAP32[i22 >> 2] = HEAP32[26887];
       while (1) {
        if (!(HEAP32[i22 >> 2] | 0)) break;
        if ((HEAP32[(HEAP32[i22 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) break;
        HEAP32[i22 >> 2] = HEAP32[(HEAP32[i22 >> 2] | 0) + 12 >> 2];
       }
       if (!(HEAP32[i22 >> 2] | 0)) break;
      }
      if ((HEAP32[i14 >> 2] | 0) >= 0) {
       i6 = 32;
       break L31;
      }
      HEAP32[i14 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 92 >> 2];
     } while (0);
     HEAP32[i13 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 52 >> 2];
    }
    if ((i6 | 0) == 32) {
     i6 = 0;
     HEAP32[i14 >> 2] = -2;
    }
    _vim_regfree(HEAP32[i21 >> 2] | 0);
    if ((HEAP32[i14 >> 2] | 0) >= 0) break;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   }
   if ((HEAP32[i11 >> 2] | 0) != 0 & (HEAP32[i15 >> 2] | 0) != 0 ^ 1 | (HEAP32[i14 >> 2] | 0) != -1) {
    i6 = 39;
    break;
   }
   HEAP32[i15 >> 2] = 0;
  }
  if ((i6 | 0) == 39) {
   _vim_free(HEAP32[i16 >> 2] | 0);
   break;
  }
  _vim_free(HEAP32[i16 >> 2] | 0);
  HEAP32[i8 >> 2] = -1;
  i23 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i23 | 0;
 } while (0);
 if ((HEAP32[i14 >> 2] | 0) == -2) _emsg2(42348, HEAP32[i9 >> 2] | 0) | 0; else if ((HEAP32[i14 >> 2] | 0) < 0) _emsg2(42380, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = HEAP32[i14 >> 2];
 i23 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i23 | 0;
}

function _set_init_1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 36 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[26903] = 1;
 if (_getenv(62923) | 0) {
  _set_string_default(62933, 62937);
  _set_string_default(62997, 63001);
 }
 i1 = _getenv(63003) | 0;
 HEAP32[i5 >> 2] = i1;
 if (i1 | 0) if (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) _set_string_default_esc(72064, HEAP32[i5 >> 2] | 0, 1);
 _ga_init2(i9, 1, 100);
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >>> 0 >= 4) break;
  HEAP32[i10 >> 2] = 0;
  if (!(HEAP8[HEAP32[15312 + (HEAP32[i7 >> 2] << 2) >> 2] >> 0] | 0)) HEAP32[i5 >> 2] = 63009; else HEAP32[i5 >> 2] = _vim_getenv(HEAP32[15312 + (HEAP32[i7 >> 2] << 2) >> 2] | 0, i10) | 0;
  if (HEAP32[i5 >> 2] | 0) if (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) {
   HEAP32[i8 >> 2] = (_strlen(HEAP32[i5 >> 2] | 0) | 0) + 3;
   if ((_ga_grow(i9, HEAP32[i8 >> 2] | 0) | 0) == 1) {
    if ((HEAP32[i9 >> 2] | 0) > 0) _strcat(HEAP32[i9 + 16 >> 2] | 0, 84434) | 0;
    _strcat(HEAP32[i9 + 16 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
    _add_pathsep(HEAP32[i9 + 16 >> 2] | 0);
    _strcat(HEAP32[i9 + 16 >> 2] | 0, 84483) | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   }
  }
  if (HEAP32[i10 >> 2] | 0) _vim_free(HEAP32[i5 >> 2] | 0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if (HEAP32[i9 + 16 >> 2] | 0) {
  _set_string_default(63014, HEAP32[i9 + 16 >> 2] | 0);
  _vim_free(HEAP32[i9 + 16 >> 2] | 0);
 }
 HEAP32[i6 >> 2] = _findoption(63018) | 0;
 if ((HEAP32[i6 >> 2] | 0) >= 0) {
  HEAP32[i7 >> 2] = (_mch_total_mem(0) | 0) >>> 1;
  HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 20 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i6 >> 2] = _findoption(63028) | 0;
  if ((HEAP32[i6 >> 2] | 0) >= 0) HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 20 >> 2] = HEAP32[i7 >> 2];
 }
 _set_options_default(0);
 if (HEAP32[i4 >> 2] | 0) {
  HEAP32[i6 >> 2] = _findoption(63035) | 0;
  if ((HEAP32[i6 >> 2] | 0) >= 0) {
   HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 20 >> 2] = 63047;
   HEAP32[26969] = 63047;
  }
  HEAP32[i6 >> 2] = _findoption(63093) | 0;
  if ((HEAP32[i6 >> 2] | 0) >= 0) {
   HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 20 >> 2] = 63047;
   HEAP32[26968] = 63047;
  }
 }
 if (0) _set_option_value(76683, 0, 76755, 0) | 0;
 HEAP32[(HEAP32[26773] | 0) + 560 >> 2] = 1;
 HEAP32[(HEAP32[26773] | 0) + 740 >> 2] = -1;
 HEAP32[(HEAP32[26773] | 0) + 756 >> 2] = -123456;
 _check_buf_options(HEAP32[26773] | 0);
 _check_win_options(HEAP32[26881] | 0);
 _check_options();
 _didset_options();
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if (!((_istermoption(15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) | 0) | 0) != 0 ^ 1)) break;
  if (HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 8 >> 2] & 1048576 | 0) if (HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) HEAP32[i5 >> 2] = HEAP32[HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 12 >> 2] >> 2]; else i2 = 37; else i2 = 37;
  if ((i2 | 0) == 37) {
   i2 = 0;
   HEAP32[i5 >> 2] = _option_expand(HEAP32[i6 >> 2] | 0, 0) | 0;
  }
  if (HEAP32[i5 >> 2] | 0) {
   i4 = _vim_strsave(HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i5 >> 2] = i4;
   if (i4 | 0) {
    HEAP32[HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 12 >> 2] >> 2] = HEAP32[i5 >> 2];
    if (HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 8 >> 2] & 128 | 0) _vim_free(HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 20 >> 2] | 0);
    HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 20 >> 2] = HEAP32[i5 >> 2];
    i4 = 15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 8 | 0;
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 128;
   }
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 _save_file_ff(HEAP32[26773] | 0);
 _didset_options2();
 STACKTOP = i3;
 return;
}

function _do_arglist(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i6 = i5 + 152 | 0;
 i7 = i5 + 148 | 0;
 i8 = i5 + 144 | 0;
 i9 = i5 + 140 | 0;
 i10 = i5 + 120 | 0;
 i11 = i5 + 116 | 0;
 i12 = i5 + 112 | 0;
 i13 = i5 + 108 | 0;
 i14 = i5 + 104 | 0;
 i15 = i5 + 100 | 0;
 i16 = i5 + 96 | 0;
 i17 = i5 + 8 | 0;
 i18 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i16 >> 2] = 1;
 do if ((HEAP32[i8 >> 2] | 0) == 2) if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) {
  if (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) {
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2];
   HEAP32[i16 >> 2] = 0;
   break;
  }
  HEAP32[i6 >> 2] = 0;
  i19 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i19 | 0;
 } while (0);
 if (!(_get_arglist(i10, HEAP32[i7 >> 2] | 0, HEAP32[i16 >> 2] | 0) | 0)) {
  HEAP32[i6 >> 2] = 0;
  i19 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i19 | 0;
 }
 do if ((HEAP32[i8 >> 2] | 0) == 3) {
  HEAP32[i17 + 84 >> 2] = HEAP32[26918];
  HEAP32[i13 >> 2] = 0;
  while (1) {
   if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   HEAP32[i14 >> 2] = HEAP32[(HEAP32[i10 + 16 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2];
   HEAP32[i14 >> 2] = _file_pat_to_reg_pat(HEAP32[i14 >> 2] | 0, 0, 0, 0) | 0;
   if (!(HEAP32[i14 >> 2] | 0)) break;
   HEAP32[i17 >> 2] = _vim_regcomp(HEAP32[i14 >> 2] | 0, HEAP32[26946] | 0 ? 1 : 0) | 0;
   if (!(HEAP32[i17 >> 2] | 0)) {
    i4 = 14;
    break;
   }
   HEAP32[i18 >> 2] = 0;
   HEAP32[i15 >> 2] = 0;
   while (1) {
    if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) break;
    if (_vim_regexec(i17, _alist_name((HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i15 >> 2] << 3) | 0) | 0, 0) | 0) {
     HEAP32[i18 >> 2] = 1;
     _vim_free(HEAP32[(HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i15 >> 2] << 3) >> 2] | 0);
     i16 = (HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i15 >> 2] << 3) | 0;
     i7 = (HEAP32[26881] | 0) + 184 | 0;
     _memmove(i16 | 0, i16 + 8 | 0, (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) - (HEAP32[i15 >> 2] | 0) - 1 << 3 | 0) | 0;
     i7 = HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
     if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) > (HEAP32[i15 >> 2] | 0)) {
      i7 = (HEAP32[26881] | 0) + 188 | 0;
      HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
     }
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   _vim_regfree(HEAP32[i17 >> 2] | 0);
   _vim_free(HEAP32[i14 >> 2] | 0);
   if (!(HEAP32[i18 >> 2] | 0)) _emsg2(93046, HEAP32[(HEAP32[i10 + 16 >> 2] | 0) + (HEAP32[i13 >> 2] << 2) >> 2] | 0) | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  if ((i4 | 0) == 14) _vim_free(HEAP32[i14 >> 2] | 0);
  _ga_clear(i10);
 } else {
  HEAP32[i13 >> 2] = _expand_wildcards(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 16 >> 2] | 0, i11, i12, 15) | 0;
  _ga_clear(i10);
  if ((HEAP32[i13 >> 2] | 0) == 0 | (HEAP32[i11 >> 2] | 0) == 0) {
   _emsg(93031) | 0;
   HEAP32[i6 >> 2] = 0;
   i19 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i19 | 0;
  }
  if ((HEAP32[i8 >> 2] | 0) == 2) {
   _alist_add_list(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   _vim_free(HEAP32[i12 >> 2] | 0);
   break;
  } else {
   _alist_set(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, 0, 0);
   break;
  }
 } while (0);
 _alist_check_arg_idx();
 HEAP32[i6 >> 2] = 1;
 i19 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i19 | 0;
}

function _ex_delmarks(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 28 | 0;
 i5 = i3 + 24 | 0;
 i6 = i3 + 20 | 0;
 i7 = i3 + 16 | 0;
 i8 = i3 + 12 | 0;
 i9 = i3 + 8 | 0;
 i10 = i3 + 4 | 0;
 i11 = i3;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0)) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) {
  _clrallmarks(HEAP32[26773] | 0);
  STACKTOP = i3;
  return;
 }
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) {
  _emsg(92453) | 0;
  STACKTOP = i3;
  return;
 }
 if (!(HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0)) {
  _emsg(92160) | 0;
  STACKTOP = i3;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 L14 : while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i2 = 42;
   break;
  }
  HEAP32[i9 >> 2] = ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) - 97 | 0) >>> 0 < 26 & 1;
  HEAP32[i10 >> 2] = ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10 & 1;
  L17 : do if ((HEAP32[i9 >> 2] | 0) != 0 | (HEAP32[i10 >> 2] | 0) != 0) i2 = 12; else if (((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) - 65 | 0) >>> 0 < 26) i2 = 12; else switch (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) {
  case 32:
   {
    break L17;
    break;
   }
  case 34:
   {
    HEAP32[(HEAP32[26773] | 0) + 420 >> 2] = 0;
    break L17;
    break;
   }
  case 94:
   {
    HEAP32[(HEAP32[26773] | 0) + 428 >> 2] = 0;
    break L17;
    break;
   }
  case 46:
   {
    HEAP32[(HEAP32[26773] | 0) + 436 >> 2] = 0;
    break L17;
    break;
   }
  case 91:
   {
    HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = 0;
    break L17;
    break;
   }
  case 93:
   {
    HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = 0;
    break L17;
    break;
   }
  case 60:
   {
    HEAP32[(HEAP32[26773] | 0) + 396 >> 2] = 0;
    break L17;
    break;
   }
  case 62:
   {
    HEAP32[(HEAP32[26773] | 0) + 396 + 8 >> 2] = 0;
    break L17;
    break;
   }
  default:
   {
    i2 = 40;
    break L14;
   }
  } while (0);
  L28 : do if ((i2 | 0) == 12) {
   i2 = 0;
   i4 = HEAPU8[HEAP32[i5 >> 2] >> 0] | 0;
   if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) == 45) {
    HEAP32[i6 >> 2] = i4;
    HEAP32[i7 >> 2] = HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0];
    do if (HEAP32[i9 >> 2] | 0) {
     if (((HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0) - 97 | 0) >>> 0 >= 26) {
      i2 = 19;
      break L14;
     }
    } else {
     i1 = HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0;
     if (HEAP32[i10 >> 2] | 0) if ((i1 - 48 | 0) >>> 0 < 10) break; else {
      i2 = 19;
      break L14;
     } else if ((i1 - 65 | 0) >>> 0 < 26) break; else {
      i2 = 19;
      break L14;
     }
    } while (0);
    if ((HEAP32[i7 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) {
     i2 = 19;
     break L14;
    }
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 2;
   } else {
    HEAP32[i7 >> 2] = i4;
    HEAP32[i6 >> 2] = i4;
   }
   HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
   while (1) {
    if ((HEAP32[i8 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) break L28;
    if (HEAP32[i9 >> 2] | 0) HEAP32[(HEAP32[26773] | 0) + 188 + ((HEAP32[i8 >> 2] | 0) - 97 << 3) >> 2] = 0; else {
     i1 = HEAP32[i8 >> 2] | 0;
     if (HEAP32[i10 >> 2] | 0) HEAP32[i11 >> 2] = i1 - 48 + 26; else HEAP32[i11 >> 2] = i1 - 65;
     HEAP32[103600 + (HEAP32[i11 >> 2] << 4) >> 2] = 0;
     if (HEAP32[103600 + (HEAP32[i11 >> 2] << 4) + 12 >> 2] | 0) {
      _vim_free(HEAP32[103600 + (HEAP32[i11 >> 2] << 4) + 12 >> 2] | 0);
      HEAP32[103600 + (HEAP32[i11 >> 2] << 4) + 12 >> 2] = 0;
     }
    }
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 19) {
  _emsg2(92476, HEAP32[i5 >> 2] | 0) | 0;
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 40) {
  _emsg2(92476, HEAP32[i5 >> 2] | 0) | 0;
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 42) {
  STACKTOP = i3;
  return;
 }
}

function _ex_display(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 36 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 20 | 0;
 i10 = i3 + 16 | 0;
 i11 = i3 + 12 | 0;
 i12 = i3 + 8 | 0;
 i13 = i3 + 4 | 0;
 i14 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i12 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 if (HEAP32[i12 >> 2] | 0) if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) HEAP32[i12 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[27048];
 _msg_puts_title(62524);
 HEAP32[i5 >> 2] = -1;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 38) break;
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  HEAP32[i10 >> 2] = _get_register_name(HEAP32[i5 >> 2] | 0) | 0;
  if (HEAP32[i12 >> 2] | 0) if (!(_vim_strchr(HEAP32[i12 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
   if ((HEAP32[i10 >> 2] | 0) == 42) if (_vim_strchr(HEAP32[i12 >> 2] | 0, 43) | 0) i2 = 11;
  } else i2 = 11; else i2 = 11;
  if ((i2 | 0) == 11) {
   i2 = 0;
   _adjust_clip_reg(i10);
   _may_get_selection(HEAP32[i10 >> 2] | 0) | 0;
   do if ((HEAP32[i5 >> 2] | 0) == -1) if (HEAP32[26083] | 0) {
    HEAP32[i9 >> 2] = HEAP32[26083];
    break;
   } else {
    HEAP32[i9 >> 2] = 104340;
    break;
   } else HEAP32[i9 >> 2] = 104340 + (HEAP32[i5 >> 2] << 4); while (0);
   if (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) {
    _msg_putchar(10);
    _msg_putchar(34);
    _msg_putchar(HEAP32[i10 >> 2] | 0);
    _msg_puts(96759);
    HEAP32[i6 >> 2] = (HEAP32[10174] | 0) - 6;
    HEAP32[i7 >> 2] = 0;
    while (1) {
     if (!((HEAP32[i7 >> 2] | 0) < (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) ? (HEAP32[i6 >> 2] | 0) > 1 : 0)) break;
     if (HEAP32[i7 >> 2] | 0) {
      _msg_puts_attr(62543, HEAP32[i11 >> 2] | 0);
      HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - 2;
     }
     HEAP32[i8 >> 2] = HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2];
     while (1) {
      if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
      i4 = _ptr2cells(HEAP32[i8 >> 2] | 0) | 0;
      i1 = (HEAP32[i6 >> 2] | 0) - i4 | 0;
      HEAP32[i6 >> 2] = i1;
      if ((i1 | 0) < 0) break;
      _msg_outtrans_len(HEAP32[i8 >> 2] | 0, 1) | 0;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
     }
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    }
    if ((HEAP32[i6 >> 2] | 0) > 1) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 8 >> 0] | 0 | 0) == 1) _msg_puts_attr(62543, HEAP32[i11 >> 2] | 0);
    _out_flush();
   }
   _ui_breakcheck();
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 i5 = _get_last_insert() | 0;
 HEAP32[i8 >> 2] = i5;
 do if (i5 | 0) {
  if (HEAP32[i12 >> 2] | 0) if (!(_vim_strchr(HEAP32[i12 >> 2] | 0, 46) | 0)) break;
  if (!(HEAP32[26834] | 0)) {
   _msg_puts(62546);
   _dis_msg(HEAP32[i8 >> 2] | 0, 1);
  }
 } while (0);
 do if (0) {
  if (HEAP32[i12 >> 2] | 0) if (!(_vim_strchr(HEAP32[i12 >> 2] | 0, 58) | 0)) break;
  if (!(HEAP32[26834] | 0)) {
   _msg_puts(62553);
   _dis_msg(0, 0);
  }
 } while (0);
 do if (HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0) {
  if (HEAP32[i12 >> 2] | 0) if (!(_vim_strchr(HEAP32[i12 >> 2] | 0, 37) | 0)) break;
  if (!(HEAP32[26834] | 0)) {
   _msg_puts(62560);
   _dis_msg(HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0, 0);
  }
 } while (0);
 if (!(HEAP32[i12 >> 2] | 0)) i2 = 49; else if (_vim_strchr(HEAP32[i12 >> 2] | 0, 37) | 0) i2 = 49;
 if ((i2 | 0) == 49) if (!(HEAP32[26834] | 0)) if (_buflist_name_nr(0, i13, i14) | 0) {
  _msg_puts(62567);
  _dis_msg(HEAP32[i13 >> 2] | 0, 0);
 }
 if (!(_last_search_pat() | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[i12 >> 2] | 0) if (!(_vim_strchr(HEAP32[i12 >> 2] | 0, 47) | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[26834] | 0) {
  STACKTOP = i3;
  return;
 }
 _msg_puts(62574);
 _dis_msg(_last_search_pat() | 0, 0);
 STACKTOP = i3;
 return;
}

function _get_tabpage_arg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = (HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 447 ? 0 : 1;
 if (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) if (HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0 | 0) {
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
  HEAP32[i8 >> 2] = 0;
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 45) {
   HEAP32[i8 >> 2] = -1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  } else if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 43) {
   HEAP32[i8 >> 2] = 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 >> 2] = _getdigits(i6) | 0;
  do if (!(HEAP32[i8 >> 2] | 0)) {
   if (!(_strcmp(HEAP32[i6 >> 2] | 0, 94750) | 0)) {
    HEAP32[i4 >> 2] = _current_tab_nr(0) | 0;
    break;
   }
   if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) != 45) if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
    i1 = HEAP32[i4 >> 2] | 0;
    if ((i1 | 0) <= (_current_tab_nr(0) | 0)) break;
   }
   HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = 92453;
   i9 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i2;
   return i9 | 0;
  } else {
   do if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) HEAP32[i4 >> 2] = 1; else {
    if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) != 45) if (!((HEAP32[i4 >> 2] | 0) == 0 ? 1 : (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 0)) break;
    HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = 92453;
    i9 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i2;
    return i9 | 0;
   } while (0);
   i1 = Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i1 + (_tabpage_index(HEAP32[26886] | 0) | 0);
   if ((HEAP32[i5 >> 2] | 0) == 0 & (HEAP32[i8 >> 2] | 0) == -1) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
  } while (0);
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) {
   i8 = HEAP32[i4 >> 2] | 0;
   if ((i8 | 0) <= (_current_tab_nr(0) | 0)) {
    i9 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i2;
    return i9 | 0;
   }
  }
  HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = 92453;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) <= 0) switch (HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) {
 case 449:
  {
   HEAP32[i4 >> 2] = (_tabpage_index(HEAP32[26886] | 0) | 0) + 1;
   if ((HEAP32[i4 >> 2] | 0) <= (_current_tab_nr(0) | 0)) {
    i9 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i2;
    return i9 | 0;
   }
   HEAP32[i4 >> 2] = 1;
   i9 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i2;
   return i9 | 0;
  }
 case 447:
  {
   HEAP32[i4 >> 2] = _current_tab_nr(0) | 0;
   i9 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i2;
   return i9 | 0;
  }
 default:
  {
   HEAP32[i4 >> 2] = _tabpage_index(HEAP32[26886] | 0) | 0;
   i9 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i2;
   return i9 | 0;
  }
 }
 if (HEAP32[i5 >> 2] | 0) if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) {
  HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = 92503;
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 if (HEAP32[i5 >> 2] | 0) {
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 if ((HEAPU8[HEAP32[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] >> 2] >> 0] | 0 | 0) != 45) {
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) {
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = 92453;
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i9 | 0;
}

function _do_autocmd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 36 | 0;
 i6 = i4 + 32 | 0;
 i7 = i4 + 28 | 0;
 i8 = i4 + 24 | 0;
 i9 = i4 + 20 | 0;
 i10 = i4 + 16 | 0;
 i11 = i4 + 12 | 0;
 i12 = i4 + 8 | 0;
 i13 = i4 + 4 | 0;
 i14 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i9 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 124) {
  HEAP32[i7 >> 2] = 114072;
  HEAP32[i14 >> 2] = -3;
 } else {
  HEAP32[i14 >> 2] = _au_get_grouparg(i7) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) {
   STACKTOP = i4;
   return;
  }
 }
 HEAP32[i8 >> 2] = _find_end_event(HEAP32[i7 >> 2] | 0, (HEAP32[i14 >> 2] | 0) != -3 & 1) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i8 >> 2] = _skipwhite(HEAP32[i8 >> 2] | 0) | 0;
 do if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 124) {
  HEAP32[i8 >> 2] = 114072;
  HEAP32[i10 >> 2] = 114072;
 } else {
  HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
  while (1) {
   do if (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) {
    if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) != 9) {
     i15 = 1;
     break;
    }
    i15 = (HEAPU8[(HEAP32[i10 >> 2] | 0) + -1 >> 0] | 0) == 92;
   } else i15 = 0; while (0);
   i16 = HEAP32[i10 >> 2] | 0;
   if (!i15) break;
   HEAP32[i10 >> 2] = i16 + 1;
  }
  if (HEAP8[i16 >> 0] | 0) {
   i5 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i5 + 1;
   HEAP8[i5 >> 0] = 0;
  }
  if (_vim_strchr(HEAP32[i8 >> 2] | 0, 36) | 0) i3 = 18; else if (_vim_strchr(HEAP32[i8 >> 2] | 0, 126) | 0) i3 = 18;
  if ((i3 | 0) == 18) {
   HEAP32[i9 >> 2] = _expand_env_save(HEAP32[i8 >> 2] | 0) | 0;
   if (HEAP32[i9 >> 2] | 0) HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
  }
  HEAP32[i10 >> 2] = _skipwhite(HEAP32[i10 >> 2] | 0) | 0;
  do if (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) if (!(_strncmp(HEAP32[i10 >> 2] | 0, 55978, 6) | 0)) {
   if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 6 >> 0] | 0) != 32) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 6 >> 0] | 0) != 9) break;
   HEAP32[i13 >> 2] = 1;
   HEAP32[i10 >> 2] = _skipwhite((HEAP32[i10 >> 2] | 0) + 6 | 0) | 0;
  } while (0);
  if (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) {
   HEAP32[i10 >> 2] = _expand_sfile(HEAP32[i10 >> 2] | 0) | 0;
   if (!(HEAP32[i10 >> 2] | 0)) {
    STACKTOP = i4;
    return;
   } else {
    HEAP32[i12 >> 2] = 1;
    break;
   }
  }
 } while (0);
 if (!(HEAP32[i6 >> 2] | 0)) if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) _msg_puts_title(55985);
 HEAP32[25469] = -1;
 HEAP32[25470] = -2;
 L47 : do if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 42) i3 = 34; else if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) i3 = 34; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 124) i3 = 34; else while (1) {
  if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break L47;
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 124) break L47;
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 32) i17 = 1; else i17 = (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 9;
  if (!(i17 ^ 1)) break L47;
  i16 = _event_name2nr(HEAP32[i7 >> 2] | 0, i7) | 0;
  if (!(_do_autocmd_event(i16, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0)) break L47;
 } while (0);
 L60 : do if ((i3 | 0) == 34) {
  HEAP32[i11 >> 2] = 0;
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) >= 96) break L60;
   if (!(_do_autocmd_event(HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0)) break L60;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[i12 >> 2] | 0) _vim_free(HEAP32[i10 >> 2] | 0);
 _vim_free(HEAP32[i9 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _reg_equi_class(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 do switch (HEAP32[i3 >> 2] | 0) {
 case 197:
 case 196:
 case 195:
 case 194:
 case 193:
 case 192:
 case 65:
  {
   _regc(65);
   _regc(192);
   _regc(193);
   _regc(194);
   _regc(195);
   _regc(196);
   _regc(197);
   break;
  }
 case 66:
  {
   _regc(66);
   break;
  }
 case 199:
 case 67:
  {
   _regc(67);
   _regc(199);
   break;
  }
 case 68:
  {
   _regc(68);
   break;
  }
 case 203:
 case 202:
 case 201:
 case 200:
 case 69:
  {
   _regc(69);
   _regc(200);
   _regc(201);
   _regc(202);
   _regc(203);
   break;
  }
 case 70:
  {
   _regc(70);
   break;
  }
 case 71:
  {
   _regc(71);
   break;
  }
 case 72:
  {
   _regc(72);
   break;
  }
 case 207:
 case 206:
 case 205:
 case 204:
 case 73:
  {
   _regc(73);
   _regc(204);
   _regc(205);
   _regc(206);
   _regc(207);
   break;
  }
 case 74:
  {
   _regc(74);
   break;
  }
 case 75:
  {
   _regc(75);
   break;
  }
 case 76:
  {
   _regc(76);
   break;
  }
 case 77:
  {
   _regc(77);
   break;
  }
 case 209:
 case 78:
  {
   _regc(78);
   _regc(209);
   break;
  }
 case 216:
 case 214:
 case 213:
 case 212:
 case 211:
 case 210:
 case 79:
  {
   _regc(79);
   _regc(210);
   _regc(211);
   _regc(212);
   _regc(213);
   _regc(214);
   _regc(216);
   break;
  }
 case 7766:
 case 7764:
 case 80:
  {
   _regc(80);
   break;
  }
 case 82:
  {
   _regc(82);
   break;
  }
 case 83:
  {
   _regc(83);
   break;
  }
 case 84:
  {
   _regc(84);
   break;
  }
 case 220:
 case 219:
 case 218:
 case 217:
 case 85:
  {
   _regc(85);
   _regc(217);
   _regc(218);
   _regc(219);
   _regc(220);
   break;
  }
 case 86:
  {
   _regc(86);
   break;
  }
 case 87:
  {
   _regc(87);
   break;
  }
 case 88:
  {
   _regc(88);
   break;
  }
 case 221:
 case 89:
  {
   _regc(89);
   _regc(221);
   break;
  }
 case 90:
  {
   _regc(90);
   break;
  }
 case 229:
 case 228:
 case 227:
 case 226:
 case 225:
 case 224:
 case 97:
  {
   _regc(97);
   _regc(224);
   _regc(225);
   _regc(226);
   _regc(227);
   _regc(228);
   _regc(229);
   break;
  }
 case 98:
  {
   _regc(98);
   break;
  }
 case 231:
 case 99:
  {
   _regc(99);
   _regc(231);
   break;
  }
 case 100:
  {
   _regc(100);
   break;
  }
 case 235:
 case 234:
 case 233:
 case 232:
 case 101:
  {
   _regc(101);
   _regc(232);
   _regc(233);
   _regc(234);
   _regc(235);
   break;
  }
 case 102:
  {
   _regc(102);
   break;
  }
 case 103:
  {
   _regc(103);
   break;
  }
 case 104:
  {
   _regc(104);
   break;
  }
 case 239:
 case 238:
 case 237:
 case 236:
 case 105:
  {
   _regc(105);
   _regc(236);
   _regc(237);
   _regc(238);
   _regc(239);
   break;
  }
 case 106:
  {
   _regc(106);
   break;
  }
 case 107:
  {
   _regc(107);
   break;
  }
 case 108:
  {
   _regc(108);
   break;
  }
 case 109:
  {
   _regc(109);
   break;
  }
 case 241:
 case 110:
  {
   _regc(110);
   _regc(241);
   break;
  }
 case 248:
 case 246:
 case 245:
 case 244:
 case 243:
 case 242:
 case 111:
  {
   _regc(111);
   _regc(242);
   _regc(243);
   _regc(244);
   _regc(245);
   _regc(246);
   _regc(248);
   break;
  }
 case 112:
  {
   _regc(112);
   break;
  }
 case 114:
  {
   _regc(114);
   break;
  }
 case 115:
  {
   _regc(115);
   break;
  }
 case 116:
  {
   _regc(116);
   break;
  }
 case 252:
 case 251:
 case 250:
 case 249:
 case 117:
  {
   _regc(117);
   _regc(249);
   _regc(250);
   _regc(251);
   _regc(252);
   break;
  }
 case 118:
  {
   _regc(118);
   break;
  }
 case 119:
  {
   _regc(119);
   break;
  }
 case 120:
  {
   _regc(120);
   break;
  }
 case 255:
 case 253:
 case 121:
  {
   _regc(121);
   _regc(253);
   _regc(255);
   break;
  }
 case 122:
  {
   _regc(122);
   break;
  }
 default:
  _regc(HEAP32[i3 >> 2] | 0);
 } while (0);
 STACKTOP = i2;
 return;
}

function _setmark_pos(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if ((HEAP32[i6 >> 2] | 0) < 0) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) == 39 | (HEAP32[i6 >> 2] | 0) == 96) {
  if ((HEAP32[i7 >> 2] | 0) == ((HEAP32[26881] | 0) + 24 | 0)) {
   _setpcmark();
   i3 = HEAP32[26881] | 0;
   i2 = i3 + 308 | 0;
   i1 = i3 + 300 | 0;
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  } else {
   i1 = (HEAP32[26881] | 0) + 300 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  }
  HEAP32[i5 >> 2] = 1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i10 >> 2] = _buflist_findnr(HEAP32[i8 >> 2] | 0) | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) == 34) {
  i2 = (HEAP32[i10 >> 2] | 0) + 420 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i5 >> 2] = 1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) == 91) {
  i1 = (HEAP32[i10 >> 2] | 0) + 476 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i5 >> 2] = 1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) == 93) {
  i2 = (HEAP32[i10 >> 2] | 0) + 492 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i5 >> 2] = 1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[i6 >> 2] | 0) == 60 | (HEAP32[i6 >> 2] | 0) == 62) {
  i2 = (HEAP32[i10 >> 2] | 0) + 396 | 0;
  if ((i1 | 0) == 60) {
   i3 = HEAP32[i7 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  } else {
   i3 = i2 + 8 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  }
  if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 396 + 16 >> 2] | 0)) HEAP32[(HEAP32[i10 >> 2] | 0) + 396 + 16 >> 2] = 118;
  HEAP32[i5 >> 2] = 1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 - 97 | 0) >>> 0 < 26) {
  HEAP32[i9 >> 2] = i2 - 97;
  i1 = (HEAP32[i10 >> 2] | 0) + 188 + (HEAP32[i9 >> 2] << 3) | 0;
  i10 = HEAP32[i7 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i5 >> 2] = 1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 if ((i2 - 65 | 0) >>> 0 >= 26) if (((HEAP32[i6 >> 2] | 0) - 48 | 0) >>> 0 >= 10) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 if (((HEAP32[i6 >> 2] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i9 >> 2] = i2 - 48 + 26; else HEAP32[i9 >> 2] = i2 - 65;
 i2 = 103600 + (HEAP32[i9 >> 2] << 4) | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[103600 + (HEAP32[i9 >> 2] << 4) + 8 >> 2] = HEAP32[i8 >> 2];
 if (HEAP32[103600 + (HEAP32[i9 >> 2] << 4) + 12 >> 2] | 0) {
  _vim_free(HEAP32[103600 + (HEAP32[i9 >> 2] << 4) + 12 >> 2] | 0);
  HEAP32[103600 + (HEAP32[i9 >> 2] << 4) + 12 >> 2] = 0;
 }
 HEAP32[i5 >> 2] = 1;
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _do_execreg(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 36 | 0;
 i8 = i6 + 32 | 0;
 i9 = i6 + 28 | 0;
 i10 = i6 + 24 | 0;
 i11 = i6 + 20 | 0;
 i12 = i6 + 16 | 0;
 i13 = i6 + 12 | 0;
 i14 = i6 + 8 | 0;
 i15 = i6 + 4 | 0;
 i16 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i14 >> 2] = 1;
 do if ((HEAP32[i8 >> 2] | 0) == 64) {
  if (HEAP32[26238] | 0) {
   HEAP32[i8 >> 2] = HEAP32[26238];
   break;
  }
  _emsg(62299) | 0;
  HEAP32[i7 >> 2] = 0;
  i17 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i17 | 0;
 } while (0);
 if (!((HEAP32[i8 >> 2] | 0) == 37 | (HEAP32[i8 >> 2] | 0) == 35)) if (_valid_yank_reg(HEAP32[i8 >> 2] | 0, 0) | 0) {
  HEAP32[26238] = HEAP32[i8 >> 2];
  HEAP32[i8 >> 2] = _may_get_selection(HEAP32[i8 >> 2] | 0) | 0;
  if ((HEAP32[i8 >> 2] | 0) == 95) {
   HEAP32[i7 >> 2] = 1;
   i17 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i17 | 0;
  }
  do if ((HEAP32[i8 >> 2] | 0) == 46) {
   HEAP32[i13 >> 2] = _get_last_insert_save() | 0;
   if (HEAP32[i13 >> 2] | 0) {
    HEAP32[i14 >> 2] = _put_in_typebuf(HEAP32[i13 >> 2] | 0, 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
    _vim_free(HEAP32[i13 >> 2] | 0);
    break;
   }
   _emsg(92954) | 0;
   HEAP32[i7 >> 2] = 0;
   i17 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i17 | 0;
  } else {
   _get_yank_register(HEAP32[i8 >> 2] | 0, 0) | 0;
   if (!(HEAP32[HEAP32[26084] >> 2] | 0)) {
    HEAP32[i7 >> 2] = 0;
    i17 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i17 | 0;
   }
   HEAP32[i15 >> 2] = HEAP32[i9 >> 2] | 0 ? -1 : 0;
   _put_reedit_in_typebuf(HEAP32[i11 >> 2] | 0);
   HEAP32[i12 >> 2] = HEAP32[(HEAP32[26084] | 0) + 4 >> 2];
   while (1) {
    i4 = (HEAP32[i12 >> 2] | 0) + -1 | 0;
    HEAP32[i12 >> 2] = i4;
    if ((i4 | 0) < 0) {
     i5 = 30;
     break;
    }
    if ((HEAPU8[(HEAP32[26084] | 0) + 8 >> 0] | 0) == 1) i5 = 20; else if (HEAP32[i10 >> 2] | 0 ? 1 : (HEAP32[i12 >> 2] | 0) < ((HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0) - 1 | 0)) i5 = 20;
    if ((i5 | 0) == 20) {
     i5 = 0;
     if (!(_ins_typebuf(97581, HEAP32[i15 >> 2] | 0, 0, 1, HEAP32[i11 >> 2] | 0) | 0)) {
      i5 = 21;
      break;
     }
    }
    HEAP32[i16 >> 2] = _vim_strsave_escape_csi(HEAP32[(HEAP32[HEAP32[26084] >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0) | 0;
    if (!(HEAP32[i16 >> 2] | 0)) {
     i5 = 23;
     break;
    }
    HEAP32[i14 >> 2] = _ins_typebuf(HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0, 0, 1, HEAP32[i11 >> 2] | 0) | 0;
    _vim_free(HEAP32[i16 >> 2] | 0);
    if (!(HEAP32[i14 >> 2] | 0)) {
     i5 = 25;
     break;
    }
    if (HEAP32[i9 >> 2] | 0) if (!(_ins_typebuf(62333, HEAP32[i15 >> 2] | 0, 0, 1, HEAP32[i11 >> 2] | 0) | 0)) {
     i5 = 28;
     break;
    }
   }
   if ((i5 | 0) == 21) {
    HEAP32[i7 >> 2] = 0;
    i17 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i17 | 0;
   } else if ((i5 | 0) == 23) {
    HEAP32[i7 >> 2] = 0;
    i17 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i17 | 0;
   } else if ((i5 | 0) == 25) {
    HEAP32[i7 >> 2] = 0;
    i17 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i17 | 0;
   } else if ((i5 | 0) == 28) {
    HEAP32[i7 >> 2] = 0;
    i17 = HEAP32[i7 >> 2] | 0;
    STACKTOP = i6;
    return i17 | 0;
   } else if ((i5 | 0) == 30) {
    i4 = HEAP32[i8 >> 2] | 0;
    HEAP32[26801] = (i4 | 0) == 0 ? 34 : i4 | 0;
    break;
   }
  } while (0);
  HEAP32[i7 >> 2] = HEAP32[i14 >> 2];
  i17 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i17 | 0;
 }
 _emsg_invreg(HEAP32[i8 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 i17 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i17 | 0;
}

function _msg_prt_line(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 36 | 0;
 i6 = i4 + 32 | 0;
 i7 = i4 + 28 | 0;
 i8 = i4 + 24 | 0;
 i9 = i4 + 20 | 0;
 i10 = i4 + 16 | 0;
 i11 = i4 + 12 | 0;
 i12 = i4 + 8 | 0;
 i13 = i4 + 4 | 0;
 i14 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 if (HEAP32[(HEAP32[26881] | 0) + 200 >> 2] | 0) HEAP32[i6 >> 2] = 1;
 L4 : do if ((HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[26864] | 0) != 0) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i14 >> 2] = i2 + (_strlen(HEAP32[i5 >> 2] | 0) | 0);
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) break L4;
   if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + -1 >> 0] | 0) != 32) if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + -1 >> 0] | 0) != 9) break L4;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
  }
 } while (0);
 if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) if (!((HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[10184] | 0) != 0)) _msg_putchar(32);
 while (1) {
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
   i3 = 37;
   break;
  }
  do if ((HEAP32[i9 >> 2] | 0) > 0) {
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
   if (HEAP32[i10 >> 2] | 0) {
    HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
    break;
   } else {
    i2 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i2 + 1;
    HEAP32[i7 >> 2] = HEAPU8[i2 >> 0];
    break;
   }
  } else {
   HEAP32[i13 >> 2] = 0;
   i2 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i2 + 1;
   HEAP32[i7 >> 2] = HEAPU8[i2 >> 0];
   if ((HEAP32[i7 >> 2] | 0) == 9) if ((HEAP32[i6 >> 2] | 0) == 0 | (HEAP32[26862] | 0) != 0) {
    i2 = HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0;
    HEAP32[i9 >> 2] = (i2 | 0) - ((HEAP32[i8 >> 2] | 0) % (i2 | 0) | 0) - 1;
    if (HEAP32[i6 >> 2] | 0) {
     HEAP32[i7 >> 2] = HEAP32[26862];
     HEAP32[i10 >> 2] = HEAP32[26863];
     HEAP32[i13 >> 2] = HEAP32[27048];
     break;
    } else {
     HEAP32[i7 >> 2] = 32;
     HEAP32[i10 >> 2] = 32;
     break;
    }
   }
   if ((HEAP32[i7 >> 2] | 0) == 160 & (HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[26860] | 0) != 0) {
    HEAP32[i7 >> 2] = HEAP32[26860];
    HEAP32[i13 >> 2] = HEAP32[27048];
    break;
   }
   if ((HEAP32[i7 >> 2] | 0) == 0 & (HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[10184] | 0) != 0) {
    HEAP32[i11 >> 2] = 114072;
    HEAP32[i10 >> 2] = 0;
    HEAP32[i9 >> 2] = 1;
    HEAP32[i7 >> 2] = HEAP32[10184];
    HEAP32[i13 >> 2] = HEAP32[27050];
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
    break;
   }
   if (HEAP32[i7 >> 2] | 0) {
    i2 = _byte2cells(HEAP32[i7 >> 2] | 0) | 0;
    HEAP32[i12 >> 2] = i2;
    if ((i2 | 0) > 1) {
     HEAP32[i9 >> 2] = (HEAP32[i12 >> 2] | 0) - 1;
     HEAP32[i11 >> 2] = _transchar(HEAP32[i7 >> 2] | 0) | 0;
     HEAP32[i10 >> 2] = 0;
     i2 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i2 + 1;
     HEAP32[i7 >> 2] = HEAPU8[i2 >> 0];
     HEAP32[i13 >> 2] = HEAP32[27048];
     break;
    }
   }
   if ((HEAP32[i7 >> 2] | 0) == 32 & (HEAP32[i14 >> 2] | 0) != 0) if ((HEAP32[i5 >> 2] | 0) >>> 0 > (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i7 >> 2] = HEAP32[26864];
    HEAP32[i13 >> 2] = HEAP32[27048];
    break;
   }
   if ((HEAP32[i7 >> 2] | 0) == 32 & (HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[26861] | 0) != 0) {
    HEAP32[i7 >> 2] = HEAP32[26861];
    HEAP32[i13 >> 2] = HEAP32[27048];
   }
  } while (0);
  if (!(HEAP32[i7 >> 2] | 0)) {
   i3 = 37;
   break;
  }
  _msg_putchar_attr(HEAP32[i7 >> 2] | 0, HEAP32[i13 >> 2] | 0);
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 37) {
  _msg_clr_eos();
  STACKTOP = i4;
  return;
 }
}

function ___get_locale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4;
 do if (!(HEAP8[i2 >> 0] | 0)) {
  i7 = _getenv(100488) | 0;
  if (i7 | 0) if (HEAP8[i7 >> 0] | 0) {
   i8 = i7;
   break;
  }
  i7 = _getenv(100495 + (i1 * 12 | 0) | 0) | 0;
  if (i7 | 0) if (HEAP8[i7 >> 0] | 0) {
   i8 = i7;
   break;
  }
  i7 = _getenv(100567) | 0;
  if (i7 | 0) if (HEAP8[i7 >> 0] | 0) {
   i8 = i7;
   break;
  }
  i8 = 100572;
 } else i8 = i2; while (0);
 i2 = 0;
 L13 : while (1) {
  switch (HEAP8[i8 + i2 >> 0] | 0) {
  case 47:
  case 0:
   {
    i9 = i2;
    break L13;
    break;
   }
  default:
   {}
  }
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= 15) {
   i9 = 15;
   break;
  }
 }
 i2 = HEAP8[i8 >> 0] | 0;
 if (i2 << 24 >> 24 == 46) {
  i10 = 100572;
  i3 = 15;
 } else if (!(HEAP8[i8 + i9 >> 0] | 0)) if (i2 << 24 >> 24 == 67) {
  i10 = i8;
  i3 = 15;
 } else {
  i11 = i8;
  i3 = 16;
 } else {
  i10 = 100572;
  i3 = 15;
 }
 if ((i3 | 0) == 15) if (!(HEAP8[i10 + 1 >> 0] | 0)) {
  i12 = i10;
  i3 = 18;
 } else {
  i11 = i10;
  i3 = 16;
 }
 L22 : do if ((i3 | 0) == 16) if (!(_strcmp(i11, 100572) | 0)) {
  i12 = i11;
  i3 = 18;
 } else if (!(_strcmp(i11, 100580) | 0)) {
  i12 = i11;
  i3 = 18;
 } else {
  i10 = HEAP32[27379] | 0;
  if (i10 | 0) {
   i8 = i10;
   do {
    if (!(_strcmp(i11, i8 + 8 | 0) | 0)) {
     i13 = i8;
     break L22;
    }
    i8 = HEAP32[i8 + 24 >> 2] | 0;
   } while ((i8 | 0) != 0);
  }
  ___lock(109520);
  i8 = HEAP32[27379] | 0;
  L32 : do if (i8 | 0) {
   i10 = i8;
   while (1) {
    if (!(_strcmp(i11, i10 + 8 | 0) | 0)) break;
    i2 = HEAP32[i10 + 24 >> 2] | 0;
    if (!i2) break L32; else i10 = i2;
   }
   ___unlock(109520);
   i13 = i10;
   break L22;
  } while (0);
  L39 : do if (!(HEAP32[27364] | 0)) {
   i8 = _getenv(100586) | 0;
   if (!i8) i3 = 41; else if (!(HEAP8[i8 >> 0] | 0)) i3 = 41; else {
    i2 = 254 - i9 | 0;
    i7 = i9 + 1 | 0;
    i14 = i8;
    while (1) {
     i8 = ___strchrnul(i14, 58) | 0;
     i15 = HEAP8[i8 >> 0] | 0;
     i16 = i8 - i14 + ((i15 << 24 >> 24 != 0) << 31 >> 31) | 0;
     if (i16 >>> 0 < i2 >>> 0) {
      _memcpy(i5 | 0, i14 | 0, i16 | 0) | 0;
      i17 = i5 + i16 | 0;
      HEAP8[i17 >> 0] = 47;
      _memcpy(i17 + 1 | 0, i11 | 0, i9 | 0) | 0;
      HEAP8[i5 + (i7 + i16) >> 0] = 0;
      i18 = ___map_file(i5 | 0, i6 | 0) | 0;
      if (i18 | 0) break;
      i19 = HEAP8[i8 >> 0] | 0;
     } else i19 = i15;
     i14 = i8 + (i19 << 24 >> 24 != 0 & 1) | 0;
     if (!(HEAP8[i14 >> 0] | 0)) {
      i3 = 41;
      break L39;
     }
    }
    i14 = _malloc(28) | 0;
    if (!i14) {
     ___munmap(i18, HEAP32[i6 >> 2] | 0) | 0;
     i3 = 41;
     break;
    } else {
     HEAP32[i14 >> 2] = i18;
     HEAP32[i14 + 4 >> 2] = HEAP32[i6 >> 2];
     i7 = i14 + 8 | 0;
     _memcpy(i7 | 0, i11 | 0, i9 | 0) | 0;
     HEAP8[i7 + i9 >> 0] = 0;
     HEAP32[i14 + 24 >> 2] = HEAP32[27379];
     HEAP32[27379] = i14;
     i20 = i14;
     break;
    }
   }
  } else i3 = 41; while (0);
  if ((i3 | 0) == 41) {
   i14 = _malloc(28) | 0;
   if (!i14) i20 = i14; else {
    HEAP32[i14 >> 2] = HEAP32[10199];
    HEAP32[i14 + 4 >> 2] = HEAP32[10200];
    i7 = i14 + 8 | 0;
    _memcpy(i7 | 0, i11 | 0, i9 | 0) | 0;
    HEAP8[i7 + i9 >> 0] = 0;
    HEAP32[i14 + 24 >> 2] = HEAP32[27379];
    HEAP32[27379] = i14;
    i20 = i14;
   }
  }
  ___unlock(109520);
  i13 = (i1 | 0) == 0 & (i20 | 0) == 0 ? 40796 : i20;
 } while (0);
 do if ((i3 | 0) == 18) {
  if (!i1) if ((HEAP8[i12 + 1 >> 0] | 0) == 46) {
   i13 = 40796;
   break;
  }
  i13 = 0;
 } while (0);
 STACKTOP = i4;
 return i13 | 0;
}

function _gen_expand_wildcards(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 60 | 0;
 i9 = i7 + 56 | 0;
 i10 = i7 + 52 | 0;
 i11 = i7 + 48 | 0;
 i12 = i7 + 44 | 0;
 i13 = i7 + 40 | 0;
 i14 = i7 + 36 | 0;
 i15 = i7 + 16 | 0;
 i16 = i7 + 12 | 0;
 i17 = i7 + 8 | 0;
 i18 = i7 + 4 | 0;
 i19 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i18 >> 2] = 1;
 if (HEAP32[26055] | 0) {
  HEAP32[i8 >> 2] = _mch_expand_wildcards(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 }
 HEAP32[i14 >> 2] = 0;
 while (1) {
  if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  if (_has_special_wildchar(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) | 0) {
   i6 = 6;
   break;
  }
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 }
 if ((i6 | 0) == 6) {
  HEAP32[i8 >> 2] = _mch_expand_wildcards(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 }
 HEAP32[26055] = 1;
 _ga_init2(i15, 4, 30);
 HEAP32[i14 >> 2] = 0;
 L13 : while (1) {
  if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  HEAP32[i17 >> 2] = -1;
  HEAP32[i16 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2];
  if (_has_env_var(HEAP32[i16 >> 2] | 0) | 0) i6 = 12; else if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) == 126) i6 = 12;
  do if ((i6 | 0) == 12) {
   i6 = 0;
   HEAP32[i16 >> 2] = _expand_env_save_opt(HEAP32[i16 >> 2] | 0, 1) | 0;
   if (!(HEAP32[i16 >> 2] | 0)) {
    HEAP32[i16 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2];
    break;
   }
   if (_has_env_var(HEAP32[i16 >> 2] | 0) | 0) {
    i6 = 16;
    break L13;
   }
   if ((HEAPU8[HEAP32[i16 >> 2] >> 0] | 0) == 126) {
    i6 = 16;
    break L13;
   }
  } while (0);
  if (_mch_has_exp_wildcard(HEAP32[i16 >> 2] | 0) | 0) HEAP32[i17 >> 2] = _mch_expandpath(i15, HEAP32[i16 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
  if ((HEAP32[i17 >> 2] | 0) == -1) i6 = 22; else if (!(HEAP32[i17 >> 2] | 0)) if (HEAP32[i13 >> 2] & 4 | 0) i6 = 22;
  if ((i6 | 0) == 22) {
   i6 = 0;
   HEAP32[i19 >> 2] = _backslash_halve_save(HEAP32[i16 >> 2] | 0) | 0;
   i5 = HEAP32[i19 >> 2] | 0;
   i4 = HEAP32[i13 >> 2] | 0;
   if (HEAP32[i13 >> 2] & 4 | 0) _addfile(i15, i5, i4 | 1 | 2); else _addfile(i15, i5, i4);
   _vim_free(HEAP32[i19 >> 2] | 0);
  }
  if ((HEAP32[i16 >> 2] | 0) != (HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0)) _vim_free(HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 }
 if ((i6 | 0) == 16) {
  _vim_free(HEAP32[i16 >> 2] | 0);
  _ga_clear_strings(i15);
  HEAP32[i14 >> 2] = _mch_expand_wildcards(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 2048) | 0;
  HEAP32[26055] = 0;
  HEAP32[i8 >> 2] = HEAP32[i14 >> 2];
  i20 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i20 | 0;
 }
 HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i15 >> 2];
 i11 = HEAP32[i15 + 16 >> 2] | 0;
 HEAP32[HEAP32[i12 >> 2] >> 2] = i11 | 0 ? i11 | 0 : 114072;
 HEAP32[26055] = 0;
 if (HEAP32[i13 >> 2] & 32768 | 0) i6 = 31; else if (HEAP32[i15 + 16 >> 2] | 0) i6 = 31; else i21 = 0;
 if ((i6 | 0) == 31) i21 = HEAP32[i18 >> 2] | 0;
 HEAP32[i8 >> 2] = i21;
 i20 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i20 | 0;
}

function _copy_indent(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 44 | 0;
 i6 = i4 + 40 | 0;
 i7 = i4 + 36 | 0;
 i8 = i4 + 32 | 0;
 i9 = i4 + 28 | 0;
 i10 = i4 + 24 | 0;
 i11 = i4 + 20 | 0;
 i12 = i4 + 16 | 0;
 i13 = i4 + 12 | 0;
 i14 = i4 + 8 | 0;
 i15 = i4 + 4 | 0;
 i16 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i16 >> 2] = 1;
 while (1) {
  if ((HEAP32[i16 >> 2] | 0) > 2) {
   i3 = 34;
   break;
  }
  HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) <= 0) break;
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) != 32) if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) != 9) break;
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 9) {
    i2 = HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0;
    HEAP32[i14 >> 2] = (i2 | 0) - ((HEAP32[i15 >> 2] | 0) % (i2 | 0) | 0);
    if ((HEAP32[i11 >> 2] | 0) < (HEAP32[i14 >> 2] | 0)) break;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i14 >> 2] | 0);
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
   } else {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
   }
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   if (HEAP32[i8 >> 2] | 0) {
    i2 = HEAP8[HEAP32[i10 >> 2] >> 0] | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i2;
   }
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  i2 = HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0;
  HEAP32[i14 >> 2] = (i2 | 0) - ((HEAP32[i15 >> 2] | 0) % (i2 | 0) | 0);
  if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) if (!(HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0)) {
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i14 >> 2] | 0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   if (HEAP32[i8 >> 2] | 0) {
    i2 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = 9;
   }
  }
  L24 : do if (!(HEAP32[(HEAP32[26773] | 0) + 608 >> 2] | 0)) while (1) {
   if ((HEAP32[i11 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0)) break L24;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0);
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   if (HEAP32[i8 >> 2] | 0) {
    i2 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = 9;
   }
  } while (0);
  while (1) {
   if ((HEAP32[i11 >> 2] | 0) <= 0) break;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   if (HEAP32[i8 >> 2] | 0) {
    i2 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = 32;
   }
  }
  if (!(HEAP32[i8 >> 2] | 0)) {
   HEAP32[i13 >> 2] = (_strlen(_ml_get_curline() | 0) | 0) + 1;
   HEAP32[i9 >> 2] = _alloc((HEAP32[i12 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0) | 0;
   if (!(HEAP32[i9 >> 2] | 0)) {
    i3 = 31;
    break;
   }
   HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
  }
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 31) {
  HEAP32[i5 >> 2] = 0;
  i17 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i17 | 0;
 } else if ((i3 | 0) == 34) {
  i3 = HEAP32[i8 >> 2] | 0;
  i8 = _ml_get_curline() | 0;
  _memmove(i3 | 0, i8 | 0, HEAP32[i13 >> 2] | 0) | 0;
  _ml_replace(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0;
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i5 >> 2] = 1;
  i17 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i17 | 0;
 }
 return 0;
}

function _nv_put(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 28 | 0;
 i5 = i3 + 24 | 0;
 i6 = i3 + 20 | 0;
 i7 = i3 + 16 | 0;
 i8 = i3 + 12 | 0;
 i9 = i3 + 8 | 0;
 i10 = i3 + 4 | 0;
 i11 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) {
  _clearopbeep(HEAP32[i1 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i1 + 8 >> 2] | 0) == 80) i12 = 1; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 103) i12 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) == 80; else i12 = 0;
 HEAP32[i10 >> 2] = i12 ? -1 : 1;
 _prep_redo_cmd(HEAP32[i4 >> 2] | 0);
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 103) HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 2;
 if (HEAP32[26788] | 0) {
  HEAP32[i9 >> 2] = 1;
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2];
  _adjust_clip_reg(i5);
  if ((HEAP32[i5 >> 2] | 0) == 0 | (HEAP32[i5 >> 2] | 0) == 34) i2 = 13; else if ((HEAP32[i5 >> 2] | 0) == 45 ? 1 : ((HEAP32[i5 >> 2] | 0) - 48 | 0) >>> 0 < 10) i2 = 13; else if (HEAP32[26762] | 0) if ((HEAP32[i5 >> 2] | 0) == 42 | (HEAP32[i5 >> 2] | 0) == 43) i2 = 13;
  if ((i2 | 0) == 13) HEAP32[i6 >> 2] = _get_register(HEAP32[i5 >> 2] | 0, 1) | 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = 100;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = 0;
  HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2] = 0;
  _nv_operator(HEAP32[i4 >> 2] | 0);
  _do_pending_operator(HEAP32[i4 >> 2] | 0, 0, 0);
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1;
  HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[i5 >> 2];
  if (HEAP32[i6 >> 2] | 0) {
   HEAP32[i7 >> 2] = _get_register(HEAP32[i5 >> 2] | 0, 0) | 0;
   _put_register(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  }
  if ((HEAP32[10179] | 0) == 86) HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 8; else if ((HEAP32[10179] | 0) == 118) HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 16;
  if ((HEAP32[10179] | 0) == 22 & (HEAP32[i10 >> 2] | 0) == 1) HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 32;
  HEAP32[i10 >> 2] = -1;
  if ((HEAP32[10179] | 0) != 86) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] | 0)) i2 = 26; else i2 = 24; else i2 = 24;
  if ((i2 | 0) == 24) if ((HEAP32[10179] | 0) == 86) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 476 >> 2] | 0)) i2 = 26;
  if ((i2 | 0) == 26) HEAP32[i10 >> 2] = 1;
  HEAP32[26788] = 1;
 }
 _do_put(HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, HEAP32[i11 >> 2] | 0);
 if (HEAP32[i7 >> 2] | 0) _put_register(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 if (HEAP32[i9 >> 2] | 0) {
  i9 = HEAP32[26773] | 0;
  i7 = i9 + 396 | 0;
  i5 = i9 + 476 | 0;
  HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  i5 = HEAP32[26773] | 0;
  i7 = i5 + 396 + 8 | 0;
  i9 = i5 + 492 | 0;
  HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  if ((HEAPU8[HEAP32[26975] >> 0] | 0) == 101) _inc((HEAP32[26773] | 0) + 396 + 8 | 0) | 0;
 }
 if (HEAP32[i8 >> 2] | 0) if (!(HEAPU8[(_ml_get(HEAP32[HEAP32[26773] >> 2] | 0) | 0) >> 0] | 0)) {
  _ml_delete(HEAP32[HEAP32[26773] >> 2] | 0, 1) | 0;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
   _coladvance(2147483647) | 0;
  }
 }
 _auto_format(0, 1);
 STACKTOP = i3;
 return;
}

function _op_tilde(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i2;
 i4 = i2 + 56 | 0;
 i5 = i2 + 48 | 0;
 i6 = i2 + 16 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 if (!(_u_save((HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 64 >> 2] | 0) {
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) break;
   _block_prep(HEAP32[i4 >> 2] | 0, i6, HEAP32[i5 >> 2] | 0, 0);
   HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 16 >> 2];
   HEAP32[i8 >> 2] = _swapchars(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, i5, HEAP32[i6 + 8 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | HEAP32[i8 >> 2];
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
  if (HEAP32[i7 >> 2] | 0) {
   i8 = HEAP32[i4 >> 2] | 0;
   _changed_lines(HEAP32[i8 + 28 >> 2] | 0, 0, (HEAP32[i8 + 36 >> 2] | 0) + 1 | 0, 0);
  }
 } else {
  i8 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 1) {
   HEAP32[i8 + 28 + 4 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   i6 = _strlen(_ml_get(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) | 0) | 0;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 36 + 4 >> 2] = i6;
   if (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 + 4 >> 2] | 0) {
    i6 = (HEAP32[i4 >> 2] | 0) + 36 + 4 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
   }
  } else if (!(HEAP32[i8 + 20 >> 2] | 0)) _dec((HEAP32[i4 >> 2] | 0) + 36 | 0) | 0;
  L18 : do if ((HEAP32[i5 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) HEAP32[i7 >> 2] = _swapchars(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, i5, (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 + 4 >> 2] | 0) - (HEAP32[i5 + 4 >> 2] | 0) + 1 | 0) | 0; else while (1) {
   i8 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
   if ((HEAP32[i5 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) i9 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 + 4 >> 2] | 0) + 1 | 0; else i9 = _strlen(_ml_get_pos(i5) | 0) | 0;
   i6 = _swapchars(i8, i5, i9) | 0;
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | i6;
   i6 = (HEAP32[i4 >> 2] | 0) + 36 | 0;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
    if ((HEAP32[i6 >> 2] | 0) < (HEAP32[i5 >> 2] | 0)) break L18;
   } else if ((HEAP32[i6 + 4 >> 2] | 0) < (HEAP32[i5 + 4 >> 2] | 0)) break L18;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 36 + 4 >> 2] | 0) == (HEAP32[i5 + 4 >> 2] | 0)) break L18;
   if ((_inc(i5) | 0) == -1) break L18;
  } while (0);
  if (HEAP32[i7 >> 2] | 0) {
   i5 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
   i9 = HEAP32[i4 >> 2] | 0;
   _changed_lines(HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, (HEAP32[i9 + 36 >> 2] | 0) + 1 | 0, 0);
  }
 }
 if (!(HEAP32[i7 >> 2] | 0)) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 60 >> 2] | 0) _redraw_curbuf_later(20);
 i7 = (HEAP32[26773] | 0) + 476 | 0;
 i9 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 i9 = (HEAP32[26773] | 0) + 492 | 0;
 i7 = (HEAP32[i4 >> 2] | 0) + 36 | 0;
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] | 0) <= (HEAP32[26967] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] | 0) == 1) {
  _msg(62462) | 0;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2];
  _smsg(62477, i3) | 0;
  STACKTOP = i2;
  return;
 }
}

function _gui_redraw_block(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i6 + 56 | 0;
 i8 = i6 + 52 | 0;
 i9 = i6 + 48 | 0;
 i10 = i6 + 44 | 0;
 i11 = i6 + 40 | 0;
 i12 = i6 + 36 | 0;
 i13 = i6 + 32 | 0;
 i14 = i6 + 28 | 0;
 i15 = i6 + 24 | 0;
 i16 = i6 + 20 | 0;
 i17 = i6 + 60 | 0;
 i18 = i6 + 16 | 0;
 i19 = i6 + 12 | 0;
 i20 = i6 + 8 | 0;
 i21 = i6 + 4 | 0;
 i22 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i22 >> 2] = 0;
 if ((HEAP32[26704] | 0) == 0 | (HEAP32[26691] | 0) == 0) {
  HEAP32[i7 >> 2] = HEAP32[i22 >> 2];
  i23 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i23 | 0;
 }
 HEAP32[i9 >> 2] = _check_col(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = _check_col(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = _check_row(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = _check_row(HEAP32[i10 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = HEAP32[26636];
 HEAP32[i14 >> 2] = HEAP32[26635];
 HEAP32[i15 >> 2] = HEAP32[26646];
 HEAP32[26636] = HEAP32[i8 >> 2];
 while (1) {
  if ((HEAP32[26636] | 0) > (HEAP32[i10 >> 2] | 0)) break;
  HEAP32[26635] = HEAP32[i9 >> 2];
  HEAP32[i16 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[26636] << 2) >> 2] | 0) + (HEAP32[26635] | 0);
  HEAP32[i19 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) + 1;
  HEAP32[i20 >> 2] = 0;
  while (1) {
   if ((HEAP32[i20 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
   if ((HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[i16 >> 2] | 0) - 1 - (HEAP32[i20 >> 2] | 0) << 1) >> 1] | 0 | 0) != (HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i16 >> 2] << 1) >> 1] | 0 | 0)) break;
   if ((HEAPU8[(HEAP32[26691] | 0) + ((HEAP32[i16 >> 2] | 0) - 1 - (HEAP32[i20 >> 2] | 0)) >> 0] | 0 | 0) == 32) break;
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
  }
  if ((HEAP32[i9 >> 2] | 0) > 0) if ((HEAP32[i20 >> 2] | 0) == 0 ? (HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[i16 >> 2] | 0) - 1 << 1) >> 1] | 0 | 0) != 0 : 0) i24 = (HEAPU8[(HEAP32[26691] | 0) + ((HEAP32[i16 >> 2] | 0) - 1) >> 0] | 0 | 0) != 32; else i24 = 0; else i24 = 0;
  HEAP32[i22 >> 2] = i24 & 1;
  while (1) {
   if ((HEAP32[i19 >> 2] | 0) <= 0) break;
   HEAP16[i17 >> 1] = HEAP16[(HEAP32[26692] | 0) + (HEAP32[i16 >> 2] << 1) >> 1] | 0;
   HEAP32[26646] = HEAPU16[i17 >> 1];
   HEAP32[i18 >> 2] = 0;
   while (1) {
    if ((HEAP32[i18 >> 2] | 0) >= (HEAP32[i19 >> 2] | 0)) break;
    if ((HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[i16 >> 2] | 0) + (HEAP32[i18 >> 2] | 0) << 1) >> 1] | 0 | 0) != (HEAPU16[i17 >> 1] | 0 | 0)) break;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + 1;
   }
   HEAP32[i21 >> 2] = _gui_outstr_nowrap((HEAP32[26691] | 0) + (HEAP32[i16 >> 2] | 0) | 0, HEAP32[i18 >> 2] | 0, HEAP32[i12 >> 2] | 0, 0, 0, HEAP32[i20 >> 2] | 0) | 0;
   if (!(HEAP32[i21 >> 2] | 0)) {
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i20 >> 2] | 0);
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (HEAP32[i20 >> 2] | 0);
    HEAP32[26635] = (HEAP32[26635] | 0) - (HEAP32[i20 >> 2] | 0);
   } else {
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i18 >> 2] | 0);
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) - (HEAP32[i18 >> 2] | 0);
   }
   HEAP32[i20 >> 2] = 0;
  }
  HEAP32[26636] = (HEAP32[26636] | 0) + 1;
 }
 HEAP32[26636] = HEAP32[i13 >> 2];
 HEAP32[26635] = HEAP32[i14 >> 2];
 HEAP32[26646] = HEAP32[i15 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i22 >> 2];
 i23 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i23 | 0;
}

function _frame_new_height(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 24 | 0;
 i8 = i6 + 20 | 0;
 i9 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i12 = i6 + 4 | 0;
 i13 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 i4 = HEAP32[i7 >> 2] | 0;
 L1 : do if (HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] | 0) _win_new_height(HEAP32[i4 + 36 >> 2] | 0, (HEAP32[i8 >> 2] | 0) - (HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] | 0) + 92 >> 2] | 0) - 0 | 0); else {
  if ((HEAP8[i4 >> 0] | 0) == 1) while (1) {
   HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2];
   while (1) {
    if (!(HEAP32[i11 >> 2] | 0)) break;
    _frame_new_height(HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
    i14 = HEAP32[i11 >> 2] | 0;
    if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) > (HEAP32[i8 >> 2] | 0)) {
     i5 = 8;
     break;
    }
    HEAP32[i11 >> 2] = HEAP32[i14 + 24 >> 2];
   }
   if ((i5 | 0) == 8) {
    i5 = 0;
    HEAP32[i8 >> 2] = HEAP32[i14 + 12 >> 2];
   }
   if (!(HEAP32[i11 >> 2] | 0)) break L1;
  }
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2];
  L16 : do if (HEAP32[i10 >> 2] | 0) {
   do {
    if (!(_frame_fixed_height(HEAP32[i11 >> 2] | 0) | 0)) break L16;
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2];
   } while ((HEAP32[i11 >> 2] | 0) != 0);
   STACKTOP = i6;
   return;
  } while (0);
  L24 : do if (!(HEAP32[i9 >> 2] | 0)) {
   while (1) {
    if (!(HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0)) break;
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2];
   }
   if (HEAP32[i10 >> 2] | 0) while (1) {
    if (!(_frame_fixed_height(HEAP32[i11 >> 2] | 0) | 0)) break L24;
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2];
   }
  } while (0);
  HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0);
  if ((HEAP32[i12 >> 2] | 0) >= 0) {
   if ((HEAP32[i12 >> 2] | 0) <= 0) break;
   i3 = HEAP32[i11 >> 2] | 0;
   _frame_new_height(i3 | 0, (HEAP32[i3 + 12 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
   break;
  }
  while (1) {
   if (!(HEAP32[i11 >> 2] | 0)) break L1;
   HEAP32[i13 >> 2] = _frame_minheight(HEAP32[i11 >> 2] | 0, 0) | 0;
   i15 = HEAP32[i11 >> 2] | 0;
   if (((HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0) >= (HEAP32[i13 >> 2] | 0)) break;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + ((HEAP32[i15 + 12 >> 2] | 0) - (HEAP32[i13 >> 2] | 0));
   _frame_new_height(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
   L43 : do if (HEAP32[i9 >> 2] | 0) do {
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2];
    if (!((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) != 0)) break L43;
   } while ((_frame_fixed_height(HEAP32[i11 >> 2] | 0) | 0) != 0); else do {
    HEAP32[i11 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2];
    if (!((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) != 0)) break L43;
   } while ((_frame_fixed_height(HEAP32[i11 >> 2] | 0) | 0) != 0); while (0);
   if (!(HEAP32[i11 >> 2] | 0)) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
  }
  _frame_new_height(i15, (HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 } while (0);
 HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i6;
 return;
}

function _ml_flush_line(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i2 + 48 | 0;
 i4 = i2 + 44 | 0;
 i5 = i2 + 40 | 0;
 i6 = i2 + 36 | 0;
 i7 = i2 + 32 | 0;
 i8 = i2 + 28 | 0;
 i9 = i2 + 24 | 0;
 i10 = i2 + 20 | 0;
 i11 = i2 + 16 | 0;
 i12 = i2 + 12 | 0;
 i13 = i2 + 8 | 0;
 i14 = i2 + 4 | 0;
 i15 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 2 | 0) {
  if (HEAP32[26048] | 0) {
   STACKTOP = i2;
   return;
  }
  HEAP32[26048] = 1;
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2];
  HEAP32[i4 >> 2] = _ml_find_line(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0, 19) | 0;
  do if (!(HEAP32[i4 >> 2] | 0)) _iemsgn(59484, HEAP32[i6 >> 2] | 0); else {
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2];
   HEAP32[i12 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0);
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i12 >> 2] << 2) >> 2] & 2147483647;
   HEAP32[i8 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
   i1 = HEAP32[i5 >> 2] | 0;
   if (!(HEAP32[i12 >> 2] | 0)) HEAP32[i10 >> 2] = (HEAP32[i1 + 12 >> 2] | 0) - (HEAP32[i13 >> 2] | 0); else HEAP32[i10 >> 2] = (HEAP32[i1 + 20 + ((HEAP32[i12 >> 2] | 0) - 1 << 2) >> 2] & 2147483647) - (HEAP32[i13 >> 2] | 0);
   HEAP32[i9 >> 2] = (_strlen(HEAP32[i7 >> 2] | 0) | 0) + 1;
   HEAP32[i11 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i10 >> 2] | 0);
   i1 = HEAP32[i3 >> 2] | 0;
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[i11 >> 2] | 0)) {
    _ml_append_int(i1, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i12 >> 2] << 2) >> 2] & -2147483648) | 0;
    _ml_delete_int(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0;
    break;
   }
   HEAP32[i14 >> 2] = (HEAP32[i1 + 40 >> 2] | 0) - (HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) + 1;
   L22 : do if (HEAP32[i11 >> 2] | 0) if ((HEAP32[i12 >> 2] | 0) < ((HEAP32[i14 >> 2] | 0) - 1 | 0)) {
    i1 = HEAP32[i5 >> 2] | 0;
    i1 = (HEAP32[i5 >> 2] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) | 0;
    i16 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
    _memmove(i1 + (0 - (HEAP32[i11 >> 2] | 0)) | 0, i1 | 0, (HEAP32[i13 >> 2] | 0) - i16 | 0) | 0;
    HEAP32[i15 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) break L22;
     i16 = (HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i15 >> 2] << 2) | 0;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    }
   } while (0);
   i16 = (HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i12 >> 2] << 2) | 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
   i16 = (HEAP32[i5 >> 2] | 0) + 4 | 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
   i16 = (HEAP32[i5 >> 2] | 0) + 8 | 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
   _memmove((HEAP32[i8 >> 2] | 0) + (0 - (HEAP32[i11 >> 2] | 0)) | 0, HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   i16 = (HEAP32[i3 >> 2] | 0) + 8 | 0;
   HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 12;
  } while (0);
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[26048] = 0;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _ExpandFromContext(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 36 | 0;
 i8 = i6 + 32 | 0;
 i9 = i6 + 28 | 0;
 i10 = i6 + 24 | 0;
 i11 = i6 + 20 | 0;
 i12 = i6 + 16 | 0;
 i13 = i6 + 12 | 0;
 i14 = i6 + 8 | 0;
 i15 = i6 + 4 | 0;
 i16 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i14 >> 2] = 1;
 if (HEAP32[i12 >> 2] & 1 | 0) HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 4;
 if (HEAP32[i12 >> 2] & 16 | 0) HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 8;
 if (HEAP32[i12 >> 2] & 32 | 0) HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 16;
 if (HEAP32[i12 >> 2] & 64 | 0) HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 32;
 if (HEAP32[i12 >> 2] & 512 | 0) HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 4096;
 if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) != 2) if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) != 3) if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) != 38) {
  HEAP32[HEAP32[i11 >> 2] >> 2] = 114072;
  HEAP32[HEAP32[i10 >> 2] >> 2] = 0;
  if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) != 8) {
   HEAP32[i7 >> 2] = 0;
   i17 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i17 | 0;
  }
  if ((_find_help_tags((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 0 ? 94752 : HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0) | 0) == 1) {
   HEAP32[i7 >> 2] = 1;
   i17 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i17 | 0;
  } else {
   HEAP32[i7 >> 2] = 0;
   i17 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i17 | 0;
  }
 }
 HEAP32[i15 >> 2] = 0;
 L30 : do if (HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0) {
  HEAP32[i15 >> 2] = 1;
  HEAP32[i9 >> 2] = _vim_strsave(HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i16 >> 2] = 0;
  while (1) {
   if (!(HEAP8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0)) break L30;
   if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0) == 92) {
    if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0) == 2) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + 1) >> 0] | 0) == 92) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + 2) >> 0] | 0) == 92) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + 3) >> 0] | 0) == 32) {
     i5 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) | 0;
     i4 = i5 | 0;
     i3 = i5 + 3 | 0;
     _memmove(i4 | 0, i3 | 0, (_strlen((HEAP32[i9 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) + 3 | 0) | 0) + 1 | 0) | 0;
    }
    if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0) == 1) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + 1) >> 0] | 0) == 32) {
     i3 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) | 0;
     i4 = i3 | 0;
     i5 = i3 + 1 | 0;
     _memmove(i4 | 0, i5 | 0, (_strlen((HEAP32[i9 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
    }
   }
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  }
 } while (0);
 do if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) == 2) HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 2; else {
  i16 = HEAP32[i14 >> 2] | 0;
  if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) == 38) {
   HEAP32[i14 >> 2] = i16 | 130;
   break;
  } else {
   HEAP32[i14 >> 2] = (i16 | 1) & -3;
   break;
  }
 } while (0);
 if (HEAP32[i12 >> 2] & 256 | 0) HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 256;
 HEAP32[i13 >> 2] = _expand_wildcards_eval(i9, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
 if (HEAP32[i15 >> 2] | 0) _vim_free(HEAP32[i9 >> 2] | 0);
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 i17 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i17 | 0;
}

function _ex_global(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = i3 + 212 | 0;
 i7 = i3 + 208 | 0;
 i8 = i3 + 204 | 0;
 i9 = i3 + 200 | 0;
 i10 = i3 + 196 | 0;
 i11 = i3 + 216 | 0;
 i12 = i3 + 192 | 0;
 i13 = i3 + 20 | 0;
 i14 = i3 + 16 | 0;
 i15 = i3 + 12 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i8 >> 2] = 0;
 do if (HEAP32[26841] | 0) {
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) break;
  _emsg(43560) | 0;
  STACKTOP = i3;
  return;
 } while (0);
 if (HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0) HEAP32[i9 >> 2] = 118; else HEAP32[i9 >> 2] = HEAPU8[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] >> 0];
 HEAP32[i10 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
 HEAP32[i15 >> 2] = 2;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 92) {
  HEAP32[i10 >> 2] = i1 + 1;
  if (!(_vim_strchr(43425, HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) | 0)) {
   _emsg(92184) | 0;
   STACKTOP = i3;
   return;
  }
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 38) HEAP32[i15 >> 2] = 1; else HEAP32[i15 >> 2] = 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  HEAP32[i12 >> 2] = 114072;
 } else {
  if (!(HEAPU8[i1 >> 0] | 0)) {
   _emsg(43607) | 0;
   STACKTOP = i3;
   return;
  }
  HEAP8[i11 >> 0] = HEAP8[HEAP32[i10 >> 2] >> 0] | 0;
  if (HEAP8[i11 >> 0] | 0) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i10 >> 2] = _skip_regexp(HEAP32[i10 >> 2] | 0, HEAPU8[i11 >> 0] | 0, HEAP32[26946] | 0, HEAP32[i6 >> 2] | 0) | 0;
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == (HEAPU8[i11 >> 0] | 0)) {
   i11 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i11 + 1;
   HEAP8[i11 >> 0] = 0;
  }
 }
 if (!(_search_regcomp(HEAP32[i12 >> 2] | 0, 2, HEAP32[i15 >> 2] | 0, 32, i13) | 0)) {
  _emsg(92522) | 0;
  STACKTOP = i3;
  return;
 }
 do if (HEAP32[26841] | 0) {
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  HEAP32[i14 >> 2] = _vim_regexec_multi(i13, HEAP32[26881] | 0, HEAP32[26773] | 0, HEAP32[i7 >> 2] | 0, 0, 0, 0) | 0;
  if (!((HEAP32[i9 >> 2] | 0) == 103 & (HEAP32[i14 >> 2] | 0) != 0)) if ((HEAP32[i9 >> 2] | 0) != 118 | (HEAP32[i14 >> 2] | 0) != 0) break;
  _global_exe_one(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 } else {
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2];
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] | 0)) break;
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   HEAP32[i14 >> 2] = _vim_regexec_multi(i13, HEAP32[26881] | 0, HEAP32[26773] | 0, HEAP32[i7 >> 2] | 0, 0, 0, 0) | 0;
   if ((HEAP32[i9 >> 2] | 0) == 103 & (HEAP32[i14 >> 2] | 0) != 0) i2 = 32; else if (!((HEAP32[i9 >> 2] | 0) != 118 | (HEAP32[i14 >> 2] | 0) != 0)) i2 = 32;
   if ((i2 | 0) == 32) {
    i2 = 0;
    _ml_setmarked(HEAP32[i7 >> 2] | 0);
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   }
   _line_breakcheck();
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  do if (HEAP32[26834] | 0) _msg(92420) | 0; else {
   if (HEAP32[i8 >> 2] | 0) {
    _start_global_changes();
    _global_exe(HEAP32[i10 >> 2] | 0);
    _end_global_changes();
    break;
   }
   i15 = HEAP32[i12 >> 2] | 0;
   if ((HEAP32[i9 >> 2] | 0) == 118) {
    HEAP32[i5 >> 2] = i15;
    _smsg(43652, i5) | 0;
    break;
   } else {
    HEAP32[i4 >> 2] = i15;
    _smsg(43684, i4) | 0;
    break;
   }
  } while (0);
  _ml_clearmarked();
 } while (0);
 _vim_regfree(HEAP32[i13 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _get_keystroke() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2 + 28 | 0;
 i5 = i2 + 24 | 0;
 i6 = i2 + 20 | 0;
 i7 = i2 + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2 + 8 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 150;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[26808];
 HEAP32[i10 >> 2] = 0;
 HEAP32[26808] = 0;
 L1 : while (1) {
  _cursor_on();
  _out_flush();
  HEAP32[i6 >> 2] = ((HEAP32[i5 >> 2] | 0) - 6 - (HEAP32[i7 >> 2] | 0) | 0) / 3 | 0;
  if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i4 >> 2] = _alloc(HEAP32[i5 >> 2] | 0) | 0; else if ((HEAP32[i6 >> 2] | 0) < 10) {
   HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 100;
   HEAP32[i4 >> 2] = _realloc(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   if (!(HEAP32[i4 >> 2] | 0)) _vim_free(HEAP32[i11 >> 2] | 0);
   HEAP32[i6 >> 2] = ((HEAP32[i5 >> 2] | 0) - 6 - (HEAP32[i7 >> 2] | 0) | 0) / 3 | 0;
  }
  if (!(HEAP32[i4 >> 2] | 0)) {
   i1 = 9;
   break;
  }
  i12 = HEAP32[i7 >> 2] | 0;
  HEAP32[i8 >> 2] = _ui_inchar((HEAP32[i4 >> 2] | 0) + i12 | 0, HEAP32[i6 >> 2] | 0, (i12 | 0) == 0 ? -1 : 100, 0) | 0;
  if ((HEAP32[i8 >> 2] | 0) > 0) {
   HEAP32[i8 >> 2] = _fix_input_buffer((HEAP32[i4 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   HEAP32[i10 >> 2] = 0;
  } else if ((HEAP32[i7 >> 2] | 0) > 0) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  i12 = _check_termcode(1, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, i7) | 0;
  HEAP32[i8 >> 2] = i12;
  do if ((i12 | 0) < 0) {
   if (HEAP32[27013] | 0) if (((HEAP32[i10 >> 2] | 0) * 100 | 0) >= (((HEAP32[27014] | 0) < 0 ? HEAP32[27012] | 0 : HEAP32[27014] | 0) | 0)) break;
   continue L1;
  } while (0);
  if ((HEAP32[i8 >> 2] | 0) == 9999) {
   if (!((HEAP32[26828] | 0) == 0 | (HEAP32[26721] | 0) != 0)) if (!(HEAP32[10180] & 8)) {
    _update_screen(0) | 0;
    _setcursor();
   }
   continue;
  }
  if ((HEAP32[i8 >> 2] | 0) > 0) HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  if (!(HEAP32[i7 >> 2] | 0)) continue;
  HEAP32[i8 >> 2] = HEAPU8[HEAP32[i4 >> 2] >> 0];
  if ((HEAP32[i8 >> 2] | 0) != 128) {
   i1 = 38;
   break;
  }
  if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) == 254) i13 = 128; else if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) == 255) i13 = -22783; else {
   i12 = HEAP32[i4 >> 2] | 0;
   i13 = 0 - ((HEAPU8[i12 + 1 >> 0] | 0) + (HEAPU8[i12 + 2 >> 0] << 8)) | 0;
  }
  HEAP32[i8 >> 2] = i13;
  if (!((HEAP32[i8 >> 2] | 0) == -13821 ? 1 : (HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) == 252)) {
   i12 = (_is_mouse_key(HEAP32[i8 >> 2] | 0) | 0) != 0;
   if (!(i12 & (HEAP32[i8 >> 2] | 0) != -11517 | (HEAP32[i8 >> 2] | 0) == -22777 | (HEAP32[i8 >> 2] | 0) == -22776)) break;
  }
  if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) == 252) HEAP32[26698] = HEAPU8[(HEAP32[i4 >> 2] | 0) + 2 >> 0];
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - 3;
  if ((HEAP32[i7 >> 2] | 0) > 0) {
   i12 = HEAP32[i4 >> 2] | 0;
   _memmove(i12 | 0, i12 + 3 | 0, HEAP32[i7 >> 2] | 0) | 0;
  }
 }
 if ((i1 | 0) == 9) {
  _do_outofmem_msg(HEAP32[i5 >> 2] | 0);
  HEAP32[i3 >> 2] = 27;
  i14 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i14 | 0;
 } else if ((i1 | 0) == 38) if ((HEAP32[i8 >> 2] | 0) == (HEAP32[26725] | 0)) HEAP32[i8 >> 2] = 27;
 _vim_free(HEAP32[i4 >> 2] | 0);
 HEAP32[26808] = HEAP32[i9 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
 i14 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i14 | 0;
}

function _showoptions(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 52 | 0;
 i5 = i3 + 48 | 0;
 i6 = i3 + 44 | 0;
 i7 = i3 + 40 | 0;
 i8 = i3 + 36 | 0;
 i9 = i3 + 32 | 0;
 i10 = i3 + 28 | 0;
 i11 = i3 + 24 | 0;
 i12 = i3 + 20 | 0;
 i13 = i3 + 16 | 0;
 i14 = i3 + 12 | 0;
 i15 = i3 + 8 | 0;
 i16 = i3 + 4 | 0;
 i17 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i10 >> 2] = _alloc(1944) | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 do if ((HEAP32[i4 >> 2] | 0) == 2) _msg_puts_title(71553); else {
  if (HEAP32[i5 >> 2] & 2 | 0) {
   _msg_puts_title(71577);
   break;
  }
  if (HEAP32[i5 >> 2] & 4 | 0) {
   _msg_puts_title(71607);
   break;
  } else {
   _msg_puts_title(71636);
   break;
  }
 } while (0);
 HEAP32[i12 >> 2] = 1;
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) > 2) break;
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i6 >> 2] = 15328;
  while (1) {
   if (!(HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) break;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i8 >> 2] = _istermoption(HEAP32[i6 >> 2] | 0) | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if (HEAP32[i5 >> 2] | 0) {
    if (!((HEAP32[i2 + 16 >> 2] | 0) == 0 | (HEAP32[i8 >> 2] | 0) != 0)) HEAP32[i9 >> 2] = _get_varp_scope(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   } else HEAP32[i9 >> 2] = _get_varp(i2) | 0;
   do if (HEAP32[i9 >> 2] | 0) {
    if (!((HEAP32[i4 >> 2] | 0) == 2 & (HEAP32[i8 >> 2] | 0) != 0)) if ((HEAP32[i4 >> 2] | 0) != 1 | (HEAP32[i8 >> 2] | 0) != 0) {
     if (HEAP32[i4 >> 2] | 0) break;
     if (_optval_default(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) break;
    }
    if (HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] & 1 | 0) HEAP32[i17 >> 2] = 1; else {
     _option_value2string(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
     i2 = _strlen(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0;
     HEAP32[i17 >> 2] = i2 + (_vim_strsize(HEAP32[26885] | 0) | 0) + 1;
    }
    if (!((HEAP32[i17 >> 2] | 0) <= 17 & (HEAP32[i12 >> 2] | 0) == 1)) if (!((HEAP32[i17 >> 2] | 0) > 17 & (HEAP32[i12 >> 2] | 0) == 2)) break;
    i2 = HEAP32[i6 >> 2] | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    i18 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i18 + 1;
    HEAP32[i1 + (i18 << 2) >> 2] = i2;
   } while (0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 28;
  }
  if ((HEAP32[i12 >> 2] | 0) == 1) {
   i2 = ((HEAP32[10174] | 0) + 3 - 3 | 0) / 20 | 0;
   HEAP32[i15 >> 2] = i2;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) == 0 ? 1 : i2;
   i2 = HEAP32[i15 >> 2] | 0;
   HEAP32[i14 >> 2] = ((HEAP32[i11 >> 2] | 0) + i2 - 1 | 0) / (i2 | 0) | 0;
  } else HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i13 >> 2] = 0;
  while (1) {
   if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[i14 >> 2] | 0)) break;
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   _msg_putchar(10);
   if (HEAP32[26834] | 0) break;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
   while (1) {
    if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) break;
    HEAP32[27043] = HEAP32[i7 >> 2];
    _showoneopt(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] << 2) >> 2] | 0, HEAP32[i5 >> 2] | 0);
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 20;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
   }
   _out_flush();
   _ui_breakcheck();
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 _vim_free(HEAP32[i10 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _do_bufdel(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i8 = i7 + 16 | 0;
 i9 = i7 + 8 | 0;
 i10 = i7;
 i11 = i7 + 64 | 0;
 i12 = i7 + 60 | 0;
 i13 = i7 + 56 | 0;
 i14 = i7 + 52 | 0;
 i15 = i7 + 48 | 0;
 i16 = i7 + 44 | 0;
 i17 = i7 + 40 | 0;
 i18 = i7 + 36 | 0;
 i19 = i7 + 32 | 0;
 i20 = i7 + 28 | 0;
 i21 = i7 + 24 | 0;
 i22 = i7 + 20 | 0;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i15 >> 2] = i4;
 HEAP32[i16 >> 2] = i5;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 HEAP32[i20 >> 2] = 0;
 do if (!(HEAP32[i14 >> 2] | 0)) _do_buffer(HEAP32[i12 >> 2] | 0, 0, 1, 0, HEAP32[i17 >> 2] | 0) | 0; else {
  do if ((HEAP32[i14 >> 2] | 0) == 2) {
   if (!(HEAP8[HEAP32[i13 >> 2] >> 0] | 0)) {
    HEAP32[i21 >> 2] = HEAP32[i15 >> 2];
    break;
   }
   HEAP32[i11 >> 2] = 93844;
   i23 = HEAP32[i11 >> 2] | 0;
   STACKTOP = i7;
   return i23 | 0;
  } else HEAP32[i21 >> 2] = HEAP32[i16 >> 2]; while (0);
  L12 : while (1) {
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   if ((HEAP32[i21 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0)) HEAP32[i18 >> 2] = HEAP32[i21 >> 2]; else if ((_do_buffer(HEAP32[i12 >> 2] | 0, 1, 1, HEAP32[i21 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0) == 1) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   do if ((HEAP32[i14 >> 2] | 0) == 2) {
    i6 = (HEAP32[i21 >> 2] | 0) + 1 | 0;
    HEAP32[i21 >> 2] = i6;
    if ((i6 | 0) > (HEAP32[i16 >> 2] | 0)) break L12;
   } else {
    HEAP32[i13 >> 2] = _skipwhite(HEAP32[i13 >> 2] | 0) | 0;
    if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) break L12;
    if (((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) {
     HEAP32[i21 >> 2] = _getdigits(i13) | 0;
     break;
    }
    HEAP32[i22 >> 2] = _skiptowhite_esc(HEAP32[i13 >> 2] | 0) | 0;
    HEAP32[i21 >> 2] = _buflist_findpat(HEAP32[i13 >> 2] | 0, HEAP32[i22 >> 2] | 0, (HEAP32[i12 >> 2] | 0) == 4 & 1, 0, 0) | 0;
    if ((HEAP32[i21 >> 2] | 0) < 0) break L12;
    HEAP32[i13 >> 2] = HEAP32[i22 >> 2];
   } while (0);
   _ui_breakcheck();
  }
  if ((HEAP32[26834] | 0) == 0 & (HEAP32[i18 >> 2] | 0) != 0) if ((_do_buffer(HEAP32[i12 >> 2] | 0, 1, 1, HEAP32[i18 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0) == 1) HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
  if (!(HEAP32[i19 >> 2] | 0)) {
   do if ((HEAP32[i12 >> 2] | 0) == 2) _strcpy(HEAP32[26882] | 0, 42141) | 0; else {
    i6 = HEAP32[26882] | 0;
    if ((HEAP32[i12 >> 2] | 0) == 3) {
     _strcpy(i6, 42172) | 0;
     break;
    } else {
     _strcpy(i6, 42202) | 0;
     break;
    }
   } while (0);
   HEAP32[i20 >> 2] = HEAP32[26882];
   break;
  }
  if ((HEAP32[i19 >> 2] | 0) >= (HEAP32[26967] | 0)) {
   if ((HEAP32[i12 >> 2] | 0) == 2) if ((HEAP32[i19 >> 2] | 0) == 1) {
    _msg(42234) | 0;
    break;
   } else {
    HEAP32[i10 >> 2] = HEAP32[i19 >> 2];
    _smsg(42252, i10) | 0;
    break;
   }
   i6 = (HEAP32[i19 >> 2] | 0) == 1;
   if ((HEAP32[i12 >> 2] | 0) == 3) if (i6) {
    _msg(42272) | 0;
    break;
   } else {
    HEAP32[i9 >> 2] = HEAP32[i19 >> 2];
    _smsg(42289, i9) | 0;
    break;
   } else if (i6) {
    _msg(42308) | 0;
    break;
   } else {
    HEAP32[i8 >> 2] = HEAP32[i19 >> 2];
    _smsg(42327, i8) | 0;
    break;
   }
  }
 } while (0);
 HEAP32[i11 >> 2] = HEAP32[i20 >> 2];
 i23 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i7;
 return i23 | 0;
}

function _win_drag_vsep_line(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2];
 if ((HEAP32[i8 >> 2] | 0) == (HEAP32[27114] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
 do if ((HEAP8[HEAP32[i8 >> 2] >> 0] | 0) != 1) if ((HEAP32[i8 >> 2] | 0) == (HEAP32[27114] | 0)) {
  STACKTOP = i4;
  return;
 } else {
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
  break;
 } while (0);
 while (1) {
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) break;
  if ((HEAP32[i8 >> 2] | 0) == (HEAP32[27114] | 0)) break;
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
  if ((HEAP32[i8 >> 2] | 0) != (HEAP32[27114] | 0)) {
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2];
  }
 }
 if ((HEAP32[i6 >> 2] | 0) < 0) {
  HEAP32[i10 >> 2] = 1;
  HEAP32[i6 >> 2] = 0 - (HEAP32[i6 >> 2] | 0);
  HEAP32[i9 >> 2] = 0;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2];
  while (1) {
   i5 = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0;
   i2 = i5 - (_frame_minwidth(HEAP32[i8 >> 2] | 0, 0) | 0) | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i2;
   if ((HEAP32[i8 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) break;
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
  }
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
 } else {
  HEAP32[i10 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
  while (1) {
   if (!(HEAP32[i8 >> 2] | 0)) break;
   i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0;
   i5 = i2 - (_frame_minwidth(HEAP32[i8 >> 2] | 0, 0) | 0) | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i5;
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
  }
  HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 }
 if ((HEAP32[i9 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
 if ((HEAP32[i6 >> 2] | 0) <= 0 | (HEAP32[i8 >> 2] | 0) == 0) {
  STACKTOP = i4;
  return;
 }
 i9 = HEAP32[i8 >> 2] | 0;
 _frame_new_width(i9 | 0, (HEAP32[i9 + 4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i10 >> 2] | 0, 0);
 i9 = HEAP32[i7 >> 2] | 0;
 if (HEAP32[i10 >> 2] | 0) HEAP32[i8 >> 2] = i9; else HEAP32[i8 >> 2] = HEAP32[i9 + 24 >> 2];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0 ? (HEAP32[i6 >> 2] | 0) > 0 : 0)) break;
  HEAP32[i11 >> 2] = _frame_minwidth(HEAP32[i8 >> 2] | 0, 0) | 0;
  i12 = HEAP32[i8 >> 2] | 0;
  if (((HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) > (HEAP32[i11 >> 2] | 0)) {
   i3 = 30;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - ((HEAP32[i12 + 4 >> 2] | 0) - (HEAP32[i11 >> 2] | 0));
  _frame_new_width(HEAP32[i8 >> 2] | 0, HEAP32[i11 >> 2] | 0, ((HEAP32[i10 >> 2] | 0) != 0 ^ 1) & 1, 0);
  i9 = HEAP32[i8 >> 2] | 0;
  if (HEAP32[i10 >> 2] | 0) HEAP32[i8 >> 2] = HEAP32[i9 + 28 >> 2]; else HEAP32[i8 >> 2] = HEAP32[i9 + 24 >> 2];
 }
 if ((i3 | 0) == 30) _frame_new_width(i12, (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0, ((HEAP32[i10 >> 2] | 0) != 0 ^ 1) & 1, 0);
 _win_comp_pos() | 0;
 _redraw_all_later(40);
 STACKTOP = i4;
 return;
}

function _recov_file_names(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[26773] | 0) + 784 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 784 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 do if (HEAP32[i7 >> 2] | 0) {
  i3 = _modname(HEAP32[i6 >> 2] | 0, 59635, 1) | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] = i3;
  if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0)) {
   i12 = HEAP32[i11 >> 2] | 0;
   i13 = HEAP32[26773] | 0;
   i14 = i13 + 784 | 0;
   HEAP32[i14 >> 2] = i12;
   i15 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i4;
   return i15 | 0;
  } else {
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   break;
  }
 } while (0);
 i7 = _concat_fnames(HEAP32[i6 >> 2] | 0, 59635, 0) | 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] = i7;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0)) {
  i12 = HEAP32[i11 >> 2] | 0;
  i13 = HEAP32[26773] | 0;
  i14 = i13 + 784 | 0;
  HEAP32[i14 >> 2] = i12;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 do if ((HEAP32[i8 >> 2] | 0) >= 1) {
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) - 1 << 2) >> 2];
  i7 = _strlen(HEAP32[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) - 1 << 2) >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = i7 - (_strlen(HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0);
  if ((HEAP32[i10 >> 2] | 0) > 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  if (_strcmp(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0) {
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   break;
  } else {
   _vim_free(HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0);
   break;
  }
 } else HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1; while (0);
 HEAP32[(HEAP32[26773] | 0) + 784 >> 2] = 1;
 i7 = _modname(HEAP32[i6 >> 2] | 0, 59635, 0) | 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] = i7;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0)) {
  i12 = HEAP32[i11 >> 2] | 0;
  i13 = HEAP32[26773] | 0;
  i14 = i13 + 784 | 0;
  HEAP32[i14 >> 2] = i12;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2];
 i7 = _strlen(HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i7 - (_strlen(HEAP32[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) - 1 << 2) >> 2] | 0) | 0);
 if ((HEAP32[i10 >> 2] | 0) > 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
 if (!(_strcmp(HEAP32[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) - 1 << 2) >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0)) {
  _vim_free(HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0);
  i12 = HEAP32[i11 >> 2] | 0;
  i13 = HEAP32[26773] | 0;
  i14 = i13 + 784 | 0;
  HEAP32[i14 >> 2] = i12;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 } else {
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  i12 = HEAP32[i11 >> 2] | 0;
  i13 = HEAP32[26773] | 0;
  i14 = i13 + 784 | 0;
  HEAP32[i14 >> 2] = i12;
  i15 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 return 0;
}

function _set_chars_option(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 36 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 20 | 0;
 i10 = i3 + 16 | 0;
 i11 = i3 + 12 | 0;
 i12 = i3 + 8 | 0;
 i13 = i3 + 4 | 0;
 i14 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i13 >> 2] = 0;
 if ((HEAP32[i5 >> 2] | 0) == 107776) {
  HEAP32[i14 >> 2] = 28936;
  HEAP32[i9 >> 2] = 8;
 } else {
  HEAP32[i14 >> 2] = 29e3;
  HEAP32[i9 >> 2] = 5;
 }
 HEAP32[i6 >> 2] = 0;
 L5 : while (1) {
  if ((HEAP32[i6 >> 2] | 0) > 1) {
   i2 = 40;
   break;
  }
  do if ((HEAP32[i6 >> 2] | 0) > 0) {
   HEAP32[i7 >> 2] = 0;
   while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
    if (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) >> 2] | 0) HEAP32[HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) >> 2] >> 2] = (HEAP32[i5 >> 2] | 0) == 107776 ? 0 : 32;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   }
   if ((HEAP32[i5 >> 2] | 0) == 107776) {
    HEAP32[26862] = 0;
    break;
   } else {
    HEAP32[10189] = 45;
    break;
   }
  } while (0);
  HEAP32[i10 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  while (1) {
   if (!(HEAP8[HEAP32[i10 >> 2] >> 0] | 0)) break;
   HEAP32[i7 >> 2] = 0;
   L24 : while (1) {
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
    HEAP32[i8 >> 2] = _strlen(HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) + 4 >> 2] | 0) | 0;
    do if (!(_strncmp(HEAP32[i10 >> 2] | 0, HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0)) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0) == 58) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) + 1) >> 0] | 0) {
     HEAP32[i11 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) + 1;
     i1 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i1 + 1;
     HEAP32[i12 >> 2] = HEAPU8[i1 >> 0];
     if ((HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) >> 2] | 0) == 107452) {
      if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) break;
      i1 = HEAP32[i11 >> 2] | 0;
      HEAP32[i11 >> 2] = i1 + 1;
      HEAP32[i13 >> 2] = HEAPU8[i1 >> 0];
     }
     if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) == 44) {
      i2 = 27;
      break L24;
     }
     if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) {
      i2 = 27;
      break L24;
     }
    } while (0);
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   }
   if ((i2 | 0) == 27) {
    i2 = 0;
    do if (HEAP32[i6 >> 2] | 0) {
     if ((HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) >> 2] | 0) == 107452) {
      HEAP32[26862] = HEAP32[i12 >> 2];
      HEAP32[26863] = HEAP32[i13 >> 2];
      break;
     }
     if (HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) >> 2] | 0) HEAP32[HEAP32[(HEAP32[i14 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) >> 2] >> 2] = HEAP32[i12 >> 2];
    } while (0);
    HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
   }
   if ((HEAP32[i7 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
    i2 = 35;
    break L5;
   }
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 44) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 35) {
  HEAP32[i4 >> 2] = 92453;
  i15 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i15 | 0;
 } else if ((i2 | 0) == 40) {
  HEAP32[i4 >> 2] = 0;
  i15 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i15 | 0;
 }
 return 0;
}

function _win_exchange(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) {
  _beep_flush();
  STACKTOP = i2;
  return;
 }
 HEAP32[26757] = 1;
 i1 = HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0;
 L5 : do if (HEAP32[i3 >> 2] | 0) {
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i4 >> 2] | 0)) break L5;
   i9 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
   HEAP32[i3 >> 2] = i9;
   if ((i9 | 0) <= 0) break L5;
   HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2];
  }
 } else {
  i9 = HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0;
  if (HEAP32[i1 + 24 >> 2] | 0) {
   HEAP32[i4 >> 2] = HEAP32[i9 + 24 >> 2];
   break;
  } else {
   HEAP32[i4 >> 2] = HEAP32[i9 + 28 >> 2];
   break;
  }
 } while (0);
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) == (HEAP32[26881] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2];
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 8 >> 2];
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0) + 28 >> 2];
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[26881] | 0)) {
  _win_remove(HEAP32[26881] | 0, 0);
  _frame_remove(HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0);
  _win_append(HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0, HEAP32[26881] | 0);
  _frame_insert(HEAP32[i4 >> 2] | 0, HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0);
 }
 do if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) {
  _win_remove(HEAP32[i6 >> 2] | 0, 0);
  _frame_remove(HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0);
  _win_append(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  if (!(HEAP32[i5 >> 2] | 0)) {
   i4 = HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0;
   _frame_insert(HEAP32[(HEAP32[i4 + 20 >> 2] | 0) + 32 >> 2] | 0, i4 | 0);
   break;
  } else {
   _frame_append(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0);
   break;
  }
 } while (0);
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 92 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 92 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 92 >> 2];
 HEAP32[(HEAP32[i6 >> 2] | 0) + 92 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 104 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 104 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 104 >> 2];
 HEAP32[(HEAP32[i6 >> 2] | 0) + 104 >> 2] = HEAP32[i8 >> 2];
 i5 = HEAP32[26881] | 0;
 if ((HEAP32[(HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0) + 20 >> 2] | 0)) {
  HEAP32[i8 >> 2] = HEAP32[i5 + 88 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 88 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 88 >> 2];
  HEAP32[(HEAP32[i6 >> 2] | 0) + 88 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 100 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 100 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 100 >> 2];
  HEAP32[(HEAP32[i6 >> 2] | 0) + 100 >> 2] = HEAP32[i8 >> 2];
 } else {
  _frame_fix_height(i5);
  _frame_fix_height(HEAP32[i6 >> 2] | 0);
  _frame_fix_width(HEAP32[26881] | 0);
  _frame_fix_width(HEAP32[i6 >> 2] | 0);
 }
 _win_comp_pos() | 0;
 _win_enter(HEAP32[i6 >> 2] | 0, 1);
 _redraw_later(50);
 STACKTOP = i2;
 return;
}

function _getvcol(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i6 + 48 | 0;
 i8 = i6 + 44 | 0;
 i9 = i6 + 40 | 0;
 i10 = i6 + 36 | 0;
 i11 = i6 + 32 | 0;
 i12 = i6 + 28 | 0;
 i13 = i6 + 24 | 0;
 i14 = i6 + 20 | 0;
 i15 = i6 + 16 | 0;
 i16 = i6 + 12 | 0;
 i17 = i6 + 8 | 0;
 i18 = i6 + 4 | 0;
 i19 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i18 >> 2] = HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 700 >> 2];
 HEAP32[i12 >> 2] = 0;
 i5 = _ml_get_buf(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0, HEAP32[HEAP32[i8 >> 2] >> 2] | 0, 0) | 0;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i15 >> 2] = i5;
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) == 2147483647) HEAP32[i14 >> 2] = 0; else {
  if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[i14 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0);
 }
 L8 : do if (HEAP32[26862] | 0 ? 1 : (HEAP32[(HEAP32[i7 >> 2] | 0) + 200 >> 2] | 0) == 0) {
  HEAP32[i17 >> 2] = 0;
  while (1) {
   HEAP32[i19 >> 2] = HEAPU8[HEAP32[i13 >> 2] >> 0];
   if (!(HEAP32[i19 >> 2] | 0)) break;
   if ((HEAP32[i19 >> 2] | 0) == 9) {
    i5 = HEAP32[i18 >> 2] | 0;
    HEAP32[i16 >> 2] = (i5 | 0) - ((HEAP32[i12 >> 2] | 0) % (i5 | 0) | 0);
   } else HEAP32[i16 >> 2] = HEAPU8[113724 + (HEAP32[i19 >> 2] | 0) >> 0] & 7;
   if (HEAP32[i14 >> 2] | 0) if ((HEAP32[i13 >> 2] | 0) >>> 0 >= (HEAP32[i14 >> 2] | 0) >>> 0) break L8;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  HEAP32[i16 >> 2] = 1;
 } else {
  while (1) {
   HEAP32[i17 >> 2] = 0;
   HEAP32[i16 >> 2] = _win_lbr_chartabsize(HEAP32[i7 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, i17) | 0;
   if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) break;
   if (HEAP32[i14 >> 2] | 0) if ((HEAP32[i13 >> 2] | 0) >>> 0 >= (HEAP32[i14 >> 2] | 0) >>> 0) break L8;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  HEAP32[i16 >> 2] = 1;
 } while (0);
 if (HEAP32[i9 >> 2] | 0) HEAP32[HEAP32[i9 >> 2] >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
 if (HEAP32[i11 >> 2] | 0) HEAP32[HEAP32[i11 >> 2] >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) - 1;
 if (!(HEAP32[i10 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 do if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) == 9) if (HEAP32[10180] & 1 | 0) if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 200 >> 2] | 0)) {
  if (HEAP32[26788] | 0) {
   if ((HEAPU8[HEAP32[26975] >> 0] | 0) == 101) break;
   i11 = HEAP32[i8 >> 2] | 0;
   if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) != (HEAP32[27117] | 0)) {
    if ((HEAP32[i11 >> 2] | 0) < (HEAP32[27117] | 0)) break;
   } else if ((HEAP32[i11 + 4 >> 2] | 0) < (HEAP32[27118] | 0)) break;
   if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) == (HEAP32[27117] | 0)) if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[27118] | 0)) break;
  }
  HEAP32[HEAP32[i10 >> 2] >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) - 1;
  STACKTOP = i6;
  return;
 } while (0);
 HEAP32[HEAP32[i10 >> 2] >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i17 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _expand_wildcards(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 44 | 0;
 i8 = i6 + 40 | 0;
 i9 = i6 + 36 | 0;
 i10 = i6 + 32 | 0;
 i11 = i6 + 28 | 0;
 i12 = i6 + 24 | 0;
 i13 = i6 + 20 | 0;
 i14 = i6 + 16 | 0;
 i15 = i6 + 12 | 0;
 i16 = i6 + 8 | 0;
 i17 = i6 + 4 | 0;
 i18 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = _gen_expand_wildcards(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
 if ((HEAP32[i12 >> 2] & 16 | 0) != 0 | (HEAP32[i13 >> 2] | 0) == 0) {
  HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
  i19 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i19 | 0;
 }
 if (HEAP8[HEAP32[27027] >> 0] | 0) {
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) break;
   HEAP32[i18 >> 2] = _FullName_save(HEAP32[(HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0, 0) | 0;
   if (!(HEAP32[i18 >> 2] | 0)) break;
   if (_match_file_list(HEAP32[27027] | 0, HEAP32[(HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0, HEAP32[i18 >> 2] | 0) | 0) {
    _vim_free(HEAP32[(HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0);
    HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
    while (1) {
     if (((HEAP32[i15 >> 2] | 0) + 1 | 0) >= (HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) break;
     i12 = HEAP32[HEAP32[i11 >> 2] >> 2] | 0;
     HEAP32[i12 + (HEAP32[i15 >> 2] << 2) >> 2] = HEAP32[i12 + ((HEAP32[i15 >> 2] | 0) + 1 << 2) >> 2];
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
    }
    i12 = HEAP32[i10 >> 2] | 0;
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
    HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
   }
   _vim_free(HEAP32[i18 >> 2] | 0);
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
  if (!(HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) {
   if (HEAP32[HEAP32[i11 >> 2] >> 2] | 0) {
    _vim_free(HEAP32[HEAP32[i11 >> 2] >> 2] | 0);
    HEAP32[HEAP32[i11 >> 2] >> 2] = 0;
   }
   HEAP32[i7 >> 2] = 0;
   i19 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i19 | 0;
  }
 }
 L25 : do if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) > 1) {
  HEAP32[i17 >> 2] = 0;
  HEAP32[i14 >> 2] = 0;
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) break L25;
   if (!(_match_suffix(HEAP32[(HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2] | 0) | 0)) {
    HEAP32[i16 >> 2] = HEAP32[(HEAP32[HEAP32[i11 >> 2] >> 2] | 0) + (HEAP32[i14 >> 2] << 2) >> 2];
    HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
    while (1) {
     if ((HEAP32[i15 >> 2] | 0) <= (HEAP32[i17 >> 2] | 0)) break;
     i18 = HEAP32[HEAP32[i11 >> 2] >> 2] | 0;
     HEAP32[i18 + (HEAP32[i15 >> 2] << 2) >> 2] = HEAP32[i18 + ((HEAP32[i15 >> 2] | 0) - 1 << 2) >> 2];
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    }
    i18 = HEAP32[i16 >> 2] | 0;
    i12 = HEAP32[HEAP32[i11 >> 2] >> 2] | 0;
    i9 = HEAP32[i17 >> 2] | 0;
    HEAP32[i17 >> 2] = i9 + 1;
    HEAP32[i12 + (i9 << 2) >> 2] = i18;
   }
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i7 >> 2] = HEAP32[i13 >> 2];
 i19 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i19 | 0;
}

function _op_shift(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4;
 i9 = i4 + 60 | 0;
 i10 = i4 + 56 | 0;
 i11 = i4 + 52 | 0;
 i12 = i4 + 48 | 0;
 i13 = i4 + 44 | 0;
 i14 = i4 + 40 | 0;
 i15 = i4 + 36 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i15 >> 2] = 0;
 if (!(_u_save((HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i4;
  return;
 }
 if (HEAP32[(HEAP32[i9 >> 2] | 0) + 64 >> 2] | 0) HEAP32[i15 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2];
 while (1) {
  i3 = (HEAP32[i12 >> 2] | 0) + -1 | 0;
  HEAP32[i12 >> 2] = i3;
  if ((i3 | 0) < 0) break;
  HEAP32[i13 >> 2] = HEAPU8[(_ml_get_curline() | 0) >> 0];
  if (!(HEAP32[i13 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0; else _shift_line((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 4 & 1, HEAP32[26984] | 0, HEAP32[i11 >> 2] | 0, 0);
  i3 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 i13 = HEAP32[i9 >> 2] | 0;
 _changed_lines(HEAP32[i13 + 28 >> 2] | 0, 0, (HEAP32[i13 + 36 >> 2] | 0) + 1 | 0, 0);
 do if (HEAP32[(HEAP32[i9 >> 2] | 0) + 64 >> 2] | 0) {
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i15 >> 2];
 } else if (HEAP32[i10 >> 2] | 0) {
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2];
  _beginline(6);
  break;
 } else {
  i13 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
  break;
 } while (0);
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] | 0) > (HEAP32[26967] | 0)) {
  if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == 5) HEAP32[i14 >> 2] = 72083; else HEAP32[i14 >> 2] = 74550;
  i10 = (HEAP32[i11 >> 2] | 0) == 1;
  i15 = HEAP32[26882] | 0;
  do if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] | 0) == 1) {
   i13 = HEAP32[i14 >> 2] | 0;
   if (i10) {
    HEAP32[i8 >> 2] = i13;
    _sprintf(i15, 62208, i8) | 0;
    break;
   } else {
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i7 >> 2] = i13;
    HEAP32[i7 + 4 >> 2] = i12;
    _sprintf(i15, 62227, i7) | 0;
    break;
   }
  } else {
   i12 = HEAP32[(HEAP32[i9 >> 2] | 0) + 52 >> 2] | 0;
   i13 = HEAP32[i14 >> 2] | 0;
   if (i10) {
    HEAP32[i6 >> 2] = i12;
    HEAP32[i6 + 4 >> 2] = i13;
    _sprintf(i15, 62248, i6) | 0;
    break;
   } else {
    i3 = HEAP32[i11 >> 2] | 0;
    HEAP32[i5 >> 2] = i12;
    HEAP32[i5 + 4 >> 2] = i13;
    HEAP32[i5 + 8 >> 2] = i3;
    _sprintf(i15, 62270, i5) | 0;
    break;
   }
  } while (0);
  _msg(HEAP32[26882] | 0) | 0;
 }
 i5 = (HEAP32[26773] | 0) + 476 | 0;
 i15 = (HEAP32[i9 >> 2] | 0) + 28 | 0;
 HEAP32[i5 >> 2] = HEAP32[i15 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2];
 i15 = _strlen(_ml_get(HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] | 0) | 0) | 0;
 HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = i15;
 if ((HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] | 0) <= 0) {
  STACKTOP = i4;
  return;
 }
 i15 = (HEAP32[26773] | 0) + 492 + 4 | 0;
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
 STACKTOP = i4;
 return;
}
function _reg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i12 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i11 >> 2] = 0;
 HEAP32[HEAP32[i7 >> 2] >> 2] = 1;
 do if ((HEAP32[i6 >> 2] | 0) == 1) {
  if ((HEAP32[26387] | 0) < 10) {
   HEAP32[i11 >> 2] = HEAP32[26387];
   HEAP32[26387] = (HEAP32[26387] | 0) + 1;
   HEAP32[i8 >> 2] = _regnode(80 + (HEAP32[i11 >> 2] | 0) | 0) | 0;
   break;
  }
  _emsg2(74115, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
  HEAP32[26719] = 1;
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 } else if ((HEAP32[i6 >> 2] | 0) == 3) {
  HEAP32[i8 >> 2] = _regnode(150) | 0;
  break;
 } else {
  HEAP32[i8 >> 2] = 0;
  break;
 } while (0);
 HEAP32[i9 >> 2] = _regbranch(i12) | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 if (HEAP32[i8 >> 2] | 0) _regtail(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0); else HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 if (!(HEAP32[i12 >> 2] & 1)) {
  i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
 }
 i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | HEAP32[i12 >> 2] & 28;
 while (1) {
  if ((_peekchr() | 0) != -132) break;
  _skipchr();
  HEAP32[i9 >> 2] = _regbranch(i12) | 0;
  if ((HEAP32[i9 >> 2] | 0) == 0 | (HEAP32[26405] | 0) != 0) {
   i3 = 18;
   break;
  }
  _regtail(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
  if (!(HEAP32[i12 >> 2] & 1)) {
   i2 = HEAP32[i7 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
  }
  i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | HEAP32[i12 >> 2] & 28;
 }
 if ((i3 | 0) == 18) {
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) == 1) i14 = 90 + (HEAP32[i11 >> 2] | 0) | 0; else i14 = (HEAP32[i6 >> 2] | 0) == 3 ? 151 : 0;
 HEAP32[i10 >> 2] = _regnode(i14) | 0;
 _regtail(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 while (1) {
  if (!(HEAP32[i9 >> 2] | 0)) break;
  _regoptail(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
  HEAP32[i9 >> 2] = _regnext(HEAP32[i9 >> 2] | 0) | 0;
 }
 if (HEAP32[i6 >> 2] | 0) if ((_getchr() | 0) != -215) {
  i9 = (HEAP32[26391] | 0) == 4 ? 114072 : 73093;
  if ((HEAP32[i6 >> 2] | 0) == 3) {
   _emsg2(73095, i9) | 0;
   HEAP32[26719] = 1;
   HEAP32[i5 >> 2] = 0;
   i13 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i13 | 0;
  } else {
   _emsg2(73116, i9) | 0;
   HEAP32[26719] = 1;
   HEAP32[i5 >> 2] = 0;
   i13 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i13 | 0;
  }
 }
 if (!(HEAP32[i6 >> 2] | 0)) if (_peekchr() | 0) if ((HEAP32[26398] | 0) == -215) {
  _emsg2(73135, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
  HEAP32[26719] = 1;
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 } else {
  _emsg(93844) | 0;
  HEAP32[26719] = 1;
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) == 1) HEAP8[111107 + (HEAP32[i11 >> 2] | 0) >> 0] = 1;
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 i13 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i13 | 0;
}

function _nv_visual(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 17) HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = 22;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) {
  HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 12 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[26796] = 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[26789] = HEAP32[i1 + 32 >> 2];
 if (HEAP32[26788] | 0) {
  if ((HEAP32[10179] | 0) == (HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0)) _end_visual_mode(); else {
   HEAP32[10179] = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2];
   _showmode() | 0;
  }
  _redraw_curbuf_later(20);
  STACKTOP = i2;
  return;
 }
 _check_visual_highlight();
 if (!(HEAP32[26072] | 0 ? (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) > 0 : 0)) {
  if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) _may_start_select(99);
  _n_start_visual_mode(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0);
  if ((HEAP32[10179] | 0) != 86) if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) {
   i1 = (HEAP32[i3 >> 2] | 0) + 28 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) <= 0) {
   STACKTOP = i2;
   return;
  }
  i1 = (HEAP32[i3 >> 2] | 0) + 28 | 0;
  i4 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  if ((i4 | 0) <= 0) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[10179] | 0) == 118 | (HEAP32[10179] | 0) == 22) {
   _nv_right(HEAP32[i3 >> 2] | 0);
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[10179] | 0) != 86) {
   STACKTOP = i2;
   return;
  }
  _nv_down(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 i4 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[27117] = HEAP32[i4 >> 2];
 HEAP32[27118] = HEAP32[i4 + 4 >> 2];
 HEAP32[26788] = 1;
 HEAP32[27119] = 1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) _may_start_select(99);
 _setmouse();
 if ((HEAP32[26988] | 0) != 0 & (HEAP32[26809] | 0) == 0) HEAP32[26699] = 1;
 if ((HEAP32[26072] | 0) != 118 | (HEAP32[26074] | 0) > 1) {
  i4 = (Math_imul(HEAP32[26074] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) | 0) - 1 | 0;
  i1 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i4;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
 }
 HEAP32[10179] = HEAP32[26072];
 if ((HEAP32[10179] | 0) == 118) {
  if ((HEAP32[26074] | 0) <= 1) {
   _validate_virtcol();
   i4 = (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) + (Math_imul(HEAP32[26073] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) | 0) - 1 | 0;
   HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = i4;
  } else HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[26073];
  _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 }
 do if ((HEAP32[26073] | 0) == 2147483647) {
  HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647;
  _coladvance(2147483647) | 0;
 } else if ((HEAP32[10179] | 0) == 22) {
  _validate_virtcol();
  i4 = (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) + (Math_imul(HEAP32[26073] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) | 0) - 1 | 0;
  HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = i4;
  _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
  break;
 } else {
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  break;
 } while (0);
 _redraw_curbuf_later(20);
 STACKTOP = i2;
 return;
}

function _trunc_string(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 36 | 0;
 i8 = i6 + 32 | 0;
 i9 = i6 + 28 | 0;
 i10 = i6 + 24 | 0;
 i11 = i6 + 20 | 0;
 i12 = i6 + 16 | 0;
 i13 = i6 + 12 | 0;
 i14 = i6 + 8 | 0;
 i15 = i6 + 4 | 0;
 i16 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = (HEAP32[i9 >> 2] | 0) - 3;
 HEAP32[i13 >> 2] = 0;
 if ((HEAP32[i9 >> 2] | 0) < 3) HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = ((HEAP32[i11 >> 2] | 0) >>> 0) / 2 | 0;
 HEAP32[i14 >> 2] = 0;
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) >>> 0 >= (HEAP32[i12 >> 2] | 0) >>> 0) break;
  if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
  if (!(HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) >> 0] | 0)) {
   i5 = 7;
   break;
  }
  HEAP32[i16 >> 2] = _ptr2cells((HEAP32[i7 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0) | 0;
  if (((HEAP32[i13 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) | 0) >>> 0 > (HEAP32[i12 >> 2] | 0) >>> 0) break;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
  i9 = HEAP32[i14 >> 2] | 0;
  HEAP8[(HEAP32[i8 >> 2] | 0) + i9 >> 0] = HEAP8[(HEAP32[i7 >> 2] | 0) + i9 >> 0] | 0;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 7) {
  HEAP8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) >> 0] = 0;
  STACKTOP = i6;
  return;
 }
 HEAP32[i15 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i15 >> 2] = _strlen(HEAP32[i7 >> 2] | 0) | 0;
 while (1) {
  i5 = HEAP32[i13 >> 2] | 0;
  i12 = _ptr2cells((HEAP32[i7 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) + -1 | 0) | 0;
  HEAP32[i16 >> 2] = i12;
  if ((i5 + i12 | 0) >>> 0 > (HEAP32[i11 >> 2] | 0) >>> 0) break;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
  HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
 }
 if ((HEAP32[i15 >> 2] | 0) > ((HEAP32[i14 >> 2] | 0) + 3 | 0)) {
  i16 = HEAP32[i8 >> 2] | 0;
  i11 = HEAP32[i14 >> 2] | 0;
  if (((HEAP32[i14 >> 2] | 0) + 3 | 0) >= (HEAP32[i10 >> 2] | 0)) {
   HEAP8[i16 + (i11 - 1) >> 0] = 0;
   STACKTOP = i6;
   return;
  }
  _memmove(i16 + i11 | 0, 97674, 3) | 0;
  HEAP32[i13 >> 2] = (_strlen((HEAP32[i7 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) | 0) + 1;
  if ((HEAP32[i13 >> 2] | 0) >>> 0 >= ((HEAP32[i10 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) - 3 | 0) >>> 0) HEAP32[i13 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) - 3 - 1;
  _memmove((HEAP32[i8 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) + 3 | 0, (HEAP32[i7 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0, HEAP32[i13 >> 2] | 0) | 0;
  HEAP8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + 3 + (HEAP32[i13 >> 2] | 0) - 1) >> 0] = 0;
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i13 >> 2] = _strlen(HEAP32[i7 >> 2] | 0) | 0;
 if ((HEAP32[i13 >> 2] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) HEAP32[i13 >> 2] = (HEAP32[i10 >> 2] | 0) - 1;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[i14 >> 2] | 0) + 1;
 i10 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i14 >> 2] | 0;
 if ((HEAP32[i13 >> 2] | 0) >>> 0 < 1) {
  HEAP8[i10 + (i8 - 1) >> 0] = 0;
  STACKTOP = i6;
  return;
 } else {
  _memmove(i10 + i8 | 0, (HEAP32[i7 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0, HEAP32[i13 >> 2] | 0) | 0;
  STACKTOP = i6;
  return;
 }
}

function _invalid_range(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) <= (HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0)) {
  L5 : do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 1 | 0) switch (HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] | 0) {
  case 0:
   {
    if (HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 16384 | 0) break L5;
    if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) break L5;
    HEAP32[i4 >> 2] = 92503;
    i7 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i7 | 0;
   }
  case 2:
   {
    if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) <= ((HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) + (((HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) != 0 ^ 1) & 1) | 0)) break L5;
    HEAP32[i4 >> 2] = 92503;
    i7 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i7 | 0;
   }
  case 4:
   {
    if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) >= (HEAP32[(HEAP32[26771] | 0) + 92 >> 2] | 0)) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) <= (HEAP32[(HEAP32[26772] | 0) + 92 >> 2] | 0)) break L5;
    HEAP32[i4 >> 2] = 92503;
    i7 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i7 | 0;
   }
  case 3:
   {
    HEAP32[i6 >> 2] = HEAP32[26771];
    while (1) {
     if (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) break;
     if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] | 0)) {
      i2 = 18;
      break;
     }
     HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2];
    }
    if ((i2 | 0) == 18) {
     HEAP32[i4 >> 2] = 92503;
     i7 = HEAP32[i4 >> 2] | 0;
     STACKTOP = i3;
     return i7 | 0;
    }
    if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) < (HEAP32[(HEAP32[i6 >> 2] | 0) + 92 >> 2] | 0)) {
     HEAP32[i4 >> 2] = 92503;
     i7 = HEAP32[i4 >> 2] | 0;
     STACKTOP = i3;
     return i7 | 0;
    }
    HEAP32[i6 >> 2] = HEAP32[26772];
    while (1) {
     if (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) break;
     if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 52 >> 2] | 0)) {
      i2 = 25;
      break;
     }
     HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 52 >> 2];
    }
    if ((i2 | 0) == 25) {
     HEAP32[i4 >> 2] = 92503;
     i7 = HEAP32[i4 >> 2] | 0;
     STACKTOP = i3;
     return i7 | 0;
    }
    if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) <= (HEAP32[(HEAP32[i6 >> 2] | 0) + 92 >> 2] | 0)) break L5;
    HEAP32[i4 >> 2] = 92503;
    i7 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i7 | 0;
   }
  case 1:
   {
    i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0;
    if ((i1 | 0) <= (_current_win_nr(0) | 0)) break L5;
    HEAP32[i4 >> 2] = 92503;
    i7 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i7 | 0;
   }
  case 5:
   {
    i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0;
    if ((i1 | 0) <= (_current_tab_nr(0) | 0)) break L5;
    HEAP32[i4 >> 2] = 92503;
    i7 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i7 | 0;
   }
  default:
   break L5;
  } while (0);
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 HEAP32[i4 >> 2] = 92503;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _check_clipboard_option() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 28 | 0;
 i4 = i2 + 24 | 0;
 i5 = i2 + 20 | 0;
 i6 = i2 + 16 | 0;
 i7 = i2 + 12 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2 + 4 | 0;
 i10 = i2;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = HEAP32[26902];
 L1 : while (1) {
  if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
  do if (!(_strncmp(HEAP32[i10 >> 2] | 0, 63102, 7) | 0)) {
   if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 7 >> 0] | 0 | 0) != 44) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 7 >> 0] | 0 | 0) {
    i1 = 7;
    break;
   }
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 7;
  } else i1 = 7; while (0);
  L9 : do if ((i1 | 0) == 7) {
   i1 = 0;
   do if (!(_strncmp(HEAP32[i10 >> 2] | 0, 63110, 11) | 0)) {
    if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 11 >> 0] | 0 | 0) != 44) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 11 >> 0] | 0 | 0) break;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 11;
    break L9;
   } while (0);
   do if (!(_strncmp(HEAP32[i10 >> 2] | 0, 63122, 10) | 0)) {
    if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 10 >> 0] | 0 | 0) != 44) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 10 >> 0] | 0 | 0) break;
    HEAP32[i4 >> 2] = 1;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 10;
    break L9;
   } while (0);
   do if (!(_strncmp(HEAP32[i10 >> 2] | 0, 63133, 14) | 0)) {
    if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 14 >> 0] | 0 | 0) != 44) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 14 >> 0] | 0 | 0) break;
    HEAP32[i5 >> 2] = 1;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 14;
    break L9;
   } while (0);
   do if (!(_strncmp(HEAP32[i10 >> 2] | 0, 63148, 12) | 0)) {
    if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 12 >> 0] | 0 | 0) != 44) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 12 >> 0] | 0 | 0) break;
    HEAP32[i6 >> 2] = 1;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 12;
    break L9;
   } while (0);
   if (_strncmp(HEAP32[i10 >> 2] | 0, 63161, 4) | 0) {
    i1 = 27;
    break L1;
   }
   if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + 4 >> 0] | 0 | 0) != 44) if (HEAPU8[(HEAP32[i10 >> 2] | 0) + 4 >> 0] | 0 | 0) {
    i1 = 27;
    break L1;
   }
   HEAP32[i7 >> 2] = 1;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 4;
  } while (0);
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 44) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 do if ((i1 | 0) == 27) {
  i7 = (_strncmp(HEAP32[i10 >> 2] | 0, 63166, 8) | 0) == 0;
  if (!(i7 & (HEAP32[i8 >> 2] | 0) == 0)) {
   HEAP32[i9 >> 2] = 92453;
   break;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 8;
  HEAP32[i8 >> 2] = _vim_regcomp(HEAP32[i10 >> 2] | 0, 1) | 0;
  if (!(HEAP32[i8 >> 2] | 0)) HEAP32[i9 >> 2] = 92453;
 } while (0);
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[26762] = HEAP32[i3 >> 2];
  HEAP32[26763] = HEAP32[i4 >> 2];
  HEAP32[26764] = HEAP32[i5 >> 2];
  HEAP32[26765] = HEAP32[i6 >> 2];
  _vim_regfree(HEAP32[26766] | 0);
  HEAP32[26766] = HEAP32[i8 >> 2];
  i11 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 } else {
  _vim_regfree(HEAP32[i8 >> 2] | 0);
  i11 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 }
 return 0;
}

function _clip_start_selection(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = 108396;
 if ((HEAPU16[(HEAP32[i8 >> 2] | 0) + 48 >> 1] | 0) == 2) _clip_clear_selection(HEAP32[i8 >> 2] | 0);
 HEAP32[i6 >> 2] = _check_row(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = _check_col(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[(HEAP32[i8 >> 2] | 0) + 8 + 4 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i8 >> 2] | 0;
 i6 = i5 + 16 | 0;
 i3 = i5 + 8 | 0;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 i3 = HEAP32[i8 >> 2] | 0;
 HEAP16[i3 + 28 >> 1] = HEAP32[i3 + 8 >> 2];
 HEAP16[(HEAP32[i8 >> 2] | 0) + 48 >> 1] = 1;
 i3 = (HEAP32[i8 >> 2] | 0) + 50 | 0;
 if (HEAP32[i7 >> 2] | 0) {
  i7 = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
  HEAP16[i3 >> 1] = i7;
  if ((i7 & 65535 | 0) > 2) HEAP16[(HEAP32[i8 >> 2] | 0) + 50 >> 1] = 0;
 } else HEAP16[i3 >> 1] = 0;
 if (HEAP32[26627] | 0) _gui_undraw_cursor();
 switch (HEAPU16[(HEAP32[i8 >> 2] | 0) + 50 >> 1] | 0) {
 case 0:
  {
   i3 = HEAP32[i8 >> 2] | 0;
   HEAP16[i3 + 30 >> 1] = HEAP32[i3 + 8 + 4 >> 2];
   i3 = (_clip_get_line_end(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) | 0) & 65535;
   HEAP16[(HEAP32[i8 >> 2] | 0) + 36 >> 1] = i3;
   i3 = HEAP32[i8 >> 2] | 0;
   i9 = i3 | 0;
   i10 = i9 + 40 | 0;
   i11 = i3 | 0;
   i12 = i11 + 8 | 0;
   HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   STACKTOP = i4;
   return;
  }
 case 1:
  {
   i3 = HEAP32[i8 >> 2] | 0;
   i7 = (HEAP32[i8 >> 2] | 0) + 8 | 0;
   _clip_get_word_boundaries(i3 | 0, HEAP32[i7 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0);
   i7 = HEAP32[i8 >> 2] | 0;
   HEAP16[i7 + 30 >> 1] = HEAP16[i7 + 34 >> 1] | 0;
   i7 = HEAP32[i8 >> 2] | 0;
   HEAP16[i7 + 32 >> 1] = HEAP16[i7 + 36 >> 1] | 0;
   i7 = HEAP32[i8 >> 2] | 0;
   _clip_invert_area(HEAP32[i7 + 8 >> 2] | 0, HEAPU16[i7 + 34 >> 1] | 0, HEAP32[i7 + 16 >> 2] | 0, HEAPU16[i7 + 36 >> 1] | 0, 2);
   i7 = HEAP32[i8 >> 2] | 0;
   HEAP32[i7 + 8 + 4 >> 2] = HEAPU16[i7 + 34 >> 1];
   i7 = HEAP32[i8 >> 2] | 0;
   HEAP32[i7 + 16 + 4 >> 2] = HEAPU16[i7 + 36 >> 1];
   i7 = HEAP32[i8 >> 2] | 0;
   i9 = i7 | 0;
   i10 = i9 + 40 | 0;
   i11 = i7 | 0;
   i12 = i11 + 8 | 0;
   HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   STACKTOP = i4;
   return;
  }
 case 2:
  {
   i7 = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0;
   _clip_invert_area(i7 | 0, 0, i7 | 0, HEAP32[10174] | 0, 2);
   HEAP32[(HEAP32[i8 >> 2] | 0) + 8 + 4 >> 2] = 0;
   HEAP32[(HEAP32[i8 >> 2] | 0) + 16 + 4 >> 2] = HEAP32[10174];
   i7 = HEAP32[i8 >> 2] | 0;
   i9 = i7 | 0;
   i10 = i9 + 40 | 0;
   i11 = i7 | 0;
   i12 = i11 + 8 | 0;
   HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   STACKTOP = i4;
   return;
  }
 default:
  {
   i7 = HEAP32[i8 >> 2] | 0;
   i9 = i7 | 0;
   i10 = i9 + 40 | 0;
   i11 = i7 | 0;
   i12 = i11 + 8 | 0;
   HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   STACKTOP = i4;
   return;
  }
 }
}

function _cursor_correct() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1 + 28 | 0;
 i3 = i1 + 24 | 0;
 i4 = i1 + 20 | 0;
 i5 = i1 + 16 | 0;
 i6 = i1 + 12 | 0;
 i7 = i1 + 8 | 0;
 i8 = i1 + 4 | 0;
 i9 = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 >> 2] = HEAP32[26971];
 HEAP32[i7 >> 2] = HEAP32[26971];
 if ((HEAP32[26756] | 0) > 0) {
  HEAP32[i6 >> 2] = (HEAP32[26756] | 0) - 1;
  HEAP32[i7 >> 2] = (HEAP32[26756] | 0) - 1;
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) == 1) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i9 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) / 2 | 0;
  if ((HEAP32[i7 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 }
 _validate_botline();
 if ((HEAP32[26756] | 0) == 0 ? (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) == ((HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0) : 0) {
  HEAP32[i7 >> 2] = 0;
  HEAP32[i9 >> 2] = ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) - 1 | 0) / 2 | 0;
  if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
 }
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 if ((HEAP32[i8 >> 2] | 0) >= ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0)) if ((HEAP32[i8 >> 2] | 0) < ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 HEAP32[i5 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
  do if ((HEAP32[i4 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) {
   if ((HEAP32[i4 >> 2] | 0) > (HEAP32[i2 >> 2] | 0)) if ((HEAP32[i2 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) break;
   i9 = _plines(HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i9;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
  } while (0);
  do if ((HEAP32[i2 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) {
   if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) if ((HEAP32[i4 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) break;
   i9 = _plines(HEAP32[i3 >> 2] | 0) | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i9;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  } while (0);
 }
 i2 = HEAP32[i3 >> 2] | 0;
 do if ((HEAP32[i5 >> 2] | 0) == 0 ? 1 : (HEAP32[i3 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i2; else {
  if ((i2 | 0) > (HEAP32[i5 >> 2] | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i5 >> 2];
   break;
  }
  if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i3 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) > 1) {
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i3 >> 2];
   i7 = (HEAP32[26881] | 0) + 108 | 0;
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -28;
  }
  if ((HEAP32[i8 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i5 >> 2];
   i7 = (HEAP32[26881] | 0) + 108 | 0;
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -28;
  }
 } while (0);
 i5 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 128;
 STACKTOP = i1;
 return;
}

function _clip_copy_modeless_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i2 + 44 | 0;
 i4 = i2 + 40 | 0;
 i5 = i2 + 36 | 0;
 i6 = i2 + 32 | 0;
 i7 = i2 + 28 | 0;
 i8 = i2 + 24 | 0;
 i9 = i2 + 20 | 0;
 i10 = i2 + 16 | 0;
 i11 = i2 + 12 | 0;
 i12 = i2 + 8 | 0;
 i13 = i2 + 4 | 0;
 i14 = i2;
 HEAP32[i2 + 48 >> 2] = i1;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[27101];
 HEAP32[i12 >> 2] = HEAP32[27102];
 HEAP32[i13 >> 2] = HEAP32[27103];
 HEAP32[i14 >> 2] = HEAP32[27104];
 if (!(HEAP32[26691] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i11 >> 2] | 0) > (HEAP32[i13 >> 2] | 0)) {
  HEAP32[i5 >> 2] = i1;
  HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i13 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i14 >> 2] = HEAP32[i5 >> 2];
 } else if ((i1 | 0) == (HEAP32[i13 >> 2] | 0)) if ((HEAP32[i12 >> 2] | 0) > (HEAP32[i14 >> 2] | 0)) {
  HEAP32[i5 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i14 >> 2] = HEAP32[i5 >> 2];
 }
 HEAP32[i10 >> 2] = (Math_imul((HEAP32[i13 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) + 1 | 0, HEAP32[10174] | 0) | 0) + 1;
 HEAP32[i3 >> 2] = _lalloc(HEAP32[i10 >> 2] | 0, 1) | 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) > (HEAP32[i13 >> 2] | 0)) break;
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i12 >> 2]; else HEAP32[i6 >> 2] = 0;
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i14 >> 2]; else HEAP32[i7 >> 2] = HEAP32[10174];
  HEAP32[i8 >> 2] = _clip_get_line_end(HEAP32[i5 >> 2] | 0) | 0;
  do if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[10174] | 0)) {
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) if ((HEAP32[i7 >> 2] | 0) <= (HEAP32[i8 >> 2] | 0)) break;
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
   if ((HEAP32[i7 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
   if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) HEAP32[i9 >> 2] = 1;
  } while (0);
  if ((HEAP32[i5 >> 2] | 0) > (HEAP32[i11 >> 2] | 0)) if (!(HEAP8[(HEAP32[26694] | 0) + ((HEAP32[i5 >> 2] | 0) - 1) >> 0] | 0)) {
   i10 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = i10 + 1;
   HEAP8[i10 >> 0] = 10;
  }
  if ((HEAP32[i5 >> 2] | 0) < (HEAP32[26696] | 0)) if ((HEAP32[i7 >> 2] | 0) <= (HEAP32[26697] | 0)) {
   i10 = HEAP32[i6 >> 2] | 0;
   _strncpy(HEAP32[i4 >> 2] | 0, (HEAP32[26691] | 0) + (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0) + i10 | 0, (HEAP32[i7 >> 2] | 0) - i10 | 0) | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - (HEAP32[i6 >> 2] | 0));
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if (HEAP32[i9 >> 2] | 0) {
  i9 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i9 + 1;
  HEAP8[i9 >> 0] = 10;
 }
 _clip_free_selection(108396);
 _clip_own_selection(108396);
 i9 = HEAP32[i3 >> 2] | 0;
 _clip_yank_selection(0, i9 | 0, (HEAP32[i4 >> 2] | 0) - i9 | 0, 108396);
 _clip_gen_set_selection(108396);
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _main_loop(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i4 + 96 | 0;
 i6 = i4 + 92 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 _clear_oparg(i7);
 while (1) {
  if (!((HEAP32[i5 >> 2] | 0) != 0 ^ 1)) {
   i3 = 56;
   break;
  }
  if (_stuff_empty() | 0) {
   HEAP32[26738] = 0;
   if (HEAP32[26737] | 0) _check_timestamps(0) | 0;
   if (HEAP32[26721] | 0) _wait_return(0);
   if (HEAP32[26843] | 0) {
    i2 = (_goto_im() | 0) == 0;
    if (!(i2 | (HEAP32[26788] | 0) != 0)) {
     HEAP32[26843] = 0;
     _stuffReadbuff(94469);
     HEAP32[26709] = 0;
    }
   }
  }
  if (HEAP32[26834] | 0) {
   if ((HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[26841] | 0) != 0 ^ 1 | (HEAP32[26798] | 0) != 0) i3 = 15; else if (HEAP32[i8 >> 2] | 0) {
    HEAP32[26798] = 1;
    HEAP32[10180] = 1;
   } else i3 = 15;
   if ((i3 | 0) == 15) {
    i3 = 0;
    if (!((HEAP32[26841] | 0) != 0 & (HEAP32[26798] | 0) != 0)) {
     if (!(HEAP32[26723] | 0)) _vgetc() | 0;
     HEAP32[26834] = 0;
    }
   }
   HEAP32[i8 >> 2] = 1;
  } else HEAP32[i8 >> 2] = 0;
  if (!(HEAP32[26798] | 0)) HEAP32[26710] = 0;
  HEAP32[26723] = 0;
  do if ((HEAP32[26829] | 0) != 0 | (HEAP32[26798] | 0) != 0) HEAP32[26829] = 0; else {
   if (!(HEAP32[26830] | 0)) if (!(_stuff_empty() | 0)) break;
   _gui_may_resize_shell();
   do if (!(HEAP32[26796] | 0)) if (_has_cursormoved() | 0) {
    if ((HEAP32[26849] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[26850] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
    if (_has_cursormoved() | 0) _apply_autocmds(30, 0, 0, 0, HEAP32[26773] | 0) | 0;
    i2 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[26849] = HEAP32[i2 >> 2];
    HEAP32[26850] = HEAP32[i2 + 4 >> 2];
   } while (0);
   if (!(HEAP32[26796] | 0)) if (_has_textchanged() | 0) if ((HEAP32[(HEAP32[26773] | 0) + 144 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 112 + 8 >> 2] | 0)) {
    _apply_autocmds(84, 0, 0, 0, HEAP32[26773] | 0) | 0;
    i2 = HEAP32[26773] | 0;
    HEAP32[i2 + 144 >> 2] = HEAP32[i2 + 112 + 8 >> 2];
   }
   _update_topline();
   _validate_cursor();
   do if (HEAP32[26788] | 0) _update_curbuf(20); else {
    if (HEAP32[26828] | 0) {
     _gui_disable_flush();
     _update_screen(0) | 0;
     _gui_enable_flush();
     break;
    }
    if ((HEAP32[26699] | 0) != 0 | (HEAP32[26700] | 0) != 0) _showmode() | 0;
   } while (0);
   _redraw_statuslines();
   if (HEAP32[26706] | 0) {
    HEAP32[i9 >> 2] = HEAP32[26706];
    _msg_attr(HEAP32[i9 >> 2] | 0, HEAP32[26707] | 0) | 0;
    _vim_free(HEAP32[i9 >> 2] | 0);
   }
   if (HEAP32[26709] | 0) {
    _fileinfo(0, 1, 0);
    HEAP32[26709] = 0;
   }
   HEAP32[26718] = 0;
   HEAP32[26880] = 0;
   HEAP32[26712] = 0;
   _may_clear_sb_text();
   _showruler(0);
   _setcursor();
   _cursor_on();
   HEAP32[26830] = 0;
  } while (0);
  if (HEAP32[26757] | 0) _gui_mouse_correct();
  _update_curswant();
  if (HEAP32[26798] | 0) {
   if (HEAP32[i6 >> 2] | 0) {
    i3 = 56;
    break;
   }
   _do_exmode((HEAP32[26798] | 0) == 2 & 1);
  } else _normal_cmd(i7, 1);
 }
 if ((i3 | 0) == 56) {
  STACKTOP = i4;
  return;
 }
}

function _mf_new(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = _mf_release(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
 do if ((HEAP32[i8 >> 2] | 0) == 0 & (HEAP32[i11 >> 2] | 0) != 0) if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) {
  i3 = (HEAP32[i10 >> 2] | 0) == 0;
  if ((HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) {
   if (i3) {
    i2 = _mf_alloc_bhdr(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
    HEAP32[i10 >> 2] = i2;
    if (!i2) {
     HEAP32[i6 >> 2] = 0;
     i13 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i13 | 0;
    }
   }
   HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2];
   i2 = (HEAP32[i11 >> 2] | 0) + 8 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
   i2 = (HEAP32[i11 >> 2] | 0) + 24 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
   break;
  }
  i2 = HEAP32[i7 >> 2] | 0;
  if (!i3) {
   HEAP32[i11 >> 2] = _mf_rem_free(i2) | 0;
   HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2];
   _vim_free(HEAP32[i11 >> 2] | 0);
   break;
  }
  i3 = _alloc(Math_imul(HEAP32[i2 + 592 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) | 0;
  HEAP32[i12 >> 2] = i3;
  if (i3 | 0) {
   HEAP32[i10 >> 2] = _mf_rem_free(HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] = HEAP32[i12 >> 2];
   break;
  }
  HEAP32[i6 >> 2] = 0;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else i4 = 13; else i4 = 13; while (0);
 do if ((i4 | 0) == 13) {
  if (!(HEAP32[i10 >> 2] | 0)) {
   i12 = _mf_alloc_bhdr(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i12;
   if (!i12) {
    HEAP32[i6 >> 2] = 0;
    i13 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i13 | 0;
   }
  }
  i12 = HEAP32[i7 >> 2] | 0;
  if (HEAP32[i8 >> 2] | 0) {
   i11 = i12 + 580 | 0;
   i3 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i3 + -1;
   HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = i3;
   i3 = (HEAP32[i7 >> 2] | 0) + 584 | 0;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
   break;
  } else {
   HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = HEAP32[i12 + 576 >> 2];
   i12 = (HEAP32[i7 >> 2] | 0) + 576 | 0;
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
   break;
  }
 } while (0);
 HEAP8[(HEAP32[i10 >> 2] | 0) + 28 >> 0] = 3;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 596 >> 2] = 1;
 HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] = HEAP32[i9 >> 2];
 _mf_ins_used(HEAP32[i7 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 _mf_ins_hash(HEAP32[i7 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 _memset(HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] | 0, 0, Math_imul(HEAP32[(HEAP32[i7 >> 2] | 0) + 592 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) | 0;
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 i13 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i13 | 0;
}

function _mch_FullName(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 4144 | 0;
 i7 = i6;
 i8 = i6 + 36 | 0;
 i9 = i6 + 32 | 0;
 i10 = i6 + 28 | 0;
 i11 = i6 + 24 | 0;
 i12 = i6 + 20 | 0;
 i13 = i6 + 16 | 0;
 i14 = i6 + 12 | 0;
 i15 = i6 + 40 | 0;
 i16 = i6 + 8 | 0;
 i17 = i6 + 4 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i14 >> 2] = -1;
 HEAP32[i17 >> 2] = 1;
 if (HEAP32[i12 >> 2] | 0) i5 = 3; else if (!(_mch_isFullName(HEAP32[i9 >> 2] | 0) | 0)) i5 = 3;
 do if ((i5 | 0) == 3) {
  i12 = _vim_strrchr(HEAP32[i9 >> 2] | 0, 47) | 0;
  HEAP32[i16 >> 2] = i12;
  if (i12 | 0) if ((HEAP32[i16 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) break;
  L8 : do if (HEAP32[i16 >> 2] | 0) {
   if (!(HEAP32[26291] | 0)) {
    HEAP32[i7 >> 2] = 0;
    HEAP32[i14 >> 2] = _open(98579, 0, i7) | 0;
    if ((HEAP32[i14 >> 2] | 0) >= 0) if ((_fchdir(HEAP32[i14 >> 2] | 0) | 0) < 0) {
     _close(HEAP32[i14 >> 2] | 0) | 0;
     HEAP32[i14 >> 2] = -1;
     HEAP32[26291] = 1;
    }
   }
   do if ((HEAP32[i14 >> 2] | 0) < 0) {
    if (_mch_dirname(i15, 4096) | 0) if (!(_mch_chdir(i15) | 0)) break;
    HEAP32[i16 >> 2] = 0;
    HEAP32[i17 >> 2] = 0;
    break L8;
   } while (0);
   if (((HEAP32[i16 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) | 0) >= (HEAP32[i11 >> 2] | 0)) {
    HEAP32[i17 >> 2] = 0;
    break;
   }
   i12 = HEAP32[i9 >> 2] | 0;
   _vim_strncpy(HEAP32[i10 >> 2] | 0, i12 | 0, (HEAP32[i16 >> 2] | 0) - i12 | 0);
   if (_mch_chdir(HEAP32[i10 >> 2] | 0) | 0) HEAP32[i17 >> 2] = 0; else HEAP32[i9 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
   HEAP8[HEAP32[i10 >> 2] >> 0] = 0;
  } while (0);
  if (!(_mch_dirname(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0)) {
   HEAP32[i17 >> 2] = 0;
   HEAP8[HEAP32[i10 >> 2] >> 0] = 0;
  }
  if (HEAP32[i16 >> 2] | 0) {
   if ((HEAP32[i14 >> 2] | 0) >= 0) {
    if ((HEAP32[26888] | 0) >= 5) {
     _verbose_enter();
     _msg(72007) | 0;
     _verbose_leave();
    }
    HEAP32[i13 >> 2] = _fchdir(HEAP32[i14 >> 2] | 0) | 0;
    _close(HEAP32[i14 >> 2] | 0) | 0;
   } else HEAP32[i13 >> 2] = _mch_chdir(i15) | 0;
   if (HEAP32[i13 >> 2] | 0) _emsg(93442) | 0;
  }
  HEAP32[i13 >> 2] = _strlen(HEAP32[i10 >> 2] | 0) | 0;
  if ((HEAP32[i13 >> 2] | 0) >= ((HEAP32[i11 >> 2] | 0) - 1 | 0)) {
   HEAP32[i17 >> 2] = 0;
   break;
  }
  if ((HEAP32[i13 >> 2] | 0) > 0) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) - 1) >> 0] | 0) != 47) if (HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) if (_strcmp(HEAP32[i9 >> 2] | 0, 98579) | 0) _strcat(HEAP32[i10 >> 2] | 0, 72032) | 0;
 } while (0);
 if (HEAP32[i17 >> 2] | 0) {
  i17 = _strlen(HEAP32[i10 >> 2] | 0) | 0;
  i13 = i17 + (_strlen(HEAP32[i9 >> 2] | 0) | 0) | 0;
  if ((i13 | 0) < (HEAP32[i11 >> 2] | 0)) {
   if (_strcmp(HEAP32[i9 >> 2] | 0, 98579) | 0) _strcat(HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = 1;
   i18 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i6;
   return i18 | 0;
  }
 }
 HEAP32[i8 >> 2] = 0;
 i18 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i6;
 return i18 | 0;
}

function _vim_getenv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _getenv(HEAP32[i5 >> 2] | 0) | 0;
 if (HEAP32[i7 >> 2] | 0) if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) HEAP32[i7 >> 2] = 0;
 if (HEAP32[i7 >> 2] | 0) {
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i9 >> 2] = (_strcmp(HEAP32[i5 >> 2] | 0, 63936) | 0) == 0 & 1;
 if (!(HEAP32[i9 >> 2] | 0)) if (_strcmp(HEAP32[i5 >> 2] | 0, 63932) | 0) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 do if (HEAP32[i9 >> 2] | 0) if (!(HEAPU8[114072] | 0)) {
  HEAP32[i7 >> 2] = _getenv(63932) | 0;
  if (HEAP32[i7 >> 2] | 0) if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) HEAP32[i7 >> 2] = 0;
  if (HEAP32[i7 >> 2] | 0) {
   HEAP32[i7 >> 2] = _vim_version_dir(HEAP32[i7 >> 2] | 0) | 0;
   if (HEAP32[i7 >> 2] | 0) {
    HEAP32[HEAP32[i6 >> 2] >> 2] = 1;
    break;
   } else {
    HEAP32[i7 >> 2] = _getenv(63932) | 0;
    break;
   }
  }
 } while (0);
 do if (!(HEAP32[i7 >> 2] | 0)) {
  if (HEAP32[26927] | 0) if (!(_vim_strchr(HEAP32[26927] | 0, 36) | 0)) HEAP32[i7 >> 2] = HEAP32[26927];
  if (HEAP32[i7 >> 2] | 0) {
   HEAP32[i8 >> 2] = _gettail(HEAP32[i7 >> 2] | 0) | 0;
   if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26927] | 0)) HEAP32[i8 >> 2] = _remove_tail(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 60105) | 0;
   if (!(HEAP32[i9 >> 2] | 0)) {
    HEAP32[i8 >> 2] = _remove_tail(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 60109) | 0;
    HEAP32[i8 >> 2] = _remove_tail(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 60117) | 0;
   }
   if ((HEAP32[i8 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) if (_vim_ispathsep(HEAPU8[(HEAP32[i8 >> 2] | 0) + -1 >> 0] | 0) | 0) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
   i5 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = _vim_strnsave(i5 | 0, (HEAP32[i8 >> 2] | 0) - i5 | 0) | 0;
   if (HEAP32[i7 >> 2] | 0) if (!(_mch_isdir(HEAP32[i7 >> 2] | 0) | 0)) {
    if (!(HEAP32[i7 >> 2] | 0)) break;
    _vim_free(HEAP32[i7 >> 2] | 0);
    HEAP32[i7 >> 2] = 0;
    break;
   }
   HEAP32[HEAP32[i6 >> 2] >> 2] = 1;
  }
 } while (0);
 do if (!(HEAP32[i7 >> 2] | 0)) {
  if (HEAP32[i9 >> 2] | 0) if (HEAPU8[114072] | 0) {
   HEAP32[i7 >> 2] = 114072;
   HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
   break;
  }
  if (HEAPU8[72231] | 0) {
   if (HEAP32[i9 >> 2] | 0) {
    i8 = _vim_version_dir(72231) | 0;
    HEAP32[i7 >> 2] = i8;
    if (i8 | 0) {
     HEAP32[HEAP32[i6 >> 2] >> 2] = 1;
     break;
    }
   }
   HEAP32[i7 >> 2] = 72231;
   HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
  }
 } while (0);
 do if (HEAP32[i7 >> 2] | 0) {
  i6 = HEAP32[i7 >> 2] | 0;
  if (HEAP32[i9 >> 2] | 0) {
   _vim_setenv(63936, i6);
   HEAP32[26729] = 1;
   break;
  } else {
   _vim_setenv(63932, i6);
   HEAP32[26728] = 1;
   break;
  }
 } while (0);
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _highlight_clear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 8 >> 2] = 1;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 12 >> 2] = 0;
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 16 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 16 >> 2] | 0);
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 16 >> 2] = 0;
 }
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 20 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 20 >> 2] | 0);
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 20 >> 2] = 0;
 }
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 24 >> 2] = 0;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 28 >> 2] = 0;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 32 >> 2] = 0;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 36 >> 2] = 0;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 40 >> 2] = 0;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 44 >> 2] = 0;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 72 >> 2] = 0;
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 76 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 76 >> 2] | 0);
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 76 >> 2] = 0;
 }
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 80 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 80 >> 2] | 0);
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 80 >> 2] = 0;
 }
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 84 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 84 >> 2] | 0);
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 84 >> 2] = 0;
 }
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 48 >> 2] = -11111;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 52 >> 2] = -11111;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 56 >> 2] = -11111;
 _gui_mch_free_font(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 60 >> 2] | 0);
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 60 >> 2] = 0;
 if (!(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 64 >> 2] | 0)) {
  i4 = HEAP32[26490] | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  i6 = i4 + (i5 * 96 | 0) | 0;
  i7 = i6 + 68 | 0;
  HEAP32[i7 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 64 >> 2] | 0);
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i3 >> 2] | 0) * 96 | 0) + 64 >> 2] = 0;
 i4 = HEAP32[26490] | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 i6 = i4 + (i5 * 96 | 0) | 0;
 i7 = i6 + 68 | 0;
 HEAP32[i7 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _showmode() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1 + 24 | 0;
 i3 = i1 + 20 | 0;
 i4 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i8 = i1;
 HEAP32[i4 >> 2] = 0;
 if ((HEAP32[26988] | 0) != 0 & (HEAP32[26809] | 0) == 0) if ((HEAP32[10180] & 16 | 0) != 0 | (HEAP32[26806] | 0) != 0) i9 = 1; else i9 = (HEAP32[26788] | 0) != 0; else i9 = 0;
 HEAP32[i5 >> 2] = i9 & 1;
 do if ((HEAP32[i5 >> 2] | 0) != 0 | (HEAP32[26800] | 0) != 0) {
  if (_redrawing() | 0) {
   i9 = (_char_avail() | 0) == 0;
   if (!((i9 | (HEAP32[27161] | 0) != 0) ^ 1 | (HEAP32[26809] | 0) != 0)) {
    HEAP32[i7 >> 2] = HEAP32[26721];
    _check_for_delay(0);
    HEAP32[i3 >> 2] = HEAP32[26700];
    if (HEAP32[26700] | 0) if ((HEAP32[26876] | 0) < ((HEAP32[10173] | 0) - 1 | 0)) _msg_clr_cmdline();
    _msg_pos_mode();
    _cursor_off();
    HEAP32[i6 >> 2] = HEAP32[27057];
    if (HEAP32[i5 >> 2] | 0) {
     _msg_puts_attr(97173, HEAP32[i6 >> 2] | 0);
     do if (HEAP32[10180] & 64 | 0) _msg_puts_attr(74386, HEAP32[i6 >> 2] | 0); else {
      if (HEAP32[10180] & 16 | 0) {
       _msg_puts_attr(74395, HEAP32[i6 >> 2] | 0);
       break;
      }
      if ((HEAP32[26806] | 0) == 73 | (HEAP32[26806] | 0) == 65) {
       _msg_puts_attr(74403, HEAP32[i6 >> 2] | 0);
       break;
      }
      if ((HEAP32[26806] | 0) == 82) {
       _msg_puts_attr(74413, HEAP32[i6 >> 2] | 0);
       break;
      }
      if ((HEAP32[26806] | 0) == 86) _msg_puts_attr(74424, HEAP32[i6 >> 2] | 0);
     } while (0);
     if ((HEAP32[10180] & 16 | 0) != 0 & (HEAP32[26961] | 0) != 0) _msg_puts_attr(74436, HEAP32[i6 >> 2] | 0);
     if (HEAP32[26788] | 0) {
      switch ((HEAP32[26789] | 0 ? 4 : 0) + (((HEAP32[10179] | 0) == 22 & 1) << 1) + ((HEAP32[10179] | 0) == 86 & 1) | 0) {
      case 0:
       {
        HEAP32[i8 >> 2] = 74445;
        break;
       }
      case 1:
       {
        HEAP32[i8 >> 2] = 74453;
        break;
       }
      case 2:
       {
        HEAP32[i8 >> 2] = 74466;
        break;
       }
      case 4:
       {
        HEAP32[i8 >> 2] = 74480;
        break;
       }
      case 5:
       {
        HEAP32[i8 >> 2] = 74488;
        break;
       }
      default:
       HEAP32[i8 >> 2] = 74501;
      }
      _msg_puts_attr(HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0);
     }
     _msg_puts_attr(74515, HEAP32[i6 >> 2] | 0);
     HEAP32[i3 >> 2] = 1;
    }
    if (HEAP32[26800] | 0) {
     _recording_mode(HEAP32[i6 >> 2] | 0);
     HEAP32[i3 >> 2] = 1;
    }
    HEAP32[26701] = 1;
    if ((HEAP32[i3 >> 2] | 0) != 0 | (HEAP32[26700] | 0) != 0) _msg_clr_eos();
    HEAP32[26711] = 0;
    HEAP32[i4 >> 2] = HEAP32[27043];
    HEAP32[27043] = 0;
    HEAP32[26721] = HEAP32[i7 >> 2];
    break;
   }
  }
  HEAP32[26699] = 1;
  HEAP32[i2 >> 2] = 0;
  i10 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i10 | 0;
 } else if ((HEAP32[26700] | 0) != 0 & (HEAP32[26809] | 0) == 0) _msg_clr_cmdline(); while (0);
 HEAP32[26699] = 0;
 HEAP32[26700] = 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 i10 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i10 | 0;
}

function _addstate_here(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 32 | 0;
 i8 = i6 + 28 | 0;
 i9 = i6 + 24 | 0;
 i10 = i6 + 20 | 0;
 i11 = i6 + 16 | 0;
 i12 = i6 + 12 | 0;
 i13 = i6 + 8 | 0;
 i14 = i6 + 4 | 0;
 i15 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
 HEAP32[i14 >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
 _addstate(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0 - (HEAP32[i14 >> 2] | 0) - 10 | 0) | 0;
 if (((HEAP32[i14 >> 2] | 0) + 1 | 0) == (HEAP32[i12 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i13 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 if (!(HEAP32[i13 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 do if ((HEAP32[i13 >> 2] | 0) == 1) {
  i12 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
  _memcpy(i12 + ((HEAP32[i14 >> 2] | 0) * 352 | 0) | 0, i12 + (((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) - 1 | 0) * 352 | 0) | 0, 352) | 0;
 } else if ((HEAP32[i13 >> 2] | 0) > 1) {
  i12 = HEAP32[i7 >> 2] | 0;
  if (((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) - 1 | 0) < (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0)) {
   i10 = HEAP32[i14 >> 2] | 0;
   _memmove((HEAP32[i12 >> 2] | 0) + ((i10 + (HEAP32[i13 >> 2] | 0) | 0) * 352 | 0) | 0, (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + ((i10 + 1 | 0) * 352 | 0) | 0, ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) - i10 - 1 | 0) * 352 | 0) | 0;
   i10 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
   _memmove(i10 + ((HEAP32[i14 >> 2] | 0) * 352 | 0) | 0, i10 + (((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) - 1 | 0) * 352 | 0) | 0, (HEAP32[i13 >> 2] | 0) * 352 | 0) | 0;
   break;
  }
  HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = (((HEAP32[i12 + 8 >> 2] | 0) * 3 | 0) / 2 | 0) + 50;
  HEAP32[i15 >> 2] = _alloc((HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) * 352 | 0) | 0;
  if (!(HEAP32[i15 >> 2] | 0)) {
   STACKTOP = i6;
   return;
  } else {
   _memmove(HEAP32[i15 >> 2] | 0, HEAP32[HEAP32[i7 >> 2] >> 2] | 0, (HEAP32[i14 >> 2] | 0) * 352 | 0) | 0;
   i12 = HEAP32[i13 >> 2] | 0;
   _memmove((HEAP32[i15 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) * 352 | 0) | 0, (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + (((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) - i12 | 0) * 352 | 0) | 0, (i12 | 0) * 352 | 0) | 0;
   i12 = HEAP32[i14 >> 2] | 0;
   i10 = HEAP32[i13 >> 2] | 0;
   _memmove((HEAP32[i15 >> 2] | 0) + ((i12 + i10 | 0) * 352 | 0) | 0, (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + ((i12 + 1 | 0) * 352 | 0) | 0, ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) - i10 - i12 - 1 | 0) * 352 | 0) | 0;
   _vim_free(HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
   HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i15 >> 2];
   break;
  }
 } while (0);
 i15 = (HEAP32[i7 >> 2] | 0) + 4 | 0;
 HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
 HEAP32[HEAP32[i11 >> 2] >> 2] = (HEAP32[i14 >> 2] | 0) - 1;
 STACKTOP = i6;
 return;
}

function _mch_can_exe(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 do if (HEAP32[i9 >> 2] | 0) if (!(_mch_isFullName(HEAP32[i7 >> 2] | 0) | 0)) {
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 46) {
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == 47) break;
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == 46) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0] | 0) == 47) break;
  }
  HEAP32[i11 >> 2] = _getenv(72034) | 0;
  if (HEAP32[i11 >> 2] | 0) if (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) {
   i3 = _strlen(HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = _alloc(i3 + (_strlen(HEAP32[i11 >> 2] | 0) | 0) + 2 | 0) | 0;
   if (!(HEAP32[i10 >> 2] | 0)) {
    HEAP32[i6 >> 2] = -1;
    i14 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i14 | 0;
   }
   while (1) {
    HEAP32[i12 >> 2] = _strchr(HEAP32[i11 >> 2] | 0, 58) | 0;
    if (!(HEAP32[i12 >> 2] | 0)) {
     i3 = HEAP32[i11 >> 2] | 0;
     HEAP32[i12 >> 2] = i3 + (_strlen(HEAP32[i11 >> 2] | 0) | 0);
    }
    i3 = HEAP32[i10 >> 2] | 0;
    if (((HEAP32[i12 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0) <= 1) _strcpy(i3, 72039) | 0; else {
     i2 = HEAP32[i11 >> 2] | 0;
     _vim_strncpy(i3, i2 | 0, (HEAP32[i12 >> 2] | 0) - i2 | 0);
     _add_pathsep(HEAP32[i10 >> 2] | 0);
    }
    _strcat(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
    HEAP32[i13 >> 2] = _executable_file(HEAP32[i10 >> 2] | 0) | 0;
    if ((HEAP32[i13 >> 2] | 0) == 1) {
     i4 = 27;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0) != 58) break;
    HEAP32[i11 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
   }
   do if ((i4 | 0) == 27) if (HEAP32[i8 >> 2] | 0) {
    i2 = HEAP32[i10 >> 2] | 0;
    if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) != 47) {
     i3 = _FullName_save(i2, 1) | 0;
     HEAP32[HEAP32[i8 >> 2] >> 2] = i3;
     break;
    } else {
     i3 = _vim_strsave(i2) | 0;
     HEAP32[HEAP32[i8 >> 2] >> 2] = i3;
     break;
    }
   } while (0);
   _vim_free(HEAP32[i10 >> 2] | 0);
   HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
   i14 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i14 | 0;
  }
  HEAP32[i6 >> 2] = -1;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 } while (0);
 i13 = _gettail(HEAP32[i7 >> 2] | 0) | 0;
 if ((i13 | 0) != (HEAP32[i7 >> 2] | 0)) if (_executable_file(HEAP32[i7 >> 2] | 0) | 0) {
  do if (HEAP32[i8 >> 2] | 0) {
   i13 = HEAP32[i7 >> 2] | 0;
   if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) != 47) {
    i10 = _FullName_save(i13, 1) | 0;
    HEAP32[HEAP32[i8 >> 2] >> 2] = i10;
    break;
   } else {
    i10 = _vim_strsave(i13) | 0;
    HEAP32[HEAP32[i8 >> 2] >> 2] = i10;
    break;
   }
  } while (0);
  HEAP32[i6 >> 2] = 1;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 HEAP32[i6 >> 2] = 0;
 i14 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i14 | 0;
}

function _set_termname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 36 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 20 | 0;
 i10 = i3 + 16 | 0;
 i11 = i3 + 12 | 0;
 i12 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 if (HEAP32[26787] | 0) {
  HEAP32[i4 >> 2] = 1;
  i13 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i13 | 0;
 }
 if (_term_is_builtin(HEAP32[i5 >> 2] | 0) | 0) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 8;
 HEAP32[i6 >> 2] = _find_builtin_term(HEAP32[i5 >> 2] | 0) | 0;
 do if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
  _report_term_error(HEAP32[i9 >> 2] | 0, HEAP32[i5 >> 2] | 0);
  if ((HEAP32[10177] | 0) == 2) {
   HEAP32[i5 >> 2] = 78886;
   _report_default_term(HEAP32[i5 >> 2] | 0);
   _set_string_option_direct(78891, -1, HEAP32[i5 >> 2] | 0, 1, 0);
   _fflush(HEAP32[10211] | 0) | 0;
   break;
  }
  _screen_start();
  _wait_return(1);
  HEAP32[i4 >> 2] = 0;
  i13 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i13 | 0;
 } while (0);
 _out_flush();
 _clear_termoptions();
 _parse_builtin_tcap(HEAP32[i5 >> 2] | 0);
 if (_term_is_gui(HEAP32[i5 >> 2] | 0) | 0) {
  _out_flush();
  _gui_init();
  if (!(HEAP32[26627] | 0)) {
   HEAP32[i4 >> 2] = 0;
   i13 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i13 | 0;
  }
 }
 if (!(_strcmp(HEAP32[i5 >> 2] | 0, 78896) | 0)) HEAP32[26561] = 78903; else HEAP32[26561] = 114072;
 if (!(HEAP32[26627] | 0)) _get_stty();
 do if (!(HEAP32[26627] | 0)) {
  HEAP32[i10 >> 2] = _find_termcode(78907) | 0;
  HEAP32[i11 >> 2] = _find_termcode(78910) | 0;
  if (!(HEAP32[i10 >> 2] | 0)) i2 = 20; else if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) i2 = 20;
  if ((i2 | 0) == 20) {
   HEAP32[i10 >> 2] = 78913;
   _add_termcode(78907, 78913, 0);
  }
  if (HEAP32[i11 >> 2] | 0) if (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) break;
  if (HEAP32[i10 >> 2] | 0) if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) == 127) break;
  _add_termcode(78910, 78915, 0);
 } while (0);
 HEAP32[26867] = _vim_is_xterm(HEAP32[i5 >> 2] | 0) | 0;
 if (_vim_is_fastterm(HEAP32[i5 >> 2] | 0) | 0) HEAP32[27016] = 1;
 _ttest(1);
 HEAP32[26781] = 1;
 _set_term_defaults();
 if ((HEAP32[10177] | 0) != 2) {
  _starttermcap();
  _setmouse();
 }
 if ((HEAP32[i7 >> 2] | 0) <= 0 | (HEAP32[i8 >> 2] | 0) <= 0) {
  HEAP32[i7 >> 2] = 80;
  HEAP32[i8 >> 2] = 24;
 }
 _set_shellsize(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0);
 if ((HEAP32[10177] | 0) != 2) {
  if (HEAP32[26733] | 0) _scroll_region_reset();
  _check_map_keycodes();
  _set_bufref(i12, HEAP32[26773] | 0);
  HEAP32[26773] = HEAP32[26771];
  while (1) {
   if (!(HEAP32[26773] | 0)) break;
   if (HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0) _apply_autocmds(81, 0, 0, 0, HEAP32[26773] | 0) | 0;
   HEAP32[26773] = HEAP32[(HEAP32[26773] | 0) + 48 >> 2];
  }
  if (_bufref_valid(i12) | 0) HEAP32[26773] = HEAP32[i12 >> 2];
 }
 HEAP32[i4 >> 2] = 1;
 i13 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i13 | 0;
}

function _pathcmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 20 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 8 | 0;
 i13 = i5 + 4 | 0;
 i14 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= 0) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
   if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  }
  HEAP32[i12 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0];
  HEAP32[i13 >> 2] = HEAPU8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0];
  i15 = (HEAP32[i13 >> 2] | 0) == 0;
  if (!(HEAP32[i12 >> 2] | 0)) {
   i4 = 6;
   break;
  }
  if (i15) {
   i4 = 10;
   break;
  }
  i3 = HEAP32[i12 >> 2] | 0;
  if (HEAP32[26918] | 0) {
   i2 = _toupper(i3) | 0;
   if ((i2 | 0) != (_toupper(HEAP32[i13 >> 2] | 0) | 0)) {
    i4 = 14;
    break;
   }
  } else if ((i3 | 0) != (HEAP32[i13 >> 2] | 0)) {
   i4 = 14;
   break;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 do if ((i4 | 0) == 6) {
  if (!i15) {
   HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
   break;
  }
  HEAP32[i6 >> 2] = 0;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 } else if ((i4 | 0) == 10) HEAP32[i14 >> 2] = HEAP32[i7 >> 2]; else if ((i4 | 0) == 14) {
  if (_vim_ispathsep(HEAP32[i12 >> 2] | 0) | 0) {
   HEAP32[i6 >> 2] = -1;
   i16 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i16 | 0;
  }
  if (_vim_ispathsep(HEAP32[i13 >> 2] | 0) | 0) {
   HEAP32[i6 >> 2] = 1;
   i16 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i16 | 0;
  }
  i9 = HEAP32[i12 >> 2] | 0;
  if (HEAP32[26918] | 0) {
   i3 = _toupper(i9) | 0;
   i17 = i3 - (_toupper(HEAP32[i13 >> 2] | 0) | 0) | 0;
  } else i17 = i9 - (HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = i17;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 } while (0);
 if (!(HEAP32[i14 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 }
 HEAP32[i12 >> 2] = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0];
 HEAP32[i13 >> 2] = HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) + 1 >> 0];
 if ((HEAP32[i13 >> 2] | 0) == 0 & (HEAP32[i10 >> 2] | 0) > 0) {
  i13 = (_vim_ispathsep(HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) + -1 >> 0] | 0) | 0) == 0;
  if (i13 & (HEAP32[i12 >> 2] | 0) == 47) {
   HEAP32[i6 >> 2] = 0;
   i16 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i16 | 0;
  }
 }
 if ((HEAP32[i14 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) {
  HEAP32[i6 >> 2] = -1;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 } else {
  HEAP32[i6 >> 2] = 1;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 }
 return 0;
}

function _insertchar(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 32 | 0;
 i12 = i4 + 4 | 0;
 i13 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i10 >> 2] = HEAP32[i6 >> 2] & 1;
 HEAP32[i8 >> 2] = _comp_textwidth(HEAP32[i10 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = _has_format_option(98) | 0;
 do if ((HEAP32[i8 >> 2] | 0) > 0) {
  if (!(HEAP32[i10 >> 2] | 0)) {
   if ((HEAP32[i5 >> 2] | 0) == 32 | (HEAP32[i5 >> 2] | 0) == 9) break;
   if (HEAP32[10180] & 64 | 0) if (HEAPU8[(_ml_get_cursor() | 0) >> 0] | 0) break;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27122] | 0)) {
    if (_has_format_option(108) | 0) if ((HEAP32[25198] | 0) > (HEAP32[i8 >> 2] | 0)) break;
    if (HEAP32[i9 >> 2] | 0) if ((HEAP32[25199] | 0) > (HEAP32[i8 >> 2] | 0)) break;
   }
  }
  i3 = HEAP32[i5 >> 2] | 0;
  _internal_format(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0, (i3 | 0) == 0 & 1, i3 | 0);
 } while (0);
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[26791] = 0;
 if (!((HEAP32[i5 >> 2] | 0) < 32 | (HEAP32[i5 >> 2] | 0) >= 127 | (HEAP32[i5 >> 2] | 0) == 48 | (HEAP32[i5 >> 2] | 0) == 94)) if (!(_has_insertcharpre() | 0)) if (_vpeekc() | 0) if (!(HEAP32[10180] & 64)) {
  HEAP32[i13 >> 2] = 0;
  HEAP8[i11 >> 0] = HEAP32[i5 >> 2];
  HEAP32[i12 >> 2] = 1;
  if ((HEAP32[i8 >> 2] | 0) > 0) HEAP32[i13 >> 2] = _get_nolist_virtcol() | 0;
  while (1) {
   i7 = _vpeekc() | 0;
   HEAP32[i5 >> 2] = i7;
   if (!((((i7 | 0) == 0 | (HEAP32[i5 >> 2] | 0) < 32 | (HEAP32[i5 >> 2] | 0) >= 127 | (HEAP32[i5 >> 2] | 0) == 48 | (HEAP32[i5 >> 2] | 0) == 94) ^ 1) & (HEAP32[i12 >> 2] | 0) < 100)) break;
   if (HEAP32[i8 >> 2] | 0) {
    i7 = _byte2cells(HEAPU8[i11 + ((HEAP32[i12 >> 2] | 0) - 1) >> 0] | 0) | 0;
    i9 = (HEAP32[i13 >> 2] | 0) + i7 | 0;
    HEAP32[i13 >> 2] = i9;
    if ((i9 | 0) >= (HEAP32[i8 >> 2] | 0)) break;
   }
   if (HEAP32[10181] | 0) i14 = 0; else if (_vim_iswordc(HEAP32[i5 >> 2] | 0) | 0) i14 = 0; else i14 = (_vim_iswordc(HEAPU8[i11 + ((HEAP32[i12 >> 2] | 0) - 1) >> 0] | 0) | 0) != 0;
   if (!(i14 ^ 1)) break;
   i9 = (_vgetc() | 0) & 255;
   i7 = HEAP32[i12 >> 2] | 0;
   HEAP32[i12 >> 2] = i7 + 1;
   HEAP8[i11 + i7 >> 0] = i9;
  }
  HEAP8[i11 + (HEAP32[i12 >> 2] | 0) >> 0] = 0;
  _ins_str(i11);
  if (HEAP32[i6 >> 2] & 4 | 0) {
   _redo_literal(HEAPU8[i11 >> 0] | 0);
   HEAP32[i12 >> 2] = 1;
  } else HEAP32[i12 >> 2] = 0;
  if (!(HEAPU8[i11 + (HEAP32[i12 >> 2] | 0) >> 0] | 0)) {
   STACKTOP = i4;
   return;
  }
  _AppendToRedobuffLit(i11 + (HEAP32[i12 >> 2] | 0) | 0, -1);
  STACKTOP = i4;
  return;
 }
 _ins_char(HEAP32[i5 >> 2] | 0);
 i12 = HEAP32[i5 >> 2] | 0;
 if (HEAP32[i6 >> 2] & 4 | 0) {
  _redo_literal(i12);
  STACKTOP = i4;
  return;
 } else {
  _AppendCharToRedobuff(i12);
  STACKTOP = i4;
  return;
 }
}

function _changed_common(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _changed();
 if (!(HEAP32[27132] | 0)) {
  HEAP32[(HEAP32[26773] | 0) + 436 >> 2] = HEAP32[i6 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 436 + 4 >> 2] = HEAP32[i7 >> 2];
 }
 HEAP32[i11 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i11 >> 2] | 0)) break;
  if ((HEAP32[i11 >> 2] | 0) == (HEAP32[26886] | 0)) i13 = HEAP32[26887] | 0; else i13 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i10 >> 2] = i13;
  while (1) {
   if (!(HEAP32[i10 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[26773] | 0)) {
    if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 160 >> 2] | 0) < 10) HEAP32[(HEAP32[i10 >> 2] | 0) + 160 >> 2] = 10;
    i4 = HEAP32[i10 >> 2] | 0;
    if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[i6 >> 2] | 0)) _changed_line_abv_curs_win(i4); else if ((HEAP32[i4 + 24 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 24 + 4 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) _changed_cline_bef_curs_win(HEAP32[i10 >> 2] | 0);
    if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 144 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) _approximate_botline_win(HEAP32[i10 >> 2] | 0);
    HEAP32[i12 >> 2] = 0;
    while (1) {
     i14 = HEAP32[i10 >> 2] | 0;
     if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[(HEAP32[i10 >> 2] | 0) + 152 >> 2] | 0)) break;
     do if (HEAP8[(HEAP32[i14 + 156 >> 2] | 0) + (HEAP32[i12 >> 2] << 3) + 6 >> 0] | 0) if ((HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i12 >> 2] << 3) >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
      if ((HEAP32[(HEAP32[(HEAP32[i10 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i12 >> 2] << 3) >> 2] | 0) < (HEAP32[i8 >> 2] | 0)) {
       HEAP8[(HEAP32[(HEAP32[i10 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i12 >> 2] << 3) + 6 >> 0] = 0;
       break;
      }
      if (HEAP32[i9 >> 2] | 0) {
       i4 = (HEAP32[(HEAP32[i10 >> 2] | 0) + 156 >> 2] | 0) + (HEAP32[i12 >> 2] << 3) | 0;
       HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
      }
     } while (0);
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    }
    if (HEAP32[i14 + 200 + 8 >> 2] | 0) _redraw_win_later(HEAP32[i10 >> 2] | 0, 35);
   }
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2];
  }
  HEAP32[i11 >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
 }
 if ((HEAP32[26828] | 0) < 10) HEAP32[26828] = 10;
 if ((HEAP32[i6 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 i6 = HEAP32[i9 >> 2] | 0;
 if (((HEAP32[i8 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) < 0 ? 0 - i6 | 0 : i6) | 0) <= (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[26849] = 0;
 STACKTOP = i5;
 return;
}

function _gui_wasm_send_key(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 28 | 0;
 i9 = i7 + 24 | 0;
 i10 = i7 + 20 | 0;
 i11 = i7 + 16 | 0;
 i12 = i7 + 12 | 0;
 i13 = i7 + 4 | 0;
 i14 = i7 + 32 | 0;
 i15 = i7 + 36 | 0;
 i16 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i7 + 8 >> 2] = i6;
 HEAP32[i13 >> 2] = 0;
 HEAP16[i14 >> 1] = 0;
 HEAP32[i16 >> 2] = 0;
 if (HEAP32[i11 >> 2] | 0) HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 2;
 if (HEAP32[i10 >> 2] | 0) HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 4;
 if (HEAP32[i12 >> 2] | 0) HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 8;
 if (HEAP32[i9 >> 2] | 0) {
  if ((HEAP32[i8 >> 2] | 0) == 254) i17 = 128; else if ((HEAP32[i8 >> 2] | 0) == 255) i17 = -22783; else i17 = 0 - ((HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] << 8)) | 0;
  HEAP32[i8 >> 2] = i17;
  HEAP32[i8 >> 2] = _simplify_key(HEAP32[i8 >> 2] | 0, i13) | 0;
  HEAP32[i16 >> 2] = 1;
 }
 if ((HEAP32[i8 >> 2] | 0) == 99) if (HEAP32[i13 >> 2] & 4 | 0) HEAP32[26834] = 1;
 if (!((HEAP32[i9 >> 2] | 0) != 0 | (HEAP32[i8 >> 2] | 0) < 0)) {
  HEAP32[i8 >> 2] = _simplify_key(HEAP32[i8 >> 2] | 0, i13) | 0;
  i9 = _simplify_key(HEAP32[i8 >> 2] | 0, i13) | 0;
  HEAP32[i8 >> 2] = i9;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) == 155 ? -20989 : i9;
  if ((HEAP32[i8 >> 2] | 0) < 0) HEAP32[i16 >> 2] = 1;
 }
 if (HEAP32[i13 >> 2] | 0) {
  i9 = HEAP16[i14 >> 1] | 0;
  HEAP16[i14 >> 1] = i9 + 1 << 16 >> 16;
  HEAP8[i15 + (i9 << 16 >> 16) >> 0] = -101;
  i9 = HEAP16[i14 >> 1] | 0;
  HEAP16[i14 >> 1] = i9 + 1 << 16 >> 16;
  HEAP8[i15 + (i9 << 16 >> 16) >> 0] = -4;
  i9 = HEAP32[i13 >> 2] & 255;
  i13 = HEAP16[i14 >> 1] | 0;
  HEAP16[i14 >> 1] = i13 + 1 << 16 >> 16;
  HEAP8[i15 + (i13 << 16 >> 16) >> 0] = i9;
 }
 if (!((HEAP32[i16 >> 2] | 0) != 0 & (HEAP32[i8 >> 2] | 0) < 0)) {
  i16 = HEAP32[i8 >> 2] & 255;
  i9 = HEAP16[i14 >> 1] | 0;
  HEAP16[i14 >> 1] = i9 + 1 << 16 >> 16;
  HEAP8[i15 + (i9 << 16 >> 16) >> 0] = i16;
  i18 = HEAP16[i14 >> 1] | 0;
  i19 = i18 << 16 >> 16;
  _add_to_input_buf(i15, i19);
  STACKTOP = i7;
  return;
 }
 i16 = HEAP16[i14 >> 1] | 0;
 HEAP16[i14 >> 1] = i16 + 1 << 16 >> 16;
 HEAP8[i15 + (i16 << 16 >> 16) >> 0] = -101;
 if ((HEAP32[i8 >> 2] | 0) == 128) i20 = 254; else if (!(HEAP32[i8 >> 2] | 0)) i20 = 255; else i20 = 0 - (HEAP32[i8 >> 2] | 0) & 255;
 i16 = HEAP16[i14 >> 1] | 0;
 HEAP16[i14 >> 1] = i16 + 1 << 16 >> 16;
 HEAP8[i15 + (i16 << 16 >> 16) >> 0] = i20;
 if ((HEAP32[i8 >> 2] | 0) == 128 | (HEAP32[i8 >> 2] | 0) == 0) i21 = 88; else i21 = (0 - (HEAP32[i8 >> 2] | 0) | 0) >>> 8 & 255;
 i8 = HEAP16[i14 >> 1] | 0;
 HEAP16[i14 >> 1] = i8 + 1 << 16 >> 16;
 HEAP8[i15 + (i8 << 16 >> 16) >> 0] = i21;
 i18 = HEAP16[i14 >> 1] | 0;
 i19 = i18 << 16 >> 16;
 _add_to_input_buf(i15, i19);
 STACKTOP = i7;
 return;
}

function _nfa_regexec_both(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 20 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 8 | 0;
 i13 = i5 + 4 | 0;
 i14 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
 if (!(HEAP32[26312] | 0)) {
  HEAP32[i11 >> 2] = HEAP32[HEAP32[26313] >> 2];
  HEAP32[i7 >> 2] = _reg_getline(0) | 0;
  HEAP32[26316] = (HEAP32[26313] | 0) + 4;
  HEAP32[26317] = (HEAP32[26313] | 0) + 84;
 } else {
  HEAP32[i11 >> 2] = HEAP32[HEAP32[26312] >> 2];
  HEAP32[26314] = (HEAP32[26312] | 0) + 4;
  HEAP32[26315] = (HEAP32[26312] | 0) + 44;
 }
 do if ((HEAP32[i11 >> 2] | 0) == 0 | (HEAP32[i7 >> 2] | 0) == 0) _emsg(93343) | 0; else {
  if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] & 1 | 0) HEAP32[26323] = 1; else if (HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] & 2 | 0) HEAP32[26323] = 0;
  HEAP32[26325] = HEAP32[i7 >> 2];
  HEAP32[26326] = 0;
  HEAP32[26327] = HEAP32[(HEAP32[i11 >> 2] | 0) + 32 >> 2];
  HEAP32[26328] = HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2];
  HEAP32[26329] = HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2];
  HEAP32[26330] = 1;
  HEAP32[26331] = 2;
  HEAP32[7456] = HEAP32[(HEAP32[i11 >> 2] | 0) + 40 >> 2];
  if ((HEAP32[i14 >> 2] | 0) > 0 ? (HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] | 0) != 0 : 0) {
   HEAP32[i6 >> 2] = 0;
   i15 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i15 | 0;
  }
  HEAP32[26332] = 1;
  if (HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0) {
   if (!(_skip_to_start(HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] | 0, i14) | 0)) {
    HEAP32[i6 >> 2] = 0;
    i15 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i15 | 0;
   }
   if (HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] | 0) {
    i8 = HEAP32[i11 >> 2] | 0;
    HEAP32[i6 >> 2] = _find_match_text(HEAP32[i14 >> 2] | 0, HEAP32[i8 + 24 >> 2] | 0, HEAP32[i8 + 28 >> 2] | 0) | 0;
    i15 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i15 | 0;
   }
  }
  if ((HEAP32[26324] | 0) > 0) if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[26324] | 0)) break;
  HEAP32[26333] = HEAP32[(HEAP32[i11 >> 2] | 0) + 48 >> 2];
  HEAP32[i13 >> 2] = 0;
  while (1) {
   if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[26333] | 0)) break;
   HEAP32[(HEAP32[i11 >> 2] | 0) + 52 + ((HEAP32[i13 >> 2] | 0) * 28 | 0) + 12 >> 2] = HEAP32[i13 >> 2];
   HEAP32[(HEAP32[i11 >> 2] | 0) + 52 + ((HEAP32[i13 >> 2] | 0) * 28 | 0) + 16 >> 2] = 0;
   HEAP32[(HEAP32[i11 >> 2] | 0) + 52 + ((HEAP32[i13 >> 2] | 0) * 28 | 0) + 16 + 4 >> 2] = 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  HEAP32[i12 >> 2] = _nfa_regtry(HEAP32[i11 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
  HEAP32[7456] = 0;
 } while (0);
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 i15 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i15 | 0;
}

function _list_in_columns(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 40 | 0;
 i7 = i5 + 36 | 0;
 i8 = i5 + 32 | 0;
 i9 = i5 + 28 | 0;
 i10 = i5 + 24 | 0;
 i11 = i5 + 20 | 0;
 i12 = i5 + 16 | 0;
 i13 = i5 + 12 | 0;
 i14 = i5 + 8 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) < 0) i17 = (HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0) != 0 & 1; else i17 = (HEAP32[i9 >> 2] | 0) < (HEAP32[i7 >> 2] | 0) & 1;
  if (!i17) break;
  i3 = _vim_strsize(HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = i3 + ((HEAP32[i9 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) ? 2 : 0);
  if ((HEAP32[i14 >> 2] | 0) > (HEAP32[i13 >> 2] | 0)) HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 if ((HEAP32[10174] | 0) < (HEAP32[i13 >> 2] | 0)) {
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0)) break;
   _version_msg_wrap(HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, (HEAP32[i9 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) & 1);
   if ((HEAP32[27043] | 0) > 0) _msg_putchar(10);
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  STACKTOP = i5;
  return;
 }
 HEAP32[i10 >> 2] = ((HEAP32[10174] | 0) + 1 | 0) / (HEAP32[i13 >> 2] | 0) | 0;
 i14 = HEAP32[i12 >> 2] | 0;
 i17 = HEAP32[i10 >> 2] | 0;
 HEAP32[i11 >> 2] = ((i14 | 0) / (i17 | 0) | 0) + ((i14 | 0) % (i17 | 0) | 0 | 0 ? 1 : 0);
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if (HEAP32[26834] | 0) {
   i4 = 32;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) >= (Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
   i4 = 32;
   break;
  }
  i17 = HEAP32[i9 >> 2] | 0;
  i14 = HEAP32[i10 >> 2] | 0;
  HEAP32[i15 >> 2] = ((i17 | 0) / (i14 | 0) | 0) + (Math_imul((i17 | 0) % (i14 | 0) | 0, HEAP32[i11 >> 2] | 0) | 0);
  L26 : do if ((HEAP32[i15 >> 2] | 0) < (HEAP32[i12 >> 2] | 0)) {
   HEAP32[i16 >> 2] = (((HEAP32[i9 >> 2] | 0) + 1 | 0) % (HEAP32[i10 >> 2] | 0) | 0 | 0) == 0 & 1;
   if ((HEAP32[i15 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) _msg_putchar(91);
   _msg_puts(HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] | 0);
   if ((HEAP32[i15 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) _msg_putchar(93);
   if (HEAP32[i16 >> 2] | 0) {
    if ((HEAP32[27043] | 0) <= 0) break;
    _msg_putchar(10);
    break;
   }
   while (1) {
    if (!((HEAP32[27043] | 0) % (HEAP32[i13 >> 2] | 0) | 0)) break L26;
    _msg_putchar(32);
   }
  } else if ((HEAP32[27043] | 0) > 0) _msg_putchar(10); while (0);
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 32) {
  STACKTOP = i5;
  return;
 }
}

function _ex_align(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 24 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i10 >> 2] = _atoi(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 217) {
  if ((i1 | 0) >= 0) HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
 } else {
  if ((i1 | 0) <= 0) HEAP32[i10 >> 2] = HEAP32[(HEAP32[26773] | 0) + 708 >> 2];
  if (!(HEAP32[i10 >> 2] | 0)) if ((HEAP32[(HEAP32[26773] | 0) + 720 >> 2] | 0) > 0) HEAP32[i10 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 720 >> 2] | 0);
  if ((HEAP32[i10 >> 2] | 0) <= 0) HEAP32[i10 >> 2] = 80;
 }
 if (!(_u_save((HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2];
 while (1) {
  i11 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0)) break;
  L20 : do if ((HEAP32[i11 + 16 >> 2] | 0) == 217) {
   HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
   i2 = 27;
  } else {
   HEAP32[i9 >> 2] = 0;
   i1 = _linelen((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 362 ? i9 : 0) | 0;
   HEAP32[i6 >> 2] = i1 - (_get_indent() | 0);
   if ((HEAP32[i6 >> 2] | 0) > 0) {
    i1 = (HEAP32[i10 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0;
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 58) {
     HEAP32[i8 >> 2] = (i1 | 0) / 2 | 0;
     i2 = 27;
     break;
    }
    HEAP32[i8 >> 2] = i1;
    if (HEAP32[i9 >> 2] | 0) {
     while (1) {
      if ((HEAP32[i8 >> 2] | 0) <= 0) {
       i2 = 27;
       break L20;
      }
      _set_indent(HEAP32[i8 >> 2] | 0, 0) | 0;
      i1 = _linelen(0) | 0;
      if ((i1 | 0) <= (HEAP32[i10 >> 2] | 0)) break;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     }
     do {
      i1 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
      HEAP32[i8 >> 2] = i1;
      _set_indent(i1, 0) | 0;
      i1 = _linelen(0) | 0;
     } while ((i1 | 0) <= (HEAP32[i10 >> 2] | 0));
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     i2 = 27;
    } else i2 = 27;
   }
  } while (0);
  if ((i2 | 0) == 27) {
   i2 = 0;
   if ((HEAP32[i8 >> 2] | 0) < 0) HEAP32[i8 >> 2] = 0;
   _set_indent(HEAP32[i8 >> 2] | 0, 0) | 0;
  }
  i1 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 _changed_lines(HEAP32[i11 + 36 >> 2] | 0, 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) + 1 | 0, 0);
 i4 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 _beginline(5);
 STACKTOP = i3;
 return;
}

function _create_windows(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0) == -1) HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = 1;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = HEAP32[26868];
 i1 = HEAP32[i4 >> 2] | 0;
 do if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0) > 1) {
  if (!(HEAP32[i1 + 156 >> 2] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] = 1;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) == 3) {
   i7 = _make_tabpages(HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = i7;
   break;
  }
  if (!(HEAP32[(HEAP32[26887] | 0) + 12 >> 2] | 0)) {
   i7 = HEAP32[i4 >> 2] | 0;
   i8 = _make_windows(HEAP32[i7 + 152 >> 2] | 0, (HEAP32[i7 + 156 >> 2] | 0) == 2 & 1) | 0;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = i8;
   break;
  } else {
   i8 = _win_count() | 0;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = i8;
   break;
  }
 } else HEAP32[i1 + 152 >> 2] = 1; while (0);
 if (HEAP32[26816] | 0) {
  HEAP32[26710] = 1;
  _ml_recover();
  if (!(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0)) _getout(1);
  _do_modelines(0);
  STACKTOP = i3;
  return;
 }
 HEAP32[26745] = (HEAP32[26745] | 0) + 1;
 HEAP32[26746] = (HEAP32[26746] | 0) + 1;
 HEAP32[i5 >> 2] = 1;
 L27 : while (1) {
  i1 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1 + 1;
  if ((i1 | 0) >= 1e3) break;
  i1 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) == 3;
  do if (HEAP32[i5 >> 2] | 0) if (i1) {
   _goto_tabpage(1);
   break;
  } else {
   HEAP32[26881] = HEAP32[26887];
   break;
  } else if (i1) {
   if (!(HEAP32[HEAP32[26886] >> 2] | 0)) break L27;
   _goto_tabpage(0);
   break;
  } else {
   if (!(HEAP32[(HEAP32[26881] | 0) + 12 >> 2] | 0)) break L27;
   HEAP32[26881] = HEAP32[(HEAP32[26881] | 0) + 12 >> 2];
   break;
  } while (0);
  HEAP32[i5 >> 2] = 0;
  HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
  if (!(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0)) {
   HEAP32[26812] = 1;
   _set_buflisted(1);
   _open_buffer(0, 0, 0) | 0;
   if ((HEAP32[26812] | 0) == 2) {
    if (HEAP32[26834] | 0) i2 = 33; else if (_only_one_window() | 0) i2 = 33;
    if ((i2 | 0) == 33) {
     i2 = 0;
     HEAP32[26880] = 0;
     _getout(1);
    }
    _setfname(HEAP32[26773] | 0, 0, 0, 0) | 0;
    HEAP32[(HEAP32[26881] | 0) + 188 >> 2] = -1;
    HEAP32[26812] = 0;
   } else _handle_swap_exists(0);
   HEAP32[i5 >> 2] = 1;
  }
  _ui_breakcheck();
  if (HEAP32[26834] | 0) {
   i2 = 38;
   break;
  }
 }
 if ((i2 | 0) == 38) _vgetc() | 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0) == 3) _goto_tabpage(1); else HEAP32[26881] = HEAP32[26887];
 HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
 HEAP32[26745] = (HEAP32[26745] | 0) + -1;
 HEAP32[26746] = (HEAP32[26746] | 0) + -1;
 STACKTOP = i3;
 return;
}

function _showmatch(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 44 | 0;
 i5 = i3 + 40 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 24 | 0;
 i8 = i3 + 20 | 0;
 i9 = i3 + 16 | 0;
 i10 = i3 + 12 | 0;
 i11 = i3 + 8 | 0;
 i12 = i3 + 4 | 0;
 i13 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[26773] | 0) + 652 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) break;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 2;
  if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0 | 0) == (HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) {
   i2 = 23;
   break;
  }
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 23) {
  STACKTOP = i3;
  return;
 }
 i2 = _findmatch(0, 0) | 0;
 HEAP32[i5 >> 2] = i2;
 if (!i2) {
  _vim_beep(8192);
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0)) _getvcol(HEAP32[26881] | 0, HEAP32[i5 >> 2] | 0, 0, i8, 0);
 if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0)) {
  if ((HEAP32[i8 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0)) {
   STACKTOP = i3;
   return;
  }
  if ((HEAP32[i8 >> 2] | 0) >= ((HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) | 0)) {
   STACKTOP = i3;
   return;
  }
 }
 i8 = HEAP32[i5 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 i8 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i9 >> 2] = HEAP32[26971];
 HEAP32[i10 >> 2] = HEAP32[26990];
 if ((HEAP32[10175] | 0) >= 0) if ((HEAP32[10175] | 0) == (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0)) HEAP32[10175] = -1;
 i8 = (HEAP32[26881] | 0) + 132 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 _update_screen(10) | 0;
 HEAP32[i12 >> 2] = HEAP32[10175];
 HEAP32[i11 >> 2] = HEAP32[10180];
 HEAP32[10180] = 1808;
 _ui_cursor_shape();
 i8 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[26971] = 0;
 HEAP32[26990] = 0;
 _showruler(0);
 _setcursor();
 _cursor_on();
 _out_flush_cursor(1, 0);
 HEAP32[10175] = HEAP32[i12 >> 2];
 if (_vim_strchr(HEAP32[26904] | 0, 109) | 0) _ui_delay((HEAP32[26947] | 0) * 100 | 0, 1); else if (!(_char_avail() | 0)) _ui_delay((HEAP32[26947] | 0) * 100 | 0, 0);
 i12 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i12 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[26971] = HEAP32[i9 >> 2];
 HEAP32[26990] = HEAP32[i10 >> 2];
 HEAP32[10180] = HEAP32[i11 >> 2];
 _ui_cursor_shape();
 STACKTOP = i3;
 return;
}

function _check_opt_wim() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= 4) break;
  HEAP8[i4 + (HEAP32[i6 >> 2] | 0) >> 0] = 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 HEAP32[i5 >> 2] = HEAP32[27033];
 L5 : while (1) {
  if (!(HEAP8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i1 = 30;
   break;
  }
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if (((HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0) - 97 | 0) >>> 0 >= 26) break;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  if (HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0) != 44) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0) != 58) {
   i1 = 13;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) == 7) if (!(_strncmp(HEAP32[i5 >> 2] | 0, 63245, 7) | 0)) {
   i8 = i4 + (HEAP32[i7 >> 2] | 0) | 0;
   HEAP8[i8 >> 0] = HEAPU8[i8 >> 0] | 2;
  } else i1 = 17; else i1 = 17;
  do if ((i1 | 0) == 17) {
   i1 = 0;
   if ((HEAP32[i6 >> 2] | 0) == 4) if (!(_strncmp(HEAP32[i5 >> 2] | 0, 63253, 4) | 0)) {
    i8 = i4 + (HEAP32[i7 >> 2] | 0) | 0;
    HEAP8[i8 >> 0] = HEAPU8[i8 >> 0] | 1;
    break;
   }
   if ((HEAP32[i6 >> 2] | 0) != 4) {
    i1 = 23;
    break L5;
   }
   if (_strncmp(HEAP32[i5 >> 2] | 0, 63258, 4) | 0) {
    i1 = 23;
    break L5;
   }
   i8 = i4 + (HEAP32[i7 >> 2] | 0) | 0;
   HEAP8[i8 >> 0] = HEAPU8[i8 >> 0] | 4;
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i1 = 30;
   break;
  }
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 44) {
   if ((HEAP32[i7 >> 2] | 0) == 3) {
    i1 = 27;
    break;
   }
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 13) {
  HEAP32[i3 >> 2] = 0;
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 } else if ((i1 | 0) == 23) {
  HEAP32[i3 >> 2] = 0;
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 } else if ((i1 | 0) == 27) {
  HEAP32[i3 >> 2] = 0;
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 } else if ((i1 | 0) == 30) {
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) >= 3) break;
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP8[i4 + (i1 + 1) >> 0] = HEAP8[i4 + i1 >> 0] | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >= 4) break;
   i7 = HEAP32[i6 >> 2] | 0;
   HEAP8[114068 + i7 >> 0] = HEAP8[i4 + i7 >> 0] | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  HEAP32[i3 >> 2] = 1;
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 return 0;
}

function _win_ins_lines(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i7 + 36 | 0;
 i9 = i7 + 32 | 0;
 i10 = i7 + 28 | 0;
 i11 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i13 = i7 + 16 | 0;
 i14 = i7 + 12 | 0;
 i15 = i7 + 8 | 0;
 i16 = i7 + 4 | 0;
 i17 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 if (HEAP32[i12 >> 2] | 0) HEAP32[(HEAP32[i9 >> 2] | 0) + 152 >> 2] = 0;
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 88 >> 2] | 0) < 5) {
  HEAP32[i8 >> 2] = 0;
  i18 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i18 | 0;
 }
 if ((HEAP32[i11 >> 2] | 0) > ((HEAP32[(HEAP32[i9 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0)) HEAP32[i11 >> 2] = (HEAP32[(HEAP32[i9 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i10 >> 2] | 0);
 HEAP32[i17 >> 2] = _win_do_lines(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0, 0, 0) | 0;
 if ((HEAP32[i17 >> 2] | 0) != 2) {
  HEAP32[i8 >> 2] = HEAP32[i17 >> 2];
  i18 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i18 | 0;
 }
 HEAP32[i14 >> 2] = 0;
 if (HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) i6 = 11; else if (HEAP32[(HEAP32[i9 >> 2] | 0) + 92 >> 2] | 0) i6 = 11;
 do if ((i6 | 0) == 11) {
  if ((_screen_del_lines(0, (HEAP32[(HEAP32[i9 >> 2] | 0) + 84 >> 2] | 0) + (HEAP32[(HEAP32[i9 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0, HEAP32[i11 >> 2] | 0, HEAP32[10173] | 0, 0, 0, 0) | 0) == 1) {
   HEAP32[i14 >> 2] = 1;
   break;
  }
  if (HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) {
   HEAP32[i8 >> 2] = 0;
   i18 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i18 | 0;
  }
 } while (0);
 if (!(HEAP32[i14 >> 2] | 0)) {
  HEAP32[(HEAP32[i9 >> 2] | 0) + 176 >> 2] = 1;
  HEAP32[26699] = 1;
  i6 = HEAP32[i9 >> 2] | 0;
  HEAP32[i15 >> 2] = (HEAP32[i6 + 84 >> 2] | 0) + (HEAP32[i6 + 88 >> 2] | 0) + (HEAP32[i6 + 92 >> 2] | 0);
  HEAP32[i16 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  if ((HEAP32[i16 >> 2] | 0) > (HEAP32[10173] | 0)) HEAP32[i16 >> 2] = HEAP32[10173];
  i6 = HEAP32[i11 >> 2] | 0;
  i17 = HEAP32[(HEAP32[i9 >> 2] | 0) + 96 >> 2] | 0;
  i13 = HEAP32[i9 >> 2] | 0;
  _screen_fill((HEAP32[i15 >> 2] | 0) - i6 | 0, (HEAP32[i16 >> 2] | 0) - i6 | 0, i17 | 0, i17 + (HEAP32[i13 + 100 >> 2] | 0) | 0, 32, 32, 0);
 }
 if (_screen_ins_lines(0, (HEAP32[(HEAP32[i9 >> 2] | 0) + 84 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0, HEAP32[i11 >> 2] | 0, HEAP32[10173] | 0, 0, 0) | 0) {
  HEAP32[i8 >> 2] = 1;
  i18 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i18 | 0;
 }
 if (HEAP32[i14 >> 2] | 0) {
  HEAP32[(HEAP32[i9 >> 2] | 0) + 176 >> 2] = 1;
  _win_rest_invalid(HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0);
 }
 HEAP32[i8 >> 2] = 0;
 i18 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i18 | 0;
}

function _nfa_regbranch() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = ((HEAP32[26382] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0;
 if (!(_nfa_regconcat() | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 while (1) {
  if ((_peekchr() | 0) != -218) {
   i1 = 27;
   break;
  }
  _skipchr();
  if ((HEAP32[i4 >> 2] | 0) == (((HEAP32[26382] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0 | 0)) {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    i1 = 8;
    break;
   }
   i6 = HEAP32[26382] | 0;
   HEAP32[26382] = i6 + 4;
   HEAP32[i6 >> 2] = -1022;
  }
  if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
   i1 = 12;
   break;
  }
  i6 = HEAP32[26382] | 0;
  HEAP32[26382] = i6 + 4;
  HEAP32[i6 >> 2] = -999;
  if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
   i1 = 15;
   break;
  }
  i6 = HEAP32[26382] | 0;
  HEAP32[26382] = i6 + 4;
  HEAP32[i6 >> 2] = -981;
  HEAP32[i4 >> 2] = ((HEAP32[26382] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0;
  if (!(_nfa_regconcat() | 0)) {
   i1 = 17;
   break;
  }
  if ((HEAP32[i4 >> 2] | 0) == (((HEAP32[26382] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0 | 0)) {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    i1 = 21;
    break;
   }
   i6 = HEAP32[26382] | 0;
   HEAP32[26382] = i6 + 4;
   HEAP32[i6 >> 2] = -1022;
  }
  if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
   i1 = 25;
   break;
  }
  i6 = HEAP32[26382] | 0;
  HEAP32[26382] = i6 + 4;
  HEAP32[i6 >> 2] = -1014;
 }
 if ((i1 | 0) == 8) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else if ((i1 | 0) == 12) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else if ((i1 | 0) == 15) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else if ((i1 | 0) == 17) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else if ((i1 | 0) == 21) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else if ((i1 | 0) == 25) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else if ((i1 | 0) == 27) {
  if ((HEAP32[i4 >> 2] | 0) == (((HEAP32[26382] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0 | 0)) {
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    HEAP32[i3 >> 2] = 0;
    i5 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i5 | 0;
   }
   i4 = HEAP32[26382] | 0;
   HEAP32[26382] = i4 + 4;
   HEAP32[i4 >> 2] = -1022;
  }
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _win_do_lines(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 28 | 0;
 i9 = i7 + 24 | 0;
 i10 = i7 + 20 | 0;
 i11 = i7 + 16 | 0;
 i12 = i7 + 12 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 i6 = (_redrawing() | 0) == 0;
 if (i6 | (HEAP32[i11 >> 2] | 0) <= 0) {
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 }
 if (!((HEAP32[26702] | 0) == 0 | (HEAP32[i13 >> 2] | 0) != 0)) {
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 }
 if (HEAP32[i12 >> 2] | 0) if (((HEAP32[10173] | 0) - (HEAP32[i11 >> 2] | 0) | 0) < 5) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 100 >> 2] | 0) == (HEAP32[10174] | 0)) {
  if (!(HEAP32[26702] | 0)) _screenclear();
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 }
 if (((HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 88 >> 2] | 0)) {
  i12 = HEAP32[(HEAP32[i9 >> 2] | 0) + 84 >> 2] | 0;
  i6 = HEAP32[i9 >> 2] | 0;
  i5 = HEAP32[(HEAP32[i9 >> 2] | 0) + 96 >> 2] | 0;
  _screen_fill(i12 + (HEAP32[i10 >> 2] | 0) | 0, i12 + (HEAP32[i6 + 88 >> 2] | 0) | 0, i5 | 0, i5 + (HEAP32[i6 + 100 >> 2] | 0) | 0, 32, 32, 0);
  HEAP32[i8 >> 2] = 1;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 }
 if (!(HEAP32[26702] | 0)) HEAP32[26700] = 1;
 if (!(HEAP32[26733] | 0)) if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 100 >> 2] | 0) == (HEAP32[10174] | 0)) if (HEAP32[27016] | 0 ? (HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) != 0 : 0) {
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 } else {
  HEAP32[i8 >> 2] = 2;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 }
 do if (HEAP32[26733] | 0) {
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) if (!(HEAPU8[HEAP32[26587] >> 0] | 0)) break;
  _scroll_region_set(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 } while (0);
 i6 = HEAP32[i9 >> 2] | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 i10 = (HEAP32[i6 + 84 >> 2] | 0) + i5 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 i11 = (HEAP32[i6 + 88 >> 2] | 0) - i5 | 0;
 i5 = HEAP32[i14 >> 2] | 0;
 i14 = i6 | 0;
 if (HEAP32[i13 >> 2] | 0) HEAP32[i15 >> 2] = _screen_del_lines(i10, 0, i12, i11, 0, i5, i14) | 0; else HEAP32[i15 >> 2] = _screen_ins_lines(i10, 0, i12, i11, i5, i14) | 0;
 do if (HEAP32[26733] | 0) {
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 100 >> 2] | 0) != (HEAP32[10174] | 0)) if (!(HEAPU8[HEAP32[26587] >> 0] | 0)) break;
  _scroll_region_reset();
 } while (0);
 HEAP32[i8 >> 2] = HEAP32[i15 >> 2];
 i16 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i16 | 0;
}

function _win_init(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2];
 i3 = (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + 56 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 i3 = (HEAP32[i5 >> 2] | 0) + 24 | 0;
 i2 = (HEAP32[i6 >> 2] | 0) + 24 | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 108 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 76 >> 2];
 i2 = (HEAP32[i5 >> 2] | 0) + 300 | 0;
 i3 = (HEAP32[i6 >> 2] | 0) + 300 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 i3 = (HEAP32[i5 >> 2] | 0) + 308 | 0;
 i2 = (HEAP32[i6 >> 2] | 0) + 308 | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 180 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 180 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 136 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 136 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 804 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 804 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 808 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 808 >> 2];
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 196 >> 2] | 0)) i8 = 0; else i8 = _vim_strsave(HEAP32[(HEAP32[i6 >> 2] | 0) + 196 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 196 >> 2] = i8;
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[(HEAP32[i6 >> 2] | 0) + 800 >> 2] | 0)) break;
  i8 = (HEAP32[i7 >> 2] | 0) * 24 | 0;
  i2 = (HEAP32[i5 >> 2] | 0) + 316 + i8 | 0;
  i3 = (HEAP32[i6 >> 2] | 0) + 316 + i8 | 0;
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i2 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
  HEAP32[i2 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 316 + ((HEAP32[i7 >> 2] | 0) * 24 | 0) >> 2] | 0) {
   i3 = _vim_strsave(HEAP32[(HEAP32[i5 >> 2] | 0) + 316 + ((HEAP32[i7 >> 2] | 0) * 24 | 0) >> 2] | 0) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 316 + ((HEAP32[i7 >> 2] | 0) * 24 | 0) >> 2] = i3;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 796 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 796 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 800 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 800 >> 2];
 _win_init_some(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _bracketed_paste(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i5 + 36 | 0;
 i7 = i5 + 32 | 0;
 i8 = i5 + 28 | 0;
 i9 = i5 + 24 | 0;
 i10 = i5 + 40 | 0;
 i11 = i5 + 20 | 0;
 i12 = i5 + 16 | 0;
 i13 = i5 + 12 | 0;
 i14 = i5 + 8 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = _find_termcode(42705) | 0;
 HEAP32[i13 >> 2] = -1;
 HEAP32[i14 >> 2] = HEAP32[26804];
 HEAP32[i15 >> 2] = HEAP32[26961];
 HEAP32[i16 >> 2] = HEAP32[(HEAP32[26773] | 0) + 564 >> 2];
 if ((_strlen(HEAP32[i12 >> 2] | 0) | 0) >>> 0 >= 65) HEAP32[i12 >> 2] = 0;
 HEAP32[26802] = (HEAP32[26802] | 0) + 1;
 HEAP32[26804] = 0;
 HEAP32[26961] = 1;
 HEAP32[(HEAP32[26773] | 0) + 564 >> 2] = 0;
 while (1) {
  if (!(HEAP32[i12 >> 2] | 0)) if (!(_vpeekc() | 0)) {
   i4 = 24;
   break;
  }
  HEAP32[i9 >> 2] = _plain_vgetc() | 0;
  i3 = HEAP32[i9 >> 2] & 255;
  i2 = HEAP32[i11 >> 2] | 0;
  HEAP32[i11 >> 2] = i2 + 1;
  HEAP8[i10 + i2 >> 0] = i3;
  HEAP8[i10 + (HEAP32[i11 >> 2] | 0) >> 0] = 0;
  if (HEAP32[i12 >> 2] | 0) if (!(_strncmp(i10, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0)) {
   if (!(HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] | 0)) {
    i4 = 24;
    break;
   }
   continue;
  }
  L14 : do if (!(HEAP32[i7 >> 2] | 0)) switch (HEAP32[i6 >> 2] | 0) {
  case 1:
   {
    _put_on_cmdline(i10, HEAP32[i11 >> 2] | 0, 1) | 0;
    break L14;
    break;
   }
  case 2:
   {
    if (!(HEAP32[i8 >> 2] | 0)) break L14;
    if ((_ga_grow(HEAP32[i8 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0) != 1) break L14;
    _memmove((HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[HEAP32[i8 >> 2] >> 2] | 0) | 0, i10 | 0, HEAP32[i11 >> 2] | 0) | 0;
    i3 = HEAP32[i8 >> 2] | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
    break L14;
    break;
   }
  case 0:
   {
    if ((_stop_arrow() | 0) != 1) break L14;
    HEAP32[i9 >> 2] = HEAPU8[i10 >> 0];
    if ((HEAP32[i11 >> 2] | 0) == 1) if ((HEAP32[i9 >> 2] | 0) == 13 | (HEAP32[i9 >> 2] | 0) == -16715 | (HEAP32[i9 >> 2] | 0) == 10) {
     _ins_eol(HEAP32[i9 >> 2] | 0) | 0;
     break L14;
    }
    _ins_char_bytes(i10, HEAP32[i11 >> 2] | 0);
    _AppendToRedobuffLit(i10, HEAP32[i11 >> 2] | 0);
    break L14;
    break;
   }
  case 3:
   {
    if ((HEAP32[i13 >> 2] | 0) != -1) break L14;
    HEAP32[i13 >> 2] = HEAPU8[i10 >> 0];
    break L14;
    break;
   }
  default:
   break L14;
  } while (0);
  HEAP32[i11 >> 2] = 0;
 }
 if ((i4 | 0) == 24) {
  HEAP32[26802] = (HEAP32[26802] | 0) + -1;
  HEAP32[26804] = HEAP32[i14 >> 2];
  HEAP32[26961] = HEAP32[i15 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 564 >> 2] = HEAP32[i16 >> 2];
  STACKTOP = i5;
  return HEAP32[i13 >> 2] | 0;
 }
 return 0;
}

function _scroll_cursor_top(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 40 | 0;
 i6 = i4 + 36 | 0;
 i7 = i4 + 32 | 0;
 i8 = i4 + 28 | 0;
 i9 = i4 + 24 | 0;
 i10 = i4 + 20 | 0;
 i11 = i4 + 16 | 0;
 i12 = i4 + 12 | 0;
 i13 = i4 + 8 | 0;
 i14 = i4 + 4 | 0;
 i15 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 HEAP32[i15 >> 2] = HEAP32[26971];
 if ((HEAP32[26756] | 0) > 0) HEAP32[i15 >> 2] = (HEAP32[26756] | 0) - 1;
 _validate_cheight();
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[26881] | 0) + 124 >> 2];
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i11 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - 1;
 HEAP32[i12 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1;
 HEAP32[i14 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) <= 0) break;
  HEAP32[i10 >> 2] = _plines(HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  if (((HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0) <= (HEAP32[i15 >> 2] | 0)) if ((HEAP32[i12 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
   i2 = _plines(HEAP32[i12 >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i2;
  }
  if ((HEAP32[i9 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) break;
  if ((HEAP32[i11 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  if ((HEAP32[i14 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) i3 = 15; else if ((HEAP32[i7 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) i3 = 15;
  if ((i3 | 0) == 15) {
   i3 = 0;
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i15 >> 2] | 0)) break;
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
  HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if ((HEAP32[i9 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) {
  _scroll_cursor_halfway(0);
  STACKTOP = i4;
  return;
 }
 if (HEAP32[i6 >> 2] | 0 ? 1 : (HEAP32[i14 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[i14 >> 2];
 if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  i14 = HEAP32[26881] | 0;
  HEAP32[i14 + 68 >> 2] = HEAP32[i14 + 24 >> 2];
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) != (HEAP32[i13 >> 2] | 0)) {
  i13 = (HEAP32[26881] | 0) + 108 | 0;
  HEAP32[i13 >> 2] = HEAP32[i13 >> 2] & -114;
 }
 i13 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 128;
 STACKTOP = i4;
 return;
}

function _auto_next_pat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4;
 i7 = i4 + 32 | 0;
 i8 = i4 + 28 | 0;
 i9 = i4 + 24 | 0;
 i10 = i4 + 20 | 0;
 i11 = i4 + 16 | 0;
 i12 = i4 + 12 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 if (HEAP32[26731] | 0) {
  _vim_free(HEAP32[26731] | 0);
  HEAP32[26731] = 0;
 }
 HEAP32[i9 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 L4 : while (1) {
  if (!(HEAP32[i9 >> 2] | 0)) {
   i3 = 24;
   break;
  }
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
   i3 = 24;
   break;
  }
  HEAP32[HEAP32[i7 >> 2] >> 2] = 0;
  do if (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) {
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) != -3) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] | 0)) break;
   i2 = HEAP32[i9 >> 2] | 0;
   if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0)) {
    if (_match_file_pat(0, i2 + 8 | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0, HEAP8[(HEAP32[i9 >> 2] | 0) + 28 >> 0] | 0) | 0) i3 = 13;
   } else if ((HEAP32[i2 + 24 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] | 0)) i3 = 13;
   if ((i3 | 0) == 13) {
    i3 = 0;
    HEAP32[i11 >> 2] = _event_nr2name(HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) | 0;
    HEAP32[i12 >> 2] = 53625;
    i2 = _strlen(HEAP32[i12 >> 2] | 0) | 0;
    i1 = i2 + (_strlen(HEAP32[i11 >> 2] | 0) | 0) | 0;
    HEAP32[26731] = _alloc(i1 + (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) + 1 | 0) | 0;
    if (HEAP32[26731] | 0) {
     i1 = HEAP32[26731] | 0;
     i2 = HEAP32[i12 >> 2] | 0;
     i13 = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0;
     HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i6 + 4 >> 2] = i13;
     _sprintf(i1, i2, i6) | 0;
     if ((HEAP32[26888] | 0) >= 8) {
      _verbose_enter();
      HEAP32[i5 >> 2] = HEAP32[26731];
      _smsg(53650, i5) | 0;
      _verbose_leave();
     }
    }
    HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i9 >> 2];
    HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2];
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2];
    while (1) {
     i14 = (HEAP32[i10 >> 2] | 0) + 5 | 0;
     if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0)) break;
     HEAP8[i14 >> 0] = 0;
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2];
    }
    HEAP8[i14 >> 0] = 1;
   }
   _line_breakcheck();
   if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) {
    i3 = 24;
    break L4;
   }
  } while (0);
  if (HEAP32[i8 >> 2] | 0) if (HEAP8[(HEAP32[i9 >> 2] | 0) + 29 >> 0] | 0) {
   i3 = 24;
   break;
  }
  HEAP32[i9 >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
 }
 if ((i3 | 0) == 24) {
  STACKTOP = i4;
  return;
 }
}

function _set_option_value(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 36 | 0;
 i7 = i5 + 32 | 0;
 i8 = i5 + 28 | 0;
 i9 = i5 + 24 | 0;
 i10 = i5 + 20 | 0;
 i11 = i5 + 16 | 0;
 i12 = i5 + 12 | 0;
 i13 = i5 + 8 | 0;
 i14 = i5 + 4 | 0;
 i15 = i5 + 40 | 0;
 i16 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = _findoption(HEAP32[i7 >> 2] | 0) | 0;
 if ((HEAP32[i11 >> 2] | 0) < 0) {
  if ((_strlen(HEAP32[i7 >> 2] | 0) | 0) == 4) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 116) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0 | 0) == 95) {
   i4 = _find_key_option(HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[i14 >> 2] = i4;
   if (i4 | 0) {
    if ((HEAP32[i14 >> 2] | 0) < 0) {
     HEAP8[i15 >> 0] = 0 - (HEAP32[i14 >> 2] | 0);
     HEAP8[i15 + 1 >> 0] = (0 - (HEAP32[i14 >> 2] | 0) | 0) >>> 8;
    } else {
     HEAP8[i15 >> 0] = -14;
     HEAP8[i15 + 1 >> 0] = HEAP32[i14 >> 2];
    }
    _add_termcode(i15, HEAP32[i9 >> 2] | 0, 0);
    if (HEAP32[26781] | 0) _ttest(0);
    _redraw_all_later(50);
    HEAP32[i6 >> 2] = 0;
    i17 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i17 | 0;
   }
  }
  _emsg2(63546, HEAP32[i7 >> 2] | 0) | 0;
 } else {
  HEAP32[i13 >> 2] = HEAP32[15328 + ((HEAP32[i11 >> 2] | 0) * 28 | 0) + 8 >> 2];
  i15 = HEAP32[i11 >> 2] | 0;
  if (HEAP32[i13 >> 2] & 4 | 0) {
   HEAP32[i6 >> 2] = _set_string_option(i15, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
   i17 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i17 | 0;
  }
  HEAP32[i12 >> 2] = _get_varp_scope(15328 + (i15 * 28 | 0) | 0, HEAP32[i10 >> 2] | 0) | 0;
  if (HEAP32[i12 >> 2] | 0) {
   if ((HEAP32[i8 >> 2] | 0) == 0 & (HEAP32[i9 >> 2] | 0) != 0) {
    HEAP32[i16 >> 2] = 0;
    while (1) {
     if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0 | 0) != 48) break;
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
    }
    if ((HEAP32[i16 >> 2] | 0) == 0 ? 1 : (HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i16 >> 2] | 0) >> 0] | 0 | 0) != 0) {
     _emsg3(63571, HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
     HEAP32[i6 >> 2] = 0;
     i17 = HEAP32[i6 >> 2] | 0;
     STACKTOP = i5;
     return i17 | 0;
    }
   }
   i9 = HEAP32[i11 >> 2] | 0;
   i11 = HEAP32[i12 >> 2] | 0;
   i12 = HEAP32[i8 >> 2] | 0;
   i8 = HEAP32[i10 >> 2] | 0;
   if (HEAP32[i13 >> 2] & 2 | 0) {
    HEAP32[i6 >> 2] = _set_num_option(i9, i11, i12, 0, 0, i8) | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i17 | 0;
   } else {
    HEAP32[i6 >> 2] = _set_bool_option(i9, i11, i12, i8) | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i17 | 0;
   }
  }
 }
 HEAP32[i6 >> 2] = 0;
 i17 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i17 | 0;
}

function _win_enter_ext(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 4128 | 0;
 i9 = i8 + 24 | 0;
 i10 = i8 + 20 | 0;
 i11 = i8 + 16 | 0;
 i12 = i8 + 12 | 0;
 i13 = i8 + 8 | 0;
 i14 = i8 + 4 | 0;
 i15 = i8;
 i16 = i8 + 32 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = 0;
 if (!(HEAP32[i11 >> 2] | 0 ? 1 : (HEAP32[i9 >> 2] | 0) != (HEAP32[26881] | 0))) {
  STACKTOP = i8;
  return;
 }
 if ((HEAP32[i11 >> 2] | 0) == 0 & (HEAP32[i14 >> 2] | 0) != 0) {
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[26773] | 0)) {
   _apply_autocmds(6, 0, 0, 0, HEAP32[26773] | 0) | 0;
   HEAP32[i15 >> 2] = 1;
   if (!(_win_valid(HEAP32[i9 >> 2] | 0) | 0)) {
    STACKTOP = i8;
    return;
   }
  }
  _apply_autocmds(94, 0, 0, 0, HEAP32[26773] | 0) | 0;
  if (!(_win_valid(HEAP32[i9 >> 2] | 0) | 0)) {
   STACKTOP = i8;
   return;
  }
 }
 if (HEAP32[i10 >> 2] | 0) if ((HEAP32[26773] | 0) != (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) _u_sync(0);
 _update_topline();
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[26773] | 0)) _buf_copy_options(HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0, 5);
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[26768] = HEAP32[26881];
  HEAP32[(HEAP32[26881] | 0) + 176 >> 2] = 1;
 }
 HEAP32[26881] = HEAP32[i9 >> 2];
 HEAP32[26773] = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2];
 _check_cursor();
 _changed_line_abv_curs();
 i9 = HEAP32[26857] | 0;
 if (HEAP32[(HEAP32[26881] | 0) + 196 >> 2] | 0) {
  if (!i9) if ((_mch_dirname(i16, 4096) | 0) == 1) HEAP32[26857] = _vim_strsave(i16) | 0;
  if (!(_mch_chdir(HEAP32[(HEAP32[26881] | 0) + 196 >> 2] | 0) | 0)) _shorten_fnames(1);
 } else if (i9 | 0) {
  _mch_chdir(HEAP32[26857] | 0) | 0;
  if (HEAP32[26857] | 0) {
   _vim_free(HEAP32[26857] | 0);
   HEAP32[26857] = 0;
  }
  _shorten_fnames(1);
 }
 if (HEAP32[i12 >> 2] | 0) _apply_autocmds(95, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if (HEAP32[i13 >> 2] | 0) {
  _apply_autocmds(93, 0, 0, 0, HEAP32[26773] | 0) | 0;
  if (HEAP32[i15 >> 2] | 0) _apply_autocmds(2, 0, 0, 0, HEAP32[26773] | 0) | 0;
 }
 HEAP32[(HEAP32[26881] | 0) + 176 >> 2] = 1;
 HEAP32[26770] = 1;
 if (HEAP32[26806] | 0) _redraw_later(10);
 if ((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) < (HEAP32[27034] | 0)) if (HEAP32[(HEAP32[26881] | 0) + 200 + 12 >> 2] | 0) i7 = 33; else _win_setheight(HEAP32[27034] | 0); else i7 = 33;
 if ((i7 | 0) == 33) if (!(HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) _win_setheight(1);
 if ((HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) < (HEAP32[27037] | 0)) if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 16 >> 2] | 0)) _win_setwidth(HEAP32[27037] | 0);
 _setmouse();
 STACKTOP = i8;
 return;
}

function _get_op_vcol(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[10179] | 0) != 22) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[i7 >> 2] | 0)) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 36 + 4 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 64 >> 2] = 1;
 i3 = HEAP32[i5 >> 2] | 0;
 _getvcol(HEAP32[26881] | 0, i3 + 28 | 0, i3 + 68 | 0, 0, i3 + 72 | 0);
 do if (!(HEAP32[26790] | 0)) {
  _getvcol(HEAP32[26881] | 0, (HEAP32[i5 >> 2] | 0) + 36 | 0, i8, 0, i9);
  if ((HEAP32[i8 >> 2] | 0) < (HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] = HEAP32[i8 >> 2];
  if ((HEAP32[i9 >> 2] | 0) > (HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0)) {
   if (HEAP32[i7 >> 2] | 0) if ((HEAP32[i8 >> 2] | 0) >= 1 ? (HEAPU8[HEAP32[26975] >> 0] | 0) == 101 : 0) if (((HEAP32[i8 >> 2] | 0) - 1 | 0) >= (HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0)) {
    HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] = (HEAP32[i8 >> 2] | 0) - 1;
    break;
   }
   HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] = HEAP32[i9 >> 2];
  }
 } while (0);
 L20 : do if ((HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) == 2147483647) {
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 2147483647;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] = 0;
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2];
  while (1) {
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0)) break L20;
   i8 = HEAP32[26881] | 0;
   _getvcol(i8 | 0, i8 + 24 | 0, 0, 0, i9);
   if ((HEAP32[i9 >> 2] | 0) > (HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] = HEAP32[i9 >> 2];
   i8 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
 } else if (HEAP32[26790] | 0) {
  i8 = HEAP32[i5 >> 2] | 0;
  HEAP32[i8 + 72 >> 2] = (HEAP32[i8 + 68 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) - 1;
 } while (0);
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2];
 _coladvance(HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) | 0;
 i6 = (HEAP32[i5 >> 2] | 0) + 36 | 0;
 i9 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
 i9 = (HEAP32[26881] | 0) + 24 | 0;
 i6 = (HEAP32[i5 >> 2] | 0) + 28 | 0;
 HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 _coladvance(HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0) | 0;
 i6 = (HEAP32[i5 >> 2] | 0) + 28 | 0;
 i5 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 STACKTOP = i4;
 return;
}

function _list_version() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i5 >> 2] = 114072;
 _init_longVersion();
 _msg(HEAP32[27180] | 0) | 0;
 L1 : do if (155) {
  _msg_puts(81219);
  HEAP32[i4 >> 2] = -1;
  HEAP32[i3 >> 2] = 0;
  while (1) {
   if (!(HEAP32[33180 + (HEAP32[i3 >> 2] << 2) >> 2] | 0)) break;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  }
  while (1) {
   i6 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
   HEAP32[i3 >> 2] = i6;
   if ((i6 | 0) < 0) break L1;
   if ((HEAP32[i4 >> 2] | 0) < 0) HEAP32[i4 >> 2] = HEAP32[33180 + (HEAP32[i3 >> 2] << 2) >> 2];
   if (!(HEAP32[i3 >> 2] | 0)) i1 = 11; else if ((HEAP32[33180 + ((HEAP32[i3 >> 2] | 0) - 1 << 2) >> 2] | 0) != ((HEAP32[33180 + (HEAP32[i3 >> 2] << 2) >> 2] | 0) + 1 | 0)) i1 = 11;
   if ((i1 | 0) == 11) {
    i1 = 0;
    _msg_puts(HEAP32[i5 >> 2] | 0);
    HEAP32[i5 >> 2] = 81239;
    _msg_outnum(HEAP32[i4 >> 2] | 0);
    if ((HEAP32[i4 >> 2] | 0) != (HEAP32[33180 + (HEAP32[i3 >> 2] << 2) >> 2] | 0)) {
     _msg_puts(81242);
     _msg_outnum(HEAP32[33180 + (HEAP32[i3 >> 2] << 2) >> 2] | 0);
    }
    HEAP32[i4 >> 2] = -1;
   }
  }
 } while (0);
 L22 : do if (0) {
  _msg_puts(81244);
  HEAP32[i5 >> 2] = 114072;
  HEAP32[i3 >> 2] = 0;
  while (1) {
   if (!0) break L22;
   _msg_puts(HEAP32[i5 >> 2] | 0);
   HEAP32[i5 >> 2] = 81239;
   _msg_puts(0);
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAPU8[72525] | 0 | 0) i1 = 21; else if (HEAPU8[72533] | 0 | 0) i1 = 21;
 if ((i1 | 0) == 21) {
  _msg_puts(81261);
  if (HEAPU8[72525] | 0 | 0) {
   _msg_puts(81272);
   _msg_puts(72525);
  }
  if (HEAPU8[72533] | 0 | 0) {
   _msg_puts(81276);
   _msg_puts(72533);
  }
 }
 _msg_puts(81278);
 _version_msg(81293);
 _list_features();
 _version_msg(81330);
 _version_msg(94563);
 _version_msg(94908);
 _version_msg(81354);
 _version_msg(94582);
 _version_msg(94908);
 _version_msg(81378);
 _version_msg(94595);
 _version_msg(94908);
 _version_msg(81402);
 _version_msg(94615);
 _version_msg(94908);
 _version_msg(81426);
 _version_msg(84329);
 _version_msg(94908);
 _version_msg(81450);
 _version_msg(84350);
 _version_msg(94908);
 _version_msg(81474);
 _version_msg(84364);
 _version_msg(94908);
 _version_msg(81498);
 _version_msg(94505);
 _version_msg(94908);
 _version_msg(81522);
 _version_msg(81546);
 _version_msg(94908);
 if (HEAPU8[72231] | 0 | 0) {
  _version_msg(81567);
  _version_msg(72231);
  _version_msg(94908);
 }
 if (!(HEAPU8[114072] | 0)) {
  _version_msg(81615);
  _version_msg(72252);
  _version_msg(97581);
  _version_msg(81629);
  _version_msg(72425);
  STACKTOP = i2;
  return;
 }
 _version_msg(81591);
 _version_msg(114072);
 _version_msg(94908);
 _version_msg(81615);
 _version_msg(72252);
 _version_msg(97581);
 _version_msg(81629);
 _version_msg(72425);
 STACKTOP = i2;
 return;
}

function _mf_open(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i4 + 100 | 0;
 i6 = i4 + 96 | 0;
 i7 = i4 + 92 | 0;
 i8 = i4 + 88 | 0;
 i9 = i4 + 84 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i12 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 i2 = _alloc(600) | 0;
 HEAP32[i8 >> 2] = i2;
 if (!i2) {
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 i2 = HEAP32[i8 >> 2] | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 0;
  HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = -1;
 } else {
  _mf_do_open(i2, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) < 0) {
   _vim_free(HEAP32[i8 >> 2] | 0);
   HEAP32[i5 >> 2] = 0;
   i13 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i13 | 0;
  }
 }
 HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 596 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = 0;
 _mf_hash_init((HEAP32[i8 >> 2] | 0) + 32 | 0);
 _mf_hash_init((HEAP32[i8 >> 2] | 0) + 304 | 0);
 HEAP32[(HEAP32[i8 >> 2] | 0) + 592 >> 2] = 4096;
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) >= 0) if (!(_fstat(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0, i10) | 0)) if ((HEAP32[i10 + 40 >> 2] | 0) >= 1048) if ((HEAP32[i10 + 40 >> 2] | 0) <= 5e4) HEAP32[(HEAP32[i8 >> 2] | 0) + 592 >> 2] = HEAP32[i10 + 40 >> 2];
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) < 0) i3 = 15; else if (HEAP32[i7 >> 2] & 640 | 0) i3 = 15; else {
  i7 = _lseek(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0, 0, 2) | 0;
  HEAP32[i9 >> 2] = i7;
  if ((i7 | 0) <= 0) i3 = 15; else {
   i7 = HEAP32[i8 >> 2] | 0;
   i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + 592 >> 2] | 0;
   HEAP32[i7 + 576 >> 2] = (((HEAP32[i9 >> 2] | 0) + i10 - 1 | 0) >>> 0) / ((i10 | 0) >>> 0) | 0;
  }
 }
 if ((i3 | 0) == 15) HEAP32[(HEAP32[i8 >> 2] | 0) + 576 >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 580 >> 2] = -1;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 584 >> 2] = 0;
 i3 = HEAP32[i8 >> 2] | 0;
 HEAP32[i3 + 588 >> 2] = HEAP32[i3 + 576 >> 2];
 HEAP32[i11 >> 2] = 10;
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 592 >> 2];
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) <= 0) break;
  if (HEAP32[i12 >> 2] & 1 | 0) break;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) >>> 1;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + -1;
 }
 HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = (HEAP32[26949] << HEAP32[i11 >> 2] >>> 0) / ((HEAP32[i12 >> 2] | 0) >>> 0) | 0;
 if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] | 0) >>> 0 < 10) HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = 10;
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 i13 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i13 | 0;
}

function _match_with_backref(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i7 + 36 | 0;
 i9 = i7 + 32 | 0;
 i10 = i7 + 28 | 0;
 i11 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i13 = i7 + 16 | 0;
 i14 = i7 + 12 | 0;
 i15 = i7 + 8 | 0;
 i16 = i7 + 4 | 0;
 i17 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i15 >> 2] = HEAP32[i10 >> 2];
 if (HEAP32[i13 >> 2] | 0) HEAP32[HEAP32[i13 >> 2] >> 2] = 0;
 while (1) {
  if ((HEAP32[26325] | 0) != (HEAP32[26337] | 0)) {
   HEAP32[i16 >> 2] = _strlen(HEAP32[26325] | 0) | 0;
   if (!(HEAP32[26337] | 0)) i6 = 7; else if ((HEAP32[i16 >> 2] | 0) >= (HEAP32[26338] | 0)) i6 = 7;
   if ((i6 | 0) == 7) {
    i6 = 0;
    HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 50;
    _vim_free(HEAP32[26337] | 0);
    HEAP32[26337] = _alloc(HEAP32[i16 >> 2] | 0) | 0;
    if (!(HEAP32[26337] | 0)) {
     i6 = 8;
     break;
    }
    HEAP32[26338] = HEAP32[i16 >> 2];
   }
   _strcpy(HEAP32[26337] | 0, HEAP32[26325] | 0) | 0;
   HEAP32[26334] = (HEAP32[26337] | 0) + ((HEAP32[26334] | 0) - (HEAP32[26325] | 0));
   HEAP32[26325] = HEAP32[26337];
  }
  HEAP32[i17 >> 2] = _reg_getline(HEAP32[i14 >> 2] | 0) | 0;
  if ((HEAP32[i14 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) HEAP32[i16 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i15 >> 2] | 0); else HEAP32[i16 >> 2] = _strlen((HEAP32[i17 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) | 0;
  if (_cstrncmp((HEAP32[i17 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0, HEAP32[26334] | 0, i16) | 0) {
   i6 = 15;
   break;
  }
  if (HEAP32[i13 >> 2] | 0) {
   i10 = HEAP32[i13 >> 2] | 0;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
  }
  if ((HEAP32[i14 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
   i6 = 26;
   break;
  }
  if ((HEAP32[26326] | 0) >= (HEAP32[26321] | 0)) {
   i6 = 20;
   break;
  }
  _reg_nextline();
  if (HEAP32[i13 >> 2] | 0) HEAP32[HEAP32[i13 >> 2] >> 2] = 0;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  HEAP32[i15 >> 2] = 0;
  if (HEAP32[26834] | 0) {
   i6 = 24;
   break;
  }
 }
 if ((i6 | 0) == 8) {
  HEAP32[i8 >> 2] = 1;
  i18 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i18 | 0;
 } else if ((i6 | 0) == 15) {
  HEAP32[i8 >> 2] = 5;
  i18 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i18 | 0;
 } else if ((i6 | 0) == 20) {
  HEAP32[i8 >> 2] = 5;
  i18 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i18 | 0;
 } else if ((i6 | 0) == 24) {
  HEAP32[i8 >> 2] = 1;
  i18 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i18 | 0;
 } else if ((i6 | 0) == 26) {
  HEAP32[i8 >> 2] = 4;
  i18 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i18 | 0;
 }
 return 0;
}

function _screen_stop_highlight() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 8 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = 0;
 if (!(HEAP32[26455] | 0)) {
  HEAP32[26455] = 0;
  STACKTOP = i2;
  return;
 }
 if (HEAP32[26627] | 0) {
  HEAP32[i3 >> 2] = HEAP32[26455];
  _sprintf(i5, 74374, i3) | 0;
  _out_str(i5);
  HEAP32[26455] = 0;
  STACKTOP = i2;
  return;
 }
 do if ((HEAP32[26455] | 0) > 255) {
  i5 = HEAP32[26455] | 0;
  do if ((HEAP32[26734] | 0) > 1) {
   HEAP32[i6 >> 2] = _syn_cterm_attr2entry(i5) | 0;
   if (HEAP32[i6 >> 2] | 0) {
    if (!(HEAPU16[(HEAP32[i6 >> 2] | 0) + 4 >> 1] | 0)) if (!(HEAPU16[(HEAP32[i6 >> 2] | 0) + 4 + 2 >> 1] | 0)) break;
    HEAP32[i4 >> 2] = 1;
   }
  } else {
   HEAP32[i6 >> 2] = _syn_term_attr2entry(i5) | 0;
   if (HEAP32[i6 >> 2] | 0) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + 4 >> 2] | 0) if (!(_strcmp(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + 4 >> 2] | 0, HEAP32[26538] | 0) | 0)) {
    HEAP32[i4 >> 2] = 1;
    break;
   } else {
    _out_str(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + 4 >> 2] | 0);
    break;
   }
  } while (0);
  if (!(HEAP32[i6 >> 2] | 0)) {
   HEAP32[26455] = 0;
   break;
  } else {
   HEAP32[26455] = HEAP16[HEAP32[i6 >> 2] >> 1];
   break;
  }
 } while (0);
 do if (HEAP32[26455] & 32 | 0) if (!(_strcmp(HEAP32[26541] | 0, HEAP32[26538] | 0) | 0)) {
  HEAP32[i4 >> 2] = 1;
  break;
 } else {
  _out_str(HEAP32[26541] | 0);
  break;
 } while (0);
 do if (HEAP32[26455] & 16 | 0) if (HEAPU8[HEAP32[26547] >> 0] | 0) if (!(_strcmp(HEAP32[26547] | 0, HEAP32[26538] | 0) | 0)) {
  HEAP32[i4 >> 2] = 1;
  break;
 } else {
  _out_str(HEAP32[26547] | 0);
  break;
 } while (0);
 if (HEAP32[26455] & 8 | 0) i1 = 30; else if (HEAP32[26455] & 16 | 0) if (!(HEAPU8[HEAP32[26547] >> 0] | 0)) i1 = 30;
 do if ((i1 | 0) == 30) if (!(_strcmp(HEAP32[26545] | 0, HEAP32[26538] | 0) | 0)) {
  HEAP32[i4 >> 2] = 1;
  break;
 } else {
  _out_str(HEAP32[26545] | 0);
  break;
 } while (0);
 do if (HEAP32[26455] & 4 | 0) if (!(_strcmp(HEAP32[26544] | 0, HEAP32[26538] | 0) | 0)) {
  HEAP32[i4 >> 2] = 1;
  break;
 } else {
  _out_str(HEAP32[26544] | 0);
  break;
 } while (0);
 do if (HEAP32[26455] & 128 | 0) if (!(_strcmp(HEAP32[26549] | 0, HEAP32[26538] | 0) | 0)) {
  HEAP32[i4 >> 2] = 1;
  break;
 } else {
  _out_str(HEAP32[26549] | 0);
  break;
 } while (0);
 if (HEAP32[i4 >> 2] | 0) i1 = 43; else if (HEAP32[26455] & 3 | 0) i1 = 43;
 if ((i1 | 0) == 43) _out_str(HEAP32[26538] | 0);
 if ((HEAP32[26734] | 0) <= 1) {
  HEAP32[26455] = 0;
  STACKTOP = i2;
  return;
 }
 if (HEAP32[26741] | 0) _term_fg_color((HEAP32[26741] | 0) - 1 | 0);
 if (HEAP32[26743] | 0) _term_bg_color((HEAP32[26743] | 0) - 1 | 0);
 if (!(HEAP32[26742] | 0)) {
  HEAP32[26455] = 0;
  STACKTOP = i2;
  return;
 }
 _out_str(HEAP32[26540] | 0);
 HEAP32[26455] = 0;
 STACKTOP = i2;
 return;
}

function _fcntl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i5 = i4 + 152 | 0;
 i6 = i4 + 136 | 0;
 i7 = i4 + 120 | 0;
 i8 = i4 + 104 | 0;
 i9 = i4 + 96 | 0;
 i10 = i4 + 80 | 0;
 i11 = i4 + 64 | 0;
 i12 = i4 + 48 | 0;
 i13 = i4 + 32 | 0;
 i14 = i4 + 16 | 0;
 i15 = i4;
 i16 = i4 + 176 | 0;
 i17 = i4 + 168 | 0;
 HEAP32[i16 >> 2] = i3;
 i3 = (HEAP32[i16 >> 2] | 0) + (4 - 1) & ~(4 - 1);
 i18 = HEAP32[i3 >> 2] | 0;
 HEAP32[i16 >> 2] = i3 + 4;
 i3 = (i2 | 0) == 4 ? i18 | 32768 : i18;
 L1 : do switch (i2 | 0) {
 case 14:
  {
   HEAP32[i15 >> 2] = i1;
   HEAP32[i15 + 4 >> 2] = 14;
   HEAP32[i15 + 8 >> 2] = i3;
   i19 = ___syscall_ret(___syscall221(221, i15 | 0) | 0) | 0;
   break;
  }
 case 9:
  {
   HEAP32[i14 >> 2] = i1;
   HEAP32[i14 + 4 >> 2] = 16;
   HEAP32[i14 + 8 >> 2] = i17;
   i18 = ___syscall221(221, i14 | 0) | 0;
   switch (i18 | 0) {
   case -22:
    {
     HEAP32[i13 >> 2] = i1;
     HEAP32[i13 + 4 >> 2] = 9;
     HEAP32[i13 + 8 >> 2] = i3;
     i20 = ___syscall221(221, i13 | 0) | 0;
     break;
    }
   case 0:
    {
     i16 = HEAP32[i17 + 4 >> 2] | 0;
     i20 = (HEAP32[i17 >> 2] | 0) == 2 ? 0 - i16 | 0 : i16;
     break;
    }
   default:
    i20 = ___syscall_ret(i18) | 0;
   }
   i19 = i20;
   break;
  }
 case 1030:
  {
   HEAP32[i12 >> 2] = i1;
   HEAP32[i12 + 4 >> 2] = 1030;
   HEAP32[i12 + 8 >> 2] = i3;
   i18 = ___syscall221(221, i12 | 0) | 0;
   if ((i18 | 0) != -22) {
    if ((i18 | 0) > -1) {
     HEAP32[i11 >> 2] = i18;
     HEAP32[i11 + 4 >> 2] = 2;
     HEAP32[i11 + 8 >> 2] = 1;
     ___syscall221(221, i11 | 0) | 0;
    }
    i19 = ___syscall_ret(i18) | 0;
    break L1;
   }
   HEAP32[i10 >> 2] = i1;
   HEAP32[i10 + 4 >> 2] = 1030;
   HEAP32[i10 + 8 >> 2] = 0;
   i18 = ___syscall221(221, i10 | 0) | 0;
   if ((i18 | 0) == -22) {
    HEAP32[i8 >> 2] = i1;
    HEAP32[i8 + 4 >> 2] = 0;
    HEAP32[i8 + 8 >> 2] = i3;
    i16 = ___syscall221(221, i8 | 0) | 0;
    if ((i16 | 0) > -1) {
     HEAP32[i7 >> 2] = i16;
     HEAP32[i7 + 4 >> 2] = 2;
     HEAP32[i7 + 8 >> 2] = 1;
     ___syscall221(221, i7 | 0) | 0;
    }
    i19 = ___syscall_ret(i16) | 0;
    break L1;
   } else {
    if ((i18 | 0) > -1) {
     HEAP32[i9 >> 2] = i18;
     ___syscall6(6, i9 | 0) | 0;
    }
    i19 = ___syscall_ret(-22) | 0;
    break L1;
   }
   break;
  }
 case 15:
 case 16:
 case 12:
 case 13:
  {
   HEAP32[i6 >> 2] = i1;
   HEAP32[i6 + 4 >> 2] = i2;
   HEAP32[i6 + 8 >> 2] = i3;
   i19 = ___syscall_ret(___syscall221(221, i6 | 0) | 0) | 0;
   break;
  }
 default:
  {
   HEAP32[i5 >> 2] = i1;
   HEAP32[i5 + 4 >> 2] = i2;
   HEAP32[i5 + 8 >> 2] = i3;
   i19 = ___syscall_ret(___syscall221(221, i5 | 0) | 0) | 0;
  }
 } while (0);
 STACKTOP = i4;
 return i19 | 0;
}

function _win_rotate(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) {
  _beep_flush();
  STACKTOP = i4;
  return;
 }
 HEAP32[26757] = 1;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[(HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0) + 20 >> 2] | 0) + 32 >> 2];
 while (1) {
  if (!(HEAP32[i9 >> 2] | 0)) break;
  if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] | 0)) {
   i3 = 6;
   break;
  }
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2];
 }
 if ((i3 | 0) == 6) {
  _emsg(83896) | 0;
  STACKTOP = i4;
  return;
 }
 while (1) {
  i3 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i3 + -1;
  if (!i3) break;
  i3 = HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0;
  if (HEAP32[i5 >> 2] | 0) {
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i3 + 20 >> 2] | 0) + 32 >> 2];
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2];
   _win_remove(HEAP32[i7 >> 2] | 0, 0);
   _frame_remove(HEAP32[i9 >> 2] | 0);
   while (1) {
    i11 = HEAP32[i9 >> 2] | 0;
    if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0)) break;
    HEAP32[i9 >> 2] = HEAP32[i11 + 24 >> 2];
   }
   _win_append(HEAP32[i11 + 36 >> 2] | 0, HEAP32[i7 >> 2] | 0);
   _frame_append(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0);
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2];
  } else {
   HEAP32[i9 >> 2] = i3;
   while (1) {
    i12 = HEAP32[i9 >> 2] | 0;
    if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] | 0)) break;
    HEAP32[i9 >> 2] = HEAP32[i12 + 24 >> 2];
   }
   HEAP32[i7 >> 2] = HEAP32[i12 + 36 >> 2];
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2];
   _win_remove(HEAP32[i7 >> 2] | 0, 0);
   _frame_remove(HEAP32[i9 >> 2] | 0);
   _win_append(HEAP32[(HEAP32[(HEAP32[(HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0) + 32 >> 2] | 0) + 36 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
   i3 = HEAP32[i9 >> 2] | 0;
   _frame_insert(HEAP32[(HEAP32[i3 + 20 >> 2] | 0) + 32 >> 2] | 0, i3 | 0);
  }
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2];
  HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 92 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 92 >> 2] = HEAP32[i10 >> 2];
  _frame_fix_height(HEAP32[i7 >> 2] | 0);
  _frame_fix_height(HEAP32[i8 >> 2] | 0);
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 104 >> 2];
  HEAP32[(HEAP32[i8 >> 2] | 0) + 104 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 104 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 104 >> 2] = HEAP32[i10 >> 2];
  _frame_fix_width(HEAP32[i7 >> 2] | 0);
  _frame_fix_width(HEAP32[i8 >> 2] | 0);
  _win_comp_pos() | 0;
 }
 _redraw_later(50);
 STACKTOP = i4;
 return;
}

function _ExpandEscape(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 24 | 0;
 i8 = i6 + 20 | 0;
 i9 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i12 = i6 + 4 | 0;
 i13 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 if (HEAP32[i11 >> 2] & 2 | 0) _tilde_replace(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 if (!(HEAP32[i11 >> 2] & 128)) {
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) != 2) if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) != 38) if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) != 32) if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) != 9) if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) != 3) {
  if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) != 6) {
   STACKTOP = i6;
   return;
  }
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
   HEAP32[i13 >> 2] = _vim_strsave_escaped(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0, 51878) | 0;
   if (HEAP32[i13 >> 2] | 0) {
    _vim_free(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0);
    HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] = HEAP32[i13 >> 2];
   }
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  STACKTOP = i6;
  return;
 }
 HEAP32[i12 >> 2] = 0;
 while (1) {
  i14 = (HEAP32[i7 >> 2] | 0) + 12 | 0;
  if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  if ((HEAP32[i14 >> 2] | 0) == 2) {
   HEAP32[i13 >> 2] = _vim_strsave_escaped(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0, 97452) | 0;
   if (HEAP32[i13 >> 2] | 0) {
    _vim_free(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0);
    HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] = HEAP32[i13 >> 2];
   }
  }
  HEAP32[i13 >> 2] = _vim_strsave_fnameescape(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) | 0;
  if (HEAP32[i13 >> 2] | 0) {
   _vim_free(HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0);
   HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] = HEAP32[i13 >> 2];
  }
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == 92) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0 | 0) == 126) if ((HEAPU8[HEAP32[(HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] >> 0] | 0 | 0) == 126) _escape_fname((HEAP32[i10 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) | 0);
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 HEAP32[i14 >> 2] = 0;
 if ((HEAPU8[HEAP32[HEAP32[i10 >> 2] >> 2] >> 0] | 0 | 0) != 43) {
  STACKTOP = i6;
  return;
 }
 _escape_fname(HEAP32[i10 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _aucmd_restbuf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) {
  if (!(_win_valid(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) | 0)) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[26881] | 0) == (HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0)) if ((HEAP32[26773] | 0) != (HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0)) if (_bufref_valid((HEAP32[i3 >> 2] | 0) + 16 | 0) | 0) if (HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 2] | 0) {
   i1 = (HEAP32[26773] | 0) + 56 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
   HEAP32[26773] = HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 4 >> 2] = HEAP32[26773];
   i1 = (HEAP32[26773] | 0) + 56 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  }
  HEAP32[26881] = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2];
  HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
  _check_cursor();
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[26773] | 0) + 56 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
 _block_autocmds();
 L14 : do if ((HEAP32[26881] | 0) != (HEAP32[27113] | 0)) {
  HEAP32[i5 >> 2] = HEAP32[26884];
  L16 : while (1) {
   if (!(HEAP32[i5 >> 2] | 0)) break L14;
   if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26886] | 0)) i7 = HEAP32[26887] | 0; else i7 = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0;
   HEAP32[i6 >> 2] = i7;
   while (1) {
    if (!(HEAP32[i6 >> 2] | 0)) break;
    if ((HEAP32[i6 >> 2] | 0) == (HEAP32[27113] | 0)) break L16;
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
   }
   HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  }
  if ((HEAP32[i5 >> 2] | 0) != (HEAP32[26886] | 0)) _goto_tabpage_tp(HEAP32[i5 >> 2] | 0, 1, 1);
  _win_goto(HEAP32[27113] | 0);
 } while (0);
 _winframe_remove(HEAP32[26881] | 0, i4, 0) | 0;
 _win_remove(HEAP32[26881] | 0, 0);
 HEAP32[26769] = 0;
 _last_status(0);
 if (!(_valid_tabpage_win(HEAP32[26886] | 0) | 0)) _close_tabpage(HEAP32[26886] | 0);
 _restore_snapshot(1, 0);
 _win_comp_pos() | 0;
 _unblock_autocmds();
 if (_win_valid(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) | 0) HEAP32[26881] = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2]; else HEAP32[26881] = HEAP32[26887];
 HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
 _vim_free(HEAP32[26857] | 0);
 HEAP32[26857] = HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2];
 _check_cursor();
 if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[HEAP32[26773] >> 2];
 _gui_mch_enable_scrollbar((HEAP32[27113] | 0) + 812 | 0, 0);
 _gui_mch_enable_scrollbar((HEAP32[27113] | 0) + 812 + 40 | 0, 0);
 _gui_may_update_scrollbars();
 STACKTOP = i2;
 return;
}

function _edit_buffers(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i9 >> 2] = 1;
 HEAP32[26745] = (HEAP32[26745] | 0) + 1;
 HEAP32[26746] = (HEAP32[26746] | 0) + 1;
 if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) == -1) {
  _win_close(HEAP32[26881] | 0, 1) | 0;
  HEAP32[i9 >> 2] = 0;
 }
 HEAP32[i7 >> 2] = 1;
 HEAP32[i8 >> 2] = 1;
 L4 : while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[(HEAP32[i5 >> 2] | 0) + 152 >> 2] | 0)) break;
  if (HEAP32[i6 >> 2] | 0) _mch_chdir(HEAP32[i6 >> 2] | 0) | 0;
  if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) == -1) {
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   _win_close(HEAP32[26881] | 0, 1) | 0;
   HEAP32[i9 >> 2] = 0;
  } else {
   do if (HEAP32[i9 >> 2] | 0) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 156 >> 2] | 0) == 3) {
    if (!(HEAP32[HEAP32[26886] >> 2] | 0)) break L4;
    _goto_tabpage(0);
    break;
   } else {
    if (!(HEAP32[(HEAP32[26881] | 0) + 12 >> 2] | 0)) break L4;
    _win_enter(HEAP32[(HEAP32[26881] | 0) + 12 >> 2] | 0, 0);
    break;
   } while (0);
   HEAP32[i9 >> 2] = 1;
   if ((HEAP32[26773] | 0) == (HEAP32[(HEAP32[26887] | 0) + 4 >> 2] | 0)) i3 = 17; else if (!(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) i3 = 17;
   if ((i3 | 0) == 17) {
    i3 = 0;
    HEAP32[(HEAP32[26881] | 0) + 188 >> 2] = HEAP32[i7 >> 2];
    HEAP32[26813] = 0;
    if ((HEAP32[i7 >> 2] | 0) < (HEAP32[26868] | 0)) i11 = _alist_name((HEAP32[26872] | 0) + (HEAP32[i7 >> 2] << 3) | 0) | 0; else i11 = 0;
    _do_ecmd(0, i11, 0, 0, 0, 1, HEAP32[26881] | 0) | 0;
    if (HEAP32[26813] | 0) {
     if (HEAP32[26834] | 0) i3 = 22; else if (_only_one_window() | 0) i3 = 22;
     if ((i3 | 0) == 22) {
      i3 = 0;
      HEAP32[26880] = 0;
      _getout(1);
     }
     _win_close(HEAP32[26881] | 0, 1) | 0;
     HEAP32[i9 >> 2] = 0;
    }
    if ((HEAP32[i7 >> 2] | 0) == ((HEAP32[26868] | 0) - 1 | 0)) HEAP32[26776] = 1;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   }
   _ui_breakcheck();
   if (HEAP32[26834] | 0) {
    i3 = 28;
    break;
   }
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 28) _vgetc() | 0;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 156 >> 2] | 0) == 3) _goto_tabpage(1);
 HEAP32[26745] = (HEAP32[26745] | 0) + -1;
 HEAP32[i10 >> 2] = HEAP32[26887];
 _win_enter(HEAP32[i10 >> 2] | 0, 0);
 HEAP32[26746] = (HEAP32[26746] | 0) + -1;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 152 >> 2] | 0) <= 1) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 156 >> 2] | 0) == 3) {
  STACKTOP = i4;
  return;
 }
 _win_equal(HEAP32[26881] | 0, 0, 98);
 STACKTOP = i4;
 return;
}

function _parse_command_name(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = _gettail(HEAP32[HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] >> 2] | 0) | 0;
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) < 65) i2 = 3; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) > 90) i2 = 3; else i8 = (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) + 32 | 0;
 if ((i2 | 0) == 3) i8 = HEAPU8[HEAP32[i7 >> 2] >> 0] | 0;
 if ((i8 | 0) == 114) {
  HEAP32[26782] = 1;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) < 65) i2 = 9; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) > 90) i2 = 9; else i9 = (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) + 32 | 0;
 if ((i2 | 0) == 9) i9 = HEAPU8[HEAP32[i7 >> 2] >> 0] | 0;
 do if ((i9 | 0) == 101) {
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0 | 0) < 65) i2 = 14; else if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0 | 0) > 90) i2 = 14; else i10 = (HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) + 32 | 0;
  if ((i2 | 0) == 14) i10 = HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0;
  if ((i10 | 0) != 118) {
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0 | 0) < 65) i2 = 19; else if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0 | 0) > 90) i2 = 19; else i11 = (HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) + 32 | 0;
   if ((i2 | 0) == 19) i11 = HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0;
   if ((i11 | 0) != 103) break;
  }
  HEAP32[26628] = 1;
  HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] = 1;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } while (0);
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) < 65) i2 = 25; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) > 90) i2 = 25; else i12 = (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) + 32 | 0;
 if ((i2 | 0) == 25) i12 = HEAPU8[HEAP32[i7 >> 2] >> 0] | 0;
 if ((i12 | 0) == 103) {
  _main_start_gui();
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if (!(_strncasecmp(HEAP32[i7 >> 2] | 0, 97104, 4) | 0)) {
  HEAP32[26815] = 1;
  HEAP32[(HEAP32[26773] | 0) + 676 >> 2] = 1;
  HEAP32[26879] = 1e4;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 4;
 } else if (!(_strncasecmp(HEAP32[i7 >> 2] | 0, 97109, 3) | 0)) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 3;
 if (!(_strcasecmp(HEAP32[i7 >> 2] | 0, 97113) | 0)) {
  i12 = HEAP32[10211] | 0;
  HEAP32[i5 >> 2] = 97118;
  _fprintf(i12, 97576, i5) | 0;
  i5 = HEAP32[10211] | 0;
  HEAP32[i4 >> 2] = 97581;
  _fprintf(i5, 97576, i4) | 0;
  _mch_exit(2);
 }
 if (_strncasecmp(HEAP32[i7 >> 2] | 0, 97167, 2) | 0) {
  STACKTOP = i3;
  return;
 }
 if (!(_strncasecmp((HEAP32[i7 >> 2] | 0) + 2 | 0, 97170, 2) | 0)) HEAP32[26798] = 2; else HEAP32[26798] = 1;
 _change_compatible(1);
 STACKTOP = i3;
 return;
}

function _show_termcodes() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2 + 28 | 0;
 i5 = i2 + 24 | 0;
 i6 = i2 + 20 | 0;
 i7 = i2 + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2 + 8 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2;
 if (!(HEAP32[26600] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = _alloc(HEAP32[26600] << 2) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _msg_puts_title(80526);
 HEAP32[i6 >> 2] = 1;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) > 3) break;
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[26600] | 0)) break;
   i12 = (HEAP32[26602] | 0) + (HEAP32[i10 >> 2] << 4) | 0;
   HEAP32[i11 >> 2] = _show_one_termcode(i12 | 0, HEAP32[i12 + 4 >> 2] | 0, 0) | 0;
   do if ((HEAP32[i11 >> 2] | 0) <= 25) {
    if ((HEAP32[i6 >> 2] | 0) == 1) i1 = 13;
   } else {
    i12 = HEAP32[i6 >> 2] | 0;
    if ((HEAP32[i11 >> 2] | 0) <= 38) if ((i12 | 0) == 2) {
     i1 = 13;
     break;
    } else break; else if ((i12 | 0) == 3) {
     i1 = 13;
     break;
    } else break;
   } while (0);
   if ((i1 | 0) == 13) {
    i1 = 0;
    i12 = HEAP32[i10 >> 2] | 0;
    i13 = HEAP32[i4 >> 2] | 0;
    i14 = HEAP32[i5 >> 2] | 0;
    HEAP32[i5 >> 2] = i14 + 1;
    HEAP32[i13 + (i14 << 2) >> 2] = i12;
   }
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  if ((HEAP32[i6 >> 2] | 0) <= 2) {
   i12 = ((HEAP32[10174] | 0) + 2 | 0) / (((HEAP32[i6 >> 2] | 0) == 1 ? 27 : 40) | 0) | 0;
   HEAP32[i9 >> 2] = i12;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) == 0 ? 1 : i12;
   i12 = HEAP32[i9 >> 2] | 0;
   HEAP32[i8 >> 2] = ((HEAP32[i5 >> 2] | 0) + i12 - 1 | 0) / (i12 | 0) | 0;
  } else HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i7 >> 2] = 0;
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   _msg_putchar(10);
   if (HEAP32[26834] | 0) break;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
   while (1) {
    if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
    HEAP32[27043] = HEAP32[i3 >> 2];
    i12 = (HEAP32[26602] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] << 4) | 0;
    _show_one_termcode(i12 | 0, HEAP32[i12 + 4 >> 2] | 0, 1) | 0;
    i12 = HEAP32[i3 >> 2] | 0;
    if ((HEAP32[i6 >> 2] | 0) == 2) HEAP32[i3 >> 2] = i12 + 40; else HEAP32[i3 >> 2] = i12 + 27;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   }
   _out_flush();
   _ui_breakcheck();
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 _vim_free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _nv_right(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[26698] & 6 | 0) {
  if (HEAP32[26698] & 4 | 0) HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] = 1;
  _nv_wordcmd(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 if (HEAP32[26788] | 0) i7 = (HEAPU8[HEAP32[26975] >> 0] | 0 | 0) != 111; else i7 = 0;
 HEAP32[i6 >> 2] = i7 & 1;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
 L11 : while (1) {
  if ((HEAP32[i5 >> 2] | 0) <= 0) {
   i2 = 33;
   break;
  }
  if (HEAP32[i6 >> 2] | 0) i2 = 11; else if (!(_oneright() | 0)) i2 = 13; else i2 = 11;
  do if ((i2 | 0) == 11) {
   i2 = 0;
   if (HEAP32[i6 >> 2] | 0) if (!(HEAPU8[(_ml_get_cursor() | 0) >> 0] | 0)) {
    i2 = 13;
    break;
   }
   if (HEAP32[i6 >> 2] | 0) {
    HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
    i7 = (HEAP32[26881] | 0) + 24 + 4 | 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   }
  } while (0);
  do if ((i2 | 0) == 13) {
   i2 = 0;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 32) {
    if (!(_vim_strchr(HEAP32[27029] | 0, 115) | 0)) i2 = 15;
   } else i2 = 15;
   do if ((i2 | 0) == 15) {
    i2 = 0;
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 108) if (_vim_strchr(HEAP32[27029] | 0, 108) | 0) break;
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) != -29291) break L11;
    if (!(_vim_strchr(HEAP32[27029] | 0, 62) | 0)) break L11;
   } while (0);
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) break L11;
   if (HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) if (!(HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] | 0)) if (HEAPU8[(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) >> 0] | 0 | 0) {
    HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = 1;
    break;
   }
   i7 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
   HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
   HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = 0;
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
 }
 if ((i2 | 0) == 33) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0)) {
  if ((HEAP32[i5 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0)) {
   STACKTOP = i3;
   return;
  }
  _beep_flush();
  STACKTOP = i3;
  return;
 } else {
  if (!(HEAPU8[(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) >> 0] | 0)) {
   STACKTOP = i3;
   return;
  }
  HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = 1;
  STACKTOP = i3;
  return;
 }
}

function _buflist_getfile(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 20 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 8 | 0;
 i13 = i5 + 4 | 0;
 i14 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i11 >> 2] = _buflist_findnr(HEAP32[i7 >> 2] | 0) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  if ((HEAP32[i9 >> 2] & 2 | 0) != 0 & (HEAP32[i7 >> 2] | 0) == 0) _emsg(92715) | 0; else _emsgn(42443, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 if ((HEAP32[i11 >> 2] | 0) == (HEAP32[26773] | 0)) {
  HEAP32[i6 >> 2] = 1;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 if (_text_locked() | 0) {
  _text_locked_msg();
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 if (_curbuf_locked() | 0) {
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i13 >> 2] = _buflist_findfpos(HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
  HEAP32[i14 >> 2] = HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2];
 } else HEAP32[i14 >> 2] = 0;
 do if (HEAP32[i9 >> 2] & 4 | 0) {
  if (HEAP32[27e3] & 1 | 0) HEAP32[i12 >> 2] = _buf_jump_open_win(HEAP32[i11 >> 2] | 0) | 0;
  if (!(HEAP32[i12 >> 2] | 0)) if (HEAP32[27e3] & 2 | 0) HEAP32[i12 >> 2] = _buf_jump_open_tab(HEAP32[i11 >> 2] | 0) | 0;
  if (!(HEAP32[i12 >> 2] | 0)) if (HEAP32[27e3] & 28 | 0) {
   if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) if (!(HEAPU8[(_ml_get(1) | 0) >> 0] | 0)) break;
   if (HEAP32[27e3] & 8 | 0) _tabpage_new(); else if (!(_win_split(0, HEAP32[27e3] & 16 | 0 ? 2 : 0) | 0)) {
    HEAP32[i6 >> 2] = 0;
    i15 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i15 | 0;
   }
   HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] = 0;
   HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] = 0;
  }
 } while (0);
 HEAP32[26814] = (HEAP32[26814] | 0) + 1;
 i12 = (_getfile(HEAP32[(HEAP32[i11 >> 2] | 0) + 92 >> 2] | 0, 0, 0, HEAP32[i9 >> 2] & 1, HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0) <= 0;
 HEAP32[26814] = (HEAP32[26814] | 0) + -1;
 if (!i12) {
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 if ((HEAP32[26996] | 0) == 0 & (HEAP32[i14 >> 2] | 0) != 0) {
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i14 >> 2];
  _check_cursor_col();
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 }
 HEAP32[i6 >> 2] = 1;
 i15 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i15 | 0;
}

function _ttest(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 _check_options();
 if (!(HEAPU8[HEAP32[26552] >> 0] | 0)) _emsg(78922) | 0;
 if (HEAPU8[HEAP32[26525] >> 0] | 0 | 0) HEAP32[26733] = 1; else HEAP32[26733] = 0;
 if (HEAP32[i4 >> 2] | 0) {
  if (!(HEAPU8[HEAP32[26538] >> 0] | 0)) {
   HEAP32[26567] = 114072;
   HEAP32[26540] = 114072;
   HEAP32[26539] = 114072;
   HEAP32[26538] = 114072;
  }
  if (!(HEAPU8[HEAP32[26542] >> 0] | 0)) i2 = 11; else if (!(HEAPU8[HEAP32[26541] >> 0] | 0)) i2 = 11;
  if ((i2 | 0) == 11) {
   HEAP32[26541] = 114072;
   HEAP32[26542] = 114072;
  }
  if (!(HEAPU8[HEAP32[26546] >> 0] | 0)) i2 = 14; else if (!(HEAPU8[HEAP32[26545] >> 0] | 0)) i2 = 14;
  if ((i2 | 0) == 14) {
   HEAP32[26545] = 114072;
   HEAP32[26546] = 114072;
  }
  if (!(HEAPU8[HEAP32[26543] >> 0] | 0)) i2 = 17; else if (!(HEAPU8[HEAP32[26544] >> 0] | 0)) i2 = 17;
  if ((i2 | 0) == 17) {
   HEAP32[26544] = 114072;
   HEAP32[26543] = 114072;
  }
  if (!(HEAPU8[HEAP32[26532] >> 0] | 0)) HEAP32[26531] = 114072;
  if (!(HEAPU8[HEAP32[26538] >> 0] | 0)) {
   HEAP32[26538] = HEAP32[26541];
   HEAP32[26539] = HEAP32[26542];
   HEAP32[26540] = HEAP32[26542];
  }
  do if (!(HEAPU8[HEAP32[26542] >> 0] | 0)) {
   HEAP32[26541] = HEAP32[26538];
   if (!(HEAPU8[HEAP32[26539] >> 0] | 0)) {
    HEAP32[26542] = HEAP32[26540];
    break;
   } else {
    HEAP32[26542] = HEAP32[26539];
    break;
   }
  } while (0);
  do if (!(HEAPU8[HEAP32[26543] >> 0] | 0)) {
   HEAP32[26544] = HEAP32[26538];
   if (!(HEAPU8[HEAP32[26539] >> 0] | 0)) {
    HEAP32[26543] = HEAP32[26540];
    break;
   } else {
    HEAP32[26543] = HEAP32[26539];
    break;
   }
  } while (0);
  if (!(HEAPU8[HEAP32[26564] >> 0] | 0)) i2 = 32; else if (!(HEAPU8[HEAP32[26563] >> 0] | 0)) i2 = 32;
  if ((i2 | 0) == 32) {
   HEAP32[26564] = 114072;
   HEAP32[26563] = 114072;
  }
  if (!(HEAPU8[HEAP32[26569] >> 0] | 0)) i2 = 35; else if (!(HEAPU8[HEAP32[26568] >> 0] | 0)) i2 = 35;
  if ((i2 | 0) == 35) {
   HEAP32[26569] = 114072;
   HEAP32[26568] = 114072;
  }
  if (!(HEAPU8[HEAP32[26564] >> 0] | 0)) if (!(HEAPU8[HEAP32[26569] >> 0] | 0)) _free_one_termoption(HEAP32[26562] | 0);
  HEAP32[27028] = (HEAPU8[HEAP32[26565] >> 0] | 0 | 0) != 0 & 1;
 }
 HEAP32[26599] = 1;
 HEAP32[26734] = _atoi(HEAP32[26562] | 0) | 0;
 HEAP32[i5 >> 2] = _getenv(78962) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(_isdigit(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = _atoi(HEAP32[i5 >> 2] | 0) | 0;
 if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26734] | 0)) {
  STACKTOP = i3;
  return;
 }
 _set_color_count(HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _gui_set_shellsize(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4 + 44 | 0;
 i6 = i4 + 40 | 0;
 i7 = i4 + 36 | 0;
 i8 = i4 + 32 | 0;
 i9 = i4 + 28 | 0;
 i10 = i4 + 24 | 0;
 i11 = i4 + 20 | 0;
 i12 = i4 + 16 | 0;
 i13 = i4 + 12 | 0;
 i14 = i4 + 8 | 0;
 i15 = i4 + 4 | 0;
 i16 = i4;
 HEAP32[i4 + 48 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i15 >> 2] = -1;
 HEAP32[i16 >> 2] = -1;
 if (!(HEAP32[26629] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i7 >> 2] = _gui_get_base_width() | 0;
 HEAP32[i8 >> 2] = _gui_get_base_height() | 0;
 if (HEAP32[i5 >> 2] | 0) _gui_mch_get_winpos(i15, i16) | 0;
 i3 = Math_imul(HEAP32[10174] | 0, HEAP32[26665] | 0) | 0;
 HEAP32[i9 >> 2] = i3 + (HEAP32[i7 >> 2] | 0);
 i3 = Math_imul(HEAP32[10173] | 0, HEAP32[26666] | 0) | 0;
 HEAP32[i10 >> 2] = i3 + (HEAP32[i8 >> 2] | 0);
 if (HEAP32[i5 >> 2] | 0) {
  _gui_mch_get_screen_dimensions(i13, i14);
  if (HEAP32[i6 >> 2] & 2 | 0) if ((HEAP32[i9 >> 2] | 0) > (HEAP32[i13 >> 2] | 0)) {
   i3 = ((HEAP32[i13 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) / (HEAP32[26665] | 0) | 0;
   HEAP32[10174] = i3;
   HEAP32[10174] = (HEAP32[10174] | 0) < 12 ? 12 : i3;
   i3 = Math_imul(HEAP32[10174] | 0, HEAP32[26665] | 0) | 0;
   HEAP32[i9 >> 2] = i3 + (HEAP32[i7 >> 2] | 0);
  }
  if (HEAP32[i6 >> 2] & 1 | 0) if ((HEAP32[i10 >> 2] | 0) > (HEAP32[i14 >> 2] | 0)) {
   HEAP32[10173] = ((HEAP32[i14 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) / (HEAP32[26666] | 0) | 0;
   _check_shellsize();
   i14 = Math_imul(HEAP32[10173] | 0, HEAP32[26666] | 0) | 0;
   HEAP32[i10 >> 2] = i14 + (HEAP32[i8 >> 2] | 0);
  }
 }
 _limit_screen_size();
 HEAP32[26640] = HEAP32[10174];
 HEAP32[26641] = HEAP32[10173];
 HEAP32[i11 >> 2] = (HEAP32[i7 >> 2] | 0) + ((HEAP32[26665] | 0) * 12 | 0);
 HEAP32[i12 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[26666] << 1);
 i14 = _tabline_height() | 0;
 i3 = Math_imul(i14, HEAP32[26666] | 0) | 0;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i3;
 _gui_mch_set_shellsize(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 if ((HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[i15 >> 2] | 0) >= 0 & (HEAP32[i16 >> 2] | 0) >= 0) {
  _gui_mch_update();
  if ((_gui_mch_get_winpos(i15, i16) | 0) == 1) if ((HEAP32[i15 >> 2] | 0) < 0 | (HEAP32[i16 >> 2] | 0) < 0) {
   i5 = HEAP32[i15 >> 2] | 0;
   i15 = HEAP32[i16 >> 2] | 0;
   _gui_mch_set_winpos((i5 | 0) < 0 ? 0 : i5 | 0, (i15 | 0) < 0 ? 0 : i15 | 0);
  }
 }
 _gui_position_components(HEAP32[i9 >> 2] | 0);
 _gui_update_scrollbars(1);
 _gui_reset_scroll_region();
 STACKTOP = i4;
 return;
}

function _screen_puts_len(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i6 + 48 | 0;
 i8 = i6 + 44 | 0;
 i9 = i6 + 40 | 0;
 i10 = i6 + 36 | 0;
 i11 = i6 + 32 | 0;
 i12 = i6 + 28 | 0;
 i13 = i6 + 24 | 0;
 i14 = i6 + 20 | 0;
 i15 = i6 + 16 | 0;
 i16 = i6 + 12 | 0;
 i17 = i6 + 8 | 0;
 i18 = i6 + 4 | 0;
 i19 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i17 >> 2] = 0;
 if (!(HEAP32[26691] | 0)) {
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[26696] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i12 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[26697] | 0)) break;
  if ((HEAP32[i14 >> 2] | 0) >= 0) if (((HEAP32[i13 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) >= (HEAP32[i14 >> 2] | 0)) break;
  if (!(HEAPU8[HEAP32[i13 >> 2] >> 0] | 0)) break;
  HEAP32[i15 >> 2] = HEAPU8[HEAP32[i13 >> 2] >> 0];
  HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
  HEAP32[i17 >> 2] = 0;
  if ((HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] | 0 | 0) != (HEAP32[i15 >> 2] | 0)) i20 = 1; else if ((HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] | 0 | 0) != (HEAP32[i11 >> 2] | 0)) i20 = 1; else i20 = (HEAP32[26798] | 0) != 0;
  HEAP32[i18 >> 2] = i20 & 1;
  if ((HEAP32[i18 >> 2] | 0) != 0 | (HEAP32[i16 >> 2] | 0) != 0) {
   if (HEAP32[i18 >> 2] | 0) if ((HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] | 0 | 0) != 32) if ((HEAP32[26627] | 0) != 0 | (HEAP32[26867] | 0) != 0) {
    HEAP32[i19 >> 2] = HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1];
    if ((HEAP32[i19 >> 2] | 0) > 255) HEAP32[i19 >> 2] = _syn_attr2attr(HEAP32[i19 >> 2] | 0) | 0;
    if (HEAP32[i19 >> 2] & 2 | 0) HEAP32[i17 >> 2] = 1;
   }
   HEAP8[(HEAP32[26691] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] = HEAP32[i15 >> 2];
   HEAP16[(HEAP32[26692] | 0) + (HEAP32[i12 >> 2] << 1) >> 1] = HEAP32[i11 >> 2];
   _screen_char(HEAP32[i12 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
  }
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if (!(HEAP32[i17 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[26697] | 0)) {
  STACKTOP = i6;
  return;
 }
 _screen_char(HEAP32[i12 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _setfname(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i7 = i6 + 96 | 0;
 i8 = i6 + 92 | 0;
 i9 = i6 + 88 | 0;
 i10 = i6 + 84 | 0;
 i11 = i6 + 80 | 0;
 i12 = i6 + 76 | 0;
 i13 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = 0;
 do if (!(HEAP32[i9 >> 2] | 0)) i5 = 3; else if (!(HEAPU8[HEAP32[i9 >> 2] >> 0] | 0)) i5 = 3; else {
  _fname_expand(HEAP32[i8 >> 2] | 0, i9, i10);
  if (!(HEAP32[i9 >> 2] | 0)) {
   HEAP32[i7 >> 2] = 0;
   i14 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i14 | 0;
  }
  if ((_stat(HEAP32[i9 >> 2] | 0, i13) | 0) < 0) HEAP32[i13 >> 2] = -1;
  if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 60 >> 2] & 128)) HEAP32[i12 >> 2] = _buflist_findname_stat(HEAP32[i9 >> 2] | 0, i13) | 0;
  do if (HEAP32[i12 >> 2] | 0) if ((HEAP32[i12 >> 2] | 0) != (HEAP32[i8 >> 2] | 0)) {
   if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0)) {
    _close_buffer(0, HEAP32[i12 >> 2] | 0, 4, 0);
    break;
   }
   if (HEAP32[i11 >> 2] | 0) _emsg(42507) | 0;
   _vim_free(HEAP32[i9 >> 2] | 0);
   HEAP32[i7 >> 2] = 0;
   i14 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i6;
   return i14 | 0;
  } while (0);
  HEAP32[i10 >> 2] = _vim_strsave(HEAP32[i10 >> 2] | 0) | 0;
  if (!((HEAP32[i9 >> 2] | 0) == 0 | (HEAP32[i10 >> 2] | 0) == 0)) {
   _vim_free(HEAP32[(HEAP32[i8 >> 2] | 0) + 68 >> 2] | 0);
   _vim_free(HEAP32[(HEAP32[i8 >> 2] | 0) + 72 >> 2] | 0);
   HEAP32[(HEAP32[i8 >> 2] | 0) + 68 >> 2] = HEAP32[i9 >> 2];
   HEAP32[(HEAP32[i8 >> 2] | 0) + 72 >> 2] = HEAP32[i10 >> 2];
   break;
  }
  _vim_free(HEAP32[i10 >> 2] | 0);
  _vim_free(HEAP32[i9 >> 2] | 0);
  HEAP32[i7 >> 2] = 0;
  i14 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i14 | 0;
 } while (0);
 if ((i5 | 0) == 3) {
  if (HEAP32[(HEAP32[i8 >> 2] | 0) + 68 >> 2] | 0) {
   _vim_free(HEAP32[(HEAP32[i8 >> 2] | 0) + 68 >> 2] | 0);
   HEAP32[(HEAP32[i8 >> 2] | 0) + 68 >> 2] = 0;
  }
  if (HEAP32[(HEAP32[i8 >> 2] | 0) + 72 >> 2] | 0) {
   _vim_free(HEAP32[(HEAP32[i8 >> 2] | 0) + 72 >> 2] | 0);
   HEAP32[(HEAP32[i8 >> 2] | 0) + 72 >> 2] = 0;
  }
  HEAP32[i13 >> 2] = -1;
 }
 i5 = HEAP32[i8 >> 2] | 0;
 HEAP32[i5 + 76 >> 2] = HEAP32[i5 + 72 >> 2];
 i5 = (HEAP32[i8 >> 2] | 0) + 80 | 0;
 if ((HEAP32[i13 >> 2] | 0) == -1) HEAP32[i5 >> 2] = 0; else {
  HEAP32[i5 >> 2] = 1;
  HEAP32[(HEAP32[i8 >> 2] | 0) + 84 >> 2] = HEAP32[i13 >> 2];
  HEAP32[(HEAP32[i8 >> 2] | 0) + 88 >> 2] = HEAP32[i13 + 72 >> 2];
 }
 HEAP32[(HEAP32[i8 >> 2] | 0) + 784 >> 2] = 0;
 _buf_name_changed(HEAP32[i8 >> 2] | 0);
 HEAP32[i7 >> 2] = 1;
 i14 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i14 | 0;
}

function _auto_format(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 36 | 0;
 i5 = i3 + 32 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 i12 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(_has_format_option(97) | 0)) {
  STACKTOP = i3;
  return;
 }
 i2 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i8 >> 2] = _ml_get_curline() | 0;
 _check_auto_format(0);
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i11 >> 2] = (i2 | 0) == (_strlen(HEAP32[i8 >> 2] | 0) | 0) & 1;
 if (((HEAP32[i4 >> 2] | 0 ? 1 : (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 0) ^ 1) & (HEAP32[i11 >> 2] | 0) != 0) {
  _dec_cursor() | 0;
  HEAP32[i12 >> 2] = _gchar_cursor() | 0;
  if (!((HEAP32[i12 >> 2] | 0) == 32 | (HEAP32[i12 >> 2] | 0) == 9)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > 0) if (_has_format_option(49) | 0) _dec_cursor() | 0;
  HEAP32[i12 >> 2] = _gchar_cursor() | 0;
  i8 = HEAP32[i12 >> 2] | 0;
  i12 = (i8 | 0) == 32 | (i8 | 0) == 9;
  i8 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  if (i12) {
   STACKTOP = i3;
   return;
  }
 }
 if (HEAP32[i5 >> 2] | 0) if (!(_paragraph_start(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0)) {
  i5 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
  if (!(_u_save_cursor() | 0)) {
   STACKTOP = i3;
   return;
  }
 };
 HEAP32[26794] = HEAP32[i6 >> 2];
 HEAP32[26795] = HEAP32[i6 + 4 >> 2];
 _format_lines(-1, 0);
 i6 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i6 >> 2] = HEAP32[26794];
 HEAP32[i6 + 4 >> 2] = HEAP32[26795];
 HEAP32[26794] = 0;
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
  _coladvance(2147483647) | 0;
 } else _check_cursor_col();
 do if (!(HEAP32[i11 >> 2] | 0)) if (_has_format_option(119) | 0) {
  HEAP32[i9 >> 2] = _ml_get_curline() | 0;
  HEAP32[i7 >> 2] = _strlen(HEAP32[i9 >> 2] | 0) | 0;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) {
   HEAP32[i10 >> 2] = _vim_strnsave(HEAP32[i9 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 2 | 0) | 0;
   HEAP8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] = 32;
   HEAP8[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) + 1) >> 0] = 0;
   _ml_replace(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
   HEAP32[25210] = 1;
   break;
  } else {
   _check_auto_format(0);
   break;
  }
 } while (0);
 _check_cursor();
 STACKTOP = i3;
 return;
}

function _mf_write(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4 + 4 | 0;
 i13 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) < 0) {
  HEAP32[i5 >> 2] = 0;
  i14 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i14 | 0;
 }
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) < 0) if (!(_mf_trans_add(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0)) {
  HEAP32[i5 >> 2] = 0;
  i14 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i14 | 0;
 }
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2];
 while (1) {
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2];
  if ((HEAP32[i9 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 588 >> 2] | 0)) {
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 588 >> 2];
   HEAP32[i10 >> 2] = _mf_find_hash(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  } else HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i8 >> 2] = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  i2 = _lseek(HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0) | 0;
  if ((i2 | 0) != (HEAP32[i8 >> 2] | 0)) {
   i3 = 11;
   break;
  }
  if (!(HEAP32[i10 >> 2] | 0)) HEAP32[i12 >> 2] = 1; else HEAP32[i12 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2];
  HEAP32[i13 >> 2] = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
  if (!(_mf_write_block(HEAP32[i6 >> 2] | 0, (HEAP32[i10 >> 2] | 0) == 0 ? HEAP32[i7 >> 2] | 0 : HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0)) {
   i3 = 16;
   break;
  }
  HEAP32[26839] = 0;
  if (HEAP32[i10 >> 2] | 0) {
   i2 = (HEAP32[i10 >> 2] | 0) + 28 | 0;
   HEAP8[i2 >> 0] = HEAP8[i2 >> 0] & -2;
  }
  if (((HEAP32[i9 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 588 >> 2] | 0)) HEAP32[(HEAP32[i6 >> 2] | 0) + 588 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i12 >> 2] | 0);
  if ((HEAP32[i9 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0)) {
   i3 = 25;
   break;
  }
 }
 if ((i3 | 0) == 11) {
  _emsg3(97280, 97287, _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0) | 0;
  HEAP32[i5 >> 2] = 0;
  i14 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i14 | 0;
 } else if ((i3 | 0) == 16) {
  if (!(HEAP32[26839] | 0)) _emsg(97323) | 0;
  HEAP32[26839] = 1;
  HEAP32[i5 >> 2] = 0;
  i14 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i14 | 0;
 } else if ((i3 | 0) == 25) {
  HEAP32[i5 >> 2] = 1;
  i14 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i14 | 0;
 }
 return 0;
}

function _vim_regexec_multi(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i9 = i8 + 96 | 0;
 i10 = i8 + 92 | 0;
 i11 = i8 + 88 | 0;
 i12 = i8 + 84 | 0;
 i13 = i8 + 80 | 0;
 i14 = i8 + 76 | 0;
 i15 = i8 + 72 | 0;
 i16 = i8 + 68 | 0;
 i17 = i8 + 16 | 0;
 i18 = i8 + 12 | 0;
 i19 = i8 + 8 | 0;
 i20 = i8 + 4 | 0;
 i21 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = i7;
 HEAP32[i18 >> 2] = HEAP32[26311];
 if (HEAP32[26311] | 0) {
  i22 = i17;
  i23 = 105248;
  i24 = i22 + 52 | 0;
  do {
   HEAP32[i22 >> 2] = HEAP32[i23 >> 2];
   i22 = i22 + 4 | 0;
   i23 = i23 + 4 | 0;
  } while ((i22 | 0) < (i24 | 0));
 }
 HEAP32[26311] = 1;
 HEAP32[i16 >> 2] = FUNCTION_TABLE_iiiiiiii[HEAP32[(HEAP32[HEAP32[HEAP32[i9 >> 2] >> 2] >> 2] | 0) + 12 >> 2] & 3](HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
 if ((HEAP32[i16 >> 2] | 0) == -1 ? (HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 8 >> 2] | 0) == 0 : 0) {
  HEAP32[i19 >> 2] = HEAP32[26966];
  HEAP32[i20 >> 2] = HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 12 >> 2];
  HEAP32[i21 >> 2] = _vim_strsave(HEAP32[(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) + 40 >> 2] | 0) | 0;
  HEAP32[26966] = 1;
  _vim_regfree(HEAP32[HEAP32[i9 >> 2] >> 2] | 0);
  if (HEAP32[i21 >> 2] | 0) {
   i7 = _vim_regcomp(HEAP32[i21 >> 2] | 0, HEAP32[i20 >> 2] | 0) | 0;
   HEAP32[HEAP32[i9 >> 2] >> 2] = i7;
   if (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) HEAP32[i16 >> 2] = FUNCTION_TABLE_iiiiiiii[HEAP32[(HEAP32[HEAP32[HEAP32[i9 >> 2] >> 2] >> 2] | 0) + 12 >> 2] & 3](HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
   _vim_free(HEAP32[i21 >> 2] | 0);
  }
  HEAP32[26966] = HEAP32[i19 >> 2];
 }
 HEAP32[26311] = HEAP32[i18 >> 2];
 if (!(HEAP32[26311] | 0)) {
  i18 = HEAP32[i16 >> 2] | 0;
  i25 = i18 | 0;
  i26 = (i25 | 0) <= 0;
  i27 = i18 | 0;
  i28 = i26 ? 0 : i27;
  STACKTOP = i8;
  return i28 | 0;
 }
 i22 = 105248;
 i23 = i17;
 i24 = i22 + 52 | 0;
 do {
  HEAP32[i22 >> 2] = HEAP32[i23 >> 2];
  i22 = i22 + 4 | 0;
  i23 = i23 + 4 | 0;
 } while ((i22 | 0) < (i24 | 0));
 i23 = HEAP32[i16 >> 2] | 0;
 i25 = i23 | 0;
 i26 = (i25 | 0) <= 0;
 i27 = i23 | 0;
 i28 = i26 ? 0 : i27;
 STACKTOP = i8;
 return i28 | 0;
}

function _nfa_regtry(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 i6 = i5 + 356 | 0;
 i7 = i5 + 352 | 0;
 i8 = i5 + 348 | 0;
 i9 = i5 + 336 | 0;
 i10 = i5 + 172 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i5 + 344 >> 2] = i3;
 HEAP32[i5 + 340 >> 2] = i4;
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2];
 HEAP32[26334] = (HEAP32[26325] | 0) + (HEAP32[i8 >> 2] | 0);
 _clear_sub(i10);
 _clear_sub(i11);
 HEAP32[i13 >> 2] = _nfa_regmatch(HEAP32[i7 >> 2] | 0, HEAP32[i12 >> 2] | 0, i10, i11) | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 if ((HEAP32[i13 >> 2] | 0) == -1) {
  HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 _cleanup_subexpr();
 i13 = (HEAP32[26312] | 0) == 0;
 HEAP32[i9 >> 2] = 0;
 do if (i13) {
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
   HEAP32[(HEAP32[26316] | 0) + (HEAP32[i9 >> 2] << 3) >> 2] = HEAP32[i10 + 4 + (HEAP32[i9 >> 2] << 4) >> 2];
   HEAP32[(HEAP32[26316] | 0) + (HEAP32[i9 >> 2] << 3) + 4 >> 2] = HEAP32[i10 + 4 + (HEAP32[i9 >> 2] << 4) + 8 >> 2];
   HEAP32[(HEAP32[26317] | 0) + (HEAP32[i9 >> 2] << 3) >> 2] = HEAP32[i10 + 4 + (HEAP32[i9 >> 2] << 4) + 4 >> 2];
   HEAP32[(HEAP32[26317] | 0) + (HEAP32[i9 >> 2] << 3) + 4 >> 2] = HEAP32[i10 + 4 + (HEAP32[i9 >> 2] << 4) + 12 >> 2];
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  if ((HEAP32[HEAP32[26316] >> 2] | 0) < 0) {
   HEAP32[HEAP32[26316] >> 2] = 0;
   HEAP32[(HEAP32[26316] | 0) + 4 >> 2] = HEAP32[i8 >> 2];
  }
  if ((HEAP32[HEAP32[26317] >> 2] | 0) < 0) {
   HEAP32[HEAP32[26317] >> 2] = HEAP32[26326];
   HEAP32[(HEAP32[26317] | 0) + 4 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0);
   break;
  } else {
   HEAP32[26326] = HEAP32[HEAP32[26317] >> 2];
   break;
  }
 } else {
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
   HEAP32[(HEAP32[26314] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] = HEAP32[i10 + 4 + (HEAP32[i9 >> 2] << 3) >> 2];
   HEAP32[(HEAP32[26315] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] = HEAP32[i10 + 4 + (HEAP32[i9 >> 2] << 3) + 4 >> 2];
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  if (!(HEAP32[HEAP32[26314] >> 2] | 0)) HEAP32[HEAP32[26314] >> 2] = (HEAP32[26325] | 0) + (HEAP32[i8 >> 2] | 0);
  if (!(HEAP32[HEAP32[26315] >> 2] | 0)) HEAP32[HEAP32[26315] >> 2] = HEAP32[26334];
 } while (0);
 HEAP32[i6 >> 2] = 1 + (HEAP32[26326] | 0);
 i14 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i14 | 0;
}

function _failure_chance(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 L1 : do if ((HEAP32[i6 >> 2] | 0) > 4) HEAP32[i4 >> 2] = 1; else do switch (HEAP32[i7 >> 2] | 0) {
 case -1024:
  {
   if ((HEAP32[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] >> 2] | 0) != -1024) if ((HEAP32[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] >> 2] | 0) != -1024) {
    HEAP32[i8 >> 2] = _failure_chance(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i6 >> 2] | 0) + 1 | 0) | 0;
    HEAP32[i9 >> 2] = _failure_chance(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[i6 >> 2] | 0) + 1 | 0) | 0;
    i2 = HEAP32[i8 >> 2] | 0;
    i1 = HEAP32[i9 >> 2] | 0;
    HEAP32[i4 >> 2] = (i2 | 0) < (i1 | 0) ? i2 | 0 : i1 | 0;
    break L1;
   }
   HEAP32[i4 >> 2] = 1;
   break L1;
   break;
  }
 case -946:
  {
   HEAP32[i4 >> 2] = 1;
   break L1;
   break;
  }
 case -983:
 case -956:
 case -1023:
  {
   HEAP32[i4 >> 2] = 0;
   break L1;
   break;
  }
 case -989:
 case -990:
 case -991:
 case -992:
 case -993:
 case -994:
 case -995:
 case -996:
 case -997:
  {
   HEAP32[i4 >> 2] = 5;
   break L1;
   break;
  }
 case -1002:
 case -1003:
 case -1004:
 case -1007:
 case -1008:
  {
   HEAP32[i4 >> 2] = 99;
   break L1;
   break;
  }
 case -1005:
 case -1006:
  {
   HEAP32[i4 >> 2] = 90;
   break L1;
   break;
  }
 case -998:
 case -947:
 case -948:
 case -949:
 case -950:
 case -951:
 case -952:
 case -953:
 case -954:
 case -955:
 case -999:
 case -957:
 case -958:
 case -959:
 case -960:
 case -961:
 case -962:
 case -963:
 case -964:
 case -965:
 case -966:
  {
   HEAP32[i4 >> 2] = _failure_chance(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i6 >> 2] | 0) + 1 | 0) | 0;
   break L1;
   break;
  }
 case -968:
 case -969:
 case -970:
 case -971:
 case -972:
 case -973:
 case -974:
 case -975:
 case -976:
  {
   HEAP32[i4 >> 2] = 94;
   break L1;
   break;
  }
 case -871:
 case -872:
 case -873:
 case -875:
 case -876:
 case -878:
 case -879:
 case -881:
 case -882:
  {
   HEAP32[i4 >> 2] = 85;
   break L1;
   break;
  }
 case -883:
  {
   HEAP32[i4 >> 2] = 90;
   break L1;
   break;
  }
 case -874:
 case -877:
 case -880:
 case -884:
  {
   HEAP32[i4 >> 2] = 98;
   break L1;
   break;
  }
 case -985:
  {
   HEAP32[i4 >> 2] = 95;
   break L1;
   break;
  }
 default:
  if ((HEAP32[i7 >> 2] | 0) > 0) {
   HEAP32[i4 >> 2] = 95;
   break L1;
  } else {
   HEAP32[i4 >> 2] = 50;
   break L1;
  }
 } while (0); while (0);
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _gui_init() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 76 | 0;
 i4 = i2;
 if (!(HEAP32[26680] | 0)) {
  HEAP32[26680] = (HEAP32[26680] | 0) + 1;
  _clip_init(1);
  if (!(_gui_init_check() | 0)) {
   HEAP32[26680] = (HEAP32[26680] | 0) + -1;
   _clip_init(0);
   STACKTOP = i2;
   return;
  }
  _set_option_value(84289, 0, 0, 0) | 0;
  if (!(_option_was_set(84295) | 0)) _set_string_option_direct(84295, -1, 97579, 1, -6);
  if (HEAP32[26740] | 0) {
   if (_strcmp(HEAP32[26740] | 0, 94449) | 0) if (_strcmp(HEAP32[26740] | 0, 94530) | 0) if ((_do_source(HEAP32[26740] | 0, 0, 0) | 0) != 1) _emsg2(84301, HEAP32[26740] | 0) | 0;
  } else {
   _do_source(84329, 0, 0) | 0;
   if (!(_process_env(84341, 0) | 0)) if (!(_do_source(84350, 1, 2) | 0)) _do_source(84364, 1, 2) | 0;
   if (HEAP32[26916] | 0) {
    if (_stat(84378, i4) | 0) i1 = 17; else {
     i5 = HEAP32[i4 + 20 >> 2] | 0;
     if ((i5 | 0) != (_getuid() | 0)) i1 = 17;
    }
    if ((i1 | 0) == 17) HEAP32[26783] = HEAP32[26974];
    if ((_fullpathcmp(84350, 84378, 0) | 0) != 1) if ((_fullpathcmp(84329, 84378, 0) | 0) != 1) if ((_fullpathcmp(84364, 84378, 0) | 0) != 1) _do_source(84378, 1, 2) | 0;
    if ((HEAP32[26783] | 0) == 2) HEAP32[26721] = 1;
    HEAP32[26783] = 0;
   }
  }
  if ((HEAP32[26721] | 0) != 0 | (HEAP32[26712] | 0) != 0) _wait_return(1);
  HEAP32[26680] = (HEAP32[26680] | 0) + -1;
 }
 if (HEAP32[26627] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26627] = 1;
 do if (_gui_mch_init() | 0) {
  HEAP32[26718] = 0;
  HEAP32[27044] = 0;
  _clear_sb_text(1);
  HEAP32[26721] = 0;
  HEAP32[26712] = 0;
  if ((HEAP32[26668] | 0) < 0) HEAP32[26668] = 0;
  if (0) _set_option_value(84386, 0, 0, 0) | 0;
  if (!(HEAPU8[HEAP32[26923] >> 0] | 0)) i6 = _hl_get_font_name() | 0; else i6 = HEAP32[26923] | 0;
  if (!(_gui_init_font(i6, 0) | 0)) {
   _emsg(84390) | 0;
   break;
  }
  HEAP32[26640] = HEAP32[10174];
  HEAP32[26641] = HEAP32[10173];
  _gui_reset_scroll_region();
  HEAP32[i3 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break;
   i1 = HEAP32[i3 >> 2] | 0;
   _gui_create_scrollbar(i1 + 812 | 0, 0, i1 | 0);
   i1 = HEAP32[i3 >> 2] | 0;
   _gui_create_scrollbar(i1 + 812 + 40 | 0, 1, i1 | 0);
   HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
  }
  _gui_create_scrollbar(106604, 2, 0);
  _gui_init_which_components(0);
  HEAP32[26629] = 1;
  _gui_set_shellsize(1, 1, 15);
  if (_gui_mch_open() | 0) {
   _init_gui_options();
   _win_new_shellsize();
   if ((HEAP32[26875] | 0) == 1) {
    STACKTOP = i2;
    return;
   }
   _command_height();
   STACKTOP = i2;
   return;
  }
 } while (0);
 HEAP32[26627] = 0;
 _clip_init(0);
 STACKTOP = i2;
 return;
}

function _gui_init_which_components(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i3 + 20 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 3) break;
  HEAP32[106644 + (HEAP32[i5 >> 2] << 2) >> 2] = 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 HEAP32[i4 >> 2] = HEAP32[26926];
 while (1) {
  if (!(HEAP8[HEAP32[i4 >> 2] >> 0] | 0)) break;
  switch (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) {
  case 108:
   {
    HEAP32[26661] = 1;
    break;
   }
  case 114:
   {
    HEAP32[26662] = 1;
    break;
   }
  case 76:
   {
    if (_win_hasvertsplit() | 0) HEAP32[26661] = 1;
    break;
   }
  case 82:
   {
    if (_win_hasvertsplit() | 0) HEAP32[26662] = 1;
    break;
   }
  case 98:
   {
    HEAP32[26663] = 1;
    break;
   }
  default:
   {}
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 if (!(HEAP32[26627] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 3) break;
  if ((HEAP32[106644 + (HEAP32[i5 >> 2] << 2) >> 2] | 0) != (HEAP32[106732 + (HEAP32[i5 >> 2] << 2) >> 2] | 0)) i2 = 20; else if ((HEAP32[106644 + (HEAP32[i5 >> 2] << 2) >> 2] | 0) != (HEAP32[(HEAP32[26886] | 0) + 36 + (HEAP32[i5 >> 2] << 2) >> 2] | 0)) i2 = 20;
  if ((i2 | 0) == 20) {
   i2 = 0;
   L28 : do if ((HEAP32[i5 >> 2] | 0) == 2) _gui_mch_enable_scrollbar(106604, HEAP32[106644 + (HEAP32[i5 >> 2] << 2) >> 2] | 0); else {
    HEAP32[i6 >> 2] = HEAP32[26887];
    while (1) {
     if (!(HEAP32[i6 >> 2] | 0)) break L28;
     _gui_do_scrollbar(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[106644 + (HEAP32[i5 >> 2] << 2) >> 2] | 0);
     HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
    }
   } while (0);
   if ((HEAP32[106644 + (HEAP32[i5 >> 2] << 2) >> 2] | 0) != (HEAP32[106732 + (HEAP32[i5 >> 2] << 2) >> 2] | 0)) {
    i4 = HEAP32[i7 >> 2] | 0;
    if ((HEAP32[i5 >> 2] | 0) == 2) HEAP32[i7 >> 2] = i4 | 1; else HEAP32[i7 >> 2] = i4 | 2;
    if (HEAP32[106644 + (HEAP32[i5 >> 2] << 2) >> 2] | 0) HEAP32[i8 >> 2] = 1;
   }
  }
  i4 = HEAP32[i5 >> 2] << 2 | 0;
  HEAP32[(HEAP32[26886] | 0) + 36 + i4 >> 2] = HEAP32[106644 + i4 >> 2];
  i4 = HEAP32[i5 >> 2] << 2 | 0;
  HEAP32[106732 + i4 >> 2] = HEAP32[106644 + i4 >> 2];
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if (HEAP32[i7 >> 2] | 0) _gui_set_shellsize(0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 i7 = HEAP32[(HEAP32[26887] | 0) + 84 >> 2] | 0;
 if ((i7 | 0) == (_tabline_height() | 0)) {
  STACKTOP = i3;
  return;
 }
 _shell_new_rows();
 STACKTOP = i3;
 return;
}

function _repl_cmdline(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 32 | 0;
 i8 = i6 + 28 | 0;
 i9 = i6 + 24 | 0;
 i10 = i6 + 20 | 0;
 i11 = i6 + 16 | 0;
 i12 = i6 + 12 | 0;
 i13 = i6 + 8 | 0;
 i14 = i6 + 4 | 0;
 i15 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = _strlen(HEAP32[i11 >> 2] | 0) | 0;
 i5 = (HEAP32[i9 >> 2] | 0) - (HEAP32[HEAP32[i12 >> 2] >> 2] | 0) | 0;
 i4 = i5 + (_strlen((HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0) | 0) | 0;
 HEAP32[i14 >> 2] = i4 + (HEAP32[i13 >> 2] | 0) + 3;
 if (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) {
  i4 = _strlen(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) | 0;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + i4;
 }
 i4 = _alloc(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = i4;
 if (!i4) {
  HEAP32[i7 >> 2] = 0;
  i16 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i16 | 0;
 }
 HEAP32[i14 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[HEAP32[i12 >> 2] >> 2] | 0);
 _memmove(HEAP32[i15 >> 2] | 0, HEAP32[HEAP32[i12 >> 2] >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
 _memmove((HEAP32[i15 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0, HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
 _strcpy((HEAP32[i15 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0, (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0) | 0;
 HEAP32[i9 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
 if (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[i14 >> 2] = (_strlen(HEAP32[i15 >> 2] | 0) | 0) + 1;
  _strcpy((HEAP32[i15 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) | 0, HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
 }
 i14 = (HEAP32[i8 >> 2] | 0) + 8 | 0;
 HEAP32[i14 >> 2] = (HEAP32[i15 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) - (HEAP32[HEAP32[i12 >> 2] >> 2] | 0));
 HEAP32[HEAP32[i8 >> 2] >> 2] = (HEAP32[i15 >> 2] | 0) + ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) - (HEAP32[HEAP32[i12 >> 2] >> 2] | 0));
 if (HEAP32[(HEAP32[i8 >> 2] | 0) + 52 >> 2] | 0) if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 52 >> 2] | 0) != 45987) {
  i14 = (HEAP32[i8 >> 2] | 0) + 52 | 0;
  HEAP32[i14 >> 2] = (HEAP32[i15 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) - (HEAP32[HEAP32[i12 >> 2] >> 2] | 0));
 }
 _vim_free(HEAP32[HEAP32[i12 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i15 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
 i16 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i16 | 0;
}

function _gui_do_scroll() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2 + 28 | 0;
 i5 = i2 + 24 | 0;
 i6 = i2 + 20 | 0;
 i7 = i2 + 16 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2 + 4 | 0;
 i10 = i2;
 HEAP32[i4 >> 2] = HEAP32[26887];
 HEAP32[i6 >> 2] = 0;
 while (1) {
  i11 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[i4 >> 2] | 0) == 0 ? 1 : (HEAP32[i6 >> 2] | 0) >= (HEAP32[27097] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[i11 + 12 >> 2];
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if (!i11) {
  HEAP32[i3 >> 2] = 0;
  i12 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i12 | 0;
 }
 HEAP32[i7 >> 2] = (HEAP32[27098] | 0) + 1 - (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0);
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i12 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i12 | 0;
 }
 HEAP32[i5 >> 2] = HEAP32[26881];
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2];
 i11 = (HEAP32[i4 >> 2] | 0) + 24 | 0;
 HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[26881] = HEAP32[i4 >> 2];
 HEAP32[26773] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 i11 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[i7 >> 2] | 0) < 0) _scrolldown(0 - i11 | 0, (HEAP32[26633] | 0) == 0 & 1); else _scrollup(i11, (HEAP32[26633] | 0) == 0 & 1);
 if ((HEAP32[26632] | 0) == -1) HEAP32[26633] = 0;
 if ((HEAP32[i9 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) {
  if (HEAP32[26971] | 0) {
   _cursor_correct();
   _update_topline();
  }
  if ((HEAP32[i8 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0)) _coladvance(HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) | 0;
  i11 = HEAP32[i4 >> 2] | 0;
  HEAP32[i11 + 296 >> 2] = HEAP32[i11 + 68 >> 2];
 }
 _validate_cursor();
 HEAP32[26881] = HEAP32[i5 >> 2];
 HEAP32[26773] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 if ((HEAP32[i9 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0)) i1 = 21; else if (HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] | 0) i1 = 21;
 if ((i1 | 0) == 21) {
  HEAP32[i10 >> 2] = 10;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] | 0) < (HEAP32[i10 >> 2] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] = HEAP32[i10 >> 2];
  _gui_disable_flush();
  _updateWindow(HEAP32[i4 >> 2] | 0);
  _gui_enable_flush();
 }
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[26881] | 0)) {
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) i13 = (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) == (HEAP32[i8 + 4 >> 2] | 0); else i13 = 0;
  i14 = i13 ^ 1;
 } else i14 = 0;
 HEAP32[i3 >> 2] = i14 & 1;
 i12 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i12 | 0;
}

function _check_overwrite(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i7 + 36 | 0;
 i9 = i7 + 32 | 0;
 i10 = i7 + 28 | 0;
 i11 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i13 = i7 + 16 | 0;
 i14 = i7 + 12 | 0;
 i15 = i7 + 8 | 0;
 i16 = i7 + 4 | 0;
 i17 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 do if (HEAP32[i13 >> 2] | 0) i6 = 6; else if (HEAP32[(HEAP32[i10 >> 2] | 0) + 60 >> 2] & 8 | 0) i6 = 6; else {
  if (HEAP32[(HEAP32[i10 >> 2] | 0) + 60 >> 2] & 16 | 0) if (!(_vim_strchr(HEAP32[26904] | 0, 79) | 0)) {
   i6 = 6;
   break;
  }
  if (!(HEAP32[27040] | 0 ? 1 : (HEAP32[(HEAP32[i10 >> 2] | 0) + 60 >> 2] & 64 | 0) == 0)) i6 = 7;
 } while (0);
 if ((i6 | 0) == 6) if (!(HEAP32[27040] | 0)) i6 = 7;
 do if ((i6 | 0) == 7) if (_vim_fexists(HEAP32[i12 >> 2] | 0) | 0) {
  if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] | 0)) if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 60 >> 2] | 0)) if (_mch_isdir(HEAP32[i12 >> 2] | 0) | 0) {
   _emsg2(92544, HEAP32[i12 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = 0;
   i18 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i18 | 0;
  } else {
   _emsg(92293) | 0;
   HEAP32[i8 >> 2] = 0;
   i18 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i18 | 0;
  }
  if (!((HEAP32[i13 >> 2] | 0) == 0 | (HEAP32[26810] | 0) != 0)) {
   do if (!(HEAPU8[HEAP32[26906] >> 0] | 0)) {
    HEAP32[i14 >> 2] = _alloc(5) | 0;
    if (HEAP32[i14 >> 2] | 0) {
     _strcpy(HEAP32[i14 >> 2] | 0, 98579) | 0;
     break;
    }
    HEAP32[i8 >> 2] = 0;
    i18 = HEAP32[i8 >> 2] | 0;
    STACKTOP = i7;
    return i18 | 0;
   } else {
    HEAP32[i14 >> 2] = _alloc(4096) | 0;
    if (HEAP32[i14 >> 2] | 0) {
     HEAP32[i15 >> 2] = HEAP32[26906];
     _copy_option_part(i15, HEAP32[i14 >> 2] | 0, 4096, 84434) | 0;
     break;
    }
    HEAP32[i8 >> 2] = 0;
    i18 = HEAP32[i8 >> 2] | 0;
    STACKTOP = i7;
    return i18 | 0;
   } while (0);
   HEAP32[i17 >> 2] = _makeswapname(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[26773] | 0, HEAP32[i14 >> 2] | 0) | 0;
   _vim_free(HEAP32[i14 >> 2] | 0);
   HEAP32[i16 >> 2] = _vim_fexists(HEAP32[i17 >> 2] | 0) | 0;
   i10 = HEAP32[i17 >> 2] | 0;
   if (!(HEAP32[i16 >> 2] | 0)) {
    _vim_free(i10);
    break;
   }
   _emsg2(43053, i10) | 0;
   _vim_free(HEAP32[i17 >> 2] | 0);
   HEAP32[i8 >> 2] = 0;
   i18 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i7;
   return i18 | 0;
  }
 } while (0);
 HEAP32[i8 >> 2] = 1;
 i18 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i18 | 0;
}

function _getnextmark(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i9 >> 2] = 0;
 i3 = HEAP32[i5 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 if ((HEAP32[i6 >> 2] | 0) == -1 & (HEAP32[i7 >> 2] | 0) != 0) HEAP32[i10 + 4 >> 2] = 0; else if ((HEAP32[i6 >> 2] | 0) == 1 & (HEAP32[i7 >> 2] | 0) != 0) HEAP32[i10 + 4 >> 2] = 2147483647;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= 26) break;
  L9 : do if ((HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) >> 2] | 0) > 0) {
   i7 = (HEAP32[i9 >> 2] | 0) == 0;
   if ((HEAP32[i6 >> 2] | 0) == 1) {
    do if (!i7) {
     i3 = (HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) | 0;
     if ((HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) >> 2] | 0) != (HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) if ((HEAP32[i3 >> 2] | 0) < (HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) break; else break L9; else if ((HEAP32[i3 + 4 >> 2] | 0) < (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) break; else break L9;
    } while (0);
    if ((HEAP32[i10 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) >> 2] | 0)) {
     if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) >> 2] | 0)) break;
    } else if ((HEAP32[i10 + 4 >> 2] | 0) >= (HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) + 4 >> 2] | 0)) break;
    HEAP32[i9 >> 2] = (HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3);
    break;
   } else {
    do if (!i7) {
     i3 = HEAP32[i9 >> 2] | 0;
     if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) >> 2] | 0)) if ((HEAP32[i3 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) >> 2] | 0)) break; else break L9; else if ((HEAP32[i3 + 4 >> 2] | 0) < (HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) + 4 >> 2] | 0)) break; else break L9;
    } while (0);
    i7 = (HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) | 0;
    if ((HEAP32[(HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3) >> 2] | 0) != (HEAP32[i10 >> 2] | 0)) {
     if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
    } else if ((HEAP32[i7 + 4 >> 2] | 0) >= (HEAP32[i10 + 4 >> 2] | 0)) break;
    HEAP32[i9 >> 2] = (HEAP32[26773] | 0) + 188 + (HEAP32[i8 >> 2] << 3);
    break;
   }
  } while (0);
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 STACKTOP = i4;
 return HEAP32[i9 >> 2] | 0;
}

function _nfa_regcomp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[7456] = HEAP32[i6 >> 2];
 HEAP32[26381] = HEAP32[i7 >> 2];
 _init_class_tab();
 if (!(_nfa_regcomp_start(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0)) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i10 >> 2] = _re2post() | 0;
 if (!(HEAP32[i10 >> 2] | 0)) if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) {
  _iemsgn(72810, ((HEAP32[26383] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0);
  i3 = 14;
 } else i3 = 14; else {
  _post2nfa(HEAP32[i10 >> 2] | 0, HEAP32[26382] | 0, 1) | 0;
  HEAP32[i9 >> 2] = 80 + (((HEAP32[26333] | 0) - 1 | 0) * 28 | 0);
  HEAP32[i8 >> 2] = _lalloc(HEAP32[i9 >> 2] | 0, 1) | 0;
  if (!(HEAP32[i8 >> 2] | 0)) i3 = 14; else {
   HEAP32[26385] = (HEAP32[i8 >> 2] | 0) + 52;
   i9 = _post2nfa(HEAP32[i10 >> 2] | 0, HEAP32[26382] | 0, 0) | 0;
   HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = i9;
   if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0)) i3 = 14; else {
    HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = HEAP32[26386];
    HEAP32[HEAP32[i8 >> 2] >> 2] = 29808;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] = HEAP32[26333];
    HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2] = HEAP32[26327];
    HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] = HEAP32[26328];
    HEAP32[(HEAP32[i8 >> 2] | 0) + 44 >> 2] = HEAP32[26387];
    _nfa_postprocess(HEAP32[i8 >> 2] | 0);
    i9 = _nfa_get_reganch(HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0, 0) | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] = i9;
    i9 = _nfa_get_regstart(HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0, 0) | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] = i9;
    i9 = _nfa_get_match_text(HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0) | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] = i9;
    i9 = _vim_strsave(HEAP32[i6 >> 2] | 0) | 0;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] = i9;
    HEAP32[7456] = 0;
   }
  }
 }
 if ((i3 | 0) == 14) {
  if (HEAP32[i8 >> 2] | 0) {
   _vim_free(HEAP32[i8 >> 2] | 0);
   HEAP32[i8 >> 2] = 0;
  }
  HEAP32[7456] = 0;
 }
 if (HEAP32[26384] | 0) {
  _vim_free(HEAP32[26384] | 0);
  HEAP32[26384] = 0;
 }
 HEAP32[26383] = 0;
 HEAP32[26382] = 0;
 HEAP32[26385] = 0;
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _help_heuristic(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
 while (1) {
  if (!(HEAP8[HEAP32[i10 >> 2] >> 0] | 0)) break;
  if (((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) - 65 | 0) >>> 0 < 26) i4 = 6; else if (((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) - 97 | 0) >>> 0 < 26) i4 = 6; else if (((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) i4 = 6;
  if ((i4 | 0) == 6) {
   i4 = 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if (((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0) - 65 | 0) >>> 0 < 26) i4 = 11; else if (((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0) - 97 | 0) >>> 0 < 26) i4 = 11; else if ((HEAP32[i7 >> 2] | 0) > 0 ? ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0) - 48 | 0) >>> 0 < 10 : 0) i4 = 12; else i4 = 16;
 if ((i4 | 0) == 11) if ((HEAP32[i7 >> 2] | 0) > 0) i4 = 12; else i4 = 16;
 do if ((i4 | 0) == 12) {
  if (((HEAPU8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] | 0) - 97 | 0) >>> 0 >= 26) if (((HEAPU8[(HEAP32[i6 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] | 0) - 48 | 0) >>> 0 >= 10) {
   i4 = 16;
   break;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1e4;
 } while (0);
 if ((i4 | 0) == 16) if ((HEAP32[i7 >> 2] | 0) > 2) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) * 200;
 if (HEAP32[i8 >> 2] | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 5e3;
 if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 43) {
  i11 = HEAP32[i9 >> 2] | 0;
  i12 = i11 * 100 | 0;
  i13 = HEAP32[i6 >> 2] | 0;
  i14 = _strlen(i13) | 0;
  i15 = i12 + i14 | 0;
  i16 = HEAP32[i7 >> 2] | 0;
  i17 = i15 + i16 | 0;
  STACKTOP = i5;
  return i17 | 0;
 }
 if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0)) {
  i11 = HEAP32[i9 >> 2] | 0;
  i12 = i11 * 100 | 0;
  i13 = HEAP32[i6 >> 2] | 0;
  i14 = _strlen(i13) | 0;
  i15 = i12 + i14 | 0;
  i16 = HEAP32[i7 >> 2] | 0;
  i17 = i15 + i16 | 0;
  STACKTOP = i5;
  return i17 | 0;
 }
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 100;
 i11 = HEAP32[i9 >> 2] | 0;
 i12 = i11 * 100 | 0;
 i13 = HEAP32[i6 >> 2] | 0;
 i14 = _strlen(i13) | 0;
 i15 = i12 + i14 | 0;
 i16 = HEAP32[i7 >> 2] | 0;
 i17 = i15 + i16 | 0;
 STACKTOP = i5;
 return i17 | 0;
}

function _check_char_class(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 do switch (HEAP32[i6 >> 2] | 0) {
 case -870:
  {
   if ((HEAP32[i7 >> 2] | 0) >= 1 & (HEAP32[i7 >> 2] | 0) < 128) if (_isalnum(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i5 >> 2] = 1; else i3 = 40; else i3 = 40;
   break;
  }
 case -869:
  {
   if ((HEAP32[i7 >> 2] | 0) >= 1 & (HEAP32[i7 >> 2] | 0) < 128) if (_isalpha(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i5 >> 2] = 1; else i3 = 40; else i3 = 40;
   break;
  }
 case -868:
  {
   if ((HEAP32[i7 >> 2] | 0) == 32 | (HEAP32[i7 >> 2] | 0) == 9) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -867:
  {
   if ((HEAP32[i7 >> 2] | 0) >= 1 & (HEAP32[i7 >> 2] | 0) <= 127) if (_iscntrl(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i5 >> 2] = 1; else i3 = 40; else i3 = 40;
   break;
  }
 case -866:
  {
   if (((HEAP32[i7 >> 2] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -865:
  {
   if ((HEAP32[i7 >> 2] | 0) >= 1 & (HEAP32[i7 >> 2] | 0) <= 127) if (_isgraph(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i5 >> 2] = 1; else i3 = 40; else i3 = 40;
   break;
  }
 case -864:
  {
   if ((_islower(HEAP32[i7 >> 2] | 0) | 0) != 0 & (HEAP32[i7 >> 2] | 0) != 170 & (HEAP32[i7 >> 2] | 0) != 186) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -863:
  {
   if (_vim_isprintc(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -862:
  {
   if ((HEAP32[i7 >> 2] | 0) >= 1 & (HEAP32[i7 >> 2] | 0) < 128) if (_ispunct(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i5 >> 2] = 1; else i3 = 40; else i3 = 40;
   break;
  }
 case -861:
  {
   if ((HEAP32[i7 >> 2] | 0) >= 9 & (HEAP32[i7 >> 2] | 0) <= 13 | (HEAP32[i7 >> 2] | 0) == 32) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -860:
  {
   if (_isupper(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -859:
  {
   if (_vim_isxdigit(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -858:
  {
   if ((HEAP32[i7 >> 2] | 0) == 9) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -857:
  {
   if ((HEAP32[i7 >> 2] | 0) == 13) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -856:
  {
   if ((HEAP32[i7 >> 2] | 0) == 8) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 case -855:
  {
   if ((HEAP32[i7 >> 2] | 0) == 27) HEAP32[i5 >> 2] = 1; else i3 = 40;
   break;
  }
 default:
  {
   _iemsgn(72702, HEAP32[i6 >> 2] | 0);
   HEAP32[i5 >> 2] = 0;
  }
 } while (0);
 if ((i3 | 0) == 40) HEAP32[i5 >> 2] = 0;
 STACKTOP = i4;
 return HEAP32[i5 >> 2] | 0;
}

function _get_special_key_code(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 116) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) == 95) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 3 >> 0] | 0) {
  HEAP8[i7 >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0;
  HEAP8[i7 + 1 >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + 3 >> 0] | 0;
  HEAP8[i7 + 2 >> 0] = 0;
  if ((_add_termcap_entry(i7, 0) | 0) == 1) {
   i7 = HEAP32[i5 >> 2] | 0;
   HEAP32[i4 >> 2] = 0 - ((HEAPU8[i7 + 2 >> 0] | 0) + (HEAPU8[i7 + 3 >> 0] << 8));
   i10 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i10 | 0;
  }
 } else i2 = 7; else i2 = 7; else i2 = 7; else i2 = 7;
 L8 : do if ((i2 | 0) == 7) {
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if (!(HEAP32[11620 + (HEAP32[i8 >> 2] << 3) + 4 >> 2] | 0)) break L8;
   HEAP32[i6 >> 2] = HEAP32[11620 + (HEAP32[i8 >> 2] << 3) + 4 >> 2];
   HEAP32[i9 >> 2] = 0;
   while (1) {
    if (!(_vim_isIDc(HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) | 0)) break;
    if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0)) break;
    if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) < 65) i2 = 14; else if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) > 90) i2 = 14; else i11 = (HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) + 32 | 0;
    if ((i2 | 0) == 14) {
     i2 = 0;
     i11 = HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0;
    }
    if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) < 65) i2 = 18; else if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) > 90) i2 = 18; else i12 = (HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) + 32 | 0;
    if ((i2 | 0) == 18) {
     i2 = 0;
     i12 = HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0;
    }
    if ((i11 | 0) != (i12 | 0)) break;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   }
   if (!(_vim_isIDc(HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) | 0)) if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0)) break;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  HEAP32[i4 >> 2] = HEAP32[11620 + (HEAP32[i8 >> 2] << 3) >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 0;
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _getout(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 36 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[26778] = 1;
 if (HEAP32[26798] | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[26717] | 0);
 if (!(HEAP32[26627] | 0)) _windgoto((HEAP32[10173] | 0) - 1 | 0, 0);
 HEAP32[26712] = 0;
 if ((HEAP32[26780] | 0) <= 1) {
  HEAP32[i5 >> 2] = HEAP32[26884];
  while (1) {
   if (!(HEAP32[i5 >> 2] | 0)) break;
   HEAP32[i6 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
   if (!(HEAP32[i5 >> 2] | 0)) i2 = 10; else if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26886] | 0)) i2 = 10; else i11 = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0;
   if ((i2 | 0) == 10) {
    i2 = 0;
    i11 = HEAP32[26887] | 0;
   }
   HEAP32[i8 >> 2] = i11;
   while (1) {
    if (!(HEAP32[i8 >> 2] | 0)) break;
    if (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) {
     HEAP32[i7 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2];
     if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 112 + 8 >> 2] | 0) != -1) {
      i2 = 16;
      break;
     }
    }
    HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2];
   }
   if ((i2 | 0) == 16) {
    i2 = 0;
    _set_bufref(i9, HEAP32[i7 >> 2] | 0);
    i1 = HEAP32[(HEAP32[i7 >> 2] | 0) + 76 >> 2] | 0;
    i12 = HEAP32[i7 >> 2] | 0;
    _apply_autocmds(14, i1 | 0, i1 | 0, 0, i12 | 0) | 0;
    if (_bufref_valid(i9) | 0) HEAP32[(HEAP32[i7 >> 2] | 0) + 112 + 8 >> 2] = -1;
    HEAP32[i6 >> 2] = HEAP32[26884];
   }
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  }
  HEAP32[i7 >> 2] = HEAP32[26771];
  while (1) {
   if (!(HEAP32[i7 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) {
    _set_bufref(i10, HEAP32[i7 >> 2] | 0);
    i6 = HEAP32[(HEAP32[i7 >> 2] | 0) + 76 >> 2] | 0;
    i5 = HEAP32[i7 >> 2] | 0;
    _apply_autocmds(12, i6 | 0, i6 | 0, 0, i5 | 0) | 0;
    if (!(_bufref_valid(i10) | 0)) break;
   }
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2];
  }
  _apply_autocmds(91, 0, 0, 0, HEAP32[26773] | 0) | 0;
 }
 if ((HEAP32[26780] | 0) <= 1) _apply_autocmds(90, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if (HEAP32[26880] | 0) i2 = 31; else if ((HEAP32[26627] | 0) != 0 & (HEAP32[26712] | 0) != 0 & (HEAP32[26888] | 0) > 0) i2 = 31;
 if ((i2 | 0) == 31) {
  HEAP32[26720] = 0;
  _wait_return(0);
 }
 if (HEAP32[26627] | 0) {
  i13 = HEAP32[i4 >> 2] | 0;
  _mch_exit(i13);
  STACKTOP = i3;
  return;
 }
 _windgoto((HEAP32[10173] | 0) - 1 | 0, 0);
 i13 = HEAP32[i4 >> 2] | 0;
 _mch_exit(i13);
 STACKTOP = i3;
 return;
}

function _get_scroll_overlap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 48 | 0;
 i5 = i3 + 44 | 0;
 i6 = i3 + 40 | 0;
 i7 = i3 + 36 | 0;
 i8 = i3 + 32 | 0;
 i9 = i3 + 28 | 0;
 i10 = i3 + 24 | 0;
 i11 = i3 + 16 | 0;
 i12 = i3 + 8 | 0;
 i13 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i10 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) - 2;
 i2 = _plines(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i10 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 i2 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) > 0) _botline_forw(i2); else _topline_back(i2);
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 if ((HEAP32[i7 >> 2] | 0) != 2147483647) if (((HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) <= (HEAP32[i10 >> 2] | 0)) {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  i2 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[i5 >> 2] | 0) > 0) _botline_forw(i2); else _topline_back(i2);
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
  if ((HEAP32[i8 >> 2] | 0) != 2147483647) if (((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0) <= (HEAP32[i10 >> 2] | 0)) {
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i13 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   i2 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i5 >> 2] | 0) > 0) _botline_forw(i2); else _topline_back(i2);
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
   if ((HEAP32[i9 >> 2] | 0) != 2147483647) if (((HEAP32[i9 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0) <= (HEAP32[i10 >> 2] | 0)) if (((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) <= (HEAP32[i10 >> 2] | 0)) {
    i10 = HEAP32[i4 >> 2] | 0;
    HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i10 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
    STACKTOP = i3;
    return;
   }
   i13 = HEAP32[i4 >> 2] | 0;
   HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   STACKTOP = i3;
   return;
  }
  i12 = HEAP32[i4 >> 2] | 0;
  HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i12 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  STACKTOP = i3;
  return;
 }
 i12 = HEAP32[i4 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 STACKTOP = i3;
 return;
}

function _regtilde(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if (!(HEAP8[HEAP32[i9 >> 2] >> 0] | 0)) break;
  do if (HEAP32[i6 >> 2] | 0 ? (HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 126 : 0) i3 = 6; else {
   if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 92) if (!(HEAP32[i6 >> 2] | 0 ? 1 : (HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0) != 126)) {
    i3 = 6;
    break;
   }
   if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 92) if (HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  } while (0);
  if ((i3 | 0) == 6) {
   i3 = 0;
   do if (HEAP32[26310] | 0) {
    HEAP32[i11 >> 2] = _strlen(HEAP32[26310] | 0) | 0;
    i2 = _strlen(HEAP32[i7 >> 2] | 0) | 0;
    HEAP32[i8 >> 2] = _alloc(i2 + (HEAP32[i11 >> 2] | 0) | 0) | 0;
    if (HEAP32[i8 >> 2] | 0) {
     HEAP32[i10 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
     _memmove(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
     _memmove((HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0, HEAP32[26310] | 0, HEAP32[i11 >> 2] | 0) | 0;
     if (!(HEAP32[i6 >> 2] | 0)) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     _strcpy((HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0, (HEAP32[i9 >> 2] | 0) + 1 | 0) | 0;
     if ((HEAP32[i7 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) _vim_free(HEAP32[i7 >> 2] | 0);
     HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
     HEAP32[i9 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
    }
   } else {
    i2 = HEAP32[i9 >> 2] | 0;
    i1 = i2 | 0;
    i12 = i2 | 0;
    if (HEAP32[i6 >> 2] | 0) {
     _memmove(i1 | 0, i12 + 1 | 0, (_strlen((HEAP32[i9 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
     break;
    } else {
     _memmove(i1 | 0, i12 + 2 | 0, (_strlen((HEAP32[i9 >> 2] | 0) + 2 | 0) | 0) + 1 | 0) | 0;
     break;
    }
   } while (0);
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 _vim_free(HEAP32[26310] | 0);
 i9 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[i7 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
  HEAP32[26310] = i9;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 } else {
  HEAP32[26310] = _vim_strsave(i9) | 0;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 return 0;
}

function _ex_argdelete(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) <= 0) if (!(HEAPU8[HEAP32[i1 >> 2] >> 0] | 0)) {
  _emsg(92160) | 0;
  STACKTOP = i2;
  return;
 } else {
  _do_arglist(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 3, 0) | 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + 40 >> 2] | 0) > (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2];
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i5 >> 2] = (HEAP32[i1 + 40 >> 2] | 0) - (HEAP32[i1 + 36 >> 2] | 0) + 1;
 if (HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0) {
  _emsg(92453) | 0;
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) <= 0) {
  if ((i1 | 0) == 1) if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  }
  _emsg(92503) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = i1;
 while (1) {
  i6 = HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0;
  if ((HEAP32[i4 >> 2] | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) break;
  _vim_free(HEAP32[i6 + ((HEAP32[i4 >> 2] | 0) - 1 << 3) >> 2] | 0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = (HEAP32[26881] | 0) + 184 | 0;
 i7 = (HEAP32[i3 >> 2] | 0) + 40 | 0;
 _memmove(i6 + (HEAP32[i4 + 36 >> 2] << 3) + -8 | 0, (HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i7 >> 2] << 3) | 0, (HEAP32[HEAP32[i1 >> 2] >> 2] | 0) - (HEAP32[i7 >> 2] | 0) << 3 | 0) | 0;
 i7 = HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i5 >> 2] | 0);
 if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) >= (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) {
  i7 = (HEAP32[26881] | 0) + 188 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i5 >> 2] | 0);
 } else if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 188 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2];
 i3 = (HEAP32[26881] | 0) + 188 | 0;
 if (!(HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) < (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[26881] | 0;
 HEAP32[i3 + 188 >> 2] = (HEAP32[HEAP32[i3 + 184 >> 2] >> 2] | 0) - 1;
 STACKTOP = i2;
 return;
}

function _del_typebuf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[26821] = (HEAP32[26821] | 0) - (HEAP32[i5 >> 2] | 0);
 if (!(HEAP32[i6 >> 2] | 0)) if (((HEAP32[26819] | 0) - ((HEAP32[26820] | 0) + (HEAP32[i5 >> 2] | 0)) | 0) >= 153) HEAP32[26820] = (HEAP32[26820] | 0) + (HEAP32[i5 >> 2] | 0); else i3 = 5; else i3 = 5;
 if ((i3 | 0) == 5) {
  HEAP32[i7 >> 2] = (HEAP32[26820] | 0) + (HEAP32[i6 >> 2] | 0);
  if ((HEAP32[26820] | 0) > 50) {
   i3 = HEAP32[26817] | 0;
   _memmove(i3 + 50 | 0, i3 + (HEAP32[26820] | 0) | 0, HEAP32[i6 >> 2] | 0) | 0;
   i3 = HEAP32[26818] | 0;
   _memmove(i3 + 50 | 0, i3 + (HEAP32[26820] | 0) | 0, HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[26820] = 50;
  }
  i3 = HEAP32[26817] | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  _memmove(i3 + (HEAP32[26820] | 0) + i2 | 0, i3 + (HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0, (HEAP32[26821] | 0) - i2 + 1 | 0) | 0;
  i2 = HEAP32[26818] | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  _memmove(i2 + (HEAP32[26820] | 0) + i3 | 0, i2 + (HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0, (HEAP32[26821] | 0) - i3 | 0) | 0;
 }
 do if ((HEAP32[26822] | 0) > (HEAP32[i6 >> 2] | 0)) if ((HEAP32[26822] | 0) < ((HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0)) {
  HEAP32[26822] = HEAP32[i6 >> 2];
  break;
 } else {
  HEAP32[26822] = (HEAP32[26822] | 0) - (HEAP32[i5 >> 2] | 0);
  break;
 } while (0);
 do if ((HEAP32[26823] | 0) > (HEAP32[i6 >> 2] | 0)) if ((HEAP32[26823] | 0) < ((HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0)) {
  HEAP32[26823] = HEAP32[i6 >> 2];
  break;
 } else {
  HEAP32[26823] = (HEAP32[26823] | 0) - (HEAP32[i5 >> 2] | 0);
  break;
 } while (0);
 if ((HEAP32[26824] | 0) <= (HEAP32[i6 >> 2] | 0)) {
  i8 = HEAP32[26825] | 0;
  i9 = i8 + 1 | 0;
  HEAP32[26825] = i9;
  i10 = (i9 | 0) == 0;
  i11 = i10 ? 1 : i9;
  HEAP32[26825] = i11;
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[26824] | 0) < ((HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0)) {
  HEAP32[26824] = HEAP32[i6 >> 2];
  i8 = HEAP32[26825] | 0;
  i9 = i8 + 1 | 0;
  HEAP32[26825] = i9;
  i10 = (i9 | 0) == 0;
  i11 = i10 ? 1 : i9;
  HEAP32[26825] = i11;
  STACKTOP = i4;
  return;
 } else {
  HEAP32[26824] = (HEAP32[26824] | 0) - (HEAP32[i5 >> 2] | 0);
  i8 = HEAP32[26825] | 0;
  i9 = i8 + 1 | 0;
  HEAP32[26825] = i9;
  i10 = (i9 | 0) == 0;
  i11 = i10 ? 1 : i9;
  HEAP32[26825] = i11;
  STACKTOP = i4;
  return;
 }
}

function _do_in_path_and_pp(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i7 + 8 | 0;
 i9 = i7;
 i10 = i7 + 52 | 0;
 i11 = i7 + 48 | 0;
 i12 = i7 + 44 | 0;
 i13 = i7 + 40 | 0;
 i14 = i7 + 36 | 0;
 i15 = i7 + 32 | 0;
 i16 = i7 + 28 | 0;
 i17 = i7 + 24 | 0;
 i18 = i7 + 20 | 0;
 i19 = i7 + 16 | 0;
 i20 = i7 + 12 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i19 >> 2] = 45280;
 HEAP32[i20 >> 2] = 45298;
 if (!(HEAP32[i13 >> 2] & 32)) HEAP32[i16 >> 2] = _do_in_path(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
 if (!(HEAP32[i16 >> 2] | 0)) i6 = 5; else if (HEAP32[i13 >> 2] & 1 | 0) i6 = 5;
 do if ((i6 | 0) == 5) if (HEAP32[i13 >> 2] & 8 | 0) {
  i11 = _strlen(HEAP32[i19 >> 2] | 0) | 0;
  HEAP32[i18 >> 2] = i11 + (_strlen(HEAP32[i12 >> 2] | 0) | 0);
  HEAP32[i17 >> 2] = _alloc(HEAP32[i18 >> 2] | 0) | 0;
  if (HEAP32[i17 >> 2] | 0) {
   i11 = HEAP32[i17 >> 2] | 0;
   i5 = HEAP32[i18 >> 2] | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
   _vim_snprintf(i11, i5, i4, i9) | 0;
   HEAP32[i16 >> 2] = _do_in_path(HEAP32[26968] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
   _vim_free(HEAP32[i17 >> 2] | 0);
   break;
  }
  HEAP32[i10 >> 2] = 0;
  i21 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i7;
  return i21 | 0;
 } while (0);
 if (!(HEAP32[i16 >> 2] | 0)) i6 = 11; else if (HEAP32[i13 >> 2] & 1 | 0) i6 = 11;
 do if ((i6 | 0) == 11) if (HEAP32[i13 >> 2] & 16 | 0) {
  i9 = _strlen(HEAP32[i20 >> 2] | 0) | 0;
  HEAP32[i18 >> 2] = i9 + (_strlen(HEAP32[i12 >> 2] | 0) | 0);
  HEAP32[i17 >> 2] = _alloc(HEAP32[i18 >> 2] | 0) | 0;
  if (HEAP32[i17 >> 2] | 0) {
   i9 = HEAP32[i17 >> 2] | 0;
   i19 = HEAP32[i18 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
   _vim_snprintf(i9, i19, i4, i8) | 0;
   HEAP32[i16 >> 2] = _do_in_path(HEAP32[26968] | 0, HEAP32[i17 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
   _vim_free(HEAP32[i17 >> 2] | 0);
   break;
  }
  HEAP32[i10 >> 2] = 0;
  i21 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i7;
  return i21 | 0;
 } while (0);
 HEAP32[i10 >> 2] = HEAP32[i16 >> 2];
 i21 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i7;
 return i21 | 0;
}

function _parse_match(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 i2 = (_strlen(HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0) | 0) + 2 | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
 HEAP32[i7 >> 2] = _parse_tag_line(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = 0;
 if ((HEAP32[i7 >> 2] | 0) != 1) {
  i11 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2];
 L4 : do if ((_find_extra(i8) | 0) == 1) {
  HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 2;
  i5 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = i5 + 1;
  if ((HEAPU8[i5 >> 0] | 0 | 0) == 9) {
   while (1) {
    if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 97 | 0) >>> 0 >= 26) break L4;
    i5 = (_strncmp(HEAP32[i8 >> 2] | 0, 78213, 5) | 0) == 0;
    i12 = HEAP32[i8 >> 2] | 0;
    if (i5) {
     i3 = 8;
     break;
    }
    HEAP32[i9 >> 2] = _vim_strchr(i12, 58) | 0;
    HEAP32[i10 >> 2] = _vim_strchr(HEAP32[i8 >> 2] | 0, 9) | 0;
    if (!(HEAP32[i9 >> 2] | 0)) {
     i3 = 12;
     break;
    }
    if (HEAP32[i10 >> 2] | 0) if ((HEAP32[i9 >> 2] | 0) >>> 0 > (HEAP32[i10 >> 2] | 0) >>> 0) {
     i3 = 12;
     break;
    }
    if (!(HEAP32[i10 >> 2] | 0)) break L4;
    HEAP32[i8 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
   }
   if ((i3 | 0) == 8) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = i12 + 5;
    break;
   } else if ((i3 | 0) == 12) {
    HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = HEAP32[i8 >> 2];
    break;
   }
  }
 } while (0);
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0)) {
  i11 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == 9) break;
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == 13) break;
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == 10) break;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] = HEAP32[i8 >> 2];
 i11 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _clip_get_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i3 = i2 + 184 | 0;
 i4 = i2 + 180 | 0;
 i5 = i2 + 176 | 0;
 i6 = i2 + 168 | 0;
 i7 = i2 + 160 | 0;
 i8 = i2 + 152 | 0;
 i9 = i2 + 148 | 0;
 i10 = i2 + 144 | 0;
 i11 = i2 + 136 | 0;
 i12 = i2 + 128 | 0;
 i13 = i2 + 44 | 0;
 i14 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) {
  if (_is_clipboard_needs_update() | 0) {
   STACKTOP = i2;
   return;
  }
  _clip_free_selection(HEAP32[i3 >> 2] | 0);
  _clip_gen_request_selection(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) == 108396 & (HEAP32[26233] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) == 108396 & (HEAP32[26233] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[26083];
 HEAP32[i5 >> 2] = HEAP32[26084];
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[26881] | 0) + 32 >> 2];
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[26881] | 0) + 36 >> 2];
 i1 = (HEAP32[26773] | 0) + 476 | 0;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = (HEAP32[26773] | 0) + 492 | 0;
 HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[27117];
 HEAP32[i7 + 4 >> 2] = HEAP32[27118];
 HEAP32[i8 >> 2] = HEAP32[10179];
 _clear_oparg(i13);
 HEAP32[i13 + 4 >> 2] = (HEAP32[i3 >> 2] | 0) == 108396 ? 43 : 42;
 HEAP32[i13 >> 2] = 2;
 i3 = i14;
 i1 = i3 + 44 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i1 | 0));
 HEAP32[i14 >> 2] = i13;
 HEAP32[i14 + 8 >> 2] = 121;
 HEAP32[i14 + 28 >> 2] = 1;
 HEAP32[i14 + 36 >> 2] = 2;
 _do_pending_operator(i14, 0, 1);
 HEAP32[26083] = HEAP32[i4 >> 2];
 HEAP32[26084] = HEAP32[i5 >> 2];
 i5 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 _changed_cline_bef_curs();
 HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[i9 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = HEAP32[i10 >> 2];
 i10 = (HEAP32[26773] | 0) + 476 | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 i11 = (HEAP32[26773] | 0) + 492 | 0;
 HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i11 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[27117] = HEAP32[i7 >> 2];
 HEAP32[27118] = HEAP32[i7 + 4 >> 2];
 HEAP32[10179] = HEAP32[i8 >> 2];
 STACKTOP = i2;
 return;
}

function _do_intro_line(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = i5 + 44 | 0;
 i9 = i5 + 40 | 0;
 i10 = i5 + 36 | 0;
 i11 = i5 + 32 | 0;
 i12 = i5 + 48 | 0;
 i13 = i5 + 28 | 0;
 i14 = i5 + 24 | 0;
 i15 = i5 + 20 | 0;
 i16 = i5 + 16 | 0;
 i17 = i5 + 12 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i13 >> 2] = _vim_strsize(HEAP32[i9 >> 2] | 0) | 0;
 if (HEAP32[i10 >> 2] | 0) {
  _strcpy(i12, 81103) | 0;
  do if (_highest_patch() | 0) if (_isalpha(HEAPU8[i12 + 3 >> 0] | 0) | 0) {
   i4 = (_isalpha(HEAPU8[i12 + 4 >> 0] | 0) | 0) != 0;
   HEAP32[i17 >> 2] = i4 ? 5 : 4;
   i4 = i12 + (HEAP32[i17 >> 2] | 0) | 0;
   i3 = _highest_patch() | 0;
   i2 = 81103 + (HEAP32[i17 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i3;
   HEAP32[i7 + 4 >> 2] = i2;
   _sprintf(i4, 83129, i7) | 0;
   break;
  } else {
   HEAP32[i6 >> 2] = _highest_patch() | 0;
   _sprintf(i12 + 3 | 0, 83135, i6) | 0;
   break;
  } while (0);
  i6 = _strlen(i12) | 0;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i6;
 }
 i6 = ((HEAP32[10174] | 0) - (HEAP32[i13 >> 2] | 0) | 0) / 2 | 0;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) < 0 ? 0 : i6;
 HEAP32[i14 >> 2] = HEAP32[i9 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i14 >> 2] >> 0] | 0)) break;
  HEAP32[i16 >> 2] = 0;
  HEAP32[i15 >> 2] = 0;
  while (1) {
   if (HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0 | 0) if (!(HEAP32[i15 >> 2] | 0)) i18 = 1; else if ((HEAPU8[(HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) >> 0] | 0 | 0) != 60) i18 = (HEAPU8[(HEAP32[i14 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) - 1) >> 0] | 0 | 0) != 62; else i18 = 0; else i18 = 0;
   i19 = HEAP32[i14 >> 2] | 0;
   i20 = HEAP32[i15 >> 2] | 0;
   if (!i18) break;
   i9 = _byte2cells(HEAPU8[i19 + i20 >> 0] | 0) | 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + i9;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  _screen_puts_len(i19, i20, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0, (HEAPU8[HEAP32[i14 >> 2] >> 0] | 0 | 0) == 60 ? HEAP32[27048] | 0 : HEAP32[i11 >> 2] | 0);
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
 }
 if (!(HEAP32[i10 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 _screen_puts(i12, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0, 0);
 STACKTOP = i5;
 return;
}

function _findpar(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i7 + 40 | 0;
 i9 = i7 + 36 | 0;
 i10 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i12 = i7 + 24 | 0;
 i13 = i7 + 20 | 0;
 i14 = i7 + 16 | 0;
 i15 = i7 + 12 | 0;
 i16 = i7 + 8 | 0;
 i17 = i7 + 4 | 0;
 i18 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i17 >> 2] = (_vim_strchr(HEAP32[26904] | 0, 123) | 0) != 0 & 1;
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 while (1) {
  i5 = HEAP32[i11 >> 2] | 0;
  HEAP32[i11 >> 2] = i5 + -1;
  if (!i5) break;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i16 >> 2] = 1;
  while (1) {
   if (HEAPU8[(_ml_get(HEAP32[i14 >> 2] | 0) | 0) >> 0] | 0 | 0) HEAP32[i15 >> 2] = 1;
   if ((HEAP32[i16 >> 2] | 0) == 0 & (HEAP32[i15 >> 2] | 0) != 0) {
    if (_startPS(HEAP32[i14 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0) break;
    if ((HEAP32[i17 >> 2] | 0) != 0 & (HEAP32[i12 >> 2] | 0) == 0) if ((HEAPU8[(_ml_get(HEAP32[i14 >> 2] | 0) | 0) >> 0] | 0 | 0) == 123) break;
   }
   i5 = (HEAP32[i14 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0;
   HEAP32[i14 >> 2] = i5;
   if ((i5 | 0) < 1) {
    i6 = 12;
    break;
   }
   if ((HEAP32[i14 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
    i6 = 12;
    break;
   }
   HEAP32[i16 >> 2] = 0;
  }
  if ((i6 | 0) == 12) {
   i6 = 0;
   if (HEAP32[i11 >> 2] | 0) {
    i6 = 13;
    break;
   }
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) - (HEAP32[i10 >> 2] | 0);
  }
 }
 if ((i6 | 0) == 13) {
  HEAP32[i8 >> 2] = 0;
  i19 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i19 | 0;
 }
 _setpcmark();
 if (HEAP32[i13 >> 2] | 0) if ((HEAPU8[(_ml_get(HEAP32[i14 >> 2] | 0) | 0) >> 0] | 0 | 0) == 125) HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i14 >> 2];
 if ((HEAP32[i12 >> 2] | 0) != 125 ? (HEAP32[i14 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0) : 0) {
  HEAP32[i18 >> 2] = _ml_get(HEAP32[i14 >> 2] | 0) | 0;
  i14 = _strlen(HEAP32[i18 >> 2] | 0) | 0;
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = i14;
  if (i14 | 0) {
   i14 = (HEAP32[26881] | 0) + 24 + 4 | 0;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
   HEAP32[HEAP32[i9 >> 2] >> 2] = 1;
  }
 } else HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 HEAP32[i8 >> 2] = 1;
 i19 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i19 | 0;
}

function _mf_release(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[26774] | 0) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0) >>> 0) i11 = 1; else i11 = (HEAP32[27225] | 0) >>> 10 >>> 0 >= (HEAP32[26951] | 0) >>> 0;
 HEAP32[i8 >> 2] = i11 & 1;
 if ((HEAP32[i8 >> 2] | 0 ? (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) < 0 : 0) & (HEAP32[26879] | 0) != 0) {
  HEAP32[i9 >> 2] = HEAP32[26771];
  while (1) {
   if (!(HEAP32[i9 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) break;
   HEAP32[i9 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2];
  }
  if (HEAP32[i9 >> 2] | 0) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 772 >> 2] | 0) _ml_open_file(HEAP32[i9 >> 2] | 0);
 }
 if (!(HEAP32[i8 >> 2] | 0 ? (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) >= 0 : 0)) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  if (!(HEAP8[(HEAP32[i7 >> 2] | 0) + 28 >> 0] & 2)) break;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2];
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 if (HEAP8[(HEAP32[i7 >> 2] | 0) + 28 >> 0] & 1 | 0) if (!(_mf_write(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0)) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 _mf_rem_used(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 _mf_rem_hash(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 do if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) {
  _vim_free(HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0);
  i8 = _alloc(Math_imul(HEAP32[(HEAP32[i5 >> 2] | 0) + 592 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = i8;
  if (i8 | 0) {
   HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = HEAP32[i6 >> 2];
   break;
  }
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } while (0);
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _op_format(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[HEAP32[26773] >> 2];
 i2 = (HEAP32[26881] | 0) + 24 | 0;
 i1 = (HEAP32[i4 >> 2] | 0) + 44 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if (!(_u_save((HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i3;
  return;
 }
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 60 >> 2] | 0) _redraw_curbuf_later(20);
 i2 = (HEAP32[26773] | 0) + 476 | 0;
 i1 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if (HEAP32[i5 >> 2] | 0) {
  i1 = (HEAP32[i4 >> 2] | 0) + 44 | 0;
  HEAP32[26794] = HEAP32[i1 >> 2];
  HEAP32[26795] = HEAP32[i1 + 4 >> 2];
 }
 _format_lines(HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
  i1 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 _beginline(5);
 HEAP32[i6 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
 _msgmore(HEAP32[i6 >> 2] | 0);
 i1 = (HEAP32[26773] | 0) + 492 | 0;
 i2 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 if (HEAP32[i5 >> 2] | 0) {
  i5 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i5 >> 2] = HEAP32[26794];
  HEAP32[i5 + 4 >> 2] = HEAP32[26795];
  HEAP32[26794] = 0;
 }
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 60 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  do if (HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] | 0) {
   i4 = HEAP32[i6 >> 2] | 0;
   i5 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 44 >> 2] | 0) > (HEAP32[(HEAP32[i7 >> 2] | 0) + 56 >> 2] | 0)) {
    i2 = i5 + 44 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i4;
    break;
   } else {
    i2 = i5 + 56 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i4;
    break;
   }
  } while (0);
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
 }
 STACKTOP = i3;
 return;
}

function _match_backref(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 L1 : do if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) {
  i3 = (HEAP32[i6 >> 2] | 0) + 4 | 0;
  do if (!(HEAP32[26312] | 0)) {
   if ((HEAP32[i3 + (HEAP32[i7 >> 2] << 4) >> 2] | 0) < 0) break L1;
   if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) + 4 >> 2] | 0) < 0) break L1;
   if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) >> 2] | 0) == (HEAP32[26326] | 0)) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) + 4 >> 2] | 0) == (HEAP32[26326] | 0)) {
    i2 = (HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) | 0;
    HEAP32[i9 >> 2] = (HEAP32[i2 + 12 >> 2] | 0) - (HEAP32[i2 + 8 >> 2] | 0);
    if (_cstrncmp((HEAP32[26325] | 0) + (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) + 8 >> 2] | 0) | 0, HEAP32[26334] | 0, i9) | 0) break;
    HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i9 >> 2];
    HEAP32[i5 >> 2] = 1;
    i10 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i10 | 0;
   }
   if ((_match_with_backref(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) + 8 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) + 4 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 4) + 12 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0) == 4) {
    HEAP32[i5 >> 2] = 1;
    i10 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i10 | 0;
   }
  } else {
   if (!(HEAP32[i3 + (HEAP32[i7 >> 2] << 3) >> 2] | 0)) break L1;
   if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 3) + 4 >> 2] | 0)) break L1;
   i2 = (HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 3) | 0;
   HEAP32[i9 >> 2] = (HEAP32[i2 + 4 >> 2] | 0) - (HEAP32[i2 >> 2] | 0);
   if (!(_cstrncmp(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 + (HEAP32[i7 >> 2] << 3) >> 2] | 0, HEAP32[26334] | 0, i9) | 0)) {
    HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i9 >> 2];
    HEAP32[i5 >> 2] = 1;
    i10 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i10 | 0;
   }
  } while (0);
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } while (0);
 HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
 HEAP32[i5 >> 2] = 1;
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _ex_args(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 do if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) != 7) {
  _alist_unlink(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0);
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 12) {
   HEAP32[(HEAP32[26881] | 0) + 184 >> 2] = 107472;
   break;
  } else {
   _alist_new();
   break;
  }
 } while (0);
 i1 = (_ends_excmd(HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0) | 0) != 0;
 i7 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  _ex_next(i7);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i7 + 16 >> 2] | 0) == 7) {
  if ((HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) <= 0) {
   STACKTOP = i2;
   return;
  }
  HEAP32[i5 >> 2] = _alloc(HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] << 2) | 0;
  if (!(HEAP32[i5 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  }
  _gotocmdline(1);
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) break;
   i7 = _alist_name((HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i4 >> 2] << 3) | 0) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] = i7;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  i7 = HEAP32[26881] | 0;
  _list_in_columns(HEAP32[i5 >> 2] | 0, HEAP32[HEAP32[i7 + 184 >> 2] >> 2] | 0, HEAP32[i7 + 188 >> 2] | 0);
  _vim_free(HEAP32[i5 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) != 13) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 184 >> 2];
 if ((_ga_grow(HEAP32[i6 >> 2] | 0, HEAP32[26868] | 0) | 0) != 1) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26868] | 0)) break;
  if (HEAP32[(HEAP32[26872] | 0) + (HEAP32[i4 >> 2] << 3) >> 2] | 0) {
   i3 = _vim_strsave(HEAP32[(HEAP32[26872] | 0) + (HEAP32[i4 >> 2] << 3) >> 2] | 0) | 0;
   HEAP32[(HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[HEAP32[i6 >> 2] >> 2] << 3) >> 2] = i3;
   HEAP32[(HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[HEAP32[i6 >> 2] >> 2] << 3) + 4 >> 2] = HEAP32[(HEAP32[26872] | 0) + (HEAP32[i4 >> 2] << 3) + 4 >> 2];
   i3 = HEAP32[i6 >> 2] | 0;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _getfile(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i9 = i8 + 36 | 0;
 i10 = i8 + 32 | 0;
 i11 = i8 + 28 | 0;
 i12 = i8 + 24 | 0;
 i13 = i8 + 20 | 0;
 i14 = i8 + 16 | 0;
 i15 = i8 + 12 | 0;
 i16 = i8 + 8 | 0;
 i17 = i8 + 4 | 0;
 i18 = i8;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i18 >> 2] = 0;
 if (_text_locked() | 0) {
  HEAP32[i9 >> 2] = 1;
  i19 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i19 | 0;
 }
 if (_curbuf_locked() | 0) {
  HEAP32[i9 >> 2] = 1;
  i19 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i19 | 0;
 }
 if (!(HEAP32[i10 >> 2] | 0)) {
  _fname_expand(HEAP32[26773] | 0, i11, i12);
  HEAP32[i16 >> 2] = _otherfile(HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i18 >> 2] = HEAP32[i11 >> 2];
 } else HEAP32[i16 >> 2] = (HEAP32[i10 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0) & 1;
 if (HEAP32[i16 >> 2] | 0) HEAP32[26720] = (HEAP32[26720] | 0) + 1;
 if ((HEAP32[i16 >> 2] | 0) == 0 | (HEAP32[i15 >> 2] | 0) != 0) i7 = 18; else if ((HEAP32[(HEAP32[26773] | 0) + 56 >> 2] | 0) == 1) if (_buf_hide(HEAP32[26773] | 0) | 0) i7 = 18; else if (_curbufIsChanged() | 0) if (!(_autowrite(HEAP32[26773] | 0, HEAP32[i15 >> 2] | 0) | 0)) {
  if (HEAP32[i16 >> 2] | 0) HEAP32[26720] = (HEAP32[26720] | 0) + -1;
  _no_write_message();
  HEAP32[i17 >> 2] = 2;
 } else i7 = 18; else i7 = 18; else i7 = 18;
 do if ((i7 | 0) == 18) {
  if (HEAP32[i16 >> 2] | 0) HEAP32[26720] = (HEAP32[26720] | 0) + -1;
  if (HEAP32[i13 >> 2] | 0) _setpcmark();
  if (HEAP32[i16 >> 2] | 0) {
   i6 = HEAP32[i10 >> 2] | 0;
   i5 = HEAP32[i11 >> 2] | 0;
   i4 = HEAP32[i12 >> 2] | 0;
   i3 = HEAP32[i14 >> 2] | 0;
   i2 = (_buf_hide(HEAP32[26773] | 0) | 0) != 0;
   if ((_do_ecmd(i6, i5, i4, 0, i3, (i2 ? 1 : 0) + (HEAP32[i15 >> 2] | 0 ? 8 : 0) | 0, HEAP32[26881] | 0) | 0) == 1) {
    HEAP32[i17 >> 2] = -1;
    break;
   } else {
    HEAP32[i17 >> 2] = 1;
    break;
   }
  } else {
   if (HEAP32[i14 >> 2] | 0) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i14 >> 2];
   _check_cursor_lnum();
   _beginline(6);
   HEAP32[i17 >> 2] = 0;
   break;
  }
 } while (0);
 _vim_free(HEAP32[i18 >> 2] | 0);
 HEAP32[i9 >> 2] = HEAP32[i17 >> 2];
 i19 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i8;
 return i19 | 0;
}

function _set_option_default(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i12 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i12 >> 2] = (HEAP32[i6 >> 2] & 6 | 0) == 0 & 1;
 HEAP32[i8 >> 2] = _get_varp_scope(15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) | 0, HEAP32[i12 >> 2] | 0 ? 4 : HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 8 >> 2];
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i9 >> 2] = (HEAP32[i10 >> 2] & 1024 | 0 ? 1 : (HEAP32[i7 >> 2] | 0) != 0) ? 0 : 1;
 do if (HEAP32[i10 >> 2] & 4 | 0) {
  if (HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 16 >> 2] | 0) {
   i7 = HEAP32[i5 >> 2] | 0;
   _set_string_option_direct(0, i7 | 0, HEAP32[15328 + ((i7 | 0) * 28 | 0) + 20 + (HEAP32[i9 >> 2] << 2) >> 2] | 0, HEAP32[i6 >> 2] | 0, 0);
   break;
  }
  if (HEAP32[i6 >> 2] & 1 | 0) if (HEAP32[i10 >> 2] & 8 | 0) _free_string_option(HEAP32[HEAP32[i8 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 20 + (HEAP32[i9 >> 2] << 2) >> 2];
  i7 = 15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 8 | 0;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -9;
 } else {
  i7 = 15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) | 0;
  if (HEAP32[i10 >> 2] & 2 | 0) {
   if ((HEAP32[i7 + 16 >> 2] | 0) == 8197) {
    _win_comp_scroll(HEAP32[26881] | 0);
    break;
   }
   HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 20 + (HEAP32[i9 >> 2] << 2) >> 2];
   if (!(HEAP32[i12 >> 2] | 0)) break;
   i3 = HEAP32[HEAP32[i8 >> 2] >> 2] | 0;
   HEAP32[(_get_varp_scope(15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) | 0, 2) | 0) >> 2] = i3;
   break;
  }
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i7 + 20 + (HEAP32[i9 >> 2] << 2) >> 2];
  if ((HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 16 >> 2] | 0) == 16409) if (!(_getuid() | 0)) HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
  if (HEAP32[i12 >> 2] | 0) {
   i7 = HEAP32[HEAP32[i8 >> 2] >> 2] | 0;
   HEAP32[(_get_varp_scope(15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) | 0, 2) | 0) >> 2] = i7;
  }
 } while (0);
 HEAP32[i11 >> 2] = 15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 8;
 HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2] & -8388609;
 STACKTOP = i4;
 return;
}

function _ins_char_bytes(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 44 | 0;
 i5 = i3 + 40 | 0;
 i6 = i3 + 36 | 0;
 i7 = i3 + 32 | 0;
 i8 = i3 + 28 | 0;
 i9 = i3 + 24 | 0;
 i10 = i3 + 20 | 0;
 i11 = i3 + 16 | 0;
 i12 = i3 + 12 | 0;
 i13 = i3 + 8 | 0;
 i14 = i3 + 4 | 0;
 i15 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAPU8[HEAP32[i4 >> 2] >> 0];
 HEAP32[i14 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 HEAP32[i11 >> 2] = _ml_get(HEAP32[i14 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = (_strlen(HEAP32[i11 >> 2] | 0) | 0) + 1;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 L1 : do if (HEAP32[10180] & 64 | 0) {
  if (HEAPU8[(HEAP32[i11 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) >> 0] | 0) HEAP32[i8 >> 2] = 1;
  _replace_push(0);
  HEAP32[i15 >> 2] = 0;
  while (1) {
   if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break L1;
   _replace_push(HEAPU8[(HEAP32[i11 >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) + (HEAP32[i15 >> 2] | 0)) >> 0] | 0);
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i10 >> 2] = _alloc_check((HEAP32[i12 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i13 >> 2] | 0) > 0) _memmove(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
 if ((HEAP32[i12 >> 2] | 0) > ((HEAP32[i13 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0)) {
  i5 = HEAP32[i13 >> 2] | 0;
  i4 = HEAP32[i8 >> 2] | 0;
  _memmove((HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0, (HEAP32[i11 >> 2] | 0) + i5 + i4 | 0, (HEAP32[i12 >> 2] | 0) - i5 - i4 | 0) | 0;
 }
 HEAP8[HEAP32[i9 >> 2] >> 0] = HEAP32[i6 >> 2];
 HEAP32[i15 >> 2] = 1;
 while (1) {
  if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  i4 = HEAP32[i9 >> 2] | 0;
  i5 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i5 + 1;
  HEAP8[i4 + i5 >> 0] = 32;
 }
 _ml_replace(HEAP32[i14 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
 _changed_bytes(HEAP32[i14 >> 2] | 0, HEAP32[i13 >> 2] | 0);
 if (HEAP32[26987] | 0) if ((HEAP32[10180] & 16 | 0) != 0 & (HEAP32[26809] | 0) == 0) _showmatch(HEAP32[i6 >> 2] | 0);
 i6 = (HEAP32[26881] | 0) + 24 + 4 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 STACKTOP = i3;
 return;
}

function _getargopt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 2;
 HEAP32[i6 >> 2] = 0;
 if (_strncmp(HEAP32[i5 >> 2] | 0, 64313, 3) | 0) if (_strncmp(HEAP32[i5 >> 2] | 0, 46547, 5) | 0) {
  if (!(_strncmp(HEAP32[i5 >> 2] | 0, 46553, 4) | 0)) {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 80 >> 2] = 1;
   i1 = _skipwhite((HEAP32[i5 >> 2] | 0) + 4 | 0) | 0;
   HEAP32[HEAP32[i4 >> 2] >> 2] = i1;
   HEAP32[i3 >> 2] = 1;
   i7 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i7 | 0;
  }
  i1 = (_strncmp(HEAP32[i5 >> 2] | 0, 65773, 2) | 0) == 0;
  i8 = HEAP32[i5 >> 2] | 0;
  if (i1) {
   HEAP32[i5 >> 2] = i8 + 2;
   HEAP32[i6 >> 2] = (HEAP32[i4 >> 2] | 0) + 84;
  } else if (!(_strncmp(i8, 65762, 10) | 0)) {
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 10;
   HEAP32[i6 >> 2] = (HEAP32[i4 >> 2] | 0) + 84;
  }
  if (HEAP32[i6 >> 2] | 0) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 61) {
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   HEAP32[HEAP32[i6 >> 2] >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0);
   HEAP32[i5 >> 2] = _skip_cmd_arg(HEAP32[i5 >> 2] | 0, 0) | 0;
   i6 = _skipwhite(HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[HEAP32[i4 >> 2] >> 2] = i6;
   HEAP8[HEAP32[i5 >> 2] >> 0] = 0;
   if (!(_check_ff_value((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 84 >> 2] | 0) | 0) | 0)) {
    HEAP32[i3 >> 2] = 0;
    i7 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i7 | 0;
   } else {
    i6 = HEAP32[i4 >> 2] | 0;
    i8 = (HEAP32[i4 >> 2] | 0) + 84 | 0;
    HEAP32[i8 >> 2] = HEAPU8[(HEAP32[i6 + 8 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0];
    HEAP32[i3 >> 2] = 1;
    i7 = HEAP32[i3 >> 2] | 0;
    STACKTOP = i2;
    return i7 | 0;
   }
  }
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 110) {
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 2;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] = 2;
 } else HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] = 1;
 if (_checkforcmd(i5, 64702, 3) | 0) {
  i8 = _skipwhite(HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[HEAP32[i4 >> 2] >> 2] = i8;
  HEAP32[i3 >> 2] = 1;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 } else {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 return 0;
}

function _qsort(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i7 = i6 + 8 | 0;
 i8 = i6;
 i9 = Math_imul(i3, i2) | 0;
 i2 = i8;
 HEAP32[i2 >> 2] = 1;
 HEAP32[i2 + 4 >> 2] = 0;
 L1 : do if (i9 | 0) {
  i2 = 0 - i3 | 0;
  HEAP32[i7 + 4 >> 2] = i3;
  HEAP32[i7 >> 2] = i3;
  i10 = 2;
  i11 = i3;
  i12 = i3;
  while (1) {
   i13 = i11 + i3 + i12 | 0;
   HEAP32[i7 + (i10 << 2) >> 2] = i13;
   if (i13 >>> 0 < i9 >>> 0) {
    i14 = i12;
    i10 = i10 + 1 | 0;
    i12 = i13;
    i11 = i14;
   } else break;
  }
  i11 = i1 + i9 + i2 | 0;
  if (i11 >>> 0 > i1 >>> 0) {
   i12 = i11;
   i10 = 1;
   i14 = i1;
   i13 = 1;
   while (1) {
    do if ((i13 & 3 | 0) == 3) {
     _sift(i14, i3, i4, i10, i7);
     _shr(i8, 2);
     i15 = i10 + 2 | 0;
    } else {
     i16 = i10 + -1 | 0;
     if ((HEAP32[i7 + (i16 << 2) >> 2] | 0) >>> 0 < (i12 - i14 | 0) >>> 0) _sift(i14, i3, i4, i10, i7); else _trinkle(i14, i3, i4, i8, i10, 0, i7);
     if ((i10 | 0) == 1) {
      _shl(i8, 1);
      i15 = 0;
      break;
     } else {
      _shl(i8, i16);
      i15 = 1;
      break;
     }
    } while (0);
    i16 = HEAP32[i8 >> 2] | 1;
    HEAP32[i8 >> 2] = i16;
    i17 = i14 + i3 | 0;
    if (i17 >>> 0 < i11 >>> 0) {
     i10 = i15;
     i14 = i17;
     i13 = i16;
    } else {
     i18 = i15;
     i19 = i17;
     i20 = i16;
     break;
    }
   }
  } else {
   i18 = 1;
   i19 = i1;
   i20 = 1;
  }
  _trinkle(i19, i3, i4, i8, i18, 0, i7);
  i13 = i8 + 4 | 0;
  i14 = i19;
  i10 = i18;
  i11 = i20;
  while (1) {
   if ((i10 | 0) == 1 & (i11 | 0) == 1) if (!(HEAP32[i13 >> 2] | 0)) break L1; else i5 = 19; else if ((i10 | 0) < 2) i5 = 19; else {
    _shl(i8, 2);
    i12 = i10 + -2 | 0;
    HEAP32[i8 >> 2] = HEAP32[i8 >> 2] ^ 7;
    _shr(i8, 1);
    _trinkle(i14 + (0 - (HEAP32[i7 + (i12 << 2) >> 2] | 0)) + i2 | 0, i3, i4, i8, i10 + -1 | 0, 1, i7);
    _shl(i8, 1);
    i16 = HEAP32[i8 >> 2] | 1;
    HEAP32[i8 >> 2] = i16;
    i17 = i14 + i2 | 0;
    _trinkle(i17, i3, i4, i8, i12, 1, i7);
    i21 = i17;
    i22 = i12;
    i23 = i16;
   }
   if ((i5 | 0) == 19) {
    i5 = 0;
    i16 = _pntz(i8) | 0;
    _shr(i8, i16);
    i21 = i14 + i2 | 0;
    i22 = i16 + i10 | 0;
    i23 = HEAP32[i8 >> 2] | 0;
   }
   i14 = i21;
   i10 = i22;
   i11 = i23;
  }
 } while (0);
 STACKTOP = i6;
 return;
}

function _skip_regexp(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 20 | 0;
 i8 = i6 + 16 | 0;
 i9 = i6 + 12 | 0;
 i10 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 i12 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 if (HEAP32[i9 >> 2] | 0) HEAP32[i11 >> 2] = 3; else HEAP32[i11 >> 2] = 2;
 _get_cpo_flags();
 while (1) {
  if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) {
   i5 = 27;
   break;
  }
  if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0 | 0) == (HEAP32[i8 >> 2] | 0)) {
   i5 = 27;
   break;
  }
  do if ((HEAP32[i11 >> 2] | 0) >= 3 ? (HEAPU8[HEAP32[i12 >> 2] >> 0] | 0 | 0) == 91 : 0) i5 = 10; else {
   if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0 | 0) == 92) if ((HEAP32[i11 >> 2] | 0) <= 2 ? (HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0 | 0) == 91 : 0) {
    i5 = 10;
    break;
   }
   if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0 | 0) == 92) if (HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0 | 0) {
    do if ((HEAP32[i8 >> 2] | 0) == 63 & (HEAP32[i10 >> 2] | 0) != 0) if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0 | 0) == 63) {
     if (!(HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) {
      i9 = _vim_strsave(HEAP32[i7 >> 2] | 0) | 0;
      HEAP32[HEAP32[i10 >> 2] >> 2] = i9;
      if (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) HEAP32[i12 >> 2] = (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) - (HEAP32[i7 >> 2] | 0));
     }
     i9 = HEAP32[i12 >> 2] | 0;
     if (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) {
      i4 = (HEAP32[i12 >> 2] | 0) + 1 | 0;
      _memmove(i9 | 0, i4 | 0, (_strlen((HEAP32[i12 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
      break;
     } else {
      HEAP32[i12 >> 2] = i9 + 1;
      break;
     }
    } else i5 = 21; else i5 = 21; while (0);
    if ((i5 | 0) == 21) {
     i5 = 0;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0 | 0) == 118) {
     HEAP32[i11 >> 2] = 4;
     break;
    }
    if ((HEAPU8[HEAP32[i12 >> 2] >> 0] | 0 | 0) == 86) HEAP32[i11 >> 2] = 1;
   }
  } while (0);
  if ((i5 | 0) == 10) {
   i5 = 0;
   HEAP32[i12 >> 2] = _skip_anyof((HEAP32[i12 >> 2] | 0) + 1 | 0) | 0;
   if (!(HEAPU8[HEAP32[i12 >> 2] >> 0] | 0)) {
    i5 = 27;
    break;
   }
  }
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 27) {
  STACKTOP = i6;
  return HEAP32[i12 >> 2] | 0;
 }
 return 0;
}

function _paste_option_changed() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 i3 = (HEAP32[26240] | 0) != 0;
 if (!(HEAP32[26961] | 0)) {
  if (!i3) {
   i4 = HEAP32[26961] | 0;
   HEAP32[26240] = i4;
   STACKTOP = i1;
   return;
  }
  HEAP32[i2 >> 2] = HEAP32[26771];
  while (1) {
   if (!(HEAP32[i2 >> 2] | 0)) break;
   i5 = HEAP32[i2 >> 2] | 0;
   HEAP32[i5 + 708 >> 2] = HEAP32[i5 + 716 >> 2];
   i5 = HEAP32[i2 >> 2] | 0;
   HEAP32[i5 + 720 >> 2] = HEAP32[i5 + 728 >> 2];
   i5 = HEAP32[i2 >> 2] | 0;
   HEAP32[i5 + 688 >> 2] = HEAP32[i5 + 692 >> 2];
   i5 = HEAP32[i2 >> 2] | 0;
   HEAP32[i5 + 564 >> 2] = HEAP32[i5 + 568 >> 2];
   i5 = HEAP32[i2 >> 2] | 0;
   HEAP32[i5 + 608 >> 2] = HEAP32[i5 + 616 >> 2];
   HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2];
  }
  HEAP32[26987] = HEAP32[26241];
  HEAP32[26992] = HEAP32[26242];
  HEAP32[26243] = HEAP32[26244];
  HEAP32[26245] = HEAP32[26246];
  HEAP32[26247] = HEAP32[26248];
  HEAP32[26249] = HEAP32[26250];
  HEAP32[26251] = HEAP32[26252];
  i4 = HEAP32[26961] | 0;
  HEAP32[26240] = i4;
  STACKTOP = i1;
  return;
 }
 if (!i3) {
  HEAP32[i2 >> 2] = HEAP32[26771];
  while (1) {
   if (!(HEAP32[i2 >> 2] | 0)) break;
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i3 + 716 >> 2] = HEAP32[i3 + 708 >> 2];
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i3 + 728 >> 2] = HEAP32[i3 + 720 >> 2];
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i3 + 692 >> 2] = HEAP32[i3 + 688 >> 2];
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i3 + 568 >> 2] = HEAP32[i3 + 564 >> 2];
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i3 + 616 >> 2] = HEAP32[i3 + 608 >> 2];
   HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2];
  }
  HEAP32[26241] = HEAP32[26987];
  HEAP32[26242] = HEAP32[26992];
  HEAP32[26244] = HEAP32[26243];
  HEAP32[26246] = HEAP32[26245];
  HEAP32[26248] = HEAP32[26247];
  HEAP32[26250] = HEAP32[26249];
  HEAP32[26252] = HEAP32[26251];
 }
 HEAP32[i2 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i2 >> 2] | 0)) break;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 708 >> 2] = 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 720 >> 2] = 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 688 >> 2] = 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 564 >> 2] = 0;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 608 >> 2] = 0;
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2];
 }
 HEAP32[26987] = 0;
 HEAP32[26992] = 0;
 HEAP32[26249] = 0;
 HEAP32[26251] = 0;
 HEAP32[26247] = 0;
 HEAP32[26243] = 0;
 i4 = HEAP32[26961] | 0;
 HEAP32[26240] = i4;
 STACKTOP = i1;
 return;
}

function _tgoto(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 78917;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 HEAP32[i12 >> 2] = 113194;
 HEAP32[i11 >> 2] = 113165;
 L5 : while (1) {
  if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i12 >> 2] | 0) >>> 0) {
   i4 = 17;
   break;
  }
  if (!(HEAP8[HEAP32[i7 >> 2] >> 0] | 0)) {
   i4 = 17;
   break;
  }
  i3 = HEAP32[i7 >> 2] | 0;
  L9 : do if ((HEAP8[HEAP32[i7 >> 2] >> 0] | 0) != 37) {
   i2 = HEAP8[i3 >> 0] | 0;
   i1 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i2;
  } else {
   i2 = i3 + 1 | 0;
   HEAP32[i7 >> 2] = i2;
   switch (HEAP8[i2 >> 0] | 0) {
   case 100:
    {
     HEAP32[i10 >> 2] = _tltoa(HEAP32[i9 >> 2] | 0) | 0;
     HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
     while (1) {
      if (!(HEAP8[HEAP32[i10 >> 2] >> 0] | 0)) break L9;
      i2 = HEAP32[i10 >> 2] | 0;
      HEAP32[i10 >> 2] = i2 + 1;
      i1 = HEAP8[i2 >> 0] | 0;
      i2 = HEAP32[i11 >> 2] | 0;
      HEAP32[i11 >> 2] = i2 + 1;
      HEAP8[i2 >> 0] = i1;
     }
     break;
    }
   case 105:
    {
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     break L9;
     break;
    }
   case 43:
    {
     i1 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
     HEAP32[i7 >> 2] = i1;
     i2 = (HEAP8[i1 >> 0] | 0) + (HEAP32[i9 >> 2] | 0) & 255;
     i1 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i2;
     HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
     break L9;
     break;
    }
   case 37:
    {
     i2 = HEAP8[HEAP32[i7 >> 2] >> 0] | 0;
     i1 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i2;
     break L9;
     break;
    }
   default:
    {
     i4 = 15;
     break L5;
    }
   }
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 15) {
  HEAP32[i6 >> 2] = 78917;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else if ((i4 | 0) == 17) {
  HEAP8[HEAP32[i11 >> 2] >> 0] = 0;
  HEAP32[i6 >> 2] = 113165;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 return 0;
}

function _cmdline_paste(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i4 + 84 | 0;
 i6 = i4 + 80 | 0;
 i7 = i4 + 76 | 0;
 i8 = i4 + 72 | 0;
 i9 = i4 + 68 | 0;
 i10 = i4 + 64 | 0;
 i11 = i4 + 60 | 0;
 i12 = i4 + 56 | 0;
 i13 = i4 + 8 | 0;
 i14 = i4 + 4 | 0;
 i15 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if ((HEAP32[i6 >> 2] | 0) != 6 & (HEAP32[i6 >> 2] | 0) != 16 & (HEAP32[i6 >> 2] | 0) != 23 & (HEAP32[i6 >> 2] | 0) != 1 & (HEAP32[i6 >> 2] | 0) != 12) if (!(_valid_yank_reg(HEAP32[i6 >> 2] | 0, 0) | 0)) {
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 _line_breakcheck();
 if (HEAP32[26834] | 0) {
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 HEAP32[i6 >> 2] = _may_get_selection(HEAP32[i6 >> 2] | 0) | 0;
 _save_cmdline(i13);
 HEAP32[26784] = (HEAP32[26784] | 0) + 1;
 HEAP32[i9 >> 2] = _get_spec_reg(HEAP32[i6 >> 2] | 0, i10, i12, 1) | 0;
 HEAP32[26784] = (HEAP32[26784] | 0) + -1;
 _restore_cmdline(i13);
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i5 >> 2] = _cmdline_paste_reg(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 HEAP32[i11 >> 2] = HEAP32[i10 >> 2];
 do if ((HEAP32[26934] | 0) != 0 & (HEAP32[i6 >> 2] | 0) == 23) {
  HEAP32[i14 >> 2] = (HEAP32[25236] | 0) + (HEAP32[25239] | 0);
  while (1) {
   if ((HEAP32[i14 >> 2] | 0) >>> 0 <= (HEAP32[25236] | 0) >>> 0) break;
   if (!(_vim_iswordc(HEAPU8[(HEAP32[i14 >> 2] | 0) + -1 >> 0] | 0) | 0)) break;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
  }
  HEAP32[i15 >> 2] = (HEAP32[25236] | 0) + (HEAP32[25239] | 0) - (HEAP32[i14 >> 2] | 0);
  i8 = HEAP32[i14 >> 2] | 0;
  i9 = HEAP32[i10 >> 2] | 0;
  i13 = HEAP32[i15 >> 2] | 0;
  if (HEAP32[26933] | 0) {
   if (_strncasecmp(i8, i9, i13) | 0) break;
  } else if (_strncmp(i8, i9, i13) | 0) break;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i15 >> 2] | 0);
 } while (0);
 _cmdline_paste_str(HEAP32[i11 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 if (HEAP32[i12 >> 2] | 0) _vim_free(HEAP32[i10 >> 2] | 0);
 HEAP32[i5 >> 2] = 1;
 i16 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i16 | 0;
}

function _do_argfile(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 188 >> 2];
 if ((HEAP32[i5 >> 2] | 0) >= 0) if ((HEAP32[i5 >> 2] | 0) < (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
  _setpcmark();
  HEAP32[26757] = 1;
  do if (HEAP32[27129] | 0 ? 1 : (HEAPU8[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] >> 0] | 0) == 115) if (!(_win_split(0, 0) | 0)) {
   STACKTOP = i3;
   return;
  } else {
   HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] = 0;
   HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] = 0;
   break;
  } else {
   HEAP32[i6 >> 2] = 1;
   if (_buf_hide(HEAP32[26773] | 0) | 0) {
    HEAP32[i7 >> 2] = _fix_fname(_alist_name((HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i5 >> 2] << 3) | 0) | 0) | 0;
    HEAP32[i6 >> 2] = _otherfile(HEAP32[i7 >> 2] | 0) | 0;
    _vim_free(HEAP32[i7 >> 2] | 0);
   }
   i2 = (_buf_hide(HEAP32[26773] | 0) | 0) != 0;
   if (!(i2 & (HEAP32[i6 >> 2] | 0) != 0)) if (_check_changed(HEAP32[26773] | 0, 1 | (HEAP32[i6 >> 2] | 0 ? 0 : 2) | (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0 ? 4 : 0) | 16) | 0) {
    STACKTOP = i3;
    return;
   }
  } while (0);
  HEAP32[(HEAP32[26881] | 0) + 188 >> 2] = HEAP32[i5 >> 2];
  if ((HEAP32[i5 >> 2] | 0) == ((HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) - 1 | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) == 107472) HEAP32[26776] = 1;
  i6 = HEAP32[26881] | 0;
  i7 = _alist_name((HEAP32[(HEAP32[i6 + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i6 + 188 >> 2] << 3) | 0) | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  i2 = (_buf_hide(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) | 0) != 0;
  if (!(_do_ecmd(0, i7, 0, i6, -1, (i2 ? 1 : 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0 ? 8 : 0) | 0, HEAP32[26881] | 0) | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 188 >> 2] = HEAP32[i8 >> 2];
   STACKTOP = i3;
   return;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 10) {
   STACKTOP = i3;
   return;
  }
  _setmark(39) | 0;
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) <= 1) {
  _emsg(45163) | 0;
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) < 0) {
  _emsg(45200) | 0;
  STACKTOP = i3;
  return;
 } else {
  _emsg(45234) | 0;
  STACKTOP = i3;
  return;
 }
}

function _del_bytes(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 44 | 0;
 i6 = i4 + 40 | 0;
 i7 = i4 + 36 | 0;
 i8 = i4 + 28 | 0;
 i9 = i4 + 24 | 0;
 i10 = i4 + 20 | 0;
 i11 = i4 + 16 | 0;
 i12 = i4 + 12 | 0;
 i13 = i4 + 8 | 0;
 i14 = i4 + 4 | 0;
 i15 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i4 + 32 >> 2] = i3;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 HEAP32[i15 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i8 >> 2] = _ml_get(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = _strlen(HEAP32[i8 >> 2] | 0) | 0;
 if ((HEAP32[i12 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 1;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) < 1) {
  _iemsgn(59857, HEAP32[i6 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 HEAP32[i14 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) + 1;
 if ((HEAP32[i14 >> 2] | 0) <= 1) {
  if ((HEAP32[i12 >> 2] | 0) > 0 & (HEAP32[i15 >> 2] | 0) != 0 & (HEAP32[26806] | 0) == 0) {
   i15 = (HEAP32[26881] | 0) + 24 + 4 | 0;
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  }
  HEAP32[i6 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
  HEAP32[i14 >> 2] = 1;
 }
 HEAP32[i13 >> 2] = _ml_line_alloced() | 0;
 do if (HEAP32[i13 >> 2] | 0) HEAP32[i9 >> 2] = HEAP32[i8 >> 2]; else {
  HEAP32[i9 >> 2] = _alloc((HEAP32[i10 >> 2] | 0) + 1 - (HEAP32[i6 >> 2] | 0) | 0) | 0;
  if (HEAP32[i9 >> 2] | 0) {
   _memmove(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
   break;
  }
  HEAP32[i5 >> 2] = 0;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 } while (0);
 i10 = HEAP32[i12 >> 2] | 0;
 _memmove((HEAP32[i9 >> 2] | 0) + i10 | 0, (HEAP32[i8 >> 2] | 0) + i10 + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i14 >> 2] | 0) | 0;
 if (!(HEAP32[i13 >> 2] | 0)) _ml_replace(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0;
 _changed_bytes(HEAP32[i11 >> 2] | 0, HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
 HEAP32[i5 >> 2] = 1;
 i16 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i16 | 0;
}

function _put_on_cmdline(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[i6 >> 2] | 0) < 0) HEAP32[i6 >> 2] = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 if (((HEAP32[25238] | 0) + (HEAP32[i6 >> 2] | 0) + 1 | 0) >= (HEAP32[25237] | 0)) HEAP32[i8 >> 2] = _realloc_cmdbuff((HEAP32[25238] | 0) + (HEAP32[i6 >> 2] | 0) + 1 | 0) | 0; else HEAP32[i8 >> 2] = 1;
 L8 : do if ((HEAP32[i8 >> 2] | 0) == 1) {
  if (HEAP32[25245] | 0) {
   if (((HEAP32[25239] | 0) + (HEAP32[i6 >> 2] | 0) | 0) > (HEAP32[25238] | 0)) HEAP32[25238] = (HEAP32[25239] | 0) + (HEAP32[i6 >> 2] | 0);
  } else {
   i3 = (HEAP32[25236] | 0) + (HEAP32[25239] | 0) | 0;
   i2 = HEAP32[25239] | 0;
   _memmove(i3 + (HEAP32[i6 >> 2] | 0) | 0, i3 | 0, (HEAP32[25238] | 0) - i2 | 0) | 0;
   HEAP32[25238] = (HEAP32[25238] | 0) + (HEAP32[i6 >> 2] | 0);
  }
  _memmove((HEAP32[25236] | 0) + (HEAP32[25239] | 0) | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
  HEAP8[(HEAP32[25236] | 0) + (HEAP32[25238] | 0) >> 0] = 0;
  if (!((HEAP32[i7 >> 2] | 0) == 0 | (HEAP32[26811] | 0) != 0)) {
   HEAP32[26730] = 1;
   HEAP32[i9 >> 2] = HEAP32[26876];
   _cursorcmd();
   i2 = HEAP32[25239] | 0;
   _draw_cmdline(i2 | 0, (HEAP32[25238] | 0) - i2 | 0);
   if (HEAP32[25245] | 0 ? 1 : (HEAP32[26876] | 0) != (HEAP32[i9 >> 2] | 0)) _msg_clr_eos();
   HEAP32[26730] = 0;
  }
  if (HEAP32[27161] | 0) {
   i2 = Math_imul(HEAP32[10174] | 0, HEAP32[10173] | 0) | 0;
   HEAP32[i10 >> 2] = i2;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) < 0 ? 2147483647 : i2;
  } else HEAP32[i10 >> 2] = 2147483647;
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break L8;
   HEAP32[i11 >> 2] = _cmdline_charsize(HEAP32[25239] | 0) | 0;
   if (((HEAP32[25240] | 0) + (HEAP32[i11 >> 2] | 0) | 0) < (HEAP32[i10 >> 2] | 0)) HEAP32[25240] = (HEAP32[25240] | 0) + (HEAP32[i11 >> 2] | 0);
   HEAP32[25239] = (HEAP32[25239] | 0) + 1;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
 } while (0);
 if (!(HEAP32[i7 >> 2] | 0)) {
  i12 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 _msg_check();
 i12 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i4;
 return i12 | 0;
}

function _mf_hash_grow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 36 | 0;
 i4 = i2 + 32 | 0;
 i5 = i2 + 28 | 0;
 i6 = i2 + 24 | 0;
 i7 = i2 + 20 | 0;
 i8 = i2 + 16 | 0;
 i9 = i2 + 8 | 0;
 i10 = i2 + 4 | 0;
 i11 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i11 >> 2] = (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 1 << 1 << 2;
 HEAP32[i10 >> 2] = _lalloc_clear(HEAP32[i11 >> 2] | 0, 0) | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i12 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i12 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if (!((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) >>> (HEAP32[i7 >> 2] | 0))) break;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >>> 0 > (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) >>> 0) break;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i5 >> 2] << 2) >> 2];
  while (1) {
   if (!(HEAP32[i8 >> 2] | 0)) break;
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] >> HEAP32[i7 >> 2] & 1;
   i11 = HEAP32[i8 >> 2] | 0;
   if (!(HEAP32[i9 + (HEAP32[i6 >> 2] << 2) >> 2] | 0)) {
    HEAP32[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] << HEAP32[i7 >> 2]) << 2) >> 2] = i11;
    HEAP32[i9 + (HEAP32[i6 >> 2] << 2) >> 2] = HEAP32[i8 >> 2];
    HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = 0;
   } else {
    HEAP32[HEAP32[i9 + (HEAP32[i6 >> 2] << 2) >> 2] >> 2] = i11;
    HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = HEAP32[i9 + (HEAP32[i6 >> 2] << 2) >> 2];
    HEAP32[i9 + (HEAP32[i6 >> 2] << 2) >> 2] = HEAP32[i8 >> 2];
   }
   HEAP32[i8 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
  }
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >>> 0 >= 2) break;
   if (HEAP32[i9 + (HEAP32[i6 >> 2] << 2) >> 2] | 0) HEAP32[HEAP32[i9 + (HEAP32[i6 >> 2] << 2) >> 2] >> 2] = 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) != ((HEAP32[i4 >> 2] | 0) + 12 | 0)) _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = HEAP32[i10 >> 2];
 HEAP32[HEAP32[i4 >> 2] >> 2] = ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 1 << 1) - 1;
 HEAP32[i3 >> 2] = 1;
 i12 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i12 | 0;
}

function _alist_add_list(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i10 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2];
 if ((_ga_grow(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) != 1) {
  HEAP32[i9 >> 2] = 0;
  while (1) {
   if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
   _vim_free(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0);
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  }
  HEAP32[i5 >> 2] = -1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 if ((HEAP32[i8 >> 2] | 0) < 0) HEAP32[i8 >> 2] = 0;
 if ((HEAP32[i8 >> 2] | 0) > (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) HEAP32[i8 >> 2] = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2];
 if ((HEAP32[i8 >> 2] | 0) < (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
  i3 = HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0;
  i2 = (HEAP32[26881] | 0) + 184 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  _memmove(i3 + (i1 + (HEAP32[i6 >> 2] | 0) << 3) | 0, i3 + (HEAP32[i8 >> 2] << 3) | 0, (HEAP32[HEAP32[i2 >> 2] >> 2] | 0) - i1 << 3 | 0) | 0;
 }
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  HEAP32[(HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) << 3) >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2];
  i1 = _buflist_add(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0, 3) | 0;
  HEAP32[(HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) << 3) + 4 >> 2] = i1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 i9 = HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 if ((HEAP32[i10 >> 2] | 0) > 0) if ((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
  i10 = (HEAP32[26881] | 0) + 188 | 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 }
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _searchc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 36 | 0;
 i6 = i4 + 32 | 0;
 i7 = i4 + 28 | 0;
 i8 = i4 + 24 | 0;
 i9 = i4 + 20 | 0;
 i10 = i4 + 16 | 0;
 i11 = i4 + 12 | 0;
 i12 = i4 + 8 | 0;
 i13 = i4 + 4 | 0;
 i14 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2];
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2];
 HEAP32[i14 >> 2] = 1;
 if (HEAP32[i8 >> 2] | 0) {
  if (!(HEAP32[27162] | 0)) {
   HEAP8[115216] = HEAP32[i8 >> 2];
   _set_csearch_direction(HEAP32[i9 >> 2] | 0);
   _set_csearch_until(HEAP32[i7 >> 2] | 0);
  }
 } else {
  if (!(HEAPU8[115216] | 0)) {
   HEAP32[i5 >> 2] = 0;
   i15 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i15 | 0;
  }
  i2 = HEAP32[7530] | 0;
  if (HEAP32[i9 >> 2] | 0) HEAP32[i9 >> 2] = 0 - i2; else HEAP32[i9 >> 2] = i2;
  HEAP32[i7 >> 2] = HEAP32[7531];
  HEAP32[i8 >> 2] = HEAPU8[115216];
  i2 = (_vim_strchr(HEAP32[26904] | 0, 59) | 0) == 0;
  if (i2 & (HEAP32[i10 >> 2] | 0) == 1 & (HEAP32[i7 >> 2] | 0) != 0) HEAP32[i14 >> 2] = 0;
 }
 i2 = (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 20 | 0;
 if ((HEAP32[i9 >> 2] | 0) == -1) HEAP32[i2 >> 2] = 0; else HEAP32[i2 >> 2] = 1;
 HEAP32[i12 >> 2] = _ml_get_curline() | 0;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 HEAP32[i13 >> 2] = _strlen(HEAP32[i12 >> 2] | 0) | 0;
 L19 : while (1) {
  i2 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i2 + -1;
  if (!i2) break;
  while (1) {
   i2 = (HEAP32[i11 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0;
   HEAP32[i11 >> 2] = i2;
   if ((i2 | 0) < 0) {
    i3 = 19;
    break L19;
   }
   if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i13 >> 2] | 0)) {
    i3 = 19;
    break L19;
   }
   if (HEAP32[i14 >> 2] | 0 ? (HEAPU8[(HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] | 0 | 0) == (HEAP32[i8 >> 2] | 0) : 0) break;
   HEAP32[i14 >> 2] = 1;
  }
 }
 if ((i3 | 0) == 19) {
  HEAP32[i5 >> 2] = 0;
  i15 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 if (HEAP32[i7 >> 2] | 0) HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i5 >> 2] = 1;
 i15 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i15 | 0;
}

function _highlight_list_one(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = (HEAP32[26490] | 0) + (((HEAP32[i3 >> 2] | 0) - 1 | 0) * 96 | 0);
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 1, HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0, 0, 78891) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 2, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0, 77359) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 2, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0, 77365) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 1, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, 0, 77370) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 3, HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0, 0, 77376) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 3, HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0, 0, 77384) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 1, HEAP32[(HEAP32[i4 >> 2] | 0) + 72 >> 2] | 0, 0, 78977) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 2, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, 77392) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 2, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 80 >> 2] | 0, 77398) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 2, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 84 >> 2] | 0, 77404) | 0;
 HEAP32[i5 >> 2] = _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 2, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 64 >> 2] | 0, 77410) | 0;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) if (!(HEAP32[26834] | 0)) {
  _syn_list_header(HEAP32[i5 >> 2] | 0, 9999, HEAP32[i3 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = 1;
  _msg_puts_attr(77415, HEAP32[27051] | 0);
  _msg_putchar(32);
  i4 = HEAP32[26490] | 0;
  _msg_outtrans(HEAP32[i4 + (((HEAP32[i4 + (((HEAP32[i3 >> 2] | 0) - 1 | 0) * 96 | 0) + 88 >> 2] | 0) - 1 | 0) * 96 | 0) >> 2] | 0) | 0;
 }
 if (HEAP32[i5 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 _highlight_list_arg(HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, 2, 0, 77424, 114072) | 0;
 STACKTOP = i2;
 return;
}

function _pop_arg(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 L1 : do if (i2 >>> 0 <= 20) do switch (i2 | 0) {
 case 9:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   HEAP32[i1 >> 2] = i5;
   break L1;
   break;
  }
 case 10:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i5 = i1;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   i4 = i1;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i5 = i4;
   i6 = HEAP32[i5 >> 2] | 0;
   i7 = HEAP32[i5 + 4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 8;
   i4 = i1;
   HEAP32[i4 >> 2] = i6;
   HEAP32[i4 + 4 >> 2] = i7;
   break L1;
   break;
  }
 case 13:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = i7 + 4;
   i7 = (i4 & 65535) << 16 >> 16;
   i4 = i1;
   HEAP32[i4 >> 2] = i7;
   HEAP32[i4 + 4 >> 2] = ((i7 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = i7 + 4;
   i7 = i1;
   HEAP32[i7 >> 2] = i4 & 65535;
   HEAP32[i7 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = i7 + 4;
   i7 = (i4 & 255) << 24 >> 24;
   i4 = i1;
   HEAP32[i4 >> 2] = i7;
   HEAP32[i4 + 4 >> 2] = ((i7 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 >> 2] = i7 + 4;
   i7 = i1;
   HEAP32[i7 >> 2] = i4 & 255;
   HEAP32[i7 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d8 = +HEAPF64[i7 >> 3];
   HEAP32[i3 >> 2] = i7 + 8;
   HEAPF64[i1 >> 3] = d8;
   break L1;
   break;
  }
 case 18:
  {
   i7 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d8 = +HEAPF64[i7 >> 3];
   HEAP32[i3 >> 2] = i7 + 8;
   HEAPF64[i1 >> 3] = d8;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _ml_setname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 i7 = i3 + 40 | 0;
 i8 = i3 + 36 | 0;
 i9 = i3 + 32 | 0;
 i10 = i3 + 28 | 0;
 i11 = i3 + 24 | 0;
 i12 = i3 + 20 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) < 0) {
  if ((HEAP32[26879] | 0) == 0 | (HEAP32[27135] | 0) != 0) {
   STACKTOP = i3;
   return;
  }
  _ml_open_file(HEAP32[i7 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 HEAP32[i11 >> 2] = HEAP32[26906];
 while (1) {
  if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) break;
  HEAP32[i10 >> 2] = _findswapname(HEAP32[i7 >> 2] | 0, i11, HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
  if (!(HEAP32[i11 >> 2] | 0)) break;
  if (!(HEAP32[i10 >> 2] | 0)) continue;
  if (!(_vim_fnamecmp(HEAP32[i10 >> 2] | 0, HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0)) {
   i2 = 10;
   break;
  }
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) >= 0) {
   _close(HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) | 0;
   HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = -1;
  }
  if (!(_vim_rename(HEAP32[HEAP32[i9 >> 2] >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
   i2 = 14;
   break;
  }
  _vim_free(HEAP32[i10 >> 2] | 0);
 }
 if ((i2 | 0) == 10) {
  _vim_free(HEAP32[i10 >> 2] | 0);
  HEAP32[i8 >> 2] = 1;
 } else if ((i2 | 0) == 14) {
  HEAP32[i8 >> 2] = 1;
  _vim_free(HEAP32[HEAP32[i9 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i10 >> 2];
  _vim_free(HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0);
  _mf_set_ffname(HEAP32[i9 >> 2] | 0);
  _ml_upd_block0(HEAP32[i7 >> 2] | 0, 1);
 }
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) == -1) {
  i7 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  HEAP32[i6 >> 2] = 0;
  i10 = _open(i7, 2, i6) | 0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = i10;
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) < 0) {
   _emsg(56719) | 0;
   STACKTOP = i3;
   return;
  }
  HEAP32[i12 >> 2] = _fcntl(HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0, 1, i5) | 0;
  if ((HEAP32[i12 >> 2] | 0) >= 0) if (!(HEAP32[i12 >> 2] & 1)) {
   i5 = HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i12 >> 2] | 1;
   _fcntl(i5, 2, i4) | 0;
  }
 }
 if (HEAP32[i8 >> 2] | 0) {
  STACKTOP = i3;
  return;
 }
 _emsg(56753) | 0;
 STACKTOP = i3;
 return;
}

function _expand_sfile(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 i12 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i8 >> 2] = _vim_strsave(HEAP32[i5 >> 2] | 0) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i13 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i13 | 0;
 }
 HEAP32[i12 >> 2] = HEAP32[i8 >> 2];
 while (1) {
  if (!(HEAP8[HEAP32[i12 >> 2] >> 0] | 0)) {
   i2 = 17;
   break;
  }
  i5 = (_strncmp(HEAP32[i12 >> 2] | 0, 46503, 7) | 0) != 0;
  i1 = HEAP32[i12 >> 2] | 0;
  if (i5) HEAP32[i12 >> 2] = i1 + 1; else {
   HEAP32[i10 >> 2] = _eval_vars(i1, HEAP32[i8 >> 2] | 0, i11, 0, i6, 0) | 0;
   if (HEAP32[i6 >> 2] | 0) {
    i2 = 8;
    break;
   }
   if (!(HEAP32[i10 >> 2] | 0)) {
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
    continue;
   }
   i1 = _strlen(HEAP32[i8 >> 2] | 0) | 0;
   i5 = i1 - (HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = i5 + (_strlen(HEAP32[i10 >> 2] | 0) | 0) + 1;
   HEAP32[i9 >> 2] = _alloc(HEAP32[i7 >> 2] | 0) | 0;
   if (!(HEAP32[i9 >> 2] | 0)) {
    i2 = 14;
    break;
   }
   i5 = HEAP32[i8 >> 2] | 0;
   _memmove(HEAP32[i9 >> 2] | 0, i5 | 0, (HEAP32[i12 >> 2] | 0) - i5 | 0) | 0;
   _strcpy((HEAP32[i9 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) - (HEAP32[i8 >> 2] | 0)) | 0, HEAP32[i10 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = _strlen(HEAP32[i9 >> 2] | 0) | 0;
   _strcat(HEAP32[i9 >> 2] | 0, (HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0) | 0;
   _vim_free(HEAP32[i10 >> 2] | 0);
   _vim_free(HEAP32[i8 >> 2] | 0);
   HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i12 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
  }
 }
 if ((i2 | 0) == 8) {
  if (HEAP8[HEAP32[i6 >> 2] >> 0] | 0) _emsg(HEAP32[i6 >> 2] | 0) | 0;
  _vim_free(HEAP32[i8 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i13 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i13 | 0;
 } else if ((i2 | 0) == 14) {
  _vim_free(HEAP32[i10 >> 2] | 0);
  _vim_free(HEAP32[i8 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i13 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i13 | 0;
 } else if ((i2 | 0) == 17) {
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  i13 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i13 | 0;
 }
 return 0;
}

function _screen_start_highlight(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3 + 12 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[26455] = HEAP32[i5 >> 2];
 if (!(HEAP32[26781] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[26627] | 0) {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  _sprintf(i7, 74380, i4) | 0;
  _out_str(i7);
  STACKTOP = i3;
  return;
 }
 do if ((HEAP32[i5 >> 2] | 0) > 255) {
  i7 = HEAP32[i5 >> 2] | 0;
  if ((HEAP32[26734] | 0) > 1) HEAP32[i6 >> 2] = _syn_cterm_attr2entry(i7) | 0; else HEAP32[i6 >> 2] = _syn_term_attr2entry(i7) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) {
   HEAP32[i5 >> 2] = 0;
   break;
  } else {
   HEAP32[i5 >> 2] = HEAP16[HEAP32[i6 >> 2] >> 1];
   break;
  }
 } while (0);
 if (HEAP32[i5 >> 2] & 2 | 0) if (HEAPU8[HEAP32[26540] >> 0] | 0) _out_str(HEAP32[26540] | 0); else i2 = 14; else i2 = 14;
 if ((i2 | 0) == 14) if ((HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[26742] | 0) != 0 & (HEAP32[26734] | 0) > 1) if (HEAPU16[(HEAP32[i6 >> 2] | 0) + 4 >> 1] | 0) _out_str(HEAP32[26538] | 0);
 if (HEAP32[i5 >> 2] & 32 | 0) if (HEAPU8[HEAP32[26542] >> 0] | 0) _out_str(HEAP32[26542] | 0);
 if (HEAP32[i5 >> 2] & 16 | 0) if (HEAPU8[HEAP32[26548] >> 0] | 0) _out_str(HEAP32[26548] | 0);
 if (HEAP32[i5 >> 2] & 8 | 0) i2 = 26; else if (HEAP32[i5 >> 2] & 16 | 0) if (!(HEAPU8[HEAP32[26548] >> 0] | 0)) i2 = 26;
 if ((i2 | 0) == 26) if (HEAPU8[HEAP32[26546] >> 0] | 0) _out_str(HEAP32[26546] | 0);
 if (HEAP32[i5 >> 2] & 4 | 0) if (HEAPU8[HEAP32[26543] >> 0] | 0) _out_str(HEAP32[26543] | 0);
 if (HEAP32[i5 >> 2] & 1 | 0) if (HEAPU8[HEAP32[26539] >> 0] | 0) _out_str(HEAP32[26539] | 0);
 if (HEAP32[i5 >> 2] & 128 | 0) if (HEAPU8[HEAP32[26550] >> 0] | 0) _out_str(HEAP32[26550] | 0);
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26734] | 0) > 1) if (HEAP16[(HEAP32[i6 >> 2] | 0) + 4 >> 1] | 0) _term_fg_color((HEAPU16[(HEAP32[i6 >> 2] | 0) + 4 >> 1] | 0) - 1 | 0);
 if ((HEAP32[26734] | 0) > 1) if (HEAP16[(HEAP32[i6 >> 2] | 0) + 4 + 2 >> 1] | 0) _term_bg_color((HEAPU16[(HEAP32[i6 >> 2] | 0) + 4 + 2 >> 1] | 0) - 1 | 0);
 if ((HEAP32[26734] | 0) > 1) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _out_str(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _is_one_char(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i6 = i5 + 212 | 0;
 i7 = i5 + 208 | 0;
 i8 = i5 + 204 | 0;
 i9 = i5 + 200 | 0;
 i10 = i5 + 196 | 0;
 i11 = i5 + 24 | 0;
 i12 = i5 + 20 | 0;
 i13 = i5 + 16 | 0;
 i14 = i5 + 8 | 0;
 i15 = i5 + 4 | 0;
 i16 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = -1;
 HEAP32[i15 >> 2] = HEAP32[27045];
 HEAP32[i16 >> 2] = 0;
 if (!(HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[30064 + ((HEAP32[26465] | 0) * 28 | 0) >> 2];
 if (!(_search_regcomp(HEAP32[i7 >> 2] | 0, 0, 0, 1024, i11) | 0)) {
  HEAP32[i6 >> 2] = -1;
  i17 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i17 | 0;
 }
 HEAP32[i11 + 4 + 4 >> 2] = -1;
 if (HEAP32[i8 >> 2] | 0) {
  HEAP32[i14 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
 } else {
  i8 = HEAP32[i9 >> 2] | 0;
  HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i16 >> 2] = 256;
 }
 if (_searchit(HEAP32[26881] | 0, HEAP32[26773] | 0, i14, HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1, 1024 + (HEAP32[i16 >> 2] | 0) | 0, 0, 0, 0, 0) | 0) {
  HEAP32[27045] = 0;
  do {
   i16 = i11 + 4 + 4 | 0;
   i7 = i16 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   HEAP32[i12 >> 2] = _vim_regexec_multi(i11, HEAP32[26881] | 0, HEAP32[26773] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i16 >> 2] | 0, 0, 0) | 0;
   if (!(HEAP32[i12 >> 2] | 0)) break;
   i16 = HEAP32[i11 + 4 + 4 >> 2] | 0;
   i7 = HEAP32[i14 + 4 >> 2] | 0;
  } while ((((HEAP32[i10 >> 2] | 0) == 1 ? (i16 | 0) < (i7 | 0) & 1 : (i16 | 0) > (i7 | 0) & 1) | 0) != 0);
  if (!(HEAP32[27045] | 0)) {
   if (HEAP32[i12 >> 2] | 0) if ((HEAP32[i11 + 4 >> 2] | 0) == (HEAP32[i11 + 84 >> 2] | 0)) i18 = (HEAP32[i11 + 4 + 4 >> 2] | 0) == (HEAP32[i11 + 84 + 4 >> 2] | 0); else i18 = 0; else i18 = 0;
   HEAP32[i13 >> 2] = i18 & 1;
   if (!(HEAP32[i13 >> 2] | 0)) if ((_inc(i14) | 0) >= 0) if ((HEAP32[i14 + 4 >> 2] | 0) == (HEAP32[i11 + 84 + 4 >> 2] | 0)) HEAP32[i13 >> 2] = 1;
  }
 }
 HEAP32[27045] = HEAP32[27045] | HEAP32[i15 >> 2];
 _vim_regfree(HEAP32[i11 >> 2] | 0);
 HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 i17 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i17 | 0;
}

function _find_rawstring_end(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 36 | 0;
 i7 = i5 + 32 | 0;
 i8 = i5 + 28 | 0;
 i9 = i5 + 24 | 0;
 i10 = i5 + 20 | 0;
 i11 = i5 + 16 | 0;
 i12 = i5 + 12 | 0;
 i13 = i5 + 8 | 0;
 i14 = i5 + 4 | 0;
 i15 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i10 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) + 1;
 while (1) {
  if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 40) break;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 HEAP32[i12 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) - 1;
 HEAP32[i11 >> 2] = _vim_strnsave((HEAP32[i7 >> 2] | 0) + (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) + 1 | 0, HEAP32[i12 >> 2] | 0) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 }
 HEAP32[i13 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) > (HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) break;
  HEAP32[i15 >> 2] = _ml_get(HEAP32[i13 >> 2] | 0) | 0;
  if ((HEAP32[i13 >> 2] | 0) == (HEAP32[HEAP32[i8 >> 2] >> 2] | 0)) i17 = (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) + 1 | 0; else i17 = 0;
  HEAP32[i10 >> 2] = (HEAP32[i15 >> 2] | 0) + i17;
  while (1) {
   if (!(HEAP8[HEAP32[i10 >> 2] >> 0] | 0)) break;
   if ((HEAP32[i13 >> 2] | 0) == (HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) if (((HEAP32[i10 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0) >= (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) break;
   if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 41) if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + 1) >> 0] | 0) == 34) if (!(_strncmp(HEAP32[i11 >> 2] | 0, (HEAP32[i10 >> 2] | 0) + 1 | 0, HEAP32[i12 >> 2] | 0) | 0)) {
    i4 = 18;
    break;
   }
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  }
  if ((i4 | 0) == 18) {
   i4 = 0;
   HEAP32[i14 >> 2] = 1;
  }
  if (HEAP32[i14 >> 2] | 0) break;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 _vim_free(HEAP32[i11 >> 2] | 0);
 HEAP32[i6 >> 2] = HEAP32[i14 >> 2];
 i16 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i16 | 0;
}

function _aucmd_prepbuf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 L1 : do if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26773] | 0)) HEAP32[i6 >> 2] = HEAP32[26881]; else {
  HEAP32[i6 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[i6 >> 2] | 0)) break L1;
   if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) break L1;
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  }
 } while (0);
 if ((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[27113] | 0) == 0) {
  _win_alloc_aucmd_win();
  if (!(HEAP32[27113] | 0)) HEAP32[i6 >> 2] = HEAP32[26881];
 }
 if ((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[26769] | 0) != 0) HEAP32[i6 >> 2] = HEAP32[26881];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = HEAP32[26881];
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[26773];
 i2 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
 if (HEAP32[i6 >> 2] | 0) {
  HEAP32[i2 >> 2] = 0;
  HEAP32[26881] = HEAP32[i6 >> 2];
  i8 = HEAP32[i5 >> 2] | 0;
  HEAP32[26773] = i8;
  i9 = HEAP32[26881] | 0;
  i10 = HEAP32[i4 >> 2] | 0;
  i11 = i10 + 12 | 0;
  HEAP32[i11 >> 2] = i9;
  i12 = HEAP32[i4 >> 2] | 0;
  i13 = i12 + 16 | 0;
  i14 = HEAP32[26773] | 0;
  _set_bufref(i13, i14);
  STACKTOP = i3;
  return;
 }
 HEAP32[i2 >> 2] = 1;
 HEAP32[26769] = 1;
 HEAP32[(HEAP32[27113] | 0) + 4 >> 2] = HEAP32[i5 >> 2];
 i2 = (HEAP32[i5 >> 2] | 0) + 56 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 _win_init_empty(HEAP32[27113] | 0);
 if (HEAP32[(HEAP32[27113] | 0) + 196 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[27113] | 0) + 196 >> 2] | 0);
  HEAP32[(HEAP32[27113] | 0) + 196 >> 2] = 0;
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] = HEAP32[26857];
 HEAP32[26857] = 0;
 _block_autocmds();
 _make_snapshot(1);
 HEAP32[i7 >> 2] = HEAP32[26911];
 HEAP32[26911] = 0;
 _win_split_ins(0, 4, HEAP32[27113] | 0, 0) | 0;
 _win_comp_pos() | 0;
 HEAP32[26911] = HEAP32[i7 >> 2];
 _unblock_autocmds();
 HEAP32[26881] = HEAP32[27113];
 i8 = HEAP32[i5 >> 2] | 0;
 HEAP32[26773] = i8;
 i9 = HEAP32[26881] | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i11 = i10 + 12 | 0;
 HEAP32[i11 >> 2] = i9;
 i12 = HEAP32[i4 >> 2] | 0;
 i13 = i12 + 16 | 0;
 i14 = HEAP32[26773] | 0;
 _set_bufref(i13, i14);
 STACKTOP = i3;
 return;
}

function _command_height() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[26886] | 0) + 32 >> 2];
 HEAP32[(HEAP32[26886] | 0) + 32 >> 2] = HEAP32[26875];
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[27112] | 0) + 20 >> 2];
 while (1) {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[10174] | 0)) break;
  if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2];
 }
 while (1) {
  if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0)) break;
  if (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) break;
  if (!(HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) + 200 + 12 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
 }
 do if ((HEAP32[10177] | 0) != 2) {
  HEAP32[26876] = (HEAP32[10173] | 0) - (HEAP32[26875] | 0);
  if ((HEAP32[26875] | 0) <= (HEAP32[i5 >> 2] | 0)) {
   if ((HEAP32[26877] | 0) < (HEAP32[26876] | 0)) HEAP32[26877] = HEAP32[26876];
   HEAP32[26699] = 1;
   break;
  }
  while (1) {
   if ((HEAP32[26875] | 0) <= (HEAP32[i5 >> 2] | 0)) break;
   if (!(HEAP32[i4 >> 2] | 0)) {
    i1 = 15;
    break;
   }
   i6 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
   HEAP32[i3 >> 2] = i6 - (_frame_minheight(HEAP32[i4 >> 2] | 0, 0) | 0);
   if ((HEAP32[i3 >> 2] | 0) > ((HEAP32[26875] | 0) - (HEAP32[i5 >> 2] | 0) | 0)) HEAP32[i3 >> 2] = (HEAP32[26875] | 0) - (HEAP32[i5 >> 2] | 0);
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] | 0);
   _frame_add_height(HEAP32[i4 >> 2] | 0, 0 - (HEAP32[i3 >> 2] | 0) | 0);
   HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
  }
  if ((i1 | 0) == 15) {
   _emsg(93214) | 0;
   HEAP32[26875] = HEAP32[i5 >> 2];
   HEAP32[(HEAP32[26886] | 0) + 32 >> 2] = HEAP32[26875];
   HEAP32[26876] = (HEAP32[10173] | 0) - (HEAP32[26875] | 0);
  }
  _win_comp_pos() | 0;
  if (HEAP32[26781] | 0) _screen_fill(HEAP32[26876] | 0, HEAP32[10173] | 0, 0, HEAP32[10174] | 0, 32, 32, 0);
  HEAP32[26877] = HEAP32[26876];
  HEAP32[26699] = 1;
  STACKTOP = i2;
  return;
 } while (0);
 _frame_add_height(HEAP32[i4 >> 2] | 0, (HEAP32[i5 >> 2] | 0) - (HEAP32[26875] | 0) | 0);
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[(HEAP32[27112] | 0) + 20 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _win_comp_pos() | 0;
 STACKTOP = i2;
 return;
}

function _last_status_rec(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 if (HEAP8[HEAP32[i5 >> 2] >> 0] | 0) {
  i1 = (HEAP8[i2 >> 0] | 0) == 1;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2];
  if (i1) {
   while (1) {
    if (!(HEAP32[i7 >> 2] | 0)) break;
    _last_status_rec(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0);
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
   }
   STACKTOP = i4;
   return;
  }
  while (1) {
   i9 = HEAP32[i7 >> 2] | 0;
   if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0)) break;
   HEAP32[i7 >> 2] = HEAP32[i9 + 24 >> 2];
  }
  _last_status_rec(i9, HEAP32[i6 >> 2] | 0);
  STACKTOP = i4;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[i2 + 36 >> 2];
 i2 = HEAP32[i8 >> 2] | 0;
 if (!(HEAP32[i6 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] | 0) == 0)) {
  _win_new_height(i2, (HEAP32[(HEAP32[i8 >> 2] | 0) + 88 >> 2] | 0) + 1 | 0);
  HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] = 0;
  _comp_col();
  STACKTOP = i4;
  return;
 }
 if (!((HEAP32[i2 + 92 >> 2] | 0) == 0 & (HEAP32[i6 >> 2] | 0) != 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 while (1) {
  i6 = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0;
  if ((i6 | 0) > (_frame_minheight(HEAP32[i7 >> 2] | 0, 0) | 0)) break;
  if ((HEAP32[i7 >> 2] | 0) == (HEAP32[27114] | 0)) {
   i3 = 8;
   break;
  }
  if ((HEAP8[HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 2) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] | 0) HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2]; else i3 = 12; else i3 = 12;
  if ((i3 | 0) == 12) {
   i3 = 0;
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
  }
 }
 if ((i3 | 0) == 8) {
  _emsg(93214) | 0;
  STACKTOP = i4;
  return;
 }
 HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2] = 1;
 if ((HEAP32[i7 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
  i5 = HEAP32[i7 >> 2] | 0;
  _frame_new_height(i5 | 0, (HEAP32[i5 + 12 >> 2] | 0) - 1 | 0, 0, 0);
  _frame_fix_height(HEAP32[i8 >> 2] | 0);
  _win_comp_pos() | 0;
 } else {
  i5 = HEAP32[i8 >> 2] | 0;
  _win_new_height(i5 | 0, (HEAP32[i5 + 88 >> 2] | 0) - 1 | 0);
 }
 _comp_col();
 _redraw_all_later(35);
 STACKTOP = i4;
 return;
}

function _vim_regexec_string(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i5 + 84 | 0;
 i7 = i5 + 80 | 0;
 i8 = i5 + 76 | 0;
 i9 = i5 + 72 | 0;
 i10 = i5 + 68 | 0;
 i11 = i5 + 16 | 0;
 i12 = i5 + 12 | 0;
 i13 = i5 + 8 | 0;
 i14 = i5 + 4 | 0;
 i15 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i12 >> 2] = HEAP32[26311];
 if (HEAP32[26311] | 0) {
  i16 = i11;
  i17 = 105248;
  i18 = i16 + 52 | 0;
  do {
   HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
   i16 = i16 + 4 | 0;
   i17 = i17 + 4 | 0;
  } while ((i16 | 0) < (i18 | 0));
 }
 HEAP32[26311] = 1;
 HEAP32[26314] = 0;
 HEAP32[26315] = 0;
 HEAP32[26316] = 0;
 HEAP32[26317] = 0;
 HEAP32[i10 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[HEAP32[HEAP32[i6 >> 2] >> 2] >> 2] | 0) + 8 >> 2] & 3](HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 if ((HEAP32[i10 >> 2] | 0) == -1 ? (HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 8 >> 2] | 0) == 0 : 0) {
  HEAP32[i13 >> 2] = HEAP32[26966];
  HEAP32[i14 >> 2] = HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 12 >> 2];
  HEAP32[i15 >> 2] = _vim_strsave(HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 40 >> 2] | 0) | 0;
  HEAP32[26966] = 1;
  _vim_regfree(HEAP32[HEAP32[i6 >> 2] >> 2] | 0);
  if (HEAP32[i15 >> 2] | 0) {
   i4 = _vim_regcomp(HEAP32[i15 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0;
   HEAP32[HEAP32[i6 >> 2] >> 2] = i4;
   if (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) HEAP32[i10 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[HEAP32[HEAP32[i6 >> 2] >> 2] >> 2] | 0) + 8 >> 2] & 3](HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   _vim_free(HEAP32[i15 >> 2] | 0);
  }
  HEAP32[26966] = HEAP32[i13 >> 2];
 }
 HEAP32[26311] = HEAP32[i12 >> 2];
 if (!(HEAP32[26311] | 0)) {
  i19 = HEAP32[i10 >> 2] | 0;
  i20 = (i19 | 0) > 0;
  i21 = i20 & 1;
  STACKTOP = i5;
  return i21 | 0;
 }
 i16 = 105248;
 i17 = i11;
 i18 = i16 + 52 | 0;
 do {
  HEAP32[i16 >> 2] = HEAP32[i17 >> 2];
  i16 = i16 + 4 | 0;
  i17 = i17 + 4 | 0;
 } while ((i16 | 0) < (i18 | 0));
 i19 = HEAP32[i10 >> 2] | 0;
 i20 = (i19 | 0) > 0;
 i21 = i20 & 1;
 STACKTOP = i5;
 return i21 | 0;
}

function _findoption(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i4 >> 2] = i1;
 L1 : do if (!(HEAP16[54987] | 0)) {
  HEAP32[i7 >> 2] = HEAP32[3832];
  HEAP32[i5 >> 2] = 1;
  while (1) {
   i1 = HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) >> 2] | 0;
   HEAP32[i6 >> 2] = i1;
   if (!i1) break L1;
   do if ((HEAP8[HEAP32[i6 >> 2] >> 0] | 0) != (HEAP8[HEAP32[i7 >> 2] >> 0] | 0)) {
    if ((HEAP8[HEAP32[i6 >> 2] >> 0] | 0) == 116) if ((HEAP8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 95) {
     HEAP16[55012] = HEAP32[i5 >> 2];
     break;
    }
    HEAP16[109972 + ((HEAP8[HEAP32[i6 >> 2] >> 0] | 0) - 97 << 1) >> 1] = HEAP32[i5 >> 2];
   } while (0);
   HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
 } while (0);
 if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) >= 97) if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) <= 122) {
  if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) == 116) i9 = (HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) == 95; else i9 = 0;
  HEAP32[i8 >> 2] = i9 & 1;
  if (HEAP32[i8 >> 2] | 0) HEAP32[i5 >> 2] = HEAP16[55012]; else HEAP32[i5 >> 2] = HEAP16[109972 + ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) - 97 << 1) >> 1];
  while (1) {
   i9 = HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) >> 2] | 0;
   HEAP32[i6 >> 2] = i9;
   if (!i9) break;
   if (!(_strcmp(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) break;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
  L29 : do if (!((HEAP32[i6 >> 2] | 0) != 0 | (HEAP32[i8 >> 2] | 0) != 0)) {
   HEAP32[i5 >> 2] = HEAP16[109972 + ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) - 97 << 1) >> 1];
   while (1) {
    if (!(HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) >> 2] | 0)) break L29;
    HEAP32[i6 >> 2] = HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 4 >> 2];
    if (HEAP32[i6 >> 2] | 0) if (!(_strcmp(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) break L29;
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   }
  } while (0);
  if (!(HEAP32[i6 >> 2] | 0)) HEAP32[i5 >> 2] = -1;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i10 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 HEAP32[i3 >> 2] = -1;
 i10 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i10 | 0;
}

function _fwd_word(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[26484] = HEAP32[i8 >> 2];
 L1 : while (1) {
  i8 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
  HEAP32[i7 >> 2] = i8;
  if ((i8 | 0) < 0) {
   i4 = 24;
   break;
  }
  HEAP32[i10 >> 2] = _cls() | 0;
  HEAP32[i12 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0) & 1;
  HEAP32[i11 >> 2] = _inc_cursor() | 0;
  if ((HEAP32[i11 >> 2] | 0) == -1) {
   i4 = 5;
   break;
  }
  if ((HEAP32[i11 >> 2] | 0) >= 1 & (HEAP32[i12 >> 2] | 0) != 0) {
   i4 = 5;
   break;
  }
  if ((HEAP32[i11 >> 2] | 0) >= 1 & (HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) == 0) {
   i4 = 7;
   break;
  }
  L7 : do if (HEAP32[i10 >> 2] | 0) while (1) {
   i8 = _cls() | 0;
   if ((i8 | 0) != (HEAP32[i10 >> 2] | 0)) break L7;
   HEAP32[i11 >> 2] = _inc_cursor() | 0;
   if ((HEAP32[i11 >> 2] | 0) == -1) {
    i4 = 13;
    break L1;
   }
   if ((HEAP32[i11 >> 2] | 0) >= 1 & (HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) == 0) {
    i4 = 13;
    break L1;
   }
  } while (0);
  while (1) {
   if (_cls() | 0) break;
   if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) if (!(HEAPU8[(_ml_get_curline() | 0) >> 0] | 0)) break;
   HEAP32[i11 >> 2] = _inc_cursor() | 0;
   if ((HEAP32[i11 >> 2] | 0) == -1) {
    i4 = 21;
    break L1;
   }
   if ((HEAP32[i11 >> 2] | 0) >= 1 & (HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) == 0) {
    i4 = 21;
    break L1;
   }
  }
 }
 if ((i4 | 0) == 5) {
  HEAP32[i6 >> 2] = 0;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else if ((i4 | 0) == 7) {
  HEAP32[i6 >> 2] = 1;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else if ((i4 | 0) == 13) {
  HEAP32[i6 >> 2] = 1;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else if ((i4 | 0) == 21) {
  HEAP32[i6 >> 2] = 1;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else if ((i4 | 0) == 24) {
  HEAP32[i6 >> 2] = 1;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 return 0;
}

function _get_spec_reg(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
 HEAP32[HEAP32[i9 >> 2] >> 2] = 0;
 L1 : do switch (HEAP32[i7 >> 2] | 0) {
 case 37:
  {
   if (HEAP32[i10 >> 2] | 0) _check_fname() | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2];
   HEAP32[i6 >> 2] = 1;
   break;
  }
 case 35:
  {
   i4 = _getaltfname(HEAP32[i10 >> 2] | 0) | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i4;
   HEAP32[i6 >> 2] = 1;
   break;
  }
 case 58:
  {
   if (0 == 0 & (HEAP32[i10 >> 2] | 0) != 0) _emsg(92980) | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
   HEAP32[i6 >> 2] = 1;
   break;
  }
 case 47:
  {
   if ((_last_search_pat() | 0) == 0 & (HEAP32[i10 >> 2] | 0) != 0) _emsg(93155) | 0;
   i4 = _last_search_pat() | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i4;
   HEAP32[i6 >> 2] = 1;
   break;
  }
 case 46:
  {
   i4 = _get_last_insert_save() | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i4;
   HEAP32[HEAP32[i9 >> 2] >> 2] = 1;
   if (HEAP32[i10 >> 2] | 0 ? (HEAP32[HEAP32[i8 >> 2] >> 2] | 0) == 0 : 0) _emsg(92954) | 0;
   HEAP32[i6 >> 2] = 1;
   break;
  }
 case 1:
 case 23:
  {
   if (!(HEAP32[i10 >> 2] | 0)) {
    HEAP32[i6 >> 2] = 0;
    break L1;
   }
   HEAP32[i11 >> 2] = _find_ident_under_cursor(HEAP32[i8 >> 2] | 0, (HEAP32[i7 >> 2] | 0) == 23 ? 3 : 2) | 0;
   if (HEAP32[i11 >> 2] | 0) i12 = _vim_strnsave(HEAP32[HEAP32[i8 >> 2] >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0; else i12 = 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i12;
   HEAP32[HEAP32[i9 >> 2] >> 2] = 1;
   HEAP32[i6 >> 2] = 1;
   break;
  }
 case 12:
  {
   if (HEAP32[i10 >> 2] | 0) {
    i4 = HEAP32[26881] | 0;
    i3 = _ml_get_buf(HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 + 24 >> 2] | 0, 0) | 0;
    HEAP32[HEAP32[i8 >> 2] >> 2] = i3;
    HEAP32[i6 >> 2] = 1;
    break L1;
   } else {
    HEAP32[i6 >> 2] = 0;
    break L1;
   }
   break;
  }
 case 95:
  {
   HEAP32[HEAP32[i8 >> 2] >> 2] = 114072;
   HEAP32[i6 >> 2] = 1;
   break;
  }
 default:
  HEAP32[i6 >> 2] = 0;
 } while (0);
 STACKTOP = i5;
 return HEAP32[i6 >> 2] | 0;
}

function _inchar(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 i14 = i5 + 32 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i13 >> 2] = HEAP32[26825];
 if ((HEAP32[i9 >> 2] | 0) == -1 | (HEAP32[i9 >> 2] | 0) > 100) {
  _cursor_on();
  _out_flush_cursor(0, 0);
 }
 if ((HEAP32[10180] | 0) != 513) {
  HEAP32[26838] = 0;
  HEAP32[26839] = 0;
 }
 HEAP32[26840] = 0;
 HEAP32[i12 >> 2] = -1;
 while (1) {
  if (!(HEAP32[108652 + (HEAP32[26831] << 2) >> 2] | 0 ? (HEAP32[i12 >> 2] | 0) < 0 : 0)) break;
  if (HEAP32[26834] | 0) i4 = 9; else {
   i3 = _getc(HEAP32[108652 + (HEAP32[26831] << 2) >> 2] | 0) | 0;
   HEAP32[i12 >> 2] = i3;
   if ((i3 | 0) < 0) i4 = 9; else {
    HEAP8[HEAP32[i7 >> 2] >> 0] = HEAP32[i12 >> 2];
    HEAP32[i10 >> 2] = 1;
   }
  }
  if ((i4 | 0) == 9) {
   i4 = 0;
   _closescript();
   if (!(HEAP32[26834] | 0)) {
    i4 = 11;
    break;
   }
   HEAP32[i11 >> 2] = 1;
  }
 }
 if ((i4 | 0) == 11) {
  HEAP32[i6 >> 2] = -1;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 do if ((HEAP32[i12 >> 2] | 0) < 0) {
  if (!(HEAP32[26834] | 0)) {
   _out_flush();
   HEAP32[i10 >> 2] = _ui_inchar(HEAP32[i7 >> 2] | 0, (HEAP32[i8 >> 2] | 0) / 3 | 0, HEAP32[i9 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
   break;
  }
  while (1) {
   HEAP32[i10 >> 2] = _ui_inchar(i14, 153, 0, 0) | 0;
   if (!(HEAP32[i10 >> 2] | 0)) break;
   if ((HEAP32[i10 >> 2] | 0) == 1) if ((HEAPU8[i14 >> 0] | 0 | 0) == 3) break;
  }
  HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } while (0);
 if (_typebuf_changed(HEAP32[i13 >> 2] | 0) | 0) {
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 if ((HEAP32[i10 >> 2] | 0) > 0) {
  i13 = (HEAP32[26825] | 0) + 1 | 0;
  HEAP32[26825] = i13;
  HEAP32[26825] = (i13 | 0) == 0 ? 1 : i13;
 }
 HEAP32[i6 >> 2] = _fix_input_buffer(HEAP32[i7 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 i15 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i15 | 0;
}

function _plines_win_col(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4 + 4 | 0;
 i13 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i11 >> 2] = 0;
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 200 + 36 >> 2] | 0)) {
  HEAP32[i5 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  i14 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i14 | 0;
 }
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 100 >> 2] | 0)) {
  HEAP32[i5 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  i14 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i14 | 0;
 }
 i3 = _ml_get_buf(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) break;
  i3 = (HEAP32[i8 >> 2] | 0) + -1 | 0;
  HEAP32[i8 >> 2] = i3;
  if ((i3 | 0) < 0) break;
  i3 = _win_lbr_chartabsize(HEAP32[i6 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i3;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if ((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 9) if (HEAP32[10180] & 1 | 0) if (HEAP32[26862] | 0 ? 1 : (HEAP32[(HEAP32[i6 >> 2] | 0) + 200 >> 2] | 0) == 0) {
  i8 = (_win_lbr_chartabsize(HEAP32[i6 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0) - 1 | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i8;
 }
 i8 = HEAP32[(HEAP32[i6 >> 2] | 0) + 100 >> 2] | 0;
 HEAP32[i12 >> 2] = i8 - (_win_col_off(HEAP32[i6 >> 2] | 0) | 0);
 if ((HEAP32[i12 >> 2] | 0) <= 0) {
  HEAP32[i5 >> 2] = 9999;
  i14 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i14 | 0;
 }
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 if ((HEAP32[i9 >> 2] | 0) > (HEAP32[i12 >> 2] | 0)) {
  i8 = HEAP32[i12 >> 2] | 0;
  i12 = (HEAP32[i9 >> 2] | 0) - i8 | 0;
  i9 = i8 | 0;
  i8 = ((i12 | 0) / (i9 + (_win_col_off2(HEAP32[i6 >> 2] | 0) | 0) | 0) | 0) + 1 | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i8;
 }
 HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
 i14 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i14 | 0;
}

function _ins_esc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 if (HEAP32[25215] | 0) {
  HEAP32[26814] = (HEAP32[26814] | 0) + -1;
  HEAP32[25215] = 0;
 }
 do if (!(HEAP32[27126] | 0)) {
  if ((HEAP32[i7 >> 2] | 0) != 114 & (HEAP32[i7 >> 2] | 0) != 118) _AppendToRedobuff(HEAP32[26883] | 0 ? 79182 : 42703);
  if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) > 0) {
   _line_breakcheck();
   if (HEAP32[26834] | 0) HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
  }
  i3 = HEAP32[i6 >> 2] | 0;
  i2 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
  HEAP32[i3 >> 2] = i2;
  if ((i2 | 0) <= 0) {
   _stop_insert((HEAP32[26881] | 0) + 24 | 0, 1, HEAP32[i8 >> 2] | 0);
   _undisplay_dollar();
   break;
  }
  if (_vim_strchr(HEAP32[26904] | 0, 88) | 0) HEAP32[10180] = HEAP32[10180] & -65;
  _start_redo_ins() | 0;
  if ((HEAP32[i7 >> 2] | 0) == 114 | (HEAP32[i7 >> 2] | 0) == 118) _stuffRedoReadbuff(42703);
  HEAP32[26814] = (HEAP32[26814] | 0) + 1;
  HEAP32[25215] = 1;
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } while (0);
 if (!(HEAP32[26806] | 0)) if ((HEAP32[i9 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 if (!(HEAP32[27132] | 0)) {
  i9 = (HEAP32[26773] | 0) + 428 | 0;
  i7 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i9 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 }
 do if (!(HEAP32[i8 >> 2] | 0)) if (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) {
  if (HEAP32[26806] | 0) {
   i7 = (_gchar_cursor() | 0) != 0;
   if (i7 | (HEAP32[26788] | 0) != 0) break;
  }
  i7 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 } while (0);
 HEAP32[10180] = 1;
 _changed_cline_bef_curs();
 _setmouse();
 _ui_cursor_shape();
 if (!(HEAP32[26915] | 0)) _out_str(HEAP32[26592] | 0);
 if ((HEAP32[26800] | 0) != 0 | (HEAP32[26806] | 0) != 0) _showmode() | 0; else if (HEAP32[26988] | 0) _msg(114072) | 0;
 HEAP32[i5 >> 2] = 1;
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _do_exmode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[i4 >> 2] | 0) HEAP32[26798] = 2; else HEAP32[26798] = 1;
 HEAP32[10180] = 1;
 if (HEAP32[26841] | 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[26710];
 HEAP32[26814] = (HEAP32[26814] | 0) + 1;
 HEAP32[26720] = (HEAP32[26720] | 0) + 1;
 HEAP32[26759] = (HEAP32[26759] | 0) + 1;
 _msg(45579) | 0;
 while (1) {
  if (!(HEAP32[26798] | 0)) break;
  if ((HEAP32[26826] | 0) > 0 & (HEAP32[26821] | 0) == 0) {
   i2 = 8;
   break;
  }
  HEAP32[26710] = 1;
  HEAP32[26721] = 0;
  HEAP32[25226] = 0;
  HEAP32[26799] = 0;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[26773] | 0) + 112 + 8 >> 2];
  HEAP32[i6 >> 2] = HEAP32[26877];
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  if (HEAP32[i4 >> 2] | 0) {
   HEAP32[26876] = HEAP32[26877];
   _do_cmdline(0, 6, 0, 0) | 0;
  } else _do_cmdline(0, 7, 0, 2) | 0;
  HEAP32[10176] = (HEAP32[10173] | 0) - 1;
  if ((HEAP32[i7 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if (HEAP32[26799] | 0) i2 = 21; else i2 = 15; else if (HEAP32[26799] | 0 ? 1 : (HEAP32[i8 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 112 + 8 >> 2] | 0)) i2 = 21; else i2 = 15;
  do if ((i2 | 0) == 15) {
   i2 = 0;
   if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) {
    _emsg(94134) | 0;
    break;
   }
   if (HEAP32[25226] | 0) {
    HEAP32[26877] = HEAP32[i6 >> 2];
    if ((HEAP32[i6 >> 2] | 0) == ((HEAP32[10173] | 0) - 1 | 0)) HEAP32[26877] = (HEAP32[26877] | 0) + -1;
   }
   HEAP32[27043] = 0;
   _print_line_no_prefix(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 0, 0);
   _msg_clr_eos();
  } else if ((i2 | 0) == 21) {
   i2 = 0;
   if (!((HEAP32[25226] | 0) == 0 | (HEAP32[26799] | 0) != 0)) if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) {
    _emsg(94134) | 0;
    break;
   } else {
    _emsg(45634) | 0;
    break;
   }
  } while (0);
 }
 if ((i2 | 0) == 8) HEAP32[26798] = 0;
 HEAP32[26759] = (HEAP32[26759] | 0) + -1;
 HEAP32[26814] = (HEAP32[26814] | 0) + -1;
 HEAP32[26720] = (HEAP32[26720] | 0) + -1;
 _update_screen(50) | 0;
 HEAP32[26721] = 0;
 HEAP32[26710] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _check_scrollbind(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 36 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 20 | 0;
 i10 = i3 + 16 | 0;
 i11 = i3 + 12 | 0;
 i12 = i3 + 8 | 0;
 i13 = i3 + 4 | 0;
 i14 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[26881];
 HEAP32[i9 >> 2] = HEAP32[26773];
 HEAP32[i10 >> 2] = HEAP32[26789];
 HEAP32[i11 >> 2] = HEAP32[26788];
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[26881] | 0) + 76 >> 2];
 i2 = (_vim_strchr(HEAP32[26972] | 0, 118) | 0) != 0;
 HEAP32[i6 >> 2] = (i2 ? (HEAP32[i4 >> 2] | 0) != 0 : 0) & 1;
 if (_vim_strchr(HEAP32[26972] | 0, 104) | 0) i15 = HEAP32[i5 >> 2] | 0 ? 1 : (HEAP32[i4 >> 2] | 0) != 0; else i15 = 0;
 HEAP32[i7 >> 2] = i15 & 1;
 HEAP32[26788] = 0;
 HEAP32[26789] = 0;
 HEAP32[26881] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[26881] | 0)) break;
  HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
  if ((HEAP32[26881] | 0) != (HEAP32[i8 >> 2] | 0)) if (HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0) {
   if (HEAP32[i6 >> 2] | 0) {
    i15 = (HEAP32[26881] | 0) + 296 | 0;
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + (HEAP32[i4 >> 2] | 0);
    HEAP32[i13 >> 2] = HEAP32[(HEAP32[26881] | 0) + 296 >> 2];
    if ((HEAP32[i13 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i13 >> 2] = HEAP32[HEAP32[26773] >> 2];
    if ((HEAP32[i13 >> 2] | 0) < 1) HEAP32[i13 >> 2] = 1;
    HEAP32[i14 >> 2] = (HEAP32[i13 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0);
    i15 = HEAP32[i14 >> 2] | 0;
    if ((HEAP32[i14 >> 2] | 0) > 0) _scrollup(i15, 0); else _scrolldown(0 - i15 | 0, 0);
    _redraw_later(10);
    _cursor_correct();
    HEAP32[(HEAP32[26881] | 0) + 176 >> 2] = 1;
   }
   if (HEAP32[i7 >> 2] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) {
    HEAP32[(HEAP32[26881] | 0) + 76 >> 2] = HEAP32[i12 >> 2];
    _leftcol_changed() | 0;
   }
  }
  HEAP32[26881] = HEAP32[(HEAP32[26881] | 0) + 12 >> 2];
 }
 HEAP32[26789] = HEAP32[i10 >> 2];
 HEAP32[26788] = HEAP32[i11 >> 2];
 HEAP32[26881] = HEAP32[i8 >> 2];
 HEAP32[26773] = HEAP32[i9 >> 2];
 STACKTOP = i3;
 return;
}

function _getsourceline(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 36 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4;
 HEAP32[i4 + 40 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i4 + 32 >> 2] = i3;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 do if (HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) HEAP32[i7 >> 2] = 0; else {
  i5 = HEAP32[i6 >> 2] | 0;
  if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
   HEAP32[i7 >> 2] = _get_one_sourceline(i5) | 0;
   break;
  } else {
   HEAP32[i7 >> 2] = HEAP32[i5 + 4 >> 2];
   HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = 0;
   HEAP32[26732] = (HEAP32[26732] | 0) + 1;
   break;
  }
 } while (0);
 if (!(HEAP32[i7 >> 2] | 0)) {
  i10 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 if (_vim_strchr(HEAP32[26904] | 0, 67) | 0) {
  i10 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[26732] = (HEAP32[26732] | 0) + -1;
 i5 = _get_one_sourceline(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = i5;
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
  i10 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 i5 = _skipwhite(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i5;
 if ((HEAPU8[i5 >> 0] | 0 | 0) != 92) {
  i10 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 _ga_init2(i9, 1, 400);
 _ga_concat(i9, HEAP32[i7 >> 2] | 0);
 _ga_concat(i9, (HEAP32[i8 >> 2] | 0) + 1 | 0);
 while (1) {
  _vim_free(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0);
  i5 = _get_one_sourceline(HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = i5;
  if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = _skipwhite(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0;
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) != 92) break;
  do if ((HEAP32[i9 >> 2] | 0) > 400) if ((HEAP32[i9 >> 2] | 0) > 8e3) {
   HEAP32[i9 + 12 >> 2] = 8e3;
   break;
  } else {
   HEAP32[i9 + 12 >> 2] = HEAP32[i9 >> 2];
   break;
  } while (0);
  _ga_concat(i9, (HEAP32[i8 >> 2] | 0) + 1 | 0);
 }
 _ga_append(i9, 0);
 _vim_free(HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = HEAP32[i9 + 16 >> 2];
 i10 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _win_close_othertab(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) {
  STACKTOP = i4;
  return;
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) + 64 >> 2] | 0) > 0) {
  STACKTOP = i4;
  return;
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) {
  i3 = HEAP32[i5 >> 2] | 0;
  _close_buffer(i3 | 0, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0 ? 2 : 0, 0);
 }
 HEAP32[i10 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i10 >> 2] | 0)) break;
  if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) break;
  HEAP32[i10 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
 }
 if (!(HEAP32[i10 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26886] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) break;
  if ((HEAP32[i8 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2];
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0)) {
  do if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26884] | 0)) HEAP32[26884] = HEAP32[HEAP32[i7 >> 2] >> 2]; else {
   HEAP32[i10 >> 2] = HEAP32[26884];
   while (1) {
    if (!(HEAP32[i10 >> 2] | 0)) break;
    if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) break;
    HEAP32[i10 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
   }
   if (HEAP32[i10 >> 2] | 0) {
    HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
    break;
   }
   _internal_error(84070);
   STACKTOP = i4;
   return;
  } while (0);
  HEAP32[i11 >> 2] = 1;
 }
 _win_free_mem(HEAP32[i5 >> 2] | 0, i9, HEAP32[i7 >> 2] | 0) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 _free_tabpage(HEAP32[i7 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _close_windows(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i10 >> 2] = _tabline_height() | 0;
 HEAP32[i11 >> 2] = _tabpage_index(0) | 0;
 HEAP32[26814] = (HEAP32[26814] | 0) + 1;
 HEAP32[i7 >> 2] = HEAP32[26887];
 L1 : while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  if (!((HEAP32[26887] | 0) == (HEAP32[27112] | 0) ^ 1)) break;
  do if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
   if (HEAP32[i6 >> 2] | 0) if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26881] | 0)) {
    i3 = 11;
    break;
   }
   if (HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) i3 = 11; else if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 64 >> 2] | 0) > 0) i3 = 11; else {
    if (!(_win_close(HEAP32[i7 >> 2] | 0, 0) | 0)) break L1;
    HEAP32[i7 >> 2] = HEAP32[26887];
   }
  } else i3 = 11; while (0);
  if ((i3 | 0) == 11) {
   i3 = 0;
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
  }
 }
 HEAP32[i8 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
  L20 : do if ((HEAP32[i8 >> 2] | 0) != (HEAP32[26886] | 0)) {
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2];
   while (1) {
    if (!(HEAP32[i7 >> 2] | 0)) break L20;
    if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0)) if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 64 >> 2] | 0) <= 0) break;
    HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
   }
   _win_close_othertab(HEAP32[i7 >> 2] | 0, 0, HEAP32[i8 >> 2] | 0);
   HEAP32[i9 >> 2] = HEAP32[26884];
  } while (0);
  HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 }
 HEAP32[26814] = (HEAP32[26814] | 0) + -1;
 i9 = HEAP32[i11 >> 2] | 0;
 if ((i9 | 0) != (_tabpage_index(0) | 0)) _apply_autocmds(77, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[26770] = 1;
 i9 = HEAP32[i10 >> 2] | 0;
 if ((i9 | 0) == (_tabline_height() | 0)) {
  STACKTOP = i4;
  return;
 }
 _shell_new_rows();
 STACKTOP = i4;
 return;
}

function _separate_nextcmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 L1 : while (1) {
  if (!(HEAP8[HEAP32[i5 >> 2] >> 0] | 0)) break;
  do if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 22) {
   i1 = HEAP32[i5 >> 2] | 0;
   if (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 8200 | 0) HEAP32[i5 >> 2] = i1 + 1; else {
    i6 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
    _memmove(i1 | 0, i6 | 0, (_strlen((HEAP32[i5 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
   }
   if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) break L1;
  } else {
   do if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 34) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 2048 | 0) i2 = 16; else {
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) != 539) {
     if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 535) i2 = 12;
    } else i2 = 12;
    if ((i2 | 0) == 12) {
     i2 = 0;
     if ((HEAP32[i5 >> 2] | 0) == (HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) {
      i2 = 16;
      break;
     }
    }
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 354) if ((HEAP32[i5 >> 2] | 0) == ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 1 | 0)) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + -1 >> 0] | 0) == 64) i2 = 16;
   } else i2 = 16; while (0);
   if ((i2 | 0) == 16) {
    i2 = 0;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) != 124) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) != 10) break;
   }
   if (_vim_strchr(HEAP32[26904] | 0, 98) | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 8192 | 0) {
    i2 = 22;
    break L1;
   }
   if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + -1 >> 0] | 0) != 92) {
    i2 = 22;
    break L1;
   }
   i6 = HEAP32[i5 >> 2] | 0;
   i1 = i6 + -1 | 0;
   i7 = i6 | 0;
   _memmove(i1 | 0, i7 | 0, (_strlen(HEAP32[i5 >> 2] | 0) | 0) + 1 | 0) | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 22) {
  i2 = _check_nextcmd(HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i2;
  HEAP8[HEAP32[i5 >> 2] >> 0] = 0;
 }
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] & 2048 | 0) {
  STACKTOP = i3;
  return;
 }
 _del_trailing_spaces(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _nv_left(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[26698] & 6 | 0) {
  if (HEAP32[26698] & 4 | 0) HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] = 1;
  _nv_bck_word(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
 L8 : while (1) {
  if ((HEAP32[i5 >> 2] | 0) <= 0) {
   i2 = 26;
   break;
  }
  do if (!(_oneleft() | 0)) {
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == -25195) i2 = 10; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 8) i2 = 10; else i2 = 11;
   if ((i2 | 0) == 10) {
    i2 = 0;
    if (!(_vim_strchr(HEAP32[27029] | 0, 98) | 0)) i2 = 11;
   }
   do if ((i2 | 0) == 11) {
    i2 = 0;
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 104) if (_vim_strchr(HEAP32[27029] | 0, 104) | 0) break;
    if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) != -27755) break L8;
    if (!(_vim_strchr(HEAP32[27029] | 0, 60) | 0)) break L8;
   } while (0);
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= 1) break L8;
   i1 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
   _coladvance(2147483647) | 0;
   HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
   if ((HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) != 1) if ((HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) != 3) break;
   if (HEAPU8[(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) >> 0] | 0 | 0) {
    HEAP32[i6 >> 2] = _ml_get_cursor() | 0;
    if (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) {
     i1 = (HEAP32[26881] | 0) + 24 + 4 | 0;
     HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    }
    i1 = (HEAP32[i4 >> 2] | 0) + 36 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 2;
   }
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
 }
 if ((i2 | 0) == 26) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _beep_flush();
 STACKTOP = i3;
 return;
}

function _set_hl_attr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = (HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0);
 if (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) if (!(_strcmp(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0, 76507) | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] | 0) == -11111) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 52 >> 2] | 0) == -11111) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 56 >> 2] | 0) == -11111) if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 60 >> 2] | 0)) {
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i4 + 68 >> 2] = HEAP32[i4 + 72 >> 2];
 } else i2 = 8; else i2 = 8; else i2 = 8; else i2 = 8;
 if ((i2 | 0) == 8) {
  HEAP16[i5 >> 1] = HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2];
  HEAP32[i5 + 4 + 4 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 52 >> 2];
  HEAP32[i5 + 4 + 8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 56 >> 2];
  HEAP32[i5 + 4 + 12 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 60 >> 2];
  i4 = _get_attr_entry(105964, i5) | 0;
  HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] = i4;
 }
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0)) if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0)) {
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i4 + 24 >> 2] = HEAP32[i4 + 12 >> 2];
 } else i2 = 12; else i2 = 12;
 if ((i2 | 0) == 12) {
  HEAP16[i5 >> 1] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2];
  HEAP32[i5 + 4 + 4 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2];
  i2 = _get_attr_entry(105984, i5) | 0;
  HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] = i2;
 }
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] | 0)) if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] | 0)) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i2 + 44 >> 2] = HEAP32[i2 + 28 >> 2];
  STACKTOP = i3;
  return;
 }
 HEAP16[i5 >> 1] = HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2];
 HEAP16[i5 + 4 >> 1] = HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2];
 HEAP16[i5 + 4 + 2 >> 1] = HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2];
 i2 = _get_attr_entry(106004, i5) | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _nv_wordcmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 101) i2 = 3; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 69) i2 = 3; else HEAP32[i6 >> 2] = 0;
 if ((i2 | 0) == 3) HEAP32[i6 >> 2] = 1;
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = HEAP32[i6 >> 2];
 do if (!(HEAP32[i6 >> 2] | 0)) if ((HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) == 3) {
  HEAP32[i5 >> 2] = _gchar_cursor() | 0;
  if (HEAP32[i5 >> 2] | 0) {
   i1 = HEAP32[i4 >> 2] | 0;
   if (!((HEAP32[i5 >> 2] | 0) == 32 | (HEAP32[i5 >> 2] | 0) == 9)) {
    HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] = 1;
    HEAP32[i6 >> 2] = 1;
    HEAP32[i7 >> 2] = 1;
    break;
   }
   if ((HEAP32[i1 + 28 >> 2] | 0) == 1) if (_vim_strchr(HEAP32[26904] | 0, 119) | 0) {
    HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 20 >> 2] = 1;
    HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 8 >> 2] = 0;
    STACKTOP = i3;
    return;
   }
  }
 } while (0);
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 i1 = HEAP32[i4 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 32 >> 2] | 0;
 if (HEAP32[i6 >> 2] | 0) HEAP32[i5 >> 2] = _end_word(i9, i10, HEAP32[i7 >> 2] | 0, 0) | 0; else HEAP32[i5 >> 2] = _fwd_word(i9, i10, (HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) != 0 & 1) | 0;
 if ((HEAP32[i8 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  if ((HEAP32[i8 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i2 = 19;
 } else if ((HEAP32[i8 + 4 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i2 = 19;
 if ((i2 | 0) == 19) _adjust_cursor(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
 if (!(HEAP32[i5 >> 2] | 0)) if (!(HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0)) {
  _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 _adjust_for_sel(HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _hash_lookup(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i13 >> 2] = HEAP32[i9 >> 2] & HEAP32[HEAP32[i7 >> 2] >> 2];
 HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[i13 >> 2] << 3);
 i3 = HEAP32[i12 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[i6 >> 2] = i3;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 i2 = HEAP32[i12 >> 2] | 0;
 if ((HEAP32[i3 + 4 >> 2] | 0) == 113987) HEAP32[i11 >> 2] = i2; else {
  if ((HEAP32[i2 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) if (!(_strcmp(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0)) {
   HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
   i14 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i14 | 0;
  }
  HEAP32[i11 >> 2] = 0;
 }
 HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 while (1) {
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] << 2) + (HEAP32[i13 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) + 1;
  HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0) + ((HEAP32[i13 >> 2] & HEAP32[HEAP32[i7 >> 2] >> 2]) << 3);
  if (!(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0)) {
   i4 = 11;
   break;
  }
  if ((HEAP32[HEAP32[i12 >> 2] >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) != 113987) if (!(_strcmp(HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0)) {
   i4 = 15;
   break;
  }
  if ((HEAP32[i11 >> 2] | 0) == 0 ? (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) == 113987 : 0) HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) >>> 5;
 }
 if ((i4 | 0) == 11) {
  i10 = HEAP32[i11 >> 2] | 0;
  HEAP32[i6 >> 2] = (i10 | 0) == 0 ? HEAP32[i12 >> 2] | 0 : i10 | 0;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 } else if ((i4 | 0) == 15) {
  HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 return 0;
}

function _match_follows(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 do if ((HEAP32[i7 >> 2] | 0) > 10) HEAP32[i5 >> 2] = 0; else {
  L4 : while (1) {
   if (!(HEAP32[i8 >> 2] | 0)) {
    i3 = 15;
    break;
   }
   switch (HEAP32[HEAP32[i8 >> 2] >> 2] | 0) {
   case -986:
   case -987:
   case -988:
   case -956:
   case -1023:
    {
     i3 = 6;
     break L4;
     break;
    }
   case -1024:
    {
     i3 = 7;
     break L4;
     break;
    }
   case -1002:
   case -1019:
   case -1021:
   case -916:
   case -917:
   case -918:
   case -919:
   case -920:
   case -921:
   case -922:
   case -923:
   case -924:
   case -925:
   case -926:
   case -927:
   case -928:
   case -929:
   case -930:
   case -931:
   case -932:
   case -933:
   case -934:
   case -935:
   case -936:
   case -937:
   case -938:
   case -939:
   case -940:
   case -941:
   case -942:
   case -943:
   case -944:
   case -945:
   case -983:
   case -946:
    {
     i3 = 11;
     break L4;
     break;
    }
   case -985:
   case -990:
   case -991:
   case -994:
   case -995:
   case -992:
   case -993:
   case -996:
   case -997:
    {
     HEAP32[i8 >> 2] = HEAP32[(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2];
     continue L4;
     break;
    }
   default:
    {}
   }
   if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) > 0) {
    i3 = 13;
    break;
   }
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2];
  }
  if ((i3 | 0) == 6) {
   HEAP32[i5 >> 2] = 1;
   break;
  } else if ((i3 | 0) == 7) {
   if (_match_follows(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0) i9 = 1; else i9 = (_match_follows(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0) != 0;
   HEAP32[i5 >> 2] = i9 & 1;
   break;
  } else if ((i3 | 0) == 11) {
   HEAP32[i5 >> 2] = 0;
   break;
  } else if ((i3 | 0) == 13) {
   HEAP32[i5 >> 2] = 0;
   break;
  } else if ((i3 | 0) == 15) {
   HEAP32[i5 >> 2] = 0;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return HEAP32[i5 >> 2] | 0;
}

function _trinkle(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i10 = i9 + 232 | 0;
 i11 = i9;
 i12 = HEAP32[i4 >> 2] | 0;
 HEAP32[i10 >> 2] = i12;
 i13 = HEAP32[i4 + 4 >> 2] | 0;
 i4 = i10 + 4 | 0;
 HEAP32[i4 >> 2] = i13;
 HEAP32[i11 >> 2] = i1;
 L1 : do if ((i12 | 0) != 1 | (i13 | 0) != 0) {
  i14 = 0 - i2 | 0;
  i15 = i1 + (0 - (HEAP32[i7 + (i5 << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[i3 & 15](i15, i1) | 0) < 1) {
   i16 = i1;
   i17 = 1;
   i18 = i5;
   i19 = i6;
   i8 = 9;
  } else {
   i20 = 1;
   i21 = i5;
   i22 = (i6 | 0) == 0;
   i23 = i1;
   i24 = i15;
   while (1) {
    if (i22 & (i21 | 0) > 1) {
     i15 = i23 + i14 | 0;
     i25 = HEAP32[i7 + (i21 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[i3 & 15](i15, i24) | 0) > -1) {
      i26 = i20;
      i27 = i21;
      i28 = i23;
      i8 = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[i3 & 15](i15 + (0 - i25) | 0, i24) | 0) > -1) {
      i26 = i20;
      i27 = i21;
      i28 = i23;
      i8 = 10;
      break L1;
     }
    }
    i25 = i20 + 1 | 0;
    HEAP32[i11 + (i20 << 2) >> 2] = i24;
    i15 = _pntz(i10) | 0;
    _shr(i10, i15);
    i29 = i15 + i21 | 0;
    if (!((HEAP32[i10 >> 2] | 0) != 1 | (HEAP32[i4 >> 2] | 0) != 0)) {
     i26 = i25;
     i27 = i29;
     i28 = i24;
     i8 = 10;
     break L1;
    }
    i15 = i24 + (0 - (HEAP32[i7 + (i29 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[i3 & 15](i15, HEAP32[i11 >> 2] | 0) | 0) < 1) {
     i16 = i24;
     i17 = i25;
     i18 = i29;
     i19 = 0;
     i8 = 9;
     break;
    } else {
     i30 = i24;
     i20 = i25;
     i21 = i29;
     i22 = 1;
     i24 = i15;
     i23 = i30;
    }
   }
  }
 } else {
  i16 = i1;
  i17 = 1;
  i18 = i5;
  i19 = i6;
  i8 = 9;
 } while (0);
 if ((i8 | 0) == 9) if (!i19) {
  i26 = i17;
  i27 = i18;
  i28 = i16;
  i8 = 10;
 }
 if ((i8 | 0) == 10) {
  _cycle(i2, i11, i26);
  _sift(i28, i2, i3, i27, i7);
 }
 STACKTOP = i9;
 return;
}

function _fix_input_buffer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 while (1) {
  i5 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
  HEAP32[i7 >> 2] = i5;
  if ((i5 | 0) < 0) break;
  if (HEAP32[26627] | 0) if ((HEAP32[i7 >> 2] | 0) >= 2 ? (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 155 : 0) {
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 2;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - 2;
  } else i3 = 6; else i3 = 6;
  do if ((i3 | 0) == 6) {
   i3 = 0;
   if (!(HEAP32[26627] | 0)) if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 155) {
    i5 = HEAP32[i8 >> 2] | 0;
    _memmove(i5 + 3 | 0, i5 + 1 | 0, HEAP32[i7 >> 2] | 0) | 0;
    i5 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = -128;
    i5 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = -3;
    HEAP8[HEAP32[i8 >> 2] >> 0] = 81;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
    break;
   }
   if (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) {
    if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) != 128) break;
    if ((HEAP32[i7 >> 2] | 0) >= 2) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) == 253) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] | 0) == 96) break;
   }
   i5 = HEAP32[i8 >> 2] | 0;
   _memmove(i5 + 3 | 0, i5 + 1 | 0, HEAP32[i7 >> 2] | 0) | 0;
   if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 128) i9 = 88; else if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) i9 = 88; else i9 = (0 - (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0) >>> 8 & 255;
   HEAP8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] = i9;
   if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 128) i10 = 254; else if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) i10 = 255; else i10 = 0 - (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) & 255;
   HEAP8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] = i10;
   HEAP8[HEAP32[i8 >> 2] >> 0] = -128;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 2;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 2;
  } while (0);
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 HEAP8[HEAP32[i8 >> 2] >> 0] = 0;
 STACKTOP = i4;
 return HEAP32[i6 >> 2] | 0;
}

function _n_swapchar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAPU8[(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) >> 0] | 0)) if (!(_vim_strchr(HEAP32[27029] | 0, 126) | 0)) {
  _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 _prep_redo_cmd(HEAP32[i3 >> 2] | 0);
 if (!(_u_save_cursor() | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2];
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) <= 0) break;
  i1 = _swapchar(HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0, (HEAP32[26881] | 0) + 24 | 0) | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | i1;
  _inc_cursor() | 0;
  if (!(_gchar_cursor() | 0)) {
   if (!(_vim_strchr(HEAP32[27029] | 0, 126) | 0)) break;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) break;
   i1 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
   if ((HEAP32[i4 >> 2] | 0) > 1) {
    if (!(_u_savesub(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0)) break;
    _u_clearline();
   }
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 }
 _check_cursor();
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _changed_lines(HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1 | 0, 0);
 i6 = (HEAP32[26773] | 0) + 476 | 0;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 i5 = (HEAP32[26773] | 0) + 492 | 0;
 i6 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 if ((HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 i6 = (HEAP32[26773] | 0) + 492 + 4 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
 STACKTOP = i2;
 return;
}

function _highlight_list_arg(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i9 = i8;
 i10 = i8 + 36 | 0;
 i11 = i8 + 32 | 0;
 i12 = i8 + 28 | 0;
 i13 = i8 + 24 | 0;
 i14 = i8 + 20 | 0;
 i15 = i8 + 16 | 0;
 i16 = i8 + 12 | 0;
 i17 = i8 + 40 | 0;
 i18 = i8 + 8 | 0;
 i19 = i8 + 4 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i13 >> 2] = i3;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i16 >> 2] = i6;
 if (HEAP32[26834] | 0) {
  HEAP32[i10 >> 2] = 0;
  i20 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i8;
  return i20 | 0;
 }
 if ((HEAP32[i13 >> 2] | 0) == 2) {
  if (HEAP32[i15 >> 2] | 0) i7 = 6;
 } else if (HEAP32[i14 >> 2] | 0) i7 = 6;
 if ((i7 | 0) == 6) {
  HEAP32[i18 >> 2] = i17;
  L10 : do if ((HEAP32[i13 >> 2] | 0) == 3) {
   HEAP32[i9 >> 2] = (HEAP32[i14 >> 2] | 0) - 1;
   _sprintf(i17, 78969, i9) | 0;
  } else {
   if ((HEAP32[i13 >> 2] | 0) == 2) {
    HEAP32[i18 >> 2] = HEAP32[i15 >> 2];
    break;
   }
   HEAP8[i17 >> 0] = 0;
   HEAP32[i19 >> 2] = 0;
   while (1) {
    if (!(HEAP32[30340 + (HEAP32[i19 >> 2] << 2) >> 2] | 0)) break L10;
    if (HEAP32[i14 >> 2] & HEAP32[30340 + (HEAP32[i19 >> 2] << 2) >> 2] | 0) {
     if (HEAPU8[i17 >> 0] | 0) _vim_strcat(i17, 84434, 100);
     _vim_strcat(i17, HEAP32[30300 + (HEAP32[i19 >> 2] << 2) >> 2] | 0, 100);
     HEAP32[i14 >> 2] = HEAP32[i14 >> 2] & ~HEAP32[30340 + (HEAP32[i19 >> 2] << 2) >> 2];
    }
    HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + 1;
   }
  } while (0);
  i19 = HEAP32[i12 >> 2] | 0;
  i14 = _vim_strsize(HEAP32[i18 >> 2] | 0) | 0;
  i17 = i14 + (_strlen(HEAP32[i16 >> 2] | 0) | 0) + 1 | 0;
  _syn_list_header(i19, i17, HEAP32[i11 >> 2] | 0) | 0;
  HEAP32[i12 >> 2] = 1;
  if (!(HEAP32[26834] | 0)) {
   if (HEAP8[HEAP32[i16 >> 2] >> 0] | 0) {
    _msg_puts_attr(HEAP32[i16 >> 2] | 0, HEAP32[27051] | 0);
    _msg_puts_attr(77436, HEAP32[27051] | 0);
   }
   _msg_outtrans(HEAP32[i18 >> 2] | 0) | 0;
  }
 }
 HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
 i20 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i8;
 return i20 | 0;
}

function _buf_freeall(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = (HEAP32[i4 >> 2] | 0) == (HEAP32[26773] | 0) & 1;
 if (HEAP32[26881] | 0) i11 = (HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) == (HEAP32[i4 >> 2] | 0); else i11 = 0;
 HEAP32[i8 >> 2] = i11 & 1;
 HEAP32[i9 >> 2] = HEAP32[26881];
 HEAP32[i10 >> 2] = HEAP32[26886];
 i11 = (HEAP32[i4 >> 2] | 0) + 64 | 0;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 _set_bufref(i7, HEAP32[i4 >> 2] | 0);
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) if (_apply_autocmds(12, HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, 0, HEAP32[i4 >> 2] | 0) | 0) if (!(_bufref_valid(i7) | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[i5 >> 2] & 1 | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 596 >> 2] | 0) if (_apply_autocmds(1, HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, 0, HEAP32[i4 >> 2] | 0) | 0) if (!(_bufref_valid(i7) | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[i5 >> 2] & 2 | 0) if (_apply_autocmds(15, HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, 0, HEAP32[i4 >> 2] | 0) | 0) if (!(_bufref_valid(i7) | 0)) {
  STACKTOP = i3;
  return;
 }
 i7 = (HEAP32[i4 >> 2] | 0) + 64 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 if (HEAP32[i8 >> 2] | 0) if ((HEAP32[26881] | 0) != (HEAP32[i9 >> 2] | 0)) if (_win_valid_any_tab(HEAP32[i9 >> 2] | 0) | 0) {
  _block_autocmds();
  _goto_tabpage_win(HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0);
  _unblock_autocmds();
 }
 if (!(HEAP32[i6 >> 2] | 0 ? 1 : (HEAP32[i4 >> 2] | 0) != (HEAP32[26773] | 0))) {
  STACKTOP = i3;
  return;
 }
 _ml_close(HEAP32[i4 >> 2] | 0, 1);
 HEAP32[HEAP32[i4 >> 2] >> 2] = 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  _u_blockfree(HEAP32[i4 >> 2] | 0);
  _u_clearall(HEAP32[i4 >> 2] | 0);
 }
 i5 = (HEAP32[i4 >> 2] | 0) + 60 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -65;
 STACKTOP = i3;
 return;
}

function _nfa_reg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 do if ((HEAP32[i5 >> 2] | 0) == 1) if ((HEAP32[26387] | 0) >= 10) {
  _emsg(73061) | 0;
  HEAP32[26719] = 1;
  HEAP32[i4 >> 2] = 0;
  break;
 } else {
  i1 = HEAP32[26387] | 0;
  HEAP32[26387] = i1 + 1;
  HEAP32[i6 >> 2] = i1;
  i2 = 5;
  break;
 } else i2 = 5; while (0);
 do if ((i2 | 0) == 5) {
  if (!(_nfa_regbranch() | 0)) {
   HEAP32[i4 >> 2] = 0;
   break;
  }
  while (1) {
   if ((_peekchr() | 0) != -132) {
    i2 = 15;
    break;
   }
   _skipchr();
   if (!(_nfa_regbranch() | 0)) {
    i2 = 10;
    break;
   }
   if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
    i2 = 13;
    break;
   }
   i1 = HEAP32[26382] | 0;
   HEAP32[26382] = i1 + 4;
   HEAP32[i1 >> 2] = -1013;
  }
  if ((i2 | 0) == 10) {
   HEAP32[i4 >> 2] = 0;
   break;
  } else if ((i2 | 0) == 13) {
   HEAP32[i4 >> 2] = 0;
   break;
  } else if ((i2 | 0) == 15) {
   if (HEAP32[i5 >> 2] | 0) if ((_getchr() | 0) != -215) {
    i1 = (HEAP32[26391] | 0) == 4 ? 114072 : 73093;
    if ((HEAP32[i5 >> 2] | 0) == 3) {
     _emsg2(73095, i1) | 0;
     HEAP32[26719] = 1;
     HEAP32[i4 >> 2] = 0;
     break;
    } else {
     _emsg2(73116, i1) | 0;
     HEAP32[26719] = 1;
     HEAP32[i4 >> 2] = 0;
     break;
    }
   }
   if (!(HEAP32[i5 >> 2] | 0)) if (_peekchr() | 0) if ((_peekchr() | 0) == -215) {
    _emsg2(73135, (HEAP32[26391] | 0) == 4 ? 114072 : 73093) | 0;
    HEAP32[26719] = 1;
    HEAP32[i4 >> 2] = 0;
    break;
   } else {
    _emsg(73154) | 0;
    HEAP32[26719] = 1;
    HEAP32[i4 >> 2] = 0;
    break;
   }
   if ((HEAP32[i5 >> 2] | 0) == 1) {
    HEAP8[111107 + (HEAP32[i6 >> 2] | 0) >> 0] = 1;
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     HEAP32[i4 >> 2] = 0;
     break;
    }
    i1 = (HEAP32[i6 >> 2] | 0) + -966 | 0;
    i7 = HEAP32[26382] | 0;
    HEAP32[26382] = i7 + 4;
    HEAP32[i7 >> 2] = i1;
   }
   HEAP32[i4 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 _mch_early_init();
 _memset(108736, 0, 160) | 0;
 HEAP32[27184] = HEAP32[i6 >> 2];
 HEAP32[27185] = HEAP32[i7 >> 2];
 HEAP32[27217] = 1;
 HEAP32[27222] = -1;
 _time(0) | 0;
 HEAP32[i8 >> 2] = 1;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  if (!(_strcasecmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0, 94423) | 0)) {
   i3 = 4;
   break;
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 4) HEAP32[27189] = 1;
 _common_init(108736);
 _parse_command_name(108736);
 _command_line_scan(108736);
 HEAP32[26628] = 1;
 if ((HEAP32[26868] | 0) > 0) HEAP32[27186] = _alist_name(HEAP32[26872] | 0) | 0;
 HEAP32[26814] = (HEAP32[26814] | 0) + 1;
 if ((HEAP32[26816] | 0) != 0 & (HEAP32[27186] | 0) == 0) HEAP32[27217] = 0;
 if (HEAP32[26628] | 0) HEAP32[27217] = 0;
 _mch_init();
 _check_tty(108736);
 if (HEAP32[26787] | 0) _setvbuf(HEAP32[10243] | 0, 0, 1, 0) | 0;
 if (!((HEAP32[26868] | 0) <= 1 | (HEAP32[26787] | 0) != 0)) {
  HEAP32[i5 >> 2] = HEAP32[26868];
  _printf(94431, i5) | 0;
 }
 if (!((HEAP32[27217] | 0) == 0 | (HEAP32[26787] | 0) != 0)) {
  _termcapinit(HEAP32[27220] | 0);
  _screen_start();
 }
 _ui_get_shellsize() | 0;
 _win_init_size();
 HEAP32[26876] = (HEAP32[10173] | 0) - (HEAP32[26875] | 0);
 HEAP32[26877] = HEAP32[26876];
 _screenalloc(0);
 _set_init_2();
 HEAP32[26710] = 1;
 HEAP32[26720] = 1;
 _init_mappings();
 _init_highlight(1, 0);
 if (!(HEAP32[27188] | 0)) {
  _exe_pre_commands(108736);
  _source_startup_scripts(108736);
  i9 = _vim_main2() | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 if (_strcmp(HEAP32[27188] | 0, 94449) | 0) if (_strcmp(HEAP32[27188] | 0, 94454) | 0) {
  _exe_pre_commands(108736);
  _source_startup_scripts(108736);
  i9 = _vim_main2() | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 HEAP32[26878] = 0;
 _exe_pre_commands(108736);
 _source_startup_scripts(108736);
 i9 = _vim_main2() | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _get_literal() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i6 = i1 + 4 | 0;
 i7 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 if (HEAP32[26834] | 0) {
  HEAP32[i2 >> 2] = 3;
  i8 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 if (HEAP32[26627] | 0) HEAP32[26804] = (HEAP32[26804] | 0) + 1;
 HEAP32[26802] = (HEAP32[26802] | 0) + 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 L8 : while (1) {
  HEAP32[i4 >> 2] = _plain_vgetc() | 0;
  do if ((HEAP32[i4 >> 2] | 0) == 120 | (HEAP32[i4 >> 2] | 0) == 88) HEAP32[i6 >> 2] = 1; else {
   if ((HEAP32[i4 >> 2] | 0) == 111 | (HEAP32[i4 >> 2] | 0) == 79) {
    HEAP32[i7 >> 2] = 1;
    break;
   }
   do if (HEAP32[i6 >> 2] | 0) {
    if (!(_vim_isxdigit(HEAP32[i4 >> 2] | 0) | 0)) break L8;
    i9 = HEAP32[i3 >> 2] << 4;
    HEAP32[i3 >> 2] = i9 + (_hex2nr(HEAP32[i4 >> 2] | 0) | 0);
   } else {
    i9 = HEAP32[i4 >> 2] | 0;
    if (HEAP32[i7 >> 2] | 0) {
     if ((i9 | 0) < 48 | (HEAP32[i4 >> 2] | 0) > 55) break L8;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] << 3) + (HEAP32[i4 >> 2] | 0) - 48;
     break;
    } else {
     if ((i9 - 48 | 0) >>> 0 >= 10) break L8;
     HEAP32[i3 >> 2] = ((HEAP32[i3 >> 2] | 0) * 10 | 0) + (HEAP32[i4 >> 2] | 0) - 48;
     break;
    }
   } while (0);
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  } while (0);
  if ((HEAP32[i3 >> 2] | 0) > 255) HEAP32[i3 >> 2] = 255;
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  if (HEAP32[i6 >> 2] | 0) {
   if ((i9 | 0) >= 2) break;
  } else if ((i9 | 0) >= 3) break;
 }
 do if (!(HEAP32[i5 >> 2] | 0)) if ((HEAP32[i4 >> 2] | 0) == -22783) {
  HEAP32[i3 >> 2] = 10;
  HEAP32[i4 >> 2] = 0;
  break;
 } else {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i4 >> 2] = 0;
  break;
 } while (0);
 if (!(HEAP32[i3 >> 2] | 0)) HEAP32[i3 >> 2] = 10;
 HEAP32[26802] = (HEAP32[26802] | 0) + -1;
 if (HEAP32[26627] | 0) HEAP32[26804] = (HEAP32[26804] | 0) + -1;
 if (HEAP32[i4 >> 2] | 0) _vungetc(HEAP32[i4 >> 2] | 0);
 HEAP32[26834] = 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 i8 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i8 | 0;
}

function _is_ident(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 L1 : while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
   i3 = 23;
   break;
  }
  if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0)) {
   i3 = 23;
   break;
  }
  do if (HEAP32[i10 >> 2] | 0) {
   if ((HEAP32[i11 >> 2] | 0) != 92) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) == (HEAP32[i10 >> 2] | 0)) HEAP32[i10 >> 2] = 0;
  } else {
   if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) == 34) {
    if (!(HEAP32[i9 >> 2] | 0)) i3 = 11;
   } else if (!(HEAP32[i9 >> 2] | 0 ? 1 : (HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) != 39)) i3 = 11;
   if ((i3 | 0) == 11) {
    i3 = 0;
    HEAP32[i10 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0];
    break;
   }
   i2 = HEAP32[i11 >> 2] | 0;
   if (HEAP32[i9 >> 2] | 0) {
    if ((i2 | 0) != 42) break;
    if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) != 47) break;
    HEAP32[i9 >> 2] = 0;
    break;
   }
   if ((i2 | 0) == 47) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) == 42) {
    HEAP32[i9 >> 2] = 1;
    break;
   }
   if ((HEAP32[i11 >> 2] | 0) == 47) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) == 47) {
    i3 = 21;
    break L1;
   }
  } while (0);
  HEAP32[i11 >> 2] = HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0];
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 21) {
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 } else if ((i3 | 0) == 23) {
  HEAP32[i5 >> 2] = ((HEAP32[i9 >> 2] | 0) == 0 ? (HEAP32[i10 >> 2] | 0) == 0 : 0) & 1;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 return 0;
}

function _add_buff(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[i7 >> 2] | 0) < 0) HEAP32[i7 >> 2] = _strlen(HEAP32[i6 >> 2] | 0) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 i3 = HEAP32[i5 >> 2] | 0;
 do if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  HEAP32[i3 + 16 >> 2] = 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = HEAP32[i5 >> 2];
 } else if (!(HEAP32[i3 + 8 >> 2] | 0)) {
  _iemsg(56126);
  STACKTOP = i4;
  return;
 } else {
  if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0)) break;
  i2 = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 4 | 0;
  i1 = i2 | 0;
  i10 = i2 + (HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) | 0;
  _memmove(i1 | 0, i10 | 0, (_strlen((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 4 + (HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) | 0) | 0) + 1 | 0) | 0;
  break;
 } while (0);
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = 0;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) {
  HEAP32[i9 >> 2] = _strlen((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0) | 0;
  _vim_strncpy((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + 4 + (HEAP32[i9 >> 2] | 0) | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  i3 = (HEAP32[i5 >> 2] | 0) + 16 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) < 20) HEAP32[i9 >> 2] = 20; else HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i8 >> 2] = _lalloc(8 + (HEAP32[i9 >> 2] | 0) | 0, 1) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
 _vim_strncpy((HEAP32[i8 >> 2] | 0) + 4 | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] >> 2];
 HEAP32[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] >> 2] = HEAP32[i8 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i4;
 return;
}

function ___stpncpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i4 = 0;
 i5 = i2;
 L1 : do if (!((i5 ^ i1) & 3)) {
  i6 = (i3 | 0) != 0;
  if (i6 & (i5 & 3 | 0) != 0) {
   i7 = i3;
   i8 = i2;
   i9 = i1;
   while (1) {
    i10 = HEAP8[i8 >> 0] | 0;
    HEAP8[i9 >> 0] = i10;
    if (!(i10 << 24 >> 24)) {
     i11 = i9;
     i12 = i7;
     break L1;
    }
    i10 = i7 + -1 | 0;
    i13 = i8 + 1 | 0;
    i14 = i9 + 1 | 0;
    i15 = (i10 | 0) != 0;
    if (i15 & (i13 & 3 | 0) != 0) {
     i7 = i10;
     i8 = i13;
     i9 = i14;
    } else {
     i16 = i10;
     i17 = i13;
     i18 = i14;
     i19 = i15;
     break;
    }
   }
  } else {
   i16 = i3;
   i17 = i2;
   i18 = i1;
   i19 = i6;
  }
  if (i19) if (!(HEAP8[i17 >> 0] | 0)) {
   i11 = i18;
   i12 = i16;
  } else {
   L11 : do if (i16 >>> 0 > 3) {
    i9 = i18;
    i8 = i17;
    i7 = i16;
    while (1) {
     i15 = HEAP32[i8 >> 2] | 0;
     if ((i15 & -2139062144 ^ -2139062144) & i15 + -16843009 | 0) {
      i20 = i8;
      i21 = i9;
      i22 = i7;
      break L11;
     }
     HEAP32[i9 >> 2] = i15;
     i15 = i7 + -4 | 0;
     i14 = i8 + 4 | 0;
     i13 = i9 + 4 | 0;
     if (i15 >>> 0 > 3) {
      i9 = i13;
      i8 = i14;
      i7 = i15;
     } else {
      i20 = i14;
      i21 = i13;
      i22 = i15;
      break;
     }
    }
   } else {
    i20 = i17;
    i21 = i18;
    i22 = i16;
   } while (0);
   i23 = i20;
   i24 = i21;
   i25 = i22;
   i4 = 13;
  } else {
   i11 = i18;
   i12 = 0;
  }
 } else {
  i23 = i2;
  i24 = i1;
  i25 = i3;
  i4 = 13;
 } while (0);
 L17 : do if ((i4 | 0) == 13) if (!i25) {
  i11 = i24;
  i12 = 0;
 } else {
  i3 = i23;
  i1 = i24;
  i2 = i25;
  while (1) {
   i18 = HEAP8[i3 >> 0] | 0;
   HEAP8[i1 >> 0] = i18;
   if (!(i18 << 24 >> 24)) {
    i11 = i1;
    i12 = i2;
    break L17;
   }
   i2 = i2 + -1 | 0;
   i18 = i1 + 1 | 0;
   if (!i2) {
    i11 = i18;
    i12 = 0;
    break;
   } else {
    i3 = i3 + 1 | 0;
    i1 = i18;
   }
  }
 } while (0);
 _memset(i11 | 0, 0, i12 | 0) | 0;
 return i11 | 0;
}

function _mouse_comp_pos(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 36 | 0;
 i8 = i6 + 32 | 0;
 i9 = i6 + 28 | 0;
 i10 = i6 + 24 | 0;
 i11 = i6 + 20 | 0;
 i12 = i6 + 16 | 0;
 i13 = i6 + 12 | 0;
 i14 = i6 + 8 | 0;
 i15 = i6 + 4 | 0;
 i16 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
 HEAP32[i12 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
 HEAP32[i14 >> 2] = 0;
 HEAP32[i13 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2];
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) <= 0) break;
  HEAP32[i16 >> 2] = _plines_win(HEAP32[i7 >> 2] | 0, HEAP32[i13 >> 2] | 0, 1) | 0;
  if ((HEAP32[i16 >> 2] | 0) > (HEAP32[i12 >> 2] | 0)) break;
  if ((HEAP32[i13 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] >> 2] | 0)) {
   i5 = 5;
   break;
  }
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i16 >> 2] | 0);
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 5) HEAP32[i14 >> 2] = 1;
 if (!(HEAP32[i14 >> 2] | 0)) {
  i5 = _win_col_off(HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i15 >> 2] = i5 - (_win_col_off2(HEAP32[i7 >> 2] | 0) | 0);
  if ((HEAP32[i11 >> 2] | 0) < (HEAP32[i15 >> 2] | 0)) HEAP32[i11 >> 2] = HEAP32[i15 >> 2];
  i5 = Math_imul(HEAP32[i12 >> 2] | 0, (HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] | 0) - (HEAP32[i15 >> 2] | 0) | 0) | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i5;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 80 >> 2] | 0);
 }
 if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 200 + 36 >> 2] | 0)) HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 76 >> 2] | 0);
 i5 = _win_col_off(HEAP32[i7 >> 2] | 0) | 0;
 i7 = (HEAP32[i11 >> 2] | 0) - i5 | 0;
 HEAP32[i11 >> 2] = i7;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) < 0 ? 0 : i7;
 HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i11 >> 2];
 HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i12 >> 2];
 HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i13 >> 2];
 STACKTOP = i6;
 return HEAP32[i14 >> 2] | 0;
}

function _AppendToRedobuffLit(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 if (HEAP32[25628] | 0) {
  STACKTOP = i4;
  return;
 }
 while (1) {
  i2 = HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i6 >> 2] | 0) < 0) i10 = (HEAPU8[i2 >> 0] | 0) != 0 & 1; else i10 = (i2 - (HEAP32[i5 >> 2] | 0) | 0) < (HEAP32[i6 >> 2] | 0) & 1;
  if (!i10) {
   i3 = 31;
   break;
  }
  HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
  while (1) {
   if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) >= 32) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) < 127) if ((HEAP32[i6 >> 2] | 0) < 0) i11 = 1; else i11 = ((HEAP32[i7 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0) < (HEAP32[i6 >> 2] | 0); else i11 = 0; else i11 = 0;
   i12 = HEAP32[i7 >> 2] | 0;
   if (!i11) break;
   HEAP32[i7 >> 2] = i12 + 1;
  }
  do if (!(HEAPU8[i12 >> 0] | 0)) {
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) != 48) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + -1 >> 0] | 0) != 94) break;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  } while (0);
  if ((HEAP32[i7 >> 2] | 0) >>> 0 > (HEAP32[i9 >> 2] | 0) >>> 0) {
   i2 = HEAP32[i9 >> 2] | 0;
   _add_buff(101908, i2 | 0, (HEAP32[i7 >> 2] | 0) - i2 | 0);
  }
  if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) {
   i3 = 31;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) >= 0) if (((HEAP32[i7 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0) >= (HEAP32[i6 >> 2] | 0)) {
   i3 = 31;
   break;
  }
  i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i2 + 1;
  HEAP32[i8 >> 2] = HEAPU8[i2 >> 0];
  if ((HEAP32[i8 >> 2] | 0) < 32 | (HEAP32[i8 >> 2] | 0) == 127) i3 = 26; else if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) if ((HEAP32[i8 >> 2] | 0) == 48 | (HEAP32[i8 >> 2] | 0) == 94) i3 = 26;
  if ((i3 | 0) == 26) {
   i3 = 0;
   _add_char_buff(101908, 22);
  }
  if ((HEAP32[i8 >> 2] | 0) == 48 ? (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 0 : 0) _add_buff(101908, 56151, 3); else _add_char_buff(101908, HEAP32[i8 >> 2] | 0);
 }
 if ((i3 | 0) == 31) {
  STACKTOP = i4;
  return;
 }
}

function _win_move_after(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[i4 >> 2] | 0)) {
  if ((HEAP32[i4 >> 2] | 0) == (HEAP32[27112] | 0)) {
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + 92 >> 2];
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 92 >> 2] = HEAP32[i2 + 92 >> 2];
   HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] = HEAP32[i6 >> 2];
   if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + 104 >> 2] | 0) == 1) {
    HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + 104 >> 2] = 0;
    i2 = (HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + 20 >> 2] | 0) + 4 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - 1;
    HEAP32[(HEAP32[i4 >> 2] | 0) + 104 >> 2] = 1;
    i2 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) + 4 | 0;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
   }
  } else if ((HEAP32[i5 >> 2] | 0) == (HEAP32[27112] | 0)) {
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2];
   HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2];
   HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2] = HEAP32[i6 >> 2];
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 104 >> 2] | 0) == 1) {
    HEAP32[(HEAP32[i5 >> 2] | 0) + 104 >> 2] = 1;
    i6 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0) + 4 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    HEAP32[(HEAP32[i4 >> 2] | 0) + 104 >> 2] = 0;
    i6 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) + 4 | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - 1;
   }
  }
  _win_remove(HEAP32[i4 >> 2] | 0, 0);
  _frame_remove(HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0);
  _win_append(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
  _frame_append(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0);
  _win_comp_pos() | 0;
  _redraw_later(40);
 }
 _win_enter(HEAP32[i4 >> 2] | 0, 0);
 STACKTOP = i3;
 return;
}

function _search_regcomp(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 28 | 0;
 i9 = i7 + 24 | 0;
 i10 = i7 + 20 | 0;
 i11 = i7 + 16 | 0;
 i12 = i7 + 12 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[26719] = 0;
 HEAP32[i14 >> 2] = HEAP32[26946];
 if (!(HEAP32[i9 >> 2] | 0)) i6 = 3; else if (!(HEAPU8[HEAP32[i9 >> 2] >> 0] | 0)) i6 = 3;
 do if ((i6 | 0) == 3) {
  if ((HEAP32[i11 >> 2] | 0) == 2) HEAP32[i15 >> 2] = HEAP32[26465]; else HEAP32[i15 >> 2] = HEAP32[i11 >> 2];
  if (HEAP32[30064 + ((HEAP32[i15 >> 2] | 0) * 28 | 0) >> 2] | 0) {
   HEAP32[i9 >> 2] = HEAP32[30064 + ((HEAP32[i15 >> 2] | 0) * 28 | 0) >> 2];
   HEAP32[i14 >> 2] = HEAP32[30064 + ((HEAP32[i15 >> 2] | 0) * 28 | 0) + 4 >> 2];
   HEAP32[26736] = HEAP32[30064 + ((HEAP32[i15 >> 2] | 0) * 28 | 0) + 8 >> 2];
   break;
  }
  if ((HEAP32[i11 >> 2] | 0) == 1) _emsg(93083) | 0; else _emsg(93155) | 0;
  HEAP32[26719] = 1;
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 } while (0);
 HEAP32[26466] = HEAP32[i9 >> 2];
 if (!((HEAP32[i12 >> 2] & 1024 | 0) != 0 | (HEAP32[27134] | 0) != 0)) {
  if ((HEAP32[i10 >> 2] | 0) == 0 | (HEAP32[i10 >> 2] | 0) == 2) _save_re_pat(0, HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0);
  if ((HEAP32[i10 >> 2] | 0) == 1 | (HEAP32[i10 >> 2] | 0) == 2) _save_re_pat(1, HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0);
 }
 i10 = _ignorecase(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i13 >> 2] | 0) + 164 >> 2] = i10;
 HEAP32[(HEAP32[i13 >> 2] | 0) + 168 >> 2] = 0;
 i10 = _vim_regcomp(HEAP32[i9 >> 2] | 0, HEAP32[i14 >> 2] | 0 ? 1 : 0) | 0;
 HEAP32[HEAP32[i13 >> 2] >> 2] = i10;
 if (!(HEAP32[HEAP32[i13 >> 2] >> 2] | 0)) {
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 } else {
  HEAP32[i8 >> 2] = 1;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 }
 return 0;
}

function _find_match_text(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 36 | 0;
 i7 = i5 + 32 | 0;
 i8 = i5 + 28 | 0;
 i9 = i5 + 24 | 0;
 i10 = i5 + 20 | 0;
 i11 = i5 + 16 | 0;
 i12 = i5 + 12 | 0;
 i13 = i5 + 8 | 0;
 i14 = i5 + 4 | 0;
 i15 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  HEAP32[i15 >> 2] = 1;
  HEAP32[i14 >> 2] = 1;
  HEAP32[i13 >> 2] = 0;
  while (1) {
   if (!(HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) >> 0] | 0)) break;
   HEAP32[i11 >> 2] = HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) >> 0];
   HEAP32[i12 >> 2] = HEAPU8[(HEAP32[26325] | 0) + (HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] | 0) >> 0];
   if ((HEAP32[i11 >> 2] | 0) != (HEAP32[i12 >> 2] | 0)) {
    if (!(HEAP32[26323] | 0)) {
     i4 = 7;
     break;
    }
    i7 = _tolower(HEAP32[i11 >> 2] | 0) | 0;
    if ((i7 | 0) != (_tolower(HEAP32[i12 >> 2] | 0) | 0)) {
     i4 = 7;
     break;
    }
   }
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  if ((i4 | 0) == 7) {
   i4 = 0;
   HEAP32[i15 >> 2] = 0;
  }
  if (HEAP32[i15 >> 2] | 0) break;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  if (!(_skip_to_start(HEAP32[i8 >> 2] | 0, i10) | 0)) {
   i4 = 16;
   break;
  }
 }
 if ((i4 | 0) == 16) {
  HEAP32[i6 >> 2] = 0;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 }
 _cleanup_subexpr();
 if (!(HEAP32[26312] | 0)) {
  HEAP32[HEAP32[26316] >> 2] = HEAP32[26326];
  HEAP32[(HEAP32[26316] | 0) + 4 >> 2] = HEAP32[i10 >> 2];
  HEAP32[HEAP32[26317] >> 2] = HEAP32[26326];
  HEAP32[(HEAP32[26317] | 0) + 4 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
 } else {
  HEAP32[HEAP32[26314] >> 2] = (HEAP32[26325] | 0) + (HEAP32[i10 >> 2] | 0);
  HEAP32[HEAP32[26315] >> 2] = (HEAP32[26325] | 0) + (HEAP32[i10 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
 }
 HEAP32[i6 >> 2] = 1;
 i16 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i16 | 0;
}

function _parse_builtin_tcap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 20 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _find_builtin_term(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = _term_is_8bit(HEAP32[i4 >> 2] | 0) | 0;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 8;
 while (1) {
  if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
   i2 = 21;
   break;
  }
  if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 257) {
   i2 = 21;
   break;
  }
  i4 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
  do if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) >= 0) {
   if (HEAP32[106076 + (i4 << 2) >> 2] | 0) if ((HEAP32[106076 + (HEAP32[HEAP32[i5 >> 2] >> 2] << 2) >> 2] | 0) != 114072) break;
   if (HEAP32[i7 >> 2] | 0) if (_term_7to8bit(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0) {
    HEAP32[i8 >> 2] = _vim_strsave(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0;
    if (!(HEAP32[i8 >> 2] | 0)) break;
    HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
    while (1) {
     if (!(HEAP8[HEAP32[i9 >> 2] >> 0] | 0)) break;
     if (_term_7to8bit(HEAP32[i9 >> 2] | 0) | 0) {
      i1 = (_term_7to8bit(HEAP32[i9 >> 2] | 0) | 0) & 255;
      HEAP8[HEAP32[i9 >> 2] >> 0] = i1;
      i1 = HEAP32[i9 >> 2] | 0;
      _strcpy(i1 + 1 | 0, i1 + 2 | 0) | 0;
     }
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    }
    HEAP32[106076 + (HEAP32[HEAP32[i5 >> 2] >> 2] << 2) >> 2] = HEAP32[i8 >> 2];
    _set_term_option_alloced(106076 + (HEAP32[HEAP32[i5 >> 2] >> 2] << 2) | 0);
    break;
   }
   HEAP32[106076 + (HEAP32[HEAP32[i5 >> 2] >> 2] << 2) >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
  } else {
   HEAP8[i6 >> 0] = 0 - i4;
   HEAP8[i6 + 1 >> 0] = (0 - (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0) >>> 8;
   if (!(_find_termcode(i6) | 0)) _add_termcode(i6, HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 8;
 }
 if ((i2 | 0) == 21) {
  STACKTOP = i3;
  return;
 }
}

function _syn_add_group(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
  if (!(_vim_isprintc(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0)) {
   i2 = 4;
   break;
  }
  if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 97 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 95) {
   i2 = 9;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 4) {
  _emsg(77237) | 0;
  _vim_free(HEAP32[i5 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 9) {
  _msg_source(HEAP32[27067] | 0);
  _msg(77279) | 0;
 }
 if (!(HEAP32[26490] | 0)) {
  HEAP32[26488] = 96;
  HEAP32[26489] = 10;
 }
 if ((HEAP32[26486] | 0) >= 2e4) {
  _emsg(77316) | 0;
  _vim_free(HEAP32[i5 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 if (!(_ga_grow(105944, 1) | 0)) {
  _vim_free(HEAP32[i5 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else {
  i2 = (HEAP32[26490] | 0) + ((HEAP32[26486] | 0) * 96 | 0) | 0;
  i6 = i2 + 96 | 0;
  do {
   HEAP32[i2 >> 2] = 0;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) < (i6 | 0));
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[26486] | 0) * 96 | 0) >> 2] = HEAP32[i5 >> 2];
  i2 = _vim_strsave_up(HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[26486] | 0) * 96 | 0) + 4 >> 2] = i2;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[26486] | 0) * 96 | 0) + 52 >> 2] = -11111;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[26486] | 0) * 96 | 0) + 48 >> 2] = -11111;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[26486] | 0) * 96 | 0) + 56 >> 2] = -11111;
  HEAP32[26486] = (HEAP32[26486] | 0) + 1;
  HEAP32[i4 >> 2] = HEAP32[26486];
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _ml_get_buf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 L1 : do if ((HEAP32[i7 >> 2] | 0) > (HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) {
  if (!(HEAP32[26047] | 0)) {
   HEAP32[26047] = (HEAP32[26047] | 0) + 1;
   _iemsgn(59272, HEAP32[i7 >> 2] | 0);
   HEAP32[26047] = (HEAP32[26047] | 0) + -1;
  }
 } else {
  if ((HEAP32[i7 >> 2] | 0) <= 0) HEAP32[i7 >> 2] = 1;
  if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
   HEAP32[i5 >> 2] = 114072;
   i12 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i12 | 0;
  }
  do if (HEAP32[26774] | 0 ? 1 : (HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) {
   _ml_flush_line(HEAP32[i6 >> 2] | 0);
   i3 = _ml_find_line(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 19) | 0;
   HEAP32[i9 >> 2] = i3;
   if (i3 | 0) {
    HEAP32[i10 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2];
    i3 = HEAP32[i10 >> 2] | 0;
    HEAP32[i11 >> 2] = (i3 | 0) + (HEAP32[i3 + 20 + ((HEAP32[i7 >> 2] | 0) - (HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] | 0) << 2) >> 2] & 2147483647);
    HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] = HEAP32[i11 >> 2];
    HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] = HEAP32[i7 >> 2];
    i3 = (HEAP32[i6 >> 2] | 0) + 8 | 0;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -3;
    break;
   }
   if (HEAP32[26047] | 0) break L1;
   HEAP32[26047] = (HEAP32[26047] | 0) + 1;
   _iemsgn(59304, HEAP32[i7 >> 2] | 0);
   HEAP32[26047] = (HEAP32[26047] | 0) + -1;
   break L1;
  } while (0);
  if (HEAP32[i8 >> 2] | 0) {
   i3 = (HEAP32[i6 >> 2] | 0) + 8 | 0;
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 12;
  }
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2];
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 } while (0);
 _strcpy(HEAP32[26882] | 0, 58829) | 0;
 HEAP32[i5 >> 2] = HEAP32[26882];
 i12 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i12 | 0;
}

function _ex_filetype(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 24 | 0;
 i5 = i2 + 20 | 0;
 i6 = i2 + 16 | 0;
 i7 = i2 + 12 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 if (!(HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0)) {
  if (HEAP32[25232] | 0) i8 = HEAP32[25231] | 0 ? 50768 : 50775; else i8 = 50771;
  if (HEAP32[25233] | 0) i9 = HEAP32[25231] | 0 ? 50768 : 50775; else i9 = 50771;
  HEAP32[i3 >> 2] = HEAP32[25231] | 0 ? 50768 : 50771;
  HEAP32[i3 + 4 >> 2] = i8;
  HEAP32[i3 + 8 >> 2] = i9;
  _smsg(50780, i3) | 0;
  STACKTOP = i2;
  return;
 }
 while (1) {
  if (!(_strncmp(HEAP32[i5 >> 2] | 0, 50824, 6) | 0)) {
   HEAP32[i6 >> 2] = 1;
   HEAP32[i5 >> 2] = _skipwhite((HEAP32[i5 >> 2] | 0) + 6 | 0) | 0;
   continue;
  }
  if (_strncmp(HEAP32[i5 >> 2] | 0, 64082, 6) | 0) break;
  HEAP32[i7 >> 2] = 1;
  HEAP32[i5 >> 2] = _skipwhite((HEAP32[i5 >> 2] | 0) + 6 | 0) | 0;
 }
 if (_strcmp(HEAP32[i5 >> 2] | 0, 50831) | 0) if (_strcmp(HEAP32[i5 >> 2] | 0, 50834) | 0) {
  if (_strcmp(HEAP32[i5 >> 2] | 0, 50878) | 0) {
   _emsg2(92476, HEAP32[i5 >> 2] | 0) | 0;
   STACKTOP = i2;
   return;
  }
  if (!((HEAP32[i6 >> 2] | 0) != 0 | (HEAP32[i7 >> 2] | 0) != 0)) {
   _source_runtime(50906, 1) | 0;
   HEAP32[25231] = 0;
   STACKTOP = i2;
   return;
  }
  if (HEAP32[i6 >> 2] | 0) {
   _source_runtime(50882, 1) | 0;
   HEAP32[25232] = 0;
  }
  if (!(HEAP32[i7 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  }
  _source_runtime(50895, 1) | 0;
  HEAP32[25233] = 0;
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[25231] | 0 ? (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 111 : 0)) {
  _source_runtime(50841, 1) | 0;
  HEAP32[25231] = 1;
  if (HEAP32[i6 >> 2] | 0) {
   _source_runtime(50854, 1) | 0;
   HEAP32[25232] = 1;
  }
  if (HEAP32[i7 >> 2] | 0) {
   _source_runtime(50867, 1) | 0;
   HEAP32[25233] = 1;
  }
 }
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 100) {
  STACKTOP = i2;
  return;
 }
 _do_doautocmd(53857, 1, 0) | 0;
 _do_modelines(0);
 STACKTOP = i2;
 return;
}

function _get_number(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 if (HEAP32[i7 >> 2] | 0) HEAP32[HEAP32[i7 >> 2] >> 2] = 0;
 if (HEAP32[26809] | 0) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[26802] = (HEAP32[26802] | 0) + 1;
 HEAP32[26804] = (HEAP32[26804] | 0) + 1;
 L8 : while (1) {
  _windgoto(HEAP32[26877] | 0, HEAP32[27043] | 0);
  HEAP32[i9 >> 2] = _safe_vgetc() | 0;
  do if (((HEAP32[i9 >> 2] | 0) - 48 | 0) >>> 0 < 10) {
   HEAP32[i8 >> 2] = ((HEAP32[i8 >> 2] | 0) * 10 | 0) + (HEAP32[i9 >> 2] | 0) - 48;
   _msg_putchar(HEAP32[i9 >> 2] | 0);
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
  } else if ((HEAP32[i9 >> 2] | 0) == -17515 | (HEAP32[i9 >> 2] | 0) == -20733 | (HEAP32[i9 >> 2] | 0) == -25195 | (HEAP32[i9 >> 2] | 0) == 8) {
   if ((HEAP32[i10 >> 2] | 0) > 0) {
    _msg_puts(59908);
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + -1;
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) / 10 | 0;
   break;
  } else {
   if ((HEAP32[i7 >> 2] | 0) != 0 & (HEAP32[i9 >> 2] | 0) == -11517) {
    i3 = 13;
    break L8;
   }
   if ((HEAP32[i8 >> 2] | 0) == 0 & (HEAP32[i9 >> 2] | 0) == 58 & (HEAP32[i6 >> 2] | 0) != 0) {
    i3 = 15;
    break L8;
   }
   if ((HEAP32[i9 >> 2] | 0) == 13 | (HEAP32[i9 >> 2] | 0) == 10 | (HEAP32[i9 >> 2] | 0) == 3 | (HEAP32[i9 >> 2] | 0) == 27) break L8; else break;
  } while (0);
 }
 if ((i3 | 0) == 13) {
  HEAP32[HEAP32[i7 >> 2] >> 2] = 1;
  HEAP32[i8 >> 2] = (HEAP32[27095] | 0) + 1;
 } else if ((i3 | 0) == 15) {
  _stuffcharReadbuff(58);
  if (!(HEAP32[26798] | 0)) HEAP32[26876] = HEAP32[26877];
  HEAP32[26829] = 1;
  HEAP32[26830] = 0;
 }
 HEAP32[26802] = (HEAP32[26802] | 0) + -1;
 HEAP32[26804] = (HEAP32[26804] | 0) + -1;
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _win_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _alist_unlink(HEAP32[(HEAP32[i4 >> 2] | 0) + 184 >> 2] | 0);
 _block_autocmds();
 _clear_winopt((HEAP32[i4 >> 2] | 0) + 200 | 0);
 _clear_winopt((HEAP32[i4 >> 2] | 0) + 248 | 0);
 if ((HEAP32[26768] | 0) == (HEAP32[i4 >> 2] | 0)) HEAP32[26768] = 0;
 HEAP32[i9 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i9 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] = 0;
  HEAP32[i9 >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
 }
 _win_free_lsize(HEAP32[i4 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 while (1) {
  i10 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 800 >> 2] | 0)) break;
  _vim_free(HEAP32[i10 + 316 + ((HEAP32[i6 >> 2] | 0) * 24 | 0) >> 2] | 0);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 _vim_free(HEAP32[i10 + 196 >> 2] | 0);
 HEAP32[i7 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 168 >> 2];
  while (1) {
   if (!(HEAP32[i8 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = 0;
   HEAP32[i8 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
  }
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2];
 }
 if (HEAP32[26627] | 0) {
  _gui_mch_destroy_scrollbar((HEAP32[i4 >> 2] | 0) + 812 | 0);
  _gui_mch_destroy_scrollbar((HEAP32[i4 >> 2] | 0) + 812 + 40 | 0);
 }
 if ((HEAP32[i4 >> 2] | 0) != (HEAP32[27113] | 0)) _win_remove(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 if (HEAP32[26744] | 0) {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = HEAP32[26753];
  HEAP32[26753] = HEAP32[i4 >> 2];
  _unblock_autocmds();
  STACKTOP = i3;
  return;
 } else {
  _vim_free(HEAP32[i4 >> 2] | 0);
  _unblock_autocmds();
  STACKTOP = i3;
  return;
 }
}

function _put_setstring(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6;
 i8 = i6 + 36 | 0;
 i9 = i6 + 32 | 0;
 i10 = i6 + 28 | 0;
 i11 = i6 + 24 | 0;
 i12 = i6 + 20 | 0;
 i13 = i6 + 16 | 0;
 i14 = i6 + 12 | 0;
 i15 = i6 + 8 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 i5 = HEAP32[i9 >> 2] | 0;
 i4 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i7 + 4 >> 2] = i4;
 if ((_fprintf(i5, 71681, i7) | 0) < 0) {
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i6;
  return i16 | 0;
 }
 L5 : do if (HEAP32[HEAP32[i12 >> 2] >> 2] | 0) {
  if ((HEAP32[i12 >> 2] | 0) == 107848) {
   HEAP32[i14 >> 2] = HEAP32[HEAP32[i12 >> 2] >> 2];
   do {
    if (!(HEAPU8[HEAP32[i14 >> 2] >> 0] | 0)) break L5;
    i7 = HEAP32[i9 >> 2] | 0;
   } while ((_put_escstr(i7, _str2special(i14, 0) | 0, 2) | 0) != 0);
   HEAP32[i8 >> 2] = 0;
   i16 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i6;
   return i16 | 0;
  }
  if (!(HEAP32[i13 >> 2] | 0)) {
   if (_put_escstr(HEAP32[i9 >> 2] | 0, HEAP32[HEAP32[i12 >> 2] >> 2] | 0, 2) | 0) break;
   HEAP32[i8 >> 2] = 0;
   i16 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i6;
   return i16 | 0;
  }
  HEAP32[i15 >> 2] = _alloc(4096) | 0;
  if (!(HEAP32[i15 >> 2] | 0)) {
   HEAP32[i8 >> 2] = 0;
   i16 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i6;
   return i16 | 0;
  }
  _home_replace(0, HEAP32[HEAP32[i12 >> 2] >> 2] | 0, HEAP32[i15 >> 2] | 0, 4096, 0);
  i7 = (_put_escstr(HEAP32[i9 >> 2] | 0, HEAP32[i15 >> 2] | 0, 2) | 0) == 0;
  _vim_free(HEAP32[i15 >> 2] | 0);
  if (i7) {
   HEAP32[i8 >> 2] = 0;
   i16 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i6;
   return i16 | 0;
  }
 } while (0);
 if ((_put_eol(HEAP32[i9 >> 2] | 0) | 0) < 0) {
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i6;
  return i16 | 0;
 } else {
  HEAP32[i8 >> 2] = 1;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i6;
  return i16 | 0;
 }
 return 0;
}

function _call_shell(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if ((HEAP32[26888] | 0) > 3) {
  _verbose_enter();
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i5 >> 2] = (i2 | 0) == 0 ? HEAP32[26977] | 0 : i2 | 0;
  _smsg(61472, i5) | 0;
  _out_char(10);
  _cursor_on();
  _verbose_leave();
 }
 if (!(HEAPU8[HEAP32[26977] >> 0] | 0)) {
  _emsg(93679) | 0;
  HEAP32[i9 >> 2] = -1;
  i11 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[26759] = (HEAP32[26759] | 0) + 1;
 _tag_freematch();
 if (!(HEAP32[i6 >> 2] | 0)) i3 = 7; else if (!(HEAPU8[HEAP32[26980] >> 0] | 0)) i3 = 7; else {
  HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
  if (HEAPU8[HEAP32[26981] >> 0] | 0) if (!(_strcmp(HEAP32[26980] | 0, 72081) | 0)) {
   HEAP32[i10 >> 2] = _vim_strsave_escaped_ext(HEAP32[i6 >> 2] | 0, HEAP32[26981] | 0, 94, 0) | 0;
   if (!(HEAP32[i10 >> 2] | 0)) HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
  }
  i5 = _strlen(HEAP32[i10 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = _alloc(i5 + ((_strlen(HEAP32[26980] | 0) | 0) << 1) + 1 | 0) | 0;
  if (HEAP32[i8 >> 2] | 0) {
   _strcpy(HEAP32[i8 >> 2] | 0, HEAP32[26980] | 0) | 0;
   _strcat(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
   i5 = HEAP32[i8 >> 2] | 0;
   if (!(_strcmp(HEAP32[26980] | 0, 72081) | 0)) i12 = 61509; else {
    i2 = (_strcmp(HEAP32[26980] | 0, 61503) | 0) == 0;
    i12 = i2 ? 61506 : HEAP32[26980] | 0;
   }
   _strcat(i5, i12) | 0;
   HEAP32[i9 >> 2] = _mch_call_shell(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   _vim_free(HEAP32[i8 >> 2] | 0);
  } else HEAP32[i9 >> 2] = -1;
  if ((HEAP32[i10 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) _vim_free(HEAP32[i10 >> 2] | 0);
 }
 if ((i3 | 0) == 7) HEAP32[i9 >> 2] = _mch_call_shell(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[26759] = (HEAP32[26759] | 0) + -1;
 _shell_resized_check();
 i11 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _vim_main2() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[26816] | 0) != 0 & (HEAP32[27186] | 0) == 0) {
  _recover_names(0, 1, 0, 0) | 0;
  _mch_exit(0);
 }
 _set_init_3();
 if (HEAP32[27221] | 0) HEAP32[26879] = 0;
 if (HEAP32[26628] | 0) {
  if ((HEAP32[26880] | 0) != 0 | (HEAP32[26711] | 0) != 0) _putchar(10) | 0;
  _gui_start();
  if ((HEAP32[26627] | 0) == 0 & (HEAP32[27187] | 0) != 0) _mch_exit(1);
 }
 HEAP32[10177] = 1;
 HEAP32[26720] = 0;
 if (!(HEAP32[26798] | 0)) HEAP32[26710] = 0;
 if (HEAP32[26627] | 0) _gui_wait_for_chars(50, HEAP32[26825] | 0) | 0;
 if (!((HEAP32[27215] | 0) != 2 | (HEAP32[26816] | 0) != 0)) _read_stdin();
 if ((HEAP32[26880] | 0) != 0 | (HEAP32[26711] | 0) != 0) if (HEAPU8[HEAP32[26558] >> 0] | 0 | 0) HEAP32[26724] = 1;
 _settmode(2);
 if ((HEAP32[26721] | 0) != 0 | (HEAP32[26712] | 0) != 0) _wait_return(1);
 _starttermcap();
 _setmouse();
 if (HEAP32[26733] | 0) _scroll_region_reset();
 _scroll_start();
 if ((HEAP32[26798] | 0) == 0 | (HEAP32[26627] | 0) != 0) _screenclear(); else HEAP32[26828] = 50;
 HEAP32[26720] = 1;
 _create_windows(108736);
 if (HEAP32[26798] | 0) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
 _apply_autocmds(2, 0, 0, 0, HEAP32[26773] | 0) | 0;
 _setpcmark();
 _edit_buffers(108736, 0);
 _vim_free(0);
 _shorten_fnames(0);
 if (HEAP32[27216] | 0) {
  HEAP32[26813] = 0;
  i3 = HEAP32[26882] | 0;
  HEAP32[i2 >> 2] = HEAP32[27216];
  _vim_snprintf(i3, 1025, 94463, i2) | 0;
  _do_cmdline_cmd(HEAP32[26882] | 0) | 0;
  if (HEAP32[26813] | 0) _getout(1);
 }
 if ((HEAP32[27190] | 0) > 0) _exe_commands(108736);
 HEAP32[10177] = 0;
 HEAP32[26814] = 0;
 _redraw_all_later(40);
 HEAP32[26720] = 0;
 if (HEAP32[26883] | 0) HEAP32[26843] = 1;
 _apply_autocmds(89, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if (HEAP32[HEAP32[26884] >> 2] | 0) {
  _out_flush();
  _gui_init_which_components(0);
  _gui_update_scrollbars(1);
 }
 HEAP32[26757] = 1;
 if (!(HEAP32[26806] | 0)) {
  _main_loop(0, 0);
  STACKTOP = i1;
  return 0;
 }
 _stuffcharReadbuff(-25085);
 _main_loop(0, 0);
 STACKTOP = i1;
 return 0;
}

function _compute_buffer_local_count(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 92 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2];
 }
 while (1) {
  if (!(HEAP32[i11 >> 2] | 0)) break;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + ((HEAP32[i8 >> 2] | 0) < 0 ? 1 : -1);
  i7 = HEAP32[i9 >> 2] | 0;
  if ((HEAP32[i8 >> 2] | 0) < 0) i12 = HEAP32[i7 + 52 >> 2] | 0; else i12 = HEAP32[i7 + 48 >> 2] | 0;
  HEAP32[i10 >> 2] = i12;
  if (!(HEAP32[i10 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  L14 : do if ((HEAP32[i6 >> 2] | 0) == 3) while (1) {
   if (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) break L14;
   i7 = HEAP32[i9 >> 2] | 0;
   if ((HEAP32[i8 >> 2] | 0) < 0) i13 = HEAP32[i7 + 52 >> 2] | 0; else i13 = HEAP32[i7 + 48 >> 2] | 0;
   HEAP32[i10 >> 2] = i13;
   if (!(HEAP32[i10 >> 2] | 0)) break L14;
   HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  } while (0);
 }
 if ((HEAP32[i6 >> 2] | 0) != 3) {
  i14 = HEAP32[i9 >> 2] | 0;
  i15 = i14 + 92 | 0;
  i16 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 }
 while (1) {
  if (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) {
   i4 = 28;
   break;
  }
  i6 = HEAP32[i9 >> 2] | 0;
  if ((HEAP32[i8 >> 2] | 0) >= 0) i17 = HEAP32[i6 + 52 >> 2] | 0; else i17 = HEAP32[i6 + 48 >> 2] | 0;
  HEAP32[i10 >> 2] = i17;
  if (!(HEAP32[i10 >> 2] | 0)) {
   i4 = 28;
   break;
  }
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 }
 if ((i4 | 0) == 28) {
  i14 = HEAP32[i9 >> 2] | 0;
  i15 = i14 + 92 | 0;
  i16 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 }
 return 0;
}

function _trans_special(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i12 >> 2] = _find_special_key(HEAP32[i7 >> 2] | 0, i11, HEAP32[i9 >> 2] | 0, 0, HEAP32[i10 >> 2] | 0) | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 if (HEAP32[i11 >> 2] | 0) {
  i10 = HEAP32[i8 >> 2] | 0;
  i7 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i7 + 1;
  HEAP8[i10 + i7 >> 0] = -128;
  i7 = HEAP32[i8 >> 2] | 0;
  i10 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i10 + 1;
  HEAP8[i7 + i10 >> 0] = -4;
  i10 = HEAP32[i11 >> 2] & 255;
  i11 = HEAP32[i8 >> 2] | 0;
  i7 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i7 + 1;
  HEAP8[i11 + i7 >> 0] = i10;
 }
 do if ((HEAP32[i12 >> 2] | 0) < 0) {
  i10 = HEAP32[i8 >> 2] | 0;
  i7 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i7 + 1;
  HEAP8[i10 + i7 >> 0] = -128;
  i7 = 0 - (HEAP32[i12 >> 2] | 0) & 255;
  i10 = HEAP32[i8 >> 2] | 0;
  i11 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i11 + 1;
  HEAP8[i10 + i11 >> 0] = i7;
  i7 = (0 - (HEAP32[i12 >> 2] | 0) | 0) >>> 8 & 255;
  i11 = HEAP32[i8 >> 2] | 0;
  i10 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i10 + 1;
  HEAP8[i11 + i10 >> 0] = i7;
 } else {
  i7 = HEAP32[i12 >> 2] | 0;
  if (HEAP32[i9 >> 2] | 0) {
   i10 = _add_char2buf(i7, (HEAP32[i8 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) | 0) | 0;
   HEAP32[i13 >> 2] = i10 - (HEAP32[i8 >> 2] | 0);
   break;
  } else {
   i10 = HEAP32[i8 >> 2] | 0;
   i11 = HEAP32[i13 >> 2] | 0;
   HEAP32[i13 >> 2] = i11 + 1;
   HEAP8[i10 + i11 >> 0] = i7;
   break;
  }
 } while (0);
 HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 i14 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i14 | 0;
}

function _getnextac(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i7 = i5 + 28 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 HEAP32[i5 + 24 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i5 + 16 >> 2] = i3;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 if (!(HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) {
  HEAP32[i7 >> 2] = 0;
  i12 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 while (1) {
  while (1) {
   if (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) i13 = (HEAP32[HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] >> 2] | 0) == 0; else i13 = 0;
   i14 = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0;
   if (!i13) break;
   i8 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
   if (HEAP8[i14 + 5 >> 0] | 0) HEAP32[i8 >> 2] = 0; else HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2];
  }
  i15 = HEAP32[i9 >> 2] | 0;
  if (i14 | 0) break;
  i8 = HEAP32[i9 >> 2] | 0;
  if (HEAP8[(HEAP32[i15 >> 2] | 0) + 29 >> 0] | 0) HEAP32[i8 >> 2] = 0; else HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
  if (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) _auto_next_pat(HEAP32[i9 >> 2] | 0, 1);
  if (!(HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) {
   i4 = 19;
   break;
  }
 }
 if ((i4 | 0) == 19) {
  HEAP32[i7 >> 2] = 0;
  i12 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 HEAP32[i11 >> 2] = HEAP32[i15 + 4 >> 2];
 if ((HEAP32[26888] | 0) >= 9) {
  _verbose_enter_scroll();
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
  _smsg(53610, i6) | 0;
  _msg_puts(97581);
  _verbose_leave_scroll();
 }
 HEAP32[i10 >> 2] = _vim_strsave(HEAP32[HEAP32[i11 >> 2] >> 2] | 0) | 0;
 HEAP32[25364] = HEAP8[(HEAP32[i11 >> 2] | 0) + 4 >> 0];
 if (HEAP8[(HEAP32[i11 >> 2] | 0) + 5 >> 0] | 0) HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = 0; else HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
 i12 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i5;
 return i12 | 0;
}

function _ex_syncbind(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 i9 = i2 + 28 | 0;
 HEAP32[i2 + 24 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26881];
 HEAP32[i5 >> 2] = HEAP32[26773];
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 _setpcmark();
 if (HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0) {
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
  HEAP32[i3 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[i3 >> 2] | 0) + 200 + 24 >> 2] | 0) if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) {
    HEAP32[i7 >> 2] = (HEAP32[HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] >> 2] | 0) - (HEAP32[26971] | 0);
    if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
   }
   HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
  }
  if ((HEAP32[i6 >> 2] | 0) < 1) HEAP32[i6 >> 2] = 1;
 } else HEAP32[i6 >> 2] = 1;
 HEAP32[26881] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[26881] | 0)) break;
  if (HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0) {
   HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
   HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0);
   i3 = HEAP32[i7 >> 2] | 0;
   if ((HEAP32[i7 >> 2] | 0) > 0) _scrollup(i3, 1); else _scrolldown(0 - i3 | 0, 1);
   HEAP32[(HEAP32[26881] | 0) + 296 >> 2] = HEAP32[i6 >> 2];
   _redraw_later(10);
   _cursor_correct();
   HEAP32[(HEAP32[26881] | 0) + 176 >> 2] = 1;
  }
  HEAP32[26881] = HEAP32[(HEAP32[26881] | 0) + 12 >> 2];
 }
 HEAP32[26881] = HEAP32[i4 >> 2];
 HEAP32[26773] = HEAP32[i5 >> 2];
 if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26793] = 1;
 _checkpcmark();
 if ((HEAP32[i8 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP8[i9 >> 0] = 15;
 HEAP8[i9 + 1 >> 0] = 0;
 _ins_typebuf(i9, -1, 0, 1, 0) | 0;
 STACKTOP = i2;
 return;
}

function _regconcat(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i10 >> 2] = 1;
 HEAP32[HEAP32[i5 >> 2] >> 2] = 0;
 L1 : while (1) {
  if (!(HEAP32[i10 >> 2] | 0)) break;
  switch (_peekchr() | 0) {
  case -215:
  case -218:
  case -132:
  case 0:
   {
    HEAP32[i10 >> 2] = 0;
    break;
   }
  case -166:
   {
    _skipchr_keepstart();
    break;
   }
  case -157:
   {
    HEAP32[26386] = HEAP32[26386] | 1;
    _skipchr_keepstart();
    break;
   }
  case -189:
   {
    HEAP32[26386] = HEAP32[26386] | 2;
    _skipchr_keepstart();
    break;
   }
  case -138:
   {
    HEAP32[26391] = 4;
    _skipchr_keepstart();
    HEAP32[26398] = -1;
    break;
   }
  case -147:
   {
    HEAP32[26391] = 3;
    _skipchr_keepstart();
    HEAP32[26398] = -1;
    break;
   }
  case -179:
   {
    HEAP32[26391] = 2;
    _skipchr_keepstart();
    HEAP32[26398] = -1;
    break;
   }
  case -170:
   {
    HEAP32[26391] = 1;
    _skipchr_keepstart();
    HEAP32[26398] = -1;
    break;
   }
  default:
   {
    HEAP32[i8 >> 2] = _regpiece(i9) | 0;
    if ((HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[26405] | 0) != 0) {
     i2 = 13;
     break L1;
    }
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | HEAP32[i9 >> 2] & 25;
    if (!(HEAP32[i7 >> 2] | 0)) {
     i1 = HEAP32[i5 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | HEAP32[i9 >> 2] & 4;
    } else _regtail(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0);
    HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
    if (!(HEAP32[i6 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
   }
  }
 }
 if ((i2 | 0) == 13) {
  HEAP32[i4 >> 2] = 0;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 if (!(HEAP32[i6 >> 2] | 0)) HEAP32[i6 >> 2] = _regnode(6) | 0;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 i11 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i11 | 0;
}

function _nv_scroll(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] = 1;
 _setpcmark();
 do if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 76) {
  _validate_botline();
  i1 = HEAP32[26881] | 0;
  HEAP32[i1 + 24 >> 2] = (HEAP32[i1 + 144 >> 2] | 0) - 1;
  if (((HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
   break;
  } else {
   i1 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - ((HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) - 1);
   break;
  }
 } else {
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 77) {
   _validate_botline();
   i1 = HEAP32[26881] | 0;
   HEAP32[i6 >> 2] = ((HEAP32[i1 + 88 >> 2] | 0) - (HEAP32[i1 + 148 >> 2] | 0) + 1 | 0) / 2 | 0;
   HEAP32[i5 >> 2] = 0;
   while (1) {
    if (((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) break;
    i1 = _plines((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) | 0;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
    if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   }
   if ((HEAP32[i5 >> 2] | 0) > 0) if ((HEAP32[i4 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
  } else HEAP32[i5 >> 2] = (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) - 1;
  i1 = HEAP32[26881] | 0;
  HEAP32[i1 + 24 >> 2] = (HEAP32[i1 + 68 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
 } while (0);
 if (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) {
  _beginline(6);
  STACKTOP = i2;
  return;
 }
 _cursor_correct();
 _beginline(6);
 STACKTOP = i2;
 return;
}

function _buflist_setfpos(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 20 | 0;
 i8 = i6 + 16 | 0;
 i9 = i6 + 12 | 0;
 i10 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 i12 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 168 >> 2];
 while (1) {
  if (!(HEAP32[i12 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) break;
  HEAP32[i12 >> 2] = HEAP32[HEAP32[i12 >> 2] >> 2];
 }
 if (!(HEAP32[i12 >> 2] | 0)) {
  HEAP32[i12 >> 2] = _alloc_clear(72) | 0;
  if (!(HEAP32[i12 >> 2] | 0)) {
   STACKTOP = i6;
   return;
  }
  HEAP32[(HEAP32[i12 >> 2] | 0) + 8 >> 2] = HEAP32[i8 >> 2];
  if (!(HEAP32[i9 >> 2] | 0)) HEAP32[i9 >> 2] = 1;
 } else {
  i5 = HEAP32[HEAP32[i12 >> 2] >> 2] | 0;
  if (HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0) HEAP32[HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] >> 2] = i5; else HEAP32[(HEAP32[i7 >> 2] | 0) + 168 >> 2] = i5;
  if (HEAP32[HEAP32[i12 >> 2] >> 2] | 0) HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2];
  if (HEAP32[i11 >> 2] | 0) if (HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] | 0) _clear_winopt((HEAP32[i12 >> 2] | 0) + 24 | 0);
 }
 if (HEAP32[i9 >> 2] | 0) {
  HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] = HEAP32[i9 >> 2];
  HEAP32[(HEAP32[i12 >> 2] | 0) + 12 + 4 >> 2] = HEAP32[i10 >> 2];
 }
 if (HEAP32[i11 >> 2] | 0) {
  _copy_winopt((HEAP32[i8 >> 2] | 0) + 200 | 0, (HEAP32[i12 >> 2] | 0) + 24 | 0);
  HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] = 1;
 }
 HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 168 >> 2];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 168 >> 2] = HEAP32[i12 >> 2];
 HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = 0;
 if (!(HEAP32[HEAP32[i12 >> 2] >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[i12 >> 2];
 STACKTOP = i6;
 return;
}

function _read_limits(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = 0;
 if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 45) {
  HEAP32[26392] = (HEAP32[26392] | 0) + 1;
  HEAP32[i9 >> 2] = 1;
 }
 HEAP32[i10 >> 2] = HEAP32[26392];
 i2 = _getdigits(105568) | 0;
 HEAP32[HEAP32[i7 >> 2] >> 2] = i2;
 do if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 44) {
  i2 = (HEAP32[26392] | 0) + 1 | 0;
  HEAP32[26392] = i2;
  if (_vim_isdigit(HEAPU8[i2 >> 0] | 0) | 0) {
   i2 = _getdigits(105568) | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i2;
   break;
  } else {
   HEAP32[HEAP32[i8 >> 2] >> 2] = 2147418112;
   break;
  }
 } else if (((HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) {
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
  break;
 } else {
  HEAP32[HEAP32[i8 >> 2] >> 2] = 2147418112;
  break;
 } while (0);
 if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 92) HEAP32[26392] = (HEAP32[26392] | 0) + 1;
 if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) != 125) {
  i10 = HEAP32[26882] | 0;
  HEAP32[i5 >> 2] = (HEAP32[26391] | 0) == 4 ? 114072 : 73093;
  _sprintf(i10, 73465, i5) | 0;
  _emsg(HEAP32[26882] | 0) | 0;
  HEAP32[26719] = 1;
  HEAP32[i6 >> 2] = 0;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 if (HEAP32[i9 >> 2] | 0) i3 = 16; else if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) > (HEAP32[HEAP32[i8 >> 2] >> 2] | 0)) i3 = 18; else i3 = 16;
 if ((i3 | 0) == 16) if (HEAP32[i9 >> 2] | 0) if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) < (HEAP32[HEAP32[i8 >> 2] >> 2] | 0)) i3 = 18;
 if ((i3 | 0) == 18) {
  HEAP32[i11 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
  HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i11 >> 2];
 }
 _skipchr();
 HEAP32[i6 >> 2] = 1;
 i12 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i4;
 return i12 | 0;
}

function _u_undo_end(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i4 = i3;
 i5 = i3 + 32 | 0;
 i6 = i3 + 28 | 0;
 i7 = i3 + 24 | 0;
 i8 = i3 + 20 | 0;
 i9 = i3 + 40 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[26841] | 0) {
  STACKTOP = i3;
  return;
 }
 if (!(_messaging() | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) HEAP32[26623] = (HEAP32[26623] | 0) + -1;
 HEAP32[26624] = (HEAP32[26624] | 0) - (HEAP32[26623] | 0);
 do if ((HEAP32[26624] | 0) == -1) HEAP32[i7 >> 2] = 80776; else {
  if ((HEAP32[26624] | 0) < 0) {
   HEAP32[i7 >> 2] = 80786;
   break;
  }
  if ((HEAP32[26624] | 0) == 1) {
   HEAP32[i7 >> 2] = 80797;
   break;
  }
  if ((HEAP32[26624] | 0) > 1) {
   HEAP32[i7 >> 2] = 80807;
   break;
  }
  HEAP32[26624] = HEAP32[26623];
  if ((HEAP32[26623] | 0) == 1) {
   HEAP32[i7 >> 2] = 80819;
   break;
  } else {
   HEAP32[i7 >> 2] = 80826;
   break;
  }
 } while (0);
 do if (HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0) {
  if (HEAP32[i6 >> 2] | 0) if (HEAP32[HEAP32[(HEAP32[26773] | 0) + 508 >> 2] >> 2] | 0) {
   HEAP32[i8 >> 2] = HEAP32[HEAP32[(HEAP32[26773] | 0) + 508 >> 2] >> 2];
   HEAP32[i5 >> 2] = 0;
   break;
  }
  i2 = HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0;
  if (HEAP32[i5 >> 2] | 0) {
   HEAP32[i8 >> 2] = i2;
   break;
  } else {
   HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
   break;
  }
 } else HEAP32[i8 >> 2] = HEAP32[(HEAP32[26773] | 0) + 504 >> 2]; while (0);
 if (!(HEAP32[i8 >> 2] | 0)) HEAP8[i9 >> 0] = 0; else _u_add_time(i9, 80, HEAP32[(HEAP32[i8 >> 2] | 0) + 276 >> 2] | 0);
 i6 = HEAP32[26624] | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i7 = HEAP32[i5 >> 2] | 0 ? 80834 : 80841;
 if (!(HEAP32[i8 >> 2] | 0)) i10 = 0; else i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0;
 HEAP32[i4 >> 2] = (HEAP32[26624] | 0) < 0 ? 0 - i6 | 0 : i6;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 + 8 >> 2] = i7;
 HEAP32[i4 + 12 >> 2] = i10;
 HEAP32[i4 + 16 >> 2] = i9;
 _smsg_attr_keep(0, 80847, i4) | 0;
 STACKTOP = i3;
 return;
}

function _bckend_word(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[26484] = HEAP32[i8 >> 2];
 L1 : while (1) {
  i8 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
  HEAP32[i7 >> 2] = i8;
  if ((i8 | 0) < 0) {
   i4 = 23;
   break;
  }
  HEAP32[i10 >> 2] = _cls() | 0;
  i8 = _dec_cursor() | 0;
  HEAP32[i11 >> 2] = i8;
  if ((i8 | 0) == -1) {
   i4 = 4;
   break;
  }
  if ((HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) == 1) {
   i4 = 6;
   break;
  }
  L6 : do if (HEAP32[i10 >> 2] | 0) while (1) {
   i8 = _cls() | 0;
   if ((i8 | 0) != (HEAP32[i10 >> 2] | 0)) break L6;
   i8 = _dec_cursor() | 0;
   HEAP32[i11 >> 2] = i8;
   if ((i8 | 0) == -1) {
    i4 = 12;
    break L1;
   }
   if ((HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) == 1) {
    i4 = 12;
    break L1;
   }
  } while (0);
  while (1) {
   if (_cls() | 0) break;
   if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) if (!(HEAPU8[(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) >> 0] | 0)) break;
   i8 = _dec_cursor() | 0;
   HEAP32[i11 >> 2] = i8;
   if ((i8 | 0) == -1) {
    i4 = 20;
    break L1;
   }
   if ((HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) == 1) {
    i4 = 20;
    break L1;
   }
  }
 }
 if ((i4 | 0) == 4) {
  HEAP32[i6 >> 2] = 0;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 } else if ((i4 | 0) == 6) {
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 } else if ((i4 | 0) == 12) {
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 } else if ((i4 | 0) == 20) {
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 } else if ((i4 | 0) == 23) {
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 return 0;
}

function _mf_sync(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i10 >> 2] = HEAP32[26834];
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) < 0) {
  HEAP32[(HEAP32[i6 >> 2] | 0) + 596 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[26834] = 0;
 HEAP32[i8 >> 2] = 1;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2];
 L5 : while (1) {
  if (!(HEAP32[i9 >> 2] | 0)) break;
  if (HEAP32[i7 >> 2] & 1 | 0) i3 = 7; else if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) >= 0) i3 = 7;
  do if ((i3 | 0) == 7) {
   i3 = 0;
   if (HEAP8[(HEAP32[i9 >> 2] | 0) + 28 >> 0] & 1 | 0) {
    if ((HEAP32[i8 >> 2] | 0) != 1) {
     if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) < 0) break;
     if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) >= (HEAP32[(HEAP32[i6 >> 2] | 0) + 588 >> 2] | 0)) break;
    }
    if (HEAP32[i7 >> 2] & 8 | 0) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) break;
    if (!(_mf_write(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0)) {
     if (!(HEAP32[i8 >> 2] | 0)) break L5;
     HEAP32[i8 >> 2] = 0;
    }
    if (HEAP32[i7 >> 2] & 2 | 0) {
     if (_ui_char_avail() | 0) break L5;
    } else _ui_breakcheck();
    if (HEAP32[26834] | 0) break L5;
   }
  } while (0);
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2];
 }
 if ((HEAP32[i9 >> 2] | 0) == 0 | (HEAP32[i8 >> 2] | 0) == 0) HEAP32[(HEAP32[i6 >> 2] | 0) + 596 >> 2] = 0;
 do if (HEAP32[i7 >> 2] & 4 | 0) if (HEAPU8[HEAP32[26998] >> 0] | 0) {
  if (_strcmp(HEAP32[26998] | 0, 97446) | 0) {
   _sync();
   break;
  }
  if (_fsync(HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) | 0) HEAP32[i8 >> 2] = 0;
 } while (0);
 HEAP32[26834] = HEAP32[26834] | HEAP32[i10 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _swapfile_info(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 1168 | 0;
 i3 = i2;
 i4 = i2 + 1112 | 0;
 i5 = i2 + 1036 | 0;
 i6 = i2 + 1032 | 0;
 i7 = i2 + 12 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2 + 4 | 0;
 i10 = i2 + 1120 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i8 >> 2] = 0;
 do if ((_stat(HEAP32[i4 >> 2] | 0, i5) | 0) != -1) {
  if ((_mch_get_uname(HEAP32[i5 + 20 >> 2] | 0, i10, 40) | 0) == 1) {
   _msg_puts(57432);
   _msg_outtrans(i10) | 0;
   _msg_puts(57453);
  } else _msg_puts(56932);
  HEAP32[i8 >> 2] = HEAP32[i5 + 56 >> 2];
  HEAP32[i9 >> 2] = _ctime(i8 | 0) | 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   _msg_puts(56953);
   break;
  } else {
   _msg_puts(HEAP32[i9 >> 2] | 0);
   break;
  }
 } while (0);
 i9 = HEAP32[i4 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i6 >> 2] = _open(i9, 0, i3) | 0;
 if ((HEAP32[i6 >> 2] | 0) < 0) {
  _msg_puts(57771);
  _msg_putchar(10);
  i11 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 }
 do if ((_read_eintr(HEAP32[i6 >> 2] | 0, i7, 1020) | 0) == 1020) {
  if (!(_strncmp(i7 + 2 | 0, 57464, 7) | 0)) {
   _msg_puts(57472);
   break;
  }
  if (!(_ml_check_b0_id(i7) | 0)) {
   _msg_puts(57504);
   break;
  }
  _msg_puts(57550);
  if (!(HEAPU8[i7 + 108 >> 0] | 0)) _msg_puts(57571); else _msg_outtrans(i7 + 108 | 0) | 0;
  _msg_puts(57581);
  _msg_puts(HEAPU8[i7 + 108 + 899 >> 0] | 0 | 0 ? 57603 : 63495);
  if (HEAPU8[i7 + 28 >> 0] | 0 | 0) {
   _msg_puts(57607);
   _msg_outtrans(i7 + 28 | 0) | 0;
  }
  if (HEAPU8[i7 + 68 >> 0] | 0 | 0) {
   if (HEAPU8[i7 + 28 >> 0] | 0 | 0) _msg_puts(57629); else _msg_puts(57644);
   _msg_outtrans(i7 + 68 | 0) | 0;
  }
  if (_char_to_long(i7 + 24 | 0) | 0) {
   _msg_puts(57666);
   _msg_outnum(_char_to_long(i7 + 24 | 0) | 0);
   if (!(_kill(_char_to_long(i7 + 24 | 0) | 0, 0) | 0)) _msg_puts(57688);
  }
  if (_b0_magic_wrong(i7) | 0) _msg_puts(57705);
 } else _msg_puts(57745); while (0);
 _close(HEAP32[i6 >> 2] | 0) | 0;
 _msg_putchar(10);
 i11 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i2;
 return i11 | 0;
}

function _mf_trans_add(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) >= 0) {
  HEAP32[i5 >> 2] = 1;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 i2 = _alloc(16) | 0;
 HEAP32[i10 >> 2] = i2;
 if (!i2) {
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
 do if (HEAP32[i8 >> 2] | 0) if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0) >= (HEAP32[i11 >> 2] | 0)) {
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2];
  if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[i11 >> 2] | 0)) {
   i2 = (HEAP32[i8 >> 2] | 0) + 8 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
   i2 = (HEAP32[i8 >> 2] | 0) + 24 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
   break;
  } else {
   HEAP32[i8 >> 2] = _mf_rem_free(HEAP32[i6 >> 2] | 0) | 0;
   _vim_free(HEAP32[i8 >> 2] | 0);
   break;
  }
 } else i3 = 10; else i3 = 10; while (0);
 if ((i3 | 0) == 10) {
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 576 >> 2];
  i3 = (HEAP32[i6 >> 2] | 0) + 576 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 }
 HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2];
 HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] = HEAP32[i9 >> 2];
 _mf_rem_hash(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = HEAP32[i9 >> 2];
 _mf_ins_hash(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 _mf_hash_add_item((HEAP32[i6 >> 2] | 0) + 304 | 0, HEAP32[i10 >> 2] | 0);
 HEAP32[i5 >> 2] = 1;
 i12 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i12 | 0;
}

function _get_bytes_from_buf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 i12 = i5 + 24 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) {
   i4 = 18;
   break;
  }
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i2 + 1;
  i1 = HEAP8[i3 + i2 >> 0] | 0;
  HEAP8[i12 >> 0] = i1;
  if (!(i1 & 255)) {
   i4 = 4;
   break;
  }
  if ((HEAPU8[i12 >> 0] | 0 | 0) == 128) {
   if (!(HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0)) {
    i4 = 8;
    break;
   }
   if (!(HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + 1) >> 0] | 0)) {
    i4 = 8;
    break;
   }
   i1 = HEAP32[i7 >> 2] | 0;
   i2 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i2 + 1;
   if ((HEAPU8[i1 + i2 >> 0] | 0 | 0) == 255) HEAP8[i12 >> 0] = 0;
   i2 = HEAP32[i7 >> 2] | 0;
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i1 + 1;
   if ((HEAPU8[i2 + i1 >> 0] | 0 | 0) == 81) HEAP8[i12 >> 0] = -101;
  } else if ((HEAPU8[i12 >> 0] | 0 | 0) == 155) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0 | 0) == 253) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + 1) >> 0] | 0 | 0) == 81) HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 2;
  HEAP8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) >> 0] = HEAP8[i12 >> 0] | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 4) {
  HEAP32[i6 >> 2] = -1;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else if ((i4 | 0) == 8) {
  HEAP32[i6 >> 2] = -1;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else if ((i4 | 0) == 18) {
  HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 return 0;
}

function _win_del_lines(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8 + 28 | 0;
 i10 = i8 + 24 | 0;
 i11 = i8 + 20 | 0;
 i12 = i8 + 16 | 0;
 i13 = i8 + 12 | 0;
 i14 = i8 + 8 | 0;
 i15 = i8 + 4 | 0;
 i16 = i8;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i11 >> 2] = i2;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i4;
 HEAP32[i14 >> 2] = i5;
 HEAP32[i15 >> 2] = i6;
 if (HEAP32[i13 >> 2] | 0) HEAP32[(HEAP32[i10 >> 2] | 0) + 152 >> 2] = 0;
 if ((HEAP32[i12 >> 2] | 0) > ((HEAP32[(HEAP32[i10 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) | 0)) HEAP32[i12 >> 2] = (HEAP32[(HEAP32[i10 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
 HEAP32[i16 >> 2] = _win_do_lines(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0, 1, HEAP32[i15 >> 2] | 0) | 0;
 if ((HEAP32[i16 >> 2] | 0) != 2) {
  HEAP32[i9 >> 2] = HEAP32[i16 >> 2];
  i17 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i17 | 0;
 }
 if (!(_screen_del_lines(0, (HEAP32[(HEAP32[i10 >> 2] | 0) + 84 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0, HEAP32[10173] | 0, 0, HEAP32[i15 >> 2] | 0, 0) | 0)) {
  HEAP32[i9 >> 2] = 0;
  i17 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i8;
  return i17 | 0;
 }
 if (HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) i7 = 12; else if (HEAP32[(HEAP32[i10 >> 2] | 0) + 92 >> 2] | 0) i7 = 12; else if ((HEAP32[26876] | 0) < ((HEAP32[10173] | 0) - 1 | 0)) i7 = 12; else HEAP32[26699] = 1;
 if ((i7 | 0) == 12) if (!(_screen_ins_lines(0, (HEAP32[(HEAP32[i10 >> 2] | 0) + 84 >> 2] | 0) + (HEAP32[(HEAP32[i10 >> 2] | 0) + 88 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0, HEAP32[10173] | 0, HEAP32[i15 >> 2] | 0, 0) | 0)) {
  HEAP32[(HEAP32[i10 >> 2] | 0) + 176 >> 2] = 1;
  _win_rest_invalid(HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0);
 }
 HEAP32[i9 >> 2] = 1;
 i17 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i8;
 return i17 | 0;
}

function _sort_compare(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 36 | 0;
 i5 = i3 + 32 | 0;
 i6 = i3 + 28 | 0;
 i7 = i3 + 16 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i9 >> 2] = 0;
 if (HEAP32[25221] | 0) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 _fast_breakcheck();
 if (HEAP32[26834] | 0) HEAP32[25221] = 1;
 if (HEAP32[25218] | 0) {
  if ((HEAP32[i7 + 4 >> 2] | 0) == (HEAP32[i8 + 4 >> 2] | 0)) i11 = 0; else i11 = (HEAP32[i7 + 4 >> 2] | 0) > (HEAP32[i8 + 4 >> 2] | 0) ? 1 : -1;
  HEAP32[i9 >> 2] = i11;
 } else {
  i11 = HEAP32[25216] | 0;
  i2 = _ml_get(HEAP32[i7 >> 2] | 0) | 0;
  i6 = HEAP32[i7 + 4 >> 2] | 0;
  i5 = i7 + 4 + 4 | 0;
  _strncpy(i11, i2 + i6 | 0, (HEAP32[i5 >> 2] | 0) - i6 + 1 | 0) | 0;
  HEAP8[(HEAP32[25216] | 0) + ((HEAP32[i5 >> 2] | 0) - (HEAP32[i7 + 4 >> 2] | 0)) >> 0] = 0;
  i5 = HEAP32[25217] | 0;
  i6 = _ml_get(HEAP32[i8 >> 2] | 0) | 0;
  i2 = HEAP32[i8 + 4 >> 2] | 0;
  i11 = i8 + 4 + 4 | 0;
  _strncpy(i5, i6 + i2 | 0, (HEAP32[i11 >> 2] | 0) - i2 + 1 | 0) | 0;
  HEAP8[(HEAP32[25217] | 0) + ((HEAP32[i11 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0)) >> 0] = 0;
  i11 = HEAP32[25216] | 0;
  i2 = HEAP32[25217] | 0;
  if (HEAP32[25220] | 0) i12 = _strcasecmp(i11, i2) | 0; else i12 = _strcmp(i11, i2) | 0;
  HEAP32[i9 >> 2] = i12;
 }
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i4 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i8 >> 2] | 0);
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else {
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 return 0;
}

function _frame_comp_pos(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2];
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i12 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
  HEAP32[i11 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i10 >> 2] | 0)) break;
   if ((HEAP8[HEAP32[i6 >> 2] >> 0] | 0) == 1) HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i12 >> 2]; else HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i11 >> 2];
   _frame_comp_pos(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0);
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2];
  }
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 84 >> 2] | 0) != (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) i4 = 4; else if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 96 >> 2] | 0) != (HEAP32[HEAP32[i8 >> 2] >> 2] | 0)) i4 = 4;
 if ((i4 | 0) == 4) {
  HEAP32[(HEAP32[i9 >> 2] | 0) + 84 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
  HEAP32[(HEAP32[i9 >> 2] | 0) + 96 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
  _redraw_win_later(HEAP32[i9 >> 2] | 0, 40);
  HEAP32[(HEAP32[i9 >> 2] | 0) + 176 >> 2] = 1;
 }
 i4 = HEAP32[i9 >> 2] | 0;
 HEAP32[i13 >> 2] = (HEAP32[i4 + 88 >> 2] | 0) + (HEAP32[i4 + 92 >> 2] | 0);
 if ((HEAP32[i13 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0)) i14 = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0; else i14 = HEAP32[i13 >> 2] | 0;
 i13 = HEAP32[i7 >> 2] | 0;
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i14;
 i14 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + ((HEAP32[i8 + 100 >> 2] | 0) + (HEAP32[i8 + 104 >> 2] | 0));
 STACKTOP = i5;
 return;
}

function _make_filter_cmd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4;
 i7 = i4 + 40 | 0;
 i8 = i4 + 36 | 0;
 i9 = i4 + 32 | 0;
 i10 = i4 + 28 | 0;
 i11 = i4 + 24 | 0;
 i12 = i4 + 20 | 0;
 i13 = i4 + 16 | 0;
 i14 = i4 + 12 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i14 >> 2] = _get_isolated_shell_name() | 0;
 HEAP32[i13 >> 2] = (_vim_fnamecmp(HEAP32[i14 >> 2] | 0, 71310) | 0) == 0 & 1;
 _vim_free(HEAP32[i14 >> 2] | 0);
 i14 = (HEAP32[i13 >> 2] | 0) != 0;
 i3 = _strlen(HEAP32[i8 >> 2] | 0) | 0;
 if (i14) HEAP32[i12 >> 2] = i3 + 13; else HEAP32[i12 >> 2] = i3 + 3;
 if (HEAP32[i9 >> 2] | 0) {
  i3 = (_strlen(HEAP32[i9 >> 2] | 0) | 0) + 9 | 0;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i3;
 }
 if (HEAP32[i10 >> 2] | 0) {
  i3 = _strlen(HEAP32[i10 >> 2] | 0) | 0;
  i14 = i3 + (_strlen(HEAP32[26982] | 0) | 0) + 2 | 0;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i14;
 }
 HEAP32[i11 >> 2] = _lalloc(HEAP32[i12 >> 2] | 0, 1) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[i7 >> 2] = 0;
  i15 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i15 | 0;
 }
 do if ((HEAP32[i9 >> 2] | 0) != 0 | (HEAP32[i10 >> 2] | 0) != 0) {
  i14 = HEAP32[i11 >> 2] | 0;
  i3 = HEAP32[i12 >> 2] | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  if (HEAP32[i13 >> 2] | 0) {
   HEAP32[i6 >> 2] = i2;
   _vim_snprintf(i14, i3, 42916, i6) | 0;
   break;
  } else {
   HEAP32[i5 >> 2] = i2;
   _vim_snprintf(i14, i3, 42931, i5) | 0;
   break;
  }
 } else _strcpy(HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0; while (0);
 if (HEAP32[i9 >> 2] | 0) {
  _strcat(HEAP32[i11 >> 2] | 0, 42936) | 0;
  _strcat(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 }
 if (HEAP32[i10 >> 2] | 0) _append_redir(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[26982] | 0, HEAP32[i10 >> 2] | 0);
 HEAP32[i7 >> 2] = HEAP32[i11 >> 2];
 i15 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i4;
 return i15 | 0;
}

function _win_new_tabpage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[26886];
 HEAP32[i6 >> 2] = _alloc_tabpage() | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 i1 = (_leave_tabpage(HEAP32[26773] | 0, 1) | 0) == 0;
 i9 = HEAP32[i6 >> 2] | 0;
 if (i1) {
  _vim_free(i9);
  HEAP32[i3 >> 2] = 0;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 HEAP32[26886] = i9;
 if ((_win_alloc_firstwin(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) | 0) != 1) {
  _enter_tabpage(HEAP32[26886] | 0, HEAP32[26773] | 0, 1, 1);
  HEAP32[i3 >> 2] = 0;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 if ((HEAP32[i4 >> 2] | 0) == 1) {
  HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[26884];
  HEAP32[26884] = HEAP32[i6 >> 2];
 } else {
  L16 : do if ((HEAP32[i4 >> 2] | 0) > 0) {
   HEAP32[i7 >> 2] = 2;
   HEAP32[i5 >> 2] = HEAP32[26884];
   while (1) {
    if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) break L16;
    if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break L16;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
   }
  } while (0);
  HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[i6 >> 2];
 }
 _win_init_size();
 i5 = _tabline_height() | 0;
 HEAP32[(HEAP32[26887] | 0) + 84 >> 2] = i5;
 _win_comp_scroll(HEAP32[26881] | 0);
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[27114];
 _last_status(0);
 _gui_may_update_scrollbars();
 _redraw_all_later(50);
 _apply_autocmds(95, 0, 0, 0, HEAP32[26773] | 0) | 0;
 _apply_autocmds(93, 0, 0, 0, HEAP32[26773] | 0) | 0;
 _apply_autocmds(80, 0, 0, 0, HEAP32[26773] | 0) | 0;
 _apply_autocmds(78, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[i3 >> 2] = 1;
 i8 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i8 | 0;
}

function _insert_reg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i12 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 >> 2] = 1;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 _ui_breakcheck();
 if (HEAP32[26834] | 0) {
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 if (HEAP32[i6 >> 2] | 0) if (!(_valid_yank_reg(HEAP32[i6 >> 2] | 0, 0) | 0)) {
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 HEAP32[i6 >> 2] = _may_get_selection(HEAP32[i6 >> 2] | 0) | 0;
 L10 : do if ((HEAP32[i6 >> 2] | 0) == 46) HEAP32[i9 >> 2] = _stuff_inserted(0, 1, 1) | 0; else {
  if (_get_spec_reg(HEAP32[i6 >> 2] | 0, i10, i11, 1) | 0) if (!(HEAP32[i10 >> 2] | 0)) {
   HEAP32[i5 >> 2] = 0;
   i13 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i13 | 0;
  } else {
   _stuffescaped(HEAP32[i10 >> 2] | 0, HEAP32[i12 >> 2] | 0);
   if (!(HEAP32[i11 >> 2] | 0)) break;
   _vim_free(HEAP32[i10 >> 2] | 0);
   break;
  }
  if (_get_yank_register(HEAP32[i6 >> 2] | 0, 0) | 0) HEAP32[i12 >> 2] = 1;
  if (!(HEAP32[HEAP32[26084] >> 2] | 0)) {
   HEAP32[i9 >> 2] = 0;
   break;
  }
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0)) break L10;
   _stuffescaped(HEAP32[(HEAP32[HEAP32[26084] >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0, HEAP32[i12 >> 2] | 0);
   if ((HEAPU8[(HEAP32[26084] | 0) + 8 >> 0] | 0 | 0) == 1) i3 = 21; else if ((HEAP32[i8 >> 2] | 0) < ((HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0) - 1 | 0)) i3 = 21;
   if ((i3 | 0) == 21) {
    i3 = 0;
    _stuffcharReadbuff(10);
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i13 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i13 | 0;
}

function _mf_get(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if ((HEAP32[i7 >> 2] | 0) < (HEAP32[(HEAP32[i6 >> 2] | 0) + 576 >> 2] | 0)) if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 580 >> 2] | 0)) {
  HEAP32[i9 >> 2] = _mf_find_hash(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  do if (!(HEAP32[i9 >> 2] | 0)) {
   if ((HEAP32[i7 >> 2] | 0) >= 0) if ((HEAP32[i7 >> 2] | 0) < (HEAP32[(HEAP32[i6 >> 2] | 0) + 588 >> 2] | 0)) {
    HEAP32[i9 >> 2] = _mf_release(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
    if (!(HEAP32[i9 >> 2] | 0)) {
     i3 = _mf_alloc_bhdr(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
     HEAP32[i9 >> 2] = i3;
     if (!i3) {
      HEAP32[i5 >> 2] = 0;
      i10 = HEAP32[i5 >> 2] | 0;
      STACKTOP = i4;
      return i10 | 0;
     }
    }
    HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = HEAP32[i7 >> 2];
    HEAP8[(HEAP32[i9 >> 2] | 0) + 28 >> 0] = 0;
    HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] = HEAP32[i8 >> 2];
    if (_mf_read(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) break;
    _mf_free_bhdr(HEAP32[i9 >> 2] | 0);
    HEAP32[i5 >> 2] = 0;
    i10 = HEAP32[i5 >> 2] | 0;
    STACKTOP = i4;
    return i10 | 0;
   }
   HEAP32[i5 >> 2] = 0;
   i10 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i10 | 0;
  } else {
   _mf_rem_used(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0);
   _mf_rem_hash(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0);
  } while (0);
  i8 = (HEAP32[i9 >> 2] | 0) + 28 | 0;
  HEAP8[i8 >> 0] = HEAP8[i8 >> 0] | 2;
  _mf_ins_used(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0);
  _mf_ins_hash(HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0);
  HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _show_autocmd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[26834] | 0) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 _msg_putchar(10);
 if (HEAP32[26834] | 0) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i6 >> 2] | 0) != (HEAP32[25469] | 0)) i3 = 6; else if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[25470] | 0)) i3 = 6;
 if ((i3 | 0) == 6) {
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) != -1) {
   if (!(HEAP32[(HEAP32[2727] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] << 2) >> 2] | 0)) {
    i2 = _get_deleted_augroup() | 0;
    _msg_puts_attr(i2, HEAP32[27052] | 0);
   } else _msg_puts_attr(HEAP32[(HEAP32[2727] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] << 2) >> 2] | 0, HEAP32[27064] | 0);
   _msg_puts(71550);
  }
  i2 = _event_nr2name(HEAP32[i6 >> 2] | 0) | 0;
  _msg_puts_attr(i2, HEAP32[27064] | 0);
  HEAP32[25469] = HEAP32[i6 >> 2];
  HEAP32[25470] = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2];
  _msg_putchar(10);
  if (HEAP32[26834] | 0) {
   STACKTOP = i4;
   return;
  }
 }
 HEAP32[27043] = 4;
 _msg_outtrans(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) {
   i3 = 22;
   break;
  }
  if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) {
   if ((HEAP32[27043] | 0) >= 14) _msg_putchar(10);
   HEAP32[27043] = 14;
   if (HEAP32[26834] | 0) {
    i3 = 22;
    break;
   }
   _msg_outtrans(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) | 0;
   if (HEAP32[26834] | 0) {
    i3 = 22;
    break;
   }
   if (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0) {
    _msg_putchar(10);
    if (HEAP32[26834] | 0) {
     i3 = 22;
     break;
    }
   }
  }
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2];
 }
 if ((i3 | 0) == 22) {
  STACKTOP = i4;
  return;
 }
}

function _intro_message(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = (HEAP32[10173] | 0) - 16;
 if (!(HEAP32[26903] | 0)) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 4;
 if ((HEAP32[26942] | 0) > 1) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - ((HEAP32[10173] | 0) - (HEAP32[(HEAP32[27114] | 0) + 12 >> 2] | 0));
 if ((HEAP32[i6 >> 2] | 0) < 0) HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = _time(0) | 0;
 HEAP32[i7 >> 2] = ((HEAP32[i7 >> 2] & 2 | 0) == 0 & 1) - ((HEAP32[i7 >> 2] & 4 | 0) == 0 & 1);
 HEAP32[i5 >> 2] = (HEAP32[i6 >> 2] | 0) / 2 | 0;
 L10 : do if ((HEAP32[i5 >> 2] | 0) >= 2 & (HEAP32[10174] | 0) >= 50 | (HEAP32[i3 >> 2] | 0) != 0) {
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= 17) break L10;
   HEAP32[i8 >> 2] = HEAP32[34288 + (HEAP32[i4 >> 2] << 2) >> 2];
   if ((HEAP32[26883] | 0) != 0 & (HEAP32[26627] | 0) != 0) if (HEAP32[34356 + (HEAP32[i4 >> 2] << 2) >> 2] | 0) HEAP32[i8 >> 2] = HEAP32[34356 + (HEAP32[i4 >> 2] << 2) >> 2];
   if (!(HEAP32[i8 >> 2] | 0)) {
    if (!(HEAP32[26903] | 0)) break L10;
   } else {
    do if (HEAP32[i7 >> 2] | 0) {
     if (_strstr(HEAP32[i8 >> 2] | 0, 82908) | 0) {
      HEAP32[i8 >> 2] = (HEAP32[i7 >> 2] | 0) < 0 ? 82917 : 82942;
      break;
     }
     if (_strstr(HEAP32[i8 >> 2] | 0, 82972) | 0) {
      HEAP32[i8 >> 2] = (HEAP32[i7 >> 2] | 0) < 0 ? 82977 : 83024;
      break;
     }
     if (_strstr(HEAP32[i8 >> 2] | 0, 83071) | 0) HEAP32[i8 >> 2] = 83079;
    } while (0);
    if (HEAP8[HEAP32[i8 >> 2] >> 0] | 0) _do_intro_line(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0, (HEAP32[i4 >> 2] | 0) == 2 & 1, 0);
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   }
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
 } while (0);
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26877] = HEAP32[i5 >> 2];
 STACKTOP = i2;
 return;
}

function _do_marks(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 if (HEAP32[i4 >> 2] | 0) if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) HEAP32[i4 >> 2] = 0;
 _show_one_mark(39, HEAP32[i4 >> 2] | 0, (HEAP32[26881] | 0) + 300 | 0, 0, 1);
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 26) break;
  _show_one_mark((HEAP32[i5 >> 2] | 0) + 97 | 0, HEAP32[i4 >> 2] | 0, (HEAP32[26773] | 0) + 188 + (HEAP32[i5 >> 2] << 3) | 0, 0, 1);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 36) break;
  i3 = 103600 + (HEAP32[i5 >> 2] << 4) | 0;
  if (HEAP32[103600 + (HEAP32[i5 >> 2] << 4) + 8 >> 2] | 0) HEAP32[i6 >> 2] = _fm_getname(i3, 15) | 0; else HEAP32[i6 >> 2] = HEAP32[i3 + 12 >> 2];
  if (HEAP32[i6 >> 2] | 0) {
   i3 = HEAP32[i5 >> 2] | 0;
   i1 = 103600 + (HEAP32[i5 >> 2] << 4) | 0;
   _show_one_mark((HEAP32[i5 >> 2] | 0) >= 26 ? i3 - 26 + 48 | 0 : i3 + 65 | 0, HEAP32[i4 >> 2] | 0, i1 | 0, HEAP32[i6 >> 2] | 0, (HEAP32[i1 + 8 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0) & 1);
   if (HEAP32[103600 + (HEAP32[i5 >> 2] << 4) + 8 >> 2] | 0) _vim_free(HEAP32[i6 >> 2] | 0);
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 _show_one_mark(34, HEAP32[i4 >> 2] | 0, (HEAP32[26773] | 0) + 420 | 0, 0, 1);
 _show_one_mark(91, HEAP32[i4 >> 2] | 0, (HEAP32[26773] | 0) + 476 | 0, 0, 1);
 _show_one_mark(93, HEAP32[i4 >> 2] | 0, (HEAP32[26773] | 0) + 492 | 0, 0, 1);
 _show_one_mark(94, HEAP32[i4 >> 2] | 0, (HEAP32[26773] | 0) + 428 | 0, 0, 1);
 _show_one_mark(46, HEAP32[i4 >> 2] | 0, (HEAP32[26773] | 0) + 436 | 0, 0, 1);
 _show_one_mark(60, HEAP32[i4 >> 2] | 0, (HEAP32[26773] | 0) + 396 | 0, 0, 1);
 _show_one_mark(62, HEAP32[i4 >> 2] | 0, (HEAP32[26773] | 0) + 396 + 8 | 0, 0, 1);
 _show_one_mark(-1, HEAP32[i4 >> 2] | 0, 0, 0, 0);
 STACKTOP = i2;
 return;
}

function _makeswapname(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 4144 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 28 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5 + 40 | 0;
 i14 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i5 + 24 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i14 >> 2] = _strlen(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
 i4 = (_vim_ispathsep(HEAPU8[(HEAP32[i11 >> 2] | 0) + -1 >> 0] | 0) | 0) != 0;
 if (i4 & (HEAP32[i14 >> 2] | 0) > 1) if ((HEAPU8[(HEAP32[i11 >> 2] | 0) + -1 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[i11 >> 2] | 0) + -2 >> 0] | 0 | 0)) {
  HEAP32[i10 >> 2] = 0;
  i14 = _make_percent_swname(HEAP32[i9 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i11 >> 2] = i14;
  if (i14 | 0) {
   HEAP32[i10 >> 2] = _modname(HEAP32[i11 >> 2] | 0, 57799, 0) | 0;
   _vim_free(HEAP32[i11 >> 2] | 0);
  }
  HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 if ((_resolve_symlink(HEAP32[i7 >> 2] | 0, i13) | 0) == 1) HEAP32[i12 >> 2] = i13;
 if (HEAP32[(HEAP32[i8 >> 2] | 0) + 684 >> 2] | 0) i16 = 1; else i16 = (HEAP32[(HEAP32[i8 >> 2] | 0) + 784 >> 2] | 0) != 0;
 if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 46) i17 = (HEAPU8[(HEAP32[i9 >> 2] | 0) + 1 >> 0] | 0 | 0) == 0; else i17 = 0;
 HEAP32[i10 >> 2] = _buf_modname(i16 & 1, HEAP32[i12 >> 2] | 0, 57799, i17 & 1) | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 } else {
  HEAP32[i11 >> 2] = _get_file_in_dir(HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
  _vim_free(HEAP32[i10 >> 2] | 0);
  HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
  i15 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 return 0;
}

function _set_init_3() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = _findoption(69225) | 0;
 if ((HEAP32[i4 >> 2] | 0) < 0) HEAP32[i5 >> 2] = 0; else HEAP32[i5 >> 2] = ((HEAP32[15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 8 >> 2] & 256 | 0) != 0 ^ 1) & 1;
 HEAP32[i3 >> 2] = _get_isolated_shell_name() | 0;
 if (HEAP32[i3 >> 2] | 0) {
  do if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 72056) | 0)) i1 = 7; else if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 71273) | 0)) i1 = 7; else {
   if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 72064) | 0)) i1 = 17; else if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 71281) | 0)) i1 = 17; else if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 71285) | 0)) i1 = 17; else if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 71290) | 0)) i1 = 17; else if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 72060) | 0)) i1 = 17; else if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 71296) | 0)) i1 = 17; else if (!(_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 71305) | 0)) i1 = 17; else {
    i7 = (_vim_fnamecmp(HEAP32[i3 >> 2] | 0, 71310) | 0) == 0;
    if (!(i7 & (HEAP32[i5 >> 2] | 0) != 0)) break;
   }
   if ((i1 | 0) == 17) if (!(HEAP32[i5 >> 2] | 0)) break;
   HEAP32[26982] = 71315;
   HEAP32[15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 20 >> 2] = HEAP32[26982];
  } while (0);
  if ((i1 | 0) == 7) if (HEAP32[i5 >> 2] | 0) {
   HEAP32[26982] = 71278;
   HEAP32[15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 20 >> 2] = HEAP32[26982];
  }
  _vim_free(HEAP32[i3 >> 2] | 0);
 }
 if ((HEAP32[HEAP32[26773] >> 2] | 0) != 1) {
  STACKTOP = i2;
  return;
 }
 if (HEAPU8[(_ml_get(1) | 0) >> 0] | 0 | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i6 >> 2] = _findoption(63616) | 0;
 if ((HEAP32[i6 >> 2] | 0) < 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 8 >> 2] & 256)) {
  STACKTOP = i2;
  return;
 }
 _set_fileformat(_default_fileformat() | 0, 4);
 STACKTOP = i2;
 return;
}

function _resolve_symlink(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 4128 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 24 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i10 >> 2] = 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 _vim_strncpy(i8, HEAP32[i6 >> 2] | 0, 4095);
 while (1) {
  i2 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
  HEAP32[i10 >> 2] = i2;
  if ((i2 | 0) == 100) {
   i3 = 5;
   break;
  }
  HEAP32[i9 >> 2] = _readlink(i8, HEAP32[i7 >> 2] | 0, 4095) | 0;
  if ((HEAP32[i9 >> 2] | 0) <= 0) {
   i3 = 7;
   break;
  }
  HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] = 0;
  if (_mch_isFullName(HEAP32[i7 >> 2] | 0) | 0) _strcpy(i8, HEAP32[i7 >> 2] | 0) | 0; else {
   HEAP32[i11 >> 2] = _gettail(i8) | 0;
   i2 = _strlen(HEAP32[i11 >> 2] | 0) | 0;
   if ((i2 + (_strlen(HEAP32[i7 >> 2] | 0) | 0) | 0) >>> 0 >= 4096) {
    i3 = 15;
    break;
   }
   _strcpy(HEAP32[i11 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  }
 }
 if ((i3 | 0) == 5) {
  _emsg2(57804, HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 } else if ((i3 | 0) == 7) {
  if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 22) if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 2) {
   HEAP32[i5 >> 2] = 0;
   i12 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i12 | 0;
  }
  if ((HEAP32[i10 >> 2] | 0) == 1) {
   HEAP32[i5 >> 2] = 0;
   i12 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i12 | 0;
  } else {
   HEAP32[i5 >> 2] = _vim_FullName(i8, HEAP32[i7 >> 2] | 0, 4096, 1) | 0;
   i12 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i12 | 0;
  }
 } else if ((i3 | 0) == 15) {
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 return 0;
}

function _end_word(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 20 | 0;
 i8 = i6 + 16 | 0;
 i9 = i6 + 12 | 0;
 i10 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 i12 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[26484] = HEAP32[i9 >> 2];
 L1 : while (1) {
  i9 = (HEAP32[i8 >> 2] | 0) + -1 | 0;
  HEAP32[i8 >> 2] = i9;
  if ((i9 | 0) < 0) {
   i5 = 21;
   break;
  }
  HEAP32[i12 >> 2] = _cls() | 0;
  if ((_inc_cursor() | 0) == -1) {
   i5 = 4;
   break;
  }
  i9 = _cls() | 0;
  L5 : do if (HEAP32[i12 >> 2] | 0 ? (i9 | 0) == (HEAP32[i12 >> 2] | 0) : 0) if (_skip_chars(HEAP32[i12 >> 2] | 0, 1) | 0) {
   i5 = 7;
   break L1;
  } else i5 = 19; else if ((HEAP32[i10 >> 2] | 0) == 0 | (HEAP32[i12 >> 2] | 0) == 0) {
   while (1) {
    if (_cls() | 0) break;
    if (HEAP32[i11 >> 2] | 0) if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) if (!(HEAPU8[(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) >> 0] | 0)) break L5;
    if ((_inc_cursor() | 0) == -1) {
     i5 = 15;
     break L1;
    }
   }
   if (_skip_chars(_cls() | 0, 1) | 0) {
    i5 = 18;
    break L1;
   } else i5 = 19;
  } else i5 = 19; while (0);
  if ((i5 | 0) == 19) {
   i5 = 0;
   _dec_cursor() | 0;
  }
  HEAP32[i10 >> 2] = 0;
 }
 if ((i5 | 0) == 4) {
  HEAP32[i7 >> 2] = 0;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i13 | 0;
 } else if ((i5 | 0) == 7) {
  HEAP32[i7 >> 2] = 0;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i13 | 0;
 } else if ((i5 | 0) == 15) {
  HEAP32[i7 >> 2] = 0;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i13 | 0;
 } else if ((i5 | 0) == 18) {
  HEAP32[i7 >> 2] = 0;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i13 | 0;
 } else if ((i5 | 0) == 21) {
  HEAP32[i7 >> 2] = 1;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i13 | 0;
 }
 return 0;
}

function _ff_check_visited(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i4 + 92 | 0;
 i6 = i4 + 88 | 0;
 i7 = i4 + 84 | 0;
 i8 = i4 + 80 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i10 >> 2] = 0;
 i2 = (_path_with_url(HEAP32[i7 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[26058] | 0;
 if (i2) {
  _vim_strncpy(i1, HEAP32[i7 >> 2] | 0, 4095);
  HEAP32[i10 >> 2] = 1;
 } else {
  HEAP8[i1 >> 0] = 0;
  if ((_stat(HEAP32[i7 >> 2] | 0, i9) | 0) < 0) {
   HEAP32[i5 >> 2] = 0;
   i11 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i11 | 0;
  }
 }
 HEAP32[i8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) break;
  i7 = HEAP32[i8 >> 2] | 0;
  if (HEAP32[i10 >> 2] | 0) {
   if (!(_vim_fnamecmp(i7 + 16 | 0, HEAP32[26058] | 0) | 0)) {
    i3 = 12;
    break;
   }
  } else if (HEAP32[i7 + 4 >> 2] | 0) if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[i9 + 72 >> 2] | 0)) {
   i3 = 12;
   break;
  }
  HEAP32[i8 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
 }
 if ((i3 | 0) == 12) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i8 >> 2] = _alloc(20 + (_strlen(HEAP32[26058] | 0) | 0) | 0) | 0;
 if (HEAP32[i8 >> 2] | 0) {
  i3 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
  if (HEAP32[i10 >> 2] | 0) {
   HEAP32[i3 >> 2] = 0;
   _strcpy((HEAP32[i8 >> 2] | 0) + 16 | 0, HEAP32[26058] | 0) | 0;
  } else {
   HEAP32[i3 >> 2] = 1;
   HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] = HEAP32[i9 + 72 >> 2];
   HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = HEAP32[i9 >> 2];
   HEAP8[(HEAP32[i8 >> 2] | 0) + 16 >> 0] = 0;
  }
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
  HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i8 >> 2];
 }
 HEAP32[i5 >> 2] = 1;
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _set_curbuf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 40 | 0;
 i6 = i4 + 36 | 0;
 i7 = i4 + 32 | 0;
 i8 = i4 + 28 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[i6 >> 2] | 0) == 2 | (HEAP32[i6 >> 2] | 0) == 3) i12 = 1; else i12 = (HEAP32[i6 >> 2] | 0) == 4;
 HEAP32[i8 >> 2] = i12 & 1;
 _setpcmark();
 if (!(HEAP32[27130] | 0)) HEAP32[(HEAP32[26881] | 0) + 180 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
 _buflist_altfpos(HEAP32[26881] | 0);
 HEAP32[27119] = 0;
 HEAP32[i7 >> 2] = HEAP32[26773];
 _set_bufref(i10, HEAP32[i7 >> 2] | 0);
 _set_bufref(i9, HEAP32[i5 >> 2] | 0);
 if (_apply_autocmds(6, 0, 0, 0, HEAP32[26773] | 0) | 0) {
  if (_bufref_valid(i10) | 0) if (_bufref_valid(i9) | 0) i3 = 8;
 } else i3 = 8;
 if ((i3 | 0) == 8) {
  if (HEAP32[i8 >> 2] | 0) _close_windows(HEAP32[i7 >> 2] | 0, 0);
  if (_bufref_valid(i10) | 0) {
   HEAP32[i11 >> 2] = HEAP32[26881];
   if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26773] | 0)) _u_sync(0);
   i10 = HEAP32[26881] | 0;
   i9 = HEAP32[i7 >> 2] | 0;
   i12 = (i9 | 0) == (HEAP32[i10 + 4 >> 2] | 0) ? i10 | 0 : 0;
   i10 = i9 | 0;
   i9 = HEAP32[i6 >> 2] | 0;
   if (HEAP32[i8 >> 2] | 0) i13 = i9; else {
    if (!i9) if (_buf_hide(HEAP32[i7 >> 2] | 0) | 0) i14 = 0; else i14 = (_bufIsChanged(HEAP32[i7 >> 2] | 0) | 0) != 0 ^ 1; else i14 = 0;
    i13 = i14 ? 2 : 0;
   }
   _close_buffer(i12, i10, i13, 0);
   if ((HEAP32[26881] | 0) != (HEAP32[i11 >> 2] | 0)) if (_win_valid(HEAP32[i11 >> 2] | 0) | 0) HEAP32[26881] = HEAP32[i11 >> 2];
  }
 }
 if (_buf_valid(HEAP32[i5 >> 2] | 0) | 0) {
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26773] | 0)) i3 = 23;
 } else i3 = 23;
 if ((i3 | 0) == 23) if (HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) {
  STACKTOP = i4;
  return;
 }
 _enter_buffer(HEAP32[i5 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _get_one_sourceline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 36 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i10 >> 2] = 0;
 _ga_init2(i6, 1, 250);
 HEAP32[26732] = (HEAP32[26732] | 0) + 1;
 while (1) {
  if (!(_ga_grow(i6, 120) | 0)) break;
  HEAP32[i9 >> 2] = HEAP32[i6 + 16 >> 2];
  if (!(_fgets((HEAP32[i9 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, (HEAP32[i6 + 4 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0, HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0)) break;
  i1 = HEAP32[i6 >> 2] | 0;
  HEAP32[i7 >> 2] = i1 + (_strlen((HEAP32[i9 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0);
  HEAP32[i10 >> 2] = 1;
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  if (((HEAP32[i6 + 4 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0) == 1) if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] | 0 | 0) != 10) continue;
  if ((HEAP32[i7 >> 2] | 0) < 1) {
   i2 = 16;
   break;
  }
  if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] | 0 | 0) != 10) {
   i2 = 16;
   break;
  }
  HEAP32[i8 >> 2] = (HEAP32[i7 >> 2] | 0) - 2;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) < 0) break;
   if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) >> 0] | 0 | 0) != 22) break;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
  }
  if ((HEAP32[i7 >> 2] & 1 | 0) == (HEAP32[i8 >> 2] & 1 | 0)) {
   i2 = 15;
   break;
  }
  HEAP32[26732] = (HEAP32[26732] | 0) + 1;
 }
 if ((i2 | 0) == 15) {
  HEAP8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] = 0;
  i2 = 16;
 }
 if ((i2 | 0) == 16) _line_breakcheck();
 i2 = HEAP32[i6 + 16 >> 2] | 0;
 if (HEAP32[i10 >> 2] | 0) {
  HEAP32[i4 >> 2] = i2;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 } else {
  _vim_free(i2);
  HEAP32[i4 >> 2] = 0;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 return 0;
}

function _stuff_yank(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (HEAP32[i6 >> 2] | 0) if (!(_valid_yank_reg(HEAP32[i6 >> 2] | 0, 1) | 0)) {
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) == 95) {
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[i5 >> 2] = 1;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 _get_yank_register(HEAP32[i6 >> 2] | 0, 1) | 0;
 do if (HEAP32[26082] | 0) if (HEAP32[HEAP32[26084] >> 2] | 0) {
  HEAP32[i9 >> 2] = (HEAP32[HEAP32[26084] >> 2] | 0) + ((HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0) - 1 << 2);
  i6 = _strlen(HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = _lalloc(i6 + (_strlen(HEAP32[i7 >> 2] | 0) | 0) + 1 | 0, 1) | 0;
  if (HEAP32[i8 >> 2] | 0) {
   _strcpy(HEAP32[i8 >> 2] | 0, HEAP32[HEAP32[i9 >> 2] >> 2] | 0) | 0;
   _strcat(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   _vim_free(HEAP32[i7 >> 2] | 0);
   _vim_free(HEAP32[HEAP32[i9 >> 2] >> 2] | 0);
   HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i8 >> 2];
   break;
  }
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } else i3 = 11; else i3 = 11; while (0);
 do if ((i3 | 0) == 11) {
  _free_yank_all();
  i8 = _alloc(4) | 0;
  HEAP32[HEAP32[26084] >> 2] = i8;
  i9 = HEAP32[i7 >> 2] | 0;
  if (i8 | 0) {
   HEAP32[HEAP32[HEAP32[26084] >> 2] >> 2] = i9;
   HEAP32[(HEAP32[26084] | 0) + 4 >> 2] = 1;
   HEAP8[(HEAP32[26084] | 0) + 8 >> 0] = 0;
   break;
  }
  _vim_free(i9);
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } while (0);
 HEAP32[i5 >> 2] = 1;
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _ex_quit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if (_text_locked() | 0) {
  _text_locked_msg();
  STACKTOP = i3;
  return;
 }
 L5 : do if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) > 0) {
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
  HEAP32[i5 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0)) break L5;
   i1 = (HEAP32[i6 >> 2] | 0) + -1 | 0;
   HEAP32[i6 >> 2] = i1;
   if ((i1 | 0) <= 0) break L5;
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
  }
 } else HEAP32[i5 >> 2] = HEAP32[26881]; while (0);
 if (_curbuf_locked() | 0) {
  STACKTOP = i3;
  return;
 }
 if (_before_quit_autocmds(HEAP32[i5 >> 2] | 0, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0) {
  STACKTOP = i3;
  return;
 }
 if ((_check_more(0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0) == 1) if (_only_one_window() | 0) HEAP32[26778] = 1;
 if (_buf_hide(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0) i2 = 16; else if (!(_check_changed(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[26891] | 0 ? 1 : 0) | (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0 ? 4 : 0) | 16) | 0)) i2 = 16;
 do if ((i2 | 0) == 16) if (_check_more(1, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0) {
  if (_only_one_window() | 0) if (_check_changed_any(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, 1) | 0) break;
  do if (_only_one_window() | 0) {
   if ((HEAP32[26887] | 0) != (HEAP32[27112] | 0)) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) break;
   _getout(0);
  } while (0);
  _not_exiting();
  HEAP32[26757] = 1;
  i6 = HEAP32[i5 >> 2] | 0;
  if (_buf_hide(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0) i7 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) != 0; else i7 = 1;
  _win_close(i6, i7 & 1) | 0;
  STACKTOP = i3;
  return;
 } while (0);
 _not_exiting();
 STACKTOP = i3;
 return;
}

function _clip_update_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if (!((HEAP32[26790] | 0) == 0 & (HEAP32[26788] | 0) != 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[10180] & 1)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[27117] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i2 = 6; else i2 = 7; else if ((HEAP32[27118] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i2 = 6; else i2 = 7;
 if ((i2 | 0) == 6) {
  HEAP32[i5 >> 2] = HEAP32[27117];
  HEAP32[i5 + 4 >> 2] = HEAP32[27118];
  i1 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 } else if ((i2 | 0) == 7) {
  i2 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i6 >> 2] = HEAP32[27117];
  HEAP32[i6 + 4 >> 2] = HEAP32[27118];
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 + 4 >> 2] | 0) == (HEAP32[i5 + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 + 4 >> 2] | 0) == (HEAP32[i6 + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) == (HEAP32[10179] | 0)) {
  STACKTOP = i3;
  return;
 }
 _clip_clear_selection(HEAP32[i4 >> 2] | 0);
 i2 = (HEAP32[i4 >> 2] | 0) + 8 | 0;
 HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 i5 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] = HEAP32[10179];
 _clip_free_selection(HEAP32[i4 >> 2] | 0);
 _clip_own_selection(HEAP32[i4 >> 2] | 0);
 _clip_gen_set_selection(HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ins_mousescroll(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2 + 24 | 0;
 i5 = i2 + 20 | 0;
 i6 = i2 + 16 | 0;
 i7 = i2 + 12 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2 + 4 | 0;
 i10 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[26881];
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 do if ((HEAP32[27095] | 0) >= 0 & (HEAP32[27096] | 0) >= 0) {
  HEAP32[i7 >> 2] = HEAP32[27095];
  HEAP32[i8 >> 2] = HEAP32[27096];
  HEAP32[i6 >> 2] = _mouse_find_win(i7, i8) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  } else {
   HEAP32[26881] = HEAP32[i6 >> 2];
   HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
   break;
  }
 } while (0);
 if ((HEAP32[26881] | 0) == (HEAP32[i5 >> 2] | 0)) _undisplay_dollar();
 do if ((HEAP32[i3 >> 2] | 0) == 0 | (HEAP32[i3 >> 2] | 0) == 1) {
  i6 = HEAP32[i3 >> 2] | 0;
  if (HEAP32[26698] & 6 | 0) {
   i8 = HEAP32[26881] | 0;
   _scroll_redraw(i6, (HEAP32[i8 + 144 >> 2] | 0) - (HEAP32[i8 + 68 >> 2] | 0) | 0);
   break;
  } else {
   _scroll_redraw(i6, 3);
   break;
  }
 } else {
  HEAP32[i10 >> 2] = 6;
  if (HEAP32[26698] & 6 | 0) HEAP32[i10 >> 2] = HEAP32[(HEAP32[26881] | 0) + 100 >> 2];
  i6 = HEAP32[i10 >> 2] | 0;
  i8 = (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) == -2 ? 0 - i6 | 0 : i6) | 0;
  HEAP32[i9 >> 2] = i8;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) < 0 ? 0 : i8;
  _gui_do_horiz_scroll(HEAP32[i9 >> 2] | 0, 1) | 0;
 } while (0);
 HEAP32[(HEAP32[26881] | 0) + 176 >> 2] = 1;
 HEAP32[26881] = HEAP32[i5 >> 2];
 HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) == (HEAP32[i4 + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _start_arrow(i4);
 STACKTOP = i2;
 return;
}

function _ex_read(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 64 >> 2] | 0) {
  _do_bang(1, i1, 0, 0, 1);
  STACKTOP = i2;
  return;
 }
 if (!(_u_save(HEAP32[i1 + 40 >> 2] | 0, (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 do if (!(HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0)) if (!(_check_fname() | 0)) {
  STACKTOP = i2;
  return;
 } else {
  i1 = HEAP32[26773] | 0;
  i7 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = _readfile(HEAP32[i1 + 68 >> 2] | 0, HEAP32[i1 + 76 >> 2] | 0, HEAP32[i7 + 40 >> 2] | 0, 0, 2147483647, i7 | 0, 0) | 0;
  break;
 } else {
  if (_vim_strchr(HEAP32[26904] | 0, 97) | 0) {
   i7 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
   _setaltfname(i7 | 0, i7 | 0, 1) | 0;
  }
  i7 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = _readfile(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 0, HEAP32[i7 + 40 >> 2] | 0, 0, 2147483647, i7 | 0, 0) | 0;
 } while (0);
 if ((HEAP32[i4 >> 2] | 0) != 1) {
  _emsg2(93293, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[26798] | 0) != 0) {
  if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[HEAP32[26773] >> 2]; else HEAP32[i6 >> 2] = 1;
  if (!(HEAPU8[(_ml_get(HEAP32[i6 >> 2] | 0) | 0) >> 0] | 0)) if ((_u_savedel(HEAP32[i6 >> 2] | 0, 1) | 0) == 1) {
   _ml_delete(HEAP32[i6 >> 2] | 0, 0) | 0;
   if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > 1) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
    i3 = (HEAP32[26881] | 0) + 24 | 0;
    HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
   }
   _deleted_lines_mark(HEAP32[i6 >> 2] | 0, 1);
  }
 }
 _redraw_curbuf_later(10);
 STACKTOP = i2;
 return;
}

function _gui_mch_get_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3 + 25 | 0;
 i10 = i3;
 i11 = i3 + 24 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i4 >> 2] = -11111;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 35) {
  HEAP32[i4 >> 2] = _gui_name_to_builtin_color(HEAP32[i5 >> 2] | 0) | 0;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) != 7 & (HEAP32[i6 >> 2] | 0) != 4) {
  HEAP32[i4 >> 2] = -11111;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 HEAP32[i7 >> 2] = 1;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  if (!(_vim_isxdigit(HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0) | 0)) {
   i2 = 10;
   break;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 10) {
  HEAP32[i4 >> 2] = -11111;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 HEAP32[i8 >> 2] = (HEAP32[i6 >> 2] | 0) == 4 & 1;
 if ((HEAP32[i6 >> 2] | 0) != 4) {
  HEAP32[i4 >> 2] = _strtol((HEAP32[i5 >> 2] | 0) + 1 | 0, 0, 16) | 0;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= 3) break;
  HEAP8[i11 >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[i9 + (HEAP32[i10 >> 2] << 1) >> 0] = HEAP8[i11 >> 0] | 0;
  HEAP8[i9 + ((HEAP32[i10 >> 2] << 1) + 1) >> 0] = HEAP8[i11 >> 0] | 0;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 HEAP8[i9 + 6 >> 0] = 0;
 HEAP32[i4 >> 2] = _strtol(i9, 0, 16) | 0;
 i12 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i12 | 0;
}

function _show_one_termcode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = HEAP32[26882] | 0;
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) > 126) {
  HEAP8[i3 >> 0] = 32;
  HEAP8[(HEAP32[26882] | 0) + 1 >> 0] = 32;
  HEAP8[(HEAP32[26882] | 0) + 2 >> 0] = 32;
  HEAP8[(HEAP32[26882] | 0) + 3 >> 0] = 32;
 } else {
  HEAP8[i3 >> 0] = 116;
  HEAP8[(HEAP32[26882] | 0) + 1 >> 0] = 95;
  HEAP8[(HEAP32[26882] | 0) + 2 >> 0] = HEAP8[HEAP32[i5 >> 2] >> 0] | 0;
  HEAP8[(HEAP32[26882] | 0) + 3 >> 0] = HEAP8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0;
 }
 HEAP8[(HEAP32[26882] | 0) + 4 >> 0] = 32;
 HEAP32[i8 >> 2] = _get_special_key_name(0 - ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) + ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) << 8)) | 0, 0) | 0;
 i5 = (HEAP32[26882] | 0) + 5 | 0;
 if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0 | 0) != 116) _strcpy(i5, HEAP32[i8 >> 2] | 0) | 0; else HEAP8[i5 >> 0] = 0;
 HEAP32[i9 >> 2] = _strlen(HEAP32[26882] | 0) | 0;
 do {
  i5 = HEAP32[26882] | 0;
  i8 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i8 + 1;
  HEAP8[i5 + i8 >> 0] = 32;
 } while ((HEAP32[i9 >> 2] | 0) < 17);
 HEAP8[(HEAP32[26882] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] = 0;
 if (!(HEAP32[i6 >> 2] | 0)) HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 4; else {
  i8 = _vim_strsize(HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i8;
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 _msg_puts(HEAP32[26882] | 0);
 if (!(HEAP32[i6 >> 2] | 0)) {
  _msg_puts(80549);
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } else {
  _msg_outtrans(HEAP32[i6 >> 2] | 0) | 0;
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 return 0;
}

function _ex_messages(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 i1 = (_strcmp(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 97712) | 0) == 0;
 i8 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  if (!(HEAP32[i8 + 32 >> 2] | 0)) i9 = 0; else i9 = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0;
  HEAP32[i7 >> 2] = i9;
  while (1) {
   if ((HEAP32[27236] | 0) <= (HEAP32[i7 >> 2] | 0)) break;
   _delete_first_msg() | 0;
  }
  STACKTOP = i2;
  return;
 }
 if (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) {
  _emsg(92453) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[26716] = 1;
 HEAP32[i4 >> 2] = HEAP32[27237];
 L15 : do if (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) {
  while (1) {
   if (!(HEAP32[i4 >> 2] | 0)) break;
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0);
  HEAP32[i4 >> 2] = HEAP32[27237];
  while (1) {
   if (!(HEAP32[i4 >> 2] | 0)) break L15;
   if (!((HEAP32[26834] | 0) == 0 & (HEAP32[i6 >> 2] | 0) > 0)) break L15;
   HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  }
 } while (0);
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[27237] | 0)) {
  HEAP32[i5 >> 2] = _getenv(100567) | 0;
  if (HEAP32[i5 >> 2] | 0) if (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) _msg_attr(97718, HEAP32[27064] | 0) | 0;
 }
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) {
   i5 = HEAP32[i4 >> 2] | 0;
   _msg_attr(HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0) | 0;
  }
  HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 }
 HEAP32[26716] = 0;
 STACKTOP = i2;
 return;
}

function _scrolldown(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 + 12 >> 2] = i2;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 _validate_cursor();
 while (1) {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i2 + -1;
  if ((i2 | 0) <= 0) break;
  if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) == 1) break;
  i2 = (HEAP32[26881] | 0) + 68 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  i2 = _plines(HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
  i2 = (HEAP32[26881] | 0) + 144 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  _invalidate_botline();
 }
 i4 = (HEAP32[26881] | 0) + 136 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
 i4 = (HEAP32[26881] | 0) + 128 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 136 >> 2];
 if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) if (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) {
  _validate_virtcol();
  _validate_cheight();
  i5 = HEAP32[26881] | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + ((HEAP32[i5 + 124 >> 2] | 0) - 1 - ((HEAP32[i5 + 132 >> 2] | 0) / (HEAP32[i5 + 100 >> 2] | 0) | 0));
 }
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= 1) break;
  i5 = (HEAP32[26881] | 0) + 24 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i4 + -1;
  i5 = _plines(i4) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - i5;
  i5 = (HEAP32[26881] | 0) + 108 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -32;
  HEAP32[i7 >> 2] = 1;
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _gui_update_horiz_scrollbar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[26663] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) == 0 & (HEAP32[26632] | 0) == 2) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[i3 >> 2] | 0)) if (HEAP32[26664] | 0 ? (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) != 0 : 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
  HEAP32[26654] = -1;
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[26881] | 0) + 100 >> 2];
 if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) {
  HEAP32[i4 >> 2] = 0;
  HEAP32[i6 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - 1;
 } else {
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[26881] | 0) + 76 >> 2];
  HEAP32[26682] = _gui_find_longest_lnum() | 0;
  HEAP32[i6 >> 2] = _scroll_line_len(HEAP32[26682] | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + ((HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - 1);
  i1 = _curwin_col_off() | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - i1;
  i1 = _curwin_col_off() | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) - i1;
 }
 if ((HEAP32[i4 >> 2] | 0) > ((HEAP32[i6 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) + 1 | 0)) HEAP32[i4 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) + 1;
 if (!(HEAP32[i3 >> 2] | 0)) if ((HEAP32[i4 >> 2] | 0) == (HEAP32[26654] | 0)) if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26655] | 0)) if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26656] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26654] = HEAP32[i4 >> 2];
 HEAP32[26655] = HEAP32[i5 >> 2];
 HEAP32[26656] = HEAP32[i6 >> 2];
 HEAP32[26664] = HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2];
 _gui_mch_set_scrollbar_thumb(106604, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _win_altframe(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (!(HEAP32[i7 >> 2] | 0)) {
  if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) i3 = 4;
 } else if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] | 0)) i3 = 4;
 if ((i3 | 0) == 4) {
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[(_alt_tabpage() | 0) + 8 >> 2] | 0) + 20 >> 2];
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2];
 i6 = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] | 0)) {
  HEAP32[i5 >> 2] = i6;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 i7 = HEAP32[i8 >> 2] | 0;
 if (!i6) {
  HEAP32[i5 >> 2] = HEAP32[i7 + 28 >> 2];
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i10 >> 2] = HEAP32[i7 + 24 >> 2];
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2];
 if ((HEAP32[26995] | 0) != 0 | (HEAP32[26993] | 0) != 0) {
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2];
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
 }
 if (HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] | 0) if ((HEAP8[HEAP32[(HEAP32[i8 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 1) {
  if (_frame_fixed_width(HEAP32[i10 >> 2] | 0) | 0) if (!(_frame_fixed_width(HEAP32[i9 >> 2] | 0) | 0)) HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 } else i3 = 16; else i3 = 16;
 if ((i3 | 0) == 16) if (_frame_fixed_height(HEAP32[i10 >> 2] | 0) | 0) if (!(_frame_fixed_height(HEAP32[i9 >> 2] | 0) | 0)) HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i10 >> 2];
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _getvpos(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 28 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 i12 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = 0;
 if ((HEAP32[10180] & 16 | 0) != 0 | (HEAP32[26806] | 0) != 0) i13 = 1; else if (HEAP32[26788] | 0) i13 = (HEAPU8[HEAP32[26975] >> 0] | 0 | 0) != 111; else i13 = 0;
 HEAP32[i12 >> 2] = i13 & 1;
 HEAP32[i9 >> 2] = _ml_get_buf(HEAP32[26773] | 0, HEAP32[HEAP32[i5 >> 2] >> 2] | 0, 0) | 0;
 i13 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[i6 >> 2] | 0) >= 2147483647) {
  i2 = (_strlen(i13) | 0) - 1 | 0;
  HEAP32[i7 >> 2] = i2 + (HEAP32[i12 >> 2] | 0);
  HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
 } else {
  HEAP32[i8 >> 2] = i13;
  while (1) {
   if ((HEAP32[i10 >> 2] | 0) > (HEAP32[i6 >> 2] | 0)) break;
   if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
   HEAP32[i11 >> 2] = _lbr_chartabsize_adv(HEAP32[i9 >> 2] | 0, i8, HEAP32[i10 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  }
  HEAP32[i7 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
  if ((HEAP32[i12 >> 2] | 0) == 0 ? 1 : (HEAP32[i10 >> 2] | 0) > (HEAP32[i6 >> 2] | 0)) {
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - 1;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
  }
 }
 if ((HEAP32[i7 >> 2] | 0) < 0) HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = 0; else HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 if ((HEAP32[i10 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i14 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i14 | 0;
 } else {
  HEAP32[i4 >> 2] = 1;
  i14 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i14 | 0;
 }
 return 0;
}

function _shift_line(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i13 >> 2] = _get_sw_value(HEAP32[26773] | 0) | 0;
 HEAP32[i10 >> 2] = _get_indent() | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  i7 = Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  i4 = HEAP32[i10 >> 2] | 0;
  if (HEAP32[i6 >> 2] | 0) {
   i3 = i4 - i7 | 0;
   HEAP32[i10 >> 2] = i3;
   HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) < 0 ? 0 : i3;
   i14 = HEAP32[i10 >> 2] | 0;
   i15 = HEAP32[i9 >> 2] | 0;
   i16 = (i15 | 0) != 0;
   i17 = i16 ? 1 : 0;
   _set_indent(i14, i17) | 0;
   STACKTOP = i5;
   return;
  } else {
   HEAP32[i10 >> 2] = i4 + i7;
   i14 = HEAP32[i10 >> 2] | 0;
   i15 = HEAP32[i9 >> 2] | 0;
   i16 = (i15 | 0) != 0;
   i17 = i16 ? 1 : 0;
   _set_indent(i14, i17) | 0;
   STACKTOP = i5;
   return;
  }
 }
 HEAP32[i11 >> 2] = (HEAP32[i10 >> 2] | 0) / (HEAP32[i13 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = (HEAP32[i10 >> 2] | 0) % (HEAP32[i13 >> 2] | 0) | 0;
 if ((HEAP32[i12 >> 2] | 0) != 0 & (HEAP32[i6 >> 2] | 0) != 0) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
 i12 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i11 >> 2] | 0;
 if (HEAP32[i6 >> 2] | 0) {
  i6 = i8 - i12 | 0;
  HEAP32[i11 >> 2] = i6;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) < 0 ? 0 : i6;
 } else HEAP32[i11 >> 2] = i8 + i12;
 HEAP32[i10 >> 2] = Math_imul(HEAP32[i11 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
 i14 = HEAP32[i10 >> 2] | 0;
 i15 = HEAP32[i9 >> 2] | 0;
 i16 = (i15 | 0) != 0;
 i17 = i16 ? 1 : 0;
 _set_indent(i14, i17) | 0;
 STACKTOP = i5;
 return;
}

function _showmap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 1;
 if (_message_filtered(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0) if (_message_filtered(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) | 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26711] | 0) != 0 | (HEAP32[26809] | 0) != 0) {
  _msg_putchar(10);
  if (HEAP32[26834] | 0) {
   STACKTOP = i3;
   return;
  }
 }
 HEAP32[i7 >> 2] = _map_mode_to_chars(HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) | 0;
 if (HEAP32[i7 >> 2] | 0) {
  _msg_puts(HEAP32[i7 >> 2] | 0);
  HEAP32[i6 >> 2] = _strlen(HEAP32[i7 >> 2] | 0) | 0;
  _vim_free(HEAP32[i7 >> 2] | 0);
 }
 while (1) {
  i7 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i7;
  if ((i7 | 0) > 3) break;
  _msg_putchar(32);
 }
 HEAP32[i6 >> 2] = _msg_outtrans_special(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0, 1) | 0;
 do {
  _msg_putchar(32);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 } while ((HEAP32[i6 >> 2] | 0) < 12);
 do if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) == -1) _msg_puts_attr(84483, HEAP32[27048] | 0); else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) == -2) {
  _msg_puts_attr(72144, HEAP32[27048] | 0);
  break;
 } else {
  _msg_putchar(32);
  break;
 } while (0);
 if (HEAP32[i5 >> 2] | 0) _msg_putchar(64); else _msg_putchar(32);
 if (!(HEAPU8[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] >> 0] | 0)) _msg_puts_attr(56351, HEAP32[27048] | 0); else {
  HEAP32[i8 >> 2] = _vim_strsave(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) | 0;
  if (HEAP32[i8 >> 2] | 0) {
   _vim_unescape_csi(HEAP32[i8 >> 2] | 0);
   _msg_outtrans_special(HEAP32[i8 >> 2] | 0, 0) | 0;
   _vim_free(HEAP32[i8 >> 2] | 0);
  }
 }
 _out_flush();
 STACKTOP = i3;
 return;
}

function _mouse_find_win(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[27114];
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - (HEAP32[(HEAP32[26887] | 0) + 84 >> 2] | 0);
 while (1) {
  if (!(HEAP8[HEAP32[i8 >> 2] >> 0] | 0)) break;
  i2 = (HEAP8[HEAP32[i8 >> 2] >> 0] | 0) == 1;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2];
  L4 : do if (i2) while (1) {
   if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0)) break L4;
   if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) < (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0)) break L4;
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
  } else while (1) {
   if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0)) break L4;
   if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) < (HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0)) break L4;
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) - (HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0);
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
  } while (0);
 }
 HEAP32[i9 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i9 >> 2] | 0)) {
   i3 = 18;
   break;
  }
  i10 = HEAP32[i9 >> 2] | 0;
  if ((HEAP32[i9 >> 2] | 0) == (HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] | 0)) {
   i3 = 16;
   break;
  }
  HEAP32[i9 >> 2] = HEAP32[i10 + 12 >> 2];
 }
 if ((i3 | 0) == 16) {
  HEAP32[i5 >> 2] = i10;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 } else if ((i3 | 0) == 18) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 return 0;
}

function _nfa_get_regstart(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 do if ((HEAP32[i7 >> 2] | 0) > 4) HEAP32[i5 >> 2] = 0; else {
  L4 : while (1) {
   if (!(HEAP32[i8 >> 2] | 0)) {
    i3 = 13;
    break;
   }
   switch (HEAP32[HEAP32[i8 >> 2] >> 2] | 0) {
   case -1024:
    {
     i3 = 7;
     break L4;
     break;
    }
   case -999:
   case -957:
   case -958:
   case -959:
   case -960:
   case -961:
   case -962:
   case -963:
   case -964:
   case -965:
   case -966:
   case -872:
   case -873:
   case -874:
   case -875:
   case -876:
   case -877:
   case -878:
   case -879:
   case -880:
   case -881:
   case -882:
   case -883:
   case -871:
   case -884:
   case -1e3:
   case -1001:
   case -1005:
   case -1006:
   case -1004:
   case -1008:
    break;
   default:
    {
     i3 = 10;
     break L4;
    }
   }
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2];
  }
  if ((i3 | 0) == 7) {
   HEAP32[i9 >> 2] = _nfa_get_regstart(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0;
   HEAP32[i10 >> 2] = _nfa_get_regstart(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0;
   if ((HEAP32[i9 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) {
    HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
    break;
   } else {
    HEAP32[i5 >> 2] = 0;
    break;
   }
  } else if ((i3 | 0) == 10) if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) > 0) {
   HEAP32[i5 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
   break;
  } else {
   HEAP32[i5 >> 2] = 0;
   break;
  } else if ((i3 | 0) == 13) {
   HEAP32[i5 >> 2] = 0;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return HEAP32[i5 >> 2] | 0;
}

function _do_tags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3;
 i5 = i3 + 36 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 28 | 0;
 i8 = i3 + 24 | 0;
 i9 = i3 + 20 | 0;
 HEAP32[i3 + 40 >> 2] = i1;
 HEAP32[i7 >> 2] = (HEAP32[26881] | 0) + 316;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 796 >> 2];
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[26881] | 0) + 800 >> 2];
 _msg_puts_title(78816);
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i9 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) * 24 | 0) >> 2] | 0) {
   HEAP32[i6 >> 2] = _fm_getname((HEAP32[i7 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) * 24 | 0) + 4 | 0, 30) | 0;
   if (HEAP32[i6 >> 2] | 0) {
    _msg_putchar(10);
    i1 = HEAP32[26882] | 0;
    i10 = HEAP32[i5 >> 2] | 0;
    i11 = i10 + 1 | 0;
    i10 = (HEAP32[i7 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) * 24 | 0) | 0;
    i12 = (HEAP32[i10 + 16 >> 2] | 0) + 1 | 0;
    i13 = HEAP32[i10 >> 2] | 0;
    i14 = HEAP32[i10 + 4 >> 2] | 0;
    HEAP32[i4 >> 2] = (HEAP32[i5 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) ? 62 : 32;
    HEAP32[i4 + 4 >> 2] = i11;
    HEAP32[i4 + 8 >> 2] = i12;
    HEAP32[i4 + 12 >> 2] = i13;
    HEAP32[i4 + 16 >> 2] = i14;
    _vim_snprintf(i1, 1025, 78860, i4) | 0;
    _msg_outtrans(HEAP32[26882] | 0) | 0;
    _msg_outtrans_attr(HEAP32[i6 >> 2] | 0, (HEAP32[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) * 24 | 0) + 4 + 8 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0) ? HEAP32[27051] | 0 : 0) | 0;
    _vim_free(HEAP32[i6 >> 2] | 0);
    i2 = 6;
   }
  } else i2 = 6;
  if ((i2 | 0) == 6) {
   i2 = 0;
   _out_flush();
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((HEAP32[i8 >> 2] | 0) != (HEAP32[i9 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _msg_puts(78883);
 STACKTOP = i3;
 return;
}

function _str2special(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAPU8[HEAP32[i8 >> 2] >> 0];
 if ((HEAP32[i7 >> 2] | 0) == 128) if (HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) if (HEAPU8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] | 0) {
  if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) == 252) {
   HEAP32[i9 >> 2] = HEAPU8[(HEAP32[i8 >> 2] | 0) + 2 >> 0];
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 3;
   HEAP32[i7 >> 2] = HEAPU8[HEAP32[i8 >> 2] >> 0];
  }
  if ((HEAP32[i7 >> 2] | 0) == 128) if (HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) if (HEAPU8[(HEAP32[i8 >> 2] | 0) + 2 >> 0] | 0) {
   if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) == 254) i11 = 128; else if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] | 0) == 255) i11 = -22783; else {
    i2 = HEAP32[i8 >> 2] | 0;
    i11 = 0 - ((HEAPU8[i2 + 1 >> 0] | 0) + (HEAPU8[i2 + 2 >> 0] << 8)) | 0;
   }
   HEAP32[i7 >> 2] = i11;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 2;
  }
  if ((HEAP32[i7 >> 2] | 0) < 0 | (HEAP32[i9 >> 2] | 0) != 0) HEAP32[i10 >> 2] = 1;
 }
 HEAP32[HEAP32[i5 >> 2] >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 if (!(HEAP32[i10 >> 2] | 0)) if ((_char2cells(HEAP32[i7 >> 2] | 0) | 0) <= 1) if (!((HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) == 32)) {
  HEAP8[114073] = HEAP32[i7 >> 2];
  HEAP8[114074] = 0;
  HEAP32[i4 >> 2] = 114073;
  i12 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i12 | 0;
 }
 HEAP32[i4 >> 2] = _get_special_key_name(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 i12 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i12 | 0;
}

function _v_swap_corners(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[i3 >> 2] | 0) == 79 & (HEAP32[10179] | 0) == 22;
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 i3 = HEAP32[26881] | 0;
 if (!i1) {
  i1 = i3 + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[27117];
  HEAP32[i1 + 4 >> 2] = HEAP32[27118];
  HEAP32[27117] = HEAP32[i4 >> 2];
  HEAP32[27118] = HEAP32[i4 + 4 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  STACKTOP = i2;
  return;
 }
 _getvcols(i3, i4, 108468, i5, i6);
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[27117];
 _coladvance(HEAP32[i5 >> 2] | 0) | 0;
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[27117] = HEAP32[i3 >> 2];
 HEAP32[27118] = HEAP32[i3 + 4 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i4 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[i6 >> 2];
 if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[27117] | 0)) if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) {
  i3 = (HEAP32[26881] | 0) + 32 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) != (HEAP32[i4 + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[27117];
 if ((HEAP32[i4 >> 2] | 0) <= (HEAP32[27117] | 0)) if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 _coladvance(HEAP32[i6 >> 2] | 0) | 0;
 i6 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[27117] = HEAP32[i6 >> 2];
 HEAP32[27118] = HEAP32[i6 + 4 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i4 >> 2];
 _coladvance(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i2;
 return;
}

function _win_goto_hor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 20 >> 2];
 L1 : while (1) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + -1;
  if (!i2) break;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) == (HEAP32[27114] | 0)) break L1;
   i2 = HEAP32[i6 >> 2] | 0;
   if (HEAP32[i4 >> 2] | 0) HEAP32[i7 >> 2] = HEAP32[i2 + 28 >> 2]; else HEAP32[i7 >> 2] = HEAP32[i2 + 24 >> 2];
   if (HEAP32[i7 >> 2] | 0 ? (HEAP8[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 1 : 0) break;
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2];
  }
  while (1) {
   i9 = HEAP32[i7 >> 2] | 0;
   if (!(HEAP8[HEAP32[i7 >> 2] >> 0] | 0)) break;
   HEAP32[i6 >> 2] = HEAP32[i9 + 32 >> 2];
   L16 : do if ((HEAP8[HEAP32[i7 >> 2] >> 0] | 0) == 2) while (1) {
    if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0)) break L16;
    i2 = HEAP32[(_frame2win(HEAP32[i6 >> 2] | 0) | 0) + 84 >> 2] | 0;
    if ((i2 + (HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) | 0) > ((HEAP32[(HEAP32[26881] | 0) + 84 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 136 >> 2] | 0) | 0)) break L16;
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
   } while (0);
   L23 : do if (HEAP32[i4 >> 2] | 0 ? (HEAP8[HEAP32[i7 >> 2] >> 0] | 0) == 1 : 0) while (1) {
    if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0)) break L23;
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
   } while (0);
   HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  }
  HEAP32[i8 >> 2] = i9;
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _win_goto(HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _set_b0_fname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i4 = i3 + 88 | 0;
 i5 = i3 + 84 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 i9 = i3 + 96 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0)) {
  HEAP8[(HEAP32[i4 >> 2] | 0) + 108 >> 0] = 0;
  STACKTOP = i3;
  return;
 }
 _home_replace(0, HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0, (HEAP32[i4 >> 2] | 0) + 108 | 0, 890, 1);
 do if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 108 >> 0] | 0) == 126) {
  HEAP32[i7 >> 2] = _strlen((HEAP32[i4 >> 2] | 0) + 108 | 0) | 0;
  if (_get_user_name(i9, 40) | 0) {
   i2 = _strlen(i9) | 0;
   HEAP32[i8 >> 2] = i2;
   if ((i2 + (HEAP32[i7 >> 2] | 0) | 0) >>> 0 <= 889) {
    i2 = (HEAP32[i4 >> 2] | 0) + 108 | 0;
    _memmove(i2 + (HEAP32[i8 >> 2] | 0) + 1 | 0, i2 + 1 | 0, HEAP32[i7 >> 2] | 0) | 0;
    _memmove((HEAP32[i4 >> 2] | 0) + 108 + 1 | 0, i9 | 0, HEAP32[i8 >> 2] | 0) | 0;
    break;
   }
  }
  _vim_strncpy((HEAP32[i4 >> 2] | 0) + 108 | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0, 889);
 } while (0);
 if ((_stat(HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0, i6) | 0) >= 0) {
  _long_to_char(HEAP32[i6 + 56 >> 2] | 0, (HEAP32[i4 >> 2] | 0) + 16 | 0);
  _long_to_char(HEAP32[i6 + 72 >> 2] | 0, (HEAP32[i4 >> 2] | 0) + 20 | 0);
  i8 = HEAP32[i5 >> 2] | 0;
  _buf_store_time(i8 | 0, i6, HEAP32[i8 + 68 >> 2] | 0);
  i8 = HEAP32[i5 >> 2] | 0;
  HEAP32[i8 + 176 >> 2] = HEAP32[i8 + 172 >> 2];
  STACKTOP = i3;
  return;
 } else {
  _long_to_char(0, (HEAP32[i4 >> 2] | 0) + 16 | 0);
  _long_to_char(0, (HEAP32[i4 >> 2] | 0) + 20 | 0);
  HEAP32[(HEAP32[i5 >> 2] | 0) + 172 >> 2] = 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 176 >> 2] = 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 180 >> 2] = 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 184 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
}

function _win_goto_ver(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 20 >> 2];
 L1 : while (1) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + -1;
  if (!i2) break;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) == (HEAP32[27114] | 0)) break L1;
   i2 = HEAP32[i6 >> 2] | 0;
   if (HEAP32[i4 >> 2] | 0) HEAP32[i7 >> 2] = HEAP32[i2 + 28 >> 2]; else HEAP32[i7 >> 2] = HEAP32[i2 + 24 >> 2];
   if (HEAP32[i7 >> 2] | 0 ? (HEAP8[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 2 : 0) break;
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2];
  }
  while (1) {
   i9 = HEAP32[i7 >> 2] | 0;
   if (!(HEAP8[HEAP32[i7 >> 2] >> 0] | 0)) break;
   HEAP32[i6 >> 2] = HEAP32[i9 + 32 >> 2];
   L16 : do if ((HEAP8[HEAP32[i7 >> 2] >> 0] | 0) == 1) while (1) {
    if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0)) break L16;
    i2 = HEAP32[(_frame2win(HEAP32[i6 >> 2] | 0) | 0) + 96 >> 2] | 0;
    if ((i2 + (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) > ((HEAP32[(HEAP32[26881] | 0) + 96 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 140 >> 2] | 0) | 0)) break L16;
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
   } while (0);
   L23 : do if (HEAP32[i4 >> 2] | 0 ? (HEAP8[HEAP32[i7 >> 2] >> 0] | 0) == 2 : 0) while (1) {
    if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0)) break L23;
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
   } while (0);
   HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
  }
  HEAP32[i8 >> 2] = i9;
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _win_goto(HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _clip_invert_area(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 28 | 0;
 i8 = i6 + 24 | 0;
 i9 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i11 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 >> 2] = (HEAP32[i11 >> 2] | 0) == 2 ? 1 : 0;
 if ((_clip_compare_pos(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0) > 0) {
  HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i10 >> 2] = HEAP32[i14 >> 2];
 } else if ((HEAP32[i11 >> 2] | 0) == 3) HEAP32[i12 >> 2] = 1;
 if ((HEAP32[i7 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
  i11 = HEAP32[i8 >> 2] | 0;
  _clip_invert_rectangle(HEAP32[i7 >> 2] | 0, i11 | 0, 1, (HEAP32[i10 >> 2] | 0) - i11 | 0, HEAP32[i12 >> 2] | 0);
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i8 >> 2] | 0) > 0) {
  i11 = HEAP32[i8 >> 2] | 0;
  _clip_invert_rectangle(HEAP32[i7 >> 2] | 0, i11 | 0, 1, (HEAP32[10174] | 0) - i11 | 0, HEAP32[i12 >> 2] | 0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if ((HEAP32[i10 >> 2] | 0) < ((HEAP32[10174] | 0) - 1 | 0)) {
  _clip_invert_rectangle(HEAP32[i9 >> 2] | 0, 0, 1, HEAP32[i10 >> 2] | 0, HEAP32[i12 >> 2] | 0);
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
 }
 if ((HEAP32[i9 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 i10 = HEAP32[i7 >> 2] | 0;
 _clip_invert_rectangle(i10 | 0, 0, (HEAP32[i9 >> 2] | 0) - i10 + 1 | 0, HEAP32[10174] | 0, HEAP32[i12 >> 2] | 0);
 STACKTOP = i6;
 return;
}

function _memchr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i4 = 0;
 i5 = i2 & 255;
 i6 = (i3 | 0) != 0;
 L1 : do if (i6 & (i1 & 3 | 0) != 0) {
  i7 = i2 & 255;
  i8 = i1;
  i9 = i3;
  while (1) {
   if ((HEAP8[i8 >> 0] | 0) == i7 << 24 >> 24) {
    i10 = i8;
    i11 = i9;
    i4 = 6;
    break L1;
   }
   i12 = i8 + 1 | 0;
   i13 = i9 + -1 | 0;
   i14 = (i13 | 0) != 0;
   if (i14 & (i12 & 3 | 0) != 0) {
    i8 = i12;
    i9 = i13;
   } else {
    i15 = i12;
    i16 = i13;
    i17 = i14;
    i4 = 5;
    break;
   }
  }
 } else {
  i15 = i1;
  i16 = i3;
  i17 = i6;
  i4 = 5;
 } while (0);
 if ((i4 | 0) == 5) if (i17) {
  i10 = i15;
  i11 = i16;
  i4 = 6;
 } else i4 = 16;
 L8 : do if ((i4 | 0) == 6) {
  i16 = i2 & 255;
  if ((HEAP8[i10 >> 0] | 0) == i16 << 24 >> 24) if (!i11) {
   i4 = 16;
   break;
  } else {
   i18 = i10;
   break;
  }
  i15 = Math_imul(i5, 16843009) | 0;
  L13 : do if (i11 >>> 0 > 3) {
   i17 = i10;
   i6 = i11;
   while (1) {
    i3 = HEAP32[i17 >> 2] ^ i15;
    if ((i3 & -2139062144 ^ -2139062144) & i3 + -16843009 | 0) {
     i19 = i6;
     i20 = i17;
     break L13;
    }
    i3 = i17 + 4 | 0;
    i1 = i6 + -4 | 0;
    if (i1 >>> 0 > 3) {
     i17 = i3;
     i6 = i1;
    } else {
     i21 = i3;
     i22 = i1;
     i4 = 11;
     break;
    }
   }
  } else {
   i21 = i10;
   i22 = i11;
   i4 = 11;
  } while (0);
  if ((i4 | 0) == 11) if (!i22) {
   i4 = 16;
   break;
  } else {
   i19 = i22;
   i20 = i21;
  }
  i15 = i20;
  i6 = i19;
  while (1) {
   if ((HEAP8[i15 >> 0] | 0) == i16 << 24 >> 24) {
    i18 = i15;
    break L8;
   }
   i6 = i6 + -1 | 0;
   if (!i6) {
    i4 = 16;
    break;
   } else i15 = i15 + 1 | 0;
  }
 } while (0);
 if ((i4 | 0) == 16) i18 = 0;
 return i18 | 0;
}

function ___stdio_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5;
 i8 = i5 + 32 | 0;
 i9 = i1 + 28 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 HEAP32[i8 >> 2] = i10;
 i11 = i1 + 20 | 0;
 i12 = (HEAP32[i11 >> 2] | 0) - i10 | 0;
 HEAP32[i8 + 4 >> 2] = i12;
 HEAP32[i8 + 8 >> 2] = i2;
 HEAP32[i8 + 12 >> 2] = i3;
 i2 = i12 + i3 | 0;
 i12 = i1 + 60 | 0;
 HEAP32[i7 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i7 + 4 >> 2] = i8;
 HEAP32[i7 + 8 >> 2] = 2;
 i10 = ___syscall_ret(___syscall146(146, i7 | 0) | 0) | 0;
 L1 : do if ((i2 | 0) == (i10 | 0)) i4 = 3; else {
  i7 = 2;
  i13 = i2;
  i14 = i8;
  i15 = i10;
  while (1) {
   if ((i15 | 0) < 0) break;
   i13 = i13 - i15 | 0;
   i16 = HEAP32[i14 + 4 >> 2] | 0;
   i17 = i15 >>> 0 > i16 >>> 0;
   i18 = i17 ? i14 + 8 | 0 : i14;
   i19 = i7 + (i17 << 31 >> 31) | 0;
   i20 = i15 - (i17 ? i16 : 0) | 0;
   HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + i20;
   i16 = i18 + 4 | 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) - i20;
   HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i6 + 4 >> 2] = i18;
   HEAP32[i6 + 8 >> 2] = i19;
   i15 = ___syscall_ret(___syscall146(146, i6 | 0) | 0) | 0;
   if ((i13 | 0) == (i15 | 0)) {
    i4 = 3;
    break L1;
   } else {
    i7 = i19;
    i14 = i18;
   }
  }
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 32;
  if ((i7 | 0) == 2) i21 = 0; else i21 = i3 - (HEAP32[i14 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((i4 | 0) == 3) {
  i4 = HEAP32[i1 + 44 >> 2] | 0;
  HEAP32[i1 + 16 >> 2] = i4 + (HEAP32[i1 + 48 >> 2] | 0);
  i1 = i4;
  HEAP32[i9 >> 2] = i1;
  HEAP32[i11 >> 2] = i1;
  i21 = i3;
 }
 STACKTOP = i5;
 return i21 | 0;
}

function _source_startup_scripts(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) _do_source(94484, 0, 0) | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) {
  if (!(_strcmp(HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0, 94454) | 0)) {
   _do_source(94505, 0, 0) | 0;
   STACKTOP = i2;
   return;
  }
  if (_strcmp(HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0, 94449) | 0) if (_strcmp(HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0, 94530) | 0) {
   if ((_do_source(HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0, 0, 0) | 0) == 1) {
    STACKTOP = i2;
    return;
   }
   _emsg2(94535, HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) | 0;
   STACKTOP = i2;
   return;
  }
  if (HEAP32[26740] | 0) {
   STACKTOP = i2;
   return;
  }
  HEAP32[26740] = HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2];
  STACKTOP = i2;
  return;
 }
 if (HEAP32[26787] | 0) {
  STACKTOP = i2;
  return;
 }
 _do_source(94563, 0, 0) | 0;
 if ((_process_env(94574, 1) | 0) != 1) if (!(_do_source(94582, 1, 1) | 0)) if (!(_do_source(94595, 1, 1) | 0)) if (!(_process_env(94608, 0) | 0)) {
  i3 = (_do_source(94615, 0, 0) | 0) != 0;
  if (!(i3 | (HEAP32[27224] | 0) != 0)) _do_source(94505, 0, 0) | 0;
 }
 if (HEAP32[26916] | 0) {
  if (!(_file_owned(94627) | 0)) HEAP32[26783] = HEAP32[26974];
  HEAP32[i4 >> 2] = 0;
  if ((_fullpathcmp(94582, 94627, 0) | 0) != 1) if ((_fullpathcmp(94595, 94627, 0) | 0) != 1) if ((_fullpathcmp(94563, 94627, 0) | 0) != 1) HEAP32[i4 >> 2] = _do_source(94627, 1, 1) | 0;
  if (!(HEAP32[i4 >> 2] | 0)) {
   if (_file_owned(94634) | 0) HEAP32[26783] = 0; else HEAP32[26783] = HEAP32[26974];
   if ((_fullpathcmp(94615, 94634, 0) | 0) != 1) _do_source(94634, 0, 0) | 0;
  }
 }
 if ((HEAP32[26783] | 0) == 2) HEAP32[26721] = 1;
 HEAP32[26783] = 0;
 STACKTOP = i2;
 return;
}

function _stuff_inserted(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 i12 = i4 + 28 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP8[i12 >> 0] = 0;
 HEAP32[i10 >> 2] = _get_last_insert() | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  _emsg(92954) | 0;
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 if (HEAP32[i6 >> 2] | 0) _stuffcharReadbuff(HEAP32[i6 >> 2] | 0);
 i6 = _vim_strrchr(HEAP32[i10 >> 2] | 0, 27) | 0;
 HEAP32[i9 >> 2] = i6;
 if (i6 | 0) HEAP8[HEAP32[i9 >> 2] >> 0] = 0;
 if (HEAP32[i9 >> 2] | 0) i14 = HEAP32[i9 >> 2] | 0; else {
  i6 = HEAP32[i10 >> 2] | 0;
  i14 = i6 + (_strlen(HEAP32[i10 >> 2] | 0) | 0) | 0;
 }
 HEAP32[i11 >> 2] = i14 + -1;
 do if ((HEAP32[i11 >> 2] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) {
  if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) != 48) if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) != 94) break;
  if (!(HEAP32[i8 >> 2] | 0)) if (!((HEAP32[i7 >> 2] | 0) > 1 ? (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0) == 4 : 0)) break;
  HEAP8[i12 >> 0] = HEAP8[HEAP32[i11 >> 2] >> 0] | 0;
  HEAP8[HEAP32[i11 >> 2] >> 0] = 0;
 } while (0);
 do {
  _stuffReadbuff(HEAP32[i10 >> 2] | 0);
  if (HEAP8[i12 >> 0] | 0) _stuffReadbuff((HEAPU8[i12 >> 0] | 0) == 48 ? 42708 : 42713);
  i14 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
  HEAP32[i7 >> 2] = i14;
 } while ((i14 | 0) > 0);
 if (HEAP8[i12 >> 0] | 0) HEAP8[HEAP32[i11 >> 2] >> 0] = HEAP8[i12 >> 0] | 0;
 if (HEAP32[i9 >> 2] | 0) HEAP8[HEAP32[i9 >> 2] >> 0] = 27;
 if (!(HEAP32[i8 >> 2] | 0)) _stuffcharReadbuff(27);
 HEAP32[i5 >> 2] = 1;
 i13 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i13 | 0;
}
function _frame_minwidth(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) {
  if ((HEAP32[i2 + 36 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
   HEAP32[i7 >> 2] = (HEAP32[27037] | 0) + (HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) + 104 >> 2] | 0);
   i9 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
  HEAP32[i7 >> 2] = (HEAP32[27036] | 0) + (HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) + 104 >> 2] | 0);
  if (HEAP32[27036] | 0) {
   i9 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
  if (!((HEAP32[i5 >> 2] | 0) == 0 ? (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) == (HEAP32[26881] | 0) : 0)) {
   i9 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 i1 = (HEAP8[i2 >> 0] | 0) == 2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2];
 if (!i1) {
  while (1) {
   if (!(HEAP32[i6 >> 2] | 0)) break;
   i1 = _frame_minwidth(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i1;
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
  }
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = _frame_minwidth(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  if ((HEAP32[i8 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
 }
 i9 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _msg_attr_keep(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i11 >> 2] = 0;
 if (!(HEAP32[26718] | 0)) if (_message_filtered(HEAP32[i7 >> 2] | 0) | 0) {
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 if ((HEAP32[27226] | 0) >= 3) {
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 HEAP32[27226] = (HEAP32[27226] | 0) + 1;
 if ((HEAP32[i7 >> 2] | 0) != (HEAP32[26706] | 0)) i4 = 10; else if (HEAP32[27227] | 0 ? (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) != 60 : 0) if (HEAP32[(HEAP32[27227] | 0) + 4 >> 2] | 0) if (_strcmp(HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[27227] | 0) + 4 >> 2] | 0) | 0) i4 = 10;
 if ((i4 | 0) == 10) _add_msg_hist(HEAP32[i7 >> 2] | 0, -1, HEAP32[i8 >> 2] | 0);
 if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26706] | 0)) HEAP32[26706] = 0;
 _msg_start();
 HEAP32[i11 >> 2] = _msg_strtrunc(HEAP32[i7 >> 2] | 0, 0) | 0;
 if (HEAP32[i11 >> 2] | 0) HEAP32[i7 >> 2] = HEAP32[i11 >> 2];
 _msg_outtrans_attr(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 _msg_clr_eos();
 HEAP32[i10 >> 2] = _msg_end() | 0;
 if ((HEAP32[i9 >> 2] | 0) != 0 & (HEAP32[i10 >> 2] | 0) != 0) {
  i9 = _vim_strsize(HEAP32[i7 >> 2] | 0) | 0;
  i8 = Math_imul((HEAP32[10173] | 0) - (HEAP32[26876] | 0) - 1 | 0, HEAP32[10174] | 0) | 0;
  if ((i9 | 0) < (i8 + (HEAP32[27116] | 0) | 0)) _set_keep_msg(HEAP32[i7 >> 2] | 0, 0);
 }
 _vim_free(HEAP32[i11 >> 2] | 0);
 HEAP32[27226] = (HEAP32[27226] | 0) + -1;
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 i12 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i12 | 0;
}

function _set_options_bin(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = (HEAP32[i5 >> 2] | 0) != 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  if (!i3) {
   STACKTOP = i4;
   return;
  }
  if (!(HEAP32[i7 >> 2] & 2)) {
   i6 = HEAP32[26773] | 0;
   HEAP32[i6 + 708 >> 2] = HEAP32[i6 + 712 >> 2];
   i6 = HEAP32[26773] | 0;
   HEAP32[i6 + 720 >> 2] = HEAP32[i6 + 724 >> 2];
   i6 = HEAP32[26773] | 0;
   HEAP32[i6 + 656 >> 2] = HEAP32[i6 + 660 >> 2];
   i6 = HEAP32[26773] | 0;
   HEAP32[i6 + 608 >> 2] = HEAP32[i6 + 612 >> 2];
  }
  if (HEAP32[i7 >> 2] & 4 | 0) {
   STACKTOP = i4;
   return;
  }
  HEAP32[26249] = HEAP32[26253];
  HEAP32[26251] = HEAP32[26254];
  HEAP32[26255] = HEAP32[26256];
  HEAP32[26245] = HEAP32[26257];
  STACKTOP = i4;
  return;
 }
 if (!i3) {
  if (!(HEAP32[i7 >> 2] & 2)) {
   i3 = HEAP32[26773] | 0;
   HEAP32[i3 + 712 >> 2] = HEAP32[i3 + 708 >> 2];
   i3 = HEAP32[26773] | 0;
   HEAP32[i3 + 724 >> 2] = HEAP32[i3 + 720 >> 2];
   i3 = HEAP32[26773] | 0;
   HEAP32[i3 + 660 >> 2] = HEAP32[i3 + 656 >> 2];
   i3 = HEAP32[26773] | 0;
   HEAP32[i3 + 612 >> 2] = HEAP32[i3 + 608 >> 2];
  }
  if (!(HEAP32[i7 >> 2] & 4)) {
   HEAP32[26253] = HEAP32[26249];
   HEAP32[26254] = HEAP32[26251];
   HEAP32[26256] = HEAP32[26255];
   HEAP32[26257] = HEAP32[26245];
  }
 }
 if (!(HEAP32[i7 >> 2] & 2)) {
  HEAP32[(HEAP32[26773] | 0) + 708 >> 2] = 0;
  HEAP32[(HEAP32[26773] | 0) + 720 >> 2] = 0;
  HEAP32[(HEAP32[26773] | 0) + 656 >> 2] = 0;
  HEAP32[(HEAP32[26773] | 0) + 608 >> 2] = 0;
 }
 if (HEAP32[i7 >> 2] & 4 | 0) {
  STACKTOP = i4;
  return;
 }
 HEAP32[26249] = 0;
 HEAP32[26251] = 0;
 HEAP32[26255] = 0;
 HEAP32[26245] = 0;
 HEAP32[26258] = 1;
 STACKTOP = i4;
 return;
}

function _set_string_option_direct(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 32 | 0;
 i8 = i6 + 28 | 0;
 i9 = i6 + 24 | 0;
 i10 = i6 + 20 | 0;
 i11 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i6 + 16 >> 2] = i5;
 HEAP32[i13 >> 2] = (HEAP32[i10 >> 2] & 6 | 0) == 0 & 1;
 HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
 if ((HEAP32[i14 >> 2] | 0) == -1) {
  HEAP32[i14 >> 2] = _findoption(HEAP32[i7 >> 2] | 0) | 0;
  if ((HEAP32[i14 >> 2] | 0) < 0) {
   _emsg2(92395, 63620) | 0;
   _iemsg2(63647, HEAP32[i7 >> 2] | 0);
   STACKTOP = i6;
   return;
  }
 }
 if (!(HEAP32[15328 + ((HEAP32[i14 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i11 >> 2] = _vim_strsave(HEAP32[i9 >> 2] | 0) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i12 >> 2] = _get_varp_scope(15328 + ((HEAP32[i14 >> 2] | 0) * 28 | 0) | 0, HEAP32[i13 >> 2] | 0 ? 4 : HEAP32[i10 >> 2] | 0) | 0;
 if (HEAP32[i10 >> 2] & 1 | 0) if (HEAP32[15328 + ((HEAP32[i14 >> 2] | 0) * 28 | 0) + 8 >> 2] & 8 | 0) _free_string_option(HEAP32[HEAP32[i12 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i11 >> 2];
 if (HEAP32[i13 >> 2] | 0) _set_string_option_global(HEAP32[i14 >> 2] | 0, HEAP32[i12 >> 2] | 0);
 i11 = 15328 + ((HEAP32[i14 >> 2] | 0) * 28 | 0) + 8 | 0;
 HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 8;
 if (!(HEAP32[i13 >> 2] | 0 ? (HEAP32[15328 + ((HEAP32[i14 >> 2] | 0) * 28 | 0) + 16 >> 2] & 4096 | 0) != 0 : 0)) {
  STACKTOP = i6;
  return;
 }
 _free_string_option(HEAP32[HEAP32[i12 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i12 >> 2] >> 2] = 114072;
 STACKTOP = i6;
 return;
}

function _u_doit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 if (!(_undo_allowed() | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26623] = 0;
 HEAP32[26624] = 0;
 HEAP32[26624] = HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0 ? -1 : 0;
 while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i1 + -1;
  if (!i1) break;
  _change_warning(0);
  i1 = (HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0) == 0;
  if (HEAP32[26622] | 0) {
   if (i1) {
    i6 = HEAP32[26773] | 0;
    HEAP32[i6 + 508 >> 2] = HEAP32[i6 + 504 >> 2];
   } else if ((_get_undolevel() | 0) > 0) {
    i6 = (HEAP32[26773] | 0) + 508 | 0;
    HEAP32[i6 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
   }
   if (!(HEAP32[(HEAP32[26773] | 0) + 512 >> 2] | 0)) {
    i2 = 11;
    break;
   }
   if (!(HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0)) {
    i2 = 11;
    break;
   }
   _u_undoredo(1);
  } else {
   if (i1) {
    i2 = 16;
    break;
   }
   if ((_get_undolevel() | 0) <= 0) {
    i2 = 16;
    break;
   }
   _u_undoredo(0);
   if (!(HEAP32[(HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0) + 4 >> 2] | 0)) {
    i1 = HEAP32[26773] | 0;
    HEAP32[i1 + 504 >> 2] = HEAP32[i1 + 508 >> 2];
   }
   i1 = (HEAP32[26773] | 0) + 508 | 0;
   HEAP32[i1 >> 2] = HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2];
  }
 }
 if ((i2 | 0) == 11) {
  i1 = HEAP32[26773] | 0;
  HEAP32[i1 + 508 >> 2] = HEAP32[i1 + 500 >> 2];
  _beep_flush();
  if ((HEAP32[i5 >> 2] | 0) == ((HEAP32[i4 >> 2] | 0) - 1 | 0)) {
   _msg(80726) | 0;
   STACKTOP = i3;
   return;
  }
 } else if ((i2 | 0) == 16) {
  _beep_flush();
  if ((HEAP32[i5 >> 2] | 0) == ((HEAP32[i4 >> 2] | 0) - 1 | 0)) {
   _msg(80751) | 0;
   STACKTOP = i3;
   return;
  }
 }
 _u_undo_end(HEAP32[26622] | 0, 0);
 STACKTOP = i3;
 return;
}

function _nfa_regconcat() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = 1;
 HEAP32[i5 >> 2] = 1;
 L1 : while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) {
   i1 = 21;
   break;
  }
  L4 : do switch (_peekchr() | 0) {
  case -215:
  case -218:
  case -132:
  case 0:
   {
    HEAP32[i4 >> 2] = 0;
    break;
   }
  case -166:
   {
    _skipchr_keepstart();
    break;
   }
  case -157:
   {
    HEAP32[26386] = HEAP32[26386] | 1;
    _skipchr_keepstart();
    break;
   }
  case -189:
   {
    HEAP32[26386] = HEAP32[26386] | 2;
    _skipchr_keepstart();
    break;
   }
  case -138:
   {
    HEAP32[26391] = 4;
    _skipchr_keepstart();
    HEAP32[26398] = -1;
    break;
   }
  case -147:
   {
    HEAP32[26391] = 3;
    _skipchr_keepstart();
    HEAP32[26398] = -1;
    break;
   }
  case -179:
   {
    HEAP32[26391] = 2;
    _skipchr_keepstart();
    HEAP32[26398] = -1;
    break;
   }
  case -170:
   {
    HEAP32[26391] = 1;
    _skipchr_keepstart();
    HEAP32[26398] = -1;
    break;
   }
  default:
   {
    if (!(_nfa_regpiece() | 0)) {
     i1 = 13;
     break L1;
    }
    if (HEAP32[i5 >> 2] | 0) {
     HEAP32[i5 >> 2] = 0;
     break L4;
    }
    if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
     i1 = 17;
     break L1;
    }
    i6 = HEAP32[26382] | 0;
    HEAP32[26382] = i6 + 4;
    HEAP32[i6 >> 2] = -1014;
   }
  } while (0);
 }
 if ((i1 | 0) == 13) {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 } else if ((i1 | 0) == 17) {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 } else if ((i1 | 0) == 21) {
  HEAP32[i3 >> 2] = 1;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 return 0;
}

function _vim_strsave_escaped_ext(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 28 | 0;
 i8 = i6 + 24 | 0;
 i9 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i11 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i14 >> 2] = 1;
 HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if (!(HEAP8[HEAP32[i11 >> 2] >> 0] | 0)) break;
  if (_vim_strchr(HEAP32[i8 >> 2] | 0, HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0) i5 = 6; else if (HEAP32[i10 >> 2] | 0) if (_rem_backslash(HEAP32[i11 >> 2] | 0) | 0) i5 = 6;
  if ((i5 | 0) == 6) {
   i5 = 0;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  }
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 HEAP32[i13 >> 2] = _alloc(HEAP32[i14 >> 2] | 0) | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  i15 = HEAP32[i13 >> 2] | 0;
  STACKTOP = i6;
  return i15 | 0;
 }
 HEAP32[i12 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if (!(HEAP8[HEAP32[i11 >> 2] >> 0] | 0)) break;
  if (_vim_strchr(HEAP32[i8 >> 2] | 0, HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0) i5 = 14; else if (HEAP32[i10 >> 2] | 0) if (_rem_backslash(HEAP32[i11 >> 2] | 0) | 0) i5 = 14;
  if ((i5 | 0) == 14) {
   i5 = 0;
   i7 = HEAP32[i9 >> 2] & 255;
   i14 = HEAP32[i12 >> 2] | 0;
   HEAP32[i12 >> 2] = i14 + 1;
   HEAP8[i14 >> 0] = i7;
  }
  i7 = HEAP8[HEAP32[i11 >> 2] >> 0] | 0;
  i14 = HEAP32[i12 >> 2] | 0;
  HEAP32[i12 >> 2] = i14 + 1;
  HEAP8[i14 >> 0] = i7;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 HEAP8[HEAP32[i12 >> 2] >> 0] = 0;
 i15 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i6;
 return i15 | 0;
}

function _op_colon(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _stuffcharReadbuff(58);
 do if (HEAP32[(HEAP32[i3 >> 2] | 0) + 60 >> 2] | 0) _stuffReadbuff(61866); else {
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) _stuffcharReadbuff(46); else _stuffnumReadbuff(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0);
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) != (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0)) {
   _stuffcharReadbuff(44);
   if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
    _stuffcharReadbuff(46);
    break;
   }
   if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) {
    _stuffcharReadbuff(36);
    break;
   }
   if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
    _stuffReadbuff(61872);
    _stuffnumReadbuff((HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0) - 1 | 0);
    break;
   } else {
    _stuffnumReadbuff(HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0);
    break;
   }
  }
 } while (0);
 if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) != 10) _stuffReadbuff(61875);
 if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) == 8) {
  if (!(HEAPU8[(_get_equalprg() | 0) >> 0] | 0)) _stuffReadbuff(64082); else _stuffReadbuff(_get_equalprg() | 0);
  _stuffReadbuff(97581);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) != 9) {
  STACKTOP = i2;
  return;
 }
 do if (HEAPU8[HEAP32[(HEAP32[26773] | 0) + 644 >> 2] >> 0] | 0 | 0) _stuffReadbuff(HEAP32[(HEAP32[26773] | 0) + 644 >> 2] | 0); else if (HEAPU8[HEAP32[26919] >> 0] | 0 | 0) {
  _stuffReadbuff(HEAP32[26919] | 0);
  break;
 } else {
  _stuffReadbuff(61877);
  break;
 } while (0);
 _stuffReadbuff(61881);
 STACKTOP = i2;
 return;
}

function _frame_minheight(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) {
  if ((HEAP32[i2 + 36 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
   HEAP32[i7 >> 2] = (HEAP32[27034] | 0) + (HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) + 92 >> 2] | 0);
   i9 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
  HEAP32[i7 >> 2] = (HEAP32[27035] | 0) + (HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) + 92 >> 2] | 0);
  if (!((HEAP32[i5 >> 2] | 0) == 0 ? (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) == (HEAP32[26881] | 0) : 0)) {
   i9 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
  if (!(HEAP32[27035] | 0)) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 0;
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 i1 = (HEAP8[i2 >> 0] | 0) == 1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2];
 if (!i1) {
  while (1) {
   if (!(HEAP32[i6 >> 2] | 0)) break;
   i1 = _frame_minheight(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i1;
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
  }
  i9 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = _frame_minheight(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  if ((HEAP32[i8 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
 }
 i9 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _term_color(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 32 | 0;
 i9 = i4 + 20 | 0;
 i10 = i4 + 16 | 0;
 i11 = i4 + 12 | 0;
 i12 = i4 + 8 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 >> 2] = (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 155 ? 1 : 2;
 do if ((HEAP32[i7 >> 2] | 0) >= 8 & (HEAP32[26734] | 0) >= 16) {
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 27) {
   if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0 | 0) != 91) i3 = 4;
  } else i3 = 4;
  if ((i3 | 0) == 4) {
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 155) break;
   HEAP32[i9 >> 2] = 1;
  }
  if (HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0 | 0) {
   if (_strcmp((HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) + 1 | 0, 80473) | 0) if (_strcmp((HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) + 1 | 0, 80480) | 0) break;
   if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0 | 0) != 51) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0 | 0) != 52) break;
   HEAP32[i10 >> 2] = 80484;
   HEAP32[i11 >> 2] = (HEAP32[i9 >> 2] | 0) == 2 ? 80493 : 80496;
   i2 = (HEAP32[i7 >> 2] | 0) >= 16;
   HEAP32[i12 >> 2] = (HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0 | 0) == 51 ? (i2 ? 80498 : 80504) : i2 ? 80506 : 80512;
   i2 = HEAP32[i10 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = i1;
   _sprintf(i8, i2, i5) | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   _out_str(_tgoto(i8, 0, (HEAP32[i7 >> 2] | 0) >= 16 ? i2 : i2 - 8 | 0) | 0);
   STACKTOP = i4;
   return;
  }
 } while (0);
 _out_str(_tgoto(HEAP32[i6 >> 2] | 0, 0, HEAP32[i7 >> 2] | 0) | 0);
 STACKTOP = i4;
 return;
}

function _fgets(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) i5 = ___lockfile(i3) | 0; else i5 = 0;
 i6 = i2 + -1 | 0;
 if ((i2 | 0) < 2) {
  i2 = i3 + 74 | 0;
  i7 = HEAP8[i2 >> 0] | 0;
  HEAP8[i2 >> 0] = i7 + 255 | i7;
  if (i5 | 0) ___unlockfile(i3);
  if (!i6) {
   HEAP8[i1 >> 0] = 0;
   i8 = i1;
  } else i8 = 0;
 } else {
  L11 : do if (!i6) {
   i9 = i1;
   i4 = 17;
  } else {
   i7 = i3 + 4 | 0;
   i2 = i3 + 8 | 0;
   i10 = i6;
   i11 = i1;
   while (1) {
    i12 = HEAP32[i7 >> 2] | 0;
    i13 = i12;
    i14 = (HEAP32[i2 >> 2] | 0) - i13 | 0;
    i15 = _memchr(i12, 10, i14) | 0;
    i16 = (i15 | 0) == 0;
    i17 = i16 ? i14 : 1 - i13 + i15 | 0;
    i15 = i17 >>> 0 < i10 >>> 0 ? i17 : i10;
    _memcpy(i11 | 0, i12 | 0, i15 | 0) | 0;
    i12 = (HEAP32[i7 >> 2] | 0) + i15 | 0;
    HEAP32[i7 >> 2] = i12;
    i18 = i11 + i15 | 0;
    i17 = i10 - i15 | 0;
    if (!(i16 & (i17 | 0) != 0)) {
     i9 = i18;
     i4 = 17;
     break L11;
    }
    if (i12 >>> 0 < (HEAP32[i2 >> 2] | 0) >>> 0) {
     HEAP32[i7 >> 2] = i12 + 1;
     i19 = HEAPU8[i12 >> 0] | 0;
    } else {
     i12 = ___uflow(i3) | 0;
     if ((i12 | 0) < 0) break; else i19 = i12;
    }
    i12 = i18 + 1 | 0;
    HEAP8[i18 >> 0] = i19;
    i10 = i17 + -1 | 0;
    if ((i19 & 255 | 0) == 10 | (i10 | 0) == 0) {
     i9 = i12;
     i4 = 17;
     break L11;
    } else i11 = i12;
   }
   if ((i18 | 0) == (i1 | 0)) i20 = 0; else if (!(HEAP32[i3 >> 2] & 16)) i20 = 0; else {
    i9 = i18;
    i4 = 17;
   }
  } while (0);
  if ((i4 | 0) == 17) if (!i1) i20 = 0; else {
   HEAP8[i9 >> 0] = 0;
   i20 = i1;
  }
  if (!i5) i8 = i20; else {
   ___unlockfile(i3);
   i8 = i20;
  }
 }
 return i8 | 0;
}

function _ml_preserve(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 HEAP32[i11 >> 2] = HEAP32[26834];
 if (HEAP32[i9 >> 2] | 0) if (HEAP32[HEAP32[i9 >> 2] >> 2] | 0) {
  HEAP32[26834] = 0;
  _ml_flush_line(HEAP32[i5 >> 2] | 0);
  _ml_find_line(HEAP32[i5 >> 2] | 0, 0, 2) | 0;
  HEAP32[i10 >> 2] = _mf_sync(HEAP32[i9 >> 2] | 0, 5) | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 0;
  do if (_mf_need_trans(HEAP32[i9 >> 2] | 0) | 0) if (!(HEAP32[26834] | 0)) {
   HEAP32[i8 >> 2] = 1;
   while (1) {
    if (_mf_need_trans(HEAP32[i9 >> 2] | 0) | 0) i12 = (HEAP32[i8 >> 2] | 0) <= (HEAP32[HEAP32[i5 >> 2] >> 2] | 0); else i12 = 0;
    i13 = HEAP32[i5 >> 2] | 0;
    if (!i12) break;
    HEAP32[i7 >> 2] = _ml_find_line(i13, HEAP32[i8 >> 2] | 0, 19) | 0;
    if (!(HEAP32[i7 >> 2] | 0)) {
     i3 = 12;
     break;
    }
    HEAP32[i8 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] | 0) + 1;
   }
   if ((i3 | 0) == 12) {
    HEAP32[i10 >> 2] = 0;
    break;
   }
   _ml_find_line(i13, 0, 2) | 0;
   if (!(_mf_sync(HEAP32[i9 >> 2] | 0, 5) | 0)) HEAP32[i10 >> 2] = 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 0;
  } while (0);
  HEAP32[26834] = HEAP32[26834] | HEAP32[i11 >> 2];
  if (!(HEAP32[i6 >> 2] | 0)) {
   STACKTOP = i4;
   return;
  }
  if ((HEAP32[i10 >> 2] | 0) == 1) {
   _msg(59781) | 0;
   STACKTOP = i4;
   return;
  } else {
   _emsg(59796) | 0;
   STACKTOP = i4;
   return;
  }
 }
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 _emsg(59736) | 0;
 STACKTOP = i4;
 return;
}

function _do_wqall(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 522) i2 = 3; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 517) i2 = 3;
 if ((i2 | 0) == 3) HEAP32[26778] = 1;
 HEAP32[i5 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) break;
  if (_bufIsChanged(HEAP32[i5 >> 2] | 0) | 0) if (!(_bt_dontwrite(HEAP32[i5 >> 2] | 0) | 0)) {
   if (_not_writing() | 0) {
    i2 = 9;
    break;
   }
   do if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0)) {
    _emsgn(43207, HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2] | 0) | 0;
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   } else {
    if (!(_check_readonly((HEAP32[i4 >> 2] | 0) + 28 | 0, HEAP32[i5 >> 2] | 0) | 0)) if (_check_overwrite(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0, 0) | 0) {
     _set_bufref(i8, HEAP32[i5 >> 2] | 0);
     if (!(_buf_write_all(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0)) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
     if (_bufref_valid(i8) | 0) break;
     HEAP32[i5 >> 2] = HEAP32[26771];
     break;
    }
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   } while (0);
   HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] = HEAP32[i7 >> 2];
  }
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2];
 }
 if ((i2 | 0) == 9) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 if (!(HEAP32[26778] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[i6 >> 2] | 0)) _getout(0);
 _not_exiting();
 STACKTOP = i3;
 return;
}

function _skip_range(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 L1 : while (1) {
  if (!(_vim_strchr(51811, HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0)) break;
  i2 = HEAP32[i4 >> 2] | 0;
  do if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 92) {
   if ((HEAPU8[i2 + 1 >> 0] | 0 | 0) != 63) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 47) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 38) break L1;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  } else {
   i1 = HEAP32[i4 >> 2] | 0;
   if ((HEAPU8[i2 >> 0] | 0 | 0) == 39) {
    i7 = i1 + 1 | 0;
    HEAP32[i4 >> 2] = i7;
    if (!((HEAPU8[i7 >> 0] | 0 | 0) == 0 & (HEAP32[i5 >> 2] | 0) != 0)) break;
    HEAP32[HEAP32[i5 >> 2] >> 2] = 0;
    break;
   }
   if ((HEAPU8[i1 >> 0] | 0 | 0) != 47) if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 63) break;
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = i1 + 1;
   HEAP32[i6 >> 2] = HEAPU8[i1 >> 0];
   while (1) {
    if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) i8 = (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != (HEAP32[i6 >> 2] | 0); else i8 = 0;
    i9 = HEAP32[i4 >> 2] | 0;
    if (!i8) break;
    HEAP32[i4 >> 2] = i9 + 1;
    if ((HEAPU8[i9 >> 0] | 0 | 0) == 92) if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   }
   if ((HEAPU8[i9 >> 0] | 0 | 0) == 0 & (HEAP32[i5 >> 2] | 0) != 0) HEAP32[HEAP32[i5 >> 2] >> 2] = 0;
  } while (0);
  if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 while (1) {
  i10 = HEAP32[i4 >> 2] | 0;
  if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 58) break;
  HEAP32[i4 >> 2] = _skipwhite(i10 + 1 | 0) | 0;
 }
 STACKTOP = i3;
 return i10 | 0;
}

function _get_register(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i4 >> 2] | 0) == 42 & (HEAP32[27099] | 0) != 0) {
  if (_clip_isautosel_star() | 0) _clip_update_selection(108396);
  _may_get_selection(HEAP32[i4 >> 2] | 0) | 0;
 }
 if ((HEAP32[i4 >> 2] | 0) == 43 & (HEAP32[27099] | 0) != 0) {
  if (_clip_isautosel_plus() | 0) _clip_update_selection(108396);
  _may_get_selection(HEAP32[i4 >> 2] | 0) | 0;
 }
 _get_yank_register(HEAP32[i4 >> 2] | 0, 0) | 0;
 HEAP32[i6 >> 2] = _alloc(16) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 i4 = HEAP32[i6 >> 2] | 0;
 i2 = HEAP32[26084] | 0;
 HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[HEAP32[26084] >> 2] = 0;
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 i5 = HEAP32[i6 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[i5 >> 2] = 0; else {
  i2 = _alloc(HEAP32[i5 + 4 >> 2] << 2) | 0;
  HEAP32[HEAP32[i6 >> 2] >> 2] = i2;
 }
 if (!(HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) {
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) break;
  i2 = _vim_strsave(HEAP32[(HEAP32[HEAP32[26084] >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + (HEAP32[i7 >> 2] << 2) >> 2] = i2;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 i8 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _add_termcap_entry(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[26627] | 0) != 0 | (HEAP32[26628] | 0) != 0) {
  HEAP32[i4 >> 2] = _gui_mch_haskey(HEAP32[i5 >> 2] | 0) | 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 if (!(HEAP32[i6 >> 2] | 0)) if (_find_termcode(HEAP32[i5 >> 2] | 0) | 0) {
  HEAP32[i4 >> 2] = 1;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[26519];
 if (HEAP32[i7 >> 2] | 0) if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) {
  if (_term_is_builtin(HEAP32[i7 >> 2] | 0) | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 8;
  HEAP32[i9 >> 2] = _find_builtin_term(HEAP32[i7 >> 2] | 0) | 0;
  L16 : do if (HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0) {
   HEAP32[i8 >> 2] = 0 - ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) + ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) << 8));
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 8;
   while (1) {
    if (!(HEAP32[HEAP32[i9 >> 2] >> 2] | 0)) break L16;
    if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) break;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 8;
   }
   i6 = HEAP32[i5 >> 2] | 0;
   i2 = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0;
   _add_termcode(i6, i2, _term_is_8bit(HEAP32[i7 >> 2] | 0) | 0);
   HEAP32[i4 >> 2] = 1;
   i10 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i10 | 0;
  } while (0);
  if (!(HEAP32[26731] | 0)) _emsg2(80429, HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _find_mps_values(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 16 | 0;
 i8 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i10 = i6 + 4 | 0;
 i11 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[26773] | 0) + 652 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) {
   i5 = 14;
   break;
  }
  if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) {
   i5 = 4;
   break;
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 2;
  if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) {
   i5 = 8;
   break;
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 44) HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 4) {
  i4 = HEAP32[i9 >> 2] | 0;
  if (HEAP32[i10 >> 2] | 0) {
   HEAP32[i4 >> 2] = 1;
   HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
   HEAP32[HEAP32[i7 >> 2] >> 2] = HEAPU8[(HEAP32[i11 >> 2] | 0) + 2 >> 0];
   STACKTOP = i6;
   return;
  } else {
   HEAP32[i4 >> 2] = 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = HEAPU8[(HEAP32[i11 >> 2] | 0) + 2 >> 0];
   STACKTOP = i6;
   return;
  }
 } else if ((i5 | 0) == 8) {
  i4 = HEAP32[i9 >> 2] | 0;
  if (HEAP32[i10 >> 2] | 0) {
   HEAP32[i4 >> 2] = 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
   HEAP32[HEAP32[i7 >> 2] >> 2] = HEAPU8[(HEAP32[i11 >> 2] | 0) + -2 >> 0];
   STACKTOP = i6;
   return;
  } else {
   HEAP32[i4 >> 2] = 1;
   HEAP32[HEAP32[i8 >> 2] >> 2] = HEAPU8[(HEAP32[i11 >> 2] | 0) + -2 >> 0];
   STACKTOP = i6;
   return;
  }
 } else if ((i5 | 0) == 14) {
  STACKTOP = i6;
  return;
 }
}

function _alist_set(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8 + 24 | 0;
 i10 = i8 + 20 | 0;
 i11 = i8 + 16 | 0;
 i12 = i8 + 12 | 0;
 i13 = i8 + 8 | 0;
 i14 = i8 + 4 | 0;
 i15 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 if (HEAP32[25235] | 0) {
  _emsg(94305) | 0;
  STACKTOP = i8;
  return;
 }
 HEAP32[25235] = (HEAP32[25235] | 0) + 1;
 _alist_clear(HEAP32[i9 >> 2] | 0);
 if ((_ga_grow(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0) == 1) {
  HEAP32[i15 >> 2] = 0;
  while (1) {
   if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break;
   if (HEAP32[26834] | 0) {
    i7 = 7;
    break;
   }
   if (HEAP32[i13 >> 2] | 0) if ((HEAP32[i15 >> 2] | 0) < (HEAP32[i14 >> 2] | 0)) {
    i6 = HEAP32[i15 >> 2] << 2 | 0;
    _buf_set_name(HEAP32[(HEAP32[i13 >> 2] | 0) + i6 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + i6 >> 2] | 0);
   }
   _alist_add(HEAP32[i9 >> 2] | 0, HEAP32[(HEAP32[i11 >> 2] | 0) + (HEAP32[i15 >> 2] << 2) >> 2] | 0, HEAP32[i12 >> 2] | 0 ? 2 : 1);
   _ui_breakcheck();
   HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
  }
  L15 : do if ((i7 | 0) == 7) while (1) {
   if ((HEAP32[i15 >> 2] | 0) >= (HEAP32[i10 >> 2] | 0)) break L15;
   i12 = HEAP32[i11 >> 2] | 0;
   i13 = HEAP32[i15 >> 2] | 0;
   HEAP32[i15 >> 2] = i13 + 1;
   _vim_free(HEAP32[i12 + (i13 << 2) >> 2] | 0);
  } while (0);
  _vim_free(HEAP32[i11 >> 2] | 0);
 } else _FreeWild(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0);
 if ((HEAP32[i9 >> 2] | 0) == 107472) HEAP32[26776] = 0;
 HEAP32[25235] = (HEAP32[25235] | 0) + -1;
 STACKTOP = i8;
 return;
}

function _show_one_mark(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6;
 i8 = i6 + 32 | 0;
 i9 = i6 + 28 | 0;
 i10 = i6 + 24 | 0;
 i11 = i6 + 20 | 0;
 i12 = i6 + 16 | 0;
 i13 = i6 + 12 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = 0;
 if ((HEAP32[i8 >> 2] | 0) == -1) {
  if (HEAP32[26046] | 0) {
   HEAP32[26046] = 0;
   STACKTOP = i6;
   return;
  }
  if (!(HEAP32[i9 >> 2] | 0)) {
   _msg(56545) | 0;
   STACKTOP = i6;
   return;
  } else {
   _emsg2(56558, HEAP32[i9 >> 2] | 0) | 0;
   STACKTOP = i6;
   return;
  }
 }
 if (HEAP32[26834] | 0) {
  STACKTOP = i6;
  return;
 }
 if (HEAP32[i9 >> 2] | 0) if (!(_vim_strchr(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0)) {
  STACKTOP = i6;
  return;
 }
 if (!(HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 if (!(HEAP32[26046] | 0)) {
  _msg_puts_title(56587);
  HEAP32[26046] = 1;
 }
 _msg_putchar(10);
 if (!(HEAP32[26834] | 0)) {
  i9 = HEAP32[26882] | 0;
  i5 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
  i4 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i7 + 4 >> 2] = i5;
  HEAP32[i7 + 8 >> 2] = i4;
  _sprintf(i9, 56613, i7) | 0;
  _msg_outtrans(HEAP32[26882] | 0) | 0;
  if ((HEAP32[i11 >> 2] | 0) == 0 & (HEAP32[i12 >> 2] | 0) != 0) {
   HEAP32[i11 >> 2] = _mark_line(HEAP32[i10 >> 2] | 0, 15) | 0;
   HEAP32[i13 >> 2] = 1;
  }
  if (HEAP32[i11 >> 2] | 0) {
   _msg_outtrans_attr(HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0 ? HEAP32[27051] | 0 : 0) | 0;
   if (HEAP32[i13 >> 2] | 0) _vim_free(HEAP32[i11 >> 2] | 0);
  }
 }
 _out_flush();
 STACKTOP = i6;
 return;
}

function _get_varp_scope(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 do if (HEAP32[i7 >> 2] & 2 | 0) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0) {
  i2 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) == (-1 | 0)) {
   HEAP32[i5 >> 2] = (_get_varp(i2) | 0) + 48;
   break;
  } else {
   HEAP32[i5 >> 2] = HEAP32[i2 + 12 >> 2];
   break;
  }
 } else i3 = 6; else i3 = 6; while (0);
 L7 : do if ((i3 | 0) == 6) {
  if (HEAP32[i7 >> 2] & 4 | 0) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 4096 | 0) do switch (HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0) {
  case 20494:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 644;
    break L7;
    break;
   }
  case 20491:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 732;
    break L7;
    break;
   }
  case 20503:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 648;
    break L7;
    break;
   }
  case 20509:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 736;
    break L7;
    break;
   }
  case 20481:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 740;
    break L7;
    break;
   }
  case 20516:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 744;
    break L7;
    break;
   }
  case 20517:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 748;
    break L7;
    break;
   }
  case 20522:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 756;
    break L7;
    break;
   }
  case 20483:
   {
    HEAP32[i5 >> 2] = (HEAP32[26773] | 0) + 572;
    break L7;
    break;
   }
  default:
   {
    HEAP32[i5 >> 2] = 0;
    break L7;
   }
  } while (0);
  HEAP32[i5 >> 2] = _get_varp(HEAP32[i6 >> 2] | 0) | 0;
 } while (0);
 STACKTOP = i4;
 return HEAP32[i5 >> 2] | 0;
}

function _clip_get_word_boundaries(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[26696] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[26691] | 0) == 0 ? 1 : (HEAP32[i7 >> 2] | 0) >= (HEAP32[26697] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i10 >> 2] = (HEAP32[26691] | 0) + (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
 if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0 | 0) <= 32) i11 = 32; else i11 = _vim_iswordc(HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0) | 0;
 HEAP32[i8 >> 2] = i11;
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) <= 0) break;
  if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) - 1) >> 0] | 0 | 0) <= 32) i12 = 32; else i12 = _vim_iswordc(HEAPU8[(HEAP32[i10 >> 2] | 0) + ((HEAP32[i9 >> 2] | 0) - 1) >> 0] | 0) | 0;
  if ((i12 | 0) != (HEAP32[i8 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
 }
 HEAP16[(HEAP32[i5 >> 2] | 0) + 34 >> 1] = HEAP32[i9 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[26697] | 0)) break;
  if ((HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0 | 0) <= 32) i13 = 32; else i13 = _vim_iswordc(HEAPU8[(HEAP32[i10 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) | 0;
  if ((i13 | 0) != (HEAP32[i8 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 HEAP16[(HEAP32[i5 >> 2] | 0) + 36 >> 1] = HEAP32[i9 >> 2];
 STACKTOP = i4;
 return;
}

function _au_cleanup() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 if (!((HEAP32[26744] | 0) == 0 & (HEAP32[25368] | 0) != 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= 96) break;
  HEAP32[i4 >> 2] = 101068 + (HEAP32[i7 >> 2] << 2);
  HEAP32[i3 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break;
   HEAP32[i6 >> 2] = (HEAP32[i3 >> 2] | 0) + 12;
   HEAP32[i5 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
   while (1) {
    i8 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) == 0;
    if (!(HEAP32[i5 >> 2] | 0)) break;
    if (i8) i1 = 10; else if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) i1 = 10; else HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) + 8;
    if ((i1 | 0) == 10) {
     i1 = 0;
     HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2];
     _vim_free(HEAP32[HEAP32[i5 >> 2] >> 2] | 0);
     _vim_free(HEAP32[i5 >> 2] | 0);
    }
    HEAP32[i5 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
   }
   i9 = HEAP32[i3 >> 2] | 0;
   if (i8) {
    do if (!(HEAP32[i9 >> 2] | 0)) if ((HEAP32[i4 >> 2] | 0) == (101068 + (HEAP32[i7 >> 2] << 2) | 0)) {
     HEAP32[101476 + (HEAP32[i7 >> 2] << 2) >> 2] = 0;
     break;
    } else {
     HEAP32[101476 + (HEAP32[i7 >> 2] << 2) >> 2] = HEAP32[i4 >> 2];
     break;
    } while (0);
    HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
    _vim_regfree(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0);
    _vim_free(HEAP32[i3 >> 2] | 0);
   } else HEAP32[i4 >> 2] = i9;
   HEAP32[i3 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 HEAP32[25368] = 0;
 STACKTOP = i2;
 return;
}

function _ex_tabs(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 HEAP32[i3 + 16 >> 2] = i1;
 HEAP32[i7 >> 2] = 1;
 _msg_start();
 HEAP32[26710] = 1;
 HEAP32[i5 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) {
   i2 = 15;
   break;
  }
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
   i2 = 15;
   break;
  }
  _msg_putchar(10);
  i1 = HEAP32[26882] | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i8 + 1;
  HEAP32[i4 >> 2] = i8;
  _vim_snprintf(i1, 1025, 50326, i4) | 0;
  _msg_outtrans_attr(HEAP32[26882] | 0, HEAP32[27064] | 0) | 0;
  _out_flush();
  _ui_breakcheck();
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26886] | 0)) HEAP32[i6 >> 2] = HEAP32[26887]; else HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2];
  while (1) {
   if (!(HEAP32[i6 >> 2] | 0)) break;
   if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
   _msg_putchar(10);
   _msg_putchar((HEAP32[i6 >> 2] | 0) == (HEAP32[26881] | 0) ? 62 : 32);
   _msg_putchar(32);
   i1 = (_bufIsChanged(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) != 0;
   _msg_putchar(i1 ? 43 : 32);
   _msg_putchar(32);
   if (_buf_spname(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) {
    i1 = HEAP32[26882] | 0;
    _vim_strncpy(i1, _buf_spname(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0, 1024);
   } else {
    i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
    _home_replace(i1 | 0, HEAP32[i1 + 76 >> 2] | 0, HEAP32[26882] | 0, 1025, 1);
   }
   _msg_outtrans(HEAP32[26882] | 0) | 0;
   _out_flush();
   _ui_breakcheck();
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  }
  HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 }
 if ((i2 | 0) == 15) {
  STACKTOP = i3;
  return;
 }
}

function _scroll_cursor_halfway(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2 + 28 | 0;
 i5 = i2 + 24 | 0;
 i6 = i2 + 20 | 0;
 i7 = i2 + 16 | 0;
 i8 = i2 + 8 | 0;
 i9 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i1 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i7 >> 2] = _plines(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 L1 : while (1) {
  if ((HEAP32[i5 >> 2] | 0) <= 1) break;
  do if ((HEAP32[i6 >> 2] | 0) <= (HEAP32[i4 >> 2] | 0)) if ((HEAP32[i9 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
   _botline_forw(i9);
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i9 + 4 >> 2] | 0);
   if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) break L1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i9 + 4 >> 2] | 0);
   break;
  } else {
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   if (!(HEAP32[i3 >> 2] | 0)) break;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   break;
  } while (0);
  if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i4 >> 2] | 0)) {
   _topline_back(i8);
   if ((HEAP32[i8 + 4 >> 2] | 0) == 2147483647) HEAP32[i7 >> 2] = 2147483647; else HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i8 + 4 >> 2] | 0);
   if ((HEAP32[i7 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0)) break;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i8 + 4 >> 2] | 0);
   HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  }
 }
 HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[i5 >> 2];
 i5 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -114;
 i5 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 128;
 STACKTOP = i2;
 return;
}

function _redir_write(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 if (HEAP32[26855] | 0) {
  STACKTOP = i4;
  return;
 }
 if ((HEAPU8[HEAP32[3827] >> 0] | 0 | 0) != 0 & (HEAP32[27233] | 0) == 0) _verbose_open() | 0;
 if (!(_redirecting() | 0)) {
  STACKTOP = i4;
  return;
 }
 L10 : do if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) != 10) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) != 13) while (1) {
  if ((HEAP32[27234] | 0) >= (HEAP32[27043] | 0)) break L10;
  if (HEAP32[26856] | 0) _fputs(97452, HEAP32[26856] | 0) | 0;
  if (HEAP32[27233] | 0) _fputs(97452, HEAP32[27233] | 0) | 0;
  HEAP32[27234] = (HEAP32[27234] | 0) + 1;
 } while (0);
 while (1) {
  if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break;
  if ((HEAP32[i6 >> 2] | 0) >= 0) if (((HEAP32[i7 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  if (HEAP32[26856] | 0) _putc(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0, HEAP32[26856] | 0) | 0;
  if (HEAP32[27233] | 0) _putc(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0, HEAP32[27233] | 0) | 0;
  do if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 13) i3 = 24; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 10) i3 = 24; else {
   i2 = HEAP32[27234] | 0;
   if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 9) {
    HEAP32[27234] = (HEAP32[27234] | 0) + (8 - ((i2 | 0) % 8 | 0));
    break;
   } else {
    HEAP32[27234] = i2 + 1;
    break;
   }
  } while (0);
  if ((i3 | 0) == 24) {
   i3 = 0;
   HEAP32[27234] = 0;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if (!(HEAP32[26809] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[27043] = HEAP32[27234];
 STACKTOP = i4;
 return;
}

function _arg_all() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) break;
   HEAP32[i6 >> 2] = _alist_name((HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i4 >> 2] << 3) | 0) | 0;
   L6 : do if (HEAP32[i6 >> 2] | 0) {
    if ((HEAP32[i3 >> 2] | 0) > 0) {
     if (HEAP32[i5 >> 2] | 0) HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] = 32;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
    }
    while (1) {
     if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break L6;
     if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 32) i1 = 13; else if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 92) i1 = 13;
     if ((i1 | 0) == 13) {
      i1 = 0;
      if (HEAP32[i5 >> 2] | 0) HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] = 92;
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
     }
     if (HEAP32[i5 >> 2] | 0) HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] = HEAP8[HEAP32[i6 >> 2] >> 0] | 0;
     HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
     HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
    }
   } while (0);
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  if (HEAP32[i5 >> 2] | 0) break;
  HEAP32[i5 >> 2] = _alloc((HEAP32[i3 >> 2] | 0) + 1 | 0) | 0;
  if (!(HEAP32[i5 >> 2] | 0)) {
   i1 = 24;
   break;
  }
 }
 if ((i1 | 0) == 24) {
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] = 0;
 i7 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _check_map_keycodes() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1 + 20 | 0;
 i3 = i1 + 16 | 0;
 i4 = i1 + 12 | 0;
 i5 = i1 + 24 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1 + 4 | 0;
 i8 = i1;
 _validate_maphash();
 HEAP32[i6 >> 2] = HEAP32[26731];
 HEAP32[26731] = 56512;
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) > 1) break;
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if ((HEAP32[i8 >> 2] | 0) >= 256) break;
   i9 = HEAP32[i8 >> 2] | 0;
   if (HEAP32[i7 >> 2] | 0) {
    if (i9 | 0) break;
    HEAP32[i2 >> 2] = HEAP32[25899];
   } else HEAP32[i2 >> 2] = HEAP32[102556 + (i9 << 2) >> 2];
   while (1) {
    if (!(HEAP32[i2 >> 2] | 0)) break;
    HEAP32[i4 >> 2] = 0;
    while (1) {
     if ((HEAP32[i4 >> 2] | 0) > 1) break;
     i9 = HEAP32[i2 >> 2] | 0;
     if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i3 >> 2] = HEAP32[i9 + 4 >> 2]; else HEAP32[i3 >> 2] = HEAP32[i9 + 8 >> 2];
     while (1) {
      if (!(HEAP8[HEAP32[i3 >> 2] >> 0] | 0)) break;
      if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) == 128) {
       HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
       if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) < 128) {
        HEAP8[i5 >> 0] = HEAP8[HEAP32[i3 >> 2] >> 0] | 0;
        HEAP8[i5 + 1 >> 0] = HEAP8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0;
        HEAP8[i5 + 2 >> 0] = 0;
        _add_termcap_entry(i5, 0) | 0;
       }
       HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
      }
      HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
     }
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
    }
    HEAP32[i2 >> 2] = HEAP32[HEAP32[i2 >> 2] >> 2];
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 HEAP32[26731] = HEAP32[i6 >> 2];
 STACKTOP = i1;
 return;
}

function _ins_start_select(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 HEAP32[i5 >> 2] = i1;
 L1 : do if (HEAP32[26866] | 0) {
  i1 = HEAP32[i5 >> 2] | 0;
  L3 : do if ((i1 | 0) < -13347) {
   if ((i1 | 0) >= -14122) switch (i1 | 0) {
   case -13643:
   case -13387:
    {
     i2 = 3;
     break L3;
     break;
    }
   case -14122:
    {
     break L3;
     break;
    }
   default:
    break L1;
   }
   if ((i1 | 0) < -20587) switch (i1 | 0) {
   case -26917:
    {
     break L3;
     break;
    }
   default:
    break L1;
   } else switch (i1 | 0) {
   case -20075:
   case -20587:
    {
     i2 = 3;
     break L3;
     break;
    }
   default:
    break L1;
   }
  } else {
   if ((i1 | 0) < -12619) switch (i1 | 0) {
   case -13131:
    {
     i2 = 3;
     break L3;
     break;
    }
   case -12835:
   case -13347:
    {
     break L3;
     break;
    }
   default:
    break L1;
   }
   if ((i1 | 0) < -1533) switch (i1 | 0) {
   case -12619:
    {
     i2 = 3;
     break L3;
     break;
    }
   default:
    break L1;
   } else switch (i1 | 0) {
   case -1533:
   case -1277:
    {
     break L3;
     break;
    }
   default:
    break L1;
   }
  } while (0);
  if ((i2 | 0) == 3) if (!(HEAP32[26698] & 2)) break;
  _start_selection();
  _stuffcharReadbuff(15);
  if (HEAP32[26698] | 0) {
   HEAP8[i6 >> 0] = -128;
   HEAP8[i6 + 1 >> 0] = -4;
   HEAP8[i6 + 2 >> 0] = HEAP32[26698];
   HEAP8[i6 + 3 >> 0] = 0;
   _stuffReadbuff(i6);
  }
  _stuffcharReadbuff(HEAP32[i5 >> 2] | 0);
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _skip_vimgrep_pat(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 i3 = (_vim_isIDc(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) != 0;
 i2 = (HEAP32[i7 >> 2] | 0) != 0;
 L1 : do if (i3) {
  if (i2) HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i6 >> 2];
  HEAP32[i6 >> 2] = _skiptowhite(HEAP32[i6 >> 2] | 0) | 0;
  if (HEAP32[i7 >> 2] | 0) if (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) {
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = 0;
  }
 } else {
  if (i2) HEAP32[HEAP32[i7 >> 2] >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i9 >> 2] = HEAPU8[HEAP32[i6 >> 2] >> 0];
  HEAP32[i6 >> 2] = _skip_regexp((HEAP32[i6 >> 2] | 0) + 1 | 0, HEAP32[i9 >> 2] | 0, 1, 0) | 0;
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != (HEAP32[i9 >> 2] | 0)) {
   HEAP32[i5 >> 2] = 0;
   i10 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i10 | 0;
  }
  if (HEAP32[i7 >> 2] | 0) HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  while (1) {
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 103) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 106) break L1;
   do if (HEAP32[i8 >> 2] | 0) {
    i1 = HEAP32[i8 >> 2] | 0;
    i11 = HEAP32[i1 >> 2] | 0;
    if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 103) {
     HEAP32[i1 >> 2] = i11 | 1;
     break;
    } else {
     HEAP32[i1 >> 2] = i11 | 2;
     break;
    }
   } while (0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _fill_input_buf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[26627] | 0) if (!(_no_console_input() | 0)) {
  _gui_mch_update();
  STACKTOP = i3;
  return;
 }
 if (_vim_is_input_buf_full() | 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= 100) break;
  HEAP32[i7 >> 2] = 250 - (HEAP32[26615] | 0);
  HEAP32[i5 >> 2] = _read(HEAP32[26833] | 0, 113468 + (HEAP32[26615] | 0) | 0, HEAP32[i7 >> 2] | 0) | 0;
  if ((HEAP32[i5 >> 2] | 0) > 0) break;
  if (HEAP32[26834] | 0) break;
  if (!(HEAP32[26616] | 0)) {
   i1 = (_isatty(HEAP32[26833] | 0) | 0) == 0;
   if (i1 & (HEAP32[26833] | 0) == 0) {
    HEAP32[i8 >> 2] = HEAP32[26836];
    _settmode(0);
    _close(0) | 0;
    _dup(2) | 0;
    _settmode(HEAP32[i8 >> 2] | 0);
   }
  }
  if (!(HEAP32[i4 >> 2] | 0)) {
   i2 = 26;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 26) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) <= 0) if (!(HEAP32[26834] | 0)) _read_error_exit();
 if ((HEAP32[i5 >> 2] | 0) > 0) HEAP32[26616] = 1;
 if (HEAP32[26834] | 0) {
  HEAP8[113468] = 3;
  HEAP32[26615] = 1;
  STACKTOP = i3;
  return;
 }
 while (1) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + -1;
  if ((i2 | 0) <= 0) break;
  if (HEAP32[10182] | 0 ? (HEAPU8[113468 + (HEAP32[26615] | 0) >> 0] | 0 | 0) == 3 : 0) {
   _memmove(113468, 113468 + (HEAP32[26615] | 0) | 0, (HEAP32[i5 >> 2] | 0) + 1 | 0) | 0;
   HEAP32[26615] = 0;
   HEAP32[26834] = 1;
  }
  HEAP32[26615] = (HEAP32[26615] | 0) + 1;
 }
 STACKTOP = i3;
 return;
}

function _do_doautocmd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i10 >> 2] = 1;
 if (HEAP32[i8 >> 2] | 0) HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
 HEAP32[i11 >> 2] = _au_get_grouparg(i6) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 42) {
  _emsg(53880) | 0;
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 HEAP32[i9 >> 2] = _find_end_event(HEAP32[i6 >> 2] | 0, (HEAP32[i11 >> 2] | 0) != -3 & 1) | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 HEAP32[i9 >> 2] = _skipwhite(HEAP32[i9 >> 2] | 0) | 0;
 while (1) {
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
  if (_ends_excmd(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) break;
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 32) i13 = 1; else i13 = (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 9;
  if (!(i13 ^ 1)) break;
  i3 = _event_name2nr(HEAP32[i6 >> 2] | 0, i6) | 0;
  if (_apply_autocmds_group(i3, HEAP32[i9 >> 2] | 0, 0, 1, HEAP32[i11 >> 2] | 0, HEAP32[26773] | 0, 0) | 0) HEAP32[i10 >> 2] = 0;
 }
 if ((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i7 >> 2] | 0) != 0) _msg(53928) | 0;
 if (HEAP32[i8 >> 2] | 0) HEAP32[HEAP32[i8 >> 2] >> 2] = ((HEAP32[i10 >> 2] | 0) != 0 ^ 1) & 1;
 HEAP32[i5 >> 2] = 1;
 i12 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i12 | 0;
}

function _check_timestamps(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 28 | 0;
 i5 = i3 + 24 | 0;
 i6 = i3 + 20 | 0;
 i7 = i3 + 16 | 0;
 i8 = i3 + 12 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 if ((HEAP32[26739] | 0) > 0) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 if ((HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[26738] | 0) != 0) {
  HEAP32[26737] = 1;
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 i1 = (_stuff_empty() | 0) == 0;
 if (i1 | (HEAP32[26841] | 0) != 0) i2 = 7; else {
  i1 = (_typebuf_typed() | 0) == 0;
  if (i1 | (HEAP32[26744] | 0) != 0 | (HEAP32[26785] | 0) > 0 | (HEAP32[26786] | 0) > 0) i2 = 7; else {
   HEAP32[26720] = (HEAP32[26720] | 0) + 1;
   HEAP32[26738] = 1;
   HEAP32[25466] = 0;
   HEAP32[i6 >> 2] = HEAP32[26771];
   while (1) {
    if (!(HEAP32[i6 >> 2] | 0)) break;
    if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 56 >> 2] | 0) > 0) {
     _set_bufref(i9, HEAP32[i6 >> 2] | 0);
     HEAP32[i8 >> 2] = _buf_check_timestamp(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
     if ((HEAP32[i7 >> 2] | 0) < (HEAP32[i8 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
     if ((HEAP32[i8 >> 2] | 0) > 0) if (!(_bufref_valid(i9) | 0)) HEAP32[i6 >> 2] = HEAP32[26771];
    }
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2];
   }
   HEAP32[26720] = (HEAP32[26720] | 0) + -1;
   HEAP32[26737] = 0;
   if ((HEAP32[26721] | 0) != 0 & (HEAP32[i7 >> 2] | 0) == 2) {
    _msg_puts(97581);
    _out_flush();
   }
  }
 }
 if ((i2 | 0) == 7) HEAP32[26737] = 1;
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _memcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if ((i3 | 0) >= 8192) return _emscripten_memcpy_big(i1 | 0, i2 | 0, i3 | 0) | 0;
 i4 = i1 | 0;
 i5 = i1 + i3 | 0;
 if ((i1 & 3) == (i2 & 3)) {
  while (i1 & 3) {
   if (!i3) return i4 | 0;
   HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = i3 - 1 | 0;
  }
  i6 = i5 & -4 | 0;
  i3 = i6 - 64 | 0;
  while ((i1 | 0) <= (i3 | 0)) {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
   HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
   HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
   HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 32 >> 2];
   HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 36 >> 2];
   HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 40 >> 2];
   HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 44 >> 2];
   HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 48 >> 2];
   HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 52 >> 2];
   HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 56 >> 2];
   HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 60 >> 2];
   i1 = i1 + 64 | 0;
   i2 = i2 + 64 | 0;
  }
  while ((i1 | 0) < (i6 | 0)) {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  }
 } else {
  i6 = i5 - 4 | 0;
  while ((i1 | 0) < (i6 | 0)) {
   HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
   HEAP8[i1 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i5 | 0)) {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 return i4 | 0;
}

function _nv_mousescroll(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[26881];
 do if ((HEAP32[27095] | 0) >= 0 & (HEAP32[27096] | 0) >= 0) {
  HEAP32[i7 >> 2] = HEAP32[27095];
  HEAP32[i8 >> 2] = HEAP32[27096];
  HEAP32[i6 >> 2] = _mouse_find_win(i7, i8) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) {
   STACKTOP = i3;
   return;
  } else {
   HEAP32[26881] = HEAP32[i6 >> 2];
   HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
   break;
  }
 } while (0);
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) == 1) i2 = 6; else if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0)) i2 = 6; else if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0)) {
  HEAP32[i10 >> 2] = 6;
  if (HEAP32[26698] & 6 | 0) HEAP32[i10 >> 2] = HEAP32[(HEAP32[26881] | 0) + 100 >> 2];
  i6 = HEAP32[i10 >> 2] | 0;
  i10 = (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) + ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) == -2 ? 0 - i6 | 0 : i6) | 0;
  HEAP32[i9 >> 2] = i10;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) < 0 ? 0 : i10;
  _gui_do_horiz_scroll(HEAP32[i9 >> 2] | 0, 1) | 0;
 }
 do if ((i2 | 0) == 6) {
  i9 = HEAP32[i4 >> 2] | 0;
  if (HEAP32[26698] & 6 | 0) {
   _onepage(HEAP32[i9 + 32 >> 2] | 0 ? 1 : -1, 1) | 0;
   break;
  } else {
   HEAP32[i9 + 28 >> 2] = 3;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] = 3;
   _nv_scroll_line(HEAP32[i4 >> 2] | 0);
   break;
  }
 } while (0);
 HEAP32[(HEAP32[26881] | 0) + 176 >> 2] = 1;
 HEAP32[26881] = HEAP32[i5 >> 2];
 HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
 STACKTOP = i3;
 return;
}

function _fullpathcmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 12464 | 0;
 i5 = i4 + 172 | 0;
 i6 = i4 + 168 | 0;
 i7 = i4 + 164 | 0;
 i8 = i4 + 160 | 0;
 i9 = i4 + 8368 | 0;
 i10 = i4 + 4272 | 0;
 i11 = i4 + 176 | 0;
 i12 = i4 + 84 | 0;
 i13 = i4 + 8 | 0;
 i14 = i4 + 4 | 0;
 i15 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 _expand_env(HEAP32[i6 >> 2] | 0, i9, 4096);
 HEAP32[i14 >> 2] = _stat(i9, i12) | 0;
 HEAP32[i15 >> 2] = _stat(HEAP32[i7 >> 2] | 0, i13) | 0;
 if (!((HEAP32[i14 >> 2] | 0) != 0 & (HEAP32[i15 >> 2] | 0) != 0)) {
  if ((HEAP32[i14 >> 2] | 0) != 0 | (HEAP32[i15 >> 2] | 0) != 0) {
   HEAP32[i5 >> 2] = 6;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
  if ((HEAP32[i12 >> 2] | 0) == (HEAP32[i13 >> 2] | 0)) if ((HEAP32[i12 + 72 >> 2] | 0) == (HEAP32[i13 + 72 >> 2] | 0)) {
   HEAP32[i5 >> 2] = 1;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
  HEAP32[i5 >> 2] = 2;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 if (HEAP32[i8 >> 2] | 0) {
  if (!(_vim_fnamecmp(i9, HEAP32[i7 >> 2] | 0) | 0)) {
   HEAP32[i5 >> 2] = 7;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
  HEAP32[i14 >> 2] = _vim_FullName(i9, i10, 4096, 0) | 0;
  HEAP32[i15 >> 2] = _vim_FullName(HEAP32[i7 >> 2] | 0, i11, 4096, 0) | 0;
  if ((HEAP32[i14 >> 2] | 0) == 1 & (HEAP32[i15 >> 2] | 0) == 1) if (!(_vim_fnamecmp(i10, i11) | 0)) {
   HEAP32[i5 >> 2] = 7;
   i16 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i16 | 0;
  }
 }
 HEAP32[i5 >> 2] = 4;
 i16 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i16 | 0;
}

function _nfa_postprocess(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 52 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) >> 2];
  if ((HEAP32[i5 >> 2] | 0) == -997 | (HEAP32[i5 >> 2] | 0) == -995 | (HEAP32[i5 >> 2] | 0) == -993 | (HEAP32[i5 >> 2] | 0) == -991) {
   do if (_match_follows(HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 8 >> 2] | 0) + 4 >> 2] | 0, 0) | 0) HEAP32[i6 >> 2] = 1; else {
    HEAP32[i7 >> 2] = _failure_chance(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 4 >> 2] | 0, 0) | 0;
    HEAP32[i8 >> 2] = _failure_chance(HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 8 >> 2] | 0) + 4 >> 2] | 0, 0) | 0;
    if (!((HEAP32[i5 >> 2] | 0) == -993 | (HEAP32[i5 >> 2] | 0) == -991)) {
     HEAP32[i6 >> 2] = (HEAP32[i8 >> 2] | 0) < (HEAP32[i7 >> 2] | 0) & 1;
     break;
    }
    if ((HEAP32[i8 >> 2] | 0) > 0 ? (HEAP32[(HEAP32[i3 >> 2] | 0) + 52 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 24 >> 2] | 0) <= 0 : 0) {
     HEAP32[i6 >> 2] = 0;
     break;
    } else {
     HEAP32[i6 >> 2] = ((HEAP32[i8 >> 2] | 0) * 10 | 0) < (HEAP32[i7 >> 2] | 0) & 1;
     break;
    }
   } while (0);
   if (HEAP32[i6 >> 2] | 0) {
    i1 = (HEAP32[i3 >> 2] | 0) + 52 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) | 0;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   }
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _map_clear_int(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 24 | 0;
 i8 = i6 + 16 | 0;
 i9 = i6 + 12 | 0;
 i10 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 i12 = i6;
 HEAP32[i6 + 28 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i6 + 20 >> 2] = i3;
 HEAP32[i8 >> 2] = i4;
 _validate_maphash();
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= 256) {
   i5 = 17;
   break;
  }
  i4 = HEAP32[i11 >> 2] | 0;
  if (HEAP32[i8 >> 2] | 0) {
   if ((i4 | 0) > 0) {
    i5 = 17;
    break;
   }
   HEAP32[i10 >> 2] = 103596;
  } else HEAP32[i10 >> 2] = 102556 + (i4 << 2);
  while (1) {
   if (!(HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) break;
   HEAP32[i9 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
   if (HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] & HEAP32[i7 >> 2] | 0) {
    i4 = (HEAP32[i9 >> 2] | 0) + 20 | 0;
    HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & ~HEAP32[i7 >> 2];
    if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] | 0)) {
     _map_free(HEAP32[i10 >> 2] | 0);
     continue;
    }
    i4 = HEAPU8[HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] >> 0] | 0;
    HEAP32[i12 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] & 12295 | 0 ? i4 : i4 ^ 128;
    if (!(HEAP32[i8 >> 2] | 0)) if ((HEAP32[i12 >> 2] | 0) != (HEAP32[i11 >> 2] | 0)) {
     HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[HEAP32[i9 >> 2] >> 2];
     HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[102556 + (HEAP32[i12 >> 2] << 2) >> 2];
     HEAP32[102556 + (HEAP32[i12 >> 2] << 2) >> 2] = HEAP32[i9 >> 2];
     continue;
    }
   }
   HEAP32[i10 >> 2] = HEAP32[i9 >> 2];
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 17) {
  STACKTOP = i6;
  return;
 }
}

function _ex_drop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 _set_arglist(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
 if (!(HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[27129] | 0) {
  _ex_all(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = _buflist_findnr(HEAP32[(HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = HEAP32[26884];
 L8 : while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) break;
  if ((HEAP32[i8 >> 2] | 0) == (HEAP32[26886] | 0)) i9 = HEAP32[26887] | 0; else i9 = HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i6 >> 2] = i9;
  while (1) {
   if (!(HEAP32[i6 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) {
    i2 = 12;
    break L8;
   }
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  }
  HEAP32[i8 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
 }
 if ((i2 | 0) == 12) {
  _goto_tabpage_win(HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  HEAP32[(HEAP32[26881] | 0) + 188 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 if (!(_buf_hide(HEAP32[26773] | 0) | 0)) {
  HEAP32[26714] = (HEAP32[26714] | 0) + 1;
  HEAP32[i5 >> 2] = _check_changed(HEAP32[26773] | 0, 17) | 0;
  HEAP32[26714] = (HEAP32[26714] | 0) + -1;
 }
 i6 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
 if (HEAP32[i5 >> 2] | 0) {
  HEAP32[i6 >> 2] = 393;
  HEAP8[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] >> 0] = 115;
 } else HEAP32[i6 >> 2] = 152;
 _ex_rewind(HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _line_count_info(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 32 | 0;
 i8 = i6 + 28 | 0;
 i9 = i6 + 24 | 0;
 i10 = i6 + 20 | 0;
 i11 = i6 + 16 | 0;
 i12 = i6 + 12 | 0;
 i13 = i6 + 8 | 0;
 i14 = i6 + 4 | 0;
 i15 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i10 >> 2] | 0)) i16 = (HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] | 0 | 0) != 0; else i16 = 0;
  i17 = (HEAP32[i15 >> 2] | 0) != 0;
  if (!i16) break;
  i5 = (_vim_isspace(HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] | 0) | 0) != 0;
  if (i17) {
   if (i5) {
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
    HEAP32[i15 >> 2] = 0;
   }
  } else if (!i5) HEAP32[i15 >> 2] = 1;
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 if (i17) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 i17 = HEAP32[i8 >> 2] | 0;
 HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + (HEAP32[i13 >> 2] | 0);
 if ((HEAP32[i12 >> 2] | 0) < (HEAP32[i10 >> 2] | 0)) if (!(HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i12 >> 2] | 0) >> 0] | 0)) {
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 }
 i11 = HEAP32[i9 >> 2] | 0;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + (HEAP32[i14 >> 2] | 0);
 STACKTOP = i6;
 return HEAP32[i12 >> 2] | 0;
}

function _ui_inchar(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = 0;
 if (0) {
  i4 = HEAP32[i7 >> 2] | 0;
  i3 = 0 + (HEAP32[26611] | 0) | 0;
  if ((HEAP32[i8 >> 2] | 0) < (0 - (HEAP32[26611] | 0) | 0)) {
   _memmove(i4 | 0, i3 | 0, HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[26611] = (HEAP32[26611] | 0) + (HEAP32[i8 >> 2] | 0);
   HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
   i12 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i12 | 0;
  }
  _memmove(i4 | 0, i3 | 0, 0) | 0;
  if (0) _vim_free(0);
  HEAP32[i6 >> 2] = 0;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 i3 = (_no_console_input() | 0) != 0;
 i4 = (HEAP32[i9 >> 2] | 0) == -1;
 if (i3) {
  if (i4) {
   i3 = (HEAP32[26612] | 0) + 1 | 0;
   HEAP32[26612] = i3;
   if ((i3 | 0) == 1e3) _read_error_exit();
  }
  HEAP8[HEAP32[i7 >> 2] >> 0] = 13;
  HEAP32[i11 >> 2] = 1;
 } else {
  if (i4 | (HEAP32[i9 >> 2] | 0) > 100) {
   _vim_handle_signal(-2) | 0;
   i4 = HEAP32[26808] | HEAP32[(HEAP32[26773] | 0) + 788 >> 2];
   if (i4 & (_get_real_state() | 0) | 0) HEAP32[10182] = 0;
  }
  if (HEAP32[26627] | 0) HEAP32[i11 >> 2] = _gui_inchar(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
  if ((HEAP32[i9 >> 2] | 0) == -1 | (HEAP32[i9 >> 2] | 0) > 100) _vim_handle_signal(-1) | 0;
  HEAP32[10182] = 1;
 }
 HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
 i12 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i12 | 0;
}

function _set_shellsize(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (HEAP32[26597] | 0) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i6 >> 2] | 0) < 0 | (HEAP32[i7 >> 2] | 0) < 0) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[10180] | 0) == 513 | (HEAP32[10180] | 0) == 1024) {
  HEAP32[10180] = 1024;
  STACKTOP = i5;
  return;
 }
 if (!(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[26597] = (HEAP32[26597] | 0) + 1;
 if (HEAP32[i8 >> 2] | 0) i4 = 8; else {
  i3 = (_ui_get_shellsize() | 0) == 0;
  if (i3 & (HEAP32[i7 >> 2] | 0) != 0) i4 = 8; else _check_shellsize();
 }
 if ((i4 | 0) == 8) {
  HEAP32[10173] = HEAP32[i7 >> 2];
  HEAP32[10174] = HEAP32[i6 >> 2];
  _check_shellsize();
  _ui_set_shellsize(HEAP32[i8 >> 2] | 0);
 }
 if ((HEAP32[10180] | 0) != 768 & (HEAP32[10180] | 0) != 1536 & (HEAP32[10180] | 0) != 2048) _screenclear(); else _screen_start();
 if ((HEAP32[10177] | 0) != 2) {
  _changed_line_abv_curs();
  _invalidate_botline();
  do if ((HEAP32[10180] | 0) == 768 | (HEAP32[10180] | 0) == 1536 | (HEAP32[10180] | 0) == 2048 | (HEAP32[26798] | 0) != 0) {
   _screenalloc(0);
   _repeat_message();
  } else {
   if (HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0) _do_check_scrollbind(1);
   if (HEAP32[10180] & 8 | 0) {
    _update_screen(40) | 0;
    _redrawcmdline();
    break;
   }
   _update_topline();
   _update_screen(40) | 0;
   if (_redrawing() | 0) _setcursor();
  } while (0);
  _cursor_on();
 }
 _out_flush();
 HEAP32[26597] = (HEAP32[26597] | 0) + -1;
 STACKTOP = i5;
 return;
}

function _ex_splitview(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26881];
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 444) i6 = 1; else if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 445) i6 = 1; else i6 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 450;
 HEAP32[i5 >> 2] = i6 & 1;
 HEAP32[26757] = 1;
 if (!(HEAP32[i5 >> 2] | 0)) {
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) > 0) i7 = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0; else i7 = 0;
  if (!(_win_split(i7, (HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] >> 0] | 0 | 0) == 118 ? 2 : 0) | 0)) {
   STACKTOP = i2;
   return;
  }
  if (HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0 | 0) {
   HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] = 0;
   HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] = 0;
  } else _do_check_scrollbind(0);
  _do_exedit(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (HEAP32[27129] | 0) i8 = HEAP32[27129] | 0; else if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) i8 = 0; else i8 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) + 1 | 0;
 if (!(_win_new_tabpage(i8) | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_exedit(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 if ((HEAP32[26881] | 0) == (HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(_win_valid(HEAP32[i4 >> 2] | 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[27130] | 0 ? 1 : (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[26773] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 180 >> 2] = HEAP32[(HEAP32[26773] | 0) + 92 >> 2];
 STACKTOP = i2;
 return;
}

function _lookup_color(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = HEAP32[30492 + (HEAP32[i6 >> 2] << 2) >> 2];
 if ((HEAP32[i9 >> 2] | 0) < 0) {
  HEAP32[i5 >> 2] = -1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 do if ((HEAP32[26734] | 0) == 8) {
  HEAP32[i9 >> 2] = HEAP32[30604 + (HEAP32[i6 >> 2] << 2) >> 2];
  do if (HEAP32[i7 >> 2] | 0) {
   i3 = HEAP32[i8 >> 2] | 0;
   if (HEAP32[i9 >> 2] & 8 | 0) {
    HEAP32[i3 >> 2] = 1;
    break;
   } else {
    HEAP32[i3 >> 2] = 0;
    break;
   }
  } while (0);
  HEAP32[i9 >> 2] = HEAP32[i9 >> 2] & 7;
 } else if ((HEAP32[26734] | 0) == 16 | (HEAP32[26734] | 0) == 88 | (HEAP32[26734] | 0) >= 256) {
  if (HEAPU8[HEAP32[26568] >> 0] | 0 | 0) HEAP32[i10 >> 2] = HEAP32[26568]; else HEAP32[i10 >> 2] = HEAP32[26563];
  if (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) {
   if ((HEAP32[26734] | 0) <= 256) {
    i3 = HEAP32[i10 >> 2] | 0;
    if ((HEAPU8[i3 + (_strlen(HEAP32[i10 >> 2] | 0) | 0) + -1 >> 0] | 0 | 0) != 109) break;
   }
   if ((HEAP32[26734] | 0) == 88) {
    HEAP32[i9 >> 2] = HEAP32[30716 + (HEAP32[i6 >> 2] << 2) >> 2];
    break;
   }
   i3 = HEAP32[i6 >> 2] | 0;
   if ((HEAP32[26734] | 0) >= 256) {
    HEAP32[i9 >> 2] = HEAP32[30828 + (i3 << 2) >> 2];
    break;
   } else {
    HEAP32[i9 >> 2] = HEAP32[30604 + (i3 << 2) >> 2];
    break;
   }
  }
 } while (0);
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _bck_word(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[26484] = HEAP32[i8 >> 2];
 L1 : while (1) {
  i8 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
  HEAP32[i7 >> 2] = i8;
  if ((i8 | 0) < 0) {
   i4 = 18;
   break;
  }
  HEAP32[i10 >> 2] = _cls() | 0;
  if ((_dec_cursor() | 0) == -1) {
   i4 = 4;
   break;
  }
  if (HEAP32[i9 >> 2] | 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   i3 = (i8 | 0) == (_cls() | 0);
   if (i3 | (HEAP32[i10 >> 2] | 0) == 0) i4 = 7; else i4 = 16;
  } else i4 = 7;
  L7 : do if ((i4 | 0) == 7) {
   i4 = 0;
   while (1) {
    if (_cls() | 0) break;
    if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) if (!(HEAPU8[(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) >> 0] | 0)) break L7;
    if ((_dec_cursor() | 0) == -1) {
     i4 = 12;
     break L1;
    }
   }
   if (_skip_chars(_cls() | 0, -1) | 0) {
    i4 = 15;
    break L1;
   } else i4 = 16;
  } while (0);
  if ((i4 | 0) == 16) {
   i4 = 0;
   _inc_cursor() | 0;
  }
  HEAP32[i9 >> 2] = 0;
 }
 if ((i4 | 0) == 4) {
  HEAP32[i6 >> 2] = 0;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 } else if ((i4 | 0) == 12) {
  HEAP32[i6 >> 2] = 1;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 } else if ((i4 | 0) == 15) {
  HEAP32[i6 >> 2] = 1;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 } else if ((i4 | 0) == 18) {
  HEAP32[i6 >> 2] = 1;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 return 0;
}

function _msg_outtrans_len_attr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 if (HEAP32[i7 >> 2] & 4096 | 0) {
  _add_msg_hist(HEAP32[i9 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -4097;
 }
 while (1) {
  i5 = (HEAP32[i6 >> 2] | 0) + -1 | 0;
  HEAP32[i6 >> 2] = i5;
  i12 = HEAP32[i9 >> 2] | 0;
  if ((i5 | 0) < 0) break;
  HEAP32[i11 >> 2] = _transchar(HEAPU8[i12 >> 0] | 0) | 0;
  if (HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) {
   if ((HEAP32[i9 >> 2] | 0) >>> 0 > (HEAP32[i10 >> 2] | 0) >>> 0) {
    i5 = HEAP32[i10 >> 2] | 0;
    _msg_puts_attr_len(i5 | 0, (HEAP32[i9 >> 2] | 0) - i5 | 0, HEAP32[i7 >> 2] | 0);
   }
   HEAP32[i10 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   i5 = HEAP32[i7 >> 2] | 0;
   _msg_puts_attr(HEAP32[i11 >> 2] | 0, (i5 | 0) == 0 ? HEAP32[27048] | 0 : i5 | 0);
   i5 = _strlen(HEAP32[i11 >> 2] | 0) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i5;
  } else HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if (i12 >>> 0 <= (HEAP32[i10 >> 2] | 0) >>> 0) {
  i13 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 i12 = HEAP32[i10 >> 2] | 0;
 _msg_puts_attr_len(i12 | 0, (HEAP32[i9 >> 2] | 0) - i12 | 0, HEAP32[i7 >> 2] | 0);
 i13 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i4;
 return i13 | 0;
}

function _enter_tabpage(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 20 | 0;
 i8 = i6 + 16 | 0;
 i9 = i6 + 12 | 0;
 i10 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 i12 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) + 84 >> 2];
 HEAP32[i12 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
 HEAP32[26886] = HEAP32[i7 >> 2];
 HEAP32[26887] = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2];
 HEAP32[27112] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
 HEAP32[27114] = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2];
 _win_enter_ext(HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0, 0, 1, 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0);
 HEAP32[26768] = HEAP32[i12 >> 2];
 _last_status(0);
 _win_comp_pos() | 0;
 HEAP32[26828] = 50;
 HEAP32[26875] = HEAP32[(HEAP32[26886] | 0) + 32 >> 2];
 if ((HEAP32[(HEAP32[26886] | 0) + 24 >> 2] | 0) != (HEAP32[10173] | 0)) i5 = 3; else if ((HEAP32[i11 >> 2] | 0) != (HEAP32[(HEAP32[26887] | 0) + 84 >> 2] | 0)) i5 = 3;
 if ((i5 | 0) == 3) _shell_new_rows();
 if ((HEAP32[10177] | 0) == 0 ? (HEAP32[(HEAP32[26886] | 0) + 28 >> 2] | 0) != (HEAP32[10174] | 0) : 0) _shell_new_columns();
 _gui_may_update_scrollbars();
 if (!(HEAP32[i9 >> 2] | 0)) {
  _redraw_all_later(50);
  STACKTOP = i6;
  return;
 }
 _apply_autocmds(78, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if ((HEAP32[i8 >> 2] | 0) == (HEAP32[26773] | 0)) {
  _redraw_all_later(50);
  STACKTOP = i6;
  return;
 }
 _apply_autocmds(2, 0, 0, 0, HEAP32[26773] | 0) | 0;
 _redraw_all_later(50);
 STACKTOP = i6;
 return;
}

function _getvcols(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i7 + 32 | 0;
 i9 = i7 + 28 | 0;
 i10 = i7 + 24 | 0;
 i11 = i7 + 20 | 0;
 i12 = i7 + 16 | 0;
 i13 = i7 + 12 | 0;
 i14 = i7 + 8 | 0;
 i15 = i7 + 4 | 0;
 i16 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 i5 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[HEAP32[i9 >> 2] >> 2] | 0) != (HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) if ((HEAP32[i5 >> 2] | 0) < (HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) i6 = 4; else i6 = 5; else if ((HEAP32[i5 + 4 >> 2] | 0) < (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0)) i6 = 4; else i6 = 5;
 if ((i6 | 0) == 4) {
  _getvcol(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, i13, 0, i15);
  _getvcol(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, i14, 0, i16);
 } else if ((i6 | 0) == 5) {
  _getvcol(HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, i13, 0, i15);
  _getvcol(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, i14, 0, i16);
 }
 if ((HEAP32[i14 >> 2] | 0) < (HEAP32[i13 >> 2] | 0)) HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i14 >> 2]; else HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[i13 >> 2];
 if ((HEAP32[i16 >> 2] | 0) <= (HEAP32[i15 >> 2] | 0)) {
  HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i15 >> 2];
  STACKTOP = i7;
  return;
 }
 if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) if (((HEAP32[i14 >> 2] | 0) - 1 | 0) >= (HEAP32[i15 >> 2] | 0)) {
  HEAP32[HEAP32[i12 >> 2] >> 2] = (HEAP32[i14 >> 2] | 0) - 1;
  STACKTOP = i7;
  return;
 }
 HEAP32[HEAP32[i12 >> 2] >> 2] = HEAP32[i16 >> 2];
 STACKTOP = i7;
 return;
}

function _read_buffer(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = 1;
 HEAP32[i10 >> 2] = HEAP32[HEAP32[26773] >> 2];
 if (HEAP32[i6 >> 2] | 0) i11 = 0; else i11 = HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0;
 if (HEAP32[i6 >> 2] | 0) i12 = 0; else i12 = HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0;
 HEAP32[i9 >> 2] = _readfile(i11, i12, HEAP32[i10 >> 2] | 0, 0, 2147483647, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 8) | 0;
 L7 : do if ((HEAP32[i9 >> 2] | 0) == 1) while (1) {
  i8 = (HEAP32[i10 >> 2] | 0) + -1 | 0;
  HEAP32[i10 >> 2] = i8;
  if ((i8 | 0) < 0) break L7;
  _ml_delete(1, 0) | 0;
 } else while (1) {
  if ((HEAP32[HEAP32[26773] >> 2] | 0) <= (HEAP32[i10 >> 2] | 0)) break L7;
  _ml_delete(HEAP32[i10 >> 2] | 0, 0) | 0;
 } while (0);
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i13 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 do if (HEAP32[26815] | 0) i4 = 17; else {
  if ((HEAP32[HEAP32[26773] >> 2] | 0) == 1) if (!(HEAPU8[(_ml_get(1) | 0) >> 0] | 0)) {
   i4 = 17;
   break;
  }
  _changed();
 } while (0);
 if ((i4 | 0) == 17) if ((HEAP32[i9 >> 2] | 0) == 1) _unchanged(HEAP32[26773] | 0, 0);
 if ((HEAP32[i9 >> 2] | 0) != 1) {
  i13 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 _apply_autocmds(73, 0, 0, 0, HEAP32[26773] | 0) | 0;
 i13 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i5;
 return i13 | 0;
}

function _ml_firstmarked() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 if (!(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 HEAP32[i6 >> 2] = HEAP32[26049];
 L5 : while (1) {
  if ((HEAP32[i6 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
   i1 = 13;
   break;
  }
  i9 = _ml_find_line(HEAP32[26773] | 0, HEAP32[i6 >> 2] | 0, 19) | 0;
  HEAP32[i4 >> 2] = i9;
  if (!i9) {
   i1 = 6;
   break;
  }
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2];
  HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 36 >> 2] | 0);
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) > (HEAP32[(HEAP32[26773] | 0) + 40 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i7 >> 2] << 2) >> 2] & -2147483648 | 0) {
    i1 = 10;
    break L5;
   }
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
 }
 if ((i1 | 0) == 6) {
  HEAP32[i3 >> 2] = 0;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 } else if ((i1 | 0) == 10) {
  i4 = (HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i7 >> 2] << 2) | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & 2147483647;
  i4 = (HEAP32[26773] | 0) + 8 | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 4;
  HEAP32[26049] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 } else if ((i1 | 0) == 13) {
  HEAP32[i3 >> 2] = 0;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 return 0;
}

function _expand_tag_fname(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5 + 56 | 0;
 i7 = i5 + 52 | 0;
 i8 = i5 + 48 | 0;
 i9 = i5 + 44 | 0;
 i10 = i5 + 40 | 0;
 i11 = i5 + 36 | 0;
 i12 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i11 >> 2] = 0;
 if (HEAP32[i8 >> 2] | 0) if (_mch_has_wildcard(HEAP32[i6 >> 2] | 0) | 0) {
  _ExpandInit(i12);
  HEAP32[i12 >> 2] = 2;
  HEAP32[i11 >> 2] = _ExpandOne(i12, HEAP32[i6 >> 2] | 0, 0, 65, 2) | 0;
  if (HEAP32[i11 >> 2] | 0) HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
 }
 if (HEAP32[27005] | 0) i4 = 7; else if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) i4 = 7;
 if ((i4 | 0) == 7) if (!(_vim_isAbsName(HEAP32[i6 >> 2] | 0) | 0)) {
  i4 = _gettail(HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = i4;
  if ((i4 | 0) != (HEAP32[i7 >> 2] | 0)) {
   HEAP32[i10 >> 2] = _alloc(4096) | 0;
   if (!(HEAP32[i10 >> 2] | 0)) {
    i13 = HEAP32[i11 >> 2] | 0;
    _vim_free(i13);
    i14 = HEAP32[i10 >> 2] | 0;
    STACKTOP = i5;
    return i14 | 0;
   }
   _strcpy(HEAP32[i10 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
   i4 = (HEAP32[i9 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0;
   _vim_strncpy((HEAP32[i10 >> 2] | 0) + i4 | 0, HEAP32[i6 >> 2] | 0, 4096 - i4 - 1 | 0);
   _simplify_filename(HEAP32[i10 >> 2] | 0);
   i13 = HEAP32[i11 >> 2] | 0;
   _vim_free(i13);
   i14 = HEAP32[i10 >> 2] | 0;
   STACKTOP = i5;
   return i14 | 0;
  }
 }
 HEAP32[i10 >> 2] = _vim_strsave(HEAP32[i6 >> 2] | 0) | 0;
 i13 = HEAP32[i11 >> 2] | 0;
 _vim_free(i13);
 i14 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i5;
 return i14 | 0;
}

function _prepare_pats(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i2 + 12 >> 2] = HEAP32[i2 + 4 >> 2];
 if (HEAP32[i5 >> 2] | 0) {
  i2 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
  if ((HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0) == 94) HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = i2 + 1; else if ((HEAPU8[i2 >> 0] | 0) == 92) if ((HEAPU8[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 1 >> 0] | 0) == 60) HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 2;
  i2 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
  HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = 0;
  L9 : do if (!i2) while (1) {
   if (!(HEAPU8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) >> 0] | 0)) break L9;
   if (_vim_strchr(HEAP32[26946] | 0 ? 78751 : 78758, HEAPU8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) >> 0] | 0) | 0) break L9;
   i1 = (HEAP32[i4 >> 2] | 0) + 12 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  } while (0);
  if (HEAP32[27004] | 0) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) > (HEAP32[27004] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = HEAP32[27004];
 }
 i2 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[i5 >> 2] | 0) {
  i5 = _vim_regcomp(HEAP32[i2 >> 2] | 0, HEAP32[26946] | 0 ? 1 : 0) | 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] = i5;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[i2 + 16 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
}

function _emsg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 if (_emsg_not_now() | 0) {
  HEAP32[i4 >> 2] = 1;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[27045] = 1;
 if (HEAP32[26714] | 0) {
  if (_vim_strchr(HEAP32[26905] | 0, 116) | 0) i2 = 5;
 } else i2 = 5;
 do if ((i2 | 0) == 5) {
  if (!(HEAP32[26810] | 0)) {
   HEAP32[26717] = 1;
   HEAP32[26809] = 0;
   HEAP32[26811] = 0;
   if (HEAP32[26841] | 0) HEAP32[26841] = (HEAP32[26841] | 0) + 1;
   if (HEAP32[26913] | 0) _beep_flush(); else _flush_buffers(0);
   HEAP32[26880] = 1;
   break;
  }
  if (!0) {
   _msg_start();
   HEAP32[i7 >> 2] = _get_emsg_source() | 0;
   if (HEAP32[i7 >> 2] | 0) {
    _strcat(HEAP32[i7 >> 2] | 0, 97581) | 0;
    _redir_write(HEAP32[i7 >> 2] | 0, -1);
    _vim_free(HEAP32[i7 >> 2] | 0);
   }
   HEAP32[i7 >> 2] = _get_emsg_lnum() | 0;
   if (HEAP32[i7 >> 2] | 0) {
    _strcat(HEAP32[i7 >> 2] | 0, 97581) | 0;
    _redir_write(HEAP32[i7 >> 2] | 0, -1);
    _vim_free(HEAP32[i7 >> 2] | 0);
   }
   _redir_write(HEAP32[i5 >> 2] | 0, -1);
  }
  HEAP32[i4 >> 2] = 1;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } while (0);
 HEAP32[26718] = 1;
 HEAP32[26710] = (HEAP32[26710] | 0) + 1;
 HEAP32[i6 >> 2] = HEAP32[27052];
 if (HEAP32[27044] | 0) HEAP32[26721] = 1;
 _msg_source(HEAP32[i6 >> 2] | 0);
 HEAP32[26713] = 0;
 HEAP32[i8 >> 2] = _msg_attr(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _copy_option_part(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i11 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
 if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 46) {
  i4 = HEAP32[i11 >> 2] | 0;
  HEAP32[i11 >> 2] = i4 + 1;
  i3 = HEAP8[i4 >> 0] | 0;
  i4 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i2 + 1;
  HEAP8[i4 + i2 >> 0] = i3;
 }
 while (1) {
  if (!(HEAPU8[HEAP32[i11 >> 2] >> 0] | 0)) break;
  if (_vim_strchr(HEAP32[i9 >> 2] | 0, HEAPU8[HEAP32[i11 >> 2] >> 0] | 0) | 0) break;
  if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) == 92) if (_vim_strchr(HEAP32[i9 >> 2] | 0, HEAPU8[(HEAP32[i11 >> 2] | 0) + 1 >> 0] | 0) | 0) HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
  if ((HEAP32[i10 >> 2] | 0) < ((HEAP32[i8 >> 2] | 0) - 1 | 0)) {
   i3 = HEAP8[HEAP32[i11 >> 2] >> 0] | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   i4 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i4 + 1;
   HEAP8[i2 + i4 >> 0] = i3;
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] = 0;
 if (HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) if ((HEAPU8[HEAP32[i11 >> 2] >> 0] | 0 | 0) != 44) HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 HEAP32[i11 >> 2] = _skip_to_option_part(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i11 >> 2];
 STACKTOP = i5;
 return HEAP32[i10 >> 2] | 0;
}

function _ex_copy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) + 1;
 HEAP32[(HEAP32[26773] | 0) + 476 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 HEAP32[(HEAP32[26773] | 0) + 492 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
 HEAP32[(HEAP32[26773] | 0) + 492 + 4 >> 2] = 0;
 HEAP32[(HEAP32[26773] | 0) + 476 + 4 >> 2] = 0;
 if (!(_u_save(HEAP32[i7 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) > (HEAP32[i6 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = _vim_strsave(_ml_get(HEAP32[i5 >> 2] | 0) | 0) | 0;
  if (HEAP32[i9 >> 2] | 0) {
   _ml_append(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0, 0) | 0;
   _vim_free(HEAP32[i9 >> 2] | 0);
  }
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) HEAP32[i5 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[i5 >> 2] | 0)) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  i3 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 _appended_lines_mark(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0);
 _msgmore(HEAP32[i8 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _find_is_eval_item(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 16 | 0;
 i8 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i10 = i6 + 4 | 0;
 i11 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 if ((HEAP32[i11 >> 2] | 0) == -1 ? (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == 93 : 0) i5 = 3; else if ((HEAP32[i11 >> 2] | 0) == 1 ? (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == 91 : 0) i5 = 3;
 if ((i5 | 0) == 3) {
  i4 = HEAP32[i10 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 i4 = HEAPU8[HEAP32[i8 >> 2] >> 0] | 0;
 if ((HEAP32[HEAP32[i10 >> 2] >> 2] | 0) > 0) {
  if ((i4 | 0) == 91 & (HEAP32[i11 >> 2] | 0) == -1) i5 = 7; else if ((HEAP32[i11 >> 2] | 0) == 1 ? (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == 93 : 0) i5 = 7;
  if ((i5 | 0) == 7) {
   i5 = HEAP32[i10 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
  }
  HEAP32[i7 >> 2] = 1;
  i12 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i12 | 0;
 }
 if ((i4 | 0) == 46) {
  HEAP32[i7 >> 2] = 1;
  i12 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i12 | 0;
 }
 if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) == -1 ? 0 : 1) >> 0] | 0 | 0) == 62) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + ((HEAP32[i11 >> 2] | 0) == -1 ? -1 : 0) >> 0] | 0 | 0) == 45) {
  i8 = HEAP32[i9 >> 2] | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
  HEAP32[i7 >> 2] = 1;
  i12 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i12 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 i12 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i12 | 0;
}

function _do_check_cursorbind() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i1 + 32 | 0;
 i3 = i1 + 28 | 0;
 i4 = i1 + 24 | 0;
 i5 = i1 + 20 | 0;
 i6 = i1 + 16 | 0;
 i7 = i1 + 12 | 0;
 i8 = i1 + 8 | 0;
 i9 = i1 + 4 | 0;
 i10 = i1;
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[26881] | 0) + 32 >> 2];
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[26881] | 0) + 36 >> 2];
 HEAP32[i6 >> 2] = HEAP32[26881];
 HEAP32[i7 >> 2] = HEAP32[26773];
 HEAP32[i9 >> 2] = HEAP32[26789];
 HEAP32[i10 >> 2] = HEAP32[26788];
 HEAP32[26788] = 0;
 HEAP32[26789] = 0;
 HEAP32[26881] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[26881] | 0)) break;
  HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
  if ((HEAP32[26881] | 0) != (HEAP32[i6 >> 2] | 0)) if (HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] | 0) {
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i2 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i3 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = HEAP32[i4 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i8 >> 2] = HEAP32[26806];
   HEAP32[26806] = 1;
   _check_cursor();
   HEAP32[26806] = HEAP32[i8 >> 2];
   _redraw_later(10);
   if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0)) _update_topline();
   HEAP32[(HEAP32[26881] | 0) + 176 >> 2] = 1;
  }
  HEAP32[26881] = HEAP32[(HEAP32[26881] | 0) + 12 >> 2];
 }
 HEAP32[26789] = HEAP32[i9 >> 2];
 HEAP32[26788] = HEAP32[i10 >> 2];
 HEAP32[26881] = HEAP32[i6 >> 2];
 HEAP32[26773] = HEAP32[i7 >> 2];
 STACKTOP = i1;
 return;
}

function _openscript(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i4 = i3 + 112 | 0;
 i5 = i3 + 108 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 12 | 0;
 i10 = i3 + 8 | 0;
 i11 = i3 + 4 | 0;
 i12 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (((HEAP32[26831] | 0) + 1 | 0) == 15) {
  _emsg(92686) | 0;
  STACKTOP = i3;
  return;
 }
 if (HEAP32[108652 + (HEAP32[26831] << 2) >> 2] | 0) HEAP32[26831] = (HEAP32[26831] | 0) + 1;
 _expand_env(HEAP32[i4 >> 2] | 0, HEAP32[26885] | 0, 4096);
 i2 = _fopen(HEAP32[26885] | 0, 94911) | 0;
 HEAP32[108652 + (HEAP32[26831] << 2) >> 2] = i2;
 if (!i2) {
  _emsg2(93293, HEAP32[i4 >> 2] | 0) | 0;
  if (!(HEAP32[26831] | 0)) {
   STACKTOP = i3;
   return;
  }
  HEAP32[26831] = (HEAP32[26831] | 0) + -1;
  STACKTOP = i3;
  return;
 }
 i4 = (_save_typebuf() | 0) != 0;
 if (!(i4 & (HEAP32[i5 >> 2] | 0) != 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[10180];
 HEAP32[i9 >> 2] = HEAP32[26806];
 HEAP32[i10 >> 2] = HEAP32[26883];
 HEAP32[i11 >> 2] = HEAP32[26796];
 HEAP32[i12 >> 2] = HEAP32[26710];
 HEAP32[10180] = 1;
 HEAP32[26710] = 0;
 HEAP32[26806] = 0;
 HEAP32[26883] = 0;
 _clear_oparg(i6);
 HEAP32[26796] = 0;
 HEAP32[i7 >> 2] = HEAP32[26831];
 do {
  _update_topline_cursor();
  _normal_cmd(i6, 0);
  _vpeekc() | 0;
 } while ((HEAP32[108652 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) != 0);
 HEAP32[10180] = HEAP32[i8 >> 2];
 HEAP32[26710] = HEAP32[i12 >> 2];
 HEAP32[26806] = HEAP32[i9 >> 2];
 HEAP32[26883] = HEAP32[i10 >> 2];
 HEAP32[26796] = HEAP32[i11 >> 2];
 STACKTOP = i3;
 return;
}

function _gui_resize_shell(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 4 | 0;
 i6 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAP32[26629] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[26758] | 0) != 0 | (HEAP32[26687] | 0) != 0) {
  HEAP32[26760] = HEAP32[i5 >> 2];
  HEAP32[26761] = HEAP32[i6 >> 2];
  STACKTOP = i4;
  return;
 }
 while (1) {
  HEAP32[26760] = 0;
  HEAP32[26761] = 0;
  HEAP32[26687] = 1;
  _out_flush();
  i2 = HEAP32[i5 >> 2] | 0;
  i1 = i2 - (_gui_get_base_width() | 0) | 0;
  HEAP32[26640] = (i1 | 0) / (HEAP32[26665] | 0) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = i1 - (_gui_get_base_height() | 0) | 0;
  HEAP32[26641] = (i2 | 0) / (HEAP32[26666] | 0) | 0;
  _gui_position_components(HEAP32[i5 >> 2] | 0);
  _gui_reset_scroll_region();
  if ((HEAP32[10180] | 0) == 768 | (HEAP32[10180] | 0) == 2048) HEAP32[26636] = HEAP32[26641];
  if ((HEAP32[26641] | 0) != (HEAP32[26696] | 0)) i3 = 11; else if ((HEAP32[26640] | 0) != (HEAP32[26697] | 0)) i3 = 11; else if ((HEAP32[26641] | 0) != (HEAP32[10173] | 0)) i3 = 11; else if ((HEAP32[26640] | 0) != (HEAP32[10174] | 0)) i3 = 11;
  if ((i3 | 0) == 11) {
   i3 = 0;
   _shell_resized();
  }
  _gui_update_scrollbars(1);
  _gui_update_cursor(0, 1);
  HEAP32[26687] = 0;
  if (!(HEAP32[26761] | 0)) {
   i3 = 17;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26760] | 0)) if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26761] | 0)) break;
  HEAP32[i5 >> 2] = HEAP32[26760];
  HEAP32[i6 >> 2] = HEAP32[26761];
 }
 if ((i3 | 0) == 17) {
  STACKTOP = i4;
  return;
 }
 HEAP32[26760] = 0;
 HEAP32[26761] = 0;
 STACKTOP = i4;
 return;
}

function _opt_strings_flags(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 28 | 0;
 i8 = i6 + 24 | 0;
 i9 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i11 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i14 >> 2] = 0;
 L1 : while (1) {
  if (!(HEAP8[HEAP32[i8 >> 2] >> 0] | 0)) break;
  HEAP32[i12 >> 2] = 0;
  while (1) {
   if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0)) {
    i5 = 5;
    break L1;
   }
   HEAP32[i13 >> 2] = _strlen(HEAP32[(HEAP32[i9 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0) | 0;
   if (!(_strncmp(HEAP32[(HEAP32[i9 >> 2] | 0) + (HEAP32[i12 >> 2] << 2) >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0)) {
    if (HEAP32[i11 >> 2] | 0) if ((HEAPU8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) >> 0] | 0) == 44) break;
    if (!(HEAPU8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i13 >> 2] | 0) >> 0] | 0)) break;
   }
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  }
  i4 = HEAP32[i8 >> 2] | 0;
  i3 = HEAP32[i13 >> 2] | 0;
  HEAP32[i8 >> 2] = (i4 | 0) + ((i3 | 0) + ((HEAPU8[i4 + i3 >> 0] | 0) == 44 & 1));
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1 << HEAP32[i12 >> 2];
 }
 if ((i5 | 0) == 5) {
  HEAP32[i7 >> 2] = 0;
  i15 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i15 | 0;
 }
 if (HEAP32[i10 >> 2] | 0) HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i14 >> 2];
 HEAP32[i7 >> 2] = 1;
 i15 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i15 | 0;
}

function _ex_later(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 L1 : do if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) HEAP32[i4 >> 2] = 1; else if (_isdigit(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) | 0) {
  HEAP32[i4 >> 2] = _getdigits(i7) | 0;
  switch (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) {
  case 115:
   {
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    HEAP32[i5 >> 2] = 1;
    break L1;
    break;
   }
  case 109:
   {
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    HEAP32[i5 >> 2] = 1;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) * 60;
    break L1;
    break;
   }
  case 104:
   {
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    HEAP32[i5 >> 2] = 1;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) * 3600;
    break L1;
    break;
   }
  case 100:
   {
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    HEAP32[i5 >> 2] = 1;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) * 86400;
    break L1;
    break;
   }
  case 102:
   {
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
    HEAP32[i6 >> 2] = 1;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) {
  _emsg2(92476, HEAP32[i1 >> 2] | 0) | 0;
  STACKTOP = i2;
  return;
 } else {
  i7 = HEAP32[i4 >> 2] | 0;
  _undo_time((HEAP32[i1 + 16 >> 2] | 0) == 126 ? 0 - i7 | 0 : i7, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0);
  STACKTOP = i2;
  return;
 }
}

function ___fdopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 24 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3;
 i8 = i3 + 56 | 0;
 if (!(_strchr(100617, HEAP8[i2 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i9 = 0;
 } else {
  i10 = _malloc(1156) | 0;
  if (!i10) i9 = 0; else {
   _memset(i10 | 0, 0, 124) | 0;
   if (!(_strchr(i2, 43) | 0)) HEAP32[i10 >> 2] = (HEAP8[i2 >> 0] | 0) == 114 ? 8 : 4;
   if (_strchr(i2, 101) | 0) {
    HEAP32[i7 >> 2] = i1;
    HEAP32[i7 + 4 >> 2] = 2;
    HEAP32[i7 + 8 >> 2] = 1;
    ___syscall221(221, i7 | 0) | 0;
   }
   if ((HEAP8[i2 >> 0] | 0) == 97) {
    HEAP32[i6 >> 2] = i1;
    HEAP32[i6 + 4 >> 2] = 3;
    i2 = ___syscall221(221, i6 | 0) | 0;
    if (!(i2 & 1024)) {
     HEAP32[i5 >> 2] = i1;
     HEAP32[i5 + 4 >> 2] = 4;
     HEAP32[i5 + 8 >> 2] = i2 | 1024;
     ___syscall221(221, i5 | 0) | 0;
    }
    i5 = HEAP32[i10 >> 2] | 128;
    HEAP32[i10 >> 2] = i5;
    i11 = i5;
   } else i11 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 + 60 >> 2] = i1;
   HEAP32[i10 + 44 >> 2] = i10 + 132;
   HEAP32[i10 + 48 >> 2] = 1024;
   i5 = i10 + 75 | 0;
   HEAP8[i5 >> 0] = -1;
   if (!(i11 & 8)) {
    HEAP32[i4 >> 2] = i1;
    HEAP32[i4 + 4 >> 2] = 21523;
    HEAP32[i4 + 8 >> 2] = i8;
    if (!(___syscall54(54, i4 | 0) | 0)) HEAP8[i5 >> 0] = 10;
   }
   HEAP32[i10 + 32 >> 2] = 9;
   HEAP32[i10 + 36 >> 2] = 1;
   HEAP32[i10 + 40 >> 2] = 2;
   HEAP32[i10 + 12 >> 2] = 1;
   if (!(HEAP32[27363] | 0)) HEAP32[i10 + 76 >> 2] = -1;
   ___ofl_add(i10) | 0;
   i9 = i10;
  }
 }
 STACKTOP = i3;
 return i9 | 0;
}

function _make_windows(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[26881] | 0;
 if (HEAP32[i6 >> 2] | 0) {
  i1 = HEAP32[27036] | 0;
  HEAP32[i7 >> 2] = ((HEAP32[i2 + 100 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 104 >> 2] | 0) - ((HEAP32[27037] | 0) - i1) | 0) / (i1 + 1 | 0) | 0;
 } else {
  i1 = HEAP32[27035] | 0;
  HEAP32[i7 >> 2] = ((HEAP32[i2 + 88 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 92 >> 2] | 0) - ((HEAP32[27034] | 0) - i1) | 0) / (i1 + 1 | 0) | 0;
 }
 if ((HEAP32[i7 >> 2] | 0) < 2) HEAP32[i7 >> 2] = 2;
 if ((HEAP32[i5 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 if ((HEAP32[i5 >> 2] | 0) > 1) _last_status(1);
 _block_autocmds();
 HEAP32[i8 >> 2] = (HEAP32[i5 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) <= 0) {
   i3 = 16;
   break;
  }
  i7 = HEAP32[26881] | 0;
  if (HEAP32[i6 >> 2] | 0) {
   if (!(_win_split((HEAP32[i7 + 100 >> 2] | 0) - (((HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) / ((HEAP32[i8 >> 2] | 0) + 1 | 0) | 0) - 1 | 0, 66) | 0)) {
    i3 = 16;
    break;
   }
  } else if (!(_win_split((HEAP32[i7 + 88 >> 2] | 0) - (((HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) / ((HEAP32[i8 >> 2] | 0) + 1 | 0) | 0) - 1 | 0, 64) | 0)) {
   i3 = 16;
   break;
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
 }
 if ((i3 | 0) == 16) {
  _unblock_autocmds();
  STACKTOP = i4;
  return (HEAP32[i5 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0;
 }
 return 0;
}

function _mf_do_open(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5;
 i9 = i5 + 108 | 0;
 i10 = i5 + 104 | 0;
 i11 = i5 + 100 | 0;
 i12 = i5 + 20 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i10 >> 2];
 _mf_set_ffname(HEAP32[i9 >> 2] | 0);
 if (HEAP32[i11 >> 2] & 64 | 0) if ((_lstat(HEAP32[HEAP32[i9 >> 2] >> 2] | 0, i5 + 24 | 0) | 0) >= 0) {
  HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = -1;
  _emsg(97231) | 0;
 } else i4 = 4; else i4 = 4;
 if ((i4 | 0) == 4) {
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 131072;
  i4 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  HEAP32[i8 >> 2] = 384;
  i11 = _open(i4, i10, i8) | 0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = i11;
 }
 i11 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0) >= 0) {
  HEAP32[i12 >> 2] = _fcntl(HEAP32[i11 + 8 >> 2] | 0, 1, i7) | 0;
  if ((HEAP32[i12 >> 2] | 0) >= 0) if (!(HEAP32[i12 >> 2] & 1)) {
   i7 = HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[i6 >> 2] = HEAP32[i12 >> 2] | 1;
   _fcntl(i7, 2, i6) | 0;
  }
  _mch_hide(HEAP32[HEAP32[i9 >> 2] >> 2] | 0);
  STACKTOP = i5;
  return;
 }
 if (HEAP32[i11 >> 2] | 0) {
  _vim_free(HEAP32[HEAP32[i9 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i9 >> 2] >> 2] = 0;
 }
 if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = i5;
 return;
}

function _ex_tabnext(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 switch (HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) {
 case 454:
 case 446:
  {
   _goto_tabpage(1);
   STACKTOP = i3;
   return;
  }
 case 448:
  {
   _goto_tabpage(9999);
   STACKTOP = i3;
   return;
  }
 case 453:
 case 452:
  {
   do if (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) if (HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0) {
    HEAP32[i6 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
    HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i5 >> 2] = _getdigits(i6) | 0;
    if ((HEAP32[i6 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) != 45) if (!((HEAP32[i5 >> 2] | 0) == 0 ? 1 : (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 0)) break;
    HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] = 92453;
    STACKTOP = i3;
    return;
   } else i2 = 10; else i2 = 10; while (0);
   do if ((i2 | 0) == 10) {
    if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0)) {
     HEAP32[i5 >> 2] = 1;
     break;
    }
    HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
    if ((HEAP32[i5 >> 2] | 0) < 1) {
     HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] = 92503;
     STACKTOP = i3;
     return;
    }
   } while (0);
   _goto_tabpage(0 - (HEAP32[i5 >> 2] | 0) | 0);
   STACKTOP = i3;
   return;
  }
 default:
  {
   HEAP32[i5 >> 2] = _get_tabpage_arg(HEAP32[i4 >> 2] | 0) | 0;
   if (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) {
    STACKTOP = i3;
    return;
   }
   _goto_tabpage(HEAP32[i5 >> 2] | 0);
   STACKTOP = i3;
   return;
  }
 }
}

function _report_term_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i3 + 72 | 0;
 i5 = i3 + 64 | 0;
 i6 = i3 + 56 | 0;
 i7 = i3 + 48 | 0;
 i8 = i3 + 40 | 0;
 i9 = i3 + 32 | 0;
 i10 = i3 + 24 | 0;
 i11 = i3 + 16 | 0;
 i12 = i3 + 8 | 0;
 i13 = i3;
 i14 = i3 + 84 | 0;
 i15 = i3 + 80 | 0;
 i16 = i3 + 76 | 0;
 HEAP32[i14 >> 2] = i1;
 HEAP32[i15 >> 2] = i2;
 i2 = HEAP32[10211] | 0;
 HEAP32[i13 >> 2] = 79006;
 _fprintf(i2, 97576, i13) | 0;
 if (HEAP32[i14 >> 2] | 0) {
  i13 = HEAP32[10211] | 0;
  HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
  _fprintf(i13, 97576, i12) | 0;
  i12 = HEAP32[10211] | 0;
  HEAP32[i11 >> 2] = 79006;
  _fprintf(i12, 97576, i11) | 0;
 }
 i11 = HEAP32[10211] | 0;
 HEAP32[i10 >> 2] = 79009;
 _fprintf(i11, 97576, i10) | 0;
 i10 = HEAP32[10211] | 0;
 HEAP32[i9 >> 2] = HEAP32[i15 >> 2];
 _fprintf(i10, 97576, i9) | 0;
 i9 = HEAP32[10211] | 0;
 HEAP32[i8 >> 2] = 79011;
 _fprintf(i9, 97576, i8) | 0;
 i8 = HEAP32[10211] | 0;
 HEAP32[i7 >> 2] = 79006;
 _fprintf(i8, 97576, i7) | 0;
 HEAP32[i16 >> 2] = 31156;
 while (1) {
  if (!(HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2] | 0)) break;
  if (!(HEAP32[HEAP32[i16 >> 2] >> 2] | 0)) {
   i7 = HEAP32[10211] | 0;
   HEAP32[i6 >> 2] = 79057;
   _fprintf(i7, 97576, i6) | 0;
   i7 = HEAP32[10211] | 0;
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i16 >> 2] | 0) + 4 >> 2];
   _fprintf(i7, 97576, i5) | 0;
   i7 = HEAP32[10211] | 0;
   HEAP32[i4 >> 2] = 79006;
   _fprintf(i7, 97576, i4) | 0;
  }
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 8;
 }
 STACKTOP = i3;
 return;
}

function _vim_regsub_multi(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i9 = i8 + 84 | 0;
 i10 = i8 + 80 | 0;
 i11 = i8 + 76 | 0;
 i12 = i8 + 72 | 0;
 i13 = i8 + 68 | 0;
 i14 = i8 + 64 | 0;
 i15 = i8 + 60 | 0;
 i16 = i8 + 56 | 0;
 i17 = i8 + 4 | 0;
 i18 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = i7;
 HEAP32[i18 >> 2] = HEAP32[26311];
 if (HEAP32[26311] | 0) {
  i19 = i17;
  i20 = 105248;
  i21 = i19 + 52 | 0;
  do {
   HEAP32[i19 >> 2] = HEAP32[i20 >> 2];
   i19 = i19 + 4 | 0;
   i20 = i20 + 4 | 0;
  } while ((i19 | 0) < (i21 | 0));
 }
 HEAP32[26311] = 1;
 HEAP32[26312] = 0;
 HEAP32[26313] = HEAP32[i9 >> 2];
 HEAP32[26319] = HEAP32[26773];
 HEAP32[26320] = HEAP32[i10 >> 2];
 HEAP32[26321] = (HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i10 >> 2] | 0);
 HEAP32[26322] = 0;
 HEAP32[i16 >> 2] = _vim_regsub_both(HEAP32[i11 >> 2] | 0, 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
 HEAP32[26311] = HEAP32[i18 >> 2];
 if (!(HEAP32[26311] | 0)) {
  i22 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i8;
  return i22 | 0;
 }
 i19 = 105248;
 i20 = i17;
 i21 = i19 + 52 | 0;
 do {
  HEAP32[i19 >> 2] = HEAP32[i20 >> 2];
  i19 = i19 + 4 | 0;
  i20 = i20 + 4 | 0;
 } while ((i19 | 0) < (i21 | 0));
 i22 = HEAP32[i16 >> 2] | 0;
 STACKTOP = i8;
 return i22 | 0;
}

function _get_visual_text(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 if ((HEAP32[10179] | 0) != 86) _unadjust_for_sel() | 0;
 if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  if (HEAP32[i7 >> 2] | 0) _clearopbeep(HEAP32[HEAP32[i7 >> 2] >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  i10 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i10 | 0;
 }
 do if ((HEAP32[10179] | 0) == 86) {
  i7 = _ml_get_curline() | 0;
  HEAP32[HEAP32[i8 >> 2] >> 2] = i7;
  i7 = _strlen(HEAP32[HEAP32[i8 >> 2] >> 2] | 0) | 0;
  HEAP32[HEAP32[i9 >> 2] >> 2] = i7;
 } else {
  i7 = (HEAP32[26881] | 0) + 24 | 0;
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != (HEAP32[27117] | 0)) if ((HEAP32[i7 >> 2] | 0) < (HEAP32[27117] | 0)) i4 = 12; else i4 = 13; else if ((HEAP32[i7 + 4 >> 2] | 0) < (HEAP32[27118] | 0)) i4 = 12; else i4 = 13;
  if ((i4 | 0) == 12) {
   i7 = _ml_get_pos((HEAP32[26881] | 0) + 24 | 0) | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i7;
   HEAP32[HEAP32[i9 >> 2] >> 2] = (HEAP32[27118] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) + 1;
   break;
  } else if ((i4 | 0) == 13) {
   i7 = _ml_get_pos(108468) | 0;
   HEAP32[HEAP32[i8 >> 2] >> 2] = i7;
   HEAP32[HEAP32[i9 >> 2] >> 2] = (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) - (HEAP32[27118] | 0) + 1;
   break;
  }
 } while (0);
 _reset_VIsual_and_resel();
 HEAP32[i6 >> 2] = 1;
 i10 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i10 | 0;
}

function _fnamecmp_ino(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 8304 | 0;
 i5 = i4 + 104 | 0;
 i6 = i4 + 100 | 0;
 i7 = i4 + 96 | 0;
 i8 = i4 + 92 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4 + 8 | 0;
 i12 = i4 + 4208 | 0;
 i13 = i4 + 112 | 0;
 i14 = i4 + 4 | 0;
 i15 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 if (!(_stat(HEAP32[i6 >> 2] | 0, i9) | 0)) HEAP32[i10 >> 2] = HEAP32[i9 + 72 >> 2];
 if (!(_stat(HEAP32[i7 >> 2] | 0, i9) | 0)) HEAP32[i11 >> 2] = HEAP32[i9 + 72 >> 2]; else HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 if ((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) != 0) {
  HEAP32[i5 >> 2] = (HEAP32[i10 >> 2] | 0) != (HEAP32[i11 >> 2] | 0) & 1;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 HEAP32[i14 >> 2] = _vim_FullName(HEAP32[i6 >> 2] | 0, i12, 4096, 1) | 0;
 HEAP32[i15 >> 2] = _vim_FullName(HEAP32[i7 >> 2] | 0, i13, 4096, 1) | 0;
 if ((HEAP32[i14 >> 2] | 0) == 1 & (HEAP32[i15 >> 2] | 0) == 1) {
  HEAP32[i5 >> 2] = (_strcmp(i12, i13) | 0) != 0 & 1;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 if ((HEAP32[i11 >> 2] | 0) == 0 & (HEAP32[i10 >> 2] | 0) == 0 & (HEAP32[i14 >> 2] | 0) == 0 & (HEAP32[i15 >> 2] | 0) == 0) {
  HEAP32[i5 >> 2] = (_strcmp(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) != 0 & 1;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 } else {
  HEAP32[i5 >> 2] = 1;
  i16 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i16 | 0;
 }
 return 0;
}

function _move_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[26773];
 HEAP32[i8 >> 2] = 1;
 HEAP32[26773] = HEAP32[i6 >> 2];
 HEAP32[i9 >> 2] = 1;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) > (HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) break;
  HEAP32[i10 >> 2] = _vim_strsave(_ml_get_buf(HEAP32[i5 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0) | 0;
  if (!(HEAP32[i10 >> 2] | 0)) {
   i3 = 5;
   break;
  }
  if (!(_ml_append((HEAP32[i9 >> 2] | 0) - 1 | 0, HEAP32[i10 >> 2] | 0, 0, 0) | 0)) {
   i3 = 5;
   break;
  }
  _vim_free(HEAP32[i10 >> 2] | 0);
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 5) {
  _vim_free(HEAP32[i10 >> 2] | 0);
  HEAP32[i8 >> 2] = 0;
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  i11 = HEAP32[i7 >> 2] | 0;
  HEAP32[26773] = i11;
  i12 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 HEAP32[26773] = HEAP32[i5 >> 2];
 HEAP32[i9 >> 2] = HEAP32[HEAP32[26773] >> 2];
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) <= 0) {
   i3 = 13;
   break;
  }
  if (!(_ml_delete(HEAP32[i9 >> 2] | 0, 0) | 0)) break;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
 }
 if ((i3 | 0) == 13) {
  i11 = HEAP32[i7 >> 2] | 0;
  HEAP32[26773] = i11;
  i12 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 HEAP32[i8 >> 2] = 0;
 i11 = HEAP32[i7 >> 2] | 0;
 HEAP32[26773] = i11;
 i12 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i4;
 return i12 | 0;
}

function _store_sb_text(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 20 | 0;
 i8 = i6 + 16 | 0;
 i9 = i6 + 12 | 0;
 i10 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 i12 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 if ((HEAP32[27232] | 0) == 1 | (HEAP32[27232] | 0) == 3) {
  _clear_sb_text((HEAP32[27232] | 0) == 1 & 1);
  HEAP32[27232] = 0;
 }
 if ((HEAP32[i8 >> 2] | 0) >>> 0 > (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) >>> 0) {
  HEAP32[i12 >> 2] = _alloc(24 + ((HEAP32[i8 >> 2] | 0) - (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) | 0) | 0;
  if (HEAP32[i12 >> 2] | 0) {
   HEAP8[(HEAP32[i12 >> 2] | 0) + 8 >> 0] = HEAP32[i11 >> 2];
   HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
   HEAP32[(HEAP32[i12 >> 2] | 0) + 16 >> 2] = HEAP32[i9 >> 2];
   i9 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
   _vim_strncpy((HEAP32[i12 >> 2] | 0) + 20 | 0, i9 | 0, (HEAP32[i8 >> 2] | 0) - i9 | 0);
   if (!(HEAP32[27231] | 0)) {
    HEAP32[27231] = HEAP32[i12 >> 2];
    HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = 0;
   } else {
    HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] = HEAP32[27231];
    HEAP32[HEAP32[27231] >> 2] = HEAP32[i12 >> 2];
    HEAP32[27231] = HEAP32[i12 >> 2];
   }
   HEAP32[HEAP32[i12 >> 2] >> 2] = 0;
  }
 } else if ((HEAP32[i11 >> 2] | 0) != 0 & (HEAP32[27231] | 0) != 0) HEAP8[(HEAP32[27231] | 0) + 8 >> 0] = 1;
 HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i8 >> 2];
 HEAP32[HEAP32[i10 >> 2] >> 2] = 0;
 STACKTOP = i6;
 return;
}

function _rename_buffer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i8 >> 2] = HEAP32[26773];
 _apply_autocmds(4, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if ((HEAP32[i8 >> 2] | 0) != (HEAP32[26773] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[26773] | 0) + 68 >> 2];
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[26773] | 0) + 72 >> 2];
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[26773] | 0) + 76 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 68 >> 2] = 0;
 HEAP32[(HEAP32[26773] | 0) + 72 >> 2] = 0;
 if (!(_setfname(HEAP32[26773] | 0, HEAP32[i4 >> 2] | 0, 0, 1) | 0)) {
  HEAP32[(HEAP32[26773] | 0) + 68 >> 2] = HEAP32[i5 >> 2];
  HEAP32[(HEAP32[26773] | 0) + 72 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i3 >> 2] = 0;
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 i4 = (HEAP32[26773] | 0) + 60 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 8;
 if (HEAP32[i7 >> 2] | 0) if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) {
  HEAP32[i8 >> 2] = _buflist_new(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 0) | 0;
  if (!((HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[27130] | 0) != 0)) HEAP32[(HEAP32[26881] | 0) + 180 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2];
 }
 _vim_free(HEAP32[i5 >> 2] | 0);
 _vim_free(HEAP32[i6 >> 2] | 0);
 _apply_autocmds(3, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[i3 >> 2] = 1;
 i9 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i9 | 0;
}

function _ex_resize(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[26881];
 L1 : do if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) > 0) {
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
  HEAP32[i6 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0)) break L1;
   i1 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
   HEAP32[i5 >> 2] = i1;
   if ((i1 | 0) <= 0) break L1;
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  }
 } while (0);
 HEAP32[26757] = 1;
 HEAP32[i5 >> 2] = _atol(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
 i1 = (HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0) == 45;
 if (HEAP32[27128] & 2 | 0) {
  if (i1) i2 = 9; else if ((HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0) == 43) i2 = 9; else if (!(HEAP32[i5 >> 2] | 0)) if (!(HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0)) HEAP32[i5 >> 2] = 9999;
  if ((i2 | 0) == 9) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0);
  _win_setwidth_win(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else {
  if (i1) i2 = 16; else if ((HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0) == 43) i2 = 16; else if (!(HEAP32[i5 >> 2] | 0)) if (!(HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0)) HEAP32[i5 >> 2] = 9999;
  if ((i2 | 0) == 16) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0);
  _win_setheight_win(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
}

function _expand_cmdline(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 28 | 0;
 i8 = i6 + 24 | 0;
 i9 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i11 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i14 >> 2] = 80;
 if ((HEAP32[HEAP32[i8 >> 2] >> 2] | 0) == -2) {
  _beep_flush();
  HEAP32[i7 >> 2] = -2;
  i15 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i15 | 0;
 }
 if (!(HEAP32[HEAP32[i8 >> 2] >> 2] | 0)) {
  HEAP32[i7 >> 2] = 0;
  i15 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i15 | 0;
 }
 i5 = HEAP32[i8 >> 2] | 0;
 HEAP32[i5 + 8 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) - (HEAP32[i5 + 4 >> 2] | 0);
 i5 = HEAP32[i8 >> 2] | 0;
 HEAP32[i13 >> 2] = _addstar(HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0, HEAP32[HEAP32[i8 >> 2] >> 2] | 0) | 0;
 if (!(HEAP32[i13 >> 2] | 0)) {
  HEAP32[i7 >> 2] = -2;
  i15 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i15 | 0;
 }
 if (HEAP32[27032] | 0) HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 256;
 if (!(_ExpandFromContext(HEAP32[i8 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0) | 0)) {
  HEAP32[HEAP32[i11 >> 2] >> 2] = 0;
  HEAP32[HEAP32[i12 >> 2] >> 2] = 0;
 }
 _vim_free(HEAP32[i13 >> 2] | 0);
 HEAP32[i7 >> 2] = -1;
 i15 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i15 | 0;
}

function _nv_colon(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26788] | 0) {
  _nv_operator(i1);
  STACKTOP = i2;
  return;
 }
 i6 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[HEAP32[i1 >> 2] >> 2] | 0) {
  HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 } else if (HEAP32[i6 + 24 >> 2] | 0) {
  _stuffcharReadbuff(46);
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) > 1) {
   _stuffReadbuff(61907);
   _stuffnumReadbuff((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) - 1 | 0);
  }
 }
 if (HEAP32[27161] | 0) _compute_cmdrow();
 HEAP32[i4 >> 2] = HEAP32[26883];
 HEAP32[i5 >> 2] = _do_cmdline(0, 6, 0, HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0 ? 32 : 0) | 0;
 do if ((HEAP32[26883] | 0) != (HEAP32[i4 >> 2] | 0)) if (HEAP32[26883] | 0) {
  HEAP32[26806] = 105;
  break;
 } else {
  HEAP32[26806] = 0;
  break;
 } while (0);
 i4 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  _clearop(i4);
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 28 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
  i4 = HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 28 + 4 >> 2] | 0;
  i5 = (i4 | 0) > (_strlen(_ml_get(HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 28 >> 2] | 0) | 0) | 0);
  if (!(i5 | (HEAP32[26880] | 0) != 0)) {
   STACKTOP = i2;
   return;
  }
 }
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _get_file_in_dir(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = _gettail(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 46) if (!(HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0)) {
  HEAP32[i8 >> 2] = _vim_strsave(HEAP32[i4 >> 2] | 0) | 0;
  i10 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 46) if (_vim_ispathsep(HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) | 0) {
  if ((HEAP32[i7 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) {
   HEAP32[i8 >> 2] = _concat_fnames((HEAP32[i5 >> 2] | 0) + 2 | 0, HEAP32[i7 >> 2] | 0, 1) | 0;
   i10 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i3;
   return i10 | 0;
  }
  HEAP32[i9 >> 2] = HEAPU8[HEAP32[i7 >> 2] >> 0];
  HEAP8[HEAP32[i7 >> 2] >> 0] = 0;
  HEAP32[i6 >> 2] = _concat_fnames(HEAP32[i4 >> 2] | 0, (HEAP32[i5 >> 2] | 0) + 2 | 0, 1) | 0;
  HEAP8[HEAP32[i7 >> 2] >> 0] = HEAP32[i9 >> 2];
  if (!(HEAP32[i6 >> 2] | 0)) {
   HEAP32[i8 >> 2] = 0;
   i10 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i3;
   return i10 | 0;
  } else {
   HEAP32[i8 >> 2] = _concat_fnames(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1) | 0;
   _vim_free(HEAP32[i6 >> 2] | 0);
   i10 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i3;
   return i10 | 0;
  }
 }
 HEAP32[i8 >> 2] = _concat_fnames(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1) | 0;
 i10 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _check_arg_idx(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[HEAP32[(HEAP32[i3 >> 2] | 0) + 184 >> 2] >> 2] | 0) > 1) if (!(_editing_arg_idx(HEAP32[i3 >> 2] | 0) | 0)) {
  HEAP32[(HEAP32[i3 >> 2] | 0) + 192 >> 2] = 1;
  if (!((HEAP32[26776] | 0) == 0 ? (HEAP32[(HEAP32[i3 >> 2] | 0) + 188 >> 2] | 0) != ((HEAP32[HEAP32[(HEAP32[i3 >> 2] | 0) + 184 >> 2] >> 2] | 0) - 1 | 0) : 0)) {
   STACKTOP = i2;
   return;
  }
  if (!((HEAP32[26868] | 0) > 0 ? (HEAP32[(HEAP32[i3 >> 2] | 0) + 184 >> 2] | 0) == 107472 : 0)) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 188 >> 2] | 0) >= (HEAP32[26868] | 0)) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) + 92 >> 2] | 0) != (HEAP32[(HEAP32[26872] | 0) + ((HEAP32[26868] | 0) - 1 << 3) + 4 >> 2] | 0)) {
   if (!(HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) + 68 >> 2] | 0)) {
    STACKTOP = i2;
    return;
   }
   i1 = _alist_name((HEAP32[26872] | 0) + ((HEAP32[26868] | 0) - 1 << 3) | 0) | 0;
   if (!((_fullpathcmp(i1, HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) + 68 >> 2] | 0, 1) | 0) & 1)) {
    STACKTOP = i2;
    return;
   }
  }
  HEAP32[26776] = 1;
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 192 >> 2] = 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 188 >> 2] | 0) != ((HEAP32[HEAP32[(HEAP32[i3 >> 2] | 0) + 184 >> 2] >> 2] | 0) - 1 | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 184 >> 2] | 0) != 107472) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26776] = 1;
 STACKTOP = i2;
 return;
}

function _addfile(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i4 + 92 | 0;
 i6 = i4 + 88 | 0;
 i7 = i4 + 84 | 0;
 i8 = i4 + 80 | 0;
 i9 = i4 + 76 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 do if (!(HEAP32[i7 >> 2] & 4)) {
  i3 = HEAP32[i6 >> 2] | 0;
  if (HEAP32[i7 >> 2] & 4096 | 0) {
   if ((_lstat(i3, i10) | 0) >= 0) break;
   STACKTOP = i4;
   return;
  } else {
   if ((_mch_getperm(i3) | 0) >= 0) break;
   STACKTOP = i4;
   return;
  }
 } while (0);
 HEAP32[i9 >> 2] = _mch_isdir(HEAP32[i6 >> 2] | 0) | 0;
 if (HEAP32[i9 >> 2] | 0) if (!(HEAP32[i7 >> 2] & 1)) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[i9 >> 2] | 0)) if (!(HEAP32[i7 >> 2] & 2)) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[i9 >> 2] | 0)) if (HEAP32[i7 >> 2] & 64 | 0) if (!(_mch_can_exe(HEAP32[i6 >> 2] | 0, 0, ((HEAP32[i7 >> 2] & 8192 | 0) != 0 ^ 1) & 1) | 0)) {
  STACKTOP = i4;
  return;
 }
 if (!(_ga_grow(HEAP32[i5 >> 2] | 0, 1) | 0)) {
  STACKTOP = i4;
  return;
 }
 i10 = (_strlen(HEAP32[i6 >> 2] | 0) | 0) + 1 | 0;
 HEAP32[i8 >> 2] = _alloc(i10 + (HEAP32[i9 >> 2] | 0) | 0) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 _strcpy(HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 if (HEAP32[i9 >> 2] | 0) if (HEAP32[i7 >> 2] & 8 | 0) _add_pathsep(HEAP32[i8 >> 2] | 0);
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i8 + 16 >> 2] | 0;
 i9 = i8 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = i8 + 1;
 HEAP32[i5 + (i8 << 2) >> 2] = i7;
 STACKTOP = i4;
 return;
}

function _nv_percent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0)) {
  HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 16 >> 2] = 1;
  i5 = _findmatch(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 0) | 0;
  HEAP32[i4 >> 2] = i5;
  if (!i5) {
   _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
   STACKTOP = i2;
   return;
  } else {
   _setpcmark();
   i5 = (HEAP32[26881] | 0) + 24 | 0;
   i6 = HEAP32[i4 >> 2] | 0;
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
   _adjust_for_sel(HEAP32[i3 >> 2] | 0);
   STACKTOP = i2;
   return;
  }
 }
 i6 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
 if ((HEAP32[i1 + 24 >> 2] | 0) > 100) {
  _clearopbeep(i6);
  STACKTOP = i2;
  return;
 }
 HEAP32[i6 + 8 >> 2] = 1;
 _setpcmark();
 i6 = HEAP32[HEAP32[26773] >> 2] | 0;
 if ((HEAP32[HEAP32[26773] >> 2] | 0) > 1e6) {
  i1 = Math_imul((i6 + 99 | 0) / 100 | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) | 0;
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i1;
 } else {
  i1 = ((Math_imul(i6, HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) | 0) + 99 | 0) / 100 | 0;
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i1;
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
 _beginline(6);
 STACKTOP = i2;
 return;
}

function _do_shell(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(_check_restricted() | 0)) if (!(_check_secure() | 0)) {
  _msg_putchar(13);
  if (!(HEAP32[26744] | 0)) _stoptermcap();
  _msg_putchar(10);
  L7 : do if ((((HEAP32[27025] | 0) == 0 | (HEAP32[26744] | 0) != 0) ^ 1) & (HEAP32[26809] | 0) == 0) {
   HEAP32[i6 >> 2] = HEAP32[26771];
   while (1) {
    if (!(HEAP32[i6 >> 2] | 0)) break L7;
    if (_bufIsChangedNotTerm(HEAP32[i6 >> 2] | 0) | 0) break;
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2];
   }
   _msg_puts(42946);
  } while (0);
  if (!(_swapping_screen() | 0)) _windgoto(HEAP32[26877] | 0, HEAP32[27043] | 0);
  _cursor_on();
  _call_shell(HEAP32[i4 >> 2] | 0, 4 | HEAP32[i5 >> 2]) | 0;
  HEAP32[26738] = 0;
  HEAP32[26737] = 1;
  if (!(_swapping_screen() | 0)) {
   HEAP32[26877] = (HEAP32[10173] | 0) - 1;
   HEAP32[27043] = 0;
  }
  if (HEAP32[26744] | 0) {
   if (!(HEAP32[26809] | 0)) _redraw_later_clear();
  } else {
   if (!(HEAP32[i4 >> 2] | 0)) {
    if (!(HEAP32[26809] | 0)) _redraw_later_clear();
    HEAP32[26721] = 0;
   } else {
    HEAP32[i7 >> 2] = HEAP32[26720];
    if (_swapping_screen() | 0) HEAP32[26720] = 0;
    _wait_return((HEAP32[26809] | 0) == 0 & 1);
    HEAP32[26720] = HEAP32[i7 >> 2];
   }
   _starttermcap();
  }
  _fflush(HEAP32[10211] | 0) | 0;
  _apply_autocmds(68, 0, 0, 0, HEAP32[26773] | 0) | 0;
  STACKTOP = i3;
  return;
 }
 _msg_end() | 0;
 STACKTOP = i3;
 return;
}

function _ml_sync_all(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i4 + 84 | 0;
 i6 = i4 + 80 | 0;
 i7 = i4 + 76 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) {
   i3 = 16;
   break;
  }
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) if (HEAP32[HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] >> 2] | 0) {
   _ml_flush_line(HEAP32[i7 >> 2] | 0);
   _ml_find_line(HEAP32[i7 >> 2] | 0, 0, 2) | 0;
   i2 = (_bufIsChanged(HEAP32[i7 >> 2] | 0) | 0) != 0;
   do if (i2 & (HEAP32[i5 >> 2] | 0) != 0) if (_mf_need_trans(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0) {
    if ((_stat(HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0, i8) | 0) != -1) if ((HEAP32[i8 + 56 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 176 >> 2] | 0)) if ((HEAP32[i8 + 36 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 180 >> 2] | 0)) break;
    _ml_preserve(HEAP32[i7 >> 2] | 0, 0);
    HEAP32[26738] = 0;
    HEAP32[26737] = 1;
   } while (0);
   if (HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 596 >> 2] | 0) {
    i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0 ? 2 : 0;
    i9 = (_bufIsChanged(HEAP32[i7 >> 2] | 0) | 0) != 0;
    _mf_sync(i2, i1 | (i9 ? 4 : 0)) | 0;
    if (HEAP32[i6 >> 2] | 0) if (_ui_char_avail() | 0) {
     i3 = 16;
     break;
    }
   }
  }
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2];
 }
 if ((i3 | 0) == 16) {
  STACKTOP = i4;
  return;
 }
}

function _msg_puts_printf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 28 | 0;
 i11 = i4 + 12 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= 0) if (((HEAP32[i9 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0) >= (HEAP32[i8 >> 2] | 0)) {
   i3 = 16;
   break;
  }
  if (!(HEAPU8[HEAP32[i9 >> 2] >> 0] | 0)) {
   i3 = 16;
   break;
  }
  do if (!((HEAP32[26787] | 0) != 0 & (HEAP32[26888] | 0) == 0)) {
   HEAP32[i11 >> 2] = i10;
   if (!(HEAP32[26715] | 0 ? 1 : (HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 10)) {
    i2 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = 13;
   }
   i2 = HEAP8[HEAP32[i9 >> 2] >> 0] | 0;
   i1 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i2;
   HEAP8[HEAP32[i11 >> 2] >> 0] = 0;
   if (HEAP32[26715] | 0) {
    HEAP32[i6 >> 2] = i10;
    _printf(97576, i6) | 0;
    break;
   } else {
    i2 = HEAP32[10211] | 0;
    HEAP32[i5 >> 2] = i10;
    _fprintf(i2, 97576, i5) | 0;
    break;
   }
  } while (0);
  if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 13) i3 = 13; else if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 10) i3 = 13; else HEAP32[27043] = (HEAP32[27043] | 0) + 1;
  if ((i3 | 0) == 13) {
   i3 = 0;
   HEAP32[27043] = 0;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 16) {
  HEAP32[26711] = 1;
  STACKTOP = i4;
  return;
 }
}

function _buf_contents_changed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i3 = i2 + 152 | 0;
 i4 = i2 + 148 | 0;
 i5 = i2 + 144 | 0;
 i6 = i2 + 140 | 0;
 i7 = i2 + 136 | 0;
 i8 = i2 + 104 | 0;
 i9 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i5 >> 2] = _buflist_new(0, 0, 1, 4) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 1;
  i10 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 i1 = (_prep_exarg(i9, HEAP32[i4 >> 2] | 0) | 0) == 0;
 i11 = HEAP32[i5 >> 2] | 0;
 if (i1) {
  _wipe_buffer(i11, 0);
  HEAP32[i3 >> 2] = 1;
  i10 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 _aucmd_prepbuf(i8, i11);
 L9 : do if ((_ml_open(HEAP32[26773] | 0) | 0) == 1) if ((_readfile(HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, 0, 0, 2147483647, i9, 17) | 0) == 1) if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i7 >> 2] = 1;
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) break L9;
   i11 = _ml_get_buf(HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
   if (_strcmp(i11, _ml_get(HEAP32[i7 >> 2] | 0) | 0) | 0) break;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = 1;
 } while (0);
 _vim_free(HEAP32[i9 + 8 >> 2] | 0);
 _aucmd_restbuf(i8);
 if ((HEAP32[26773] | 0) != (HEAP32[i5 >> 2] | 0)) _wipe_buffer(HEAP32[i5 >> 2] | 0, 0);
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 i10 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i10 | 0;
}

function _vim_regcomp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
 HEAP32[26407] = HEAP32[26966];
 do if (!(_strncmp(HEAP32[i7 >> 2] | 0, 73992, 4) | 0)) {
  HEAP32[i8 >> 2] = (HEAPU8[(HEAP32[i7 >> 2] | 0) + 4 >> 0] | 0) - 48;
  if ((HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[i8 >> 2] | 0) == 1 | (HEAP32[i8 >> 2] | 0) == 2) {
   HEAP32[26407] = (HEAPU8[(HEAP32[i7 >> 2] | 0) + 4 >> 0] | 0) - 48;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 5;
   break;
  } else {
   _emsg(73997) | 0;
   HEAP32[26407] = 0;
   break;
  }
 } while (0);
 HEAP32[7488] = HEAP32[i7 >> 2];
 HEAP32[7456] = HEAP32[i7 >> 2];
 if ((HEAP32[26407] | 0) != 1) HEAP32[i6 >> 2] = FUNCTION_TABLE_iii[HEAP32[7452] & 15](HEAP32[i7 >> 2] | 0, (HEAP32[i5 >> 2] | 0) + ((HEAP32[26407] | 0) == 0 ? 8 : 0) | 0) | 0; else HEAP32[i6 >> 2] = FUNCTION_TABLE_iii[HEAP32[7484] & 15](HEAP32[i7 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 if ((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[26407] | 0) == 0) {
  HEAP32[26407] = 1;
  HEAP32[i6 >> 2] = FUNCTION_TABLE_iii[HEAP32[7484] & 15](HEAP32[i7 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 }
 if (!(HEAP32[i6 >> 2] | 0)) {
  i9 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = HEAP32[26407];
 HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] = HEAP32[i5 >> 2];
 i9 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _nv_cursormark(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 8 | 0;
 i7 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 i3 = (_check_mark(HEAP32[i8 >> 2] | 0) | 0) == 0;
 i2 = HEAP32[i6 >> 2] | 0;
 do if (i3) _clearop(HEAP32[i2 >> 2] | 0); else {
  if ((HEAP32[i2 + 8 >> 2] | 0) == 39) i4 = 7; else if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) == 96) i4 = 7; else if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) == 91) i4 = 7; else if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) == 93) i4 = 7;
  if ((i4 | 0) == 7) _setpcmark();
  i1 = (HEAP32[26881] | 0) + 24 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  if (HEAP32[i7 >> 2] | 0) {
   _beginline(5);
   break;
  } else {
   _check_cursor();
   break;
  }
 } while (0);
 HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 8 >> 2] = HEAP32[i7 >> 2] | 0 ? 1 : 0;
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != 96) {
  i10 = HEAP32[i6 >> 2] | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i12 = i11 + 20 | 0;
  HEAP32[i12 >> 2] = 0;
  i13 = HEAP32[26881] | 0;
  i14 = i13 + 36 | 0;
  HEAP32[i14 >> 2] = 1;
  STACKTOP = i5;
  return;
 }
 HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 16 >> 2] = 1;
 i10 = HEAP32[i6 >> 2] | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 i12 = i11 + 20 | 0;
 HEAP32[i12 >> 2] = 0;
 i13 = HEAP32[26881] | 0;
 i14 = i13 + 36 | 0;
 HEAP32[i14 >> 2] = 1;
 STACKTOP = i5;
 return;
}

function _gui_do_one_color(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = 0;
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 64 >> 2] | 0) {
  i3 = HEAP32[i5 >> 2] | 0;
  _hl_do_font(i3 | 0, HEAP32[(HEAP32[26490] | 0) + ((i3 | 0) * 96 | 0) + 64 >> 2] | 0, 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1);
  HEAP32[i8 >> 2] = 1;
 }
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 76 >> 2] | 0) {
  i7 = _color_name2handle(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 76 >> 2] | 0) | 0;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 48 >> 2] = i7;
  HEAP32[i8 >> 2] = 1;
 }
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 80 >> 2] | 0) {
  i7 = _color_name2handle(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 80 >> 2] | 0) | 0;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 52 >> 2] = i7;
  HEAP32[i8 >> 2] = 1;
 }
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 84 >> 2] | 0) {
  i7 = _color_name2handle(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 84 >> 2] | 0) | 0;
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 56 >> 2] = i7;
  HEAP32[i8 >> 2] = 1;
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 _set_hl_attr(HEAP32[i5 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _gui_wait_for_chars(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 i9 = i3 + 24 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 _gui_mch_update();
 if (_input_available() | 0) {
  HEAP32[i4 >> 2] = 1;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 _gui_mch_flush();
 if ((HEAP32[i5 >> 2] | 0) > 0) {
  _gui_mch_start_blink();
  HEAP32[i7 >> 2] = _gui_wait_for_chars_or_timer(HEAP32[i5 >> 2] | 0) | 0;
  _gui_mch_stop_blink(1);
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 _gettimeofday(i8 | 0, 0) | 0;
 _gui_mch_start_blink();
 HEAP32[i7 >> 2] = 0;
 if ((_gui_wait_for_chars_or_timer(HEAP32[27022] | 0) | 0) == 1) HEAP32[i7 >> 2] = 1; else if (_trigger_cursorhold() | 0) {
  i5 = _elapsed(i8) | 0;
  if ((i5 | 0) >= (HEAP32[27022] | 0)) if ((HEAP32[26825] | 0) == (HEAP32[i6 >> 2] | 0)) {
   HEAP8[i9 >> 0] = -101;
   HEAP8[i9 + 1 >> 0] = -3;
   HEAP8[i9 + 2 >> 0] = 96;
   _add_to_input_buf(i9, 3);
   HEAP32[i7 >> 2] = 1;
  }
 }
 if (!(HEAP32[i7 >> 2] | 0)) if ((HEAP32[26825] | 0) == (HEAP32[i6 >> 2] | 0)) {
  _before_blocking();
  HEAP32[i7 >> 2] = _gui_wait_for_chars_or_timer(-1) | 0;
 }
 _gui_mch_stop_blink(1);
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _append_arg_number(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 20 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 8 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 if ((HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) <= 1) {
  HEAP32[i7 >> 2] = 0;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 i4 = HEAP32[i9 >> 2] | 0;
 HEAP32[i12 >> 2] = i4 + (_strlen(HEAP32[i9 >> 2] | 0) | 0);
 if (((HEAP32[i12 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) + 35 | 0) >= (HEAP32[i10 >> 2] | 0)) {
  HEAP32[i7 >> 2] = 0;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 i4 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = i4 + 1;
 HEAP8[i4 >> 0] = 32;
 i4 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = i4 + 1;
 HEAP8[i4 >> 0] = 40;
 if (HEAP32[i11 >> 2] | 0) {
  _strcpy(HEAP32[i12 >> 2] | 0, 42657) | 0;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 5;
 }
 i11 = HEAP32[i12 >> 2] | 0;
 i12 = i11 | 0;
 i4 = (HEAP32[i10 >> 2] | 0) - (i11 - (HEAP32[i9 >> 2] | 0)) | 0;
 i9 = HEAP32[(HEAP32[i8 >> 2] | 0) + 192 >> 2] | 0 ? 42663 : 42675;
 i11 = HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0;
 HEAP32[i6 >> 2] = (HEAP32[(HEAP32[i8 >> 2] | 0) + 188 >> 2] | 0) + 1;
 HEAP32[i6 + 4 >> 2] = i11;
 _vim_snprintf(i12, i4, i9, i6) | 0;
 HEAP32[i7 >> 2] = 1;
 i13 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i5;
 return i13 | 0;
}

function _tabpage_move(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 1;
 if (!(HEAP32[HEAP32[26884] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) break;
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[i3 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 }
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26886] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) > 0) if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == (HEAP32[26886] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 do if ((HEAP32[26886] | 0) == (HEAP32[26884] | 0)) HEAP32[26884] = HEAP32[HEAP32[26886] >> 2]; else {
  HEAP32[i5 >> 2] = HEAP32[26884];
  while (1) {
   if (!(HEAP32[i5 >> 2] | 0)) break;
   if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == (HEAP32[26886] | 0)) break;
   HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  }
  if (!(HEAP32[i5 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  } else {
   HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[HEAP32[26886] >> 2];
   break;
  }
 } while (0);
 if ((HEAP32[i3 >> 2] | 0) <= 0) {
  HEAP32[HEAP32[26886] >> 2] = HEAP32[26884];
  HEAP32[26884] = HEAP32[26886];
 } else {
  HEAP32[HEAP32[26886] >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
  HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[26886];
 }
 HEAP32[26770] = 1;
 STACKTOP = i2;
 return;
}

function _has_autocmd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i12 >> 2] = _gettail(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i11 >> 2] = _FullName_save(HEAP32[i8 >> 2] | 0, 0) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i14 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 HEAP32[i10 >> 2] = HEAP32[101068 + (HEAP32[i7 >> 2] << 2) >> 2];
 L5 : while (1) {
  if (!(HEAP32[i10 >> 2] | 0)) break;
  do if (HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0) if (HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] | 0) {
   if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0)) if (_match_file_pat(0, (HEAP32[i10 >> 2] | 0) + 8 | 0, HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP8[(HEAP32[i10 >> 2] | 0) + 28 >> 0] | 0) | 0) {
    i4 = 11;
    break L5;
   } else break;
   if (HEAP32[i9 >> 2] | 0) if ((HEAP32[(HEAP32[i10 >> 2] | 0) + 24 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 92 >> 2] | 0)) {
    i4 = 11;
    break L5;
   }
  } while (0);
  HEAP32[i10 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
 }
 if ((i4 | 0) == 11) HEAP32[i13 >> 2] = 1;
 _vim_free(HEAP32[i11 >> 2] | 0);
 HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
 i14 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i14 | 0;
}

function _comp_botline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 _check_cursor_moved(HEAP32[i4 >> 2] | 0);
 i1 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 108 >> 2] & 16 | 0) {
  HEAP32[i6 >> 2] = HEAP32[i1 + 24 >> 2];
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 128 >> 2];
 } else {
  HEAP32[i6 >> 2] = HEAP32[i1 + 68 >> 2];
  HEAP32[i7 >> 2] = 0;
 }
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) > (HEAP32[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] >> 2] | 0)) {
   i2 = 10;
   break;
  }
  HEAP32[i5 >> 2] = _plines_win(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 1) | 0;
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0)) {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 128 >> 2] = HEAP32[i7 >> 2];
   HEAP32[(HEAP32[i4 >> 2] | 0) + 124 >> 2] = HEAP32[i5 >> 2];
   _redraw_for_cursorline(HEAP32[i4 >> 2] | 0);
   i1 = (HEAP32[i4 >> 2] | 0) + 108 | 0;
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 24;
  }
  if (((HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) > (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0)) {
   i2 = 10;
   break;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 10) {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 144 >> 2] = HEAP32[i6 >> 2];
  i6 = (HEAP32[i4 >> 2] | 0) + 108 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 96;
  _set_empty_rows(HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
}

function _skip_anyof(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 94) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 93) i2 = 5; else if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 45) i2 = 5;
 if ((i2 | 0) == 5) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 while (1) {
  if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) i5 = (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 93; else i5 = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  if (!i5) break;
  i2 = HEAP32[i4 >> 2] | 0;
  L15 : do if ((HEAPU8[i6 >> 0] | 0 | 0) == 45) {
   HEAP32[i4 >> 2] = i2 + 1;
   if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 93) if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  } else {
   do if (!((HEAPU8[i2 >> 0] | 0 | 0) != 92 | (HEAP32[26308] | 0) != 0)) {
    if (!(_vim_strchr(72545, HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) | 0)) {
     if (HEAP32[26309] | 0) break;
     if (!(_vim_strchr(72551, HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0) | 0)) break;
    }
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 2;
    break L15;
   } while (0);
   if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 91) {
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
    break;
   }
   if ((_get_char_class(i4) | 0) == 99) if (!(_get_equi_class(i4) | 0)) if (!(_get_coll_element(i4) | 0)) if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  } while (0);
 }
 STACKTOP = i3;
 return i6 | 0;
}

function _ex_cd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 if (_allbuf_locked() | 0) {
  STACKTOP = i3;
  return;
 }
 if (_vim_strchr(HEAP32[26904] | 0, 46) | 0) if (_curbufIsChanged() | 0) if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0)) {
  _emsg(50994) | 0;
  STACKTOP = i3;
  return;
 }
 do if (!(_strcmp(HEAP32[i5 >> 2] | 0, 81242) | 0)) {
  if (HEAP32[25234] | 0) {
   HEAP32[i5 >> 2] = HEAP32[25234];
   break;
  }
  _emsg(51064) | 0;
  STACKTOP = i3;
  return;
 } while (0);
 HEAP32[i6 >> 2] = HEAP32[25234];
 if ((_mch_dirname(HEAP32[26885] | 0, 4096) | 0) == 1) HEAP32[25234] = _vim_strsave(HEAP32[26885] | 0) | 0; else HEAP32[25234] = 0;
 if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
  _expand_env(55861, HEAP32[26885] | 0, 4096);
  HEAP32[i5 >> 2] = HEAP32[26885];
 }
 if (!(HEAP32[i5 >> 2] | 0)) i2 = 17; else if (_vim_chdir(HEAP32[i5 >> 2] | 0) | 0) i2 = 17; else {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 212) i8 = 1; else i8 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 213;
  HEAP32[i7 >> 2] = i8 & 1;
  _post_chdir(HEAP32[i7 >> 2] | 0);
  if ((HEAP32[27161] | 0) != 0 | (HEAP32[26888] | 0) >= 5) _ex_pwd(HEAP32[i4 >> 2] | 0);
  _apply_autocmds(32, HEAP32[i7 >> 2] | 0 ? 94846 : 47702, HEAP32[i5 >> 2] | 0, 0, HEAP32[26773] | 0) | 0;
 }
 if ((i2 | 0) == 17) _emsg(92330) | 0;
 _vim_free(HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _event_name2nr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 32) break;
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 9) break;
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 44) break;
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 124) break;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if (!(HEAP32[10084 + (HEAP32[i8 >> 2] << 3) >> 2] | 0)) break;
  HEAP32[i9 >> 2] = _strlen(HEAP32[10084 + (HEAP32[i8 >> 2] << 3) >> 2] | 0) | 0;
  if ((HEAP32[i9 >> 2] | 0) == ((HEAP32[i7 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0)) if (!(_strncasecmp(HEAP32[10084 + (HEAP32[i8 >> 2] << 3) >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0)) break;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 44) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i7 >> 2];
 if (!(HEAP32[10084 + (HEAP32[i8 >> 2] << 3) >> 2] | 0)) {
  HEAP32[i4 >> 2] = 96;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else {
  HEAP32[i4 >> 2] = HEAP32[10084 + (HEAP32[i8 >> 2] << 3) + 4 >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 return 0;
}

function ___mo_lookup(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = (HEAP32[i1 >> 2] | 0) + 1794895138 | 0;
 i5 = _swapc(HEAP32[i1 + 8 >> 2] | 0, i4) | 0;
 i6 = _swapc(HEAP32[i1 + 12 >> 2] | 0, i4) | 0;
 i7 = _swapc(HEAP32[i1 + 16 >> 2] | 0, i4) | 0;
 L1 : do if (i5 >>> 0 < i2 >>> 2 >>> 0) {
  i8 = i2 - (i5 << 2) | 0;
  if (i6 >>> 0 < i8 >>> 0 & i7 >>> 0 < i8 >>> 0) if (!((i7 | i6) & 3)) {
   i8 = i6 >>> 2;
   i9 = i7 >>> 2;
   i10 = 0;
   i11 = i5;
   while (1) {
    i12 = i11 >>> 1;
    i13 = i10 + i12 | 0;
    i14 = i13 << 1;
    i15 = i14 + i8 | 0;
    i16 = _swapc(HEAP32[i1 + (i15 << 2) >> 2] | 0, i4) | 0;
    i17 = _swapc(HEAP32[i1 + (i15 + 1 << 2) >> 2] | 0, i4) | 0;
    if (!(i17 >>> 0 < i2 >>> 0 & i16 >>> 0 < (i2 - i17 | 0) >>> 0)) {
     i18 = 0;
     break L1;
    }
    if (HEAP8[i1 + (i17 + i16) >> 0] | 0) {
     i18 = 0;
     break L1;
    }
    i16 = _strcmp(i3, i1 + i17 | 0) | 0;
    if (!i16) break;
    i17 = (i16 | 0) < 0;
    if ((i11 | 0) == 1) {
     i18 = 0;
     break L1;
    }
    i10 = i17 ? i10 : i13;
    i11 = i17 ? i12 : i11 - i12 | 0;
   }
   i11 = i14 + i9 | 0;
   i10 = _swapc(HEAP32[i1 + (i11 << 2) >> 2] | 0, i4) | 0;
   i8 = _swapc(HEAP32[i1 + (i11 + 1 << 2) >> 2] | 0, i4) | 0;
   if (i8 >>> 0 < i2 >>> 0 & i10 >>> 0 < (i2 - i8 | 0) >>> 0) i18 = (HEAP8[i1 + (i8 + i10) >> 0] | 0) == 0 ? i1 + i8 | 0 : 0; else i18 = 0;
  } else i18 = 0; else i18 = 0;
 } else i18 = 0; while (0);
 return i18 | 0;
}

function _vfprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i5 = i4 + 120 | 0;
 i6 = i4 + 80 | 0;
 i7 = i4;
 i8 = i4 + 136 | 0;
 i9 = i6;
 i10 = i9 + 40 | 0;
 do {
  HEAP32[i9 >> 2] = 0;
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) < (i10 | 0));
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 if ((_printf_core(0, i2, i5, i7, i6) | 0) < 0) i11 = -1; else {
  if ((HEAP32[i1 + 76 >> 2] | 0) > -1) i12 = ___lockfile(i1) | 0; else i12 = 0;
  i3 = HEAP32[i1 >> 2] | 0;
  i9 = i3 & 32;
  if ((HEAP8[i1 + 74 >> 0] | 0) < 1) HEAP32[i1 >> 2] = i3 & -33;
  i3 = i1 + 48 | 0;
  if (!(HEAP32[i3 >> 2] | 0)) {
   i10 = i1 + 44 | 0;
   i13 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i8;
   i14 = i1 + 28 | 0;
   HEAP32[i14 >> 2] = i8;
   i15 = i1 + 20 | 0;
   HEAP32[i15 >> 2] = i8;
   HEAP32[i3 >> 2] = 80;
   i16 = i1 + 16 | 0;
   HEAP32[i16 >> 2] = i8 + 80;
   i8 = _printf_core(i1, i2, i5, i7, i6) | 0;
   if (!i13) i17 = i8; else {
    FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 15](i1, 0, 0) | 0;
    i18 = (HEAP32[i15 >> 2] | 0) == 0 ? -1 : i8;
    HEAP32[i10 >> 2] = i13;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i16 >> 2] = 0;
    HEAP32[i14 >> 2] = 0;
    HEAP32[i15 >> 2] = 0;
    i17 = i18;
   }
  } else i17 = _printf_core(i1, i2, i5, i7, i6) | 0;
  i6 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i6 | i9;
  if (i12 | 0) ___unlockfile(i1);
  i11 = (i6 & 32 | 0) == 0 ? i17 : -1;
 }
 STACKTOP = i4;
 return i11 | 0;
}

function _u_find_first_changed() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[26773] | 0) + 504 >> 2];
 if ((HEAP32[i3 >> 2] | 0) == 0 ? 1 : (HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = 1;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) i6 = (HEAP32[i5 >> 2] | 0) <= (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0); else i6 = 0;
  i7 = HEAP32[26773] | 0;
  if (!i6) break;
  i8 = _ml_get_buf(i7, HEAP32[i5 >> 2] | 0, 0) | 0;
  if (_strcmp(i8, HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) - 1 << 2) >> 2] | 0) | 0) {
   i1 = 9;
   break;
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 9) {
  HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = 0;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 32 + 4 >> 2] = 0;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = HEAP32[i5 >> 2];
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 + 4 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i2;
 return;
}

function _get_yank_register(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 HEAP32[26082] = 0;
 if (((((HEAP32[i5 >> 2] | 0) == 0 | (HEAP32[i5 >> 2] | 0) == 34) ^ 1 | (HEAP32[i6 >> 2] | 0) != 0) ^ 1) & (HEAP32[26083] | 0) != 0) {
  HEAP32[26084] = HEAP32[26083];
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 i2 = HEAP32[i7 >> 2] | 0;
 do if (((HEAP32[i7 >> 2] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i7 >> 2] = i2 - 48; else {
  i1 = HEAP32[i7 >> 2] | 0;
  if ((i2 - 97 | 0) >>> 0 < 26) {
   HEAP32[i7 >> 2] = i1 - 97 + 10;
   break;
  }
  if ((i1 - 65 | 0) >>> 0 < 26) {
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - 65 + 10;
   HEAP32[26082] = 1;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) == 45) {
   HEAP32[i7 >> 2] = 36;
   break;
  }
  if ((HEAP32[27099] | 0) != 0 & (HEAP32[i5 >> 2] | 0) == 42) {
   HEAP32[i7 >> 2] = 37;
   HEAP32[i8 >> 2] = 1;
   break;
  }
  if ((HEAP32[27099] | 0) != 0 & (HEAP32[i5 >> 2] | 0) == 43) {
   HEAP32[i7 >> 2] = 37;
   HEAP32[i8 >> 2] = 1;
   break;
  } else {
   HEAP32[i7 >> 2] = 0;
   break;
  }
 } while (0);
 HEAP32[26084] = 104340 + (HEAP32[i7 >> 2] << 4);
 if (HEAP32[i6 >> 2] | 0) HEAP32[26083] = HEAP32[26084];
 HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _cmdline_paste_reg(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 if (_get_yank_register(HEAP32[i7 >> 2] | 0, 0) | 0) HEAP32[i11 >> 2] = 1;
 if (!(HEAP32[HEAP32[26084] >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >= (HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0)) {
   i4 = 14;
   break;
  }
  _cmdline_paste_str(HEAP32[(HEAP32[HEAP32[26084] >> 2] | 0) + (HEAP32[i10 >> 2] << 2) >> 2] | 0, HEAP32[i11 >> 2] | 0);
  if ((HEAPU8[(HEAP32[26084] | 0) + 8 >> 0] | 0 | 0) == 1) {
   if (!(HEAP32[i9 >> 2] | 0)) i4 = 10;
  } else if (!(HEAP32[i9 >> 2] | 0 ? 1 : (HEAP32[i10 >> 2] | 0) >= ((HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0) - 1 | 0))) i4 = 10;
  if ((i4 | 0) == 10) {
   i4 = 0;
   _cmdline_paste_str(62335, HEAP32[i11 >> 2] | 0);
  }
  _ui_breakcheck();
  if (HEAP32[26834] | 0) {
   i4 = 12;
   break;
  }
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 12) {
  HEAP32[i6 >> 2] = 0;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 } else if ((i4 | 0) == 14) {
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 return 0;
}

function _simplify_key(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 L1 : do if (HEAP32[HEAP32[i6 >> 2] >> 2] & 14 | 0) {
  if ((HEAP32[i5 >> 2] | 0) == 9) if (HEAP32[HEAP32[i6 >> 2] >> 2] & 2 | 0) {
   i2 = HEAP32[i6 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -3;
   HEAP32[i4 >> 2] = -17003;
   i10 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i10 | 0;
  }
  HEAP32[i8 >> 2] = 0 - (HEAP32[i5 >> 2] | 0) & 255;
  HEAP32[i9 >> 2] = (0 - (HEAP32[i5 >> 2] | 0) | 0) >>> 8 & 255;
  HEAP32[i7 >> 2] = 0;
  while (1) {
   if (!(HEAPU8[60288 + (HEAP32[i7 >> 2] | 0) >> 0] | 0)) break L1;
   if ((HEAP32[i8 >> 2] | 0) == (HEAPU8[60288 + ((HEAP32[i7 >> 2] | 0) + 3) >> 0] | 0)) if ((HEAP32[i9 >> 2] | 0) == (HEAPU8[60288 + ((HEAP32[i7 >> 2] | 0) + 4) >> 0] | 0)) if (HEAP32[HEAP32[i6 >> 2] >> 2] & HEAPU8[60288 + (HEAP32[i7 >> 2] | 0) >> 0] | 0) break;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 5;
  }
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & ~HEAPU8[60288 + (HEAP32[i7 >> 2] | 0) >> 0];
  i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i4 >> 2] = 0 - ((HEAPU8[60288 + (i2 + 1) >> 0] | 0) + (HEAPU8[60288 + (i2 + 2) >> 0] << 8));
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } while (0);
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _usage() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i2 = i1 + 40 | 0;
 i3 = i1 + 32 | 0;
 i4 = i1 + 24 | 0;
 i5 = i1 + 16 | 0;
 i6 = i1 + 8 | 0;
 i7 = i1;
 i8 = i1 + 44 | 0;
 _reset_signals();
 _init_longVersion();
 HEAP32[i7 >> 2] = HEAP32[27180];
 _printf(97576, i7) | 0;
 HEAP32[i6 >> 2] = 94975;
 _printf(97576, i6) | 0;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  HEAP32[i5 >> 2] = 94984;
  _printf(97576, i5) | 0;
  HEAP32[i4 >> 2] = HEAP32[40760 + (HEAP32[i8 >> 2] << 2) >> 2];
  _printf(97576, i4) | 0;
  if ((HEAP32[i8 >> 2] | 0) == 2) break;
  HEAP32[i3 >> 2] = 95002;
  _printf(97576, i3) | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 HEAP32[i2 >> 2] = 95010;
 _printf(97576, i2) | 0;
 _main_msg(95024);
 _main_msg(95056);
 _main_msg(95089);
 _main_msg(95147);
 _main_msg(95172);
 _main_msg(95197);
 _main_msg(95219);
 _main_msg(95260);
 _main_msg(95299);
 _main_msg(95332);
 _main_msg(95367);
 _main_msg(95414);
 _main_msg(95453);
 _main_msg(95470);
 _main_msg(95508);
 _main_msg(95553);
 _main_msg(95612);
 _main_msg(95647);
 _main_msg(95677);
 _main_msg(95721);
 _main_msg(95737);
 _main_msg(95783);
 _main_msg(95848);
 _main_msg(95901);
 _main_msg(95947);
 _main_msg(95996);
 _main_msg(96034);
 _main_msg(96087);
 _main_msg(96138);
 _main_msg(96174);
 _main_msg(96199);
 _main_msg(96229);
 _main_msg(96293);
 _main_msg(96354);
 _main_msg(96419);
 _main_msg(96480);
 _main_msg(96541);
 _main_msg(96601);
 _main_msg(96663);
 _main_msg(96713);
 _mch_exit(0);
 STACKTOP = i1;
 return;
}

function _do_ascii(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 i7 = i3 + 44 | 0;
 i8 = i3 + 40 | 0;
 i9 = i3 + 80 | 0;
 i10 = i3 + 60 | 0;
 i11 = i3 + 52 | 0;
 HEAP32[i3 + 48 >> 2] = i1;
 HEAP32[i7 >> 2] = _gchar_cursor() | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  _msg(42716) | 0;
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) == 10) HEAP32[i7 >> 2] = 0;
 if ((HEAP32[i7 >> 2] | 0) == 13) if ((_get_fileformat(HEAP32[26773] | 0) | 0) == 2) HEAP32[i8 >> 2] = 10; else i2 = 8; else i2 = 8;
 if ((i2 | 0) == 8) HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 if (_vim_isprintc_strict(HEAP32[i7 >> 2] | 0) | 0) if ((HEAP32[i7 >> 2] | 0) < 32 | (HEAP32[i7 >> 2] | 0) > 126) {
  _transchar_nonprint(i11, HEAP32[i7 >> 2] | 0);
  HEAP32[i6 >> 2] = i11;
  _vim_snprintf(i9, 20, 42720, i6) | 0;
 } else i2 = 12; else i2 = 12;
 if ((i2 | 0) == 12) HEAP8[i9 >> 0] = 0;
 if ((HEAP32[i7 >> 2] | 0) >= 128) {
  HEAP32[i5 >> 2] = _transchar(HEAP32[i7 >> 2] & 127) | 0;
  _vim_snprintf(i10, 20, 42727, i5) | 0;
 } else HEAP8[i10 >> 0] = 0;
 i5 = HEAP32[26882] | 0;
 i2 = _transchar(HEAP32[i7 >> 2] | 0) | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = i7 | 0;
 i6 = i7 | 0;
 i11 = i7 | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = i9;
 HEAP32[i4 + 8 >> 2] = i10;
 HEAP32[i4 + 12 >> 2] = i8;
 HEAP32[i4 + 16 >> 2] = i6;
 HEAP32[i4 + 20 >> 2] = i11;
 _vim_snprintf(i5, 1025, 42736, i4) | 0;
 _msg(HEAP32[26882] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _goto_tabpage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_text_locked() | 0) {
  _text_locked_msg();
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP32[HEAP32[26884] >> 2] | 0)) {
  if ((i1 | 0) <= 1) {
   STACKTOP = i2;
   return;
  }
  _beep_flush();
  STACKTOP = i2;
  return;
 }
 L12 : do if (!i1) if (!(HEAP32[HEAP32[26886] >> 2] | 0)) {
  HEAP32[i4 >> 2] = HEAP32[26884];
  break;
 } else {
  HEAP32[i4 >> 2] = HEAP32[HEAP32[26886] >> 2];
  break;
 } else if ((HEAP32[i3 >> 2] | 0) < 0) {
  HEAP32[i5 >> 2] = HEAP32[26886];
  HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >= 0) break L12;
   HEAP32[i4 >> 2] = HEAP32[26884];
   while (1) {
    if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) break;
    if (!(HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) break;
    HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
   }
   HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
 } else if ((HEAP32[i3 >> 2] | 0) == 9999) {
  HEAP32[i4 >> 2] = HEAP32[26884];
  while (1) {
   if (!(HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) break L12;
   HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
  }
 } else {
  HEAP32[i4 >> 2] = _find_tabpage(HEAP32[i3 >> 2] | 0) | 0;
  if (HEAP32[i4 >> 2] | 0) break;
  _beep_flush();
  STACKTOP = i2;
  return;
 } while (0);
 _goto_tabpage_tp(HEAP32[i4 >> 2] | 0, 1, 1);
 STACKTOP = i2;
 return;
}

function _start_redo(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(_read_redo(1, HEAP32[i6 >> 2] | 0) | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = _read_redo(0, HEAP32[i6 >> 2] | 0) | 0;
 if ((HEAP32[i7 >> 2] | 0) == 34) {
  _add_buff(101948, 96890, 1);
  HEAP32[i7 >> 2] = _read_redo(0, HEAP32[i6 >> 2] | 0) | 0;
  if ((HEAP32[i7 >> 2] | 0) >= 49 & (HEAP32[i7 >> 2] | 0) < 57) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  _add_char_buff(101948, HEAP32[i7 >> 2] | 0);
  if ((HEAP32[i7 >> 2] | 0) == 61) {
   _add_char_buff(101948, 13);
   HEAP32[26811] = 1;
  }
  HEAP32[i7 >> 2] = _read_redo(0, HEAP32[i6 >> 2] | 0) | 0;
 }
 if ((HEAP32[i7 >> 2] | 0) == 118) {
  i2 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[27117] = HEAP32[i2 >> 2];
  HEAP32[27118] = HEAP32[i2 + 4 >> 2];
  HEAP32[26788] = 1;
  HEAP32[26789] = 0;
  HEAP32[27119] = 1;
  HEAP32[26790] = 1;
  HEAP32[i7 >> 2] = _read_redo(0, HEAP32[i6 >> 2] | 0) | 0;
 }
 if (HEAP32[i5 >> 2] | 0) {
  while (1) {
   if (((HEAP32[i7 >> 2] | 0) - 48 | 0) >>> 0 >= 10) break;
   HEAP32[i7 >> 2] = _read_redo(0, HEAP32[i6 >> 2] | 0) | 0;
  }
  _add_num_buff(101948, HEAP32[i5 >> 2] | 0);
 }
 _add_char_buff(101948, HEAP32[i7 >> 2] | 0);
 _copy_redo(HEAP32[i6 >> 2] | 0);
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _msg_add_lines(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4;
 i8 = i4 + 44 | 0;
 i9 = i4 + 40 | 0;
 i10 = i4 + 36 | 0;
 i11 = i4 + 32 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 i3 = HEAP32[26882] | 0;
 HEAP32[i11 >> 2] = i3 + (_strlen(HEAP32[26882] | 0) | 0);
 if (HEAP32[i8 >> 2] | 0) {
  i8 = HEAP32[i11 >> 2] | 0;
  HEAP32[i11 >> 2] = i8 + 1;
  HEAP8[i8 >> 0] = 32;
 }
 if (_shortmess(108) | 0) {
  i8 = HEAP32[i11 >> 2] | 0;
  i3 = i8 | 0;
  i2 = 1025 - (i8 - (HEAP32[26882] | 0)) | 0;
  i8 = HEAP32[i10 >> 2] | 0;
  HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
  i1 = i7 + 8 | 0;
  HEAP32[i1 >> 2] = i8;
  HEAP32[i1 + 4 >> 2] = ((i8 | 0) < 0) << 31 >> 31;
  _vim_snprintf(i3, i2, 53663, i7) | 0;
  STACKTOP = i4;
  return;
 }
 i7 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i9 >> 2] | 0) == 1) _strcpy(i7, 53675) | 0; else {
  HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
  _sprintf(i7, 53684, i6) | 0;
 }
 i6 = _strlen(HEAP32[i11 >> 2] | 0) | 0;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i6;
 i6 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i10 >> 2] | 0) == 1) {
  _strcpy(i6, 53696) | 0;
  STACKTOP = i4;
  return;
 } else {
  i7 = 1025 - ((HEAP32[i11 >> 2] | 0) - (HEAP32[26882] | 0)) | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i10 = i5;
  HEAP32[i10 >> 2] = i11;
  HEAP32[i10 + 4 >> 2] = ((i11 | 0) < 0) << 31 >> 31;
  _vim_snprintf(i6, i7, 53708, i5) | 0;
  STACKTOP = i4;
  return;
 }
}

function _pim_equal(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] | 0)) i9 = 1; else i9 = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == 0;
 HEAP32[i7 >> 2] = i9 & 1;
 if (!(HEAP32[i6 >> 2] | 0)) i10 = 1; else i10 = (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 0;
 HEAP32[i8 >> 2] = i10 & 1;
 i10 = HEAP32[i8 >> 2] | 0;
 if (HEAP32[i7 >> 2] | 0) {
  HEAP32[i4 >> 2] = i10;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 if (i10 | 0) {
  HEAP32[i4 >> 2] = 0;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 if ((HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 i10 = (HEAP32[i5 >> 2] | 0) + 172 | 0;
 if (HEAP32[26312] | 0) {
  HEAP32[i4 >> 2] = (HEAP32[i10 >> 2] | 0) == (HEAP32[(HEAP32[i6 >> 2] | 0) + 172 >> 2] | 0) & 1;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 if ((HEAP32[i10 >> 2] | 0) == (HEAP32[(HEAP32[i6 >> 2] | 0) + 172 >> 2] | 0)) i12 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 172 + 4 >> 2] | 0) == (HEAP32[(HEAP32[i6 >> 2] | 0) + 172 + 4 >> 2] | 0); else i12 = 0;
 HEAP32[i4 >> 2] = i12 & 1;
 i11 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i11 | 0;
}

function _leftcol_changed() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i5 >> 2] = 0;
 _changed_cline_bef_curs();
 i6 = HEAP32[26881] | 0;
 i7 = (HEAP32[i6 + 76 >> 2] | 0) + (HEAP32[i6 + 100 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = i7 - (_curwin_col_off() | 0) - 1;
 _validate_virtcol();
 if ((HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) > ((HEAP32[i2 >> 2] | 0) - (HEAP32[26990] | 0) | 0)) {
  HEAP32[i5 >> 2] = 1;
  _coladvance((HEAP32[i2 >> 2] | 0) - (HEAP32[26990] | 0) | 0) | 0;
 } else if ((HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0) < ((HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) + (HEAP32[26990] | 0) | 0)) {
  HEAP32[i5 >> 2] = 1;
  _coladvance((HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) + (HEAP32[26990] | 0) | 0) | 0;
 }
 i7 = HEAP32[26881] | 0;
 _getvcol(i7 | 0, i7 + 24 | 0, i3, 0, i4);
 if ((HEAP32[i4 >> 2] | 0) > (HEAP32[i2 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 1;
  _coladvance((HEAP32[i3 >> 2] | 0) - 1 | 0) | 0;
 } else if ((HEAP32[i3 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 1;
  if (!(_coladvance((HEAP32[i4 >> 2] | 0) + 1 | 0) | 0)) {
   HEAP32[(HEAP32[26881] | 0) + 76 >> 2] = HEAP32[i3 >> 2];
   _changed_cline_bef_curs();
  }
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  _redraw_later(40);
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 _redraw_later(40);
 i8 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i1;
 return i8 | 0;
}

function _ga_grow(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 do if (((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0) < (HEAP32[i6 >> 2] | 0)) {
  if ((HEAP32[i6 >> 2] | 0) < (HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
  HEAP32[i8 >> 2] = Math_imul(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0;
  if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0)) i10 = _alloc(HEAP32[i8 >> 2] | 0) | 0; else i10 = _realloc(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = i10;
  if (HEAP32[i9 >> 2] | 0) {
   i2 = HEAP32[i5 >> 2] | 0;
   HEAP32[i7 >> 2] = Math_imul(HEAP32[i2 + 8 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0) | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   _memset((HEAP32[i9 >> 2] | 0) + i2 | 0, 0, (HEAP32[i8 >> 2] | 0) - i2 | 0) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
   HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = HEAP32[i9 >> 2];
   break;
  }
  HEAP32[i4 >> 2] = 0;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 1;
 i11 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i11 | 0;
}

function _nfa_get_reganch(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 do if ((HEAP32[i7 >> 2] | 0) > 4) HEAP32[i5 >> 2] = 0; else {
  L4 : while (1) {
   if (!(HEAP32[i8 >> 2] | 0)) {
    i3 = 12;
    break;
   }
   switch (HEAP32[HEAP32[i8 >> 2] >> 2] | 0) {
   case -1004:
   case -1008:
    {
     i3 = 6;
     break L4;
     break;
    }
   case -1024:
    {
     i3 = 8;
     break L4;
     break;
    }
   case -999:
   case -957:
   case -958:
   case -959:
   case -960:
   case -961:
   case -962:
   case -963:
   case -964:
   case -965:
   case -966:
   case -871:
   case -884:
   case -1e3:
   case -1001:
    break;
   default:
    {
     i3 = 11;
     break L4;
    }
   }
   HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2];
  }
  if ((i3 | 0) == 6) {
   HEAP32[i5 >> 2] = 1;
   break;
  } else if ((i3 | 0) == 8) {
   if (_nfa_get_reganch(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0) i9 = (_nfa_get_reganch(HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + 1 | 0) | 0) != 0; else i9 = 0;
   HEAP32[i5 >> 2] = i9 & 1;
   break;
  } else if ((i3 | 0) == 11) {
   HEAP32[i5 >> 2] = 0;
   break;
  } else if ((i3 | 0) == 12) {
   HEAP32[i5 >> 2] = 0;
   break;
  }
 } while (0);
 STACKTOP = i4;
 return HEAP32[i5 >> 2] | 0;
}

function _vim_strsave_escape_csi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _alloc(((_strlen(HEAP32[i4 >> 2] | 0) | 0) * 3 | 0) + 1 | 0) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 128) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0 | 0) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0 | 0) {
   i4 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i4 + 1;
   i1 = HEAP8[i4 >> 0] | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i1;
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i1 + 1;
   i4 = HEAP8[i1 >> 0] | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i4;
   i4 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i4 + 1;
   i1 = HEAP8[i4 >> 0] | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   HEAP32[i7 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i1;
  } else i2 = 8; else i2 = 8; else i2 = 8;
  if ((i2 | 0) == 8) {
   i2 = 0;
   HEAP32[i7 >> 2] = _add_char2buf(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0, HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
 }
 HEAP8[HEAP32[i7 >> 2] >> 0] = 0;
 i8 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _leave_tabpage(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[26886];
 _reset_VIsual_and_resel();
 if (HEAP32[i6 >> 2] | 0) {
  if ((HEAP32[i5 >> 2] | 0) != (HEAP32[26773] | 0)) {
   _apply_autocmds(6, 0, 0, 0, HEAP32[26773] | 0) | 0;
   if ((HEAP32[26886] | 0) != (HEAP32[i7 >> 2] | 0)) {
    HEAP32[i4 >> 2] = 0;
    i8 = HEAP32[i4 >> 2] | 0;
    STACKTOP = i3;
    return i8 | 0;
   }
  }
  _apply_autocmds(94, 0, 0, 0, HEAP32[26773] | 0) | 0;
  if ((HEAP32[26886] | 0) != (HEAP32[i7 >> 2] | 0)) {
   HEAP32[i4 >> 2] = 0;
   i8 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i8 | 0;
  }
  _apply_autocmds(79, 0, 0, 0, HEAP32[26773] | 0) | 0;
  if ((HEAP32[26886] | 0) != (HEAP32[i7 >> 2] | 0)) {
   HEAP32[i4 >> 2] = 0;
   i8 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i8 | 0;
  }
 }
 if (HEAP32[26627] | 0) _gui_remove_scrollbars();
 HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = HEAP32[26881];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] = HEAP32[26768];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] = HEAP32[26887];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = HEAP32[27112];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = HEAP32[10173];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] = HEAP32[10174];
 HEAP32[26887] = 0;
 HEAP32[27112] = 0;
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _mch_total_mem(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 36 | 0;
 i4 = i2 + 28 | 0;
 i5 = i2 + 24 | 0;
 i6 = i2 + 20 | 0;
 i7 = i2 + 16 | 0;
 i8 = i2;
 HEAP32[i2 + 32 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 10;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i6 >> 2] = _sysconf(30) | 0;
  HEAP32[i7 >> 2] = _sysconf(85) | 0;
  if ((HEAP32[i6 >> 2] | 0) > 0 & (HEAP32[i7 >> 2] | 0) > 0) {
   while (1) {
    if ((HEAP32[i5 >> 2] | 0) >>> 0 > 0) i9 = (HEAP32[i6 >> 2] & 1 | 0) == 0; else i9 = 0;
    i10 = HEAP32[i6 >> 2] | 0;
    if (!i9) break;
    HEAP32[i6 >> 2] = i10 >>> 1;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
   }
   HEAP32[i4 >> 2] = Math_imul(i10, HEAP32[i7 >> 2] | 0) | 0;
  }
 }
 if (!(_getrlimit(2, i8) | 0)) {
  i7 = i8;
  i10 = HEAP32[i7 + 4 >> 2] | 0;
  if (i10 >>> 0 < 0 | (i10 | 0) == 0 & (HEAP32[i7 >> 2] | 0) >>> 0 < 2147483648) {
   i7 = i8;
   if ((HEAP32[i7 >> 2] | 0) != -1 ? 1 : (HEAP32[i7 + 4 >> 2] | 0) != -1) if ((HEAP32[i8 >> 2] | 0) >>> 10 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> (HEAP32[i5 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i5 >> 2] = 10;
   }
  }
 }
 if ((HEAP32[i4 >> 2] | 0) >>> 0 > 0) {
  HEAP32[i3 >> 2] = (HEAP32[i4 >> 2] | 0) >>> (HEAP32[i5 >> 2] | 0);
  i11 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 } else {
  HEAP32[i3 >> 2] = 2097151;
  i11 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 }
 return 0;
}

function _nfa_get_match_text(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i6 >> 2] = 0;
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) != -966) {
  HEAP32[i3 >> 2] = 0;
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 while (1) {
  if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) <= 0) break;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 }
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) == -956) if ((HEAP32[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] >> 2] | 0) == -1023) {
  HEAP32[i7 >> 2] = _alloc(HEAP32[i6 >> 2] | 0) | 0;
  if (HEAP32[i7 >> 2] | 0) {
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2];
   HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
   while (1) {
    if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) <= 0) break;
    i4 = HEAP32[HEAP32[i5 >> 2] >> 2] & 255;
    i6 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = i6 + 1;
    HEAP8[i6 >> 0] = i4;
    HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
   }
   HEAP8[HEAP32[i8 >> 2] >> 0] = 0;
  }
  HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i9 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i9 | 0;
}

function _plines_win_nofold(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _ml_get_buf(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0;
 if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) {
  HEAP32[i4 >> 2] = 1;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i8 >> 2] = _win_linetabsize(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0, 2147483647) | 0;
 if (HEAP32[10184] | 0 ? (HEAP32[(HEAP32[i5 >> 2] | 0) + 200 >> 2] | 0) != 0 : 0) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 i7 = HEAP32[(HEAP32[i5 >> 2] | 0) + 100 >> 2] | 0;
 HEAP32[i9 >> 2] = i7 - (_win_col_off(HEAP32[i5 >> 2] | 0) | 0);
 if ((HEAP32[i9 >> 2] | 0) <= 0) {
  HEAP32[i4 >> 2] = 32e3;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 if ((HEAP32[i8 >> 2] | 0) <= (HEAP32[i9 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 1;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else {
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - (HEAP32[i9 >> 2] | 0);
  i7 = _win_col_off2(HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i7;
  i7 = HEAP32[i9 >> 2] | 0;
  HEAP32[i4 >> 2] = (((HEAP32[i8 >> 2] | 0) + (i7 - 1) | 0) / (i7 | 0) | 0) + 1;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 return 0;
}

function _tag_strnicmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >>> 0 <= 0) {
   i4 = 15;
   break;
  }
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) < 97) i4 = 5; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) > 122) i4 = 5; else i11 = (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) - 32 | 0;
  if ((i4 | 0) == 5) {
   i4 = 0;
   i11 = HEAPU8[HEAP32[i7 >> 2] >> 0] | 0;
  }
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) < 97) i4 = 9; else if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) > 122) i4 = 9; else i12 = (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) - 32 | 0;
  if ((i4 | 0) == 9) {
   i4 = 0;
   i12 = HEAPU8[HEAP32[i8 >> 2] >> 0] | 0;
  }
  HEAP32[i10 >> 2] = i11 - i12;
  if (HEAP32[i10 >> 2] | 0) {
   i4 = 12;
   break;
  }
  if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) {
   i4 = 15;
   break;
  }
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
 }
 if ((i4 | 0) == 12) {
  HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 } else if ((i4 | 0) == 15) {
  HEAP32[i6 >> 2] = 0;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 return 0;
}

function _get_pseudo_mouse_code(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if (!(HEAP32[12700 + (HEAP32[i10 >> 2] << 4) >> 2] | 0)) {
   i4 = 16;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == (HEAP32[12700 + (HEAP32[i10 >> 2] << 4) + 4 >> 2] | 0)) if ((HEAP32[i8 >> 2] | 0) == (HEAP32[12700 + (HEAP32[i10 >> 2] << 4) + 8 >> 2] | 0)) if ((HEAP32[i9 >> 2] | 0) == (HEAP32[12700 + (HEAP32[i10 >> 2] << 4) + 12 >> 2] | 0)) break;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 16) {
  HEAP32[i6 >> 2] = 53;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 if ((HEAP32[27096] | 0) < 0 | (HEAP32[27096] | 0) > 1e4) {
  if ((HEAP32[27096] | 0) < 0) HEAP32[27096] = 0; else HEAP32[27096] = (HEAP32[27096] | 0) - 1e4;
  if ((HEAP32[12700 + (HEAP32[i10 >> 2] << 4) >> 2] | 0) == 44) {
   HEAP32[i6 >> 2] = 69;
   i11 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i11 | 0;
  }
  if ((HEAP32[12700 + (HEAP32[i10 >> 2] << 4) >> 2] | 0) == 46) {
   HEAP32[i6 >> 2] = 70;
   i11 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i11 | 0;
  }
 }
 HEAP32[i6 >> 2] = HEAP32[12700 + (HEAP32[i10 >> 2] << 4) >> 2];
 i11 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _find_extra(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10) HEAP32[i5 >> 2] = _skipdigits(i1) | 0; else {
   if ((HEAPU8[i1 >> 0] | 0 | 0) != 47) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 63) {
    HEAP32[i5 >> 2] = 0;
    break;
   }
   HEAP32[i5 >> 2] = _skip_regexp((HEAP32[i5 >> 2] | 0) + 1 | 0, HEAPU8[HEAP32[i5 >> 2] >> 0] | 0, 0, 0) | 0;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != (HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0)) {
    HEAP32[i5 >> 2] = 0;
    break;
   } else {
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    break;
   }
  } while (0);
  if (!(HEAP32[i5 >> 2] | 0)) break;
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 59) break;
  if (((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) - 48 | 0) >>> 0 >= 10) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) != 47) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) != 63) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if (HEAP32[i5 >> 2] | 0) if (!(_strncmp(HEAP32[i5 >> 2] | 0, 78514, 2) | 0)) {
  HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[i5 >> 2];
  HEAP32[i3 >> 2] = 1;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _ml_open_file(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) >= 0) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[27135] | 0 ? 1 : (HEAP32[(HEAP32[i4 >> 2] | 0) + 696 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = HEAP32[26906];
 while (1) {
  if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break;
  HEAP32[i6 >> 2] = _findswapname(HEAP32[i4 >> 2] | 0, i7, 0) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) break;
  if (!(HEAP32[i6 >> 2] | 0)) continue;
  if ((_mf_open_file(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) == 1) {
   _ml_upd_block0(HEAP32[i4 >> 2] | 0, 1);
   if ((_mf_sync(HEAP32[i5 >> 2] | 0, 8) | 0) == 1) {
    i2 = 11;
    break;
   }
   _mf_close_file(HEAP32[i4 >> 2] | 0, 0);
  }
 }
 if ((i2 | 0) == 11) _mf_set_dirty(HEAP32[i5 >> 2] | 0);
 if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  HEAP32[26721] = 1;
  HEAP32[26720] = (HEAP32[26720] | 0) + 1;
  i5 = (_buf_spname(HEAP32[i4 >> 2] | 0) | 0) != 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (i5) i8 = _buf_spname(i2) | 0; else i8 = HEAP32[i2 + 76 >> 2] | 0;
  _emsg2(57832, i8) | 0;
  HEAP32[26720] = (HEAP32[26720] | 0) + -1;
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 772 >> 2] = 0;
 STACKTOP = i3;
 return;
}

function _msg_strtrunc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 if ((HEAP32[26710] | 0) != 0 | (HEAP32[26721] | 0) != 0) {
  if (!(HEAP32[i5 >> 2] | 0)) {
   i9 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
 } else {
  i2 = (_shortmess(84) | 0) == 0;
  if (!(((i2 | (HEAP32[26798] | 0) != 0) ^ 1) & (HEAP32[26809] | 0) == 0 | (HEAP32[i5 >> 2] | 0) != 0)) {
   i9 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
 }
 HEAP32[i7 >> 2] = _vim_strsize(HEAP32[i4 >> 2] | 0) | 0;
 i5 = (HEAP32[10173] | 0) - (HEAP32[26877] | 0) | 0;
 if (HEAP32[27044] | 0) HEAP32[i8 >> 2] = (Math_imul(i5, HEAP32[10174] | 0) | 0) - 1; else {
  i2 = Math_imul(i5 - 1 | 0, HEAP32[10174] | 0) | 0;
  HEAP32[i8 >> 2] = i2 + (HEAP32[27116] | 0) - 1;
 }
 if (!((HEAP32[i8 >> 2] | 0) > 0 ? (HEAP32[i7 >> 2] | 0) > (HEAP32[i8 >> 2] | 0) : 0)) {
  i9 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i7 >> 2] = (HEAP32[i8 >> 2] | 0) + 2;
 HEAP32[i6 >> 2] = _alloc(HEAP32[i7 >> 2] | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i9 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 _trunc_string(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 i9 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _expand_wildcards_eval(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i6 + 32 | 0;
 i8 = i6 + 28 | 0;
 i9 = i6 + 24 | 0;
 i10 = i6 + 20 | 0;
 i11 = i6 + 16 | 0;
 i12 = i6 + 12 | 0;
 i13 = i6 + 8 | 0;
 i14 = i6 + 4 | 0;
 i15 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) == 37) i5 = 4; else if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) == 35) i5 = 4; else if ((HEAPU8[HEAP32[i13 >> 2] >> 0] | 0) == 60) i5 = 4;
 if ((i5 | 0) == 4) {
  HEAP32[26714] = (HEAP32[26714] | 0) + 1;
  i5 = HEAP32[i13 >> 2] | 0;
  HEAP32[i12 >> 2] = _eval_vars(i5 | 0, i5 | 0, i15, 0, i14, 0) | 0;
  HEAP32[26714] = (HEAP32[26714] | 0) + -1;
  if (HEAP32[i12 >> 2] | 0) HEAP32[i13 >> 2] = _concat_str(HEAP32[i12 >> 2] | 0, (HEAP32[i13 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0) | 0;
 }
 if (HEAP32[i13 >> 2] | 0) HEAP32[i11 >> 2] = _expand_wildcards(1, i13, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i16 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i6;
  return i16 | 0;
 }
 _vim_free(HEAP32[i13 >> 2] | 0);
 _vim_free(HEAP32[i12 >> 2] | 0);
 i16 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i6;
 return i16 | 0;
}

function _syn_list_header(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = 19;
 HEAP32[i10 >> 2] = 1;
 do if (HEAP32[i6 >> 2] | 0) {
  if (((HEAP32[27043] | 0) + (HEAP32[i7 >> 2] | 0) + 1 | 0) < (HEAP32[10174] | 0)) {
   if ((HEAP32[27043] | 0) < (HEAP32[i9 >> 2] | 0)) break;
   HEAP32[i10 >> 2] = 0;
   break;
  }
  _msg_putchar(10);
  if (HEAP32[26834] | 0) {
   HEAP32[i5 >> 2] = 1;
   i11 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i11 | 0;
  }
 } else {
  _msg_putchar(10);
  if (!(HEAP32[26834] | 0)) {
   _msg_outtrans(HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i8 >> 2] | 0) - 1 | 0) * 96 | 0) >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = 15;
   break;
  }
  HEAP32[i5 >> 2] = 1;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 } while (0);
 if ((HEAP32[27043] | 0) >= (HEAP32[i9 >> 2] | 0)) HEAP32[i9 >> 2] = (HEAP32[27043] | 0) + 1;
 if ((HEAP32[10174] | 0) <= (HEAP32[i9 >> 2] | 0)) HEAP32[i9 >> 2] = (HEAP32[10174] | 0) - 1;
 _msg_advance(HEAP32[i9 >> 2] | 0);
 if (!(HEAP32[i6 >> 2] | 0)) {
  _msg_puts_attr(77432, _syn_id2attr(HEAP32[i8 >> 2] | 0) | 0);
  _msg_putchar(32);
 }
 HEAP32[i5 >> 2] = HEAP32[i10 >> 2];
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _enter_buffer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _buf_copy_options(HEAP32[i3 >> 2] | 0, 5);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 780 >> 2] | 0)) _get_winopts(HEAP32[i3 >> 2] | 0);
 HEAP32[(HEAP32[26881] | 0) + 4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[26773] = HEAP32[i3 >> 2];
 i3 = (HEAP32[26773] | 0) + 56 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 HEAP8[(HEAP32[26881] | 0) + 72 >> 0] = 0;
 HEAP32[(HEAP32[26881] | 0) + 108 >> 2] = 0;
 if (!(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0)) {
  if (!(HEAPU8[HEAP32[(HEAP32[26773] | 0) + 624 >> 2] >> 0] | 0)) HEAP32[26747] = 0;
  _open_buffer(0, 0, 0) | 0;
 } else {
  if (!(HEAP32[26809] | 0)) HEAP32[26709] = 1;
  _buf_check_timestamp(HEAP32[26773] | 0, 0) | 0;
  HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = 1;
  _apply_autocmds(2, 0, 0, 0, HEAP32[26773] | 0) | 0;
  _apply_autocmds(13, 0, 0, 0, HEAP32[26773] | 0) | 0;
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == 1) if (_inindent(0) | 0) _buflist_getfpos();
 _check_arg_idx(HEAP32[26881] | 0);
 if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) != 1) {
  _redraw_later(40);
  STACKTOP = i2;
  return;
 }
 if (HEAP8[(HEAP32[26881] | 0) + 72 >> 0] | 0) {
  _redraw_later(40);
  STACKTOP = i2;
  return;
 }
 _scroll_cursor_halfway(0);
 _redraw_later(40);
 STACKTOP = i2;
 return;
}

function _append_redir(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = i5 + 36 | 0;
 i9 = i5 + 32 | 0;
 i10 = i5 + 28 | 0;
 i11 = i5 + 24 | 0;
 i12 = i5 + 20 | 0;
 i13 = i5 + 16 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 i4 = HEAP32[i8 >> 2] | 0;
 HEAP32[i13 >> 2] = i4 + (_strlen(HEAP32[i8 >> 2] | 0) | 0);
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 while (1) {
  i4 = _vim_strchr(HEAP32[i12 >> 2] | 0, 37) | 0;
  HEAP32[i12 >> 2] = i4;
  if (!i4) break;
  if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) == 115) break;
  if ((HEAPU8[(HEAP32[i12 >> 2] | 0) + 1 >> 0] | 0) == 37) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 i4 = HEAP32[i13 >> 2] | 0;
 if (HEAP32[i12 >> 2] | 0) {
  HEAP8[i4 >> 0] = 32;
  i12 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
  i3 = i12 | 0;
  i2 = (HEAP32[i9 >> 2] | 0) - (i12 - (HEAP32[i8 >> 2] | 0)) | 0;
  i12 = HEAP32[i10 >> 2] | 0;
  HEAP32[i7 >> 2] = HEAP32[i11 >> 2];
  _vim_snprintf(i3, i2, i12, i7) | 0;
  STACKTOP = i5;
  return;
 } else {
  i7 = (HEAP32[i9 >> 2] | 0) - ((HEAP32[i13 >> 2] | 0) - (HEAP32[i8 >> 2] | 0)) | 0;
  i8 = HEAP32[i11 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i6 + 4 >> 2] = i8;
  _vim_snprintf(i4, i7, 42940, i6) | 0;
  STACKTOP = i5;
  return;
 }
}

function _get_buffcont(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i10 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 while (1) {
  if (!(HEAP32[i10 >> 2] | 0)) break;
  i2 = _strlen((HEAP32[i10 >> 2] | 0) + 4 | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i2;
  HEAP32[i10 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
 }
 if (!((HEAP32[i6 >> 2] | 0) != 0 | (HEAP32[i5 >> 2] | 0) != 0)) {
  i11 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 i5 = _lalloc((HEAP32[i6 >> 2] | 0) + 1 | 0, 1) | 0;
 HEAP32[i7 >> 2] = i5;
 if (!i5) {
  i11 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i10 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 while (1) {
  if (!(HEAP32[i10 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = (HEAP32[i10 >> 2] | 0) + 4;
  while (1) {
   if (!(HEAP8[HEAP32[i9 >> 2] >> 0] | 0)) break;
   i4 = HEAP32[i9 >> 2] | 0;
   HEAP32[i9 >> 2] = i4 + 1;
   i5 = HEAP8[i4 >> 0] | 0;
   i4 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i5;
  }
  HEAP32[i10 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
 }
 HEAP8[HEAP32[i8 >> 2] >> 0] = 0;
 i11 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i3;
 return i11 | 0;
}

function ___stpcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = 0;
 i4 = i2;
 L1 : do if (!((i4 ^ i1) & 3)) {
  if (!(i4 & 3)) {
   i5 = i2;
   i6 = i1;
  } else {
   i7 = i2;
   i8 = i1;
   while (1) {
    i9 = HEAP8[i7 >> 0] | 0;
    HEAP8[i8 >> 0] = i9;
    if (!(i9 << 24 >> 24)) {
     i10 = i8;
     break L1;
    }
    i9 = i7 + 1 | 0;
    i11 = i8 + 1 | 0;
    if (!(i9 & 3)) {
     i5 = i9;
     i6 = i11;
     break;
    } else {
     i7 = i9;
     i8 = i11;
    }
   }
  }
  i8 = HEAP32[i5 >> 2] | 0;
  if (!((i8 & -2139062144 ^ -2139062144) & i8 + -16843009)) {
   i7 = i6;
   i11 = i5;
   i9 = i8;
   while (1) {
    i8 = i11 + 4 | 0;
    i12 = i7 + 4 | 0;
    HEAP32[i7 >> 2] = i9;
    i9 = HEAP32[i8 >> 2] | 0;
    if ((i9 & -2139062144 ^ -2139062144) & i9 + -16843009 | 0) {
     i13 = i8;
     i14 = i12;
     break;
    } else {
     i7 = i12;
     i11 = i8;
    }
   }
  } else {
   i13 = i5;
   i14 = i6;
  }
  i15 = i13;
  i16 = i14;
  i3 = 10;
 } else {
  i15 = i2;
  i16 = i1;
  i3 = 10;
 } while (0);
 if ((i3 | 0) == 10) {
  i3 = HEAP8[i15 >> 0] | 0;
  HEAP8[i16 >> 0] = i3;
  if (!(i3 << 24 >> 24)) i10 = i16; else {
   i3 = i16;
   i16 = i15;
   while (1) {
    i16 = i16 + 1 | 0;
    i15 = i3 + 1 | 0;
    i1 = HEAP8[i16 >> 0] | 0;
    HEAP8[i15 >> 0] = i1;
    if (!(i1 << 24 >> 24)) {
     i10 = i15;
     break;
    } else i3 = i15;
   }
  }
 }
 return i10 | 0;
}

function _ex_mkrc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) != 270) if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) != 273) {
  i1 = HEAP32[i3 >> 2] | 0;
  do if (HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0 | 0) HEAP32[i6 >> 2] = HEAP32[i1 >> 2]; else if ((HEAP32[i1 + 16 >> 2] | 0) == 272) {
   HEAP32[i6 >> 2] = 94627;
   break;
  } else {
   HEAP32[i6 >> 2] = 94634;
   break;
  } while (0);
  HEAP32[i4 >> 2] = _open_exfile(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, 94940) | 0;
  if (!(HEAP32[i4 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 272) _put_line(HEAP32[i4 >> 2] | 0, 50606) | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  if (HEAP32[26903] | 0) _put_line(i6, 50618) | 0; else _put_line(i6, 50643) | 0;
  if (!(_makemap(HEAP32[i4 >> 2] | 0, 0) | 0)) i7 = 1; else i7 = (_makeset(HEAP32[i4 >> 2] | 0, 2, 0) | 0) == 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | i7 & 1;
  if (!(_put_line(HEAP32[i4 >> 2] | 0, 50669) | 0)) HEAP32[i5 >> 2] = 1;
  i7 = _fclose(HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | i7;
  if (!(HEAP32[i5 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  }
  _emsg(94027) | 0;
  STACKTOP = i2;
  return;
 }
 _ex_ni(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _swapchar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _gchar_pos(HEAP32[i6 >> 2] | 0) | 0;
 if ((HEAP32[i7 >> 2] | 0) >= 128 & (HEAP32[i5 >> 2] | 0) == 15) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 do if (_islower(HEAP32[i7 >> 2] | 0) | 0) {
  if ((HEAP32[i5 >> 2] | 0) == 15) {
   HEAP32[i8 >> 2] = (((HEAP32[i7 >> 2] | 0) - 97 + 13 | 0) % 26 | 0) + 97;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) != 12) HEAP32[i8 >> 2] = _toupper(HEAP32[i7 >> 2] | 0) | 0;
 } else if (_isupper(HEAP32[i7 >> 2] | 0) | 0) {
  if ((HEAP32[i5 >> 2] | 0) == 15) {
   HEAP32[i8 >> 2] = (((HEAP32[i7 >> 2] | 0) - 65 + 13 | 0) % 26 | 0) + 65;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) != 11) HEAP32[i8 >> 2] = _tolower(HEAP32[i7 >> 2] | 0) | 0;
 } while (0);
 if ((HEAP32[i8 >> 2] | 0) != (HEAP32[i7 >> 2] | 0)) {
  i7 = HEAP32[i8 >> 2] & 255;
  i8 = _ml_get_buf(HEAP32[26773] | 0, HEAP32[HEAP32[i6 >> 2] >> 2] | 0, 1) | 0;
  HEAP8[i8 + (HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) >> 0] = i7;
  HEAP32[i4 >> 2] = 1;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } else {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 return 0;
}

function _read_redo(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[i5 >> 2] | 0) {
  if (HEAP32[i6 >> 2] | 0) HEAP32[25634] = HEAP32[25629]; else HEAP32[25634] = HEAP32[25477];
  if (!(HEAP32[25634] | 0)) {
   HEAP32[i4 >> 2] = 0;
   i8 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i8 | 0;
  } else {
   HEAP32[25635] = (HEAP32[25634] | 0) + 4;
   HEAP32[i4 >> 2] = 1;
   i8 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i8 | 0;
  }
 }
 i6 = HEAPU8[HEAP32[25635] >> 0] | 0;
 HEAP32[i7 >> 2] = i6;
 if (i6 | 0) {
  if ((HEAP32[i7 >> 2] | 0) == 128) {
   if ((HEAPU8[(HEAP32[25635] | 0) + 1 >> 0] | 0) == 254) i9 = 128; else if ((HEAPU8[(HEAP32[25635] | 0) + 1 >> 0] | 0) == 255) i9 = -22783; else {
    i6 = HEAP32[25635] | 0;
    i9 = 0 - ((HEAPU8[i6 + 1 >> 0] | 0) + (HEAPU8[i6 + 2 >> 0] << 8)) | 0;
   }
   HEAP32[i7 >> 2] = i9;
   HEAP32[25635] = (HEAP32[25635] | 0) + 2;
  }
  if ((HEAP32[i7 >> 2] | 0) == 155) HEAP32[25635] = (HEAP32[25635] | 0) + 2;
  i9 = (HEAP32[25635] | 0) + 1 | 0;
  HEAP32[25635] = i9;
  if (!(HEAPU8[i9 >> 0] | 0)) if (HEAP32[HEAP32[25634] >> 2] | 0) {
   HEAP32[25634] = HEAP32[HEAP32[25634] >> 2];
   HEAP32[25635] = (HEAP32[25634] | 0) + 4;
  }
 }
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _ml_lineadd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i10 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 HEAP32[i7 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) < 0) {
   i3 = 7;
   break;
  }
  HEAP32[i8 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[i7 >> 2] << 4);
  i2 = _mf_get(HEAP32[i10 >> 2] | 0, HEAP32[HEAP32[i8 >> 2] >> 2] | 0, 1) | 0;
  HEAP32[i11 >> 2] = i2;
  if (!i2) {
   i3 = 7;
   break;
  }
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2];
  if ((HEAPU16[HEAP32[i9 >> 2] >> 1] | 0 | 0) != 28788) {
   i3 = 5;
   break;
  }
  i2 = (HEAP32[i9 >> 2] | 0) + 8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] << 4) + 4 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  i2 = (HEAP32[i8 >> 2] | 0) + 8 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  _mf_put(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 1, 0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 }
 if ((i3 | 0) == 5) {
  _mf_put(HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, 0, 0);
  _iemsg(59453);
  STACKTOP = i4;
  return;
 } else if ((i3 | 0) == 7) {
  STACKTOP = i4;
  return;
 }
}

function _add_msg_hist(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[26716] | 0) != 0 | (HEAP32[26809] | 0) != 0) {
  STACKTOP = i4;
  return;
 }
 while (1) {
  if ((HEAP32[27236] | 0) <= 20) break;
  _delete_first_msg() | 0;
 }
 HEAP32[i8 >> 2] = _alloc(12) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i6 >> 2] | 0) < 0) HEAP32[i6 >> 2] = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) <= 0) break;
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 10) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
 }
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) <= 0) break;
  if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 1) >> 0] | 0 | 0) != 10) break;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
 }
 i3 = _vim_strnsave(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = i3;
 HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = HEAP32[i7 >> 2];
 if (HEAP32[27227] | 0) HEAP32[HEAP32[27227] >> 2] = HEAP32[i8 >> 2];
 HEAP32[27227] = HEAP32[i8 >> 2];
 if (!(HEAP32[27237] | 0)) HEAP32[27237] = HEAP32[27227];
 HEAP32[27236] = (HEAP32[27236] | 0) + 1;
 STACKTOP = i4;
 return;
}

function _do_sub_msg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3;
 i8 = i3 + 32 | 0;
 i9 = i3 + 28 | 0;
 HEAP32[i9 >> 2] = i1;
 if ((HEAP32[27181] | 0) > (HEAP32[26967] | 0)) {
  if ((HEAP32[27161] | 0) != 0 | (HEAP32[27182] | 0) > 1 | (HEAP32[26967] | 0) < 1 | (HEAP32[i9 >> 2] | 0) != 0) i2 = 4;
 } else if (HEAP32[i9 >> 2] | 0) i2 = 4;
 if ((i2 | 0) == 4) if (_messaging() | 0) {
  if (HEAP32[26834] | 0) _strcpy(113988, 43467) | 0; else HEAP8[113988] = 0;
  i2 = (HEAP32[i9 >> 2] | 0) != 0;
  if ((HEAP32[27181] | 0) == 1) {
   HEAP32[i7 >> 2] = i2 ? 43482 : 43490;
   _vim_snprintf_add(113988, 80, 97576, i7) | 0;
  } else {
   HEAP32[i6 >> 2] = HEAP32[27181];
   _vim_snprintf_add(113988, 80, i2 ? 43505 : 43517, i6) | 0;
  }
  if ((HEAP32[27182] | 0) == 1) {
   HEAP32[i5 >> 2] = 43535;
   _vim_snprintf_add(113988, 80, 97576, i5) | 0;
  } else {
   HEAP32[i4 >> 2] = HEAP32[27182];
   _vim_snprintf_add(113988, 80, 43546, i4) | 0;
  }
  if (_msg(113988) | 0) _set_keep_msg(113988, 0);
  HEAP32[i8 >> 2] = 1;
  i10 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 if (HEAP32[26834] | 0) {
  _emsg(92420) | 0;
  HEAP32[i8 >> 2] = 1;
  i10 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else {
  HEAP32[i8 >> 2] = 0;
  i10 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 return 0;
}

function _ins_ctrl_g() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[26802] = (HEAP32[26802] | 0) + 1;
 HEAP32[i3 >> 2] = _plain_vgetc() | 0;
 HEAP32[26802] = (HEAP32[26802] | 0) + -1;
 i4 = HEAP32[i3 >> 2] | 0;
 L1 : do if ((i4 | 0) < 85) {
  if ((i4 | 0) >= 10) switch (i4 | 0) {
  case 11:
   {
    i1 = 2;
    break L1;
    break;
   }
  case 10:
   {
    i1 = 3;
    break L1;
    break;
   }
  default:
   {
    i1 = 6;
    break L1;
   }
  }
  if ((i4 | 0) < -25707) switch (i4 | 0) {
  case -30059:
   {
    i1 = 2;
    break L1;
    break;
   }
  default:
   {
    i1 = 6;
    break L1;
   }
  } else switch (i4 | 0) {
  case -25707:
   {
    i1 = 3;
    break L1;
    break;
   }
  default:
   {
    i1 = 6;
    break L1;
   }
  }
 } else switch (i4 | 0) {
 case 107:
  {
   i1 = 2;
   break L1;
   break;
  }
 case 106:
  {
   i1 = 3;
   break L1;
   break;
  }
 case 117:
  {
   _u_sync(1);
   HEAP32[25201] = 1;
   HEAP32[259] = 0;
   i3 = (HEAP32[26881] | 0) + 24 | 0;
   HEAP32[27122] = HEAP32[i3 >> 2];
   HEAP32[27123] = HEAP32[i3 + 4 >> 2];
   STACKTOP = i2;
   return;
  }
 case 85:
  {
   HEAP32[25204] = 2;
   STACKTOP = i2;
   return;
  }
 default:
  {
   i1 = 6;
   break L1;
  }
 } while (0);
 if ((i1 | 0) == 2) {
  _ins_up(1);
  STACKTOP = i2;
  return;
 } else if ((i1 | 0) == 3) {
  _ins_down(1);
  STACKTOP = i2;
  return;
 } else if ((i1 | 0) == 6) {
  _vim_beep(32);
  STACKTOP = i2;
  return;
 }
}

function _mf_read(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) < 0) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 592 >> 2];
 HEAP32[i7 >> 2] = Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0) | 0;
 i8 = _lseek(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
 if ((i8 | 0) != (HEAP32[i7 >> 2] | 0)) {
  _emsg3(97280, 97354, _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0) | 0;
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 i7 = _read_eintr(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 if ((i7 | 0) != (HEAP32[i9 >> 2] | 0)) {
  _emsg3(97280, 97389, _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0) | 0;
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else {
  HEAP32[i4 >> 2] = 1;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 return 0;
}

function _gui_find_longest_lnum() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i2 >> 2] = 0;
 if (!(_vim_strchr(HEAP32[26926] | 0, 104) | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) <= (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) <= ((HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0)) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) break;
   HEAP32[i4 >> 2] = _scroll_line_len(HEAP32[i3 >> 2] | 0) | 0;
   i6 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i4 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) {
    HEAP32[i5 >> 2] = i6;
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   } else if ((i6 | 0) == (HEAP32[i5 >> 2] | 0)) {
    i6 = Math_abs((HEAP32[i3 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) | 0;
    if ((i6 | 0) < (Math_abs((HEAP32[i2 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) | 0)) HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   }
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  }
  i7 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i7 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 i7 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i7 | 0;
}

function _mf_release_all() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i3 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i3 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2];
  L4 : do if (HEAP32[i4 >> 2] | 0) {
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) < 0) if (HEAP32[(HEAP32[i3 >> 2] | 0) + 772 >> 2] | 0) _ml_open_file(HEAP32[i3 >> 2] | 0);
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) >= 0) {
    HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2];
    while (1) {
     if (!(HEAP32[i5 >> 2] | 0)) break L4;
     do if (HEAP8[(HEAP32[i5 >> 2] | 0) + 28 >> 0] & 2 | 0) i1 = 14; else {
      if (HEAP8[(HEAP32[i5 >> 2] | 0) + 28 >> 0] & 1 | 0) if (!(_mf_write(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0)) {
       i1 = 14;
       break;
      }
      _mf_rem_used(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
      _mf_rem_hash(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
      _mf_free_bhdr(HEAP32[i5 >> 2] | 0);
      HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2];
      HEAP32[i6 >> 2] = 1;
     } while (0);
     if ((i1 | 0) == 14) {
      i1 = 0;
      HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2];
     }
    }
   }
  } while (0);
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2];
 }
 STACKTOP = i2;
 return HEAP32[i6 >> 2] | 0;
}

function _cstrchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (!(HEAP32[26323] | 0)) {
  HEAP32[i5 >> 2] = _vim_strchr(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 i2 = (_isupper(HEAP32[i7 >> 2] | 0) | 0) != 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (i2) HEAP32[i9 >> 2] = _tolower(i1) | 0; else {
  if (_islower(i1) | 0) {
   HEAP32[i9 >> 2] = _toupper(HEAP32[i7 >> 2] | 0) | 0;
   break;
  }
  HEAP32[i5 >> 2] = _vim_strchr(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } while (0);
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
   i3 = 14;
   break;
  }
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == (HEAP32[i7 >> 2] | 0)) {
   i3 = 12;
   break;
  }
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == (HEAP32[i9 >> 2] | 0)) {
   i3 = 12;
   break;
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 12) {
  HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } else if ((i3 | 0) == 14) {
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 return 0;
}

function _win_alloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _alloc_clear(892) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 if (!(_win_alloc_lines(HEAP32[i7 >> 2] | 0) | 0)) {
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 i2 = (HEAP32[8606] | 0) + 1 | 0;
 HEAP32[8606] = i2;
 HEAP32[HEAP32[i7 >> 2] >> 2] = i2;
 _block_autocmds();
 if (!(HEAP32[i6 >> 2] | 0)) _win_append(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 HEAP32[(HEAP32[i7 >> 2] | 0) + 96 >> 2] = 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] = HEAP32[10174];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] = 1;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 144 >> 2] = 2;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = 1;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 296 >> 2] = 1;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 804 >> 2] = 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 808 >> 2] = -1;
 if (HEAP32[26627] | 0) {
  i5 = HEAP32[i7 >> 2] | 0;
  _gui_create_scrollbar(i5 + 812 | 0, 0, i5 | 0);
  i5 = HEAP32[i7 >> 2] | 0;
  _gui_create_scrollbar(i5 + 812 + 40 | 0, 1, i5 | 0);
 }
 _unblock_autocmds();
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _getrlimit(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3;
 i6 = i3 + 24 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = i1;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = i2;
 i7 = ___syscall_ret(___syscall340(340, i5 | 0) | 0) | 0;
 if (!i7) {
  i5 = i2;
  if ((HEAP32[i5 >> 2] | 0) == -1 ? (HEAP32[i5 + 4 >> 2] | 0) == -1 : 0) {
   i5 = i2;
   HEAP32[i5 >> 2] = -1;
   HEAP32[i5 + 4 >> 2] = -1;
  }
  i5 = i2 + 8 | 0;
  i8 = i5;
  if ((HEAP32[i8 >> 2] | 0) == -1 ? (HEAP32[i8 + 4 >> 2] | 0) == -1 : 0) {
   i8 = i5;
   HEAP32[i8 >> 2] = -1;
   HEAP32[i8 + 4 >> 2] = -1;
   i9 = 0;
  } else i9 = 0;
 } else if ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 38) {
  HEAP32[i4 >> 2] = i1;
  HEAP32[i4 + 4 >> 2] = i6;
  if ((___syscall_ret(___syscall191(191, i4 | 0) | 0) | 0) < 0) i9 = -1; else {
   i4 = HEAP32[i6 >> 2] | 0;
   i1 = (i4 | 0) == -1;
   i8 = i2;
   HEAP32[i8 >> 2] = i1 ? -1 : i4;
   HEAP32[i8 + 4 >> 2] = i1 ? -1 : 0;
   i8 = HEAP32[i6 + 4 >> 2] | 0;
   i6 = (i8 | 0) == -1;
   i4 = i2 + 8 | 0;
   i5 = i4;
   HEAP32[i5 >> 2] = i6 ? -1 : i8;
   HEAP32[i5 + 4 >> 2] = i6 ? -1 : 0;
   if (i1) {
    i1 = i2;
    HEAP32[i1 >> 2] = -1;
    HEAP32[i1 + 4 >> 2] = -1;
   }
   if (i6) {
    i6 = i4;
    HEAP32[i6 >> 2] = -1;
    HEAP32[i6 + 4 >> 2] = -1;
    i9 = 0;
   } else i9 = 0;
  }
 } else i9 = i7;
 STACKTOP = i3;
 return i9 | 0;
}

function _changed_lines_buf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 152 >> 2] | 0)) {
  HEAP32[(HEAP32[i6 >> 2] | 0) + 152 >> 2] = 1;
  HEAP32[(HEAP32[i6 >> 2] | 0) + 156 >> 2] = HEAP32[i7 >> 2];
  HEAP32[(HEAP32[i6 >> 2] | 0) + 160 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
  HEAP32[(HEAP32[i6 >> 2] | 0) + 164 >> 2] = HEAP32[i9 >> 2];
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) < (HEAP32[(HEAP32[i6 >> 2] | 0) + 156 >> 2] | 0)) HEAP32[(HEAP32[i6 >> 2] | 0) + 156 >> 2] = HEAP32[i7 >> 2];
 if ((HEAP32[i7 >> 2] | 0) < (HEAP32[(HEAP32[i6 >> 2] | 0) + 160 >> 2] | 0)) {
  i4 = (HEAP32[i6 >> 2] | 0) + 160 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 160 >> 2] | 0) < (HEAP32[i7 >> 2] | 0)) HEAP32[(HEAP32[i6 >> 2] | 0) + 160 >> 2] = HEAP32[i7 >> 2];
 }
 if (((HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 160 >> 2] | 0)) HEAP32[(HEAP32[i6 >> 2] | 0) + 160 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 i8 = (HEAP32[i6 >> 2] | 0) + 164 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _set_group_colors(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 28 | 0;
 i9 = i7 + 24 | 0;
 i10 = i7 + 20 | 0;
 i11 = i7 + 16 | 0;
 i12 = i7 + 12 | 0;
 i13 = i7 + 8 | 0;
 i14 = i7 + 4 | 0;
 i15 = i7;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = (_syn_name2id(HEAP32[i9 >> 2] | 0) | 0) - 1;
 if ((HEAP32[i15 >> 2] | 0) < 0) {
  HEAP32[i8 >> 2] = 0;
  i16 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i7;
  return i16 | 0;
 }
 _gui_do_one_color(HEAP32[i15 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i14 >> 2] | 0);
 if ((HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i15 >> 2] | 0) * 96 | 0) + 48 >> 2] | 0) != -11111) HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i15 >> 2] | 0) * 96 | 0) + 48 >> 2]; else if (HEAP32[i13 >> 2] | 0) HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[26677];
 if ((HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i15 >> 2] | 0) * 96 | 0) + 52 >> 2] | 0) != -11111) HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i15 >> 2] | 0) * 96 | 0) + 52 >> 2]; else if (HEAP32[i13 >> 2] | 0) HEAP32[HEAP32[i11 >> 2] >> 2] = HEAP32[26676];
 HEAP32[i8 >> 2] = 1;
 i16 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i7;
 return i16 | 0;
}

function _extract_modifiers(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 do if (HEAP32[i6 >> 2] & 2 | 0) {
  if (((HEAP32[i4 >> 2] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAP32[i4 >> 2] | 0) - 97 | 0) >>> 0 >= 26) break;
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = (i2 | 0) < 97 | (i2 | 0) > 122 ? i2 | 0 : i2 - 32 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & -3;
 } while (0);
 do if (HEAP32[i6 >> 2] & 4 | 0) {
  if (!((HEAP32[i4 >> 2] | 0) >= 63 & (HEAP32[i4 >> 2] | 0) <= 95)) if (((HEAP32[i4 >> 2] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAP32[i4 >> 2] | 0) - 97 | 0) >>> 0 >= 26) break;
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = ((i2 | 0) < 97 | (i2 | 0) > 122 ? i2 | 0 : i2 - 32 | 0) ^ 64;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & -5;
  if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i4 >> 2] = -22783;
 } while (0);
 if (!((HEAP32[i6 >> 2] & 8 | 0) != 0 & (HEAP32[i4 >> 2] | 0) < 128)) {
  i7 = HEAP32[i6 >> 2] | 0;
  i8 = HEAP32[i5 >> 2] | 0;
  HEAP32[i8 >> 2] = i7;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 128;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & -9;
 i7 = HEAP32[i6 >> 2] | 0;
 i8 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = i7;
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _match_file_pat(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i9 = i8 + 116 | 0;
 i10 = i8 + 112 | 0;
 i11 = i8 + 108 | 0;
 i12 = i8 + 104 | 0;
 i13 = i8 + 100 | 0;
 i14 = i8 + 96 | 0;
 i15 = i8 + 8 | 0;
 i16 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i15 + 84 >> 2] = HEAP32[26918];
 if (HEAP32[i10 >> 2] | 0) HEAP32[i15 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2]; else HEAP32[i15 >> 2] = _vim_regcomp(HEAP32[i9 >> 2] | 0, 1) | 0;
 do if (HEAP32[i15 >> 2] | 0) {
  if (HEAP32[i14 >> 2] | 0) {
   if (!(_vim_regexec(i15, HEAP32[i11 >> 2] | 0, 0) | 0)) if (HEAP32[i12 >> 2] | 0) {
    if (!(_vim_regexec(i15, HEAP32[i12 >> 2] | 0, 0) | 0)) i7 = 9;
   } else i7 = 9;
  } else i7 = 9;
  if ((i7 | 0) == 9) {
   if (HEAP32[i14 >> 2] | 0) break;
   if (!(_vim_regexec(i15, HEAP32[i13 >> 2] | 0, 0) | 0)) break;
  }
  HEAP32[i16 >> 2] = 1;
 } while (0);
 i13 = HEAP32[i15 >> 2] | 0;
 if (HEAP32[i10 >> 2] | 0) {
  HEAP32[HEAP32[i10 >> 2] >> 2] = i13;
  i17 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i8;
  return i17 | 0;
 } else {
  _vim_regfree(i13);
  i17 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i8;
  return i17 | 0;
 }
 return 0;
}

function _gui_do_scrollbar(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = HEAP32[26881] | 0;
 HEAP32[i8 >> 2] = (HEAP32[i3 + 96 >> 2] | 0) + ((HEAP32[i3 + 100 >> 2] | 0) / 2 | 0);
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 96 >> 2] | 0) <= (HEAP32[i8 >> 2] | 0)) {
  i3 = HEAP32[i5 >> 2] | 0;
  i10 = ((HEAP32[i3 + 96 >> 2] | 0) + (HEAP32[i3 + 100 >> 2] | 0) | 0) >= (HEAP32[i8 >> 2] | 0);
 } else i10 = 0;
 HEAP32[i9 >> 2] = i10 & 1;
 do if ((HEAP32[26662] | 0) != (HEAP32[26661] | 0)) {
  if (!(HEAP32[i9 >> 2] | 0)) HEAP32[i7 >> 2] = 0;
 } else {
  i10 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[i8 >> 2] | 0) > ((HEAP32[10174] | 0) / 2 | 0 | 0)) {
   if (!i10) {
    if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 96 >> 2] | 0)) break;
   } else if (HEAP32[i9 >> 2] | 0) break;
   HEAP32[i7 >> 2] = 0;
   break;
  } else {
   if ((i10 | 0) == 1) {
    if (((HEAP32[(HEAP32[i5 >> 2] | 0) + 96 >> 2] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 100 >> 2] | 0) | 0) == (HEAP32[10174] | 0)) break;
   } else if (HEAP32[i9 >> 2] | 0) break;
   HEAP32[i7 >> 2] = 0;
   break;
  }
 } while (0);
 _gui_mch_enable_scrollbar((HEAP32[i5 >> 2] | 0) + 812 + ((HEAP32[i6 >> 2] | 0) * 40 | 0) | 0, HEAP32[i7 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _ex_runtime(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 HEAP32[i5 >> 2] = _skiptowhite(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i4 >> 2] | 0);
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0 ? 1 : 0;
 do if (!(_strncmp(HEAP32[i4 >> 2] | 0, 76784, HEAP32[i6 >> 2] | 0) | 0)) {
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 40;
  HEAP32[i4 >> 2] = _skipwhite((HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0;
 } else {
  if (!(_strncmp(HEAP32[i4 >> 2] | 0, 45267, HEAP32[i6 >> 2] | 0) | 0)) {
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 48;
   HEAP32[i4 >> 2] = _skipwhite((HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0;
   break;
  }
  if (!(_strncmp(HEAP32[i4 >> 2] | 0, 45271, HEAP32[i6 >> 2] | 0) | 0)) {
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 56;
   HEAP32[i4 >> 2] = _skipwhite((HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0;
   break;
  }
  if (!(_strncmp(HEAP32[i4 >> 2] | 0, 45276, HEAP32[i6 >> 2] | 0) | 0)) {
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 24;
   HEAP32[i4 >> 2] = _skipwhite((HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0) | 0;
  }
 } while (0);
 _source_runtime(HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _reginsert_limits(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 if ((HEAP32[26453] | 0) == (-1 | 0)) {
  HEAP32[26404] = (HEAP32[26404] | 0) + 11;
  STACKTOP = i5;
  return;
 }
 HEAP32[i10 >> 2] = HEAP32[26453];
 HEAP32[26453] = (HEAP32[26453] | 0) + 11;
 HEAP32[i11 >> 2] = HEAP32[26453];
 while (1) {
  if ((HEAP32[i10 >> 2] | 0) >>> 0 <= (HEAP32[i9 >> 2] | 0) >>> 0) break;
  i4 = (HEAP32[i10 >> 2] | 0) + -1 | 0;
  HEAP32[i10 >> 2] = i4;
  i3 = HEAP8[i4 >> 0] | 0;
  i4 = (HEAP32[i11 >> 2] | 0) + -1 | 0;
  HEAP32[i11 >> 2] = i4;
  HEAP8[i4 >> 0] = i3;
 }
 HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
 i11 = HEAP32[i6 >> 2] & 255;
 i6 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = i6 + 1;
 HEAP8[i6 >> 0] = i11;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = i11 + 1;
 HEAP8[i11 >> 0] = 0;
 i11 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = i11 + 1;
 HEAP8[i11 >> 0] = 0;
 HEAP32[i12 >> 2] = _re_put_long(HEAP32[i12 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i12 >> 2] = _re_put_long(HEAP32[i12 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 _regtail(HEAP32[i9 >> 2] | 0, HEAP32[i12 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _init_class_tab() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26406] | 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= 256) break;
  i3 = HEAP32[i2 >> 2] | 0;
  do if ((HEAP32[i2 >> 2] | 0) >= 48 & (HEAP32[i2 >> 2] | 0) <= 55) HEAP16[110026 + (i3 << 1) >> 1] = 15; else {
   i4 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) >= 56 & (HEAP32[i2 >> 2] | 0) <= 57) {
    HEAP16[110026 + (i4 << 1) >> 1] = 11;
    break;
   }
   i5 = HEAP32[i2 >> 2] | 0;
   if ((i4 | 0) >= 97 & (HEAP32[i2 >> 2] | 0) <= 102) {
    HEAP16[110026 + (i5 << 1) >> 1] = 122;
    break;
   }
   i4 = HEAP32[i2 >> 2] | 0;
   if ((i5 | 0) >= 103 & (HEAP32[i2 >> 2] | 0) <= 122) {
    HEAP16[110026 + (i4 << 1) >> 1] = 120;
    break;
   }
   i5 = HEAP32[i2 >> 2] | 0;
   if ((i4 | 0) >= 65 & (HEAP32[i2 >> 2] | 0) <= 70) {
    HEAP16[110026 + (i5 << 1) >> 1] = 186;
    break;
   }
   i4 = HEAP32[i2 >> 2] | 0;
   if ((i5 | 0) >= 71 & (HEAP32[i2 >> 2] | 0) <= 90) {
    HEAP16[110026 + (i4 << 1) >> 1] = 184;
    break;
   }
   i5 = 110026 + (HEAP32[i2 >> 2] << 1) | 0;
   if ((i4 | 0) == 95) {
    HEAP16[i5 >> 1] = 24;
    break;
   } else {
    HEAP16[i5 >> 1] = 0;
    break;
   }
  } while (0);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 HEAP16[55045] = HEAP16[55045] | 256;
 HEAP16[55022] = HEAP16[55022] | 256;
 HEAP32[26406] = 1;
 STACKTOP = i1;
 return;
}

function _option_value2string(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _get_varp_scope(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 2 | 0) {
  HEAP32[i8 >> 2] = 0;
  if (_wc_use_keyname(HEAP32[i7 >> 2] | 0, i8) | 0) {
   i6 = HEAP32[26885] | 0;
   _strcpy(i6, _get_special_key_name(HEAP32[i8 >> 2] | 0, 0) | 0) | 0;
   STACKTOP = i3;
   return;
  }
  i6 = HEAP32[26885] | 0;
  if (HEAP32[i8 >> 2] | 0) {
   _strcpy(i6, _transchar(HEAP32[i8 >> 2] | 0) | 0) | 0;
   STACKTOP = i3;
   return;
  } else {
   HEAP32[i4 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
   _sprintf(i6, 97769, i4) | 0;
   STACKTOP = i3;
   return;
  }
 }
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP8[HEAP32[26885] >> 0] = 0;
  STACKTOP = i3;
  return;
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 16 | 0) {
  _home_replace(0, HEAP32[i7 >> 2] | 0, HEAP32[26885] | 0, 4096, 0);
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) == 107848) {
  _str2specialbuf(HEAP32[26962] | 0, HEAP32[26885] | 0, 4096);
  STACKTOP = i3;
  return;
 } else {
  _vim_strncpy(HEAP32[26885] | 0, HEAP32[i7 >> 2] | 0, 4095);
  STACKTOP = i3;
  return;
 }
}

function _gotchars(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
 L1 : while (1) {
  i5 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = i5 + -1;
  if (!i5) break;
  i5 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i5 + 1;
  i4 = HEAP8[i5 >> 0] | 0;
  i5 = HEAP32[25895] | 0;
  HEAP32[25895] = i5 + 1;
  HEAP8[111070 + i5 >> 0] = i4;
  if ((HEAP32[25895] | 0) == 1) if ((HEAPU8[111070] | 0 | 0) == 128) continue;
  if ((HEAP32[25895] | 0) == 2) continue;
  do if ((HEAP32[25895] | 0) == 3) if ((HEAPU8[111071] | 0 | 0) == 253) {
   if ((HEAPU8[111072] | 0 | 0) != 98) if ((HEAPU8[111072] | 0 | 0) != 99) break;
   HEAP32[25895] = 0;
   continue L1;
  } while (0);
  HEAP32[i7 >> 2] = 0;
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[25895] | 0)) break;
   _updatescript(HEAPU8[111070 + (HEAP32[i7 >> 2] | 0) >> 0] | 0);
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  if (HEAP32[26800] | 0) {
   HEAP8[111070 + (HEAP32[25895] | 0) >> 0] = 0;
   _add_buff(101884, 111070, HEAP32[25895] | 0);
   HEAP32[25476] = (HEAP32[25476] | 0) + (HEAP32[25895] | 0);
  }
  HEAP32[25895] = 0;
 }
 _may_sync_undo();
 HEAP32[26827] = (HEAP32[26827] | 0) + 1;
 STACKTOP = i3;
 return;
}

function _au_del_group(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _au_find_group(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAP32[i5 >> 2] | 0) == -2) {
  _emsg2(55871, HEAP32[i4 >> 2] | 0) | 0;
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[2732] | 0)) {
  _emsg(55897) | 0;
  STACKTOP = i3;
  return;
 }
 HEAP32[i8 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= 96) break;
  HEAP32[i7 >> 2] = HEAP32[101068 + (HEAP32[i6 >> 2] << 2) >> 2];
  while (1) {
   if (!(HEAP32[i7 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) {
    i2 = 11;
    break;
   }
   HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
  }
  if ((i2 | 0) == 11) {
   i2 = 0;
   _give_warning(55935, 1);
   HEAP32[i8 >> 2] = 1;
   HEAP32[i6 >> 2] = 96;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 _vim_free(HEAP32[(HEAP32[2727] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0);
 if (HEAP32[i8 >> 2] | 0) {
  i8 = _get_deleted_augroup() | 0;
  HEAP32[(HEAP32[2727] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] = i8;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[(HEAP32[2727] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] = 0;
  STACKTOP = i3;
  return;
 }
}

function _ex_wincmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 if ((HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0) == 103) i2 = 3; else if ((HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0) == 7) i2 = 3; else HEAP32[i6 >> 2] = (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 1;
 do if ((i2 | 0) == 3) {
  if (HEAPU8[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 1 >> 0] | 0 | 0) {
   HEAP32[i5 >> 2] = HEAPU8[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 1 >> 0];
   HEAP32[i6 >> 2] = (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 2;
   break;
  }
  _emsg(92453) | 0;
  STACKTOP = i3;
  return;
 } while (0);
 i2 = _check_nextcmd(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i2;
 HEAP32[i6 >> 2] = _skipwhite(HEAP32[i6 >> 2] | 0) | 0;
 if (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 34) if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0)) {
  _emsg(92453) | 0;
  STACKTOP = i3;
  return;
 }
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26852] = HEAP32[27129];
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) > 0) i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0; else i7 = 0;
 _do_window(HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0, i7, HEAP32[i5 >> 2] | 0);
 HEAP32[26852] = 0;
 STACKTOP = i3;
 return;
}

function _ex_open(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i2 + 96 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 _beginline(6);
 if ((HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0 | 0) != 47) {
  _check_cursor();
  i6 = HEAP32[i3 >> 2] | 0;
  i7 = i6 + 16 | 0;
  HEAP32[i7 >> 2] = 492;
  i8 = HEAP32[i3 >> 2] | 0;
  _do_exedit(i8, 0);
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[i5 >> 2] = _skip_regexp(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 47, HEAP32[26946] | 0, 0) | 0;
 HEAP8[HEAP32[i5 >> 2] >> 0] = 0;
 HEAP32[i4 >> 2] = _vim_regcomp(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[26946] | 0 ? 1 : 0) | 0;
 if (HEAP32[i4 >> 2] | 0) {
  HEAP32[i4 + 84 >> 2] = HEAP32[26933];
  HEAP32[i5 >> 2] = _ml_get_curline() | 0;
  if (_vim_regexec(i4, HEAP32[i5 >> 2] | 0, 0) | 0) HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = (HEAP32[i4 + 4 >> 2] | 0) - (HEAP32[i5 >> 2] | 0); else _emsg(93031) | 0;
  _vim_regfree(HEAP32[i4 >> 2] | 0);
 }
 i4 = _strlen(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i4;
 _check_cursor();
 i6 = HEAP32[i3 >> 2] | 0;
 i7 = i6 + 16 | 0;
 HEAP32[i7 >> 2] = 492;
 i8 = HEAP32[i3 >> 2] | 0;
 _do_exedit(i8, 0);
 STACKTOP = i2;
 return;
}

function _put_setnum(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = i5 + 32 | 0;
 i9 = i5 + 28 | 0;
 i10 = i5 + 24 | 0;
 i11 = i5 + 20 | 0;
 i12 = i5 + 16 | 0;
 i13 = i5 + 12 | 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 i4 = HEAP32[i9 >> 2] | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i7 + 4 >> 2] = i3;
 if ((_fprintf(i4, 71681, i7) | 0) < 0) {
  HEAP32[i8 >> 2] = 0;
  i14 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 if (_wc_use_keyname(HEAP32[i12 >> 2] | 0, i13) | 0) {
  i7 = _get_special_key_name(HEAP32[i13 >> 2] | 0, 0) | 0;
  if ((_fputs(i7, HEAP32[i9 >> 2] | 0) | 0) < 0) {
   HEAP32[i8 >> 2] = 0;
   i14 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i5;
   return i14 | 0;
  }
 } else {
  i7 = HEAP32[i9 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i12 >> 2] >> 2];
  if ((_fprintf(i7, 97769, i6) | 0) < 0) {
   HEAP32[i8 >> 2] = 0;
   i14 = HEAP32[i8 >> 2] | 0;
   STACKTOP = i5;
   return i14 | 0;
  }
 }
 if ((_put_eol(HEAP32[i9 >> 2] | 0) | 0) < 0) {
  HEAP32[i8 >> 2] = 0;
  i14 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 } else {
  HEAP32[i8 >> 2] = 1;
  i14 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i5;
  return i14 | 0;
 }
 return 0;
}

function _find_end_event(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 L1 : do if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 42) {
  if (HEAPU8[i2 + 1 >> 0] | 0 | 0) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) != 32) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) != 9) {
   _emsg2(53953, HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = 0;
   i9 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
  HEAP32[i7 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 } else {
  HEAP32[i7 >> 2] = i2;
  while (1) {
   if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break L1;
   if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 124) break L1;
   if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 32) i10 = 1; else i10 = (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 9;
   if (!(i10 ^ 1)) break L1;
   if ((_event_name2nr(HEAP32[i7 >> 2] | 0, i8) | 0) >= 96) break;
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  }
  i1 = HEAP32[i7 >> 2] | 0;
  if (HEAP32[i6 >> 2] | 0) _emsg2(53989, i1) | 0; else _emsg2(54013, i1) | 0;
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } while (0);
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _scroll_redraw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 i2 = HEAP32[i5 >> 2] | 0;
 if (HEAP32[i4 >> 2] | 0) _scrollup(i2, 1); else _scrolldown(i2, 1);
 L5 : do if (HEAP32[26971] | 0) {
  _cursor_correct();
  _check_cursor_moved(HEAP32[26881] | 0);
  i2 = (HEAP32[26881] | 0) + 108 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 128;
  while (1) {
   if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) break L5;
   i2 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
   i5 = HEAP32[i7 >> 2] | 0;
   if (HEAP32[i4 >> 2] | 0) {
    if ((i2 | 0) > (i5 | 0)) break L5;
    if (!(_cursor_down(1, 0) | 0)) break L5;
   } else {
    if ((i2 | 0) < (i5 | 0) | (HEAP32[i6 >> 2] | 0) == 1) break L5;
    if (!(_cursor_up(1, 0) | 0)) break L5;
   }
   _check_cursor_moved(HEAP32[26881] | 0);
   i5 = (HEAP32[26881] | 0) + 108 | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 128;
  }
 } while (0);
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) {
  _redraw_later(10);
  STACKTOP = i3;
  return;
 }
 _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 _redraw_later(10);
 STACKTOP = i3;
 return;
}

function _restore_snapshot_rec(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 if (!(HEAP8[HEAP32[i5 >> 2] >> 0] | 0)) {
  i2 = HEAP32[i5 >> 2] | 0;
  _frame_new_height(i2 | 0, HEAP32[i2 + 12 >> 2] | 0, 0, 0);
  i2 = HEAP32[i5 >> 2] | 0;
  _frame_new_width(i2 | 0, HEAP32[i2 + 4 >> 2] | 0, 0, 0);
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2];
 }
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) {
  HEAP32[i7 >> 2] = _restore_snapshot_rec(HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) | 0;
  if (HEAP32[i7 >> 2] | 0) HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 }
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0)) {
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = _restore_snapshot_rec(HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 i8 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _ff_get_visited_list(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 L1 : do if (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) {
  HEAP32[i7 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
  while (1) {
   if (!(HEAP32[i7 >> 2] | 0)) break L1;
   i2 = (_vim_fnamecmp(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0) == 0;
   i8 = HEAP32[i7 >> 2] | 0;
   if (i2) break;
   HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  }
  HEAP32[i4 >> 2] = i8;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } while (0);
 HEAP32[i7 >> 2] = _alloc(12) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = 0;
 i8 = _vim_strsave(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = i8;
 if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0)) {
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } else {
  HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
  HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 return 0;
}

function _u_freeheader(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if (HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) _u_freebranch(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 if (HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) + 8 >> 2] = 0;
 i3 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
 if (!(HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 500 >> 2] = i3; else HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 4 >> 2] = i3;
 i3 = HEAP32[i6 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 504 >> 2] = HEAP32[i3 >> 2];
  i9 = HEAP32[i5 >> 2] | 0;
  i10 = HEAP32[i6 >> 2] | 0;
  i11 = HEAP32[i7 >> 2] | 0;
  _u_freeentries(i9, i10, i11);
  STACKTOP = i4;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[i3 + 4 >> 2];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) break;
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2];
 }
 i9 = HEAP32[i5 >> 2] | 0;
 i10 = HEAP32[i6 >> 2] | 0;
 i11 = HEAP32[i7 >> 2] | 0;
 _u_freeentries(i9, i10, i11);
 STACKTOP = i4;
 return;
}

function _u_undoline() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 if (HEAP32[26840] | 0) {
  STACKTOP = i1;
  return;
 }
 if (HEAP32[(HEAP32[26773] | 0) + 540 >> 2] | 0) if ((HEAP32[(HEAP32[26773] | 0) + 544 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
  if (!(_u_savecommon((HEAP32[(HEAP32[26773] | 0) + 544 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[26773] | 0) + 544 >> 2] | 0) + 1 | 0, 0, 0) | 0)) {
   STACKTOP = i1;
   return;
  }
  HEAP32[i3 >> 2] = _u_save_line(HEAP32[(HEAP32[26773] | 0) + 544 >> 2] | 0) | 0;
  if (!(HEAP32[i3 >> 2] | 0)) {
   _do_outofmem_msg(0);
   STACKTOP = i1;
   return;
  }
  i4 = HEAP32[26773] | 0;
  _ml_replace(HEAP32[i4 + 544 >> 2] | 0, HEAP32[i4 + 540 >> 2] | 0, 1) | 0;
  _changed_bytes(HEAP32[(HEAP32[26773] | 0) + 544 >> 2] | 0, 0);
  _vim_free(HEAP32[(HEAP32[26773] | 0) + 540 >> 2] | 0);
  HEAP32[(HEAP32[26773] | 0) + 540 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[26773] | 0) + 548 >> 2];
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 544 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 548 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i2 >> 2];
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[26773] | 0) + 544 >> 2];
  _check_cursor_col();
  STACKTOP = i1;
  return;
 }
 _beep_flush();
 STACKTOP = i1;
 return;
}

function _regtry(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[26334] = (HEAP32[26325] | 0) + (HEAP32[i8 >> 2] | 0);
 HEAP32[26332] = 1;
 if (!(_regmatch((HEAP32[i7 >> 2] | 0) + 32 + 1 | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
  HEAP32[i6 >> 2] = 0;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 _cleanup_subexpr();
 do if (!(HEAP32[26312] | 0)) {
  if ((HEAP32[HEAP32[26316] >> 2] | 0) < 0) {
   HEAP32[HEAP32[26316] >> 2] = 0;
   HEAP32[(HEAP32[26316] | 0) + 4 >> 2] = HEAP32[i8 >> 2];
  }
  if ((HEAP32[HEAP32[26317] >> 2] | 0) < 0) {
   HEAP32[HEAP32[26317] >> 2] = HEAP32[26326];
   HEAP32[(HEAP32[26317] | 0) + 4 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0);
   break;
  } else {
   HEAP32[26326] = HEAP32[HEAP32[26317] >> 2];
   break;
  }
 } else {
  if (!(HEAP32[HEAP32[26314] >> 2] | 0)) HEAP32[HEAP32[26314] >> 2] = (HEAP32[26325] | 0) + (HEAP32[i8 >> 2] | 0);
  if (!(HEAP32[HEAP32[26315] >> 2] | 0)) HEAP32[HEAP32[26315] >> 2] = HEAP32[26334];
 } while (0);
 HEAP32[i6 >> 2] = 1 + (HEAP32[26326] | 0);
 i11 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _copy_yank_reg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[26084];
 HEAP32[26084] = HEAP32[i4 >> 2];
 _free_yank_all();
 i4 = HEAP32[26084] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = _lalloc_clear(HEAP32[(HEAP32[26084] | 0) + 4 >> 2] << 2, 1) | 0;
 HEAP32[HEAP32[26084] >> 2] = i1;
 if (!(HEAP32[HEAP32[26084] >> 2] | 0)) {
  HEAP32[(HEAP32[26084] | 0) + 4 >> 2] = 0;
  i7 = HEAP32[i5 >> 2] | 0;
  HEAP32[26084] = i7;
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0)) {
   i2 = 8;
   break;
  }
  i1 = _vim_strsave(HEAP32[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[(HEAP32[HEAP32[26084] >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] = i1;
  i8 = HEAP32[i6 >> 2] | 0;
  if (!i1) break;
  HEAP32[i6 >> 2] = i8 + 1;
 }
 if ((i2 | 0) == 8) {
  i7 = HEAP32[i5 >> 2] | 0;
  HEAP32[26084] = i7;
  STACKTOP = i3;
  return;
 }
 _free_yank(i8);
 HEAP32[(HEAP32[26084] | 0) + 4 >> 2] = 0;
 i7 = HEAP32[i5 >> 2] | 0;
 HEAP32[26084] = i7;
 STACKTOP = i3;
 return;
}

function _find_command_1791(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 i9 = i3 + 4 | 0;
 i10 = i3;
 HEAP32[i5 >> 2] = i1;
 if ((HEAP32[i5 >> 2] | 0) < 0) HEAP32[i5 >> 2] = 0 - (HEAP32[i5 >> 2] | 0);
 if ((HEAP32[i5 >> 2] | 0) <= (HEAP32[26060] | 0)) {
  HEAP32[i4 >> 2] = HEAP16[109596 + (HEAP32[i5 >> 2] << 1) >> 1];
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 HEAP32[i9 >> 2] = (HEAP32[26060] | 0) + 1;
 HEAP32[i8 >> 2] = 187;
 HEAP32[i7 >> 2] = -1;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) > (HEAP32[i8 >> 2] | 0)) break;
  HEAP32[i6 >> 2] = ((HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0) / 2 | 0;
  HEAP32[i10 >> 2] = HEAP32[13020 + ((HEAP16[109596 + (HEAP32[i6 >> 2] << 1) >> 1] | 0) * 12 | 0) >> 2];
  if ((HEAP32[i10 >> 2] | 0) < 0) HEAP32[i10 >> 2] = 0 - (HEAP32[i10 >> 2] | 0);
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) {
   i2 = 10;
   break;
  }
  i1 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[i5 >> 2] | 0) > (HEAP32[i10 >> 2] | 0)) HEAP32[i9 >> 2] = i1 + 1; else HEAP32[i8 >> 2] = i1 - 1;
 }
 if ((i2 | 0) == 10) HEAP32[i7 >> 2] = HEAP16[109596 + (HEAP32[i6 >> 2] << 1) >> 1];
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i11 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i11 | 0;
}

function _vim_unescape_csi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 128) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) == 254) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0 | 0) == 88) {
   i4 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = -128;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 3;
  } else i2 = 7; else i2 = 7; else i2 = 7;
  do if ((i2 | 0) == 7) {
   i2 = 0;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 128) i2 = 9; else if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 155) i2 = 9;
   if ((i2 | 0) == 9) {
    i2 = 0;
    if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) == 253) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0 | 0) == 81) {
     i4 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = -101;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 3;
     break;
    }
   }
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i4 + 1;
   i1 = HEAP8[i4 >> 0] | 0;
   i4 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i1;
  } while (0);
 }
 HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
 STACKTOP = i3;
 return;
}

function _get_map_mode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = i2 + 1;
 HEAP32[i7 >> 2] = HEAPU8[i2 >> 0];
 do if ((HEAP32[i7 >> 2] | 0) == 105) HEAP32[i8 >> 2] = 16; else {
  if ((HEAP32[i7 >> 2] | 0) == 108) {
   HEAP32[i8 >> 2] = 32;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 99) {
   HEAP32[i8 >> 2] = 8;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 110) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 111) {
   HEAP32[i8 >> 2] = 1;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 118) {
   HEAP32[i8 >> 2] = 4098;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 120) {
   HEAP32[i8 >> 2] = 2;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 115) {
   HEAP32[i8 >> 2] = 4096;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 111) {
   HEAP32[i8 >> 2] = 4;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 116) {
   HEAP32[i8 >> 2] = 8192;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  if (HEAP32[i5 >> 2] | 0) {
   HEAP32[i8 >> 2] = 24;
   break;
  } else {
   HEAP32[i8 >> 2] = 4103;
   break;
  }
 } while (0);
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[i6 >> 2];
 STACKTOP = i3;
 return HEAP32[i8 >> 2] | 0;
}

function _clip_update_modeless_selection(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 16 | 0;
 i9 = i7 + 12 | 0;
 i10 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i12 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 if ((HEAP32[i9 >> 2] | 0) != (HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0)) i6 = 3; else if ((HEAP32[i10 >> 2] | 0) != (HEAP32[(HEAP32[i8 >> 2] | 0) + 8 + 4 >> 2] | 0)) i6 = 3;
 if ((i6 | 0) == 3) {
  i6 = (HEAP32[i8 >> 2] | 0) + 8 | 0;
  _clip_invert_area(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i6 + 4 >> 2] | 0, 3);
  HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] = HEAP32[i9 >> 2];
  HEAP32[(HEAP32[i8 >> 2] | 0) + 8 + 4 >> 2] = HEAP32[i10 >> 2];
 }
 if ((HEAP32[i11 >> 2] | 0) == (HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0)) if ((HEAP32[i12 >> 2] | 0) == (HEAP32[(HEAP32[i8 >> 2] | 0) + 16 + 4 >> 2] | 0)) {
  STACKTOP = i7;
  return;
 }
 i10 = (HEAP32[i8 >> 2] | 0) + 16 | 0;
 _clip_invert_area(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, 3);
 HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] = HEAP32[i11 >> 2];
 HEAP32[(HEAP32[i8 >> 2] | 0) + 16 + 4 >> 2] = HEAP32[i12 >> 2];
 STACKTOP = i7;
 return;
}

function _screenclear2() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[10177] | 0) == 2 | (HEAP32[26691] | 0) == 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[26627] | 0) != 0 & (HEAP32[26628] | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 if (!(HEAP32[26627] | 0)) HEAP32[26455] = -1;
 _screen_stop_highlight();
 _clip_scroll_selection(9999);
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[10173] | 0)) break;
  _lineclear(HEAP32[(HEAP32[26693] | 0) + (HEAP32[i2 >> 2] << 2) >> 2] | 0, HEAP32[10174] | 0, 0);
  HEAP8[(HEAP32[26694] | 0) + (HEAP32[i2 >> 2] | 0) >> 0] = 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 if (_can_clear(HEAP32[26526] | 0) | 0) {
  _out_str(HEAP32[26526] | 0);
  HEAP32[26700] = 0;
  HEAP32[26701] = 0;
 } else {
  HEAP32[i2 >> 2] = 0;
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[10173] | 0)) break;
   _lineinvalid(HEAP32[(HEAP32[26693] | 0) + (HEAP32[i2 >> 2] << 2) >> 2] | 0, HEAP32[10174] | 0);
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  }
  HEAP32[26700] = 1;
 }
 HEAP32[26704] = 1;
 _win_rest_invalid(HEAP32[26887] | 0);
 HEAP32[26699] = 1;
 HEAP32[26770] = 1;
 if ((HEAP32[26828] | 0) == 50) HEAP32[26828] = 40;
 _compute_cmdrow();
 HEAP32[26877] = HEAP32[26876];
 HEAP32[27043] = 0;
 _screen_start();
 HEAP32[27044] = 0;
 HEAP32[26712] = 0;
 HEAP32[26711] = 0;
 STACKTOP = i1;
 return;
}

function _ins_reg() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = HEAP32[26788];
 HEAP32[25211] = 0;
 if (_redrawing() | 0) if (!(_char_avail() | 0)) {
  _ins_redraw(0);
  _edit_putchar(34, 1);
 }
 HEAP32[26802] = (HEAP32[26802] | 0) + 1;
 HEAP32[i4 >> 2] = _plain_vgetc() | 0;
 if ((HEAP32[i4 >> 2] | 0) == 18 | (HEAP32[i4 >> 2] | 0) == 15 | (HEAP32[i4 >> 2] | 0) == 16) {
  HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i4 >> 2] = _plain_vgetc() | 0;
 }
 HEAP32[26802] = (HEAP32[26802] | 0) + -1;
 do if ((HEAP32[i5 >> 2] | 0) == 15 | (HEAP32[i5 >> 2] | 0) == 16) {
  _AppendCharToRedobuff(18);
  _AppendCharToRedobuff(HEAP32[i5 >> 2] | 0);
  _AppendCharToRedobuff(HEAP32[i4 >> 2] | 0);
  _do_put(HEAP32[i4 >> 2] | 0, -1, 1, ((HEAP32[i5 >> 2] | 0) == 16 ? 1 : 0) | 2);
 } else {
  if (!(_insert_reg(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0)) {
   _vim_beep(32768);
   HEAP32[i3 >> 2] = 1;
   break;
  }
  if (HEAP32[27160] | 0) HEAP32[i3 >> 2] = 1;
 } while (0);
 if (HEAP32[i3 >> 2] | 0) i1 = 14; else if (_stuff_empty() | 0) i1 = 14;
 if ((i1 | 0) == 14) _edit_unputchar();
 if (!((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[26788] | 0) != 0)) {
  STACKTOP = i2;
  return;
 }
 _end_visual_mode();
 STACKTOP = i2;
 return;
}

function _delete_recursive(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 28 | 0;
 i5 = i2 + 24 | 0;
 i6 = i2 + 20 | 0;
 i7 = i2 + 16 | 0;
 i8 = i2 + 12 | 0;
 i9 = i2 + 8 | 0;
 i10 = i2 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 if (_mch_isrealdir(HEAP32[i5 >> 2] | 0) | 0) {
  i1 = HEAP32[26885] | 0;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  _vim_snprintf(i1, 4096, 55834, i3) | 0;
  HEAP32[i10 >> 2] = _vim_strsave(HEAP32[26885] | 0) | 0;
  if (!(HEAP32[i10 >> 2] | 0)) {
   HEAP32[i4 >> 2] = -1;
   i11 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i2;
   return i11 | 0;
  }
  if ((_gen_expand_wildcards(1, i10, i8, i7, 53283) | 0) == 1) {
   HEAP32[i9 >> 2] = 0;
   while (1) {
    if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) break;
    if (_delete_recursive(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0) | 0) HEAP32[i6 >> 2] = -1;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   }
   _FreeWild(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  } else HEAP32[i6 >> 2] = -1;
  _vim_free(HEAP32[i10 >> 2] | 0);
  _rmdir(HEAP32[i5 >> 2] | 0) | 0;
 } else {
  i10 = (_unlink(HEAP32[i5 >> 2] | 0) | 0) == 0;
  HEAP32[i6 >> 2] = i10 ? 0 : -1;
 }
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 i11 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i11 | 0;
}

function _init_highlight(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 L1 : do if (HEAP32[i4 >> 2] | 0) {
  HEAP32[26485] = 1;
  HEAP32[i7 >> 2] = 30128;
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0)) break L1;
   _do_highlight(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0, HEAP32[i5 >> 2] | 0, 1);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
 } else if (!(HEAP32[26485] | 0)) {
  STACKTOP = i3;
  return;
 } while (0);
 if ((HEAPU8[HEAP32[26893] >> 0] | 0 | 0) == 108) HEAP32[i7 >> 2] = 30188; else HEAP32[i7 >> 2] = 30244;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0)) break;
  _do_highlight(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0, HEAP32[i5 >> 2] | 0, 1);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((HEAP32[26734] | 0) > 8) {
  _do_highlight((HEAPU8[HEAP32[26893] >> 0] | 0 | 0) == 108 ? 74767 : 74803, 0, 1);
  STACKTOP = i3;
  return;
 }
 _do_highlight(74838, 0, 1);
 if ((HEAPU8[HEAP32[26893] >> 0] | 0 | 0) != 108) {
  STACKTOP = i3;
  return;
 }
 _do_highlight(74872, 0, 1);
 STACKTOP = i3;
 return;
}

function _save_typeahead(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = 107268;
 i5 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  i1 = i1 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i1 | 0) < (i5 | 0));
 i6 = (_alloc_typebuf() | 0) == 1 & 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] = i6;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0)) {
  i1 = 107268;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i1 + 36 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 4 | 0;
  } while ((i1 | 0) < (i5 | 0));
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = HEAP32[2733];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] = HEAP32[25637];
 HEAP32[2733] = -1;
 i4 = (HEAP32[i3 >> 2] | 0) + 48 | 0;
 HEAP32[i4 >> 2] = HEAP32[25482];
 HEAP32[i4 + 4 >> 2] = HEAP32[25483];
 HEAP32[i4 + 8 >> 2] = HEAP32[25484];
 HEAP32[i4 + 12 >> 2] = HEAP32[25485];
 HEAP32[i4 + 16 >> 2] = HEAP32[25486];
 HEAP32[25482] = 0;
 i4 = (HEAP32[i3 >> 2] | 0) + 68 | 0;
 HEAP32[i4 >> 2] = HEAP32[25487];
 HEAP32[i4 + 4 >> 2] = HEAP32[25488];
 HEAP32[i4 + 8 >> 2] = HEAP32[25489];
 HEAP32[i4 + 12 >> 2] = HEAP32[25490];
 HEAP32[i4 + 16 >> 2] = HEAP32[25491];
 HEAP32[25487] = 0;
 i4 = _get_input_buf() | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = i4;
 STACKTOP = i2;
 return;
}

function _mch_get_shellsize() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 20 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 24 | 0;
 i9 = i2 + 4 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i9 >> 2] = 1;
 if (!(_isatty(HEAP32[i9 >> 2] | 0) | 0)) if (_isatty(HEAP32[26833] | 0) | 0) HEAP32[i9 >> 2] = HEAP32[26833];
 i10 = HEAP32[i9 >> 2] | 0;
 HEAP32[i3 >> 2] = i8;
 if (!(_ioctl(i10, 21523, i3) | 0)) {
  HEAP32[i6 >> 2] = HEAPU16[i8 + 2 >> 1];
  HEAP32[i5 >> 2] = HEAPU16[i8 >> 1];
 }
 if ((HEAP32[i6 >> 2] | 0) == 0 | (HEAP32[i5 >> 2] | 0) == 0) i1 = 8; else if (_vim_strchr(HEAP32[26904] | 0, 124) | 0) i1 = 8;
 if ((i1 | 0) == 8) {
  i1 = _getenv(72042) | 0;
  HEAP32[i7 >> 2] = i1;
  if (i1 | 0) HEAP32[i5 >> 2] = _atoi(HEAP32[i7 >> 2] | 0) | 0;
  i1 = _getenv(72048) | 0;
  HEAP32[i7 >> 2] = i1;
  if (i1 | 0) HEAP32[i6 >> 2] = _atoi(HEAP32[i7 >> 2] | 0) | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) <= 0 | (HEAP32[i5 >> 2] | 0) <= 0) {
  HEAP32[i4 >> 2] = 0;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 } else {
  HEAP32[10173] = HEAP32[i5 >> 2];
  HEAP32[10174] = HEAP32[i6 >> 2];
  _limit_screen_size();
  HEAP32[i4 >> 2] = 1;
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i11 | 0;
 }
 return 0;
}

function _clip_modeless(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (!(HEAPU16[54223] | 0)) i4 = 3; else if ((HEAPU16[54223] | 0 | 0) == 2) i4 = 3; else i4 = 4;
 if ((i4 | 0) == 3) if (HEAP32[26698] & 32 | 0) i10 = 1; else i4 = 4;
 if ((i4 | 0) == 4) if ((HEAPU16[54223] | 0 | 0) == 1) i10 = (HEAP32[26698] & 64 | 0) != 0; else i10 = 0;
 HEAP32[i9 >> 2] = i10 & 1;
 if ((HEAP32[i7 >> 2] | 0) != 0 & (HEAP32[i6 >> 2] | 0) == 2) {
  if (!(HEAPU16[54222] | 0)) _clip_start_selection(HEAP32[27096] | 0, HEAP32[27095] | 0, 0);
  _clip_process_selection(HEAP32[i6 >> 2] | 0, HEAP32[27096] | 0, HEAP32[27095] | 0, HEAP32[i9 >> 2] | 0);
  STACKTOP = i5;
  return;
 }
 if (HEAP32[i7 >> 2] | 0) {
  _clip_start_selection(HEAP32[27096] | 0, HEAP32[27095] | 0, HEAP32[i9 >> 2] | 0);
  STACKTOP = i5;
  return;
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  _clip_process_selection(3, HEAP32[27096] | 0, HEAP32[27095] | 0, 0);
  STACKTOP = i5;
  return;
 }
 if (!(HEAPU16[54222] | 0)) {
  STACKTOP = i5;
  return;
 }
 _clip_process_selection(HEAP32[i6 >> 2] | 0, HEAP32[27096] | 0, HEAP32[27095] | 0, HEAP32[i9 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _close_others(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (_one_window() | 0) {
  if ((HEAP32[i4 >> 2] | 0) == 0 | (HEAP32[26744] | 0) != 0) {
   STACKTOP = i3;
   return;
  }
  _msg(84091) | 0;
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[26887];
 while (1) {
  if (!(_win_valid(HEAP32[i6 >> 2] | 0) | 0)) break;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  do if ((HEAP32[i6 >> 2] | 0) != (HEAP32[26881] | 0)) {
   HEAP32[i8 >> 2] = _can_abandon(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
   if (!(_win_valid(HEAP32[i6 >> 2] | 0) | 0)) {
    HEAP32[i7 >> 2] = HEAP32[26887];
    break;
   }
   if (HEAP32[i8 >> 2] | 0) {
    i2 = HEAP32[i6 >> 2] | 0;
    if (_buf_hide(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) i9 = 0; else i9 = (_bufIsChanged(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0) != 0 ^ 1;
    _win_close(i2, i9 & 1) | 0;
   }
  } while (0);
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 }
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) {
  STACKTOP = i3;
  return;
 }
 _emsg(84171) | 0;
 STACKTOP = i3;
 return;
}

function _find_builtin_term(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 31156;
 while (1) {
  i7 = HEAP32[i6 >> 2] | 0;
  if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
   i2 = 13;
   break;
  }
  if (!(HEAP32[i7 >> 2] | 0)) {
   if (!(_strcmp(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0, 80009) | 0)) if (_vim_is_iris(HEAP32[i5 >> 2] | 0) | 0) {
    i2 = 6;
    break;
   }
   if (!(_strcmp(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0, 79252) | 0)) if (_vim_is_xterm(HEAP32[i5 >> 2] | 0) | 0) {
    i2 = 9;
    break;
   }
   if (!(_strcmp(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) | 0)) {
    i2 = 11;
    break;
   }
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 8;
 }
 if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 11) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 13) {
  HEAP32[i4 >> 2] = i7;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _script_get(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 36 | 0;
 i5 = i3 + 32 | 0;
 i6 = i3 + 28 | 0;
 i7 = i3 + 24 | 0;
 i8 = i3 + 20 | 0;
 i9 = i3 + 40 | 0;
 i10 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 HEAP8[i9 >> 0] = HEAP8[98579] | 0;
 HEAP8[i9 + 1 >> 0] = HEAP8[98580] | 0;
 if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 60) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 60) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2] | 0) {
  _ga_init2(i10, 1, 1024);
  if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0) HEAP32[i8 >> 2] = _skipwhite((HEAP32[i6 >> 2] | 0) + 2 | 0) | 0; else HEAP32[i8 >> 2] = i9;
  while (1) {
   i9 = HEAP32[i5 >> 2] | 0;
   HEAP32[i7 >> 2] = FUNCTION_TABLE_iiii[HEAP32[i9 + 92 >> 2] & 15](0, HEAP32[i9 + 96 >> 2] | 0, 0) | 0;
   if (!(HEAP32[i7 >> 2] | 0)) break;
   if (!(_strcmp(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0)) break;
   _ga_concat(i10, HEAP32[i7 >> 2] | 0);
   _ga_append(i10, 10);
   _vim_free(HEAP32[i7 >> 2] | 0);
  }
  _vim_free(HEAP32[i7 >> 2] | 0);
  _ga_append(i10, 0);
  HEAP32[i4 >> 2] = HEAP32[i10 + 16 >> 2];
  i11 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i11 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i11 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i11 | 0;
}

function _deathtrap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[26286] | 0) != 0 & (HEAP32[i4 >> 2] | 0) == 3) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[26288] | 0)) if ((HEAP32[i4 >> 2] | 0) == 1 | (HEAP32[i4 >> 2] | 0) == 3 | (HEAP32[i4 >> 2] | 0) == 15 | (HEAP32[i4 >> 2] | 0) == 30 | (HEAP32[i4 >> 2] | 0) == 10 | (HEAP32[i4 >> 2] | 0) == 12) if (!(_vim_handle_signal(HEAP32[i4 >> 2] | 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26288] = (HEAP32[26288] | 0) + 1;
 _block_autocmds();
 HEAP32[26780] = HEAP32[26288];
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[29472 + ((HEAP32[i5 >> 2] | 0) * 12 | 0) >> 2] | 0) == -1) break;
  if ((HEAP32[i4 >> 2] | 0) == (HEAP32[29472 + ((HEAP32[i5 >> 2] | 0) * 12 | 0) >> 2] | 0)) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 HEAP32[26289] = HEAP32[i4 >> 2];
 HEAP32[26781] = 0;
 if ((HEAP32[26288] | 0) >= 3) {
  _reset_signals();
  _may_core_dump();
  if ((HEAP32[26288] | 0) >= 4) __exit(8); else _exit(7);
 }
 if ((HEAP32[26288] | 0) == 2) {
  _out_str(71821);
  _out_flush();
  _getout(1);
 }
 i4 = HEAP32[26882] | 0;
 HEAP32[i3 >> 2] = HEAP32[29472 + ((HEAP32[i5 >> 2] | 0) * 12 | 0) + 4 >> 2];
 _sprintf(i4, 71850, i3) | 0;
 _preserve_exit();
 STACKTOP = i2;
 return;
}

function _set_string_option(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 28 | 0;
 i6 = i4 + 24 | 0;
 i7 = i4 + 20 | 0;
 i8 = i4 + 16 | 0;
 i9 = i4 + 12 | 0;
 i10 = i4 + 8 | 0;
 i11 = i4 + 4 | 0;
 i12 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i12 >> 2] = 0;
 if (!(HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i13 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i13 | 0;
 }
 HEAP32[i9 >> 2] = _vim_strsave(HEAP32[i7 >> 2] | 0) | 0;
 if (HEAP32[i9 >> 2] | 0) {
  if (!(HEAP32[i8 >> 2] & 6)) i14 = HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 16 >> 2] & 4096 | 0 ? 2 : 4; else i14 = HEAP32[i8 >> 2] | 0;
  HEAP32[i10 >> 2] = _get_varp_scope(15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) | 0, i14) | 0;
  HEAP32[i11 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
  HEAP32[HEAP32[i10 >> 2] >> 2] = HEAP32[i9 >> 2];
  i9 = _did_set_string_option(HEAP32[i6 >> 2] | 0, HEAP32[i10 >> 2] | 0, 1, HEAP32[i11 >> 2] | 0, 0, HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i12 >> 2] = i9;
  if (!i9) _did_set_option(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0, 1);
 }
 HEAP32[i5 >> 2] = HEAP32[i12 >> 2];
 i13 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i13 | 0;
}

function _gui_position_components(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i2 + 16 >> 2] = i1;
 HEAP32[26759] = (HEAP32[26759] | 0) + 1;
 HEAP32[i3 >> 2] = 0;
 if (HEAP32[26661] | 0) HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[26647] | 0);
 HEAP32[i4 >> 2] = 0;
 i1 = Math_imul(HEAP32[26640] | 0, HEAP32[26665] | 0) | 0;
 HEAP32[i5 >> 2] = i1 + (HEAP32[26669] << 1);
 i1 = Math_imul(HEAP32[26641] | 0, HEAP32[26666] | 0) | 0;
 HEAP32[i6 >> 2] = i1 + (HEAP32[26669] << 1);
 _gui_mch_set_text_area_pos(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 if (!(HEAP32[26663] | 0)) {
  HEAP32[26649] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  i8 = HEAP32[i5 >> 2] | 0;
  i9 = i7 + i8 | 0;
  HEAP32[26650] = i9;
  i10 = HEAP32[26759] | 0;
  i11 = i10 + -1 | 0;
  HEAP32[26759] = i11;
  STACKTOP = i2;
  return;
 }
 _gui_mch_set_scrollbar_pos(106604, HEAP32[i3 >> 2] | 0, (HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0, HEAP32[i5 >> 2] | 0, HEAP32[26648] | 0);
 HEAP32[26649] = 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i8 = HEAP32[i5 >> 2] | 0;
 i9 = i7 + i8 | 0;
 HEAP32[26650] = i9;
 i10 = HEAP32[26759] | 0;
 i11 = i10 + -1 | 0;
 HEAP32[26759] = i11;
 STACKTOP = i2;
 return;
}

function _ex_operators(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 84 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 _clear_oparg(i4);
 HEAP32[i4 + 4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 72 >> 2];
 HEAP32[i4 + 28 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2];
 HEAP32[i4 + 36 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 + 52 >> 2] = (HEAP32[i1 + 40 >> 2] | 0) - (HEAP32[i1 + 36 >> 2] | 0) + 1;
 HEAP32[i4 + 8 >> 2] = 1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) != 530) {
  _setpcmark();
  HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2];
  _beginline(6);
 }
 if (HEAP32[26788] | 0) _end_visual_mode();
 switch (HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) {
 case 103:
  {
   HEAP32[i4 >> 2] = 1;
   _op_delete(i4) | 0;
   i5 = HEAP32[i3 >> 2] | 0;
   _ex_may_print(i5);
   STACKTOP = i2;
   return;
  }
 case 530:
  {
   HEAP32[i4 >> 2] = 2;
   _op_yank(i4, 0, 1) | 0;
   i5 = HEAP32[i3 >> 2] | 0;
   _ex_may_print(i5);
   STACKTOP = i2;
   return;
  }
 default:
  {
   if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 538) HEAP32[i4 >> 2] = 5; else HEAP32[i4 >> 2] = 4;
   _op_shift(i4, 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] | 0);
   i5 = HEAP32[i3 >> 2] | 0;
   _ex_may_print(i5);
   STACKTOP = i2;
   return;
  }
 }
}

function _expand_showtail(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) != 2) if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) != 32) if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) != 3) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = _gettail(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0;
 if ((HEAP32[i7 >> 2] | 0) == (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
   i2 = 14;
   break;
  }
  i5 = (_rem_backslash(HEAP32[i6 >> 2] | 0) | 0) != 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (i5) HEAP32[i6 >> 2] = i1 + 1; else if (_vim_strchr(51854, HEAPU8[i1 >> 0] | 0) | 0) {
   i2 = 12;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 12) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 14) {
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _nv_search(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 63) if ((HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) == 15) {
  HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = 103;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 63;
  _nv_operator(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 i6 = _getcmdline(HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0, 0) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = i6;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) {
  _clearop(HEAP32[i4 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 i6 = i4 | 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 i7 = HEAP32[i4 + 40 >> 2] | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) i8 = 1; else {
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i9 = (HEAP32[i5 + 4 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0); else i9 = 0;
  i8 = i9 ^ 1;
 }
 _normal_search(i6, i1, i7, i8 ? 0 : 512) | 0;
 STACKTOP = i2;
 return;
}

function _mf_close(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) >= 0) if ((_close(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) | 0) < 0) _emsg(93708) | 0;
 if (HEAP32[i5 >> 2] | 0) if (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) _unlink(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2];
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) break;
  i5 = Math_imul(HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 592 >> 2] | 0) | 0;
  HEAP32[27225] = (HEAP32[27225] | 0) - i5;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  _mf_free_bhdr(HEAP32[i6 >> 2] | 0);
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 }
 while (1) {
  i8 = HEAP32[i4 >> 2] | 0;
  if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0)) break;
  _vim_free(_mf_rem_free(i8) | 0);
 }
 _mf_hash_free(i8 + 32 | 0);
 _mf_hash_free_all((HEAP32[i4 >> 2] | 0) + 304 | 0);
 _vim_free(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0);
 _vim_free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _otherfile_buf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i6 = i5 + 88 | 0;
 i7 = i5 + 84 | 0;
 i8 = i5 + 80 | 0;
 i9 = i5 + 76 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 if (HEAP32[i8 >> 2] | 0) if (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0) {
  if (!(_vim_fnamecmp(HEAP32[i8 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 68 >> 2] | 0) | 0)) {
   HEAP32[i6 >> 2] = 0;
   i11 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i11 | 0;
  }
  if (!(HEAP32[i9 >> 2] | 0)) {
   if (HEAP32[(HEAP32[i7 >> 2] | 0) + 80 >> 2] | 0) {
    if ((_stat(HEAP32[i8 >> 2] | 0, i10) | 0) < 0) i4 = 10;
   } else i4 = 10;
   if ((i4 | 0) == 10) HEAP32[i10 >> 2] = -1;
   HEAP32[i9 >> 2] = i10;
  }
  if (_buf_same_ino(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) {
   _buf_setino(HEAP32[i7 >> 2] | 0);
   if (_buf_same_ino(HEAP32[i7 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0) {
    HEAP32[i6 >> 2] = 0;
    i11 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i5;
    return i11 | 0;
   }
  }
  HEAP32[i6 >> 2] = 1;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 HEAP32[i6 >> 2] = 1;
 i11 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _ins_str(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 24 | 0;
 i4 = i2 + 20 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = _strlen(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 HEAP32[i4 >> 2] = _ml_get(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = _strlen(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = _alloc_check((HEAP32[i7 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + 1 | 0) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i8 >> 2] | 0) > 0) _memmove(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 _memmove((HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0, HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 _memmove((HEAP32[i5 >> 2] | 0) + i3 + (HEAP32[i6 >> 2] | 0) | 0, (HEAP32[i4 >> 2] | 0) + i3 | 0, (HEAP32[i7 >> 2] | 0) - i3 + 1 | 0) | 0;
 _ml_replace(HEAP32[i9 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 _changed_bytes(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0);
 i8 = (HEAP32[26881] | 0) + 24 + 4 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _mf_close_file(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) < 0) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[i5 >> 2] | 0) {
  HEAP32[26774] = 1;
  HEAP32[i7 >> 2] = 1;
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) > (HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) break;
   _ml_get_buf(HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
  HEAP32[26774] = 0;
 }
 if ((_close(HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) | 0) < 0) _emsg(93708) | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = -1;
 if (!(HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _unlink(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0;
 if (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) {
  _vim_free(HEAP32[HEAP32[i6 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
 }
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = i3;
 return;
}

function _showoneopt(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[26787];
 HEAP32[26787] = 0;
 HEAP32[26715] = 1;
 HEAP32[i7 >> 2] = _get_varp_scope(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 1 | 0) {
  if ((HEAP32[i7 >> 2] | 0) == ((HEAP32[26773] | 0) + 108 | 0)) {
   if (_curbufIsChanged() | 0) {
    i3 = 6;
    break;
   }
  } else if (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) {
   i3 = 6;
   break;
  }
  _msg_puts(63495);
 } else i3 = 6; while (0);
 do if ((i3 | 0) == 6) {
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 1 | 0) if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) < 0) {
   _msg_puts(97173);
   break;
  }
  _msg_puts(71550);
 } while (0);
 _msg_puts(HEAP32[HEAP32[i5 >> 2] >> 2] | 0);
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 1 | 0) {
  i9 = HEAP32[i8 >> 2] | 0;
  HEAP32[26787] = i9;
  HEAP32[26715] = 0;
  STACKTOP = i4;
  return;
 }
 _msg_putchar(61);
 _option_value2string(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 _msg_outtrans(HEAP32[26885] | 0) | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[26787] = i9;
 HEAP32[26715] = 0;
 STACKTOP = i4;
 return;
}

function _setlocale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 do if (i1 >>> 0 > 6) i5 = 0; else {
  ___lock(109528);
  if ((i1 | 0) != 6) {
   i6 = _setlocale_one_unlocked(i1, i2) | 0;
   ___unlock(109528);
   i5 = i6;
   break;
  }
  if (i2 | 0) {
   i6 = i4;
   i7 = 100599;
   i8 = i6 + 16 | 0;
   do {
    HEAP8[i6 >> 0] = HEAP8[i7 >> 0] | 0;
    i6 = i6 + 1 | 0;
    i7 = i7 + 1 | 0;
   } while ((i6 | 0) < (i8 | 0));
   i7 = 0;
   i6 = i2;
   while (1) {
    i8 = ___strchrnul(i6, 59) | 0;
    i9 = i8 - i6 | 0;
    if ((i9 | 0) < 16) {
     _memcpy(i4 | 0, i6 | 0, i9 | 0) | 0;
     HEAP8[i4 + i9 >> 0] = 0;
     i10 = (HEAP8[i8 >> 0] | 0) == 0 ? i6 : i8 + 1 | 0;
    } else i10 = i6;
    _setlocale_one_unlocked(i7, i4) | 0;
    i7 = i7 + 1 | 0;
    if ((i7 | 0) == 6) break; else i6 = i10;
   }
  }
  i6 = 115120;
  i7 = 0;
  while (1) {
   i8 = HEAP32[109488 + (i7 << 2) >> 2] | 0;
   i9 = (i8 | 0) == 0 ? 100615 : i8 + 8 | 0;
   i11 = _strlen(i9) | 0;
   _memcpy(i6 | 0, i9 | 0, i11 | 0) | 0;
   HEAP8[i6 + i11 >> 0] = 59;
   i7 = i7 + 1 | 0;
   if ((i7 | 0) == 6) break; else i6 = i6 + (i11 + 1) | 0;
  }
  HEAP8[i6 + i11 >> 0] = 0;
  ___unlock(109528);
  i5 = 115120;
 } while (0);
 STACKTOP = i3;
 return i5 | 0;
}

function _unadjust_for_sel() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 do if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) {
  if ((HEAP32[27117] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[27118] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) break;
  if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) if ((HEAP32[27117] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) i1 = 7; else i1 = 8; else if ((HEAP32[27118] | 0) < (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i1 = 7; else i1 = 8;
  if ((i1 | 0) == 7) HEAP32[i4 >> 2] = (HEAP32[26881] | 0) + 24; else if ((i1 | 0) == 8) HEAP32[i4 >> 2] = 108468;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) > 0) {
   i6 = i5 + 4 | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) > 1) {
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
   i5 = _strlen(_ml_get(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) | 0;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i5;
   HEAP32[i3 >> 2] = 1;
   i7 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i7 | 0;
  }
 } while (0);
 HEAP32[i3 >> 2] = 0;
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _pat_has_uppercase(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 L1 : while (1) {
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
   i2 = 17;
   break;
  }
  i5 = HEAP32[i6 >> 2] | 0;
  do if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 92) {
   if ((HEAPU8[i5 + 1 >> 0] | 0 | 0) == 95) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0 | 0) {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
    break;
   }
   if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0 | 0) == 37) if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] | 0 | 0) {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 3;
    break;
   }
   i1 = HEAP32[i6 >> 2] | 0;
   if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0 | 0) {
    HEAP32[i6 >> 2] = i1 + 2;
    break;
   } else {
    HEAP32[i6 >> 2] = i1 + 1;
    break;
   }
  } else {
   if (_isupper(HEAPU8[i5 >> 0] | 0) | 0) {
    i2 = 14;
    break L1;
   }
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  } while (0);
 }
 if ((i2 | 0) == 14) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 17) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _gui_do_horiz_scroll(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 HEAP32[(HEAP32[26881] | 0) + 76 >> 2] = HEAP32[i5 >> 2];
 do if (!(_vim_strchr(HEAP32[26926] | 0, 104) | 0)) {
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) > (_scroll_line_len(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0)) {
   if (HEAP32[i6 >> 2] | 0) {
    i2 = _gui_find_longest_lnum() | 0;
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i2;
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
    break;
   }
   if ((HEAP32[26682] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) if ((HEAP32[26682] | 0) < (HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0)) {
    HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[26682];
    HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
   }
  }
 } while (0);
 HEAP32[i4 >> 2] = _leftcol_changed() | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _shorten_buf_fname(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if (_path_with_url(HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0) | 0) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[i7 >> 2] | 0)) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) if (!(_mch_isFullName(HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) | 0)) {
  STACKTOP = i4;
  return;
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0);
  HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] = 0;
 }
 HEAP32[i8 >> 2] = _shorten_fname(HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 if (HEAP32[i8 >> 2] | 0) {
  i6 = _vim_strsave(HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] = i6;
  i6 = HEAP32[i5 >> 2] | 0;
  HEAP32[i6 + 76 >> 2] = HEAP32[i6 + 72 >> 2];
 }
 if (HEAP32[i8 >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0) {
  STACKTOP = i4;
  return;
 }
 i8 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 + 76 >> 2] = HEAP32[i8 + 68 >> 2];
 STACKTOP = i4;
 return;
}

function _linelen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _ml_get_curline() | 0;
 HEAP32[i5 >> 2] = _skipwhite(HEAP32[i4 >> 2] | 0) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i6 >> 2] = i1 + (_strlen(HEAP32[i5 >> 2] | 0) | 0);
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) break;
  if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] | 0 | 0) != 32) if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + -1 >> 0] | 0 | 0) != 9) break;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
 }
 HEAP32[i7 >> 2] = HEAPU8[HEAP32[i6 >> 2] >> 0];
 HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
 HEAP32[i8 >> 2] = _linetabsize(HEAP32[i4 >> 2] | 0) | 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  i9 = HEAP32[i7 >> 2] | 0;
  i10 = i9 & 255;
  i11 = HEAP32[i6 >> 2] | 0;
  HEAP8[i11 >> 0] = i10;
  i12 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i2;
  return i12 | 0;
 }
 i4 = (_vim_strrchr(HEAP32[i5 >> 2] | 0, 9) | 0) != 0 & 1;
 HEAP32[HEAP32[i3 >> 2] >> 2] = i4;
 i9 = HEAP32[i7 >> 2] | 0;
 i10 = i9 & 255;
 i11 = HEAP32[i6 >> 2] | 0;
 HEAP8[i11 >> 0] = i10;
 i12 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i2;
 return i12 | 0;
}

function _match_file_list(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i6 = i5 + 28 | 0;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 36 | 0;
 i11 = i5 + 12 | 0;
 i12 = i5 + 8 | 0;
 i13 = i5 + 32 | 0;
 i14 = i5 + 4 | 0;
 i15 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i11 >> 2] = _gettail(HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i15 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if (!(HEAP8[HEAP32[i15 >> 2] >> 0] | 0)) {
   i4 = 7;
   break;
  }
  _copy_option_part(i15, i10, 100, 84434) | 0;
  HEAP32[i12 >> 2] = _file_pat_to_reg_pat(i10, 0, i13, 0) | 0;
  if (!(HEAP32[i12 >> 2] | 0)) {
   i4 = 7;
   break;
  }
  HEAP32[i14 >> 2] = _match_file_pat(HEAP32[i12 >> 2] | 0, 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP8[i13 >> 0] | 0) | 0;
  _vim_free(HEAP32[i12 >> 2] | 0);
  if (HEAP32[i14 >> 2] | 0) {
   i4 = 5;
   break;
  }
 }
 if ((i4 | 0) == 5) {
  HEAP32[i6 >> 2] = 1;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 } else if ((i4 | 0) == 7) {
  HEAP32[i6 >> 2] = 0;
  i16 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i16 | 0;
 }
 return 0;
}

function _parse_tag_line(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 >> 2] = _vim_strchr(HEAP32[i5 >> 2] | 0, 9) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = _vim_strchr(HEAP32[i7 >> 2] | 0, 9) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] = HEAP32[i7 >> 2];
 if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _do_record(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26800] | 0) {
  HEAP32[26800] = 0;
  _msg(114072) | 0;
  HEAP32[i4 >> 2] = _get_recorded() | 0;
  if (!(HEAP32[i4 >> 2] | 0)) {
   HEAP32[i7 >> 2] = 0;
   i8 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i2;
   return i8 | 0;
  } else {
   _vim_unescape_csi(HEAP32[i4 >> 2] | 0);
   HEAP32[i5 >> 2] = HEAP32[26083];
   HEAP32[i6 >> 2] = HEAP32[26084];
   HEAP32[i7 >> 2] = _stuff_yank(HEAP32[26237] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[26083] = HEAP32[i5 >> 2];
   HEAP32[26084] = HEAP32[i6 >> 2];
   i8 = HEAP32[i7 >> 2] | 0;
   STACKTOP = i2;
   return i8 | 0;
  }
 }
 do if ((HEAP32[i3 >> 2] | 0) >= 0) {
  if (((HEAP32[i3 >> 2] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAP32[i3 >> 2] | 0) - 97 | 0) >>> 0 >= 26) if ((HEAP32[i3 >> 2] | 0) != 34 ? ((HEAP32[i3 >> 2] | 0) - 48 | 0) >>> 0 >= 10 : 0) break;
  HEAP32[26800] = HEAP32[i3 >> 2];
  _showmode() | 0;
  HEAP32[26237] = HEAP32[i3 >> 2];
  HEAP32[i7 >> 2] = 1;
  i8 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 } while (0);
 HEAP32[i7 >> 2] = 0;
 i8 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i2;
 return i8 | 0;
}

function _before_quit_autocmds(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 _apply_autocmds(65, 0, 0, 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) | 0;
 do if (_win_valid(HEAP32[i7 >> 2] | 0) | 0) if (!(_curbuf_locked() | 0)) {
  if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 56 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 64 >> 2] | 0) > 0) break;
  if (HEAP32[i8 >> 2] | 0) i4 = 9; else if ((_check_more(0, HEAP32[i9 >> 2] | 0) | 0) == 1) if (_only_one_window() | 0) i4 = 9;
  do if ((i4 | 0) == 9) {
   _apply_autocmds(34, 0, 0, 0, HEAP32[26773] | 0) | 0;
   if (!(_curbuf_locked() | 0)) {
    if ((HEAP32[(HEAP32[26773] | 0) + 56 >> 2] | 0) != 1) break;
    if ((HEAP32[(HEAP32[26773] | 0) + 64 >> 2] | 0) <= 0) break;
   }
   HEAP32[i6 >> 2] = 1;
   i10 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i5;
   return i10 | 0;
  } while (0);
  HEAP32[i6 >> 2] = 0;
  i10 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i10 | 0;
 } while (0);
 HEAP32[i6 >> 2] = 1;
 i10 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i10 | 0;
}

function _file_ff_differs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (HEAP32[(HEAP32[i6 >> 2] | 0) + 60 >> 2] & 4 | 0) {
  HEAP32[i5 >> 2] = 0;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 if (HEAP32[i7 >> 2] | 0) if (HEAP32[(HEAP32[i6 >> 2] | 0) + 60 >> 2] & 16 | 0) if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == 1) if (!(HEAPU8[(_ml_get_buf(HEAP32[i6 >> 2] | 0, 1, 0) | 0) >> 0] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 768 >> 2] | 0) != (HEAPU8[HEAP32[(HEAP32[i6 >> 2] | 0) + 620 >> 2] >> 0] | 0 | 0)) {
  HEAP32[i5 >> 2] = 1;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 if (HEAP32[(HEAP32[i6 >> 2] | 0) + 584 >> 2] | 0) i3 = 12; else if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 604 >> 2] | 0)) i3 = 12;
 if ((i3 | 0) == 12) if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 764 >> 2] | 0) != (HEAP32[(HEAP32[i6 >> 2] | 0) + 600 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 1;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 i8 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i8 | 0;
}

function _aubuflocal_remove(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 20 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = HEAP32[25367];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] | 0) == (HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] | 0)) HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] = 0;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2];
 }
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= 96) break;
  HEAP32[i5 >> 2] = HEAP32[101068 + (HEAP32[i6 >> 2] << 2) >> 2];
  while (1) {
   if (!(HEAP32[i5 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] | 0)) {
    _au_remove_pat(HEAP32[i5 >> 2] | 0);
    if ((HEAP32[26888] | 0) >= 6) {
     _verbose_enter();
     i7 = _event_nr2name(HEAP32[i6 >> 2] | 0) | 0;
     i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] | 0;
     HEAP32[i3 >> 2] = i7;
     HEAP32[i3 + 4 >> 2] = i1;
     _smsg(52388, i3) | 0;
     _verbose_leave();
    }
   }
   HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 _au_cleanup();
 STACKTOP = i2;
 return;
}

function _ex_change(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) >= (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) if (!(_u_save((HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) - 1 | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) + 1 | 0) | 0)) {
  STACKTOP = i3;
  return;
 }
 i1 = (HEAP32[(HEAP32[26773] | 0) + 564 >> 2] | 0) != 0;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) {
  if (!i1) i2 = 6;
 } else if (i1) i2 = 6;
 if ((i2 | 0) == 6) HEAP32[25223] = _get_indent_lnum(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) break;
  _ml_delete(HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0, 0) | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
 }
 _check_cursor_lnum();
 i2 = HEAP32[i4 >> 2] | 0;
 _deleted_lines_mark(HEAP32[i2 + 36 >> 2] | 0, (HEAP32[i2 + 40 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0);
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 + 40 >> 2] = HEAP32[i5 + 36 >> 2];
 _ex_append(HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _close_last_window_tabpage(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if ((HEAP32[26887] | 0) != (HEAP32[27112] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 HEAP32[i9 >> 2] = HEAP32[26773];
 _goto_tabpage_tp(_alt_tabpage() | 0, 0, 1);
 HEAP32[26770] = 1;
 if (_valid_tabpage(HEAP32[i8 >> 2] | 0) | 0) if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) {
  HEAP32[i10 >> 2] = _tabline_height() | 0;
  _win_close_othertab(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0);
  i8 = HEAP32[i10 >> 2] | 0;
  if ((i8 | 0) != (_tabline_height() | 0)) _shell_new_rows();
 }
 _apply_autocmds(77, 0, 0, 0, HEAP32[26773] | 0) | 0;
 _apply_autocmds(93, 0, 0, 0, HEAP32[26773] | 0) | 0;
 _apply_autocmds(78, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if ((HEAP32[i9 >> 2] | 0) != (HEAP32[26773] | 0)) _apply_autocmds(2, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[i5 >> 2] = 1;
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _au_get_grouparg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i8 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[i8 >> 2] = -3;
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 32) break;
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 9) break;
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 124) break;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i5 >> 2] = _vim_strnsave(i1 | 0, (HEAP32[i6 >> 2] | 0) - i1 | 0) | 0;
  if (!(HEAP32[i5 >> 2] | 0)) {
   HEAP32[i3 >> 2] = -2;
   i9 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i9 | 0;
  }
  HEAP32[i8 >> 2] = _au_find_group(HEAP32[i5 >> 2] | 0) | 0;
  if ((HEAP32[i8 >> 2] | 0) == -2) HEAP32[i8 >> 2] = -3; else {
   i1 = _skipwhite(HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[HEAP32[i4 >> 2] >> 2] = i1;
  }
  _vim_free(HEAP32[i5 >> 2] | 0);
 }
 HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
 i9 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i9 | 0;
}

function _ins_copychar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 24 | 0;
 i4 = i2 + 20 | 0;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2 + 4 | 0;
 i9 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[i4 >> 2] | 0) >= 1) if ((HEAP32[i4 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i1 = _ml_get(HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i1;
  HEAP32[i9 >> 2] = i1;
  HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
  _validate_virtcol();
  while (1) {
   if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0)) break;
   if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break;
   HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
   i1 = _lbr_chartabsize_adv(HEAP32[i9 >> 2] | 0, i7, HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i1;
  }
  if ((HEAP32[i6 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 132 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i5 >> 2] = HEAPU8[HEAP32[i7 >> 2] >> 0];
  if (!(HEAP32[i5 >> 2] | 0)) _vim_beep(16);
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i10 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i10 | 0;
 }
 _vim_beep(16);
 HEAP32[i3 >> 2] = 0;
 i10 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i10 | 0;
}

function _yank_copy_line(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 i1 = _alloc((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + (HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i2 + 8 >> 2] | 0) + 1 | 0) | 0;
 HEAP32[i7 >> 2] = i1;
 if (!i1) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  HEAP32[(HEAP32[HEAP32[26084] >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] = HEAP32[i7 >> 2];
  _memset(HEAP32[i7 >> 2] | 0, 32, HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[HEAP32[i5 >> 2] >> 2] | 0);
  i6 = HEAP32[i5 >> 2] | 0;
  _memmove(HEAP32[i7 >> 2] | 0, HEAP32[i6 + 12 >> 2] | 0, HEAP32[i6 + 8 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0);
  _memset(HEAP32[i7 >> 2] | 0, 32, HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0);
  HEAP8[HEAP32[i7 >> 2] >> 0] = 0;
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _get_fileformat_force(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (HEAP32[i7 >> 2] | 0) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 84 >> 2] | 0) HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 84 >> 2]; else i3 = 4; else i3 = 4;
 do if ((i3 | 0) == 4) {
  if (HEAP32[i7 >> 2] | 0) if (HEAP32[(HEAP32[i7 >> 2] | 0) + 76 >> 2] | 0) {
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 76 >> 2] | 0) != 1) i3 = 9;
  } else i3 = 7; else i3 = 7;
  if ((i3 | 0) == 7) if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 584 >> 2] | 0)) i3 = 9;
  if ((i3 | 0) == 9) {
   HEAP32[i8 >> 2] = HEAPU8[HEAP32[(HEAP32[i6 >> 2] | 0) + 620 >> 2] >> 0];
   break;
  }
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } while (0);
 if ((HEAP32[i8 >> 2] | 0) == 117) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 if ((HEAP32[i8 >> 2] | 0) == 109) {
  HEAP32[i5 >> 2] = 2;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else {
  HEAP32[i5 >> 2] = 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _attention_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i3 + 92 | 0;
 i5 = i3 + 88 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[26720] = (HEAP32[26720] | 0) + 1;
 _emsg(56862) | 0;
 _msg_puts(56878);
 _msg_home_replace(HEAP32[i5 >> 2] | 0);
 _msg_puts(94908);
 HEAP32[i8 >> 2] = _swapfile_info(HEAP32[i5 >> 2] | 0) | 0;
 _msg_puts(56911);
 _msg_outtrans(HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0) | 0;
 _msg_puts(94908);
 if ((_stat(HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0, i6) | 0) != -1) {
  _msg_puts(56932);
  HEAP32[i7 >> 2] = HEAP32[i6 + 56 >> 2];
  HEAP32[i9 >> 2] = _ctime(i7 | 0) | 0;
  if (!(HEAP32[i9 >> 2] | 0)) _msg_puts(56953); else _msg_puts(HEAP32[i9 >> 2] | 0);
  if (HEAP32[i8 >> 2] | 0) if ((HEAP32[i7 >> 2] | 0) > (HEAP32[i8 >> 2] | 0)) _msg_puts(56964);
 }
 _msg_puts(56993);
 _msg_puts(57200);
 _msg_puts(57244);
 _msg_outtrans(HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0) | 0;
 _msg_puts(57296);
 _msg_puts(57350);
 _msg_outtrans(HEAP32[i5 >> 2] | 0) | 0;
 _msg_puts(57402);
 HEAP32[26876] = HEAP32[26877];
 HEAP32[26720] = (HEAP32[26720] | 0) + -1;
 STACKTOP = i3;
 return;
}

function _match_suffix(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3 + 20 | 0;
 i9 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _strlen(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[26997];
 while (1) {
  if (!(HEAP8[HEAP32[i7 >> 2] >> 0] | 0)) {
   i2 = 10;
   break;
  }
  HEAP32[i6 >> 2] = _copy_option_part(i7, i8, 30, 60165) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) {
   HEAP32[i9 >> 2] = _gettail(HEAP32[i4 >> 2] | 0) | 0;
   if (!(_vim_strchr(HEAP32[i9 >> 2] | 0, 46) | 0)) {
    i2 = 5;
    break;
   }
  } else {
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) if (!(_vim_fnamencmp(i8, (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) + (0 - (HEAP32[i6 >> 2] | 0)) | 0, HEAP32[i6 >> 2] | 0) | 0)) {
    i2 = 10;
    break;
   }
   HEAP32[i6 >> 2] = 0;
  }
 }
 if ((i2 | 0) == 5) {
  HEAP32[i6 >> 2] = 1;
  i10 = HEAP32[i6 >> 2] | 0;
  i11 = (i10 | 0) != 0;
  i12 = i11 & 1;
  STACKTOP = i3;
  return i12 | 0;
 } else if ((i2 | 0) == 10) {
  i10 = HEAP32[i6 >> 2] | 0;
  i11 = (i10 | 0) != 0;
  i12 = i11 & 1;
  STACKTOP = i3;
  return i12 | 0;
 }
 return 0;
}

function _mark_line(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
  i2 = _skipwhite(_ml_get(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0) | 0;
  HEAP32[i7 >> 2] = _vim_strnsave(i2, HEAP32[10174] | 0) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) {
   HEAP32[i4 >> 2] = 0;
   i10 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i10 | 0;
  }
  HEAP32[i9 >> 2] = 0;
  HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
  while (1) {
   if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) break;
   i2 = _ptr2cells(HEAP32[i8 >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i2;
   if ((HEAP32[i9 >> 2] | 0) >= ((HEAP32[10174] | 0) - (HEAP32[i6 >> 2] | 0) | 0)) break;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  HEAP8[HEAP32[i8 >> 2] >> 0] = 0;
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i4 >> 2] = _vim_strsave(56535) | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _mch_settmode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3 + 64 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[7435] | 0) {
  HEAP32[7435] = 0;
  _tcgetattr(HEAP32[26833] | 0, 105168) | 0;
 }
 i1 = i5;
 i7 = 105168;
 i8 = i1 + 60 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
  i1 = i1 + 4 | 0;
  i7 = i7 + 4 | 0;
 } while ((i1 | 0) < (i8 | 0));
 if ((HEAP32[i4 >> 2] | 0) == 2) {
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -257;
  i7 = i5 + 12 | 0;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -32796;
  i7 = i5 + 4 | 0;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -5;
  HEAP8[i5 + 17 + 6 >> 0] = 1;
  HEAP8[i5 + 17 + 5 >> 0] = 0;
 } else if ((HEAP32[i4 >> 2] | 0) == 1) {
  i7 = i5 + 12 | 0;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -11;
  HEAP8[i5 + 17 + 6 >> 0] = 1;
  HEAP8[i5 + 17 + 5 >> 0] = 0;
 }
 HEAP32[i6 >> 2] = 10;
 while (1) {
  if ((_tcsetattr(HEAP32[26833] | 0, 0, i5) | 0) != -1) {
   i2 = 11;
   break;
  }
  i7 = (HEAP32[(___errno_location() | 0) >> 2] | 0) == 4;
  if (!(i7 & (HEAP32[i6 >> 2] | 0) > 0)) {
   i2 = 11;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
 }
 if ((i2 | 0) == 11) {
  HEAP32[26287] = HEAP32[i4 >> 2];
  STACKTOP = i3;
  return;
 }
}

function _ml_replace(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 if (!(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0)) if (!(_open_buffer(0, 0, 0) | 0)) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 if (HEAP32[i8 >> 2] | 0) {
  i8 = _vim_strsave(HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = i8;
  if (!i8) {
   HEAP32[i5 >> 2] = 0;
   i9 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i9 | 0;
  }
 }
 i8 = HEAP32[26773] | 0;
 if ((HEAP32[(HEAP32[26773] | 0) + 24 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) _ml_flush_line(i8); else if (HEAP32[i8 + 8 >> 2] & 2 | 0) _vim_free(HEAP32[(HEAP32[26773] | 0) + 28 >> 2] | 0);
 HEAP32[(HEAP32[26773] | 0) + 28 >> 2] = HEAP32[i7 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 24 >> 2] = HEAP32[i6 >> 2];
 i6 = (HEAP32[26773] | 0) + 8 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 2) & -2;
 HEAP32[i5 >> 2] = 1;
 i9 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _win_alloc_firstwin(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[26881] = _win_alloc(0, 0) | 0;
 do if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[26773] = _buflist_new(0, 0, 1, 2) | 0;
  if (!((HEAP32[26881] | 0) == 0 | (HEAP32[26773] | 0) == 0)) {
   HEAP32[(HEAP32[26881] | 0) + 4 >> 2] = HEAP32[26773];
   HEAP32[(HEAP32[26773] | 0) + 56 >> 2] = 1;
   HEAP32[(HEAP32[26881] | 0) + 184 >> 2] = 107472;
   _curwin_init();
   break;
  }
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  _win_init(HEAP32[26881] | 0, HEAP32[i4 >> 2] | 0, 0);
  HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] = 0;
  HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] = 0;
 } while (0);
 _new_frame(HEAP32[26881] | 0);
 if (!(HEAP32[(HEAP32[26881] | 0) + 20 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[27114] = HEAP32[(HEAP32[26881] | 0) + 20 >> 2];
  HEAP32[(HEAP32[27114] | 0) + 4 >> 2] = HEAP32[10174];
  HEAP32[(HEAP32[27114] | 0) + 12 >> 2] = (HEAP32[10173] | 0) - (HEAP32[26875] | 0);
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _map_to_exists_mode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i11 >> 2] = 0;
 L1 : while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= 256) {
   i4 = 14;
   break;
  }
  i3 = HEAP32[i11 >> 2] | 0;
  if (HEAP32[i9 >> 2] | 0) {
   if ((i3 | 0) > 0) {
    i4 = 14;
    break;
   }
   HEAP32[i10 >> 2] = HEAP32[25899];
  } else HEAP32[i10 >> 2] = HEAP32[102556 + (i3 << 2) >> 2];
  while (1) {
   if (!(HEAP32[i10 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & HEAP32[i8 >> 2] | 0) if (_strstr(HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) {
    i4 = 11;
    break L1;
   }
   HEAP32[i10 >> 2] = HEAP32[HEAP32[i10 >> 2] >> 2];
  }
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 11) {
  HEAP32[i6 >> 2] = 1;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 } else if ((i4 | 0) == 14) {
  HEAP32[i6 >> 2] = 0;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 return 0;
}

function _ccheck_abbr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 if ((HEAP32[26961] | 0) != 0 | (HEAP32[10181] | 0) != 0) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 while (1) {
  if ((HEAPU8[(HEAP32[25236] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) != 32) if ((HEAPU8[(HEAP32[25236] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) != 9) break;
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[25238] | 0)) break;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if (((HEAP32[25238] | 0) - (HEAP32[i6 >> 2] | 0) | 0) > 5) if ((HEAPU8[(HEAP32[25236] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) == 39) if ((HEAPU8[(HEAP32[25236] | 0) + ((HEAP32[i6 >> 2] | 0) + 2) >> 0] | 0 | 0) == 44) if ((HEAPU8[(HEAP32[25236] | 0) + ((HEAP32[i6 >> 2] | 0) + 3) >> 0] | 0 | 0) == 39) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 5; else i2 = 13; else i2 = 13; else i2 = 13; else i2 = 13;
 if ((i2 | 0) == 13) HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = _check_abbr(HEAP32[i5 >> 2] | 0, HEAP32[25236] | 0, HEAP32[25239] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _validate_cursor_col() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 _validate_virtcol();
 if (HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 2 | 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[26881] | 0) + 132 >> 2];
 HEAP32[i2 >> 2] = _curwin_col_off() | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i2 >> 2] | 0);
 i5 = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = i5 + (_curwin_col_off2() | 0);
 if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) if ((HEAP32[i4 >> 2] | 0) > 0 ? (HEAP32[i3 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) : 0) {
  i5 = HEAP32[i4 >> 2] | 0;
  i4 = Math_imul((((HEAP32[i3 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) | 0) / (i5 | 0) | 0) + 1 | 0, i5 | 0) | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - i4;
 }
 if ((HEAP32[i3 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0)) HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0); else HEAP32[i3 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 140 >> 2] = HEAP32[i3 >> 2];
 i3 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
 STACKTOP = i1;
 return;
}

function ___fwritex(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i4 = 0;
 i5 = i3 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (!i6) if (!(___towrite(i3) | 0)) {
  i7 = HEAP32[i5 >> 2] | 0;
  i4 = 5;
 } else i8 = 0; else {
  i7 = i6;
  i4 = 5;
 }
 L5 : do if ((i4 | 0) == 5) {
  i6 = i3 + 20 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  i9 = i5;
  if ((i7 - i5 | 0) >>> 0 < i2 >>> 0) {
   i8 = FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 15](i3, i1, i2) | 0;
   break;
  }
  L10 : do if ((HEAP8[i3 + 75 >> 0] | 0) < 0 | (i2 | 0) == 0) {
   i10 = 0;
   i11 = i1;
   i12 = i2;
   i13 = i9;
  } else {
   i5 = i2;
   while (1) {
    i14 = i5 + -1 | 0;
    if ((HEAP8[i1 + i14 >> 0] | 0) == 10) break;
    if (!i14) {
     i10 = 0;
     i11 = i1;
     i12 = i2;
     i13 = i9;
     break L10;
    } else i5 = i14;
   }
   i14 = FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 15](i3, i1, i5) | 0;
   if (i14 >>> 0 < i5 >>> 0) {
    i8 = i14;
    break L5;
   }
   i10 = i5;
   i11 = i1 + i5 | 0;
   i12 = i2 - i5 | 0;
   i13 = HEAP32[i6 >> 2] | 0;
  } while (0);
  _memcpy(i13 | 0, i11 | 0, i12 | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i12;
  i8 = i10 + i12 | 0;
 } while (0);
 return i8 | 0;
}

function _ml_clearmarked() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 if (!(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[26049];
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) break;
  i7 = _ml_find_line(HEAP32[26773] | 0, HEAP32[i5 >> 2] | 0, 19) | 0;
  HEAP32[i3 >> 2] = i7;
  if (!i7) {
   i1 = 12;
   break;
  }
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2];
  HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 36 >> 2] | 0);
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) > (HEAP32[(HEAP32[26773] | 0) + 40 >> 2] | 0)) break;
   if (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 + (HEAP32[i6 >> 2] << 2) >> 2] & -2147483648 | 0) {
    i7 = (HEAP32[i4 >> 2] | 0) + 20 + (HEAP32[i6 >> 2] << 2) | 0;
    HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & 2147483647;
    i7 = (HEAP32[26773] | 0) + 8 | 0;
    HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4;
   }
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
 }
 if ((i1 | 0) == 12) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26049] = 0;
 STACKTOP = i2;
 return;
}

function _mainerr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i3 + 48 | 0;
 i5 = i3 + 40 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 24 | 0;
 i8 = i3 + 16 | 0;
 i9 = i3 + 8 | 0;
 i10 = i3;
 i11 = i3 + 56 | 0;
 i12 = i3 + 52 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 _reset_signals();
 _init_longVersion();
 i2 = HEAP32[10211] | 0;
 HEAP32[i10 >> 2] = HEAP32[27180];
 _fprintf(i2, 97576, i10) | 0;
 i10 = HEAP32[10211] | 0;
 HEAP32[i9 >> 2] = 97581;
 _fprintf(i10, 97576, i9) | 0;
 i9 = HEAP32[10211] | 0;
 HEAP32[i8 >> 2] = HEAP32[40772 + (HEAP32[i11 >> 2] << 2) >> 2];
 _fprintf(i9, 97576, i8) | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i13 = HEAP32[10211] | 0;
  HEAP32[i4 >> 2] = 96892;
  _fprintf(i13, 97576, i4) | 0;
  _mch_exit(1);
  STACKTOP = i3;
  return;
 }
 i8 = HEAP32[10211] | 0;
 HEAP32[i7 >> 2] = 96886;
 _fprintf(i8, 97576, i7) | 0;
 i7 = HEAP32[10211] | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 _fprintf(i7, 97576, i6) | 0;
 i6 = HEAP32[10211] | 0;
 HEAP32[i5 >> 2] = 96890;
 _fprintf(i6, 97576, i5) | 0;
 i13 = HEAP32[10211] | 0;
 HEAP32[i4 >> 2] = 96892;
 _fprintf(i13, 97576, i4) | 0;
 _mch_exit(1);
 STACKTOP = i3;
 return;
}

function _has_state_with_pos(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 24 | 0;
 i8 = i6 + 20 | 0;
 i9 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i12 = i6 + 4 | 0;
 i13 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i13 >> 2] = 0;
 while (1) {
  if ((HEAP32[i13 >> 2] | 0) >= (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0)) {
   i5 = 8;
   break;
  }
  HEAP32[i12 >> 2] = (HEAP32[HEAP32[i8 >> 2] >> 2] | 0) + ((HEAP32[i13 >> 2] | 0) * 352 | 0);
  if ((HEAP32[(HEAP32[HEAP32[i12 >> 2] >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] | 0)) if (_sub_equal((HEAP32[i12 >> 2] | 0) + 188 | 0, HEAP32[i10 >> 2] | 0) | 0) if (_pim_equal((HEAP32[i12 >> 2] | 0) + 8 | 0, HEAP32[i11 >> 2] | 0) | 0) {
   i5 = 6;
   break;
  }
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
 }
 if ((i5 | 0) == 6) {
  HEAP32[i7 >> 2] = 1;
  i14 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i14 | 0;
 } else if ((i5 | 0) == 8) {
  HEAP32[i7 >> 2] = 0;
  i14 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i14 | 0;
 }
 return 0;
}

function _regbranch(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[HEAP32[i5 >> 2] >> 2] = 8;
 HEAP32[i6 >> 2] = _regnode(3) | 0;
 while (1) {
  HEAP32[i8 >> 2] = _regconcat(i9) | 0;
  if (!(HEAP32[i8 >> 2] | 0)) {
   i2 = 3;
   break;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | HEAP32[i9 >> 2] & 21;
  i1 = HEAP32[i5 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & (HEAP32[i9 >> 2] & 8 | -9);
  if (HEAP32[i7 >> 2] | 0) _regtail(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0);
  if ((_peekchr() | 0) != -218) {
   i2 = 9;
   break;
  }
  _skipchr();
  i1 = HEAP32[i8 >> 2] | 0;
  _regtail(i1, _regnode(0) | 0);
  if (HEAP32[26405] | 0) {
   i2 = 9;
   break;
  }
  _reginsert(9, HEAP32[i8 >> 2] | 0);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 }
 if ((i2 | 0) == 3) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 return 0;
}

function _frame_fixed_height(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 i1 = HEAP32[i5 >> 2] | 0;
 do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[i4 >> 2] = HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 200 + 12 >> 2]; else {
  i6 = (HEAP8[i1 >> 0] | 0) == 1;
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2];
  if (i6) {
   while (1) {
    if (!(HEAP32[i5 >> 2] | 0)) {
     i2 = 9;
     break;
    }
    if (_frame_fixed_height(HEAP32[i5 >> 2] | 0) | 0) {
     i2 = 7;
     break;
    }
    HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2];
   }
   if ((i2 | 0) == 7) {
    HEAP32[i4 >> 2] = 1;
    break;
   } else if ((i2 | 0) == 9) {
    HEAP32[i4 >> 2] = 0;
    break;
   }
  } else {
   while (1) {
    if (!(HEAP32[i5 >> 2] | 0)) {
     i2 = 15;
     break;
    }
    if (!(_frame_fixed_height(HEAP32[i5 >> 2] | 0) | 0)) {
     i2 = 13;
     break;
    }
    HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2];
   }
   if ((i2 | 0) == 13) {
    HEAP32[i4 >> 2] = 0;
    break;
   } else if ((i2 | 0) == 15) {
    HEAP32[i4 >> 2] = 1;
    break;
   }
  }
 } while (0);
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _inmacro(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 L1 : while (1) {
  if (!(HEAP8[HEAP32[i7 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) i3 = 7; else if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == 32) if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) i3 = 7; else if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 32) i3 = 7;
  do if ((i3 | 0) == 7) {
   i3 = 0;
   if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) == (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0)) break L1;
   if (HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0) != 32) break;
   if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break L1;
   if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0)) break L1;
   if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) == 32) break L1;
  } while (0);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 STACKTOP = i4;
 return (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) != 0 | 0;
}

function _frame_fixed_width(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 i1 = HEAP32[i5 >> 2] | 0;
 do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[i4 >> 2] = HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 200 + 16 >> 2]; else {
  i6 = (HEAP8[i1 >> 0] | 0) == 2;
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2];
  if (i6) {
   while (1) {
    if (!(HEAP32[i5 >> 2] | 0)) {
     i2 = 9;
     break;
    }
    if (_frame_fixed_width(HEAP32[i5 >> 2] | 0) | 0) {
     i2 = 7;
     break;
    }
    HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2];
   }
   if ((i2 | 0) == 7) {
    HEAP32[i4 >> 2] = 1;
    break;
   } else if ((i2 | 0) == 9) {
    HEAP32[i4 >> 2] = 0;
    break;
   }
  } else {
   while (1) {
    if (!(HEAP32[i5 >> 2] | 0)) {
     i2 = 15;
     break;
    }
    if (!(_frame_fixed_width(HEAP32[i5 >> 2] | 0) | 0)) {
     i2 = 13;
     break;
    }
    HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2];
   }
   if ((i2 | 0) == 13) {
    HEAP32[i4 >> 2] = 0;
    break;
   } else if ((i2 | 0) == 15) {
    HEAP32[i4 >> 2] = 1;
    break;
   }
  }
 } while (0);
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _fread(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = 0;
 i6 = Math_imul(i3, i2) | 0;
 i7 = (i2 | 0) == 0 ? 0 : i3;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) i8 = ___lockfile(i4) | 0; else i8 = 0;
 i3 = i4 + 74 | 0;
 i9 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i9 + 255 | i9;
 i9 = i4 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i10 = (HEAP32[i4 + 8 >> 2] | 0) - i3 | 0;
 if ((i10 | 0) > 0) {
  i11 = i10 >>> 0 < i6 >>> 0 ? i10 : i6;
  _memcpy(i1 | 0, i3 | 0, i11 | 0) | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i11;
  i12 = i6 - i11 | 0;
  i13 = i1 + i11 | 0;
 } else {
  i12 = i6;
  i13 = i1;
 }
 L7 : do if (!i12) i5 = 13; else {
  i1 = i4 + 32 | 0;
  i11 = i13;
  i9 = i12;
  while (1) {
   if (___toread(i4) | 0) break;
   i3 = FUNCTION_TABLE_iiii[HEAP32[i1 >> 2] & 15](i4, i11, i9) | 0;
   if ((i3 + 1 | 0) >>> 0 < 2) break;
   i10 = i9 - i3 | 0;
   if (!i10) {
    i5 = 13;
    break L7;
   } else {
    i11 = i11 + i3 | 0;
    i9 = i10;
   }
  }
  if (i8 | 0) ___unlockfile(i4);
  i14 = ((i6 - i9 | 0) >>> 0) / (i2 >>> 0) | 0;
 } while (0);
 if ((i5 | 0) == 13) if (!i8) i14 = i7; else {
  ___unlockfile(i4);
  i14 = i7;
 }
 return i14 | 0;
}

function _valid_tabpage_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) {
   i2 = 15;
   break;
  }
  i8 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) break;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 }
 if ((i2 | 0) == 15) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 if (!i8) i2 = 6; else if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26886] | 0)) i2 = 6; else i10 = HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0;
 if ((i2 | 0) == 6) i10 = HEAP32[26887] | 0;
 HEAP32[i7 >> 2] = i10;
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) {
   i2 = 13;
   break;
  }
  if (_win_valid_any_tab(HEAP32[i7 >> 2] | 0) | 0) {
   i2 = 11;
   break;
  }
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
 }
 if ((i2 | 0) == 11) {
  HEAP32[i4 >> 2] = 1;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } else if ((i2 | 0) == 13) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 return 0;
}

function _free_buf_options(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (HEAP32[i5 >> 2] | 0) {
  _clear_string_option((HEAP32[i4 >> 2] | 0) + 620 | 0);
  _clear_string_option((HEAP32[i4 >> 2] | 0) + 588 | 0);
  _clear_string_option((HEAP32[i4 >> 2] | 0) + 592 | 0);
 }
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 644 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 648 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 652 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 628 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 632 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 640 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 668 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 624 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 732 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 736 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 744 | 0);
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 748 | 0);
 HEAP32[(HEAP32[i4 >> 2] | 0) + 740 >> 2] = -1;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 756 >> 2] = -123456;
 _clear_string_option((HEAP32[i4 >> 2] | 0) + 572 | 0);
 STACKTOP = i3;
 return;
}

function _do_one_arg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 while (1) {
  if (!(HEAP8[HEAP32[i4 >> 2] >> 0] | 0)) {
   i2 = 11;
   break;
  }
  if (_rem_backslash(HEAP32[i4 >> 2] | 0) | 0) {
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = i1 + 1;
   i7 = HEAP8[i1 >> 0] | 0;
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i7;
   i7 = HEAP8[HEAP32[i4 >> 2] >> 0] | 0;
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i7;
  } else {
   if (!(HEAP32[i6 >> 2] | 0)) if (_vim_isspace(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0) {
    i2 = 11;
    break;
   }
   if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) == 96) HEAP32[i6 >> 2] = HEAP32[i6 >> 2] ^ 1;
   i7 = HEAP8[HEAP32[i4 >> 2] >> 0] | 0;
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i7;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 11) {
  HEAP32[i4 >> 2] = _skipwhite(HEAP32[i4 >> 2] | 0) | 0;
  HEAP8[HEAP32[i5 >> 2] >> 0] = 0;
  STACKTOP = i3;
  return HEAP32[i4 >> 2] | 0;
 }
 return 0;
}

function _shorten_dir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i4 >> 2] = _gettail(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 L1 : while (1) {
  i3 = HEAP8[HEAP32[i5 >> 2] >> 0] | 0;
  do if ((HEAP32[i5 >> 2] | 0) >>> 0 >= (HEAP32[i4 >> 2] | 0) >>> 0) {
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i3;
   if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) break L1;
  } else {
   if (_vim_ispathsep(i3 & 255) | 0) {
    i1 = HEAP8[HEAP32[i5 >> 2] >> 0] | 0;
    i8 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i8 + 1;
    HEAP8[i8 >> 0] = i1;
    HEAP32[i7 >> 2] = 0;
    break;
   }
   if (!(HEAP32[i7 >> 2] | 0)) {
    i1 = HEAP8[HEAP32[i5 >> 2] >> 0] | 0;
    i8 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i8 + 1;
    HEAP8[i8 >> 0] = i1;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 126) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 46) HEAP32[i7 >> 2] = 1;
   }
  } while (0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _stuffescaped(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) break;
  HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
  while (1) {
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) >= 32) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) < 127) i9 = 1; else i3 = 6; else i3 = 6;
   if ((i3 | 0) == 6) {
    i3 = 0;
    if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 128) i9 = (HEAP32[i6 >> 2] | 0) != 0 ^ 1; else i9 = 0;
   }
   i10 = HEAP32[i5 >> 2] | 0;
   if (!i9) break;
   HEAP32[i5 >> 2] = i10 + 1;
  }
  if (i10 >>> 0 > (HEAP32[i8 >> 2] | 0) >>> 0) {
   i2 = HEAP32[i8 >> 2] | 0;
   _stuffReadbuffLen(i2 | 0, (HEAP32[i5 >> 2] | 0) - i2 | 0);
  }
  if (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) {
   i2 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i2 + 1;
   HEAP32[i7 >> 2] = HEAPU8[i2 >> 0];
   if (HEAP32[i6 >> 2] | 0) if ((HEAP32[i7 >> 2] | 0) < 32 & (HEAP32[i7 >> 2] | 0) != 9 | (HEAP32[i7 >> 2] | 0) == 127) _stuffcharReadbuff(22);
   _stuffcharReadbuff(HEAP32[i7 >> 2] | 0);
  }
 }
 STACKTOP = i4;
 return;
}

function _put_in_typebuf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 12 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5 + 4 | 0;
 i11 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i10 >> 2] = 1;
 _put_reedit_in_typebuf(HEAP32[i9 >> 2] | 0);
 if (HEAP32[i8 >> 2] | 0) HEAP32[i10 >> 2] = _ins_typebuf(97581, -1, 0, 1, HEAP32[i9 >> 2] | 0) | 0;
 if ((HEAP32[i10 >> 2] | 0) == 1) {
  i4 = HEAP32[i6 >> 2] | 0;
  if (HEAP32[i7 >> 2] | 0) HEAP32[i11 >> 2] = _vim_strsave_escape_csi(i4) | 0; else HEAP32[i11 >> 2] = i4;
  if (!(HEAP32[i11 >> 2] | 0)) HEAP32[i10 >> 2] = 0; else HEAP32[i10 >> 2] = _ins_typebuf(HEAP32[i11 >> 2] | 0, HEAP32[i7 >> 2] | 0 ? -1 : 0, 0, 1, HEAP32[i9 >> 2] | 0) | 0;
  if (HEAP32[i7 >> 2] | 0) _vim_free(HEAP32[i11 >> 2] | 0);
 }
 if (!((HEAP32[i8 >> 2] | 0) != 0 & (HEAP32[i10 >> 2] | 0) == 1)) {
  i12 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 HEAP32[i10 >> 2] = _ins_typebuf(62333, -1, 0, 1, HEAP32[i9 >> 2] | 0) | 0;
 i12 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i5;
 return i12 | 0;
}

function _vimrc_found(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 if (!(_option_was_set(65033) | 0)) {
  HEAP32[26903] = 0;
  HEAP32[i6 >> 2] = 0;
  while (1) {
   if (!((_istermoption(15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) | 0) | 0) != 0 ^ 1)) break;
   if (!(HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 8 >> 2] & 1280)) _set_option_default(HEAP32[i6 >> 2] | 0, 1, 0);
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  _didset_options();
  _didset_options2();
 }
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i8 >> 2] = _vim_getenv(HEAP32[i5 >> 2] | 0, i7) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i8 >> 2] = _FullName_save(HEAP32[i4 >> 2] | 0, 0) | 0;
  if (!(HEAP32[i8 >> 2] | 0)) {
   STACKTOP = i3;
   return;
  }
  _vim_setenv(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0);
  _vim_free(HEAP32[i8 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else {
  if (!(HEAP32[i7 >> 2] | 0)) {
   STACKTOP = i3;
   return;
  }
  _vim_free(HEAP32[i8 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
}

function _realloc_cmdbuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[i4 >> 2] | 0) < (HEAP32[25237] | 0)) {
  HEAP32[i3 >> 2] = 1;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 HEAP32[i5 >> 2] = HEAP32[25236];
 _alloc_cmdbuff(HEAP32[i4 >> 2] | 0);
 if (!(HEAP32[25236] | 0)) {
  HEAP32[25236] = HEAP32[i5 >> 2];
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 _memmove(HEAP32[25236] | 0, HEAP32[i5 >> 2] | 0, HEAP32[25238] | 0) | 0;
 HEAP8[(HEAP32[25236] | 0) + (HEAP32[25238] | 0) >> 0] = 0;
 _vim_free(HEAP32[i5 >> 2] | 0);
 if (HEAP32[25246] | 0) if (HEAP32[(HEAP32[25246] | 0) + 4 >> 2] | 0) if (HEAP32[HEAP32[25246] >> 2] | 0) if ((HEAP32[HEAP32[25246] >> 2] | 0) != -2) {
  HEAP32[i6 >> 2] = (HEAP32[(HEAP32[25246] | 0) + 4 >> 2] | 0) - (HEAP32[i5 >> 2] | 0);
  if ((HEAP32[i6 >> 2] | 0) >= 0) if ((HEAP32[i6 >> 2] | 0) <= (HEAP32[25238] | 0)) HEAP32[(HEAP32[25246] | 0) + 4 >> 2] = (HEAP32[25236] | 0) + (HEAP32[i6 >> 2] | 0);
 }
 HEAP32[i3 >> 2] = 1;
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _handle_x_keys(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = (HEAP32[i4 >> 2] | 0) + 19197 | 0;
 do switch (i1 >>> 8 | i1 << 24 | 0) {
 case 9:
  {
   HEAP32[i3 >> 2] = -30059;
   break;
  }
 case 8:
  {
   HEAP32[i3 >> 2] = -25707;
   break;
  }
 case 7:
  {
   HEAP32[i3 >> 2] = -27755;
   break;
  }
 case 6:
  {
   HEAP32[i3 >> 2] = -29291;
   break;
  }
 case 11:
  {
   HEAP32[i3 >> 2] = -26731;
   break;
  }
 case 10:
  {
   HEAP32[i3 >> 2] = -26731;
   break;
  }
 case 13:
  {
   HEAP32[i3 >> 2] = -14144;
   break;
  }
 case 12:
  {
   HEAP32[i3 >> 2] = -14144;
   break;
  }
 case 17:
  {
   HEAP32[i3 >> 2] = -12651;
   break;
  }
 case 16:
  {
   HEAP32[i3 >> 2] = -12907;
   break;
  }
 case 15:
  {
   HEAP32[i3 >> 2] = -13163;
   break;
  }
 case 14:
  {
   HEAP32[i3 >> 2] = -13419;
   break;
  }
 case 3:
  {
   HEAP32[i3 >> 2] = -1789;
   break;
  }
 case 2:
  {
   HEAP32[i3 >> 2] = -2045;
   break;
  }
 case 1:
  {
   HEAP32[i3 >> 2] = -2301;
   break;
  }
 case 0:
  {
   HEAP32[i3 >> 2] = -2557;
   break;
  }
 default:
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _screen_draw_rectangle(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 28 | 0;
 i8 = i6 + 24 | 0;
 i9 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i11 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i13 = i6 + 4 | 0;
 i14 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 if (!(HEAP32[26691] | 0)) {
  STACKTOP = i6;
  return;
 }
 if (HEAP32[i11 >> 2] | 0) HEAP32[26459] = 1;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if ((HEAP32[i12 >> 2] | 0) >= ((HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0)) break;
  HEAP32[i14 >> 2] = HEAP32[(HEAP32[26693] | 0) + (HEAP32[i12 >> 2] << 2) >> 2];
  HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
  while (1) {
   if ((HEAP32[i13 >> 2] | 0) >= ((HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) | 0)) break;
   i11 = HEAP32[i13 >> 2] | 0;
   _screen_char((HEAP32[i14 >> 2] | 0) + i11 | 0, HEAP32[i12 >> 2] | 0, i11 | 0);
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 1;
  }
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
 }
 HEAP32[26459] = 0;
 STACKTOP = i6;
 return;
}

function _reginsert_nr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[26453] | 0) == (-1 | 0)) {
  HEAP32[26404] = (HEAP32[26404] | 0) + 7;
  STACKTOP = i4;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[26453];
 HEAP32[26453] = (HEAP32[26453] | 0) + 7;
 HEAP32[i9 >> 2] = HEAP32[26453];
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >>> 0 <= (HEAP32[i7 >> 2] | 0) >>> 0) break;
  i3 = (HEAP32[i8 >> 2] | 0) + -1 | 0;
  HEAP32[i8 >> 2] = i3;
  i2 = HEAP8[i3 >> 0] | 0;
  i3 = (HEAP32[i9 >> 2] | 0) + -1 | 0;
  HEAP32[i9 >> 2] = i3;
  HEAP8[i3 >> 0] = i2;
 }
 HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
 i7 = HEAP32[i5 >> 2] & 255;
 i5 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i5 + 1;
 HEAP8[i5 >> 0] = i7;
 i7 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i7 + 1;
 HEAP8[i7 >> 0] = 0;
 i7 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i7 + 1;
 HEAP8[i7 >> 0] = 0;
 HEAP32[i10 >> 2] = _re_put_long(HEAP32[i10 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 STACKTOP = i4;
 return;
}

function _unshift_special(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0;
 L1 : do if ((i1 | 0) < -12835) {
  if ((i1 | 0) < -14122) {
   switch (i1 | 0) {
   case -26917:
    break;
   default:
    break L1;
   }
   HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = -29291;
   break;
  }
  switch (i1 | 0) {
  case -13347:
   {
    HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = -27755;
    break L1;
    break;
   }
  case -14122:
   {
    HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = -14144;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } else {
  if ((i1 | 0) < -1533) {
   switch (i1 | 0) {
   case -12835:
    break;
   default:
    break L1;
   }
   HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = -26731;
   break;
  }
  switch (i1 | 0) {
  case -1277:
   {
    HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = -30059;
    break L1;
    break;
   }
  case -1533:
   {
    HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = -25707;
    break L1;
    break;
   }
  default:
   break L1;
  }
 } while (0);
 i1 = _simplify_key(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0, 106792) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _vim_tempname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i4 = i3;
 i5 = i3 + 24 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3 + 8 | 0;
 HEAP32[i3 + 20 >> 2] = i1;
 HEAP32[i3 + 16 >> 2] = i2;
 L1 : do if (!(HEAP32[26777] | 0)) {
  HEAP32[i7 >> 2] = 0;
  while (1) {
   if ((HEAP32[i7 >> 2] | 0) >= 4) break L1;
   _expand_env(HEAP32[10912 + (HEAP32[i7 >> 2] << 2) >> 2] | 0, i6, 236);
   if ((HEAPU8[i6 >> 0] | 0 | 0) != 36) if (_mch_isdir(i6) | 0) {
    _add_pathsep(i6);
    HEAP32[i8 >> 2] = _umask(63) | 0;
    _strcat(i6, 55839) | 0;
    if (_mkdtemp(i6) | 0) _vim_settempdir(i6);
    _umask(HEAP32[i8 >> 2] | 0) | 0;
    if (HEAP32[26777] | 0) break L1;
   }
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
  }
 } while (0);
 if (HEAP32[26777] | 0) {
  i7 = HEAP32[26777] | 0;
  i8 = HEAP32[25468] | 0;
  HEAP32[25468] = i8 + 1;
  HEAP32[i4 >> 2] = i7;
  HEAP32[i4 + 4 >> 2] = i8;
  _sprintf(i6, 55847, i4) | 0;
  HEAP32[i5 >> 2] = _vim_strsave(i6) | 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } else {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 return 0;
}

function _hl_has_settings(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 24 >> 2] | 0) i6 = 1; else if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 44 >> 2] | 0) i6 = 1; else if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 36 >> 2] | 0) i6 = 1; else if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 40 >> 2] | 0) i6 = 1; else if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 68 >> 2] | 0) i6 = 1; else if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 76 >> 2] | 0) i6 = 1; else if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 80 >> 2] | 0) i6 = 1; else if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 84 >> 2] | 0) i6 = 1; else if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 64 >> 2] | 0) i6 = 1; else if (HEAP32[i5 >> 2] | 0) i6 = (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i4 >> 2] | 0) * 96 | 0) + 92 >> 2] & 8 | 0) != 0; else i6 = 0;
 STACKTOP = i3;
 return i6 & 1 | 0;
}

function ___strchrnul(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = i2 & 255;
 L1 : do if (!i3) i4 = i1 + (_strlen(i1) | 0) | 0; else {
  if (!(i1 & 3)) i5 = i1; else {
   i6 = i2 & 255;
   i7 = i1;
   while (1) {
    i8 = HEAP8[i7 >> 0] | 0;
    if (i8 << 24 >> 24 == 0 ? 1 : i8 << 24 >> 24 == i6 << 24 >> 24) {
     i4 = i7;
     break L1;
    }
    i8 = i7 + 1 | 0;
    if (!(i8 & 3)) {
     i5 = i8;
     break;
    } else i7 = i8;
   }
  }
  i7 = Math_imul(i3, 16843009) | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  L10 : do if (!((i6 & -2139062144 ^ -2139062144) & i6 + -16843009)) {
   i8 = i5;
   i9 = i6;
   while (1) {
    i10 = i9 ^ i7;
    if ((i10 & -2139062144 ^ -2139062144) & i10 + -16843009 | 0) {
     i11 = i8;
     break L10;
    }
    i10 = i8 + 4 | 0;
    i9 = HEAP32[i10 >> 2] | 0;
    if ((i9 & -2139062144 ^ -2139062144) & i9 + -16843009 | 0) {
     i11 = i10;
     break;
    } else i8 = i10;
   }
  } else i11 = i5; while (0);
  i7 = i2 & 255;
  i6 = i11;
  while (1) {
   i8 = HEAP8[i6 >> 0] | 0;
   if (i8 << 24 >> 24 == 0 ? 1 : i8 << 24 >> 24 == i7 << 24 >> 24) {
    i4 = i6;
    break;
   } else i6 = i6 + 1 | 0;
  }
 } while (0);
 return i4 | 0;
}

function _optval_default(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 1024 | 0 ? 1 : (HEAP32[26903] | 0) != 0) ? 0 : 1;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 2 | 0) {
  HEAP32[i4 >> 2] = (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) & 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 1 | 0) {
  HEAP32[i4 >> 2] = (HEAP32[i2 >> 2] | 0) == (HEAP32[(HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) & 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  HEAP32[i4 >> 2] = (_strcmp(HEAP32[i2 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 20 + (HEAP32[i7 >> 2] << 2) >> 2] | 0) | 0) == 0 & 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _check_snapshot_rec(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 do if ((HEAP8[HEAP32[i5 >> 2] >> 0] | 0) == (HEAP8[HEAP32[i6 >> 2] >> 0] | 0)) if (((HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) == 0 | 0) == ((HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0) == 0 | 0)) if (((HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0) == 0 | 0) == ((HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] | 0) == 0 | 0)) {
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) if (!(_check_snapshot_rec(HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0) | 0)) break;
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0) if (!(_check_snapshot_rec(HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] | 0) | 0)) break;
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) if (!(_win_valid(HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] | 0) | 0)) break;
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _get_arglist(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 _ga_init2(HEAP32[i7 >> 2] | 0, 4, 20);
 while (1) {
  if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
   i4 = 8;
   break;
  }
  if (!(_ga_grow(HEAP32[i7 >> 2] | 0, 1) | 0)) {
   i4 = 4;
   break;
  }
  i3 = HEAP32[i8 >> 2] | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i1 = HEAP32[i2 + 16 >> 2] | 0;
  i10 = i2 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i2 + 1;
  HEAP32[i1 + (i2 << 2) >> 2] = i3;
  if (!(HEAP32[i9 >> 2] | 0)) {
   i4 = 6;
   break;
  }
  HEAP32[i8 >> 2] = _do_one_arg(HEAP32[i8 >> 2] | 0) | 0;
 }
 if ((i4 | 0) == 4) {
  _ga_clear(HEAP32[i7 >> 2] | 0);
  HEAP32[i6 >> 2] = 0;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 } else if ((i4 | 0) == 6) {
  HEAP32[i6 >> 2] = 1;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 } else if ((i4 | 0) == 8) {
  HEAP32[i6 >> 2] = 1;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 return 0;
}

function _do_check_scrollbind(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[i3 >> 2] | 0) if (HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] | 0) {
  do if (HEAP32[26793] | 0) HEAP32[26793] = 0; else {
   if ((HEAP32[26881] | 0) != (HEAP32[26078] | 0)) {
    if (!(_vim_strchr(HEAP32[26972] | 0, 106) | 0)) break;
    i3 = HEAP32[26881] | 0;
    _check_scrollbind((HEAP32[i3 + 68 >> 2] | 0) - (HEAP32[i3 + 296 >> 2] | 0) | 0, 0);
    break;
   }
   if ((HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) == (HEAP32[26079] | 0)) {
    if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) == (HEAP32[26080] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 76 >> 2] | 0) == (HEAP32[26081] | 0)) break;
    i3 = HEAP32[26881] | 0;
    _check_scrollbind((HEAP32[i3 + 68 >> 2] | 0) - (HEAP32[26080] | 0) | 0, (HEAP32[i3 + 76 >> 2] | 0) - (HEAP32[26081] | 0) | 0);
   }
  } while (0);
  i3 = HEAP32[26881] | 0;
  HEAP32[i3 + 296 >> 2] = HEAP32[i3 + 68 >> 2];
 }
 HEAP32[26078] = HEAP32[26881];
 HEAP32[26080] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 HEAP32[26079] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
 HEAP32[26081] = HEAP32[(HEAP32[26881] | 0) + 76 >> 2];
 STACKTOP = i2;
 return;
}

function _gui_mouse_correct() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[26757] = 0;
 if (!((HEAP32[26627] | 0) != 0 & (HEAP32[26954] | 0) != 0)) {
  STACKTOP = i1;
  return;
 }
 _gui_mch_getmouse(i2, i3);
 if ((HEAP32[i2 >> 2] | 0) < 0) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i2 >> 2] | 0) > (Math_imul(HEAP32[10174] | 0, HEAP32[26665] | 0) | 0)) {
  STACKTOP = i1;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) >= 0) {
  i5 = ((HEAP32[i3 >> 2] | 0) - (HEAP32[26669] | 0) | 0) / (HEAP32[26666] | 0) | 0;
  if ((i5 | 0) >= (_tabline_height() | 0)) HEAP32[i4 >> 2] = _xy2win(HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
 }
 if (!(HEAP32[i4 >> 2] | 0 ? (HEAP32[i4 >> 2] | 0) != (HEAP32[26881] | 0) : 0)) {
  STACKTOP = i1;
  return;
 }
 _validate_cline_row();
 i4 = HEAP32[26881] | 0;
 i3 = (Math_imul((HEAP32[i4 + 96 >> 2] | 0) + (HEAP32[i4 + 100 >> 2] | 0) | 0, HEAP32[26665] | 0) | 0) - 3 | 0;
 i4 = HEAP32[26881] | 0;
 i2 = Math_imul((HEAP32[i4 + 84 >> 2] | 0) + (HEAP32[i4 + 136 >> 2] | 0) | 0, HEAP32[26666] | 0) | 0;
 _gui_mch_setmouse(i3, i2 + ((HEAP32[26666] | 0) / 2 | 0) | 0);
 STACKTOP = i1;
 return;
}

function _nv_optrans(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i4 + 20 | 0;
  HEAP32[i5 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 68) if (_vim_strchr(HEAP32[26904] | 0, 35) | 0) {
  i1 = (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 28 | 0;
  i6 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] = 1;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = 1;
  _nv_dollar(HEAP32[i3 >> 2] | 0);
  HEAP32[26796] = 1;
  _ResetRedobuff();
  _AppendCharToRedobuff(68);
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i4 + 20 | 0;
  HEAP32[i5 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) _stuffnumReadbuff(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0);
 _stuffReadbuff(HEAP32[15276 + ((_vim_strchr(61933, HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) | 0) - 61933 << 2) >> 2] | 0);
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i4 + 20 | 0;
 HEAP32[i5 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _screen_char(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[26696] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[26697] | 0)) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAPU8[HEAP32[26566] >> 0] | 0)) if ((HEAP32[i6 >> 2] | 0) == ((HEAP32[26696] | 0) - 1 | 0)) if ((HEAP32[i7 >> 2] | 0) == ((HEAP32[26697] | 0) - 1 | 0)) {
  HEAP16[(HEAP32[26692] | 0) + (HEAP32[i5 >> 2] << 1) >> 1] = -1;
  STACKTOP = i4;
  return;
 }
 if (HEAP32[26459] | 0) HEAP32[i8 >> 2] = HEAP32[26459]; else HEAP32[i8 >> 2] = HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i5 >> 2] << 1) >> 1];
 if ((HEAP32[26455] | 0) != (HEAP32[i8 >> 2] | 0)) _screen_stop_highlight();
 _windgoto(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 if ((HEAP32[26455] | 0) != (HEAP32[i8 >> 2] | 0)) _screen_start_highlight(HEAP32[i8 >> 2] | 0);
 _out_char(HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] | 0);
 HEAP32[26457] = (HEAP32[26457] | 0) + 1;
 STACKTOP = i4;
 return;
}

function _find_end_of_word(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _ml_get(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
 if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) > 0) {
  i1 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
 }
 HEAP32[i6 >> 2] = _get_mouse_class((HEAP32[i5 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
 while (1) {
  if (!(HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) >> 0] | 0)) {
   i2 = 10;
   break;
  }
  HEAP32[i7 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) + 1;
  i1 = _get_mouse_class((HEAP32[i5 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0) | 0;
  if ((i1 | 0) != (HEAP32[i6 >> 2] | 0)) break;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 }
 if ((i2 | 0) == 10) {
  STACKTOP = i3;
  return;
 }
 if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) != 101) {
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 STACKTOP = i3;
 return;
}

function _ex_tabonly(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[HEAP32[26884] >> 2] | 0)) {
  _msg(50338) | 0;
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = _get_tabpage_arg(HEAP32[i4 >> 2] | 0) | 0;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) {
  STACKTOP = i3;
  return;
 }
 _goto_tabpage(HEAP32[i7 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= 1e3) {
   i2 = 14;
   break;
  }
  HEAP32[i5 >> 2] = HEAP32[26884];
  while (1) {
   if (!(HEAP32[i5 >> 2] | 0)) break;
   i8 = HEAP32[i5 >> 2] | 0;
   if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[27114] | 0)) {
    i2 = 9;
    break;
   }
   HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  }
  if ((i2 | 0) == 9) {
   i2 = 0;
   _tabpage_close_other(i8, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0);
   if (_valid_tabpage(HEAP32[i5 >> 2] | 0) | 0) HEAP32[i6 >> 2] = 1e3;
  }
  if (!(HEAP32[HEAP32[26884] >> 2] | 0)) {
   i2 = 14;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 14) {
  STACKTOP = i3;
  return;
 }
}

function _win_valid_any_tab(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[26884];
 L5 : while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) {
   i2 = 15;
   break;
  }
  if (!(HEAP32[i7 >> 2] | 0)) i2 = 7; else if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26886] | 0)) i2 = 7; else i9 = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0;
  if ((i2 | 0) == 7) {
   i2 = 0;
   i9 = HEAP32[26887] | 0;
  }
  HEAP32[i6 >> 2] = i9;
  while (1) {
   if (!(HEAP32[i6 >> 2] | 0)) break;
   if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
    i2 = 12;
    break L5;
   }
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  }
  HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 }
 if ((i2 | 0) == 12) {
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 15) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _msg_outtrans_special(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 24 | 0;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 i11 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i8 >> 2] = 0;
 HEAP32[i10 >> 2] = HEAP32[27048];
 while (1) {
  if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) break;
  if ((HEAP32[i7 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) i3 = 5; else if (!(HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0)) i3 = 5; else i3 = 7;
  if ((i3 | 0) == 5) {
   i3 = 0;
   if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 32) {
    HEAP32[i9 >> 2] = 97773;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   } else i3 = 7;
  }
  if ((i3 | 0) == 7) {
   i3 = 0;
   HEAP32[i9 >> 2] = _str2special(i7, HEAP32[i6 >> 2] | 0) | 0;
  }
  HEAP32[i11 >> 2] = _vim_strsize(HEAP32[i9 >> 2] | 0) | 0;
  _msg_puts_attr(HEAP32[i9 >> 2] | 0, (HEAP32[i11 >> 2] | 0) > 1 ? HEAP32[i10 >> 2] | 0 : 0);
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] | 0);
 }
 STACKTOP = i4;
 return HEAP32[i8 >> 2] | 0;
}

function _do_modelines(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 656 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[26952] | 0;
 HEAP32[i5 >> 2] = i1;
 if ((i1 | 0) == 0 | (HEAP32[25157] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[25157] = (HEAP32[25157] | 0) + 1;
 HEAP32[i4 >> 2] = 1;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) break;
  if ((HEAP32[i4 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) break;
  if (!(_chk_modeline(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0)) HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 HEAP32[i4 >> 2] = HEAP32[HEAP32[26773] >> 2];
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) <= 0) break;
  if ((HEAP32[i4 >> 2] | 0) <= (HEAP32[i5 >> 2] | 0)) break;
  if ((HEAP32[i4 >> 2] | 0) <= ((HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0)) break;
  if (!(_chk_modeline(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0)) HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 }
 HEAP32[25157] = (HEAP32[25157] | 0) + -1;
 STACKTOP = i2;
 return;
}

function _ex_normal(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i3 = i2 + 120 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (0 > 0) {
  _emsg(93591) | 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[26826] | 0) >= (HEAP32[26948] | 0)) {
  _emsg(50566) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[26826] = (HEAP32[26826] | 0) + 1;
 L9 : do if (_save_current_state(i4) | 0) do {
  if (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) {
   i1 = (HEAP32[i3 >> 2] | 0) + 36 | 0;
   i5 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 1;
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = i5;
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
   _check_cursor_moved(HEAP32[26881] | 0);
  }
  _exec_normal_cmd(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0 ? -1 : 0, 0);
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) <= 0) break L9;
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) break L9;
 } while ((HEAP32[26834] | 0) != 0 ^ 1); while (0);
 _update_topline_cursor();
 _restore_current_state(i4);
 HEAP32[26826] = (HEAP32[26826] | 0) + -1;
 _setmouse();
 _ui_cursor_shape();
 STACKTOP = i2;
 return;
}

function _buf_jump_open_tab(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = _buf_jump_open_win(HEAP32[i5 >> 2] | 0) | 0;
 if (HEAP32[i6 >> 2] | 0) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) break;
  if ((HEAP32[i7 >> 2] | 0) != (HEAP32[26886] | 0)) {
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2];
   while (1) {
    if (!(HEAP32[i6 >> 2] | 0)) break;
    if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) break;
    HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
   }
   if (HEAP32[i6 >> 2] | 0) {
    i2 = 11;
    break;
   }
  }
  HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 }
 if ((i2 | 0) == 11) {
  _goto_tabpage_win(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  if ((HEAP32[26881] | 0) != (HEAP32[i6 >> 2] | 0)) HEAP32[i6 >> 2] = 0;
 }
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _get_number_indent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i3 = i2 + 112 | 0;
 i4 = i2 + 108 | 0;
 i5 = i2 + 104 | 0;
 i6 = i2 + 96 | 0;
 i7 = i2 + 8 | 0;
 i8 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i8 >> 2] = 0;
 if ((HEAP32[i4 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
  HEAP32[i3 >> 2] = -1;
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = _vim_regcomp(HEAP32[(HEAP32[26773] | 0) + 632 >> 2] | 0, 1) | 0;
 if (HEAP32[i7 >> 2] | 0) {
  HEAP32[i7 + 84 >> 2] = 0;
  i1 = _ml_get(HEAP32[i4 >> 2] | 0) | 0;
  if (_vim_regexec(i7, i1 + (HEAP32[i8 >> 2] | 0) | 0, 0) | 0) {
   HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
   i8 = HEAP32[i7 + 44 >> 2] | 0;
   HEAP32[i6 + 4 >> 2] = i8 - (_ml_get(HEAP32[i4 >> 2] | 0) | 0);
  }
  _vim_regfree(HEAP32[i7 >> 2] | 0);
 }
 if (HEAP32[i6 >> 2] | 0) if (HEAPU8[(_ml_get_pos(i6) | 0) >> 0] | 0 | 0) {
  _getvcol(HEAP32[26881] | 0, i6, i5, 0, 0);
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[i3 >> 2] = -1;
 i9 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i9 | 0;
}

function _normal_search(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 16 >> 2] = 1;
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 HEAP32[i10 >> 2] = _do_search(HEAP32[HEAP32[i6 >> 2] >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0, HEAP32[i9 >> 2] | 16 | 2 | 12, 0, 0) | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  _clearop(HEAP32[HEAP32[i6 >> 2] >> 2] | 0);
  _check_cursor();
  i11 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 if ((HEAP32[i10 >> 2] | 0) != 2) {
  _check_cursor();
  i11 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 8 >> 2] = 1;
 _check_cursor();
 i11 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _cmdline_paste_str(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[i6 >> 2] | 0) {
  _put_on_cmdline(HEAP32[i5 >> 2] | 0, -1, 1) | 0;
  STACKTOP = i4;
  return;
 }
 while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) break;
  HEAP32[i8 >> 2] = HEAPU8[HEAP32[i5 >> 2] >> 0];
  if ((HEAP32[i8 >> 2] | 0) == 22) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  i6 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i6 + 1;
  HEAP32[i7 >> 2] = HEAPU8[i6 >> 0];
  if ((HEAP32[i8 >> 2] | 0) == 22 | (HEAP32[i7 >> 2] | 0) == 27 | (HEAP32[i7 >> 2] | 0) == 3 | (HEAP32[i7 >> 2] | 0) == 13 | (HEAP32[i7 >> 2] | 0) == 10 | (HEAP32[i7 >> 2] | 0) == 12) i3 = 12; else if ((HEAP32[i7 >> 2] | 0) == (HEAP32[26725] | 0)) i3 = 12; else if ((HEAP32[i7 >> 2] | 0) == 28) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 14) i3 = 12;
  if ((i3 | 0) == 12) {
   i3 = 0;
   _stuffcharReadbuff(22);
  }
  _stuffcharReadbuff(HEAP32[i7 >> 2] | 0);
 }
 STACKTOP = i4;
 return;
}

function _msgmore(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 HEAP32[i5 >> 2] = i1;
 if (HEAP32[26841] | 0) {
  STACKTOP = i2;
  return;
 }
 if (!(_messaging() | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!((HEAP32[26706] | 0) == 0 | (HEAP32[26708] | 0) != 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) > 0) HEAP32[i6 >> 2] = i1; else HEAP32[i6 >> 2] = 0 - i1;
 if ((HEAP32[i6 >> 2] | 0) <= (HEAP32[26967] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[i5 >> 2] | 0) > 0;
 do if ((HEAP32[i6 >> 2] | 0) == 1) if (i1) {
  _vim_strncpy(113988, 60016, 79);
  break;
 } else {
  _vim_strncpy(113988, 60028, 79);
  break;
 } else {
  i5 = HEAP32[i6 >> 2] | 0;
  if (i1) {
   HEAP32[i4 >> 2] = i5;
   _vim_snprintf(113988, 80, 60040, i4) | 0;
   break;
  } else {
   HEAP32[i3 >> 2] = i5;
   _vim_snprintf(113988, 80, 60055, i3) | 0;
   break;
  }
 } while (0);
 if (HEAP32[26834] | 0) _vim_strcat(113988, 60071, 80);
 if (!(_msg(113988) | 0)) {
  STACKTOP = i2;
  return;
 }
 _set_keep_msg(113988, 0);
 HEAP32[26708] = 1;
 STACKTOP = i2;
 return;
}

function _ex_winpos(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 24 | 0;
 i5 = i2 + 20 | 0;
 i6 = i2 + 16 | 0;
 i7 = i2 + 12 | 0;
 i8 = i2 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) {
  if (HEAP32[26627] | 0) if (_gui_mch_get_winpos(i5, i6) | 0) {
   i4 = HEAP32[26882] | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i3 + 4 >> 2] = i1;
   _sprintf(i4, 50143, i3) | 0;
   _msg(HEAP32[26882] | 0) | 0;
   STACKTOP = i2;
   return;
  }
  _emsg(50171) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = _getdigits(i7) | 0;
 HEAP32[i7 >> 2] = _skipwhite(HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 >> 2] = _getdigits(i7) | 0;
 if (HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) if (!(HEAPU8[HEAP32[i7 >> 2] >> 0] | 0)) {
  if (HEAP32[26627] | 0) {
   _gui_mch_set_winpos(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
   STACKTOP = i2;
   return;
  }
  if (!(HEAP32[26628] | 0)) {
   STACKTOP = i2;
   return;
  }
  STACKTOP = i2;
  return;
 }
 _emsg(50237) | 0;
 STACKTOP = i2;
 return;
}

function _au_new_group(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _au_find_group(HEAP32[i4 >> 2] | 0) | 0;
 do if ((HEAP32[i5 >> 2] | 0) == -2) {
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[2723] | 0)) break;
   if (!(HEAP32[(HEAP32[2727] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0)) break;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[2723] | 0)) if (!(_ga_grow(10892, 1) | 0)) {
   HEAP32[i3 >> 2] = -2;
   i6 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i6 | 0;
  }
  i1 = _vim_strsave(HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[(HEAP32[2727] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] = i1;
  if (!(HEAP32[(HEAP32[2727] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0)) {
   HEAP32[i3 >> 2] = -2;
   i6 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i6 | 0;
  } else {
   if ((HEAP32[i5 >> 2] | 0) != (HEAP32[2723] | 0)) break;
   HEAP32[2723] = (HEAP32[2723] | 0) + 1;
   break;
  }
 } while (0);
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _make_snapshot_rec(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _alloc_clear(40) | 0;
 HEAP32[HEAP32[i5 >> 2] >> 2] = i2;
 if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP8[HEAP32[HEAP32[i5 >> 2] >> 2] >> 0] = HEAP8[HEAP32[i4 >> 2] >> 0] | 0;
 HEAP32[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) _make_snapshot_rec(HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0, (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 24 | 0);
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) _make_snapshot_rec(HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0, (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 32 | 0);
 if (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] | 0) != (HEAP32[26881] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 36 >> 2] = HEAP32[26881];
 STACKTOP = i3;
 return;
}

function _ff_create_stack_element(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = _alloc(32) | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[HEAP32[i9 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] = 0;
 HEAP8[(HEAP32[i9 >> 2] | 0) + 16 >> 0] = 0;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] = HEAP32[i7 >> 2];
 HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] = HEAP32[i8 >> 2];
 if (!(HEAP32[i6 >> 2] | 0)) HEAP32[i6 >> 2] = 114072;
 i8 = _vim_strsave(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = i8;
 if (!(HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0)) {
  _ff_free_stack_element(HEAP32[i9 >> 2] | 0);
  HEAP32[i9 >> 2] = 0;
 }
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _trans_characters(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i7 >> 2] | 0);
 while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i3 = 7;
   break;
  }
  HEAP32[i9 >> 2] = _transchar(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) | 0;
  HEAP32[i10 >> 2] = _strlen(HEAP32[i9 >> 2] | 0) | 0;
  if ((HEAP32[i10 >> 2] | 0) > 1) {
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) - ((HEAP32[i10 >> 2] | 0) - 1);
   if ((HEAP32[i8 >> 2] | 0) <= 0) {
    i3 = 7;
    break;
   }
   i6 = HEAP32[i5 >> 2] | 0;
   _memmove(i6 + (HEAP32[i10 >> 2] | 0) | 0, i6 + 1 | 0, HEAP32[i7 >> 2] | 0) | 0;
  }
  _memmove(HEAP32[i5 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
 }
 if ((i3 | 0) == 7) {
  STACKTOP = i4;
  return;
 }
}

function _ask_yesno(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = 32;
 HEAP32[i8 >> 2] = HEAP32[10180];
 if (HEAP32[26778] | 0) _settmode(2);
 HEAP32[26720] = (HEAP32[26720] | 0) + 1;
 HEAP32[10180] = 2048;
 _setmouse();
 HEAP32[26802] = (HEAP32[26802] | 0) + 1;
 HEAP32[26804] = (HEAP32[26804] | 0) + 1;
 while (1) {
  if (!((HEAP32[i7 >> 2] | 0) != 121 ? (HEAP32[i7 >> 2] | 0) != 110 : 0)) break;
  i2 = HEAP32[27060] | 0;
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  _smsg_attr(i2, 59898, i4) | 0;
  if (HEAP32[i6 >> 2] | 0) HEAP32[i7 >> 2] = _get_keystroke() | 0; else HEAP32[i7 >> 2] = _plain_vgetc() | 0;
  if ((HEAP32[i7 >> 2] | 0) == 3 | (HEAP32[i7 >> 2] | 0) == 27) HEAP32[i7 >> 2] = 110;
  _msg_putchar(HEAP32[i7 >> 2] | 0);
  _out_flush();
 }
 HEAP32[26720] = (HEAP32[26720] | 0) + -1;
 HEAP32[10180] = HEAP32[i8 >> 2];
 _setmouse();
 HEAP32[26802] = (HEAP32[26802] | 0) + -1;
 HEAP32[26804] = (HEAP32[26804] | 0) + -1;
 STACKTOP = i3;
 return HEAP32[i7 >> 2] | 0;
}

function _save_patterns(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 i4 = _alloc(HEAP32[i7 >> 2] << 2) | 0;
 HEAP32[HEAP32[i10 >> 2] >> 2] = i4;
 if (!(HEAP32[HEAP32[i10 >> 2] >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 HEAP32[i11 >> 2] = 0;
 while (1) {
  if ((HEAP32[i11 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) break;
  HEAP32[i12 >> 2] = _vim_strsave(HEAP32[(HEAP32[i8 >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] | 0) | 0;
  if (HEAP32[i12 >> 2] | 0) _backslash_halve(HEAP32[i12 >> 2] | 0);
  HEAP32[(HEAP32[HEAP32[i10 >> 2] >> 2] | 0) + (HEAP32[i11 >> 2] << 2) >> 2] = HEAP32[i12 >> 2];
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 >> 2] = 1;
 i13 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i13 | 0;
}

function _ex_smile(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i3 + 12 >> 2] = i1;
 _msg_start();
 _msg_putchar(10);
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= 2) break;
  HEAP32[i4 >> 2] = HEAP32[1328 + (HEAP32[i6 >> 2] << 2) >> 2];
  while (1) {
   if (!(HEAP8[HEAP32[i4 >> 2] >> 0] | 0)) break;
   L7 : do if ((HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 120) _msg_putchar(10); else {
    i1 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = i1 + 1;
    HEAP32[i5 >> 2] = HEAP8[i1 >> 0];
    while (1) {
     if ((HEAP32[i5 >> 2] | 0) <= 0) break L7;
     if ((HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 111) i2 = 11; else if ((HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 36) i2 = 11; else _msg_putchar(HEAP8[HEAP32[i4 >> 2] >> 0] | 0);
     if ((i2 | 0) == 11) {
      i2 = 0;
      _msg_putchar_attr(HEAP8[HEAP32[i4 >> 2] >> 0] | 0, HEAP32[27055] | 0);
     }
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
    }
   } while (0);
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 _msg_clr_eos();
 STACKTOP = i3;
 return;
}

function _dec(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) == 2147483647) {
  HEAP32[i5 >> 2] = _ml_get(HEAP32[i1 >> 2] | 0) | 0;
  i6 = _strlen(HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i6;
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i6 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) > 0) {
  i1 = i6 + 4 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 if ((HEAP32[i6 >> 2] | 0) > 1) {
  i6 = HEAP32[i4 >> 2] | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  HEAP32[i5 >> 2] = _ml_get(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
  i6 = _strlen(HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i6;
  HEAP32[i3 >> 2] = 1;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 } else {
  HEAP32[i3 >> 2] = -1;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 return 0;
}

function _check_lnums(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) break;
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26886] | 0)) i7 = HEAP32[26887] | 0; else i7 = HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i5 >> 2] = i7;
  while (1) {
   if (!(HEAP32[i5 >> 2] | 0)) break;
   if (HEAP32[i4 >> 2] | 0) i2 = 10; else if ((HEAP32[i5 >> 2] | 0) != (HEAP32[26881] | 0)) i2 = 10;
   if ((i2 | 0) == 10) {
    i2 = 0;
    if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[26773] | 0)) {
     if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
     if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] = HEAP32[HEAP32[26773] >> 2];
    }
   }
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
  }
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
 }
 STACKTOP = i3;
 return;
}

function _ex_redir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 do if (!(_strcasecmp(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 50420) | 0)) _close_redir(); else {
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 62) {
   _emsg2(92476, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 62) {
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
   HEAP32[i4 >> 2] = 97579;
  } else HEAP32[i4 >> 2] = 94940;
  HEAP32[i6 >> 2] = _skipwhite(HEAP32[i6 >> 2] | 0) | 0;
  _close_redir();
  HEAP32[i5 >> 2] = _expand_env_save(HEAP32[i6 >> 2] | 0) | 0;
  if (!(HEAP32[i5 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  } else {
   HEAP32[26856] = _open_exfile(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   _vim_free(HEAP32[i5 >> 2] | 0);
   break;
  }
 } while (0);
 if (!(HEAP32[26856] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26855] = 0;
 STACKTOP = i2;
 return;
}

function ___shgetc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = i1 + 104 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) i2 = 3; else if ((HEAP32[i1 + 108 >> 2] | 0) < (i4 | 0)) i2 = 3; else i2 = 4;
 if ((i2 | 0) == 3) {
  i4 = ___uflow(i1) | 0;
  if ((i4 | 0) < 0) i2 = 4; else {
   i5 = HEAP32[i3 >> 2] | 0;
   i3 = HEAP32[i1 + 8 >> 2] | 0;
   if (!i5) {
    i6 = i3;
    i2 = 9;
   } else {
    i7 = HEAP32[i1 + 4 >> 2] | 0;
    i8 = i5 - (HEAP32[i1 + 108 >> 2] | 0) | 0;
    i5 = i3;
    if ((i3 - i7 | 0) < (i8 | 0)) {
     i6 = i5;
     i2 = 9;
    } else {
     HEAP32[i1 + 100 >> 2] = i7 + (i8 + -1);
     i9 = i5;
    }
   }
   if ((i2 | 0) == 9) {
    HEAP32[i1 + 100 >> 2] = i3;
    i9 = i6;
   }
   i6 = i1 + 4 | 0;
   if (!i9) i10 = HEAP32[i6 >> 2] | 0; else {
    i3 = HEAP32[i6 >> 2] | 0;
    i6 = i1 + 108 | 0;
    HEAP32[i6 >> 2] = i9 + 1 - i3 + (HEAP32[i6 >> 2] | 0);
    i10 = i3;
   }
   i3 = i10 + -1 | 0;
   if ((i4 | 0) == (HEAPU8[i3 >> 0] | 0 | 0)) i11 = i4; else {
    HEAP8[i3 >> 0] = i4;
    i11 = i4;
   }
  }
 }
 if ((i2 | 0) == 4) {
  HEAP32[i1 + 100 >> 2] = 0;
  i11 = -1;
 }
 return i11 | 0;
}

function _option_expand(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 8 >> 2] & 16 | 0) if (HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) {
  if (HEAP32[i6 >> 2] | 0) if ((_strlen(HEAP32[i6 >> 2] | 0) | 0) >>> 0 > 4096) {
   HEAP32[i4 >> 2] = 0;
   i7 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i7 | 0;
  }
  if (!(HEAP32[i6 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 12 >> 2] >> 2];
  _expand_env_esc(HEAP32[i6 >> 2] | 0, HEAP32[26885] | 0, 4096, (HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) == 108024 & 1, 0, 0);
  if (!(_strcmp(HEAP32[26885] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
   HEAP32[i4 >> 2] = 0;
   i7 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i7 | 0;
  } else {
   HEAP32[i4 >> 2] = HEAP32[26885];
   i7 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i7 | 0;
  }
 }
 HEAP32[i4 >> 2] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _u_freebranch(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[i6 >> 2] | 0) == (HEAP32[(HEAP32[i5 >> 2] | 0) + 500 >> 2] | 0)) {
  while (1) {
   if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 500 >> 2] | 0)) break;
   i3 = HEAP32[i5 >> 2] | 0;
   _u_freeheader(i3 | 0, HEAP32[i3 + 500 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  }
  STACKTOP = i4;
  return;
 }
 if (HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
 while (1) {
  if (!(HEAP32[i9 >> 2] | 0)) break;
  HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
  if (HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0) _u_freebranch(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2];
  _u_freeentries(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 }
 STACKTOP = i4;
 return;
}

function _insert_special(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if ((HEAP32[i6 >> 2] | 0) < 0) i4 = 3; else if ((HEAP32[26698] | 0) != 0 & (HEAP32[i7 >> 2] | 0) != 0) i4 = 3;
 do if ((i4 | 0) == 3) {
  HEAP32[i9 >> 2] = _get_special_key_name(HEAP32[i6 >> 2] | 0, HEAP32[26698] | 0) | 0;
  HEAP32[i10 >> 2] = _strlen(HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = HEAPU8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) - 1) >> 0];
  if ((HEAP32[i10 >> 2] | 0) > 2) if (!(_stop_arrow() | 0)) {
   STACKTOP = i5;
   return;
  } else {
   HEAP8[(HEAP32[i9 >> 2] | 0) + ((HEAP32[i10 >> 2] | 0) - 1) >> 0] = 0;
   _ins_str(HEAP32[i9 >> 2] | 0);
   _AppendToRedobuffLit(HEAP32[i9 >> 2] | 0, -1);
   HEAP32[i8 >> 2] = 0;
   break;
  }
 } while (0);
 if ((_stop_arrow() | 0) != 1) {
  STACKTOP = i5;
  return;
 }
 _insertchar(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0 ? 4 : 0, -1);
 STACKTOP = i5;
 return;
}

function _set_rw_fname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[26773];
 if (HEAP32[(HEAP32[26773] | 0) + 596 >> 2] | 0) _apply_autocmds(1, 0, 0, 0, HEAP32[26773] | 0) | 0;
 _apply_autocmds(15, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if ((HEAP32[26773] | 0) != (HEAP32[i7 >> 2] | 0)) {
  _emsg(53793) | 0;
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 if ((_setfname(HEAP32[26773] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0) == 1) {
  i6 = (HEAP32[26773] | 0) + 60 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 8;
 }
 _apply_autocmds(7, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if (HEAP32[(HEAP32[26773] | 0) + 596 >> 2] | 0) _apply_autocmds(0, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if (!(HEAPU8[HEAP32[(HEAP32[26773] | 0) + 624 >> 2] >> 0] | 0)) {
  if (_au_has_group(53842) | 0) _do_doautocmd(53857, 0, 0) | 0;
  _do_modelines(0);
 }
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _prep_redo(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8 + 24 | 0;
 i10 = i8 + 20 | 0;
 i11 = i8 + 16 | 0;
 i12 = i8 + 12 | 0;
 i13 = i8 + 8 | 0;
 i14 = i8 + 4 | 0;
 i15 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = i7;
 _ResetRedobuff();
 if (HEAP32[i9 >> 2] | 0) {
  _AppendCharToRedobuff(34);
  _AppendCharToRedobuff(HEAP32[i9 >> 2] | 0);
 }
 if (HEAP32[i10 >> 2] | 0) _AppendNumberToRedobuff(HEAP32[i10 >> 2] | 0);
 if (HEAP32[i11 >> 2] | 0) _AppendCharToRedobuff(HEAP32[i11 >> 2] | 0);
 if (HEAP32[i12 >> 2] | 0) _AppendCharToRedobuff(HEAP32[i12 >> 2] | 0);
 if (HEAP32[i13 >> 2] | 0) _AppendCharToRedobuff(HEAP32[i13 >> 2] | 0);
 if (HEAP32[i14 >> 2] | 0) _AppendCharToRedobuff(HEAP32[i14 >> 2] | 0);
 if (!(HEAP32[i15 >> 2] | 0)) {
  STACKTOP = i8;
  return;
 }
 _AppendCharToRedobuff(HEAP32[i15 >> 2] | 0);
 STACKTOP = i8;
 return;
}

function _nv_join(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26788] | 0) {
  _nv_operator(i1);
  STACKTOP = i2;
  return;
 }
 if (_checkclearop(HEAP32[i1 >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) <= 1) HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = 2;
 do if (((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) - 1 | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) > 2) {
   HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + 1;
   break;
  }
  _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
  STACKTOP = i2;
  return;
 } while (0);
 i1 = HEAP32[i3 >> 2] | 0;
 _prep_redo(HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, 0, HEAP32[i1 + 8 >> 2] | 0, 0, 0, HEAP32[i1 + 12 >> 2] | 0);
 i1 = HEAP32[i3 >> 2] | 0;
 _do_join(HEAP32[i1 + 24 >> 2] | 0, (HEAP32[i1 + 12 >> 2] | 0) == 0 & 1, 1, 1, 1) | 0;
 STACKTOP = i2;
 return;
}

function _ex_helptags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 44 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 do if (!(_strncmp(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, 44297, 3) | 0)) {
  if ((HEAPU8[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 3 >> 0] | 0 | 0) != 32) if ((HEAPU8[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 3 >> 0] | 0 | 0) != 9) break;
  HEAP32[i7 >> 2] = 1;
  i1 = _skipwhite((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 3 | 0) | 0;
  HEAP32[HEAP32[i4 >> 2] >> 2] = i1;
 } while (0);
 if (!(_strcmp(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, 45276) | 0)) {
  _do_in_path(HEAP32[26969] | 0, 60105, 3, 1, i7) | 0;
  STACKTOP = i3;
  return;
 }
 _ExpandInit(i5);
 HEAP32[i5 >> 2] = 3;
 HEAP32[i6 >> 2] = _ExpandOne(i5, HEAP32[HEAP32[i4 >> 2] >> 2] | 0, 0, 65, 2) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) i2 = 9; else if (_mch_isdir(HEAP32[i6 >> 2] | 0) | 0) _do_helptags(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0); else i2 = 9;
 if ((i2 | 0) == 9) _emsg2(44301, HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
 _vim_free(HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ex_doautoall(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3 + 68 | 0;
 i5 = i3 + 64 | 0;
 i6 = i3 + 32 | 0;
 i7 = i3 + 24 | 0;
 i8 = i3 + 12 | 0;
 i9 = i3 + 8 | 0;
 i10 = i3 + 4 | 0;
 i11 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i9 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[i10 >> 2] = _check_nomodeline(i9) | 0;
 HEAP32[i7 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i7 >> 2] | 0)) {
   i2 = 9;
   break;
  }
  if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) {
   _aucmd_prepbuf(i6, HEAP32[i7 >> 2] | 0);
   _set_bufref(i8, HEAP32[i7 >> 2] | 0);
   HEAP32[i5 >> 2] = _do_doautocmd(HEAP32[i9 >> 2] | 0, 0, i11) | 0;
   if ((HEAP32[i10 >> 2] | 0) != 0 & (HEAP32[i11 >> 2] | 0) != 0) _do_modelines((HEAP32[26881] | 0) == (HEAP32[27113] | 0) ? 32 : 0);
   _aucmd_restbuf(i6);
   if (!(HEAP32[i5 >> 2] | 0)) {
    i2 = 9;
    break;
   }
   if (!(_bufref_valid(i8) | 0)) {
    i2 = 9;
    break;
   }
  }
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2];
 }
 if ((i2 | 0) == 9) {
  _check_cursor();
  STACKTOP = i3;
  return;
 }
}

function _vim_strsave_fnameescape(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = _vim_strsave_escaped(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0 ? 51882 : 51905) | 0;
 if (HEAP32[i5 >> 2] | 0) {
  i5 = (_csh_like_shell() | 0) != 0;
  if (i5 & (HEAP32[i6 >> 2] | 0) != 0) {
   HEAP32[i7 >> 2] = _vim_strsave_escaped(HEAP32[i6 >> 2] | 0, 61875) | 0;
   _vim_free(HEAP32[i6 >> 2] | 0);
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  }
 }
 if (!(HEAP32[i6 >> 2] | 0)) {
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 62) if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 43) {
  if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) != 45) {
   i8 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i3;
   return i8 | 0;
  }
  if (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0 | 0) {
   i8 = HEAP32[i6 >> 2] | 0;
   STACKTOP = i3;
   return i8 | 0;
  }
 }
 _escape_fname(i6);
 i8 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _ex_exit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 if (_text_locked() | 0) {
  _text_locked_msg();
  STACKTOP = i3;
  return;
 }
 if (_before_quit_autocmds(HEAP32[26881] | 0, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0) {
  STACKTOP = i3;
  return;
 }
 if ((_check_more(0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0) == 1) if (_only_one_window() | 0) HEAP32[26778] = 1;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) == 516) i2 = 9; else if (_curbufIsChanged() | 0) i2 = 9; else i2 = 10;
 if ((i2 | 0) == 9) if (_do_write(HEAP32[i4 >> 2] | 0) | 0) i2 = 10;
 do if ((i2 | 0) == 10) if (_check_more(1, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0) {
  if (_only_one_window() | 0) if (_check_changed_any(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, 0) | 0) break;
  if (_only_one_window() | 0) _getout(0);
  _not_exiting();
  HEAP32[26757] = 1;
  i1 = HEAP32[26881] | 0;
  _win_close(i1, ((_buf_hide(HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) | 0) != 0 ^ 1) & 1) | 0;
  STACKTOP = i3;
  return;
 } while (0);
 _not_exiting();
 STACKTOP = i3;
 return;
}

function _cursor_down(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 L1 : do if ((HEAP32[i5 >> 2] | 0) > 0) {
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  do if ((HEAP32[i7 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
   if (((HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) if (_vim_strchr(HEAP32[26904] | 0, 45) | 0) break;
   if (((HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[HEAP32[26773] >> 2]; else HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i7 >> 2];
   break L1;
  } while (0);
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } while (0);
 _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 if (HEAP32[i6 >> 2] | 0) _update_topline();
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _valid_yank_reg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if ((HEAP32[i6 >> 2] | 0) > 0) {
  if (((HEAP32[i6 >> 2] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAP32[i6 >> 2] | 0) - 97 | 0) >>> 0 >= 26) if (((HEAP32[i6 >> 2] | 0) - 48 | 0) >>> 0 >= 10) i3 = 5;
 } else i3 = 5;
 do if ((i3 | 0) == 5) {
  i2 = HEAP32[i6 >> 2] | 0;
  if (HEAP32[i7 >> 2] | 0) {
   if ((i2 | 0) == 35 | (HEAP32[i6 >> 2] | 0) == 34 | (HEAP32[i6 >> 2] | 0) == 45 | (HEAP32[i6 >> 2] | 0) == 95 | (HEAP32[i6 >> 2] | 0) == 42 | (HEAP32[i6 >> 2] | 0) == 43) break;
  } else {
   i1 = (_vim_strchr(62294, i2) | 0) != 0;
   if (i1 | (HEAP32[i6 >> 2] | 0) == 35 | (HEAP32[i6 >> 2] | 0) == 34 | (HEAP32[i6 >> 2] | 0) == 45 | (HEAP32[i6 >> 2] | 0) == 95 | (HEAP32[i6 >> 2] | 0) == 42 | (HEAP32[i6 >> 2] | 0) == 43) break;
  }
  HEAP32[i5 >> 2] = 0;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i8 | 0;
 } while (0);
 HEAP32[i5 >> 2] = 1;
 i8 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i8 | 0;
}

function _ui_focus_change(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 if (HEAP32[i3 >> 2] | 0) {
  i1 = (HEAP32[26621] | 0) + 2 | 0;
  if ((i1 | 0) < (_time(0) | 0)) {
   HEAP32[i4 >> 2] = _check_timestamps(HEAP32[26627] | 0) | 0;
   HEAP32[26621] = _time(0) | 0;
  }
 }
 i1 = _apply_autocmds(HEAP32[i3 >> 2] | 0 ? 52 : 53, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | i1;
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26721] = 0;
 do if (HEAP32[10180] & 8 | 0) _redrawcmdline(); else {
  if ((HEAP32[10180] | 0) == 513 | (HEAP32[10180] | 0) == 1024 | (HEAP32[10180] | 0) == 768 | (HEAP32[10180] | 0) == 1536 | (HEAP32[10180] | 0) == 2048 | (HEAP32[26798] | 0) != 0) {
   _repeat_message();
   break;
  }
  if (!(HEAP32[10180] & 1)) if (!(HEAP32[10180] & 16)) break;
  if (HEAP32[26828] | 0) _update_screen(0) | 0;
  _setcursor();
 } while (0);
 _cursor_on();
 _out_flush_cursor(0, 1);
 if (!(HEAP32[26627] | 0)) {
  STACKTOP = i2;
  return;
 }
 _gui_update_scrollbars(0);
 STACKTOP = i2;
 return;
}

function _add_char_buff(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!((HEAP32[i5 >> 2] | 0) < 0 | (HEAP32[i5 >> 2] | 0) == 128 | (HEAP32[i5 >> 2] | 0) == 0)) if ((HEAP32[i5 >> 2] | 0) == 155) {
  HEAP8[i6 >> 0] = -101;
  HEAP8[i6 + 1 >> 0] = -3;
  HEAP8[i6 + 2 >> 0] = 81;
  HEAP8[i6 + 3 >> 0] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  _add_buff(i7, i6, -1);
  STACKTOP = i3;
  return;
 } else {
  HEAP8[i6 >> 0] = HEAP32[i5 >> 2];
  HEAP8[i6 + 1 >> 0] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  _add_buff(i7, i6, -1);
  STACKTOP = i3;
  return;
 }
 HEAP8[i6 >> 0] = -128;
 if ((HEAP32[i5 >> 2] | 0) == 128) i8 = 254; else if (!(HEAP32[i5 >> 2] | 0)) i8 = 255; else i8 = 0 - (HEAP32[i5 >> 2] | 0) & 255;
 HEAP8[i6 + 1 >> 0] = i8;
 if ((HEAP32[i5 >> 2] | 0) == 128 | (HEAP32[i5 >> 2] | 0) == 0) i9 = 88; else i9 = (0 - (HEAP32[i5 >> 2] | 0) | 0) >>> 8 & 255;
 HEAP8[i6 + 2 >> 0] = i9;
 HEAP8[i6 + 3 >> 0] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 _add_buff(i7, i6, -1);
 STACKTOP = i3;
 return;
}

function _ex_win_close(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2];
 if (_bufIsChanged(HEAP32[i9 >> 2] | 0) | 0) i10 = (HEAP32[(HEAP32[i9 >> 2] | 0) + 56 >> 2] | 0) <= 1; else i10 = 0;
 HEAP32[i8 >> 2] = i10 & 1;
 if (HEAP32[i8 >> 2] | 0) {
  i10 = (_buf_hide(HEAP32[i9 >> 2] | 0) | 0) != 0;
  if (!(i10 | (HEAP32[i5 >> 2] | 0) != 0)) {
   _no_write_message();
   STACKTOP = i4;
   return;
  }
 }
 HEAP32[26757] = 1;
 i5 = HEAP32[i6 >> 2] | 0;
 i6 = (HEAP32[i8 >> 2] | 0) != 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  if (i6) i11 = 0; else i11 = (_buf_hide(HEAP32[i9 >> 2] | 0) | 0) != 0 ^ 1;
  _win_close(i5, i11 & 1) | 0;
  STACKTOP = i4;
  return;
 } else {
  if (i6) i12 = 0; else i12 = (_buf_hide(HEAP32[i9 >> 2] | 0) | 0) != 0 ^ 1;
  _win_close_othertab(i5, i12 & 1, HEAP32[i7 >> 2] | 0);
  STACKTOP = i4;
  return;
 }
}

function _scrollup(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 i2 = (HEAP32[26881] | 0) + 68 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i4 >> 2] | 0);
 i2 = (HEAP32[26881] | 0) + 144 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i4 >> 2] | 0);
 if ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 68 >> 2] = HEAP32[HEAP32[26773] >> 2];
 if ((HEAP32[(HEAP32[26881] | 0) + 144 >> 2] | 0) > ((HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0)) HEAP32[(HEAP32[26881] | 0) + 144 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) + 1;
 i4 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -50;
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 i4 = HEAP32[26881] | 0;
 HEAP32[i4 + 24 >> 2] = HEAP32[i4 + 68 >> 2];
 i4 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -32;
 _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _check_tty(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 i5 = i2 + 16 | 0;
 i6 = i2 + 12 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = _mch_input_isatty() | 0;
 if (HEAP32[26798] | 0) {
  if (HEAP32[i6 >> 2] | 0) {
   STACKTOP = i2;
   return;
  }
  HEAP32[26787] = 1;
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 132 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[10178] | 0) != 0 & (HEAP32[i6 >> 2] | 0) != 0 | (HEAP32[26628] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 136 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[10178] | 0)) {
  i1 = HEAP32[10211] | 0;
  HEAP32[i4 >> 2] = 94663;
  _fprintf(i1, 97576, i4) | 0;
 }
 if (!(HEAP32[i6 >> 2] | 0)) {
  i4 = HEAP32[10211] | 0;
  HEAP32[i3 >> 2] = 94706;
  _fprintf(i4, 97576, i3) | 0;
 }
 _out_flush();
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 140 >> 2] | 0) if (!((HEAP32[10178] | 0) != 0 & (HEAP32[i6 >> 2] | 0) != 0)) _exit(1);
 if (HEAP32[27163] | 0) {
  STACKTOP = i2;
  return;
 }
 _ui_delay(2e3, 1);
 STACKTOP = i2;
 return;
}

function _nv_esc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0)) if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0)) if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0)) if (!(HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 4 >> 2] | 0)) i5 = (HEAP32[26883] | 0) != 0 ^ 1; else i5 = 0; else i5 = 0; else i5 = 0; else i5 = 0;
 HEAP32[i4 >> 2] = i5 & 1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) {
  if ((((HEAP32[26806] | 0) != 0 | (HEAP32[26788] | 0) != 0) ^ 1) & (HEAP32[i4 >> 2] | 0) != 0) _msg(62038) | 0;
  if (!(HEAP32[26883] | 0)) HEAP32[26806] = 0;
 }
 if (HEAP32[26788] | 0) {
  _end_visual_mode();
  _check_cursor_col();
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  _redraw_curbuf_later(20);
 } else if (HEAP32[i4 >> 2] | 0) _vim_beep(128);
 _clearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 if (HEAP32[26806] | 0) {
  STACKTOP = i2;
  return;
 }
 i3 = (_goto_im() | 0) != 0;
 if (!(i3 & (HEAP32[26826] | 0) == 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26806] = 97;
 STACKTOP = i2;
 return;
}

function _transchar_nonprint(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i5 >> 2] | 0) == 10) HEAP32[i5 >> 2] = 0; else if ((HEAP32[i5 >> 2] | 0) == 13) if ((_get_fileformat(HEAP32[26773] | 0) | 0) == 2) HEAP32[i5 >> 2] = 10;
 if (HEAP32[26908] & 4 | 0) {
  _transchar_hex(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) <= 127) {
  HEAP8[HEAP32[i4 >> 2] >> 0] = 94;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] = HEAP32[i5 >> 2] ^ 64;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 2 >> 0] = 0;
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) >= 160 & (HEAP32[i5 >> 2] | 0) <= 254) {
  HEAP8[i2 >> 0] = 124;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] = (HEAP32[i5 >> 2] | 0) - 128;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 2 >> 0] = 0;
  STACKTOP = i3;
  return;
 } else {
  HEAP8[i2 >> 0] = 126;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] = (HEAP32[i5 >> 2] | 0) - 128 ^ 64;
  HEAP8[(HEAP32[i4 >> 2] | 0) + 2 >> 0] = 0;
  STACKTOP = i3;
  return;
 }
}

function _restore_subexpr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26332] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
 if (HEAP32[26332] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= 10) break;
  if (!(HEAP32[26312] | 0)) {
   i1 = HEAP32[i4 >> 2] << 3 | 0;
   i5 = (HEAP32[26316] | 0) + i1 | 0;
   i6 = (HEAP32[i3 >> 2] | 0) + 28 + i1 | 0;
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   i6 = HEAP32[i4 >> 2] << 3 | 0;
   i5 = (HEAP32[26317] | 0) + i6 | 0;
   i1 = (HEAP32[i3 >> 2] | 0) + 108 + i6 | 0;
   HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  } else {
   HEAP32[(HEAP32[26314] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 28 + (HEAP32[i4 >> 2] << 3) >> 2];
   HEAP32[(HEAP32[26315] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 108 + (HEAP32[i4 >> 2] << 3) >> 2];
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _change_warning(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[26773] | 0) + 776 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 i1 = (_curbufIsChanged() | 0) != 0;
 if (i1 | (HEAP32[26744] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[26773] | 0) + 676 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26785] = (HEAP32[26785] | 0) + 1;
 _apply_autocmds(38, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[26785] = (HEAP32[26785] | 0) + -1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 676 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _msg_start();
 if ((HEAP32[26877] | 0) == ((HEAP32[10173] | 0) - 1 | 0)) HEAP32[27043] = HEAP32[i3 >> 2];
 _msg_source(HEAP32[27067] | 0);
 _msg_puts_attr(59818, HEAP32[27067] | 4096);
 _msg_clr_eos();
 _msg_end() | 0;
 if (!((HEAP32[26809] | 0) != 0 | (HEAP32[26787] | 0) != 0)) {
  _out_flush();
  _ui_delay(1e3, 1);
 }
 HEAP32[(HEAP32[26773] | 0) + 776 >> 2] = 1;
 HEAP32[26699] = 0;
 if ((HEAP32[26877] | 0) >= ((HEAP32[10173] | 0) - 1 | 0)) {
  STACKTOP = i2;
  return;
 }
 _showmode() | 0;
 STACKTOP = i2;
 return;
}

function _term_cursor_mode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[26781] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAPU8[HEAP32[26585] >> 0] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[10180] & 80 | 0) == 80) {
  if (!((HEAP32[i3 >> 2] | 0) != 0 | (HEAP32[8289] | 0) != 80)) {
   STACKTOP = i2;
   return;
  }
  if (HEAPU8[HEAP32[26586] >> 0] | 0 | 0) HEAP32[i4 >> 2] = HEAP32[26586]; else HEAP32[i4 >> 2] = HEAP32[26584];
  if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) {
   STACKTOP = i2;
   return;
  }
  _out_str(HEAP32[i4 >> 2] | 0);
  HEAP32[8289] = 80;
  STACKTOP = i2;
  return;
 }
 i4 = (HEAP32[i3 >> 2] | 0) != 0;
 i3 = HEAP32[8289] | 0;
 if (!(HEAP32[10180] & 16)) {
  if (!(i4 | (i3 | 0) != 1)) {
   STACKTOP = i2;
   return;
  }
  _out_str(HEAP32[26585] | 0);
  HEAP32[8289] = 1;
  STACKTOP = i2;
  return;
 }
 if (!(i4 | (i3 | 0) != 16)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAPU8[HEAP32[26584] >> 0] | 0)) {
  STACKTOP = i2;
  return;
 }
 _out_str(HEAP32[26584] | 0);
 HEAP32[8289] = 16;
 STACKTOP = i2;
 return;
}

function _save_subexpr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = HEAP32[26332];
 if (HEAP32[26332] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= 10) break;
  if (!(HEAP32[26312] | 0)) {
   i1 = HEAP32[i4 >> 2] << 3 | 0;
   i5 = (HEAP32[i3 >> 2] | 0) + 28 + i1 | 0;
   i6 = (HEAP32[26316] | 0) + i1 | 0;
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   i6 = HEAP32[i4 >> 2] << 3 | 0;
   i5 = (HEAP32[i3 >> 2] | 0) + 108 + i6 | 0;
   i1 = (HEAP32[26317] | 0) + i6 | 0;
   HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  } else {
   HEAP32[(HEAP32[i3 >> 2] | 0) + 28 + (HEAP32[i4 >> 2] << 3) >> 2] = HEAP32[(HEAP32[26314] | 0) + (HEAP32[i4 >> 2] << 2) >> 2];
   HEAP32[(HEAP32[i3 >> 2] | 0) + 108 + (HEAP32[i4 >> 2] << 3) >> 2] = HEAP32[(HEAP32[26315] | 0) + (HEAP32[i4 >> 2] << 2) >> 2];
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _mf_hash_add_item(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = 0;
 if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) HEAP32[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] = HEAP32[i5 >> 2];
 i5 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 if (HEAP8[(HEAP32[i4 >> 2] | 0) + 268 >> 0] | 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) >>> 6 >>> 0 <= (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) >>> 0) {
  STACKTOP = i3;
  return;
 }
 if (_mf_hash_grow(HEAP32[i4 >> 2] | 0) | 0) {
  STACKTOP = i3;
  return;
 }
 HEAP8[(HEAP32[i4 >> 2] | 0) + 268 >> 0] = 1;
 STACKTOP = i3;
 return;
}

function _clip_may_redraw_selection(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i9 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
 if (!(HEAPU16[54222] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) < (HEAP32[27101] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) > (HEAP32[27103] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[27101] | 0)) if ((HEAP32[i8 >> 2] | 0) < (HEAP32[27102] | 0)) HEAP32[i8 >> 2] = HEAP32[27102];
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[27103] | 0)) if ((HEAP32[i9 >> 2] | 0) > (HEAP32[27104] | 0)) HEAP32[i9 >> 2] = HEAP32[27104];
 if ((HEAP32[i9 >> 2] | 0) <= (HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 i7 = HEAP32[i5 >> 2] | 0;
 _clip_invert_area(i7 | 0, HEAP32[i8 >> 2] | 0, i7 | 0, HEAP32[i9 >> 2] | 0, 0);
 STACKTOP = i4;
 return;
}

function _do_augroup(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[i5 >> 2] | 0) if (!(HEAPU8[i2 >> 0] | 0)) {
  _emsg(92160) | 0;
  STACKTOP = i3;
  return;
 } else {
  _au_del_group(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 if (!(_strcasecmp(i2, 55867) | 0)) {
  HEAP32[2732] = -1;
  STACKTOP = i3;
  return;
 }
 if (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) {
  HEAP32[i6 >> 2] = _au_new_group(HEAP32[i4 >> 2] | 0) | 0;
  if ((HEAP32[i6 >> 2] | 0) == -2) {
   STACKTOP = i3;
   return;
  }
  HEAP32[2732] = HEAP32[i6 >> 2];
  STACKTOP = i3;
  return;
 }
 _msg_start();
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[2723] | 0)) break;
  if (HEAP32[(HEAP32[2727] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0) {
   _msg_puts(HEAP32[(HEAP32[2727] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0);
   _msg_puts(71550);
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 _msg_clr_eos();
 _msg_end() | 0;
 STACKTOP = i3;
 return;
}

function _gui_init_font(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 24 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i3 + 8 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 if (!(HEAP32[26627] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP8[i6 >> 0] = 0;
 L5 : do if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) HEAP32[i7 >> 2] = 1; else {
  do {
   if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) break L5;
   _copy_option_part(i5, i6, 320, 84434) | 0;
  } while ((_gui_mch_init_font(i6, 0) | 0) != 1);
  HEAP32[i8 >> 2] = 1;
 } while (0);
 if ((HEAP32[i8 >> 2] | 0) != 1) if (_strcmp(HEAP32[i5 >> 2] | 0, 84483) | 0) if ((HEAP32[i7 >> 2] | 0) != 0 | (HEAP32[26670] | 0) == 0) HEAP32[i8 >> 2] = _gui_mch_init_font(0, 0) | 0;
 if ((HEAP32[i8 >> 2] | 0) == 1) {
  _gui_mch_set_font(HEAP32[26670] | 0);
  _gui_set_shellsize(1, 1, 15);
 }
 HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _ex_tag_cmd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 switch (HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) {
 case 106:
  {
   HEAP32[i6 >> 2] = 9;
   break;
  }
 case 115:
  {
   HEAP32[i6 >> 2] = 7;
   break;
  }
 case 112:
  {
   HEAP32[i6 >> 2] = 4;
   break;
  }
 case 78:
  {
   HEAP32[i6 >> 2] = 4;
   break;
  }
 case 110:
  {
   HEAP32[i6 >> 2] = 3;
   break;
  }
 case 111:
  {
   HEAP32[i6 >> 2] = 2;
   break;
  }
 case 114:
 case 102:
  {
   HEAP32[i6 >> 2] = 5;
   break;
  }
 case 108:
  {
   HEAP32[i6 >> 2] = 6;
   break;
  }
 default:
  HEAP32[i6 >> 2] = 1;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 108) {
  _ex_ni(i2);
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) > 0) i7 = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0; else i7 = 1;
 _do_tag(HEAP32[i2 >> 2] | 0, HEAP32[i6 >> 2] | 0, i7, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0, 1) | 0;
 STACKTOP = i3;
 return;
}

function _editing_arg_idx(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 188 >> 2] | 0) >= (HEAP32[HEAP32[(HEAP32[i3 >> 2] | 0) + 184 >> 2] >> 2] | 0)) {
  i4 = 1;
  i5 = i4 ^ 1;
  i6 = i5 & 1;
  STACKTOP = i2;
  return i6 | 0;
 }
 if ((HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) + 92 >> 2] | 0) == (HEAP32[(HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[(HEAP32[i3 >> 2] | 0) + 188 >> 2] << 3) + 4 >> 2] | 0)) {
  i4 = 0;
  i5 = i4 ^ 1;
  i6 = i5 & 1;
  STACKTOP = i2;
  return i6 | 0;
 }
 if (!(HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) + 68 >> 2] | 0)) {
  i4 = 1;
  i5 = i4 ^ 1;
  i6 = i5 & 1;
  STACKTOP = i2;
  return i6 | 0;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 i7 = _alist_name((HEAP32[(HEAP32[i1 + 184 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[i1 + 188 >> 2] << 3) | 0) | 0;
 i4 = ((_fullpathcmp(i7, HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) + 68 >> 2] | 0, 1) | 0) & 1 | 0) != 0 ^ 1;
 i5 = i4 ^ 1;
 i6 = i5 & 1;
 STACKTOP = i2;
 return i6 | 0;
}

function _set_string_default_esc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (HEAP32[i8 >> 2] | 0) if (_vim_strchr(HEAP32[i7 >> 2] | 0, 32) | 0) HEAP32[i9 >> 2] = _vim_strsave_escaped(HEAP32[i7 >> 2] | 0, 97452) | 0; else i4 = 4; else i4 = 4;
 if ((i4 | 0) == 4) HEAP32[i9 >> 2] = _vim_strsave(HEAP32[i7 >> 2] | 0) | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i10 >> 2] = _findoption(HEAP32[i6 >> 2] | 0) | 0;
 if ((HEAP32[i10 >> 2] | 0) < 0) {
  STACKTOP = i5;
  return;
 }
 if (HEAP32[15328 + ((HEAP32[i10 >> 2] | 0) * 28 | 0) + 8 >> 2] & 128 | 0) _vim_free(HEAP32[15328 + ((HEAP32[i10 >> 2] | 0) * 28 | 0) + 20 >> 2] | 0);
 HEAP32[15328 + ((HEAP32[i10 >> 2] | 0) * 28 | 0) + 20 >> 2] = HEAP32[i9 >> 2];
 i9 = 15328 + ((HEAP32[i10 >> 2] | 0) * 28 | 0) + 8 | 0;
 HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 128;
 STACKTOP = i5;
 return;
}

function _startPS(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = _ml_get(HEAP32[i6 >> 2] | 0) | 0;
 do if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != (HEAP32[i7 >> 2] | 0)) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) != 12) {
  if (HEAP32[i8 >> 2] | 0) if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 125) break;
  do if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0 | 0) == 46) {
   if (!(_inmacro(HEAP32[26973] | 0, (HEAP32[i9 >> 2] | 0) + 1 | 0) | 0)) {
    if (HEAP32[i7 >> 2] | 0) break;
    if (!(_inmacro(HEAP32[26960] | 0, (HEAP32[i9 >> 2] | 0) + 1 | 0) | 0)) break;
   }
   HEAP32[i5 >> 2] = 1;
   i10 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i4;
   return i10 | 0;
  } while (0);
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } while (0);
 HEAP32[i5 >> 2] = 1;
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _ex_print(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) {
  _emsg(94134) | 0;
  HEAP32[26799] = 1;
  STACKTOP = i2;
  return;
 }
 while (1) {
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) break;
  i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0;
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 294) i4 = 1; else if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 533) i4 = 1; else i4 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 2 | 0) != 0;
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 201) i5 = 1; else i5 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] & 1 | 0) != 0;
  _print_line(i1, i4 & 1, i5 & 1);
  i1 = (HEAP32[i3 >> 2] | 0) + 36 | 0;
  i6 = (HEAP32[i1 >> 2] | 0) + 1 | 0;
  HEAP32[i1 >> 2] = i6;
  if ((i6 | 0) > (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) break;
  _out_flush();
  _ui_breakcheck();
 }
 _setpcmark();
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 _beginline(6);
 HEAP32[26799] = 1;
 STACKTOP = i2;
 return;
}

function _empty_curbuf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 32 | 0;
 i6 = i4 + 28 | 0;
 i7 = i4 + 24 | 0;
 i8 = i4 + 20 | 0;
 i9 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i11 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i10 >> 2] = HEAP32[26773];
 if ((HEAP32[i8 >> 2] | 0) == 2) {
  _emsg(42110) | 0;
  HEAP32[i5 >> 2] = 0;
  i12 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i12 | 0;
 }
 _set_bufref(i11, HEAP32[i10 >> 2] | 0);
 if (HEAP32[i6 >> 2] | 0) _close_windows(HEAP32[i10 >> 2] | 0, 1);
 _setpcmark();
 HEAP32[i9 >> 2] = _do_ecmd(0, 0, 0, 0, 1, HEAP32[i7 >> 2] | 0 ? 8 : 0, HEAP32[26881] | 0) | 0;
 if ((HEAP32[i10 >> 2] | 0) != (HEAP32[26773] | 0)) if (_bufref_valid(i11) | 0) if (!(HEAP32[(HEAP32[i10 >> 2] | 0) + 56 >> 2] | 0)) _close_buffer(0, HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0);
 if (!(HEAP32[i6 >> 2] | 0)) HEAP32[26709] = 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i12 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i12 | 0;
}

function _gui_name_to_builtin_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
  i1 = (_tolower(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) & 255;
  HEAP8[HEAP32[i6 >> 2] >> 0] = i1;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 HEAP32[i7 >> 2] = 782;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= 782) {
   i2 = 9;
   break;
  }
  i7 = (_strcasecmp(HEAP32[i5 >> 2] | 0, HEAP32[34436 + (HEAP32[i8 >> 2] << 3) >> 2] | 0) | 0) == 0;
  i9 = HEAP32[i8 >> 2] | 0;
  if (i7) {
   i2 = 7;
   break;
  }
  HEAP32[i8 >> 2] = i9 + 1;
 }
 if ((i2 | 0) == 7) {
  HEAP32[i4 >> 2] = HEAP32[34436 + (i9 << 3) + 4 >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = -11111;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 return 0;
}

function _vsnprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i6 + 124 | 0;
 i8 = i6;
 i9 = i8;
 i10 = 41104;
 i11 = i9 + 124 | 0;
 do {
  HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
  i9 = i9 + 4 | 0;
  i10 = i10 + 4 | 0;
 } while ((i9 | 0) < (i11 | 0));
 if ((i2 + -1 | 0) >>> 0 > 2147483646) if (!i2) {
  i12 = i7;
  i13 = 1;
  i5 = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  i14 = -1;
 } else {
  i12 = i1;
  i13 = i2;
  i5 = 4;
 }
 if ((i5 | 0) == 4) {
  i5 = -2 - i12 | 0;
  i2 = i13 >>> 0 > i5 >>> 0 ? i5 : i13;
  HEAP32[i8 + 48 >> 2] = i2;
  i13 = i8 + 20 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i8 + 44 >> 2] = i12;
  i5 = i12 + i2 | 0;
  i12 = i8 + 16 | 0;
  HEAP32[i12 >> 2] = i5;
  HEAP32[i8 + 28 >> 2] = i5;
  i5 = _vfprintf(i8, i3, i4) | 0;
  if (!i2) i14 = i5; else {
   i2 = HEAP32[i13 >> 2] | 0;
   HEAP8[i2 + (((i2 | 0) == (HEAP32[i12 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   i14 = i5;
  }
 }
 STACKTOP = i6;
 return i14 | 0;
}

function _sift(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = i1;
 L1 : do if ((i4 | 0) > 1) {
  i8 = 0 - i2 | 0;
  i9 = i1;
  i10 = i4;
  i11 = 1;
  i12 = i1;
  while (1) {
   i13 = i9 + i8 | 0;
   i14 = i10 + -2 | 0;
   i15 = i13 + (0 - (HEAP32[i5 + (i14 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[i3 & 15](i12, i15) | 0) > -1) if ((FUNCTION_TABLE_iii[i3 & 15](i12, i13) | 0) > -1) {
    i16 = i11;
    break L1;
   }
   i17 = i7 + (i11 << 2) | 0;
   if ((FUNCTION_TABLE_iii[i3 & 15](i15, i13) | 0) > -1) {
    HEAP32[i17 >> 2] = i15;
    i18 = i15;
    i19 = i10 + -1 | 0;
   } else {
    HEAP32[i17 >> 2] = i13;
    i18 = i13;
    i19 = i14;
   }
   i14 = i11 + 1 | 0;
   if ((i19 | 0) <= 1) {
    i16 = i14;
    break L1;
   }
   i9 = i18;
   i10 = i19;
   i11 = i14;
   i12 = HEAP32[i7 >> 2] | 0;
  }
 } else i16 = 1; while (0);
 _cycle(i2, i7, i16);
 STACKTOP = i6;
 return;
}

function _get_wincmd_addr_type(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 switch (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) {
 case 60:
 case 62:
 case 76:
 case 72:
 case 12:
 case 108:
 case 8:
 case 104:
 case 118:
 case 22:
 case 7:
 case 103:
 case 29:
 case 93:
 case 124:
 case 95:
 case 31:
 case 45:
 case 43:
 case 74:
 case 75:
 case 82:
 case 114:
 case 18:
 case 84:
 case 11:
 case 107:
 case 10:
 case 106:
 case 110:
 case 14:
 case 115:
 case 19:
 case 83:
  {
   HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] = 0;
   break;
  }
 case 94:
 case 30:
  {
   HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] = 4;
   break;
  }
 case 24:
 case 120:
 case 87:
 case 119:
 case 23:
 case 111:
 case 15:
 case 99:
 case 3:
 case 113:
 case 17:
  {
   HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] = 1;
   break;
  }
 case 13:
 case 61:
 case 16:
 case 112:
 case 2:
 case 98:
 case 20:
 case 116:
  {
   HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 STACKTOP = i3;
 return;
}

function _make_percent_swname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = _fix_fname(i2 | 0 ? i2 | 0 : 114072) | 0;
 HEAP32[i6 >> 2] = 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  i9 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i7 >> 2] = _alloc((_strlen(HEAP32[i8 >> 2] | 0) | 0) + 1 | 0) | 0;
 if (HEAP32[i7 >> 2] | 0) {
  _strcpy(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  while (1) {
   if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
   if (_vim_ispathsep(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) HEAP8[HEAP32[i6 >> 2] >> 0] = 37;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  }
  HEAP32[i6 >> 2] = _concat_fnames(HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1) | 0;
  _vim_free(HEAP32[i7 >> 2] | 0);
 }
 _vim_free(HEAP32[i8 >> 2] | 0);
 i9 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _gui_mch_init() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i6 = i1;
 _vimwasm_will_init();
 HEAP32[i2 >> 2] = _vimwasm_get_char_width() | 0;
 HEAP32[i3 >> 2] = _vimwasm_get_char_height() | 0;
 HEAP32[i4 >> 2] = _vimwasm_get_char_ascent() | 0;
 HEAP32[i5 >> 2] = _vimwasm_get_win_width() | 0;
 HEAP32[i6 >> 2] = _vimwasm_get_win_height() | 0;
 HEAP32[26647] = 0;
 HEAP32[26648] = 0;
 HEAP32[26668] = 0;
 HEAP32[26669] = 0;
 HEAP32[26665] = HEAP32[i2 >> 2];
 HEAP32[26666] = HEAP32[i3 >> 2];
 HEAP32[26667] = HEAP32[i4 >> 2];
 HEAP32[26641] = (HEAP32[i6 >> 2] | 0) / (HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[26640] = (HEAP32[i5 >> 2] | 0) / (HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[26626] = 1;
 _fflush(HEAP32[10211] | 0) | 0;
 HEAP32[26675] = 16777215;
 HEAP32[26674] = 0;
 _set_normal_colors();
 _gui_check_colors();
 HEAP32[26677] = HEAP32[26675];
 HEAP32[26676] = HEAP32[26674];
 _highlight_gui_started();
 HEAP32[10173] = HEAP32[26641];
 HEAP32[10174] = HEAP32[26640];
 STACKTOP = i1;
 return 1;
}

function _RealWaitForChar(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i6 = i5 + 76 | 0;
 i7 = i5 + 72 | 0;
 i8 = i5 + 64 | 0;
 i9 = i5 + 60 | 0;
 i10 = i5 + 56 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 i13 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i5 + 68 >> 2] = i3;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i6 >> 2];
 HEAP16[i11 + 4 >> 1] = 1;
 HEAP32[i12 >> 2] = 1;
 if (HEAP32[i8 >> 2] | 0) HEAP32[HEAP32[i8 >> 2] >> 2] = 0;
 HEAP32[i9 >> 2] = _poll(i11, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
 if ((HEAP32[i9 >> 2] | 0) > 0) i14 = (HEAP16[i11 + 6 >> 1] & 1 | 0) != 0; else i14 = 0;
 HEAP32[i10 >> 2] = i14 & 1;
 if (!((HEAP32[i10 >> 2] | 0) == 0 & (HEAP32[i8 >> 2] | 0) != 0 & (HEAP32[i9 >> 2] | 0) > 0)) {
  i15 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i5;
  return i15 | 0;
 }
 HEAP32[HEAP32[i8 >> 2] >> 2] = 1;
 i15 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i5;
 return i15 | 0;
}

function _ml_setflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) + 20 >> 2];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) {
   i2 = 7;
   break;
  }
  i7 = HEAP32[i5 >> 2] | 0;
  if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = HEAP32[i7 + 16 >> 2];
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[i7 + 20 >> 2];
 HEAP8[(HEAP32[i6 >> 2] | 0) + 108 + 899 >> 0] = HEAP32[(HEAP32[i4 >> 2] | 0) + 108 >> 2] | 0 ? 85 : 0;
 i7 = HEAPU8[(HEAP32[i6 >> 2] | 0) + 108 + 898 >> 0] & -4;
 i2 = (i7 | (_get_fileformat(HEAP32[i4 >> 2] | 0) | 0) + 1) & 255;
 HEAP8[(HEAP32[i6 >> 2] | 0) + 108 + 898 >> 0] = i2;
 i2 = (HEAP32[i5 >> 2] | 0) + 28 | 0;
 HEAP8[i2 >> 0] = HEAP8[i2 >> 0] | 1;
 _mf_sync(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0, 8) | 0;
 STACKTOP = i3;
 return;
}

function _u_freeentries(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 508 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 508 >> 2] = 0;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 504 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) HEAP32[(HEAP32[i5 >> 2] | 0) + 504 >> 2] = 0;
 if (HEAP32[i7 >> 2] | 0) if ((HEAP32[i6 >> 2] | 0) == (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) HEAP32[HEAP32[i7 >> 2] >> 2] = 0;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
  i7 = HEAP32[i8 >> 2] | 0;
  _u_freeentry(i7 | 0, HEAP32[i7 + 20 >> 2] | 0);
  HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 }
 _vim_free(HEAP32[i6 >> 2] | 0);
 i6 = (HEAP32[i5 >> 2] | 0) + 512 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
 STACKTOP = i4;
 return;
}

function _get_op_type(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 do if ((HEAP32[i6 >> 2] | 0) == 114) HEAP32[i5 >> 2] = 16; else {
  if ((HEAP32[i6 >> 2] | 0) == 126) {
   HEAP32[i5 >> 2] = 7;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) == 103 & (HEAP32[i7 >> 2] | 0) == 1) {
   HEAP32[i5 >> 2] = 28;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) == 103 & (HEAP32[i7 >> 2] | 0) == 24) {
   HEAP32[i5 >> 2] = 29;
   break;
  }
  HEAP32[i8 >> 2] = 0;
  while (1) {
   if ((HEAP8[62104 + ((HEAP32[i8 >> 2] | 0) * 3 | 0) >> 0] | 0) == (HEAP32[i6 >> 2] | 0)) if ((HEAP8[62104 + ((HEAP32[i8 >> 2] | 0) * 3 | 0) + 1 >> 0] | 0) == (HEAP32[i7 >> 2] | 0)) break;
   if ((HEAP32[i8 >> 2] | 0) == 29) {
    i3 = 13;
    break;
   }
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  }
  if ((i3 | 0) == 13) _internal_error(62194);
  HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 } while (0);
 STACKTOP = i4;
 return HEAP32[i5 >> 2] | 0;
}

function _ml_new_data(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 i3 = _mf_new(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i3;
 if (!i3) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 } else {
  HEAP32[i10 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2];
  HEAP16[HEAP32[i10 >> 2] >> 1] = 25697;
  i3 = Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 592 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] = i3;
  HEAP32[(HEAP32[i10 >> 2] | 0) + 8 >> 2] = i3;
  i3 = HEAP32[i10 >> 2] | 0;
  HEAP32[i3 + 4 >> 2] = (HEAP32[i3 + 8 >> 2] | 0) - 20;
  HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 return 0;
}

function _frame_add_statusline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP8[HEAP32[i3 >> 2] >> 0] | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i1 + 36 >> 2];
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] | 0) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) > 0) {
   i5 = (HEAP32[i4 >> 2] | 0) + 88 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
  }
  HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] = 1;
  STACKTOP = i2;
  return;
 }
 i4 = (HEAP8[i1 >> 0] | 0) == 1;
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2];
 if (i4) {
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break;
   _frame_add_statusline(HEAP32[i3 >> 2] | 0);
   HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
  }
  STACKTOP = i2;
  return;
 }
 while (1) {
  i6 = HEAP32[i3 >> 2] | 0;
  if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0)) break;
  HEAP32[i3 >> 2] = HEAP32[i6 + 24 >> 2];
 }
 _frame_add_statusline(i6);
 STACKTOP = i2;
 return;
}

function _restore_typeahead(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) {
  _free_typebuf();
  i1 = 107268;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i1 + 36 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 4 | 0;
  } while ((i1 | 0) < (i5 | 0));
 }
 HEAP32[2733] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 HEAP32[25637] = HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2];
 _free_buff(101928);
 i4 = (HEAP32[i3 >> 2] | 0) + 48 | 0;
 HEAP32[25482] = HEAP32[i4 >> 2];
 HEAP32[25483] = HEAP32[i4 + 4 >> 2];
 HEAP32[25484] = HEAP32[i4 + 8 >> 2];
 HEAP32[25485] = HEAP32[i4 + 12 >> 2];
 HEAP32[25486] = HEAP32[i4 + 16 >> 2];
 _free_buff(101948);
 i4 = (HEAP32[i3 >> 2] | 0) + 68 | 0;
 HEAP32[25487] = HEAP32[i4 >> 2];
 HEAP32[25488] = HEAP32[i4 + 4 >> 2];
 HEAP32[25489] = HEAP32[i4 + 8 >> 2];
 HEAP32[25490] = HEAP32[i4 + 12 >> 2];
 HEAP32[25491] = HEAP32[i4 + 16 >> 2];
 _set_input_buf(HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _fillchar_status(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26881] | 0)) {
  HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[27061];
  HEAP32[i7 >> 2] = HEAP32[10185];
 } else {
  HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[27062];
  HEAP32[i7 >> 2] = HEAP32[10186];
 }
 do if (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) {
  if ((HEAP32[27061] | 0) == (HEAP32[27062] | 0)) if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26881] | 0)) if ((HEAP32[26887] | 0) != (HEAP32[27112] | 0)) if ((HEAP32[10185] | 0) == (HEAP32[10186] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } while (0);
 if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26881] | 0)) {
  HEAP32[i4 >> 2] = 94;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  HEAP32[i4 >> 2] = 61;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _checkforcmd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if (!(HEAP8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0)) break;
  if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) != (HEAPU8[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0)) break;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) if (!(_isalpha(HEAPU8[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + (HEAP32[i9 >> 2] | 0) >> 0] | 0) | 0)) {
  i8 = _skipwhite((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + (HEAP32[i9 >> 2] | 0) | 0) | 0;
  HEAP32[HEAP32[i6 >> 2] >> 2] = i8;
  HEAP32[i5 >> 2] = 1;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _strcspn(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = HEAP8[i2 >> 0] | 0;
 L1 : do if (!(i6 << 24 >> 24)) i3 = 3; else if (!(HEAP8[i2 + 1 >> 0] | 0)) i3 = 3; else {
  _memset(i5 | 0, 0, 32) | 0;
  i7 = HEAP8[i2 >> 0] | 0;
  if (i7 << 24 >> 24) {
   i8 = i2;
   i9 = i7;
   do {
    i7 = i9 & 255;
    i10 = i5 + (i7 >>> 5 << 2) | 0;
    HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1 << (i7 & 31);
    i8 = i8 + 1 | 0;
    i9 = HEAP8[i8 >> 0] | 0;
   } while (i9 << 24 >> 24 != 0);
  }
  i9 = HEAP8[i1 >> 0] | 0;
  if (!(i9 << 24 >> 24)) i11 = i1; else {
   i8 = i1;
   i7 = i9;
   while (1) {
    i9 = i7 & 255;
    if (HEAP32[i5 + (i9 >>> 5 << 2) >> 2] & 1 << (i9 & 31) | 0) {
     i11 = i8;
     break L1;
    }
    i9 = i8 + 1 | 0;
    i7 = HEAP8[i9 >> 0] | 0;
    if (!(i7 << 24 >> 24)) {
     i11 = i9;
     break;
    } else i8 = i9;
   }
  }
 } while (0);
 if ((i3 | 0) == 3) i11 = ___strchrnul(i1, i6 << 24 >> 24) | 0;
 STACKTOP = i4;
 return i11 - i1 | 0;
}

function _check_cursor_moved(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) != (HEAP32[(HEAP32[i3 >> 2] | 0) + 112 >> 2] | 0)) {
  i4 = i1 + 108 | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -160;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i4 + 112 | 0;
  i6 = i4 + 24 | 0;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  i6 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 + 120 >> 2] = HEAP32[i6 + 76 >> 2];
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + 24 + 4 >> 2] | 0) == (HEAP32[(HEAP32[i3 >> 2] | 0) + 112 + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 76 >> 2] | 0) == (HEAP32[(HEAP32[i3 >> 2] | 0) + 120 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[i3 >> 2] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -8;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 112 + 4 >> 2] = HEAP32[i1 + 24 + 4 >> 2];
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 120 >> 2] = HEAP32[i1 + 76 >> 2];
 STACKTOP = i2;
 return;
}

function _ml_add_stack(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2];
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0)) {
  HEAP32[i6 >> 2] = _alloc((HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) + 5 << 4) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) {
   HEAP32[i3 >> 2] = -1;
   i7 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i7 | 0;
  }
  if ((HEAP32[i5 >> 2] | 0) > 0) _memmove(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0, HEAP32[i5 >> 2] << 4 | 0) | 0;
  _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0);
  HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = HEAP32[i6 >> 2];
  i6 = (HEAP32[i4 >> 2] | 0) + 20 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 5;
 }
 i6 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _get_mouse_button(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 while (1) {
  if (!(HEAP32[12700 + (HEAP32[i10 >> 2] << 4) >> 2] | 0)) {
   i4 = 6;
   break;
  }
  i11 = HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i7 >> 2] | 0) == (HEAP32[12700 + (HEAP32[i10 >> 2] << 4) >> 2] | 0)) {
   i4 = 4;
   break;
  }
  HEAP32[i10 >> 2] = i11 + 1;
 }
 if ((i4 | 0) == 4) {
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[12700 + (i11 << 4) + 8 >> 2];
  HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[12700 + (HEAP32[i10 >> 2] << 4) + 12 >> 2];
  HEAP32[i6 >> 2] = HEAP32[12700 + (HEAP32[i10 >> 2] << 4) + 4 >> 2];
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 } else if ((i4 | 0) == 6) {
  HEAP32[i6 >> 2] = 0;
  i12 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 return 0;
}

function _frame_add_vsep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP8[HEAP32[i3 >> 2] >> 0] | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i1 + 36 >> 2];
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 104 >> 2] | 0) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0) > 0) {
   i5 = (HEAP32[i4 >> 2] | 0) + 100 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
  }
  HEAP32[(HEAP32[i4 >> 2] | 0) + 104 >> 2] = 1;
  STACKTOP = i2;
  return;
 }
 i4 = (HEAP8[i1 >> 0] | 0) == 2;
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2];
 if (i4) {
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break;
   _frame_add_vsep(HEAP32[i3 >> 2] | 0);
   HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
  }
  STACKTOP = i2;
  return;
 }
 while (1) {
  i6 = HEAP32[i3 >> 2] | 0;
  if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0)) break;
  HEAP32[i3 >> 2] = HEAP32[i6 + 24 >> 2];
 }
 _frame_add_vsep(i6);
 STACKTOP = i2;
 return;
}

function _win_new_height(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2];
 if ((HEAP32[i5 >> 2] | 0) < 0) HEAP32[i5 >> 2] = 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) > 0) {
  if ((HEAP32[i4 >> 2] | 0) == (HEAP32[26881] | 0)) _validate_cursor();
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) {
   STACKTOP = i3;
   return;
  }
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 136 >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 808 >> 2] | 0)) _set_fraction(HEAP32[i4 >> 2] | 0);
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 80 >> 2] = 0;
 if (HEAP32[26778] | 0) {
  STACKTOP = i3;
  return;
 }
 _scroll_to_fraction(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _wcrtomb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 do if (!i1) i4 = 1; else {
  if (i2 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i2;
   i4 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_430() | 0) + 188 >> 2] >> 2] | 0)) if ((i2 & -128 | 0) == 57216) {
   HEAP8[i1 >> 0] = i2;
   i4 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i4 = -1;
   break;
  }
  if (i2 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i2 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i2 & 63 | 128;
   i4 = 2;
   break;
  }
  if (i2 >>> 0 < 55296 | (i2 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i2 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 & 63 | 128;
   i4 = 3;
   break;
  }
  if ((i2 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i2 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i2 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i2 & 63 | 128;
   i4 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i4 = -1;
   break;
  }
 } while (0);
 return i4 | 0;
}

function _strncasecmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 if (!i3) i4 = 0; else {
  i5 = HEAP8[i1 >> 0] | 0;
  L3 : do if (!(i5 << 24 >> 24)) {
   i6 = i2;
   i7 = 0;
  } else {
   i8 = i1;
   i9 = i3;
   i10 = i2;
   i11 = i5;
   i12 = i5 & 255;
   while (1) {
    i9 = i9 + -1 | 0;
    i13 = HEAP8[i10 >> 0] | 0;
    if (!((i9 | 0) != 0 & i13 << 24 >> 24 != 0)) {
     i6 = i10;
     i7 = i11;
     break L3;
    }
    if (i11 << 24 >> 24 != i13 << 24 >> 24) {
     i13 = _tolower(i12) | 0;
     if ((i13 | 0) != (_tolower(HEAPU8[i10 >> 0] | 0) | 0)) break;
    }
    i13 = i8 + 1 | 0;
    i14 = i10 + 1 | 0;
    i15 = HEAP8[i13 >> 0] | 0;
    if (!(i15 << 24 >> 24)) {
     i6 = i14;
     i7 = 0;
     break L3;
    } else {
     i8 = i13;
     i10 = i14;
     i11 = i15;
     i12 = i15 & 255;
    }
   }
   i6 = i10;
   i7 = HEAP8[i8 >> 0] | 0;
  } while (0);
  i5 = _tolower(i7 & 255) | 0;
  i4 = i5 - (_tolower(HEAPU8[i6 >> 0] | 0) | 0) | 0;
 }
 return i4 | 0;
}

function _alloc_state(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if ((HEAP32[26388] | 0) >= (HEAP32[26333] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } else {
  i3 = HEAP32[26385] | 0;
  i2 = HEAP32[26388] | 0;
  HEAP32[26388] = i2 + 1;
  HEAP32[i9 >> 2] = i3 + (i2 * 28 | 0);
  HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i6 >> 2];
  HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] = HEAP32[i8 >> 2];
  HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] = 0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] = HEAP32[26388];
  HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[(HEAP32[i9 >> 2] | 0) + 16 + 4 >> 2] = 0;
  HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 return 0;
}

function _add_char2buf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i4 >> 2] | 0) == 128) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + 1;
  HEAP8[i2 >> 0] = -128;
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + 1;
  HEAP8[i2 >> 0] = -2;
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + 1;
  HEAP8[i2 >> 0] = 88;
  i6 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 if ((HEAP32[i4 >> 2] | 0) == 155) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + 1;
  HEAP8[i2 >> 0] = -101;
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + 1;
  HEAP8[i2 >> 0] = -3;
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + 1;
  HEAP8[i2 >> 0] = 81;
  i6 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 } else {
  i2 = HEAP32[i4 >> 2] & 255;
  i4 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = i2;
  i6 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 return 0;
}

function _truncate_line(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 if (!(HEAP32[i7 >> 2] | 0)) HEAP32[i5 >> 2] = _vim_strsave(114072) | 0; else {
  i1 = _ml_get(HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = _vim_strnsave(i1, HEAP32[i7 >> 2] | 0) | 0;
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 _ml_replace(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 _changed_bytes(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0);
 if (HEAP32[i4 >> 2] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > 0) {
  i4 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
 }
 HEAP32[i3 >> 2] = 1;
 i8 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i8 | 0;
}

function _gui_delete_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i5 >> 2] | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 if (((HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) > (HEAP32[26643] | 0)) {
  _gui_clear_block(i2, HEAP32[26644] | 0, HEAP32[26643] | 0, HEAP32[26645] | 0);
  STACKTOP = i3;
  return;
 }
 _gui_mch_delete_lines(i2, HEAP32[i5 >> 2] | 0);
 if ((HEAP32[26638] | 0) < (HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26637] | 0) < (HEAP32[26644] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26637] | 0) > (HEAP32[26645] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26638] | 0) < ((HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0)) {
  HEAP8[106556] = 0;
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26638] | 0) > (HEAP32[26643] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26638] = (HEAP32[26638] | 0) - (HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _get_indent_str(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = 0;
 L1 : while (1) {
  if (!(HEAP8[HEAP32[i6 >> 2] >> 0] | 0)) {
   i4 = 10;
   break;
  }
  do if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 9) if ((HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[26862] | 0) != 0) {
   i3 = HEAP32[i9 >> 2] | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   HEAP32[i9 >> 2] = (i3 | 0) + ((i2 | 0) - ((i3 | 0) % (i2 | 0) | 0));
   break;
  } else {
   i2 = _ptr2cells(HEAP32[i6 >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i2;
   break;
  } else {
   if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) != 32) {
    i4 = 10;
    break L1;
   }
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
  } while (0);
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 10) {
  STACKTOP = i5;
  return HEAP32[i9 >> 2] | 0;
 }
 return 0;
}

function _restore_snapshot(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (HEAP32[(HEAP32[26886] | 0) + 48 + (HEAP32[i4 >> 2] << 2) >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[26886] | 0) + 48 + (HEAP32[i4 >> 2] << 2) >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[27114] | 0) + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[(HEAP32[26886] | 0) + 48 + (HEAP32[i4 >> 2] << 2) >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[(HEAP32[27114] | 0) + 12 >> 2] | 0)) if ((_check_snapshot_rec(HEAP32[(HEAP32[26886] | 0) + 48 + (HEAP32[i4 >> 2] << 2) >> 2] | 0, HEAP32[27114] | 0) | 0) == 1) {
  HEAP32[i6 >> 2] = _restore_snapshot_rec(HEAP32[(HEAP32[26886] | 0) + 48 + (HEAP32[i4 >> 2] << 2) >> 2] | 0, HEAP32[27114] | 0) | 0;
  _win_comp_pos() | 0;
  if ((HEAP32[i6 >> 2] | 0) != 0 & (HEAP32[i5 >> 2] | 0) != 0) _win_goto(HEAP32[i6 >> 2] | 0);
  _redraw_all_later(50);
 }
 _clear_snapshot(HEAP32[26886] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _gui_insert_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i5 >> 2] | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 if (((HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) > (HEAP32[26643] | 0)) {
  _gui_clear_block(i2, HEAP32[26644] | 0, HEAP32[26643] | 0, HEAP32[26645] | 0);
  STACKTOP = i3;
  return;
 }
 _gui_mch_insert_lines(i2, HEAP32[i5 >> 2] | 0);
 if ((HEAP32[26638] | 0) < (HEAP32[26636] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26637] | 0) < (HEAP32[26644] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26637] | 0) > (HEAP32[26645] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26638] | 0) <= ((HEAP32[26643] | 0) - (HEAP32[i5 >> 2] | 0) | 0)) {
  HEAP32[26638] = (HEAP32[26638] | 0) + (HEAP32[i5 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[26638] | 0) > (HEAP32[26643] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP8[106556] = 0;
 STACKTOP = i3;
 return;
}

function _msg_source(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26720] = (HEAP32[26720] | 0) + 1;
 HEAP32[i4 >> 2] = _get_emsg_source() | 0;
 if (HEAP32[i4 >> 2] | 0) {
  _msg_attr(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
  _vim_free(HEAP32[i4 >> 2] | 0);
 }
 HEAP32[i4 >> 2] = _get_emsg_lnum() | 0;
 if (HEAP32[i4 >> 2] | 0) {
  _msg_attr(HEAP32[i4 >> 2] | 0, HEAP32[27058] | 0) | 0;
  _vim_free(HEAP32[i4 >> 2] | 0);
  HEAP32[27229] = HEAP32[26732];
 }
 if (HEAP32[26731] | 0) if (!(_other_sourcing_name() | 0)) {
  i5 = HEAP32[26720] | 0;
  i6 = i5 + -1 | 0;
  HEAP32[26720] = i6;
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[27228] | 0);
 if (!(HEAP32[26731] | 0)) {
  HEAP32[27228] = 0;
  i5 = HEAP32[26720] | 0;
  i6 = i5 + -1 | 0;
  HEAP32[26720] = i6;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[27228] = _vim_strsave(HEAP32[26731] | 0) | 0;
  i5 = HEAP32[26720] | 0;
  i6 = i5 + -1 | 0;
  HEAP32[26720] = i6;
  STACKTOP = i2;
  return;
 }
}

function _filemess(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 if (HEAP32[26809] | 0) {
  STACKTOP = i5;
  return;
 }
 _msg_add_fname(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 if ((_strlen(HEAP32[26882] | 0) | 0) >>> 0 > 945) HEAP8[(HEAP32[26882] | 0) + 945 >> 0] = 0;
 _strcat(HEAP32[26882] | 0, HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = HEAP32[26710];
 i8 = (_shortmess(79) | 0) == 0;
 if (((i8 | (HEAP32[26778] | 0) != 0) ^ 1) & (HEAP32[26888] | 0) == 0) HEAP32[26710] = 0;
 if (!(HEAP32[26710] | 0)) _check_for_delay(0);
 _msg_start();
 HEAP32[26710] = HEAP32[i10 >> 2];
 HEAP32[26705] = 1;
 i10 = _msg_may_trunc(0, HEAP32[26882] | 0) | 0;
 _msg_outtrans_attr(i10, HEAP32[i9 >> 2] | 0) | 0;
 _msg_clr_eos();
 _out_flush();
 HEAP32[26705] = 0;
 STACKTOP = i5;
 return;
}

function ___stdio_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 16 | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = i6 + 4 | 0;
 i8 = i1 + 48 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[i7 >> 2] = i3 - ((i9 | 0) != 0 & 1);
 i10 = i1 + 44 | 0;
 HEAP32[i6 + 8 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i6 + 12 >> 2] = i9;
 HEAP32[i5 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i5 + 4 >> 2] = i6;
 HEAP32[i5 + 8 >> 2] = 2;
 i6 = ___syscall_ret(___syscall145(145, i5 | 0) | 0) | 0;
 if ((i6 | 0) < 1) {
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | i6 & 48 ^ 16;
  i11 = i6;
 } else {
  i5 = HEAP32[i7 >> 2] | 0;
  if (i6 >>> 0 > i5 >>> 0) {
   i7 = HEAP32[i10 >> 2] | 0;
   i10 = i1 + 4 | 0;
   HEAP32[i10 >> 2] = i7;
   i9 = i7;
   HEAP32[i1 + 8 >> 2] = i9 + (i6 - i5);
   if (!(HEAP32[i8 >> 2] | 0)) i11 = i3; else {
    HEAP32[i10 >> 2] = i9 + 1;
    HEAP8[i2 + (i3 + -1) >> 0] = HEAP8[i9 >> 0] | 0;
    i11 = i3;
   }
  } else i11 = i6;
 }
 STACKTOP = i4;
 return i11 | 0;
}

function _vim_FullName(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = 1;
 HEAP8[HEAP32[i8 >> 2] >> 0] = 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i6 >> 2] = 0;
  i13 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 HEAP32[i12 >> 2] = _path_with_url(HEAP32[i7 >> 2] | 0) | 0;
 if (!(HEAP32[i12 >> 2] | 0)) HEAP32[i11 >> 2] = _mch_FullName(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
 if ((HEAP32[i12 >> 2] | 0) != 0 | (HEAP32[i11 >> 2] | 0) == 0) _vim_strncpy(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, (HEAP32[i9 >> 2] | 0) - 1 | 0);
 HEAP32[i6 >> 2] = HEAP32[i11 >> 2];
 i13 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i13 | 0;
}

function _set_cmd_context(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 24 | 0;
 i8 = i6 + 20 | 0;
 i9 = i6 + 16 | 0;
 i10 = i6 + 12 | 0;
 i11 = i6 + 4 | 0;
 i12 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i6 + 8 >> 2] = i5;
 HEAP32[i11 >> 2] = 0;
 if ((HEAP32[i10 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) HEAP32[i11 >> 2] = HEAPU8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0];
 HEAP8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] = 0;
 HEAP32[i12 >> 2] = HEAP32[i8 >> 2];
 while (1) {
  if (!(HEAP32[i12 >> 2] | 0)) break;
  HEAP32[i12 >> 2] = _set_one_cmd_context(HEAP32[i7 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0;
 }
 HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] = HEAP32[i8 >> 2];
 HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] = HEAP32[i10 >> 2];
 HEAP8[(HEAP32[i8 >> 2] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] = HEAP32[i11 >> 2];
 STACKTOP = i6;
 return;
}

function _global_exe(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[26773];
 _setpcmark();
 HEAP32[26711] = 1;
 HEAP32[27181] = 0;
 HEAP32[27182] = 0;
 HEAP32[25225] = 0;
 HEAP32[26841] = 1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[26773] >> 2];
 while (1) {
  if (HEAP32[26834] | 0) break;
  i1 = _ml_firstmarked() | 0;
  HEAP32[i6 >> 2] = i1;
  if (!((i1 | 0) != 0 & (HEAP32[26841] | 0) == 1)) break;
  _global_exe_one(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  _ui_breakcheck();
 }
 HEAP32[26841] = 0;
 if (HEAP32[25225] | 0) _beginline(5); else _check_cursor();
 _changed_line_abv_curs();
 if ((HEAP32[27043] | 0) == 0 & (HEAP32[27044] | 0) == 0) HEAP32[26711] = 0;
 if (_do_sub_msg(0) | 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[26773] | 0) != (HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _msgmore((HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[i4 >> 2] | 0) | 0);
 STACKTOP = i2;
 return;
}

function _ins_shift(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 4 | 0;
 i6 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(_stop_arrow() | 0)) {
  STACKTOP = i4;
  return;
 }
 _AppendCharToRedobuff(HEAP32[i5 >> 2] | 0);
 if ((HEAP32[i5 >> 2] | 0) == 4) if ((HEAP32[i6 >> 2] | 0) == 48 | (HEAP32[i6 >> 2] | 0) == 94) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) > 0) {
  i2 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  _del_char(0) | 0;
  if (HEAP32[10180] & 64 | 0) _replace_pop_ins();
  if ((HEAP32[i6 >> 2] | 0) == 94) HEAP32[25203] = _get_indent() | 0;
  _change_indent(1, 0, 1, 0, 1);
 } else i3 = 10; else i3 = 10; else i3 = 10;
 if ((i3 | 0) == 10) _change_indent((HEAP32[i5 >> 2] | 0) == 4 ? 3 : 2, 0, 1, 0, 1);
 if (!(HEAP32[26791] | 0)) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAPU8[(_skipwhite(_ml_get_curline() | 0) | 0) >> 0] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[26791] = 0;
 STACKTOP = i4;
 return;
}

function _ins_mouse(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[26881];
 if (!(HEAP32[26627] | 0)) if (!(_mouse_has(105) | 0)) {
  STACKTOP = i2;
  return;
 }
 _undisplay_dollar();
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if (_do_mouse(0, HEAP32[i3 >> 2] | 0, -1, 1, 0) | 0) {
  HEAP32[i6 >> 2] = HEAP32[26881];
  if ((HEAP32[26881] | 0) != (HEAP32[i5 >> 2] | 0)) if (_win_valid(HEAP32[i5 >> 2] | 0) | 0) {
   HEAP32[26881] = HEAP32[i5 >> 2];
   HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
  }
  _start_arrow((HEAP32[26881] | 0) == (HEAP32[i5 >> 2] | 0) ? i4 : 0);
  if ((HEAP32[26881] | 0) != (HEAP32[i6 >> 2] | 0)) if (_win_valid(HEAP32[i6 >> 2] | 0) | 0) {
   HEAP32[26881] = HEAP32[i6 >> 2];
   HEAP32[26773] = HEAP32[(HEAP32[26881] | 0) + 4 >> 2];
  }
 }
 _redraw_statuslines();
 STACKTOP = i2;
 return;
}

function _nfa_regexec_multi(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8 + 24 | 0;
 i10 = i8 + 20 | 0;
 i11 = i8 + 16 | 0;
 i12 = i8 + 12 | 0;
 i13 = i8 + 8 | 0;
 i14 = i8 + 4 | 0;
 i15 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = i7;
 HEAP32[26312] = 0;
 HEAP32[26313] = HEAP32[i9 >> 2];
 HEAP32[26319] = HEAP32[i11 >> 2];
 HEAP32[26318] = HEAP32[i10 >> 2];
 HEAP32[26320] = HEAP32[i12 >> 2];
 HEAP32[26321] = (HEAP32[HEAP32[26319] >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 HEAP32[26322] = 0;
 HEAP32[26323] = HEAP32[(HEAP32[i9 >> 2] | 0) + 164 >> 2];
 HEAP32[26324] = HEAP32[(HEAP32[i9 >> 2] | 0) + 168 >> 2];
 i9 = _nfa_regexec_both(0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
 STACKTOP = i8;
 return i9 | 0;
}

function _set_init_2() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = _findoption(69006) | 0;
 if ((HEAP32[i2 >> 2] | 0) >= 0) if (!(HEAP32[15328 + ((HEAP32[i2 >> 2] | 0) * 28 | 0) + 8 >> 2] & 256)) _set_option_default(HEAP32[i2 >> 2] | 0, 4, HEAP32[26903] | 0);
 _comp_col();
 if (!(_option_was_set(94846) | 0)) HEAP32[27026] = (HEAP32[10173] | 0) - 1;
 _set_number_default(94846, (HEAP32[10173] | 0) - 1 | 0);
 HEAP32[i2 >> 2] = _findoption(76683) | 0;
 if ((HEAP32[i2 >> 2] | 0) < 0) {
  _parse_shape_opt(2) | 0;
  STACKTOP = i1;
  return;
 }
 if (HEAP32[15328 + ((HEAP32[i2 >> 2] | 0) * 28 | 0) + 8 >> 2] & 256 | 0) {
  _parse_shape_opt(2) | 0;
  STACKTOP = i1;
  return;
 }
 if ((HEAPU8[(_term_bg_default() | 0) >> 0] | 0 | 0) != 100) {
  _parse_shape_opt(2) | 0;
  STACKTOP = i1;
  return;
 }
 _set_string_option_direct(0, HEAP32[i2 >> 2] | 0, 76755, 1, 0);
 i3 = 15328 + ((HEAP32[i2 >> 2] | 0) * 28 | 0) + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -257;
 _parse_shape_opt(2) | 0;
 STACKTOP = i1;
 return;
}

function _bt_regexec_multi(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8 + 24 | 0;
 i10 = i8 + 20 | 0;
 i11 = i8 + 16 | 0;
 i12 = i8 + 12 | 0;
 i13 = i8 + 8 | 0;
 i14 = i8 + 4 | 0;
 i15 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = i7;
 HEAP32[26312] = 0;
 HEAP32[26313] = HEAP32[i9 >> 2];
 HEAP32[26319] = HEAP32[i11 >> 2];
 HEAP32[26318] = HEAP32[i10 >> 2];
 HEAP32[26320] = HEAP32[i12 >> 2];
 HEAP32[26321] = (HEAP32[HEAP32[26319] >> 2] | 0) - (HEAP32[i12 >> 2] | 0);
 HEAP32[26322] = 0;
 HEAP32[26323] = HEAP32[(HEAP32[i9 >> 2] | 0) + 164 >> 2];
 HEAP32[26324] = HEAP32[(HEAP32[i9 >> 2] | 0) + 168 >> 2];
 i9 = _bt_regexec_both(0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
 STACKTOP = i8;
 return i9 | 0;
}

function _check_buf_options(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _check_string_option((HEAP32[i3 >> 2] | 0) + 588 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 592 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 620 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 644 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 648 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 652 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 628 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 632 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 640 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 668 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 624 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 732 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 736 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 744 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 748 | 0);
 _check_string_option((HEAP32[i3 >> 2] | 0) + 572 | 0);
 STACKTOP = i2;
 return;
}

function _win_remove(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 do if (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[(HEAP32[i2 + 8 >> 2] | 0) + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 } else {
  i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0;
  if (!(HEAP32[i5 >> 2] | 0)) {
   HEAP32[(HEAP32[26886] | 0) + 16 >> 2] = i2;
   HEAP32[26887] = i2;
   break;
  } else {
   HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = i2;
   break;
  }
 } while (0);
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[(HEAP32[26886] | 0) + 20 >> 2] = i2;
  HEAP32[27112] = i2;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = i2;
  STACKTOP = i3;
  return;
 }
}

function _ml_setmarked(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[i4 >> 2] | 0) < 1) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i4 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[26049] | 0)) i2 = 6; else if ((HEAP32[26049] | 0) > (HEAP32[i4 >> 2] | 0)) i2 = 6;
 if ((i2 | 0) == 6) HEAP32[26049] = HEAP32[i4 >> 2];
 i2 = _ml_find_line(HEAP32[26773] | 0, HEAP32[i4 >> 2] | 0, 19) | 0;
 HEAP32[i5 >> 2] = i2;
 if (!i2) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2];
 i5 = (HEAP32[i6 >> 2] | 0) + 20 + ((HEAP32[i4 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 36 >> 2] | 0) << 2) | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | -2147483648;
 i5 = (HEAP32[26773] | 0) + 8 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 4;
 STACKTOP = i3;
 return;
}

function _plines_win(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 200 + 36 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 1;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 100 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 1;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[i9 >> 2] = _plines_win_nofold(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 if ((HEAP32[i8 >> 2] | 0) > 0) if ((HEAP32[i9 >> 2] | 0) > (HEAP32[(HEAP32[i6 >> 2] | 0) + 88 >> 2] | 0)) {
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 88 >> 2];
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _event_ignored(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[26914];
 while (1) {
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
   i2 = 10;
   break;
  }
  if (!(_strncasecmp(HEAP32[i6 >> 2] | 0, 63367, 3) | 0)) {
   if (!(HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] | 0)) {
    i2 = 6;
    break;
   }
   if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 3 >> 0] | 0 | 0) == 44) {
    i2 = 6;
    break;
   }
  }
  i1 = _event_name2nr(HEAP32[i6 >> 2] | 0, i6) | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   i2 = 8;
   break;
  }
 }
 if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 8) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 10) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _load_colors(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 16 | 0;
 i5 = i2 + 12 | 0;
 i6 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 if (HEAP32[26507] | 0) {
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 HEAP32[26507] = 1;
 HEAP32[i6 >> 2] = _alloc((_strlen(HEAP32[i5 >> 2] | 0) | 0) + 12 | 0) | 0;
 if (HEAP32[i6 >> 2] | 0) {
  i1 = HEAP32[26773] | 0;
  _apply_autocmds(26, HEAP32[i5 >> 2] | 0, HEAP32[i1 + 76 >> 2] | 0, 0, i1 | 0) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  _sprintf(i1, 78096, i3) | 0;
  HEAP32[i7 >> 2] = _source_runtime(HEAP32[i6 >> 2] | 0, 24) | 0;
  _vim_free(HEAP32[i6 >> 2] | 0);
  i6 = HEAP32[26773] | 0;
  _apply_autocmds(25, HEAP32[i5 >> 2] | 0, HEAP32[i6 + 76 >> 2] | 0, 0, i6 | 0) | 0;
 }
 HEAP32[26507] = 0;
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i8 | 0;
}

function _reginsert(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[26453] | 0) == (-1 | 0)) {
  HEAP32[26404] = (HEAP32[26404] | 0) + 3;
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[26453];
 HEAP32[26453] = (HEAP32[26453] | 0) + 3;
 HEAP32[i7 >> 2] = HEAP32[26453];
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) break;
  i2 = (HEAP32[i6 >> 2] | 0) + -1 | 0;
  HEAP32[i6 >> 2] = i2;
  i1 = HEAP8[i2 >> 0] | 0;
  i2 = (HEAP32[i7 >> 2] | 0) + -1 | 0;
  HEAP32[i7 >> 2] = i2;
  HEAP8[i2 >> 0] = i1;
 }
 HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i4 >> 2] & 255;
 i4 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = i4 + 1;
 HEAP8[i4 >> 0] = i5;
 i5 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = i5 + 1;
 HEAP8[i5 >> 0] = 0;
 HEAP8[HEAP32[i8 >> 2] >> 0] = 0;
 STACKTOP = i3;
 return;
}

function _term_bg_default() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 L1 : do if (_strcmp(HEAP32[26519] | 0, 71231) | 0) if (_strcmp(HEAP32[26519] | 0, 71237) | 0) if (_strncmp(HEAP32[26519] | 0, 71250, 6) | 0) if (_strncmp(HEAP32[26519] | 0, 71257, 5) | 0) {
  i5 = _getenv(71263) | 0;
  HEAP32[i4 >> 2] = i5;
  do if (i5 | 0) {
   i6 = _vim_strrchr(HEAP32[i4 >> 2] | 0, 59) | 0;
   HEAP32[i4 >> 2] = i6;
   if (i6 | 0) {
    if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) >= 48) {
     if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) > 54) i1 = 9;
    } else i1 = 9;
    if ((i1 | 0) == 9) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 56) break;
    if (!(HEAPU8[(HEAP32[i4 >> 2] | 0) + 2 >> 0] | 0)) break L1;
   }
  } while (0);
  HEAP32[i3 >> 2] = 76760;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 76755;
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _set_options_default(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if (!((_istermoption(15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) | 0) | 0) != 0 ^ 1)) break;
  if (!(HEAP32[15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 8 >> 2] & 64)) _set_option_default(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[26903] | 0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 HEAP32[i6 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) break;
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[26886] | 0)) i7 = HEAP32[26887] | 0; else i7 = HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i5 >> 2] = i7;
  while (1) {
   if (!(HEAP32[i5 >> 2] | 0)) break;
   _win_comp_scroll(HEAP32[i5 >> 2] | 0);
   HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
  }
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
 }
 STACKTOP = i2;
 return;
}

function _set_cmdspos_cursor() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 _set_cmdspos();
 if (HEAP32[27161] | 0) {
  i6 = Math_imul(HEAP32[10174] | 0, HEAP32[10173] | 0) | 0;
  HEAP32[i4 >> 2] = i6;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) < 0 ? 2147483647 : i6;
 } else HEAP32[i4 >> 2] = 2147483647;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[25238] | 0)) {
   i1 = 10;
   break;
  }
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[25239] | 0)) {
   i1 = 10;
   break;
  }
  HEAP32[i5 >> 2] = _cmdline_charsize(HEAP32[i3 >> 2] | 0) | 0;
  i6 = (HEAP32[25240] | 0) + (HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[25240] = i6;
  if ((i6 | 0) >= (HEAP32[i4 >> 2] | 0)) {
   i1 = 8;
   break;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 8) {
  HEAP32[25240] = (HEAP32[25240] | 0) - (HEAP32[i5 >> 2] | 0);
  STACKTOP = i2;
  return;
 } else if ((i1 | 0) == 10) {
  STACKTOP = i2;
  return;
 }
}

function _mouse_has(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[26953];
 L1 : while (1) {
  if (!(HEAP8[HEAP32[i6 >> 2] >> 0] | 0)) {
   i2 = 12;
   break;
  }
  switch (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) {
  case 97:
   {
    if (_vim_strchr(80515, HEAP32[i5 >> 2] | 0) | 0) {
     i2 = 5;
     break L1;
    }
    break;
   }
  case 104:
   {
    if ((HEAP32[i5 >> 2] | 0) != 114) if (HEAP32[(HEAP32[26773] | 0) + 780 >> 2] | 0) {
     i2 = 8;
     break L1;
    }
    break;
   }
  default:
   if ((HEAP32[i5 >> 2] | 0) == (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
    i2 = 10;
    break L1;
   }
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 5) HEAP32[i4 >> 2] = 1; else if ((i2 | 0) == 8) HEAP32[i4 >> 2] = 1; else if ((i2 | 0) == 10) HEAP32[i4 >> 2] = 1; else if ((i2 | 0) == 12) HEAP32[i4 >> 2] = 0;
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _read_readbuf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3 + 16 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 HEAP8[i7 >> 0] = HEAP8[(HEAP32[i8 >> 2] | 0) + 4 + (HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) >> 0] | 0;
 if (HEAP32[i6 >> 2] | 0) {
  i6 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
  i2 = (HEAP32[i5 >> 2] | 0) + 12 | 0;
  i1 = (HEAP32[i2 >> 2] | 0) + 1 | 0;
  HEAP32[i2 >> 2] = i1;
  if (!(HEAPU8[i6 + i1 >> 0] | 0)) {
   HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
   _vim_free(HEAP32[i8 >> 2] | 0);
   HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = 0;
  }
 }
 HEAP32[i4 >> 2] = HEAPU8[i7 >> 0];
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _hash_add_item(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0) if (!(_hash_may_resize(HEAP32[i7 >> 2] | 0, 0) | 0)) {
  HEAP32[i6 >> 2] = 0;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 i4 = (HEAP32[i7 >> 2] | 0) + 4 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0)) {
  i4 = (HEAP32[i7 >> 2] | 0) + 8 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[i10 >> 2];
 HEAP32[i6 >> 2] = _hash_may_resize(HEAP32[i7 >> 2] | 0, 0) | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _gui_init_check() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[8607] | 0) == 2) {
  HEAP32[26629] = 0;
  HEAP32[26630] = 0;
  HEAP32[26626] = 1;
  HEAP32[26632] = -1;
  HEAP32[26633] = 0;
  HEAP32[26634] = 0;
  HEAP32[26635] = 0;
  HEAP32[26636] = 0;
  HEAP32[26640] = HEAP32[10174];
  HEAP32[26641] = HEAP32[10173];
  HEAP8[106556] = 0;
  HEAP32[26642] = 0;
  HEAP32[26643] = (HEAP32[10173] | 0) - 1;
  HEAP32[26644] = 0;
  HEAP32[26645] = (HEAP32[10174] | 0) - 1;
  HEAP32[26646] = 0;
  HEAP32[26665] = 1;
  HEAP32[26666] = 1;
  HEAP32[26667] = 0;
  HEAP32[26668] = 0;
  HEAP32[26670] = 0;
  HEAP32[26671] = 0;
  HEAP32[26672] = 0;
  HEAP32[26673] = 0;
  HEAP32[26648] = 16;
  HEAP32[26647] = 16;
  HEAP32[26664] = -1;
  HEAP32[8607] = 1;
  HEAP32[i2 >> 2] = HEAP32[8607];
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 if (!(HEAP32[8607] | 0)) _emsg(84262) | 0;
 HEAP32[i2 >> 2] = HEAP32[8607];
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _fname2fnum(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAPU8[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] >> 0] | 0) == 126) if ((HEAPU8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) + 1 >> 0] | 0) == 47) {
  _expand_env(56532, HEAP32[26885] | 0, 4096);
  HEAP32[i6 >> 2] = _strlen(HEAP32[26885] | 0) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  _vim_strncpy((HEAP32[26885] | 0) + i1 | 0, (HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) + 2 | 0, 4096 - i1 - 1 | 0);
 } else i2 = 5; else i2 = 5;
 if ((i2 | 0) == 5) _vim_strncpy(HEAP32[26885] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0, 4095);
 _mch_dirname(HEAP32[26882] | 0, 1025) | 0;
 HEAP32[i5 >> 2] = _shorten_fname(HEAP32[26885] | 0, HEAP32[26882] | 0) | 0;
 _buflist_new(HEAP32[26885] | 0, HEAP32[i5 >> 2] | 0, 1, 0) | 0;
 STACKTOP = i3;
 return;
}

function _u_getbot() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = _u_get_headentry() | 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 28 >> 2];
 if (HEAP32[i3 >> 2] | 0) {
  HEAP32[i4 >> 2] = (HEAP32[HEAP32[26773] >> 2] | 0) - (HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0);
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP32[i5 + 8 >> 2] = (HEAP32[i5 + 4 >> 2] | 0) + (HEAP32[i5 + 20 >> 2] | 0) + 1 + (HEAP32[i4 >> 2] | 0);
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) < 1) i1 = 5; else if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) i1 = 5;
  if ((i1 | 0) == 5) {
   _iemsg(80678);
   i1 = HEAP32[i3 >> 2] | 0;
   HEAP32[i1 + 8 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + 1;
  }
  HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 28 >> 2] = 0;
 }
 HEAP32[(HEAP32[26773] | 0) + 516 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _fname_match(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i10 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 84 >> 2] = (HEAP32[26918] | 0 ? 1 : (HEAP32[i7 >> 2] | 0) != 0) & 1;
 i7 = (_vim_regexec(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0) | 0) != 0;
 i3 = HEAP32[i6 >> 2] | 0;
 if (i7) {
  HEAP32[i8 >> 2] = i3;
  i10 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[i9 >> 2] = _home_replace_save(0, i3) | 0;
 if (HEAP32[i9 >> 2] | 0) if (_vim_regexec(HEAP32[i5 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0) HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 _vim_free(HEAP32[i9 >> 2] | 0);
 i10 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _ex_at(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[26821];
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
 _check_cursor_col();
 HEAP32[i5 >> 2] = HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0];
 if (!(HEAP32[i5 >> 2] | 0)) i2 = 4; else if ((HEAP32[i5 >> 2] | 0) == 42) if ((HEAPU8[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] >> 0] | 0 | 0) == 42) i2 = 4;
 if ((i2 | 0) == 4) HEAP32[i5 >> 2] = 64;
 i2 = HEAP32[i5 >> 2] | 0;
 if (!(_do_execreg(i2, 1, (_vim_strchr(HEAP32[26904] | 0, 101) | 0) != 0 & 1, 1) | 0)) {
  _beep_flush();
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = HEAP32[26703];
 HEAP32[26703] = 1;
 while (1) {
  if (_stuff_empty() | 0) if ((HEAP32[26821] | 0) <= (HEAP32[i6 >> 2] | 0)) break;
  _do_cmdline(0, 6, 0, 3) | 0;
 }
 HEAP32[26703] = HEAP32[i7 >> 2];
 STACKTOP = i3;
 return;
}

function _cursor_up(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 L1 : do if ((HEAP32[i5 >> 2] | 0) > 0) {
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  do if ((HEAP32[i7 >> 2] | 0) > 1) {
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) if (_vim_strchr(HEAP32[26904] | 0, 45) | 0) break;
   if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = 1; else HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i5 >> 2] | 0);
   HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i7 >> 2];
   break L1;
  } while (0);
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } while (0);
 _coladvance(HEAP32[(HEAP32[26881] | 0) + 32 >> 2] | 0) | 0;
 if (HEAP32[i6 >> 2] | 0) _update_topline();
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _handle_swap_exists(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[26812] | 0) != 2) {
  if ((HEAP32[26812] | 0) != 3) {
   HEAP32[26812] = 0;
   STACKTOP = i3;
   return;
  }
  HEAP32[26710] = 1;
  _ml_recover();
  _msg_puts(97581);
  HEAP32[26876] = HEAP32[26877];
  _do_modelines(0);
  HEAP32[26812] = 0;
  STACKTOP = i3;
  return;
 }
 HEAP32[26812] = 0;
 HEAP32[26813] = 1;
 _close_buffer(HEAP32[26881] | 0, HEAP32[26773] | 0, 2, 0);
 if (!(HEAP32[i4 >> 2] | 0)) i2 = 5; else if (_bufref_valid(HEAP32[i4 >> 2] | 0) | 0) if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) == (HEAP32[26773] | 0)) i2 = 5; else HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2]; else i2 = 5;
 if ((i2 | 0) == 5) HEAP32[i5 >> 2] = _buflist_new(0, 0, 1, 3) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[26812] = 0;
  STACKTOP = i3;
  return;
 }
 _enter_buffer(HEAP32[i5 >> 2] | 0);
 HEAP32[26812] = 0;
 STACKTOP = i3;
 return;
}

function _memset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + i3 | 0;
 i2 = i2 & 255;
 if ((i3 | 0) >= 67) {
  while (i1 & 3) {
   HEAP8[i1 >> 0] = i2;
   i1 = i1 + 1 | 0;
  }
  i5 = i4 & -4 | 0;
  i6 = i5 - 64 | 0;
  i7 = i2 | i2 << 8 | i2 << 16 | i2 << 24;
  while ((i1 | 0) <= (i6 | 0)) {
   HEAP32[i1 >> 2] = i7;
   HEAP32[i1 + 4 >> 2] = i7;
   HEAP32[i1 + 8 >> 2] = i7;
   HEAP32[i1 + 12 >> 2] = i7;
   HEAP32[i1 + 16 >> 2] = i7;
   HEAP32[i1 + 20 >> 2] = i7;
   HEAP32[i1 + 24 >> 2] = i7;
   HEAP32[i1 + 28 >> 2] = i7;
   HEAP32[i1 + 32 >> 2] = i7;
   HEAP32[i1 + 36 >> 2] = i7;
   HEAP32[i1 + 40 >> 2] = i7;
   HEAP32[i1 + 44 >> 2] = i7;
   HEAP32[i1 + 48 >> 2] = i7;
   HEAP32[i1 + 52 >> 2] = i7;
   HEAP32[i1 + 56 >> 2] = i7;
   HEAP32[i1 + 60 >> 2] = i7;
   i1 = i1 + 64 | 0;
  }
  while ((i1 | 0) < (i5 | 0)) {
   HEAP32[i1 >> 2] = i7;
   i1 = i1 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i4 | 0)) {
  HEAP8[i1 >> 0] = i2;
  i1 = i1 + 1 | 0;
 }
 return i4 - i3 | 0;
}

function _is_mouse_key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == -11517 | (HEAP32[i3 >> 2] | 0) == -17917 | (HEAP32[i3 >> 2] | 0) == -11773 | (HEAP32[i3 >> 2] | 0) == -12029 | (HEAP32[i3 >> 2] | 0) == -18173 | (HEAP32[i3 >> 2] | 0) == -25853 | (HEAP32[i3 >> 2] | 0) == -12285 | (HEAP32[i3 >> 2] | 0) == -12541 | (HEAP32[i3 >> 2] | 0) == -12797 | (HEAP32[i3 >> 2] | 0) == -13053 | (HEAP32[i3 >> 2] | 0) == -13309 | (HEAP32[i3 >> 2] | 0) == -13565 | (HEAP32[i3 >> 2] | 0) == -19453 | (HEAP32[i3 >> 2] | 0) == -19709 | (HEAP32[i3 >> 2] | 0) == -19965 | (HEAP32[i3 >> 2] | 0) == -20221 | (HEAP32[i3 >> 2] | 0) == -23037 | (HEAP32[i3 >> 2] | 0) == -23293 | (HEAP32[i3 >> 2] | 0) == -23549 | (HEAP32[i3 >> 2] | 0) == -23805 | (HEAP32[i3 >> 2] | 0) == -24061) {
  i4 = 1;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAP32[i3 >> 2] | 0) == -24317;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _lalloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[26810] = 0;
  _iemsgn(60207, HEAP32[i6 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 while (1) {
  i2 = _malloc(HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i8 >> 2] = i2;
  if (i2 | 0) break;
  if (HEAP32[26057] | 0) {
   i3 = 8;
   break;
  }
  HEAP32[26057] = 1;
  _clear_sb_text(1);
  HEAP32[i9 >> 2] = _mf_release_all() | 0;
  HEAP32[26057] = 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   i3 = 8;
   break;
  }
 }
 if ((i3 | 0) == 8) if ((HEAP32[i7 >> 2] | 0) != 0 & (HEAP32[i8 >> 2] | 0) == 0) _do_outofmem_msg(HEAP32[i6 >> 2] | 0);
 HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _get_keymap_str(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i7 = i5 + 24 | 0;
 i8 = i5 + 20 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 12 | 0;
 i11 = i5 + 8 | 0;
 i12 = i5 + 4 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 if ((HEAP32[(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) + 552 >> 2] | 0) != 1) {
  HEAP32[i7 >> 2] = 0;
  i13 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 HEAP32[i12 >> 2] = 74557;
 i8 = HEAP32[i10 >> 2] | 0;
 i4 = HEAP32[i11 >> 2] | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i12 >> 2];
 i12 = _vim_snprintf(i8, i4, i3, i6) | 0;
 if ((i12 | 0) > ((HEAP32[i11 >> 2] | 0) - 1 | 0)) HEAP8[HEAP32[i10 >> 2] >> 0] = 0;
 HEAP32[i7 >> 2] = (HEAPU8[HEAP32[i10 >> 2] >> 0] | 0 | 0) != 0 & 1;
 i13 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i5;
 return i13 | 0;
}

function _getargcmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[i6 >> 2] = 0;
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 43) {
  i7 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 if (_vim_isspace(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) | 0) i2 = 4; else if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) i2 = 4; else {
  HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = _skip_cmd_arg(HEAP32[i6 >> 2] | 0, 1) | 0;
  if (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = 0;
  }
 }
 if ((i2 | 0) == 4) HEAP32[i6 >> 2] = 45987;
 HEAP32[i5 >> 2] = _skipwhite(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[i5 >> 2];
 i7 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _get_char_class(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 L1 : do if ((HEAPU8[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 1 >> 0] | 0 | 0) == 58) {
  HEAP32[i5 >> 2] = 0;
  while (1) {
   if ((HEAP32[i5 >> 2] | 0) >= 16) break L1;
   i1 = (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 2 | 0;
   i6 = HEAP32[29744 + (HEAP32[i5 >> 2] << 2) >> 2] | 0;
   i7 = (_strncmp(i1, i6, _strlen(HEAP32[29744 + (HEAP32[i5 >> 2] << 2) >> 2] | 0) | 0) | 0) == 0;
   i8 = HEAP32[i5 >> 2] | 0;
   if (i7) break;
   HEAP32[i5 >> 2] = i8 + 1;
  }
  i7 = (_strlen(HEAP32[29744 + (i8 << 2) >> 2] | 0) | 0) + 2 | 0;
  i6 = HEAP32[i4 >> 2] | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i7;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i9 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 99;
 i9 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i9 | 0;
}

function _remove_tail(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 i10 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = (_strlen(HEAP32[i8 >> 2] | 0) | 0) + 1;
 HEAP32[i10 >> 2] = (HEAP32[i7 >> 2] | 0) + (0 - (HEAP32[i9 >> 2] | 0));
 do if ((HEAP32[i10 >> 2] | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) if (!(_vim_fnamencmp(HEAP32[i10 >> 2] | 0, HEAP32[i8 >> 2] | 0, (HEAP32[i9 >> 2] | 0) - 1 | 0) | 0)) {
  if ((HEAP32[i10 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) if (!(_vim_ispathsep(HEAPU8[(HEAP32[i10 >> 2] | 0) + -1 >> 0] | 0) | 0)) break;
  HEAP32[i5 >> 2] = HEAP32[i10 >> 2];
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 } while (0);
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 i11 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _get_term_code(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 116) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) == 95) if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 2 >> 0] | 0 | 0) if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 3 >> 0] | 0 | 0) {
  i1 = _findoption(HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = i1;
  if ((i1 | 0) < 0) {
   HEAP32[i3 >> 2] = _find_termcode((HEAP32[i4 >> 2] | 0) + 2 | 0) | 0;
   i7 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i7 | 0;
  }
  HEAP32[i6 >> 2] = _get_varp(15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) | 0) | 0;
  if (HEAP32[i6 >> 2] | 0) HEAP32[i6 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
  HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _op_change(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 + 4 >> 2] | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 1 ? 0 : i1;
 if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) {
  if (!(_u_save_cursor() | 0)) {
   HEAP32[i3 >> 2] = 0;
   i7 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i7 | 0;
  }
 } else if (!(_op_delete(HEAP32[i4 >> 2] | 0) | 0)) {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 if ((HEAP32[i5 >> 2] | 0) > (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) if (HEAPU8[(_ml_get(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0) >> 0] | 0 | 0) _inc_cursor() | 0;
 HEAP32[i6 >> 2] = _edit(0, 0, 1) | 0;
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _ex_copymove(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 >> 2] = _get_address(i1 | 0, i1 | 0, HEAP32[i1 + 44 >> 2] | 0, 0, 0, 1) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) {
  HEAP32[i1 + 4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 _get_flags(i1);
 if (!((HEAP32[i4 >> 2] | 0) == 2147483647 | (HEAP32[i4 >> 2] | 0) < 0)) if ((HEAP32[i4 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) {
  i1 = HEAP32[i3 >> 2] | 0;
  i5 = HEAP32[i1 + 36 >> 2] | 0;
  i6 = HEAP32[i1 + 40 >> 2] | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 259) {
   if (!(_do_move(i5, i6, i1) | 0)) {
    STACKTOP = i2;
    return;
   }
  } else _ex_copy(i5, i6, i1);
  _u_clearline();
  _beginline(6);
  _ex_may_print(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 _emsg(92432) | 0;
 STACKTOP = i2;
 return;
}

function _check_cursor_col_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 >> 2] = _strlen(_ml_get_buf(HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, 0) | 0) | 0;
 i1 = (HEAP32[i3 >> 2] | 0) + 24 + 4 | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 >> 2] | 0) < (HEAP32[i4 >> 2] | 0)) {
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 + 4 >> 2] | 0) >= 0) {
   STACKTOP = i2;
   return;
  }
  HEAP32[(HEAP32[i3 >> 2] | 0) + 24 + 4 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 do if (!((HEAP32[10180] & 16 | 0) != 0 | (HEAP32[26806] | 0) != 0)) {
  if (HEAP32[26788] | 0) if ((HEAPU8[HEAP32[26975] >> 0] | 0) != 111) break;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 24 + 4 >> 2] = (HEAP32[i4 >> 2] | 0) - 1;
  STACKTOP = i2;
  return;
 } while (0);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 + 4 >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i2;
 return;
}

function _vim_version_dir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[i4 >> 2] | 0) if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) {
  HEAP32[i5 >> 2] = _concat_fnames(HEAP32[i4 >> 2] | 0, 60117, 1) | 0;
  if (HEAP32[i5 >> 2] | 0) if (_mch_isdir(HEAP32[i5 >> 2] | 0) | 0) {
   HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
   i6 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i6 | 0;
  }
  _vim_free(HEAP32[i5 >> 2] | 0);
  HEAP32[i5 >> 2] = _concat_fnames(HEAP32[i4 >> 2] | 0, 60109, 1) | 0;
  if (HEAP32[i5 >> 2] | 0) if (_mch_isdir(HEAP32[i5 >> 2] | 0) | 0) {
   HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
   i6 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i6 | 0;
  }
  _vim_free(HEAP32[i5 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _test_for_current(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i11 >> 2] = 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  i13 = HEAP32[i11 >> 2] | 0;
  STACKTOP = i5;
  return i13 | 0;
 }
 HEAP32[i10 >> 2] = HEAPU8[HEAP32[i7 >> 2] >> 0];
 HEAP8[HEAP32[i7 >> 2] >> 0] = 0;
 HEAP32[i12 >> 2] = _expand_tag_fname(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0, 1) | 0;
 if (HEAP32[i12 >> 2] | 0) {
  HEAP32[i11 >> 2] = (_fullpathcmp(HEAP32[i12 >> 2] | 0, HEAP32[i9 >> 2] | 0, 1) | 0) & 1;
  _vim_free(HEAP32[i12 >> 2] | 0);
 }
 HEAP8[HEAP32[i7 >> 2] >> 0] = HEAP32[i10 >> 2];
 i13 = HEAP32[i11 >> 2] | 0;
 STACKTOP = i5;
 return i13 | 0;
}

function _frame_has_win(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 i2 = HEAP32[i6 >> 2] | 0;
 if (!(HEAP8[HEAP32[i6 >> 2] >> 0] | 0)) {
  HEAP32[i5 >> 2] = (HEAP32[i2 + 36 >> 2] | 0) == (HEAP32[i7 >> 2] | 0) & 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[i2 + 32 >> 2];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) {
   i3 = 8;
   break;
  }
  if (_frame_has_win(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) {
   i3 = 6;
   break;
  }
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
 }
 if ((i3 | 0) == 6) {
  HEAP32[i5 >> 2] = 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else if ((i3 | 0) == 8) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _check_ei() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = HEAP32[26914];
 while (1) {
  if (!(HEAP8[HEAP32[i4 >> 2] >> 0] | 0)) {
   i1 = 11;
   break;
  }
  do if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 63367, 3) | 0)) {
   if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 3 >> 0] | 0) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 3 >> 0] | 0) != 44) {
    i1 = 8;
    break;
   }
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 3;
   if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) == 44) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  } else i1 = 8; while (0);
  if ((i1 | 0) == 8) {
   i1 = 0;
   if ((_event_name2nr(HEAP32[i4 >> 2] | 0, i4) | 0) == 96) {
    i1 = 9;
    break;
   }
  }
 }
 if ((i1 | 0) == 9) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else if ((i1 | 0) == 11) {
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _replace_push(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[25205] | 0) < (HEAP32[26853] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[25206] | 0) <= (HEAP32[25205] | 0)) {
  HEAP32[25206] = (HEAP32[25206] | 0) + 50;
  HEAP32[i4 >> 2] = _lalloc(HEAP32[25206] | 0, 1) | 0;
  if (!(HEAP32[i4 >> 2] | 0)) {
   HEAP32[25206] = (HEAP32[25206] | 0) - 50;
   STACKTOP = i2;
   return;
  }
  if (HEAP32[25207] | 0) {
   _memmove(HEAP32[i4 >> 2] | 0, HEAP32[25207] | 0, HEAP32[25205] | 0) | 0;
   _vim_free(HEAP32[25207] | 0);
  }
  HEAP32[25207] = HEAP32[i4 >> 2];
 }
 HEAP32[i4 >> 2] = (HEAP32[25207] | 0) + (HEAP32[25205] | 0) + (0 - (HEAP32[26853] | 0));
 if (HEAP32[26853] | 0) {
  i1 = HEAP32[i4 >> 2] | 0;
  _memmove(i1 + 1 | 0, i1 | 0, HEAP32[26853] | 0) | 0;
 }
 HEAP8[HEAP32[i4 >> 2] >> 0] = HEAP32[i3 >> 2];
 HEAP32[25205] = (HEAP32[25205] | 0) + 1;
 STACKTOP = i2;
 return;
}

function _readdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = i1 + 8 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = i1 + 12 | 0;
 L1 : do if ((i6 | 0) < (HEAP32[i7 >> 2] | 0)) {
  i8 = i1 + 24 + i6 | 0;
  i9 = i6;
  i2 = 7;
 } else {
  i10 = i1 + 24 | 0;
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i4 + 4 >> 2] = i10;
  HEAP32[i4 + 8 >> 2] = 2048;
  i11 = ___syscall220(220, i4 | 0) | 0;
  if ((i11 | 0) >= 1) {
   HEAP32[i7 >> 2] = i11;
   HEAP32[i5 >> 2] = 0;
   i8 = i10;
   i9 = 0;
   i2 = 7;
   break;
  }
  switch (i11 | 0) {
  case 0:
  case -2:
   {
    i12 = 0;
    break L1;
    break;
   }
  default:
   {}
  }
  HEAP32[(___errno_location() | 0) >> 2] = 0 - i11;
  i12 = 0;
 } while (0);
 if ((i2 | 0) == 7) {
  HEAP32[i5 >> 2] = i9 + (HEAPU16[i8 + 8 >> 1] | 0);
  HEAP32[i1 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  i12 = i8;
 }
 STACKTOP = i3;
 return i12 | 0;
}

function _ex_gui(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 do if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 45) {
  if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 102) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 98) break;
  if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 2 >> 0] | 0 | 0) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 2 >> 0] | 0 | 0) != 32) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 2 >> 0] | 0 | 0) != 9) break;
  HEAP32[26631] = (HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) == 98 & 1;
  i1 = _skipwhite((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 2 | 0) | 0;
  HEAP32[HEAP32[i3 >> 2] >> 2] = i1;
 } while (0);
 if (!(HEAP32[26627] | 0)) {
  _msg_clr_eos_force();
  _gui_start();
 }
 if (_ends_excmd(HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _ex_next(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}
function _nv_lineop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 8 >> 2] = 1;
 i1 = (_cursor_down((HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0, (HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) == 0 & 1) | 0) == 0;
 i5 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
 if (i1) {
  _clearopbeep(i5);
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 12 >> 2] | 0) != 118) {
  if ((HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 12 >> 2] | 0) == 22) i2 = 6;
 } else i2 = 6; else i2 = 6;
 if ((i2 | 0) == 6) if ((HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) != 4) if ((HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) != 5) {
  if ((HEAP32[HEAP32[HEAP32[i4 >> 2] >> 2] >> 2] | 0) == 2) {
   STACKTOP = i3;
   return;
  }
  _beginline(5);
  STACKTOP = i3;
  return;
 }
 _beginline(6);
 STACKTOP = i3;
 return;
}

function _get_winopts(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 _clear_winopt((HEAP32[26881] | 0) + 200 | 0);
 HEAP32[i4 >> 2] = _find_wininfo(HEAP32[i3 >> 2] | 0, 1) | 0;
 if (HEAP32[i4 >> 2] | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[26881] | 0)) if ((HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) {
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2];
  _copy_winopt((HEAP32[i5 >> 2] | 0) + 200 | 0, (HEAP32[26881] | 0) + 200 | 0);
  STACKTOP = i2;
  return;
 }
 if (HEAP32[i4 >> 2] | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) {
  _copy_winopt((HEAP32[i4 >> 2] | 0) + 24 | 0, (HEAP32[26881] | 0) + 200 | 0);
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[26881] | 0;
 _copy_winopt(i4 + 248 | 0, i4 + 200 | 0);
 STACKTOP = i2;
 return;
}

function _tilde_replace(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 126) {
  STACKTOP = i4;
  return;
 }
 if (!(_vim_ispathsep(HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) break;
  HEAP32[i9 >> 2] = _home_replace_save(0, HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0;
  if (HEAP32[i9 >> 2] | 0) {
   _vim_free(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0);
   HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] = HEAP32[i9 >> 2];
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 STACKTOP = i4;
 return;
}

function _exe_commands(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26710] = 1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 128 >> 2] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= 1) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 0;
 HEAP32[26731] = 94471;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0)) break;
  _do_cmdline_cmd(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 + (HEAP32[i4 >> 2] << 2) >> 2] | 0) | 0;
  if (HEAP8[(HEAP32[i3 >> 2] | 0) + 68 + (HEAP32[i4 >> 2] | 0) >> 0] | 0) _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 + (HEAP32[i4 >> 2] << 2) >> 2] | 0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 HEAP32[26731] = 0;
 if (!(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
 if (HEAP32[26798] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26710] = 0;
 STACKTOP = i2;
 return;
}

function _comp_textwidth(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[26773] | 0) + 708 >> 2];
 do if (!(HEAP32[i4 >> 2] | 0)) if (HEAP32[(HEAP32[26773] | 0) + 720 >> 2] | 0) {
  HEAP32[i4 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - (HEAP32[(HEAP32[26773] | 0) + 720 >> 2] | 0);
  if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 4 >> 2] | 0)) if (!(HEAP32[(HEAP32[26881] | 0) + 200 + 8 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - 8;
 } while (0);
 if ((HEAP32[i4 >> 2] | 0) < 0) HEAP32[i4 >> 2] = 0;
 if (!((HEAP32[i3 >> 2] | 0) != 0 & (HEAP32[i4 >> 2] | 0) == 0)) {
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 i3 = (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0) - 1 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) > 79 ? 79 : i3;
 i5 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _open_exfile(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (_mch_isdir(HEAP32[i6 >> 2] | 0) | 0) {
  _emsg2(92544, HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 if (!(HEAP32[i7 >> 2] | 0)) if ((HEAP8[HEAP32[i8 >> 2] >> 0] | 0) != 97) if (_vim_fexists(HEAP32[i6 >> 2] | 0) | 0) {
  _emsg2(50424, HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 i7 = _fopen(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i7;
 if (!i7) _emsg2(50462, HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _inc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) != 2147483647) {
  HEAP32[i5 >> 2] = _ml_get_pos(HEAP32[i4 >> 2] | 0) | 0;
  if (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) {
   i1 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   HEAP32[i3 >> 2] = HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0 ? 0 : 2;
   i6 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i6 | 0;
  }
 }
 if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) != (HEAP32[HEAP32[26773] >> 2] | 0)) {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  HEAP32[i3 >> 2] = 1;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  HEAP32[i3 >> 2] = -1;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _mch_has_wildcard(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 while (1) {
  if (!(HEAP8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i2 = 11;
   break;
  }
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 92) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1; else i2 = 6; else i2 = 6;
  if ((i2 | 0) == 6) {
   i2 = 0;
   if (_vim_strchr(72217, HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) | 0) {
    i2 = 9;
    break;
   }
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 126) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) {
    i2 = 9;
    break;
   }
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = 1;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 } else if ((i2 | 0) == 11) {
  HEAP32[i4 >> 2] = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 return 0;
}

function _put_setbool(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 20 | 0;
 i10 = i5 + 16 | 0;
 i11 = i5 + 12 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 if ((HEAP32[i11 >> 2] | 0) < 0) {
  HEAP32[i7 >> 2] = 1;
  i12 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 i4 = HEAP32[i8 >> 2] | 0;
 i3 = HEAP32[i11 >> 2] | 0 ? 114072 : 63495;
 i11 = HEAP32[i10 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i6 + 8 >> 2] = i11;
 if ((_fprintf(i4, 71688, i6) | 0) >= 0) if ((_put_eol(HEAP32[i8 >> 2] | 0) | 0) >= 0) {
  HEAP32[i7 >> 2] = 1;
  i12 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i5;
  return i12 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 i12 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i5;
 return i12 | 0;
}

function _find_cmdline_var(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= 11) {
   i3 = 6;
   break;
  }
  HEAP32[i8 >> 2] = _strlen(HEAP32[10040 + (HEAP32[i9 >> 2] << 2) >> 2] | 0) | 0;
  if (!(_strncmp(HEAP32[i6 >> 2] | 0, HEAP32[10040 + (HEAP32[i9 >> 2] << 2) >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0)) {
   i3 = 4;
   break;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 4) {
  HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i8 >> 2];
  HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } else if ((i3 | 0) == 6) {
  HEAP32[i5 >> 2] = -1;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 return 0;
}

function _vim_fgets(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 i9 = i4 + 16 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 2) >> 0] = 0;
 HEAP32[i8 >> 2] = _fgets(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 L1 : do if (HEAPU8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 2) >> 0] | 0) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 2) >> 0] | 0) != 10) {
  HEAP8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 1) >> 0] = 0;
  do {
   HEAP8[i9 + 198 >> 0] = 0;
   HEAP32[27183] = _fgets(i9, 200, HEAP32[i7 >> 2] | 0) | 0;
   if (!(HEAP8[i9 + 198 >> 0] | 0)) break L1;
  } while ((HEAP8[i9 + 198 >> 0] | 0) != 10);
 } while (0);
 STACKTOP = i4;
 return (HEAP32[i8 >> 2] | 0) == 0 | 0;
}

function _re_num_cmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i7 >> 2] = (HEAPU8[i2 + 3 >> 0] << 24) + (HEAPU8[i2 + 4 >> 0] << 16) + (HEAPU8[i2 + 5 >> 0] << 8) + (HEAPU8[i2 + 6 >> 0] | 0);
 if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 7 >> 0] | 0) == 62) {
  HEAP32[i4 >> 2] = (HEAP32[i5 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0 & 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 i2 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 7 >> 0] | 0) == 60) {
  HEAP32[i4 >> 2] = i2 >>> 0 < i5 >>> 0 & 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  HEAP32[i4 >> 2] = (i2 | 0) == (i5 | 0) & 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _realloc_post_list() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1 + 16 | 0;
 i3 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 i6 = i1;
 HEAP32[i3 >> 2] = ((HEAP32[26383] | 0) - (HEAP32[26384] | 0) | 0) / 4 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i3 >> 2] | 0) + 1e3;
 HEAP32[i5 >> 2] = _lalloc(HEAP32[i4 >> 2] << 2, 1) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 0;
  i7 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i7 | 0;
 } else {
  _memmove(HEAP32[i5 >> 2] | 0, HEAP32[26384] | 0, HEAP32[i3 >> 2] << 2 | 0) | 0;
  HEAP32[i6 >> 2] = HEAP32[26384];
  HEAP32[26384] = HEAP32[i5 >> 2];
  HEAP32[26382] = (HEAP32[i5 >> 2] | 0) + ((((HEAP32[26382] | 0) - (HEAP32[i6 >> 2] | 0) | 0) / 4 | 0) << 2);
  HEAP32[26383] = (HEAP32[26384] | 0) + (HEAP32[i4 >> 2] << 2);
  _vim_free(HEAP32[i6 >> 2] | 0);
  HEAP32[i2 >> 2] = 1;
  i7 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i7 | 0;
 }
 return 0;
}

function _set_term_defaults() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = 15328;
 while (1) {
  if (!(HEAP32[HEAP32[i2 >> 2] >> 2] | 0)) break;
  if (_istermoption(HEAP32[i2 >> 2] | 0) | 0) if ((HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] >> 2] | 0)) {
   if (HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 128 | 0) {
    _free_string_option(HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] | 0);
    i3 = (HEAP32[i2 >> 2] | 0) + 8 | 0;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -129;
   }
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i3 + 20 >> 2] = HEAP32[HEAP32[i3 + 12 >> 2] >> 2];
   if (HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 8 | 0) {
    i3 = (HEAP32[i2 >> 2] | 0) + 8 | 0;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 128;
    i3 = (HEAP32[i2 >> 2] | 0) + 8 | 0;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -9;
   }
  }
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 28;
 }
 STACKTOP = i1;
 return;
}

function _nv_next(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i5 >> 2] = _normal_search(i1 | 0, 0, 0, 512 | HEAP32[i1 + 32 >> 2]) | 0;
 if ((HEAP32[i5 >> 2] | 0) != 1) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i4 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i4 + 4 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i4 = (HEAP32[i3 >> 2] | 0) + 28 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i4 = HEAP32[i3 >> 2] | 0;
 _normal_search(i4 | 0, 0, 0, 512 | HEAP32[i4 + 32 >> 2]) | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + 28 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - 1;
 STACKTOP = i2;
 return;
}

function _ins_right(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _undisplay_dollar();
 if (_gchar_cursor() | 0) {
  _start_arrow_with_change((HEAP32[26881] | 0) + 24 | 0, HEAP32[i3 >> 2] | 0);
  if (!(HEAP32[i3 >> 2] | 0)) _AppendCharToRedobuff(-29291);
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  i3 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[25204] = 0;
  STACKTOP = i2;
  return;
 }
 if (_vim_strchr(HEAP32[27029] | 0, 93) | 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) {
  _start_arrow((HEAP32[26881] | 0) + 24 | 0);
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  i3 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
  HEAP32[25204] = 0;
  STACKTOP = i2;
  return;
 }
 _vim_beep(4);
 HEAP32[25204] = 0;
 STACKTOP = i2;
 return;
}

function _regtail(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i4 >> 2] | 0) == (-1 | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 while (1) {
  HEAP32[i7 >> 2] = _regnext(HEAP32[i6 >> 2] | 0) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) break;
  HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 }
 if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 4) HEAP32[i8 >> 2] = (HEAP32[i6 >> 2] | 0) - (HEAP32[i5 >> 2] | 0); else HEAP32[i8 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
 if ((HEAP32[i8 >> 2] | 0) > 65535) {
  HEAP32[26405] = 1;
  STACKTOP = i3;
  return;
 } else {
  HEAP8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] = (HEAP32[i8 >> 2] | 0) >>> 8;
  HEAP8[(HEAP32[i6 >> 2] | 0) + 2 >> 0] = HEAP32[i8 >> 2];
  STACKTOP = i3;
  return;
 }
}

function _win_setheight_win(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26881] | 0)) {
  if ((HEAP32[i4 >> 2] | 0) < (HEAP32[27035] | 0)) HEAP32[i4 >> 2] = HEAP32[27035];
  if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i4 >> 2] = 1;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 0;
 }
 i2 = HEAP32[i5 >> 2] | 0;
 _frame_setheight(HEAP32[i2 + 20 >> 2] | 0, (HEAP32[i4 >> 2] | 0) + (HEAP32[i2 + 92 >> 2] | 0) | 0);
 HEAP32[i6 >> 2] = _win_comp_pos() | 0;
 if ((HEAP32[26781] | 0) != 0 & (HEAP32[27044] | 0) == 0) if ((HEAP32[i6 >> 2] | 0) < (HEAP32[26876] | 0)) _screen_fill(HEAP32[i6 >> 2] | 0, HEAP32[26876] | 0, 0, HEAP32[10174] | 0, 32, 32, 0);
 HEAP32[26876] = HEAP32[i6 >> 2];
 HEAP32[26877] = HEAP32[i6 >> 2];
 HEAP32[27043] = 0;
 _redraw_all_later(40);
 STACKTOP = i3;
 return;
}

function _nfa_regcomp_start(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[26333] = 0;
 HEAP32[26388] = 0;
 HEAP32[i8 >> 2] = ((_strlen(HEAP32[i5 >> 2] | 0) | 0) + 1 | 0) * 25;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1e3;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2] << 2;
 HEAP32[26384] = _lalloc(HEAP32[i7 >> 2] | 0, 1) | 0;
 if (!(HEAP32[26384] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } else {
  HEAP32[26382] = HEAP32[26384];
  HEAP32[26383] = (HEAP32[26384] | 0) + (HEAP32[i8 >> 2] << 2);
  HEAP32[26327] = 0;
  HEAP32[26328] = 0;
  _regcomp_start(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  HEAP32[i4 >> 2] = 1;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 return 0;
}

function _gui_outstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) < 0) HEAP32[i5 >> 2] = _strlen(HEAP32[i4 >> 2] | 0) | 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) <= 0) break;
  if (((HEAP32[26635] | 0) + (HEAP32[i5 >> 2] | 0) | 0) > (HEAP32[10174] | 0)) HEAP32[i6 >> 2] = (HEAP32[10174] | 0) - (HEAP32[26635] | 0); else HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
  _gui_outstr_nowrap(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, 0, 0, 0) | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
  if ((HEAP32[26635] | 0) >= (HEAP32[10174] | 0)) {
   HEAP32[26635] = 0;
   HEAP32[26636] = (HEAP32[26636] | 0) + 1;
  }
 }
 STACKTOP = i3;
 return;
}

function _append_command(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 _strcat(HEAP32[26882] | 0, 71547) | 0;
 i4 = HEAP32[26882] | 0;
 HEAP32[i6 >> 2] = i4 + (_strlen(HEAP32[26882] | 0) | 0);
 while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i2 = 8;
   break;
  }
  if (((HEAP32[i6 >> 2] | 0) - (HEAP32[26882] | 0) | 0) >= 1018) {
   i2 = 8;
   break;
  }
  i4 = (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 160;
  i1 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i1 + 1;
  if (i4) {
   _strcpy(HEAP32[i6 >> 2] | 0, 46616) | 0;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 4;
  } else {
   i4 = HEAP8[i1 >> 0] | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i4;
  }
 }
 if ((i2 | 0) == 8) {
  HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
  STACKTOP = i3;
  return;
 }
}

function _find_term_bykeys(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[26600] | 0)) {
   i2 = 7;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == (HEAP32[(HEAP32[26602] | 0) + (HEAP32[i6 >> 2] << 4) + 8 >> 2] | 0)) if (!(_strncmp(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i6 >> 2] << 4) + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0)) {
   i2 = 5;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 5) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 7) {
  HEAP32[i4 >> 2] = -1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _mf_hash_rem_item(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & HEAP32[HEAP32[i4 >> 2] >> 2]) << 2) >> 2] = i2; else HEAP32[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] >> 2] = i2;
 if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  i6 = HEAP32[i4 >> 2] | 0;
  i7 = i6 + 4 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i9 = i8 + -1 | 0;
  HEAP32[i7 >> 2] = i9;
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i6 + 4 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i9 = i8 + -1 | 0;
 HEAP32[i7 >> 2] = i9;
 STACKTOP = i3;
 return;
}

function _del_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
 if ((HEAP32[i4 >> 2] | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[i5 >> 2] | 0) if (!(_u_savedel(HEAP32[i7 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = 0;
 do {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) break;
  _ml_delete(HEAP32[i7 >> 2] | 0, 1) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 } while ((HEAP32[i7 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0));
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 _check_cursor_lnum();
 _deleted_lines_mark(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _set_file_options(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 do if (HEAP32[i4 >> 2] | 0) {
  if (HEAP32[i5 >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 84 >> 2] | 0) {
   _set_fileformat(_get_fileformat_force(HEAP32[26773] | 0, HEAP32[i5 >> 2] | 0) | 0, 4);
   break;
  }
  if (HEAPU8[HEAP32[26917] >> 0] | 0 | 0) _set_fileformat(_default_fileformat() | 0, 4);
 } while (0);
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[26773] | 0) + 584 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 584 >> 2] = (HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0) == 1 & 1;
 _set_options_bin(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[26773] | 0) + 584 >> 2] | 0, 4);
 STACKTOP = i3;
 return;
}

function _mf_rem_used(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = i2; else HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) + 16 >> 2] = i2;
 i2 = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] = i2; else HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + 12 >> 2] = i2;
 i2 = (HEAP32[i4 >> 2] | 0) + 24 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - (HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0);
 i2 = Math_imul(HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 592 >> 2] | 0) | 0;
 HEAP32[27225] = (HEAP32[27225] | 0) - i2;
 STACKTOP = i3;
 return;
}

function _screen_getbytes(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 if (!(HEAP32[26691] | 0)) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[26696] | 0)) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[26697] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[i10 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
 HEAP32[HEAP32[i9 >> 2] >> 2] = HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i10 >> 2] << 1) >> 1];
 HEAP8[HEAP32[i8 >> 2] >> 0] = HEAP8[(HEAP32[26691] | 0) + (HEAP32[i10 >> 2] | 0) >> 0] | 0;
 HEAP8[(HEAP32[i8 >> 2] | 0) + 1 >> 0] = 0;
 STACKTOP = i5;
 return;
}

function _get_shape_idx(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAP32[i4 >> 2] | 0) == 0 & (HEAP32[10180] | 0) == 1808) HEAP32[i3 >> 2] = 16; else {
  if (HEAP32[10180] & 64 | 0) {
   HEAP32[i3 >> 2] = 3;
   break;
  }
  if (HEAP32[10180] & 16 | 0) {
   HEAP32[i3 >> 2] = 2;
   break;
  }
  if (HEAP32[10180] & 8 | 0) {
   if (_cmdline_at_end() | 0) {
    HEAP32[i3 >> 2] = 4;
    break;
   }
   if (_cmdline_overstrike() | 0) {
    HEAP32[i3 >> 2] = 6;
    break;
   } else {
    HEAP32[i3 >> 2] = 5;
    break;
   }
  }
  if (HEAP32[26796] | 0) {
   HEAP32[i3 >> 2] = 7;
   break;
  }
  if (!(HEAP32[26788] | 0)) {
   HEAP32[i3 >> 2] = 0;
   break;
  }
  if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) == 101) {
   HEAP32[i3 >> 2] = 8;
   break;
  } else {
   HEAP32[i3 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _win_linetabsize(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i10 >> 2] = HEAP32[i7 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i10 >> 2] >> 0] | 0)) {
   i4 = 6;
   break;
  }
  if ((HEAP32[i8 >> 2] | 0) != 2147483647) if ((HEAP32[i10 >> 2] | 0) >>> 0 >= ((HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0) >>> 0) {
   i4 = 6;
   break;
  }
  i3 = _win_lbr_chartabsize(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0;
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + i3;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 6) {
  STACKTOP = i5;
  return HEAP32[i9 >> 2] | 0;
 }
 return 0;
}

function _string_to_key(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) == 60) {
  HEAP32[i5 >> 2] = _find_key_option(i2 + 1 | 0) | 0;
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i7 | 0;
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAPU8[i2 >> 0] | 0 | 0) != 94) {
  HEAP32[i5 >> 2] = HEAPU8[i1 >> 0];
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i7 | 0;
 }
 if ((HEAPU8[i1 + 1 >> 0] | 0 | 0) < 97) i3 = 6; else if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0 | 0) > 122) i3 = 6; else i8 = (HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0) - 32 | 0;
 if ((i3 | 0) == 6) i8 = HEAPU8[(HEAP32[i6 >> 2] | 0) + 1 >> 0] | 0;
 HEAP32[i5 >> 2] = i8 ^ 64;
 i7 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i7 | 0;
}

function _vim_is_fastterm(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if (!(_vim_is_xterm(HEAP32[i4 >> 2] | 0) | 0)) if (!(_vim_is_vt300(HEAP32[i4 >> 2] | 0) | 0)) if (!(_vim_is_iris(HEAP32[i4 >> 2] | 0) | 0)) {
  if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71973, 6) | 0)) i6 = 1; else if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71980, 7) | 0)) i6 = 1; else if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71988, 6) | 0)) i6 = 1; else if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71995, 4) | 0)) i6 = 1; else i6 = (_strncasecmp(HEAP32[i4 >> 2] | 0, 72e3, 6) | 0) == 0;
  HEAP32[i3 >> 2] = i6 & 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 HEAP32[i3 >> 2] = 1;
 i5 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _tabpage_close_other(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i8 >> 2] = _tabline_height() | 0;
 do {
  i2 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
  HEAP32[i6 >> 2] = i2;
  if ((i2 | 0) >= 1e3) break;
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2];
  _ex_win_close(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i4 >> 2] | 0);
  if (!(_valid_tabpage(HEAP32[i4 >> 2] | 0) | 0)) break;
 } while ((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[i7 >> 2] | 0));
 _apply_autocmds(77, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[26770] = 1;
 i7 = HEAP32[i8 >> 2] | 0;
 if ((i7 | 0) == (_tabline_height() | 0)) {
  STACKTOP = i3;
  return;
 }
 _shell_new_rows();
 STACKTOP = i3;
 return;
}

function _au_find_group(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[2723] | 0)) {
   i2 = 8;
   break;
  }
  if (HEAP32[(HEAP32[2727] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0) {
   i1 = HEAP32[(HEAP32[2727] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0;
   if ((i1 | 0) != (_get_deleted_augroup() | 0)) if (!(_strcmp(HEAP32[(HEAP32[2727] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0)) {
    i2 = 6;
    break;
   }
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 8) {
  HEAP32[i4 >> 2] = -2;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _u_add_time(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 i3 = _vim_time() | 0;
 if ((i3 - (HEAP32[i8 >> 2] | 0) | 0) < 100) {
  i3 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i1 = _vim_time() | 0;
  HEAP32[i5 >> 2] = i1 - (HEAP32[i8 >> 2] | 0);
  _vim_snprintf(i3, i2, 80894, i5) | 0;
  STACKTOP = i4;
  return;
 }
 HEAP32[i9 >> 2] = _localtime(i8 | 0) | 0;
 i5 = _vim_time() | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i7 = HEAP32[i9 >> 2] | 0;
 if ((i5 - (HEAP32[i8 >> 2] | 0) | 0) < 43200) {
  _strftime(i2 | 0, i6 | 0, 80867, i7 | 0) | 0;
  STACKTOP = i4;
  return;
 } else {
  _strftime(i2 | 0, i6 | 0, 80876, i7 | 0) | 0;
  STACKTOP = i4;
  return;
 }
}

function _xy2win(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = ((HEAP32[i6 >> 2] | 0) - (HEAP32[26669] | 0) | 0) / (HEAP32[26666] | 0) | 0;
 HEAP32[i8 >> 2] = ((HEAP32[i5 >> 2] | 0) - (HEAP32[26669] | 0) | 0) / (HEAP32[26665] | 0) | 0;
 if ((HEAP32[i7 >> 2] | 0) < 0 | (HEAP32[i8 >> 2] | 0) < 0) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i9 >> 2] = _mouse_find_win(i7, i8) | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 } else {
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 return 0;
}

function _win_free_mem(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2];
 HEAP32[i9 >> 2] = _winframe_remove(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 _vim_free(HEAP32[i8 >> 2] | 0);
 _win_free(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 if (!(HEAP32[i7 >> 2] | 0)) {
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 if ((HEAP32[i5 >> 2] | 0) != (HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] | 0)) {
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = HEAP32[i9 >> 2];
 i10 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _get_coll_element(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0 | 0) == 46) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 2) >> 0] | 0 | 0) == 46) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 3) >> 0] | 0 | 0) == 93) {
  HEAP32[i5 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0];
  i7 = HEAP32[i4 >> 2] | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 4);
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i8 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i8 | 0;
}

function _fputc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) < 0) i3 = 3; else if (!(___lockfile(i2) | 0)) i3 = 3; else {
  i4 = i1 & 255;
  i5 = i1 & 255;
  if ((i5 | 0) == (HEAP8[i2 + 75 >> 0] | 0)) i3 = 10; else {
   i6 = i2 + 20 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   if (i7 >>> 0 < (HEAP32[i2 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i4;
    i8 = i5;
   } else i3 = 10;
  }
  if ((i3 | 0) == 10) i8 = ___overflow(i2, i1) | 0;
  ___unlockfile(i2);
  i9 = i8;
 }
 do if ((i3 | 0) == 3) {
  i8 = i1 & 255;
  i5 = i1 & 255;
  if ((i5 | 0) != (HEAP8[i2 + 75 >> 0] | 0)) {
   i4 = i2 + 20 | 0;
   i7 = HEAP32[i4 >> 2] | 0;
   if (i7 >>> 0 < (HEAP32[i2 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i8;
    i9 = i5;
    break;
   }
  }
  i9 = ___overflow(i2, i1) | 0;
 } while (0);
 return i9 | 0;
}

function _find_termcode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[26600] | 0)) {
   i2 = 7;
   break;
  }
  if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i6 >> 2] << 4) >> 0] | 0 | 0) == (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i6 >> 2] << 4) + 1 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0)) {
   i2 = 5;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 5) {
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[26602] | 0) + (HEAP32[i6 >> 2] << 4) + 4 >> 2];
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 7) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _disp_sb_line(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 while (1) {
  HEAP32[26877] = HEAP32[i5 >> 2];
  HEAP32[27043] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
  HEAP32[i8 >> 2] = (HEAP32[i7 >> 2] | 0) + 20;
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) == 10) HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
  _msg_puts_display(HEAP32[i8 >> 2] | 0, -1, HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0, 1);
  if (HEAP8[(HEAP32[i7 >> 2] | 0) + 8 >> 0] | 0) {
   i3 = 7;
   break;
  }
  if (!(HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) {
   i3 = 7;
   break;
  }
  HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 }
 if ((i3 | 0) == 7) {
  STACKTOP = i4;
  return HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
 }
 return 0;
}

function _putc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) < 0) i3 = 3; else if (!(___lockfile(i2) | 0)) i3 = 3; else {
  i4 = i1 & 255;
  i5 = i1 & 255;
  if ((i5 | 0) == (HEAP8[i2 + 75 >> 0] | 0)) i3 = 10; else {
   i6 = i2 + 20 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   if (i7 >>> 0 < (HEAP32[i2 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i4;
    i8 = i5;
   } else i3 = 10;
  }
  if ((i3 | 0) == 10) i8 = ___overflow(i2, i1) | 0;
  ___unlockfile(i2);
  i9 = i8;
 }
 do if ((i3 | 0) == 3) {
  i8 = i1 & 255;
  i5 = i1 & 255;
  if ((i5 | 0) != (HEAP8[i2 + 75 >> 0] | 0)) {
   i4 = i2 + 20 | 0;
   i7 = HEAP32[i4 >> 2] | 0;
   if (i7 >>> 0 < (HEAP32[i2 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i8;
    i9 = i5;
    break;
   }
  }
  i9 = ___overflow(i2, i1) | 0;
 } while (0);
 return i9 | 0;
}

function _ex_file(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) > 0) {
  if (!(HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0)) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] | 0) <= 0) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) <= 1) break;
  _emsg(92453) | 0;
  STACKTOP = i3;
  return;
 } while (0);
 if (HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0) i2 = 8; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0) == 1) i2 = 8;
 do if ((i2 | 0) == 8) if (!(_rename_buffer(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0)) {
  STACKTOP = i3;
  return;
 } else {
  HEAP32[26770] = 1;
  break;
 } while (0);
 if (HEAPU8[HEAP32[HEAP32[i4 >> 2] >> 2] >> 0] | 0 | 0) if (_shortmess(70) | 0) {
  STACKTOP = i3;
  return;
 }
 _fileinfo(0, 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ex_argedit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0; else i6 = (HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) + 1 | 0;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i5 >> 2] = _curbuf_reusable() | 0;
 if (!(_do_arglist(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 2, HEAP32[i4 >> 2] | 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0)) if (HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 1 | 0) if (HEAP32[i5 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0) == 0) HEAP32[i4 >> 2] = 0;
 if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_argfile(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ex_startinsert(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) {
  if (!(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
  _coladvance(2147483647) | 0;
  HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647;
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 0;
 }
 if (HEAP32[10180] & 16 | 0) {
  STACKTOP = i2;
  return;
 }
 do if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 421) HEAP32[26806] = 97; else if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 423) {
  HEAP32[26806] = 82;
  break;
 } else {
  HEAP32[26806] = 86;
  break;
 } while (0);
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 421) HEAP32[26806] = 105;
 HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _ex_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 if (_text_locked() | 0) {
  STACKTOP = i2;
  return;
 }
 if (_curbuf_locked() | 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) {
  _ex_win_close(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, HEAP32[26881] | 0, 0);
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 }
 if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i4 >> 2] = HEAP32[27112];
 _ex_win_close(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, HEAP32[i4 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _autowrite(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 do if (((HEAP32[26890] | 0) != 0 | (HEAP32[26891] | 0) != 0) & (HEAP32[27039] | 0) != 0) {
  if (!(HEAP32[i6 >> 2] | 0)) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 676 >> 2] | 0) break;
  if (HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2] | 0) {
   _set_bufref(i8, HEAP32[i5 >> 2] | 0);
   HEAP32[i7 >> 2] = _buf_write_all(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
   if (_bufref_valid(i8) | 0) if (_bufIsChanged(HEAP32[i5 >> 2] | 0) | 0) HEAP32[i7 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
   i9 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i9 | 0;
  }
 } while (0);
 HEAP32[i4 >> 2] = 0;
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _frame_check_height(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 L5 : do if ((HEAP8[HEAP32[i5 >> 2] >> 0] | 0) == 1) {
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i7 >> 2] | 0)) break L5;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) break;
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
  }
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _check_linecomment(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 while (1) {
  i1 = _vim_strchr(HEAP32[i5 >> 2] | 0, 47) | 0;
  HEAP32[i5 >> 2] = i1;
  if (!i1) break;
  if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) == 47) {
   if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) break;
   if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + -1 >> 0] | 0 | 0) != 42) break;
   if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0 | 0) != 42) break;
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 2147483647;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  HEAP32[i3 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i4 >> 2] | 0);
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _ins_left(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 _undisplay_dollar();
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if ((_oneleft() | 0) == 1) {
  _start_arrow_with_change(i4, HEAP32[i3 >> 2] | 0);
  if (HEAP32[i3 >> 2] | 0) {
   HEAP32[25204] = 0;
   STACKTOP = i2;
   return;
  }
  _AppendCharToRedobuff(-27755);
  HEAP32[25204] = 0;
  STACKTOP = i2;
  return;
 }
 if (_vim_strchr(HEAP32[27029] | 0, 91) | 0) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > 1) {
  _start_arrow(i4);
  i4 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
  _coladvance(2147483647) | 0;
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  HEAP32[25204] = 0;
  STACKTOP = i2;
  return;
 }
 _vim_beep(4);
 HEAP32[25204] = 0;
 STACKTOP = i2;
 return;
}

function _fflush(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 do if (!i1) {
  if (!(HEAP32[10275] | 0)) i2 = 0; else i2 = _fflush(HEAP32[10275] | 0) | 0;
  i3 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (!i3) i4 = i2; else {
   i5 = i3;
   i3 = i2;
   while (1) {
    if ((HEAP32[i5 + 76 >> 2] | 0) > -1) i6 = ___lockfile(i5) | 0; else i6 = 0;
    if ((HEAP32[i5 + 20 >> 2] | 0) >>> 0 > (HEAP32[i5 + 28 >> 2] | 0) >>> 0) i7 = ___fflush_unlocked(i5) | 0 | i3; else i7 = i3;
    if (i6 | 0) ___unlockfile(i5);
    i5 = HEAP32[i5 + 56 >> 2] | 0;
    if (!i5) {
     i4 = i7;
     break;
    } else i3 = i7;
   }
  }
  ___ofl_unlock();
  i8 = i4;
 } else {
  if ((HEAP32[i1 + 76 >> 2] | 0) <= -1) {
   i8 = ___fflush_unlocked(i1) | 0;
   break;
  }
  i3 = (___lockfile(i1) | 0) == 0;
  i5 = ___fflush_unlocked(i1) | 0;
  if (i3) i8 = i5; else {
   ___unlockfile(i1);
   i8 = i5;
  }
 } while (0);
 return i8 | 0;
}

function _win_lbr_chartabsize(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 24 | 0;
 i8 = i6 + 20 | 0;
 i9 = i6 + 12 | 0;
 i10 = i6 + 8 | 0;
 i11 = i6;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i6 + 16 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i6 + 4 >> 2] = i5;
 if ((HEAPU8[HEAP32[i9 >> 2] >> 0] | 0) == 9) if (HEAP32[26862] | 0 ? 1 : (HEAP32[(HEAP32[i8 >> 2] | 0) + 200 >> 2] | 0) == 0) {
  HEAP32[i11 >> 2] = HEAP32[(HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) + 700 >> 2];
  i8 = HEAP32[i11 >> 2] | 0;
  HEAP32[i7 >> 2] = (i8 | 0) - ((HEAP32[i10 >> 2] | 0) % (i8 | 0) | 0);
  i12 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i6;
  return i12 | 0;
 }
 HEAP32[i7 >> 2] = _ptr2cells(HEAP32[i9 >> 2] | 0) | 0;
 i12 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i6;
 return i12 | 0;
}

function _frame_check_width(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 L5 : do if ((HEAP8[HEAP32[i5 >> 2] >> 0] | 0) == 2) {
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i7 >> 2] | 0)) break L5;
   if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) break;
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2];
  }
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _check_redraw(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = (HEAP32[i4 >> 2] & 28672 | 0) == 28672 & 1;
 HEAP32[i6 >> 2] = ((HEAP32[i4 >> 2] & 24576 | 0) == 24576 ? 1 : (HEAP32[i5 >> 2] | 0) != 0) & 1;
 if ((HEAP32[i4 >> 2] & 4096 | 0) != 0 | (HEAP32[i6 >> 2] | 0) != 0) _status_redraw_all();
 if (HEAP32[i4 >> 2] & 16384 | 0) i2 = 5; else if ((HEAP32[i4 >> 2] & 8192 | 0) != 0 | (HEAP32[i6 >> 2] | 0) != 0) i2 = 5;
 if ((i2 | 0) == 5) _changed_window_setting();
 if (HEAP32[i4 >> 2] & 16384 | 0) _redraw_curbuf_later(40);
 if (HEAP32[i4 >> 2] & 268435456 | 0) _redraw_later(40);
 if (HEAP32[i5 >> 2] | 0) {
  _redraw_all_later(50);
  STACKTOP = i3;
  return;
 }
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _redraw_all_later(40);
 STACKTOP = i3;
 return;
}

function _ex_tabclose(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[HEAP32[26884] >> 2] | 0)) {
  _emsg(50364) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = _get_tabpage_arg(HEAP32[i3 >> 2] | 0) | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = _find_tabpage(HEAP32[i5 >> 2] | 0) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  _beep_flush();
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i4 >> 2] | 0) != (HEAP32[26886] | 0)) {
  _tabpage_close_other(HEAP32[i4 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (_text_locked() | 0) {
  STACKTOP = i2;
  return;
 }
 if (_curbuf_locked() | 0) {
  STACKTOP = i2;
  return;
 }
 _tabpage_close(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _map_mode_to_chars(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 20 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 _ga_init2(i4, 1, 7);
 do if ((HEAP32[i3 >> 2] & 24 | 0) == 24) _ga_append(i4, 33); else {
  if (HEAP32[i3 >> 2] & 16 | 0) {
   _ga_append(i4, 105);
   break;
  }
  if (HEAP32[i3 >> 2] & 32 | 0) {
   _ga_append(i4, 108);
   break;
  }
  if (HEAP32[i3 >> 2] & 8 | 0) {
   _ga_append(i4, 99);
   break;
  }
  if ((HEAP32[i3 >> 2] & 4103 | 0) == 4103) {
   _ga_append(i4, 32);
   break;
  }
  if (HEAP32[i3 >> 2] & 1 | 0) _ga_append(i4, 110);
  if (HEAP32[i3 >> 2] & 4 | 0) _ga_append(i4, 111);
  if ((HEAP32[i3 >> 2] & 4098 | 0) == 4098) {
   _ga_append(i4, 118);
   break;
  }
  if (HEAP32[i3 >> 2] & 2 | 0) _ga_append(i4, 120);
  if (HEAP32[i3 >> 2] & 4096 | 0) _ga_append(i4, 115);
 } while (0);
 _ga_append(i4, 0);
 STACKTOP = i2;
 return HEAP32[i4 + 16 >> 2] | 0;
}

function _ml_upd_block0(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = _mf_get(HEAP32[i6 >> 2] | 0, 0, 1) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
 do if (!(_ml_check_b0_id(HEAP32[i8 >> 2] | 0) | 0)) _iemsg(56786); else {
  i2 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (!(HEAP32[i5 >> 2] | 0)) {
   _set_b0_fname(i2, i1);
   break;
  } else {
   _set_b0_dir_flag(i2, i1);
   break;
  }
 } while (0);
 _mf_put(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1, 0);
 STACKTOP = i3;
 return;
}

function _beginline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[26881] | 0;
 if (!((HEAP32[i3 >> 2] & 2 | 0) == 0 | (HEAP32[26996] | 0) != 0)) {
  _coladvance(HEAP32[i1 + 32 >> 2] | 0) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 L5 : do if (HEAP32[i3 >> 2] & 3 | 0) {
  HEAP32[i4 >> 2] = _ml_get_curline() | 0;
  while (1) {
   if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 32) if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 9) break L5;
   if (HEAP32[i3 >> 2] & 4 | 0) i5 = (HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) == 0; else i5 = 0;
   if (!(i5 ^ 1)) break L5;
   i1 = (HEAP32[26881] | 0) + 24 + 4 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _prompt_for_number(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[i3 >> 2] | 0) _msg_puts(59912); else _msg_puts(59974);
 HEAP32[i5 >> 2] = HEAP32[26876];
 HEAP32[26876] = 0;
 HEAP32[i6 >> 2] = HEAP32[10180];
 HEAP32[10180] = 768;
 _setmouse();
 HEAP32[i4 >> 2] = _get_number(1, HEAP32[i3 >> 2] | 0) | 0;
 if (HEAP32[27161] | 0) {
  HEAP32[26876] = (HEAP32[26877] | 0) - 1;
  HEAP32[26721] = 0;
  HEAP32[26712] = 0;
  HEAP32[26711] = 0;
  i7 = HEAP32[i6 >> 2] | 0;
  HEAP32[10180] = i7;
  _setmouse();
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 } else {
  HEAP32[26876] = HEAP32[i5 >> 2];
  i7 = HEAP32[i6 >> 2] | 0;
  HEAP32[10180] = i7;
  _setmouse();
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 return 0;
}

function _shorten_fname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i7 >> 2] = _strlen(HEAP32[i6 >> 2] | 0) | 0;
 do if (!(_vim_fnamencmp(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0)) {
  HEAP32[i8 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
  if (_vim_ispathsep(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0) | 0) {
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
   break;
  } else {
   HEAP32[i8 >> 2] = 0;
   break;
  }
 } else HEAP32[i8 >> 2] = 0; while (0);
 HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _paragraph_start(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAP32[i4 >> 2] | 0) <= 1) HEAP32[i3 >> 2] = 1; else {
  HEAP32[i5 >> 2] = _ml_get((HEAP32[i4 >> 2] | 0) - 1 | 0) | 0;
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
   HEAP32[i3 >> 2] = 1;
   break;
  }
  if (_fmt_check_par((HEAP32[i4 >> 2] | 0) - 1 | 0) | 0) {
   HEAP32[i3 >> 2] = 1;
   break;
  }
  if (_fmt_check_par(HEAP32[i4 >> 2] | 0) | 0) {
   HEAP32[i3 >> 2] = 1;
   break;
  }
  if (_has_format_option(119) | 0) if (!(_ends_in_white((HEAP32[i4 >> 2] | 0) - 1 | 0) | 0)) {
   HEAP32[i3 >> 2] = 1;
   break;
  }
  if (_has_format_option(110) | 0) if ((_get_number_indent(HEAP32[i4 >> 2] | 0) | 0) > 0) {
   HEAP32[i3 >> 2] = 1;
   break;
  }
  HEAP32[i3 >> 2] = 0;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _msg_may_trunc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = Math_imul((HEAP32[10173] | 0) - (HEAP32[26876] | 0) - 1 | 0, HEAP32[10174] | 0) | 0;
 HEAP32[i7 >> 2] = i2 + (HEAP32[27116] | 0) - 1;
 if (!(HEAP32[i4 >> 2] | 0)) {
  i4 = (_shortmess(116) | 0) == 0;
  if (i4 | (HEAP32[26798] | 0) != 0) {
   i8 = HEAP32[i5 >> 2] | 0;
   STACKTOP = i3;
   return i8 | 0;
  }
 }
 i4 = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 i2 = i4 - (HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i2;
 if ((i2 | 0) <= 0) {
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 HEAP8[HEAP32[i5 >> 2] >> 0] = 60;
 i8 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _gethexchrs(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if ((HEAP32[i7 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i6 >> 2] = HEAPU8[HEAP32[26392] >> 0];
  if (!(_vim_isxdigit(HEAP32[i6 >> 2] | 0) | 0)) break;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] << 4;
  i1 = _hex2nr(HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | i1;
  HEAP32[26392] = (HEAP32[26392] | 0) + 1;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i3 >> 2] = -1;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 } else {
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 return 0;
}

function _win_draw_end(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 20 | 0;
 i9 = i7 + 16 | 0;
 i10 = i7 + 12 | 0;
 i11 = i7 + 8 | 0;
 i12 = i7 + 4 | 0;
 i13 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = i6;
 i6 = HEAP32[(HEAP32[i8 >> 2] | 0) + 84 >> 2] | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 i4 = HEAP32[(HEAP32[i8 >> 2] | 0) + 96 >> 2] | 0;
 _screen_fill(i6 + (HEAP32[i11 >> 2] | 0) | 0, i6 + (HEAP32[i12 >> 2] | 0) | 0, i4 + 0 | 0, i4 + (HEAP32[i5 + 100 >> 2] | 0) | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[108192 + (HEAP32[i13 >> 2] << 2) >> 2] | 0);
 _set_empty_rows(HEAP32[i8 >> 2] | 0, HEAP32[i11 >> 2] | 0);
 STACKTOP = i7;
 return;
}

function _close_tabpage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == (HEAP32[26884] | 0)) {
  HEAP32[26884] = HEAP32[HEAP32[i3 >> 2] >> 2];
  HEAP32[i4 >> 2] = HEAP32[26884];
  i5 = HEAP32[i4 >> 2] | 0;
  _goto_tabpage_tp(i5, 0, 0);
  i6 = HEAP32[i3 >> 2] | 0;
  _free_tabpage(i6);
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 }
 if (!(HEAP32[i4 >> 2] | 0)) ___assert_fail(84207, 84219, 3827, 84228);
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 i5 = HEAP32[i4 >> 2] | 0;
 _goto_tabpage_tp(i5, 0, 0);
 i6 = HEAP32[i3 >> 2] | 0;
 _free_tabpage(i6);
 STACKTOP = i2;
 return;
}

function _set_string_option_global(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) == (-1 | 0)) HEAP32[i6 >> 2] = (HEAP32[i5 >> 2] | 0) + 48; else HEAP32[i6 >> 2] = HEAP32[15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 12 >> 2];
 if (!(HEAP32[15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 16 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 i4 = _vim_strsave(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = i4;
 if (!i4) {
  STACKTOP = i3;
  return;
 }
 _free_string_option(HEAP32[HEAP32[i6 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[i7 >> 2];
 STACKTOP = i3;
 return;
}

function _prep_exarg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = _alloc(15) | 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else {
  _sprintf(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0, 60194, i3) | 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 84 >> 2] = HEAPU8[HEAP32[(HEAP32[i6 >> 2] | 0) + 620 >> 2] >> 0];
  HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 584 >> 2] | 0 ? 1 : 2;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 80 >> 2] = 0;
  HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] = 0;
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _transchar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 if ((HEAP32[i3 >> 2] | 0) < 0) {
  HEAP8[113980] = 126;
  HEAP8[113981] = 64;
  HEAP32[i4 >> 2] = 2;
  if ((HEAP32[i3 >> 2] | 0) == 128) i5 = 254; else if (!(HEAP32[i3 >> 2] | 0)) i5 = 255; else i5 = 0 - (HEAP32[i3 >> 2] | 0) & 255;
  HEAP32[i3 >> 2] = i5;
 }
 do if (!((HEAP32[26690] | 0) == 0 & (HEAP32[i3 >> 2] | 0) >= 32 & (HEAP32[i3 >> 2] | 0) <= 126)) {
  if ((HEAP32[i3 >> 2] | 0) < 256) if (_vim_isprintc_strict(HEAP32[i3 >> 2] | 0) | 0) break;
  _transchar_nonprint(113980 + (HEAP32[i4 >> 2] | 0) | 0, HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return 113980;
 } while (0);
 HEAP8[113980 + (HEAP32[i4 >> 2] | 0) >> 0] = HEAP32[i3 >> 2];
 HEAP8[113980 + ((HEAP32[i4 >> 2] | 0) + 1) >> 0] = 0;
 STACKTOP = i2;
 return 113980;
}

function _set_fileformat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 switch (HEAP32[i4 >> 2] | 0) {
 case 1:
  {
   HEAP32[i6 >> 2] = 64304;
   HEAP32[(HEAP32[26773] | 0) + 704 >> 2] = 1;
   break;
  }
 case 0:
  {
   HEAP32[i6 >> 2] = 64299;
   HEAP32[(HEAP32[26773] | 0) + 704 >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[i6 >> 2] = 64250;
   HEAP32[(HEAP32[26773] | 0) + 704 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 if (!(HEAP32[i6 >> 2] | 0)) {
  i7 = HEAP32[26773] | 0;
  _check_status(i7);
  HEAP32[26770] = 1;
  STACKTOP = i3;
  return;
 }
 _set_string_option_direct(65773, -1, HEAP32[i6 >> 2] | 0, 1 | HEAP32[i5 >> 2], 0);
 i7 = HEAP32[26773] | 0;
 _check_status(i7);
 HEAP32[26770] = 1;
 STACKTOP = i3;
 return;
}

function _same_directory(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 4128 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 24 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[i5 >> 2] | 0) == 0 | (HEAP32[i6 >> 2] | 0) == 0) {
  HEAP32[i4 >> 2] = 0;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 _vim_FullName(HEAP32[i5 >> 2] | 0, i7, 4096, 0) | 0;
 HEAP32[i8 >> 2] = _gettail_sep(i7) | 0;
 HEAP32[i9 >> 2] = _gettail_sep(HEAP32[i6 >> 2] | 0) | 0;
 if (((HEAP32[i8 >> 2] | 0) - i7 | 0) == ((HEAP32[i9 >> 2] | 0) - (HEAP32[i6 >> 2] | 0) | 0)) i11 = (_pathcmp(i7, HEAP32[i6 >> 2] | 0, (HEAP32[i8 >> 2] | 0) - i7 | 0) | 0) == 0; else i11 = 0;
 HEAP32[i4 >> 2] = i11 & 1;
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _check_more(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[26881] | 0;
 HEAP32[i7 >> 2] = (HEAP32[HEAP32[i2 + 184 >> 2] >> 2] | 0) - (HEAP32[i2 + 188 >> 2] | 0) - 1;
 if (!(HEAP32[i6 >> 2] | 0)) if (_only_one_window() | 0) if (((HEAP32[26776] | 0 ? 1 : (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) <= 1) ^ 1) & (HEAP32[i7 >> 2] | 0) >= 0 & (HEAP32[25230] | 0) == 0) {
  if (HEAP32[i5 >> 2] | 0) {
   if ((HEAP32[i7 >> 2] | 0) == 1) _emsg(50497) | 0; else _emsgn(50523, HEAP32[i7 >> 2] | 0) | 0;
   HEAP32[25230] = 2;
  }
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _seen_endbrace(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP8[111107 + (HEAP32[i4 >> 2] | 0) >> 0] | 0)) {
  HEAP32[i5 >> 2] = HEAP32[26392];
  while (1) {
   if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) break;
   if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 64) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) == 60) {
    if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0) == 33) break;
    if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0) == 61) break;
   }
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  }
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
   _emsg(73936) | 0;
   HEAP32[26719] = 1;
   HEAP32[i3 >> 2] = 0;
   i6 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i6 | 0;
  }
 }
 HEAP32[i3 >> 2] = 1;
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _msg_puts_attr_len(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _redir_write(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 if (HEAP32[26809] | 0) {
  STACKTOP = i4;
  return;
 }
 if ((HEAP32[i7 >> 2] & 4096 | 0) != 0 & (HEAP32[i6 >> 2] | 0) < 0) {
  _add_msg_hist(HEAP32[i5 >> 2] | 0, -1, HEAP32[i7 >> 2] | 0);
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] & -4097;
 }
 if (!((HEAP32[27044] | 0) == 0 | (HEAP32[26705] | 0) != 0)) HEAP32[26721] = 1;
 HEAP32[26712] = 1;
 i3 = (_msg_use_printf() | 0) != 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 if (i3) {
  _msg_puts_printf(i2, i5);
  STACKTOP = i4;
  return;
 } else {
  _msg_puts_display(i2, i5, HEAP32[i7 >> 2] | 0, 0);
  STACKTOP = i4;
  return;
 }
}

function _linecopy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i5 >> 2] << 2) >> 2] | 0) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 96 >> 2] | 0);
 HEAP32[i9 >> 2] = (HEAP32[(HEAP32[26693] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0) + (HEAP32[(HEAP32[i7 >> 2] | 0) + 96 >> 2] | 0);
 i6 = HEAP32[26691] | 0;
 _memmove(i6 + (HEAP32[i8 >> 2] | 0) | 0, i6 + (HEAP32[i9 >> 2] | 0) | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] | 0) | 0;
 i6 = HEAP32[26692] | 0;
 _memmove(i6 + (HEAP32[i8 >> 2] << 1) | 0, i6 + (HEAP32[i9 >> 2] << 1) | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2] << 1 | 0) | 0;
 STACKTOP = i4;
 return;
}

function _early_arg_scan(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 HEAP32[i8 >> 2] = 1;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
   i2 = 7;
   break;
  }
  if (!(_strcmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0, 97173) | 0)) {
   i2 = 7;
   break;
  }
  if (!(_strncmp(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0, 97176, 3) | 0)) {
   i5 = HEAP32[10211] | 0;
   HEAP32[i4 >> 2] = 97180;
   _fprintf(i5, 97576, i4) | 0;
   _mch_exit(2);
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i3;
  return;
 }
}

function _syn_get_final_id(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[i4 >> 2] | 0) < 1 ? 1 : (HEAP32[i4 >> 2] | 0) > (HEAP32[26486] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 HEAP32[i5 >> 2] = 100;
 while (1) {
  i1 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  HEAP32[i5 >> 2] = i1;
  if ((i1 | 0) < 0) break;
  HEAP32[i6 >> 2] = (HEAP32[26490] | 0) + (((HEAP32[i4 >> 2] | 0) - 1 | 0) * 96 | 0);
  if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 88 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 88 >> 2] | 0) > (HEAP32[26486] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 88 >> 2];
 }
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _gui_create_scrollbar(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = HEAP32[26686] | 0;
 HEAP32[26686] = i3 + 1;
 HEAP32[HEAP32[i5 >> 2] >> 2] = i3;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 1;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] = 1;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] = 0;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] = 0;
 _gui_mch_create_scrollbar(HEAP32[i5 >> 2] | 0, (HEAP32[i7 >> 2] | 0) == 0 ? 1 : 0);
 STACKTOP = i4;
 return;
}

function _hl_do_font(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 20 | 0;
 i9 = i7 + 16 | 0;
 i10 = i7 + 12 | 0;
 i11 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i7 + 8 >> 2] = i4;
 HEAP32[i7 + 4 >> 2] = i5;
 HEAP32[i11 >> 2] = i6;
 if (HEAP32[i11 >> 2] | 0) _gui_mch_free_font(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i8 >> 2] | 0) * 96 | 0) + 60 >> 2] | 0);
 i11 = _font_name2handle(HEAP32[i9 >> 2] | 0) | 0;
 HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i8 >> 2] | 0) * 96 | 0) + 60 >> 2] = i11;
 if (!(HEAP32[i10 >> 2] | 0 ? (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i8 >> 2] | 0) * 96 | 0) + 60 >> 2] | 0) != 0 : 0)) {
  STACKTOP = i7;
  return;
 }
 _gui_init_font(HEAP32[i9 >> 2] | 0, 0) | 0;
 STACKTOP = i7;
 return;
}

function _get_long_from_buf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 20 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[HEAP32[i5 >> 2] >> 2] = 0;
 HEAP32[i6 >> 2] = _get_bytes_from_buf(HEAP32[i4 >> 2] | 0, i7, 4) | 0;
 if ((HEAP32[i6 >> 2] | 0) == -1) {
  i10 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= 4) break;
  HEAP32[i9 >> 2] = 3 - (HEAP32[i8 >> 2] | 0) << 3;
  i4 = HEAP32[i5 >> 2] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + ((HEAPU8[i7 + (HEAP32[i8 >> 2] | 0) >> 0] | 0) << HEAP32[i9 >> 2]);
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 i10 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _clrallmarks(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 L1 : do if ((HEAP32[2734] | 0) == -1) {
  HEAP32[2734] = 0;
  while (1) {
   if ((HEAP32[2734] | 0) >= 27) break L1;
   HEAP32[103600 + (HEAP32[2734] << 4) >> 2] = 0;
   HEAP32[103600 + (HEAP32[2734] << 4) + 12 >> 2] = 0;
   HEAP32[2734] = (HEAP32[2734] | 0) + 1;
  }
 } while (0);
 HEAP32[2734] = 0;
 while (1) {
  i4 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[2734] | 0) >= 26) break;
  HEAP32[i4 + 188 + (HEAP32[2734] << 3) >> 2] = 0;
  HEAP32[2734] = (HEAP32[2734] | 0) + 1;
 }
 HEAP32[i4 + 476 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 492 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 420 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 420 + 4 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 428 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 436 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _copy_winopt(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 32 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 44 >> 2];
 _check_winopt(HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _check_changed(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 24 | 0;
 i5 = i3 + 20 | 0;
 i6 = i3 + 16 | 0;
 i7 = i3 + 12 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2] & 4;
 _set_bufref(i3, HEAP32[i5 >> 2] | 0);
 do if (!(HEAP32[i7 >> 2] | 0)) if (_bufIsChanged(HEAP32[i5 >> 2] | 0) | 0) {
  if (!(HEAP32[i6 >> 2] & 2)) if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 56 >> 2] | 0) > 1) break;
  if (HEAP32[i6 >> 2] & 1 | 0) if (_autowrite(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) break;
  if (HEAP32[i6 >> 2] & 16 | 0) _no_write_message(); else _no_write_message_nobang(HEAP32[26773] | 0);
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 0;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _adjust_for_sel(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[26788] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) != 101) {
  STACKTOP = i2;
  return;
 }
 if (!(_gchar_cursor() | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[27117] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  if ((HEAP32[27117] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
   STACKTOP = i2;
   return;
  }
 } else if ((HEAP32[27118] | 0) >= (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[26881] | 0) + 24 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _name_to_mod_mask(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = (i1 | 0) < 97 | (i1 | 0) > 122 ? i1 | 0 : i1 - 32 | 0;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if (!(HEAP16[41528 + ((HEAP32[i6 >> 2] | 0) * 6 | 0) >> 1] | 0)) {
   i2 = 6;
   break;
  }
  i7 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[i5 >> 2] | 0) == (HEAPU8[41528 + ((HEAP32[i6 >> 2] | 0) * 6 | 0) + 4 >> 0] | 0)) {
   i2 = 4;
   break;
  }
  HEAP32[i6 >> 2] = i7 + 1;
 }
 if ((i2 | 0) == 4) {
  HEAP32[i4 >> 2] = HEAP16[41528 + (i7 * 6 | 0) + 2 >> 1];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _getoctchrs() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if (!((HEAP32[i5 >> 2] | 0) < 3 ? (HEAP32[i3 >> 2] | 0) >>> 0 < 32 : 0)) break;
  HEAP32[i4 >> 2] = HEAPU8[HEAP32[26392] >> 0];
  if ((HEAP32[i4 >> 2] | 0) < 48 | (HEAP32[i4 >> 2] | 0) > 55) break;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] << 3;
  i6 = _hex2nr(HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | i6;
  HEAP32[26392] = (HEAP32[26392] | 0) + 1;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i2 >> 2] = -1;
  i7 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i7 | 0;
 } else {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i7 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i7 | 0;
 }
 return 0;
}

function _mch_get_uname(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i10 = i4 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 i3 = _getpwuid(HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i10 >> 2] = i3;
 if (i3 | 0) if (HEAP32[HEAP32[i10 >> 2] >> 2] | 0) if (HEAP8[HEAP32[HEAP32[i10 >> 2] >> 2] >> 0] | 0) {
  _vim_strncpy(HEAP32[i8 >> 2] | 0, HEAP32[HEAP32[i10 >> 2] >> 2] | 0, (HEAP32[i9 >> 2] | 0) - 1 | 0);
  HEAP32[i6 >> 2] = 1;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 i9 = HEAP32[i8 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
 _sprintf(i9, 78969, i5) | 0;
 HEAP32[i6 >> 2] = 0;
 i11 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i4;
 return i11 | 0;
}

function _valid_filetype(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
   i2 = 9;
   break;
  }
  if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 65 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 97 | 0) >>> 0 >= 26) if (((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) if (!(_vim_strchr(64078, HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0)) {
   i2 = 7;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 7) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _get_equi_class(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + 1 >> 0] | 0 | 0) == 61) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 2) >> 0] | 0 | 0) == 61) if ((HEAPU8[(HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 3) >> 0] | 0 | 0) == 93) {
  HEAP32[i5 >> 2] = HEAPU8[(HEAP32[i7 >> 2] | 0) + 2 >> 0];
  i7 = HEAP32[i4 >> 2] | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) + 4);
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i8 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i8 | 0;
}

function _mf_ins_used(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] = 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0)) HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] = i2; else HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) + 16 >> 2] = i2;
 i2 = (HEAP32[i4 >> 2] | 0) + 24 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0);
 i2 = Math_imul(HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 592 >> 2] | 0) | 0;
 HEAP32[27225] = (HEAP32[27225] | 0) + i2;
 STACKTOP = i3;
 return;
}

function _vim_strcat(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = _strlen(HEAP32[i6 >> 2] | 0) | 0;
 i3 = (HEAP32[i5 >> 2] | 0) + (HEAP32[i8 >> 2] | 0) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if (((HEAP32[i8 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) + 1 | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
  _memmove(i3 | 0, i2 | 0, (HEAP32[i7 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) - 1 | 0) | 0;
  HEAP8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i7 >> 2] | 0) - 1) >> 0] = 0;
  STACKTOP = i4;
  return;
 } else {
  _memmove(i3 | 0, i2 | 0, (HEAP32[i9 >> 2] | 0) + 1 | 0) | 0;
  STACKTOP = i4;
  return;
 }
}

function _ex_join(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2];
 do if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) == (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) {
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) >= 2) {
   STACKTOP = i2;
   return;
  }
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) != (HEAP32[HEAP32[26773] >> 2] | 0)) {
   i1 = (HEAP32[i3 >> 2] | 0) + 40 | 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   break;
  }
  _beep_flush();
  STACKTOP = i2;
  return;
 } while (0);
 i1 = HEAP32[i3 >> 2] | 0;
 _do_join((HEAP32[i1 + 40 >> 2] | 0) - (HEAP32[i1 + 36 >> 2] | 0) + 1 | 0, ((HEAP32[i1 + 28 >> 2] | 0) != 0 ^ 1) & 1, 1, 1, 1) | 0;
 _beginline(5);
 _ex_may_print(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _strcasecmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = HEAP8[i1 >> 0] | 0;
 L1 : do if (!(i3 << 24 >> 24)) {
  i4 = i2;
  i5 = 0;
 } else {
  i6 = i1;
  i7 = i2;
  i8 = i3;
  i9 = i3 & 255;
  while (1) {
   i10 = HEAP8[i7 >> 0] | 0;
   if (!(i10 << 24 >> 24)) {
    i4 = i7;
    i5 = i8;
    break L1;
   }
   if (i8 << 24 >> 24 != i10 << 24 >> 24) {
    i10 = _tolower(i9) | 0;
    if ((i10 | 0) != (_tolower(HEAPU8[i7 >> 0] | 0) | 0)) break;
   }
   i10 = i6 + 1 | 0;
   i11 = i7 + 1 | 0;
   i12 = HEAP8[i10 >> 0] | 0;
   if (!(i12 << 24 >> 24)) {
    i4 = i11;
    i5 = 0;
    break L1;
   } else {
    i6 = i10;
    i7 = i11;
    i8 = i12;
    i9 = i12 & 255;
   }
  }
  i4 = i7;
  i5 = HEAP8[i6 >> 0] | 0;
 } while (0);
 i3 = _tolower(i5 & 255) | 0;
 return i3 - (_tolower(HEAPU8[i4 >> 0] | 0) | 0) | 0;
}

function _fmt_u(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295) {
  i4 = i3;
  i5 = i1;
  i6 = i2;
  do {
   i2 = i5;
   i5 = ___udivdi3(i5 | 0, i6 | 0, 10, 0) | 0;
   i7 = i6;
   i6 = tempRet0;
   i8 = ___muldi3(i5 | 0, i6 | 0, 10, 0) | 0;
   i9 = _i64Subtract(i2 | 0, i7 | 0, i8 | 0, tempRet0 | 0) | 0;
   i4 = i4 + -1 | 0;
   HEAP8[i4 >> 0] = i9 & 255 | 48;
  } while (i7 >>> 0 > 9 | (i7 | 0) == 9 & i2 >>> 0 > 4294967295);
  i10 = i5;
  i11 = i4;
 } else {
  i10 = i1;
  i11 = i3;
 }
 if (!i10) i12 = i11; else {
  i3 = i10;
  i10 = i11;
  while (1) {
   i11 = i3;
   i3 = (i3 >>> 0) / 10 | 0;
   i1 = i10 + -1 | 0;
   HEAP8[i1 >> 0] = i11 - (i3 * 10 | 0) | 48;
   if (i11 >>> 0 < 10) {
    i12 = i1;
    break;
   } else i10 = i1;
  }
 }
 return i12 | 0;
}

function _regstack_push(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (((HEAP32[26408] | 0) >>> 10 | 0) >= (HEAP32[26950] | 0)) {
  _emsg(94082) | 0;
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 if (!(_ga_grow(105632, 24) | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  HEAP32[i7 >> 2] = (HEAP32[26412] | 0) + (HEAP32[26408] | 0);
  HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i5 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] = HEAP32[i6 >> 2];
  HEAP32[26408] = (HEAP32[26408] | 0) + 24;
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _process_env(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 20 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3 + 12 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3 + 4 | 0;
 i9 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = _getenv(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = i2;
 if (i2 | 0) if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) {
  if (HEAP32[i6 >> 2] | 0) _vimrc_found(0, 0);
  HEAP32[i8 >> 2] = HEAP32[26731];
  HEAP32[i9 >> 2] = HEAP32[26732];
  HEAP32[26731] = HEAP32[i5 >> 2];
  HEAP32[26732] = 0;
  _do_cmdline_cmd(HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[26731] = HEAP32[i8 >> 2];
  HEAP32[26732] = HEAP32[i9 >> 2];
  HEAP32[i4 >> 2] = 1;
  i10 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i10 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _regnext(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[i4 >> 2] | 0) == (-1 | 0) | (HEAP32[26405] | 0) != 0) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 >> 2] = ((HEAPU8[i1 + 1 >> 0] | 0) << 8) + (HEAPU8[i1 + 2 >> 0] | 0);
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) == 4) {
  HEAP32[i3 >> 2] = i1 + (0 - i7);
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  HEAP32[i3 >> 2] = i1 + i7;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _only_one_window() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i3 >> 2] = 0;
 if (HEAP32[HEAP32[26884] >> 2] | 0) {
  HEAP32[i2 >> 2] = 0;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  do if (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) {
   if (_bt_help(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0) if (!(_bt_help(HEAP32[26773] | 0) | 0)) if ((HEAP32[i4 >> 2] | 0) != (HEAP32[26881] | 0)) break;
   if ((HEAP32[i4 >> 2] | 0) != (HEAP32[27113] | 0)) HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  } while (0);
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 }
 HEAP32[i2 >> 2] = (HEAP32[i3 >> 2] | 0) <= 1 & 1;
 i5 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _mf_trans_del(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _mf_hash_find((HEAP32[i5 >> 2] | 0) + 304 | 0, HEAP32[i6 >> 2] | 0) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 } else {
  i6 = (HEAP32[i5 >> 2] | 0) + 584 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2];
  _mf_hash_rem_item((HEAP32[i5 >> 2] | 0) + 304 | 0, HEAP32[i7 >> 2] | 0);
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 return 0;
}

function _msg_puts_long_len_attr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i9 >> 2] = (HEAP32[10174] | 0) - (HEAP32[27043] | 0);
 if ((HEAP32[i9 >> 2] | 0) >= 20 ? (HEAP32[i6 >> 2] | 0) > (HEAP32[i9 >> 2] | 0) : 0) {
  HEAP32[i8 >> 2] = ((HEAP32[i9 >> 2] | 0) - 3 | 0) / 2 | 0;
  _msg_outtrans_len_attr(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  _msg_puts_attr(97674, HEAP32[27048] | 0);
 }
 i9 = HEAP32[i8 >> 2] | 0;
 _msg_outtrans_len_attr((HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) + (0 - i9) | 0, i9 | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i4;
 return;
}

function _ex_only(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26757] = 1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) <= 0) {
  i6 = HEAP32[i3 >> 2] | 0;
  i7 = i6 + 28 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  _close_others(1, i8);
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 HEAP32[i4 >> 2] = HEAP32[26887];
 while (1) {
  i1 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  HEAP32[i5 >> 2] = i1;
  if ((i1 | 0) <= 0) break;
  if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 }
 _win_goto(HEAP32[i4 >> 2] | 0);
 i6 = HEAP32[i3 >> 2] | 0;
 i7 = i6 + 28 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 _close_others(1, i8);
 STACKTOP = i2;
 return;
}

function _apply_autocmds_retval(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 24 | 0;
 i9 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i11 = i7 + 12 | 0;
 i12 = i7 + 8 | 0;
 i13 = i7 + 4 | 0;
 i14 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i14 >> 2] = _apply_autocmds_group(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, -3, HEAP32[i12 >> 2] | 0, 0) | 0;
 if (!(HEAP32[i14 >> 2] | 0)) {
  i15 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i7;
  return i15 | 0;
 }
 HEAP32[HEAP32[i13 >> 2] >> 2] = 0;
 i15 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i7;
 return i15 | 0;
}

function _gui_clear_block(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _clip_may_clear_selection(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0);
 _gui_mch_clear_block(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 if ((HEAP32[26638] | 0) < (HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[26638] | 0) > (HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[26637] | 0) < (HEAP32[i7 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 if ((HEAP32[26637] | 0) > (HEAP32[i9 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP8[106556] = 0;
 STACKTOP = i5;
 return;
}

function _write_eintr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[i8 >> 2] | 0)) {
   i4 = 7;
   break;
  }
  i3 = HEAP32[i9 >> 2] | 0;
  HEAP32[i10 >> 2] = _write(HEAP32[i6 >> 2] | 0, (HEAP32[i7 >> 2] | 0) + i3 | 0, (HEAP32[i8 >> 2] | 0) - i3 | 0) | 0;
  if ((HEAP32[i10 >> 2] | 0) < 0) {
   if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 4) {
    i4 = 7;
    break;
   }
  } else HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
 }
 if ((i4 | 0) == 7) {
  STACKTOP = i5;
  return HEAP32[i9 >> 2] | 0;
 }
 return 0;
}

function _invoke_edit(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 16 | 0;
 i8 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i10 = i6 + 4 | 0;
 i11 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = 0;
 if (HEAP32[i8 >> 2] | 0) i5 = 3; else if (_stuff_empty() | 0) HEAP32[i11 >> 2] = 0; else i5 = 3;
 if ((i5 | 0) == 3) HEAP32[i11 >> 2] = HEAP32[26806];
 HEAP32[26806] = 0;
 if (_edit(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[(HEAP32[i7 >> 2] | 0) + 28 >> 2] | 0) | 0) {
  i10 = (HEAP32[i7 >> 2] | 0) + 36 | 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
 }
 if (HEAP32[26806] | 0) {
  STACKTOP = i6;
  return;
 }
 HEAP32[26806] = HEAP32[i11 >> 2];
 STACKTOP = i6;
 return;
}

function _changedOneline(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] | 0)) {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = 1;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] = HEAP32[i5 >> 2];
  HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 164 >> 2] = 0;
  STACKTOP = i3;
  return;
 }
 i2 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) < (HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0)) {
  HEAP32[i1 + 156 >> 2] = i2;
  STACKTOP = i3;
  return;
 }
 if ((i2 | 0) < (HEAP32[i1 + 160 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 STACKTOP = i3;
 return;
}

function _get_isolated_shell_name() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i2 >> 2] = _skiptowhite(HEAP32[26977] | 0) | 0;
 i5 = HEAP32[26977] | 0;
 if (!(HEAPU8[HEAP32[i2 >> 2] >> 0] | 0)) {
  HEAP32[i2 >> 2] = _vim_strsave(_gettail(i5) | 0) | 0;
  i6 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = i5;
 HEAP32[i4 >> 2] = HEAP32[26977];
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >>> 0 >= (HEAP32[i2 >> 2] | 0) >>> 0) break;
  if (_vim_ispathsep(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0) HEAP32[i3 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[i2 >> 2] = _vim_strnsave(i4 | 0, (HEAP32[i2 >> 2] | 0) - i4 | 0) | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i6 | 0;
}

function _ex_sleep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_cursor_valid() | 0) {
  i1 = HEAP32[26881] | 0;
  HEAP32[i4 >> 2] = (HEAP32[i1 + 84 >> 2] | 0) + (HEAP32[i1 + 136 >> 2] | 0) - (HEAP32[27044] | 0);
  if ((HEAP32[i4 >> 2] | 0) >= 0) {
   i1 = HEAP32[26881] | 0;
   _windgoto(HEAP32[i4 >> 2] | 0, (HEAP32[i1 + 96 >> 2] | 0) + (HEAP32[i1 + 140 >> 2] | 0) | 0);
  }
 }
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 switch (HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0) {
 case 109:
  break;
 case 0:
  {
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) * 1e3;
   break;
  }
 default:
  {
   _emsg2(92476, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
   STACKTOP = i2;
   return;
  }
 }
 _do_sleep(HEAP32[i5 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _do_exmap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2];
 HEAP32[i6 >> 2] = _get_map_mode(i7, (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0 ? 1 : (HEAP32[i5 >> 2] | 0) != 0) & 1) | 0;
 if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 110) i8 = 2; else i8 = (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) == 117 & 1;
 switch (_do_map(i8, HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) {
 case 1:
  {
   _emsg(92453) | 0;
   STACKTOP = i3;
   return;
  }
 case 2:
  {
   _emsg(HEAP32[i5 >> 2] | 0 ? 92738 : 93010) | 0;
   STACKTOP = i3;
   return;
  }
 default:
  {
   STACKTOP = i3;
   return;
  }
 }
}

function _stl_connected(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2];
 while (1) {
  if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] | 0)) {
   i2 = 8;
   break;
  }
  i5 = (HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0) != 0;
  if ((HEAP8[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] >> 0] | 0) == 2) {
   if (i5) {
    i2 = 8;
    break;
   }
  } else if (i5) {
   i2 = 6;
   break;
  }
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2];
 }
 if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 8) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _nv_gomark(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 103) HEAP32[i5 >> 2] = HEAP32[i1 + 16 >> 2]; else HEAP32[i5 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i4 >> 2] = _getmark(HEAP32[i5 >> 2] | 0, (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) == 0 & 1) | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) != (-1 | 0)) {
  _nv_cursormark(i5, HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0, HEAP32[i4 >> 2] | 0);
  _check_cursor_col();
  STACKTOP = i2;
  return;
 }
 if (HEAP32[i5 + 32 >> 2] | 0) {
  _check_cursor_lnum();
  _beginline(5);
  _check_cursor_col();
  STACKTOP = i2;
  return;
 } else {
  _check_cursor();
  _check_cursor_col();
  STACKTOP = i2;
  return;
 }
}

function _goto_buffer(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 24 | 0;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _set_bufref(i10, HEAP32[26773] | 0);
 HEAP32[26812] = 1;
 i4 = HEAP32[i6 >> 2] | 0;
 _do_buffer((HEAPU8[HEAP32[i4 + 8 >> 2] >> 0] | 0) == 115 ? 1 : 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i4 + 28 >> 2] | 0) | 0;
 if ((HEAP32[26812] | 0) == 2) if ((HEAPU8[HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] >> 0] | 0) == 115) {
  _win_close(HEAP32[26881] | 0, 1) | 0;
  HEAP32[26812] = 0;
  HEAP32[26813] = 1;
  STACKTOP = i5;
  return;
 }
 _handle_swap_exists(i10);
 STACKTOP = i5;
 return;
}

function _buflist_findname_stat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[26772];
 while (1) {
  if (!(HEAP32[i8 >> 2] | 0)) {
   i3 = 7;
   break;
  }
  if (!(HEAP32[(HEAP32[i8 >> 2] | 0) + 60 >> 2] & 128)) if (!(_otherfile_buf(HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0)) {
   i3 = 5;
   break;
  }
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 52 >> 2];
 }
 if ((i3 | 0) == 5) {
  HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else if ((i3 | 0) == 7) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _transchar_hex(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 HEAP8[HEAP32[i4 >> 2] >> 0] = 60;
 i2 = (_nr2hex((HEAP32[i5 >> 2] | 0) >>> 4) | 0) & 255;
 i1 = HEAP32[i4 >> 2] | 0;
 i7 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 HEAP32[i6 >> 2] = i7;
 HEAP8[i1 + i7 >> 0] = i2;
 i2 = (_nr2hex(HEAP32[i5 >> 2] | 0) | 0) & 255;
 i5 = HEAP32[i4 >> 2] | 0;
 i7 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 HEAP32[i6 >> 2] = i7;
 HEAP8[i5 + i7 >> 0] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i7 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 HEAP32[i6 >> 2] = i7;
 HEAP8[i2 + i7 >> 0] = 62;
 i7 = HEAP32[i4 >> 2] | 0;
 i4 = (HEAP32[i6 >> 2] | 0) + 1 | 0;
 HEAP32[i6 >> 2] = i4;
 HEAP8[i7 + i4 >> 0] = 0;
 STACKTOP = i3;
 return;
}

function _print_line_no_prefix(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i4;
 i6 = i4 + 16 | 0;
 i7 = i4 + 12 | 0;
 i8 = i4 + 8 | 0;
 i9 = i4 + 20 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (!(HEAP32[i7 >> 2] | 0 ? 1 : (HEAP32[(HEAP32[26881] | 0) + 200 + 4 >> 2] | 0) != 0)) {
  i10 = HEAP32[i6 >> 2] | 0;
  i11 = _ml_get(i10) | 0;
  i12 = HEAP32[i8 >> 2] | 0;
  _msg_prt_line(i11, i12);
  STACKTOP = i4;
  return;
 }
 i7 = HEAP32[i6 >> 2] | 0;
 HEAP32[i5 >> 2] = 7;
 HEAP32[i5 + 4 >> 2] = i7;
 _vim_snprintf(i9, 30, 74565, i5) | 0;
 _msg_puts_attr(i9, HEAP32[27058] | 0);
 i10 = HEAP32[i6 >> 2] | 0;
 i11 = _ml_get(i10) | 0;
 i12 = HEAP32[i8 >> 2] | 0;
 _msg_prt_line(i11, i12);
 STACKTOP = i4;
 return;
}

function _u_save(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[26840] | 0) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 if ((HEAP32[i5 >> 2] | 0) <= (HEAP32[HEAP32[26773] >> 2] | 0)) if ((HEAP32[i5 >> 2] | 0) < (HEAP32[i6 >> 2] | 0)) if ((HEAP32[i6 >> 2] | 0) <= ((HEAP32[HEAP32[26773] >> 2] | 0) + 1 | 0)) {
  if (((HEAP32[i5 >> 2] | 0) + 2 | 0) == (HEAP32[i6 >> 2] | 0)) _u_saveline((HEAP32[i5 >> 2] | 0) + 1 | 0);
  HEAP32[i4 >> 2] = _u_savecommon(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, 0) | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _msg_putchar_attr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i4 >> 2] | 0) >= 0) {
  HEAP8[i6 >> 0] = HEAP32[i4 >> 2];
  HEAP8[i6 + 1 >> 0] = 0;
  i7 = HEAP32[i5 >> 2] | 0;
  _msg_puts_attr(i6, i7);
  STACKTOP = i3;
  return;
 }
 HEAP8[i6 >> 0] = -128;
 if ((HEAP32[i4 >> 2] | 0) == 128) i8 = 254; else if (!(HEAP32[i4 >> 2] | 0)) i8 = 255; else i8 = 0 - (HEAP32[i4 >> 2] | 0) & 255;
 HEAP8[i6 + 1 >> 0] = i8;
 if ((HEAP32[i4 >> 2] | 0) == 128 | (HEAP32[i4 >> 2] | 0) == 0) i9 = 88; else i9 = (0 - (HEAP32[i4 >> 2] | 0) | 0) >>> 8 & 255;
 HEAP8[i6 + 2 >> 0] = i9;
 HEAP8[i6 + 3 >> 0] = 0;
 i7 = HEAP32[i5 >> 2] | 0;
 _msg_puts_attr(i6, i7);
 STACKTOP = i3;
 return;
}

function _gather_termleader() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = 0;
 if (HEAP32[26627] | 0) {
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i4 + 1;
  HEAP8[113211 + i4 >> 0] = -101;
 }
 HEAP8[113211 + (HEAP32[i3 >> 2] | 0) >> 0] = 0;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[26600] | 0)) break;
  if (!(_vim_strchr(113211, HEAPU8[HEAP32[(HEAP32[26602] | 0) + (HEAP32[i2 >> 2] << 4) + 4 >> 2] >> 0] | 0) | 0)) {
   i4 = HEAP8[HEAP32[(HEAP32[26602] | 0) + (HEAP32[i2 >> 2] << 4) + 4 >> 2] >> 0] | 0;
   i5 = HEAP32[i3 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 1;
   HEAP8[113211 + i5 >> 0] = i4;
   HEAP8[113211 + (HEAP32[i3 >> 2] | 0) >> 0] = 0;
  }
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 HEAP32[26599] = 0;
 STACKTOP = i1;
 return;
}

function _edit_putchar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[26691] | 0)) {
  STACKTOP = i3;
  return;
 }
 _update_topline();
 _validate_cursor();
 if (HEAP32[i5 >> 2] | 0) HEAP32[i6 >> 2] = HEAP32[27048]; else HEAP32[i6 >> 2] = 0;
 i5 = HEAP32[26881] | 0;
 HEAP32[25212] = (HEAP32[i5 + 84 >> 2] | 0) + (HEAP32[i5 + 136 >> 2] | 0);
 HEAP32[25213] = HEAP32[(HEAP32[26881] | 0) + 96 >> 2];
 HEAP32[25213] = (HEAP32[25213] | 0) + (HEAP32[(HEAP32[26881] | 0) + 140 >> 2] | 0);
 _screen_getbytes(HEAP32[25212] | 0, HEAP32[25213] | 0, 110538, 100856);
 HEAP32[25211] = 3;
 _screen_putchar(HEAP32[i4 >> 2] | 0, HEAP32[25212] | 0, HEAP32[25213] | 0, HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _saveRedobuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[25477];
 HEAP32[i1 + 4 >> 2] = HEAP32[25478];
 HEAP32[i1 + 8 >> 2] = HEAP32[25479];
 HEAP32[i1 + 12 >> 2] = HEAP32[25480];
 HEAP32[i1 + 16 >> 2] = HEAP32[25481];
 HEAP32[25477] = 0;
 i1 = (HEAP32[i3 >> 2] | 0) + 20 | 0;
 HEAP32[i1 >> 2] = HEAP32[25629];
 HEAP32[i1 + 4 >> 2] = HEAP32[25630];
 HEAP32[i1 + 8 >> 2] = HEAP32[25631];
 HEAP32[i1 + 12 >> 2] = HEAP32[25632];
 HEAP32[i1 + 16 >> 2] = HEAP32[25633];
 HEAP32[25629] = 0;
 HEAP32[i4 >> 2] = _get_buffcont(HEAP32[i3 >> 2] | 0, 0) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _add_buff(101908, HEAP32[i4 >> 2] | 0, -1);
 _vim_free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ins_ctrl_ey(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 >> 2] = _ins_copychar((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) == 25 ? -1 : 1) | 0) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 if ((HEAP32[i4 >> 2] | 0) < 256) if (!(_isalnum(HEAP32[i4 >> 2] | 0) | 0)) _AppendToRedobuff(42699);
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[26773] | 0) + 708 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 708 >> 2] = -1;
 _insert_special(HEAP32[i4 >> 2] | 0, 1, 0);
 HEAP32[(HEAP32[26773] | 0) + 708 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i4 >> 2] = 22;
 _auto_format(0, 1);
 i6 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _check_readonly(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = i3 + 84 | 0;
 i5 = i3 + 80 | 0;
 i6 = i3 + 76 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 do if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[i6 >> 2] | 0) + 676 >> 2] | 0)) {
   if ((_stat(HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] | 0, i7) | 0) < 0) break;
   if (!(_check_file_readonly(HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] | 0, 511) | 0)) break;
  }
  if (HEAP32[(HEAP32[i6 >> 2] | 0) + 676 >> 2] | 0) _emsg(93541) | 0; else _emsg2(43101, HEAP32[(HEAP32[i6 >> 2] | 0) + 76 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 0;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _get_emsg_lnum() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 i3 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 do if (HEAP32[26731] | 0) {
  i6 = (_other_sourcing_name() | 0) != 0;
  i7 = HEAP32[26732] | 0;
  if (i6) {
   if (!i7) break;
  } else if (!((i7 | 0) != (HEAP32[27229] | 0) & (HEAP32[26732] | 0) != 0)) break;
  HEAP32[i5 >> 2] = 97583;
  HEAP32[i4 >> 2] = _alloc((_strlen(HEAP32[i5 >> 2] | 0) | 0) + 20 | 0) | 0;
  if (HEAP32[i4 >> 2] | 0) {
   i7 = HEAP32[i4 >> 2] | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[26732];
   _sprintf(i7, i6, i2) | 0;
  }
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i1;
  return i8 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 0;
 i8 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i1;
 return i8 | 0;
}

function _post_chdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[26881] | 0) + 196 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[26881] | 0) + 196 >> 2] | 0);
  HEAP32[(HEAP32[26881] | 0) + 196 >> 2] = 0;
 }
 i1 = HEAP32[26857] | 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  if (!i1) {
   _shorten_fnames(1);
   STACKTOP = i2;
   return;
  }
  _vim_free(HEAP32[26857] | 0);
  HEAP32[26857] = 0;
  _shorten_fnames(1);
  STACKTOP = i2;
  return;
 }
 if ((i1 | 0) == 0 & (HEAP32[25234] | 0) != 0) HEAP32[26857] = _vim_strsave(HEAP32[25234] | 0) | 0;
 if ((_mch_dirname(HEAP32[26885] | 0, 4096) | 0) != 1) {
  _shorten_fnames(1);
  STACKTOP = i2;
  return;
 }
 i1 = _vim_strsave(HEAP32[26885] | 0) | 0;
 HEAP32[(HEAP32[26881] | 0) + 196 >> 2] = i1;
 _shorten_fnames(1);
 STACKTOP = i2;
 return;
}

function _mch_has_exp_wildcard(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 while (1) {
  if (!(HEAP8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i2 = 9;
   break;
  }
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 92) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1; else i2 = 6; else i2 = 6;
  if ((i2 | 0) == 6) {
   i2 = 0;
   if (_vim_strchr(72225, HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) | 0) {
    i2 = 7;
    break;
   }
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 7) {
  HEAP32[i4 >> 2] = 1;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 } else if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 return 0;
}

function _has_special_wildchar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 while (1) {
  if (!(HEAP8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i2 = 9;
   break;
  }
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 92) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1; else i2 = 6; else i2 = 6;
  if ((i2 | 0) == 6) {
   i2 = 0;
   if (_vim_strchr(60168, HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) | 0) {
    i2 = 7;
    break;
   }
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 7) {
  HEAP32[i4 >> 2] = 1;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 } else if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 return 0;
}

function _get_recorded() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i2 >> 2] = _get_buffcont(101884, 1) | 0;
 _free_buff(101884);
 HEAP32[i3 >> 2] = _strlen(HEAP32[i2 >> 2] | 0) | 0;
 if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[25476] | 0)) {
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) - (HEAP32[25476] | 0);
  HEAP8[(HEAP32[i2 >> 2] | 0) + (HEAP32[i3 >> 2] | 0) >> 0] = 0;
 }
 if (!((HEAP32[i3 >> 2] | 0) >>> 0 > 0 & (HEAP32[26806] | 0) != 0)) {
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 if ((HEAPU8[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) - 1) >> 0] | 0 | 0) != 15) {
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 HEAP8[(HEAP32[i2 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) - 1) >> 0] = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i4 | 0;
}

function _fmarks_check_one(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if (_vim_fnamecmp(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) | 0) {
  STACKTOP = i4;
  return;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 92 >> 2];
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = 0;
 STACKTOP = i4;
 return;
}

function _check_top_offset() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1 + 16 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1;
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) < ((HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0) + (HEAP32[26971] | 0) | 0)) {
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 >> 2];
  HEAP32[i4 >> 2] = 0;
  while (1) {
   if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26971] | 0)) break;
   _topline_back(i3);
   if ((HEAP32[i3 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) break;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i3 + 4 >> 2] | 0);
  }
  if ((HEAP32[i4 >> 2] | 0) < (HEAP32[26971] | 0)) {
   HEAP32[i2 >> 2] = 1;
   i5 = HEAP32[i2 >> 2] | 0;
   STACKTOP = i1;
   return i5 | 0;
  }
 }
 HEAP32[i2 >> 2] = 0;
 i5 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _has_env_var(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 while (1) {
  if (!(HEAP8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i2 = 9;
   break;
  }
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 92) if (HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0) HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1; else i2 = 6; else i2 = 6;
  if ((i2 | 0) == 6) {
   i2 = 0;
   if (_vim_strchr(94750, HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) | 0) {
    i2 = 7;
    break;
   }
  }
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 7) {
  HEAP32[i4 >> 2] = 1;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 } else if ((i2 | 0) == 9) {
  HEAP32[i4 >> 2] = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 return 0;
}

function _vim_is_xterm(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 79252, 5) | 0)) i6 = 1; else if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71880, 6) | 0)) i6 = 1; else if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71887, 5) | 0)) i6 = 1; else if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71893, 6) | 0)) i6 = 1; else if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71900, 4) | 0)) i6 = 1; else if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 71905, 12) | 0)) i6 = 1; else i6 = (_strcmp(HEAP32[i4 >> 2] | 0, 71918) | 0) == 0;
 HEAP32[i3 >> 2] = i6 & 1;
 i5 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _skip_cmd_arg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 while (1) {
  if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) i6 = (_vim_isspace(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0) != 0 ^ 1; else i6 = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  if (!i6) break;
  do if ((HEAPU8[i7 >> 0] | 0 | 0) == 92) if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (HEAP32[i5 >> 2] | 0) {
    i1 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
    _memmove(i2 | 0, i1 | 0, (_strlen((HEAP32[i4 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
    break;
   } else {
    HEAP32[i4 >> 2] = i2 + 1;
    break;
   }
  } while (0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i3;
 return i7 | 0;
}

function _clip_scroll_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAPU16[54222] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = (HEAP32[27101] | 0) - (HEAP32[i3 >> 2] | 0);
 do if ((HEAP32[i4 >> 2] | 0) <= 0) HEAP32[27101] = 0; else if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26696] | 0)) {
  HEAP16[54222] = 0;
  break;
 } else {
  HEAP32[27101] = HEAP32[i4 >> 2];
  break;
 } while (0);
 HEAP32[i4 >> 2] = (HEAP32[27103] | 0) - (HEAP32[i3 >> 2] | 0);
 if ((HEAP32[i4 >> 2] | 0) < 0) {
  HEAP16[54222] = 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26696] | 0)) {
  HEAP32[27103] = (HEAP32[26696] | 0) - 1;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[27103] = HEAP32[i4 >> 2];
  STACKTOP = i2;
  return;
 }
}

function _vim_strchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 while (1) {
  i6 = HEAPU8[HEAP32[i8 >> 2] >> 0] | 0;
  HEAP32[i9 >> 2] = i6;
  if (!i6) {
   i3 = 6;
   break;
  }
  i10 = HEAP32[i8 >> 2] | 0;
  if ((HEAP32[i9 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) {
   i3 = 4;
   break;
  }
  HEAP32[i8 >> 2] = i10 + 1;
 }
 if ((i3 | 0) == 4) {
  HEAP32[i5 >> 2] = i10;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 } else if ((i3 | 0) == 6) {
  HEAP32[i5 >> 2] = 0;
  i11 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i11 | 0;
 }
 return 0;
}

function _min_rows() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 if (!(HEAP32[26887] | 0)) {
  HEAP32[i2 >> 2] = 2;
  i6 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = _frame_minheight(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0, 0) | 0;
  if ((HEAP32[i3 >> 2] | 0) < (HEAP32[i5 >> 2] | 0)) HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 }
 i4 = _tabline_height() | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i4;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 i6 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i6 | 0;
}

function _hash_add(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _hash_hash(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = _hash_lookup(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 if (HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) if ((HEAP32[(HEAP32[i8 >> 2] | 0) + 4 >> 2] | 0) != 113987) {
  _internal_error(56521);
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i4 >> 2] = _hash_add_item(HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _get_tty_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i3 + 68 | 0;
 i5 = i3 + 64 | 0;
 i6 = i3 + 60 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((_tcgetattr(HEAP32[i5 >> 2] | 0, i7) | 0) == -1) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAPU8[i7 + 17 + 2 >> 0];
 HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = HEAPU8[i7 + 17 >> 0];
 i5 = (HEAP32[i6 >> 2] | 0) + 4 | 0;
 if (HEAP32[i7 >> 2] & 256 | 0) HEAP32[i5 >> 2] = 10; else HEAP32[i5 >> 2] = 13;
 i5 = (HEAP32[i6 >> 2] | 0) + 12 | 0;
 if (HEAP32[i7 + 4 >> 2] & 4 | 0) HEAP32[i5 >> 2] = 1; else HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = 1;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _find_start_of_word(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _ml_get(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = _get_mouse_class((HEAP32[i5 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0) | 0;
 while (1) {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) <= 0) {
   i2 = 5;
   break;
  }
  HEAP32[i7 >> 2] = (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) - 1;
  i1 = _get_mouse_class((HEAP32[i5 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0) | 0;
  if ((i1 | 0) != (HEAP32[i6 >> 2] | 0)) {
   i2 = 5;
   break;
  }
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 }
 if ((i2 | 0) == 5) {
  STACKTOP = i3;
  return;
 }
}

function _fopen_noinh_readbin(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2;
 i5 = i2 + 32 | 0;
 i6 = i2 + 28 | 0;
 i7 = i2 + 24 | 0;
 i8 = i2 + 20 | 0;
 HEAP32[i6 >> 2] = i1;
 i1 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i7 >> 2] = _open(i1, 0, i4) | 0;
 if ((HEAP32[i7 >> 2] | 0) == -1) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i2;
  return i9 | 0;
 }
 HEAP32[i8 >> 2] = _fcntl(HEAP32[i7 >> 2] | 0, 1, i2 + 8 | 0) | 0;
 if ((HEAP32[i8 >> 2] | 0) >= 0) if (!(HEAP32[i8 >> 2] & 1)) {
  i4 = HEAP32[i7 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i8 >> 2] | 1;
  _fcntl(i4, 2, i3) | 0;
 }
 HEAP32[i5 >> 2] = ___fdopen(HEAP32[i7 >> 2] | 0, 94911) | 0;
 i9 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i2;
 return i9 | 0;
}

function _fopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 32 | 0;
 i5 = i3 + 16 | 0;
 i6 = i3;
 if (!(_strchr(100617, HEAP8[i2 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i7 = 0;
 } else {
  i8 = ___fmodeflags(i2) | 0;
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = i8 | 32768;
  HEAP32[i6 + 8 >> 2] = 438;
  i1 = ___syscall_ret(___syscall5(5, i6 | 0) | 0) | 0;
  if ((i1 | 0) < 0) i7 = 0; else {
   if (i8 & 524288 | 0) {
    HEAP32[i5 >> 2] = i1;
    HEAP32[i5 + 4 >> 2] = 2;
    HEAP32[i5 + 8 >> 2] = 1;
    ___syscall221(221, i5 | 0) | 0;
   }
   i5 = ___fdopen(i1, i2) | 0;
   if (!i5) {
    HEAP32[i4 >> 2] = i1;
    ___syscall6(6, i4 | 0) | 0;
    i7 = 0;
   } else i7 = i5;
  }
 }
 STACKTOP = i3;
 return i7 | 0;
}

function _common_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 _init_normal_cmds();
 i1 = _alloc(1025) | 0;
 HEAP32[26882] = i1;
 if (!i1) i2 = 3; else {
  i1 = _alloc(4096) | 0;
  HEAP32[26885] = i1;
  if (!i1) i2 = 3;
 }
 if ((i2 | 0) == 3) _mch_exit(0);
 _init_locale();
 HEAP32[26631] = 1;
 _early_arg_scan(HEAP32[i4 >> 2] | 0);
 i2 = HEAP32[i4 >> 2] | 0;
 _gui_prepare(i2 | 0, HEAP32[i2 + 4 >> 2] | 0);
 _clip_init(0);
 HEAP32[10178] = (_mch_check_win(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0) != 0 & 1;
 if (!(_win_alloc_first() | 0)) _mch_exit(0);
 _init_yank();
 _alist_init(107472);
 HEAP32[26874] = 0;
 _init_homedir();
 _set_init_1(HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _goto_tabpage_tp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _set_keep_msg(0, 0);
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26886] | 0)) {
  STACKTOP = i4;
  return;
 }
 if ((_leave_tabpage(HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) != 1) {
  STACKTOP = i4;
  return;
 }
 if (_valid_tabpage(HEAP32[i5 >> 2] | 0) | 0) {
  _enter_tabpage(HEAP32[i5 >> 2] | 0, HEAP32[26773] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  STACKTOP = i4;
  return;
 } else {
  _enter_tabpage(HEAP32[26886] | 0, HEAP32[26773] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
  STACKTOP = i4;
  return;
 }
}

function _FullName_save(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i7 >> 2] = _alloc(4096) | 0;
 if (HEAP32[i7 >> 2] | 0) {
  if (_vim_FullName(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0, 4096, HEAP32[i6 >> 2] | 0) | 0) HEAP32[i8 >> 2] = _vim_strsave(HEAP32[i7 >> 2] | 0) | 0; else HEAP32[i8 >> 2] = _vim_strsave(HEAP32[i5 >> 2] | 0) | 0;
  _vim_free(HEAP32[i7 >> 2] | 0);
 }
 HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _clip_compare_pos(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 do if ((HEAP32[i7 >> 2] | 0) > (HEAP32[i9 >> 2] | 0)) HEAP32[i6 >> 2] = 1; else {
  if ((HEAP32[i7 >> 2] | 0) < (HEAP32[i9 >> 2] | 0)) {
   HEAP32[i6 >> 2] = -1;
   break;
  }
  if ((HEAP32[i8 >> 2] | 0) > (HEAP32[i10 >> 2] | 0)) {
   HEAP32[i6 >> 2] = 1;
   break;
  }
  if ((HEAP32[i8 >> 2] | 0) < (HEAP32[i10 >> 2] | 0)) {
   HEAP32[i6 >> 2] = -1;
   break;
  } else {
   HEAP32[i6 >> 2] = 0;
   break;
  }
 } while (0);
 STACKTOP = i5;
 return HEAP32[i6 >> 2] | 0;
}

function _prepare_help_buffer() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[(HEAP32[26773] | 0) + 780 >> 2] = 1;
 HEAP32[i2 >> 2] = 43241;
 if (_strcmp(HEAP32[(HEAP32[26773] | 0) + 640 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) {
  _set_string_option_direct(67524, -1, HEAP32[i2 >> 2] | 0, 5, 0);
  _check_buf_options(HEAP32[26773] | 0);
  _buf_init_chartab(HEAP32[26773] | 0, 0) | 0;
 }
 HEAP32[(HEAP32[26773] | 0) + 700 >> 2] = 8;
 HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = 0;
 HEAP32[(HEAP32[26773] | 0) + 664 >> 2] = 0;
 HEAP32[(HEAP32[26773] | 0) + 584 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 200 + 4 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 200 + 8 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 200 + 24 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 200 + 40 >> 2] = 0;
 _set_buflisted(0);
 STACKTOP = i1;
 return;
}

function _dis_msg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = (HEAP32[10174] | 0) - 6;
 while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i3 = 7;
   break;
  }
  if (HEAP32[i6 >> 2] | 0 ? (HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 27 : 0) if (!(HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0)) {
   i3 = 7;
   break;
  }
  i2 = _ptr2cells(HEAP32[i5 >> 2] | 0) | 0;
  i1 = (HEAP32[i7 >> 2] | 0) - i2 | 0;
  HEAP32[i7 >> 2] = i1;
  if ((i1 | 0) < 0) {
   i3 = 7;
   break;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i1 + 1;
  _msg_outtrans_len(i1, 1) | 0;
 }
 if ((i3 | 0) == 7) {
  _ui_breakcheck();
  STACKTOP = i4;
  return;
 }
}

function _ml_append(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 if (!(HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0)) if (!(_open_buffer(0, 0, 0) | 0)) {
  HEAP32[i6 >> 2] = 0;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 if (HEAP32[(HEAP32[26773] | 0) + 24 >> 2] | 0) _ml_flush_line(HEAP32[26773] | 0);
 HEAP32[i6 >> 2] = _ml_append_int(HEAP32[26773] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, 0) | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _ex_hide(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26757] = 1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) {
  _win_close(HEAP32[26881] | 0, 0) | 0;
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  if ((HEAP32[i4 >> 2] | 0) == (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
 }
 if (!(HEAP32[i5 >> 2] | 0)) HEAP32[i5 >> 2] = HEAP32[27112];
 _win_close(HEAP32[i5 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return;
}

function _mf_put(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i10 >> 2] = HEAP8[(HEAP32[i7 >> 2] | 0) + 28 >> 0];
 if (!(HEAP32[i10 >> 2] & 2)) _iemsg(97419);
 HEAP32[i10 >> 2] = HEAP32[i10 >> 2] & -3;
 if (HEAP32[i8 >> 2] | 0) {
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | 1;
  HEAP32[(HEAP32[i6 >> 2] | 0) + 596 >> 2] = 1;
 }
 HEAP8[(HEAP32[i7 >> 2] | 0) + 28 >> 0] = HEAP32[i10 >> 2];
 if (!(HEAP32[i9 >> 2] | 0)) {
  STACKTOP = i5;
  return;
 }
 _mf_trans_add(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i5;
 return;
}

function _add_bufnum(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = 0;
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) >= (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[i9 >> 2] << 2) >> 2] | 0) == (HEAP32[i8 >> 2] | 0)) {
   i4 = 6;
   break;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 }
 if ((i4 | 0) == 6) {
  STACKTOP = i5;
  return;
 }
 HEAP32[(HEAP32[i6 >> 2] | 0) + (HEAP32[HEAP32[i7 >> 2] >> 2] << 2) >> 2] = HEAP32[i8 >> 2];
 HEAP32[HEAP32[i7 >> 2] >> 2] = (HEAP32[HEAP32[i7 >> 2] >> 2] | 0) + 1;
 STACKTOP = i5;
 return;
}

function _u_saveline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) < 1 ? 1 : (HEAP32[i3 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 544 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _u_clearline();
 HEAP32[(HEAP32[26773] | 0) + 544 >> 2] = HEAP32[i3 >> 2];
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) HEAP32[(HEAP32[26773] | 0) + 548 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2]; else HEAP32[(HEAP32[26773] | 0) + 548 >> 2] = 0;
 i1 = _u_save_line(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[(HEAP32[26773] | 0) + 540 >> 2] = i1;
 if (i1 | 0) {
  STACKTOP = i2;
  return;
 }
 _do_outofmem_msg(0);
 STACKTOP = i2;
 return;
}

function _buflist_findnr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 16 | 0;
 i7 = i2 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 if (!(HEAP32[i5 >> 2] | 0)) HEAP32[i5 >> 2] = HEAP32[(HEAP32[26881] | 0) + 180 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 _sprintf(i6, 41824, i3) | 0;
 HEAP32[i7 >> 2] = _hash_find(100636, i6) | 0;
 if (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) != 113987) {
  i6 = HEAP32[26773] | 0;
  HEAP32[i4 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + (0 - ((i6 | 0) + 96 - (i6 | 0)));
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i8 | 0;
}

function _msg_trunc_attr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 _add_msg_hist(HEAP32[i6 >> 2] | 0, -1, HEAP32[i8 >> 2] | 0);
 HEAP32[i6 >> 2] = _msg_may_trunc(HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[26716] = 1;
 HEAP32[i9 >> 2] = _msg_attr(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 HEAP32[26716] = 0;
 if (HEAP32[i9 >> 2] | 0) {
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } else {
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 return 0;
}

function _getdecchrs() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 12 | 0;
 i3 = i1 + 8 | 0;
 i4 = i1 + 4 | 0;
 i5 = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  HEAP32[i4 >> 2] = HEAPU8[HEAP32[26392] >> 0];
  if ((HEAP32[i4 >> 2] | 0) < 48 | (HEAP32[i4 >> 2] | 0) > 57) break;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) * 10;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) - 48);
  HEAP32[26392] = (HEAP32[26392] | 0) + 1;
  HEAP32[26398] = -1;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i2 >> 2] = -1;
  i6 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i6 | 0;
 } else {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i6 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i6 | 0;
 }
 return 0;
}

function _nv_compare(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[13020 + ((HEAP16[HEAP32[i4 >> 2] >> 1] | 0) * 12 | 0) >> 2];
 HEAP32[i7 >> 2] = HEAP32[13020 + ((HEAP16[HEAP32[i5 >> 2] >> 1] | 0) * 12 | 0) >> 2];
 if ((HEAP32[i6 >> 2] | 0) < 0) HEAP32[i6 >> 2] = 0 - (HEAP32[i6 >> 2] | 0);
 if ((HEAP32[i7 >> 2] | 0) >= 0) {
  i8 = HEAP32[i6 >> 2] | 0;
  i9 = HEAP32[i7 >> 2] | 0;
  i10 = i8 - i9 | 0;
  STACKTOP = i3;
  return i10 | 0;
 }
 HEAP32[i7 >> 2] = 0 - (HEAP32[i7 >> 2] | 0);
 i8 = HEAP32[i6 >> 2] | 0;
 i9 = HEAP32[i7 >> 2] | 0;
 i10 = i8 - i9 | 0;
 STACKTOP = i3;
 return i10 | 0;
}

function _scroll_region_set(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 84 >> 2] | 0;
 _out_str(_tgoto(HEAP32[26525] | 0, i1 + (HEAP32[i2 + 88 >> 2] | 0) - 1 | 0, i1 + (HEAP32[i5 >> 2] | 0) | 0) | 0);
 if (!(HEAPU8[HEAP32[26587] >> 0] | 0)) {
  _screen_start();
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0) == (HEAP32[10174] | 0)) {
  _screen_start();
  STACKTOP = i3;
  return;
 }
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] | 0;
 _out_str(_tgoto(HEAP32[26587] | 0, i1 + (HEAP32[i5 + 100 >> 2] | 0) - 1 | 0, i1 | 0) | 0);
 _screen_start();
 STACKTOP = i3;
 return;
}

function _gui_mch_init_font(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 if (!(_strcmp(HEAP32[i5 >> 2] | 0, 84483) | 0)) {
  HEAP32[i4 >> 2] = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 if (!(HEAP32[i5 >> 2] | 0)) HEAP32[i5 >> 2] = 84485;
 _vimwasm_set_font(HEAP32[i5 >> 2] | 0);
 HEAP32[26670] = _vim_strsave(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[26665] = _vimwasm_get_char_width() | 0;
 HEAP32[26666] = _vimwasm_get_char_height() | 0;
 HEAP32[26667] = _vimwasm_get_char_ascent() | 0;
 i5 = _vimwasm_get_win_width() | 0;
 _gui_resize_shell(i5, _vimwasm_get_win_height() | 0);
 HEAP32[i4 >> 2] = 1;
 i6 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i6 | 0;
}

function ___overflow(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 i6 = i2 & 255;
 HEAP8[i5 >> 0] = i6;
 i7 = i1 + 16 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!i8) if (!(___towrite(i1) | 0)) {
  i9 = HEAP32[i7 >> 2] | 0;
  i3 = 4;
 } else i10 = -1; else {
  i9 = i8;
  i3 = 4;
 }
 do if ((i3 | 0) == 4) {
  i8 = i1 + 20 | 0;
  i7 = HEAP32[i8 >> 2] | 0;
  if (i7 >>> 0 < i9 >>> 0) {
   i11 = i2 & 255;
   if ((i11 | 0) != (HEAP8[i1 + 75 >> 0] | 0)) {
    HEAP32[i8 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i6;
    i10 = i11;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 15](i1, i5, 1) | 0) == 1) i10 = HEAPU8[i5 >> 0] | 0; else i10 = -1;
 } while (0);
 STACKTOP = i4;
 return i10 | 0;
}

function _win_totop(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[26881] | 0) + 88 >> 2];
 if ((HEAP32[26887] | 0) == (HEAP32[27112] | 0)) {
  _beep_flush();
  STACKTOP = i3;
  return;
 }
 _winframe_remove(HEAP32[26881] | 0, i6, 0) | 0;
 _win_remove(HEAP32[26881] | 0, 0);
 _last_status(0);
 _win_comp_pos() | 0;
 _win_split_ins(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[26881] | 0, HEAP32[i6 >> 2] | 0) | 0;
 if (!(HEAP32[i5 >> 2] & 2)) {
  _win_setheight(HEAP32[i7 >> 2] | 0);
  if (HEAP32[26911] | 0) _win_equal(HEAP32[26881] | 0, 1, 118);
 }
 _gui_may_update_scrollbars();
 STACKTOP = i3;
 return;
}

function _shorten_fname1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i5 >> 2] = _alloc(4096) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 do if ((_mch_dirname(HEAP32[i5 >> 2] | 0, 4096) | 0) == 1) {
  HEAP32[i6 >> 2] = _shorten_fname(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  if (HEAP32[i6 >> 2] | 0) if (HEAPU8[HEAP32[i6 >> 2] >> 0] | 0 | 0) break;
  HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 } while (0);
 _vim_free(HEAP32[i5 >> 2] | 0);
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _n_opencmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 if ((_u_save((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) - ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 79 ? 1 : 0) | 0, (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) + ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 111 ? 1 : 0) | 0) | 0) != 1) {
  STACKTOP = i2;
  return;
 }
 if ((_open_line((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 79 ? -1 : 1, 0, 0) | 0) != 1) {
  STACKTOP = i2;
  return;
 }
 if (_vim_strchr(HEAP32[26904] | 0, 35) | 0) HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = 1;
 i1 = HEAP32[i3 >> 2] | 0;
 _invoke_edit(i1 | 0, 0, HEAP32[i1 + 8 >> 2] | 0, 1);
 STACKTOP = i2;
 return;
}

function _vim_snprintf_add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 40 | 0;
 i7 = i5 + 36 | 0;
 i8 = i5 + 32 | 0;
 i9 = i5 + 16 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 i12 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i11 >> 2] = _strlen(HEAP32[i6 >> 2] | 0) | 0;
 if ((HEAP32[i7 >> 2] | 0) >>> 0 <= (HEAP32[i11 >> 2] | 0) >>> 0) HEAP32[i12 >> 2] = 0; else HEAP32[i12 >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[i11 >> 2] | 0);
 HEAP32[i9 >> 2] = i4;
 HEAP32[i10 >> 2] = _vim_vsnprintf((HEAP32[i6 >> 2] | 0) + (HEAP32[i11 >> 2] | 0) | 0, HEAP32[i12 >> 2] | 0, HEAP32[i8 >> 2] | 0, i9) | 0;
 STACKTOP = i5;
 return HEAP32[i10 >> 2] | 0;
}

function _nfa_re_num_cmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if ((HEAP32[i7 >> 2] | 0) == 1) {
  HEAP32[i5 >> 2] = (HEAP32[i8 >> 2] | 0) >>> 0 > (HEAP32[i6 >> 2] | 0) >>> 0 & 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 if ((HEAP32[i7 >> 2] | 0) == 2) {
  HEAP32[i5 >> 2] = (HEAP32[i8 >> 2] | 0) >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0 & 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else {
  HEAP32[i5 >> 2] = (HEAP32[i6 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) & 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _gui_mch_wait_for_chars(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 10;
 while (1) {
  if (_input_available() | 0) {
   i2 = 3;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0);
  if ((HEAP32[i5 >> 2] | 0) >= 0) if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) {
   i2 = 6;
   break;
  }
  _emscripten_sleep(HEAP32[i7 >> 2] | 0);
 }
 if ((i2 | 0) == 3) {
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _ex_mark(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0)) {
  _emsg(92160) | 0;
  STACKTOP = i2;
  return;
 }
 if (HEAPU8[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 1 >> 0] | 0 | 0) {
  _emsg(93844) | 0;
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 _beginline(5);
 if (!(_setmark(HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0) | 0)) _emsg(50689) | 0;
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 STACKTOP = i2;
 return;
}

function _char_needs_redraw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 do if ((HEAP32[i8 >> 2] | 0) > 0) {
  if ((HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) == (HEAPU8[(HEAP32[26691] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0 | 0)) if ((HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i6 >> 2] << 1) >> 1] | 0 | 0) == (HEAPU16[(HEAP32[26692] | 0) + (HEAP32[i7 >> 2] << 1) >> 1] | 0 | 0)) break;
  HEAP32[i5 >> 2] = 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } while (0);
 HEAP32[i5 >> 2] = 0;
 i9 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _win_split(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((_may_open_tabpage() | 0) == 1) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | HEAP32[27128];
 if (HEAP32[i6 >> 2] & 4 | 0) if (HEAP32[i6 >> 2] & 8 | 0) {
  _emsg(84115) | 0;
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 if (HEAP32[i6 >> 2] & 16 | 0) _make_snapshot(0); else _clear_snapshot(HEAP32[26886] | 0, 0);
 HEAP32[i4 >> 2] = _win_split_ins(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, 0) | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _find_key_option(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) == 116) if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0) == 95) if (HEAPU8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] | 0) if (HEAPU8[(HEAP32[i3 >> 2] | 0) + 3 >> 0] | 0) {
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = 0 - ((HEAPU8[i1 + 2 >> 0] | 0) + (HEAPU8[i1 + 3 >> 0] << 8));
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + -1;
 HEAP32[i5 >> 2] = 0;
 i1 = _find_special_key(i3, i5, 1, 1, 0) | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2] | 0 ? 0 : i1;
 i6 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _del_trailing_spaces(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 >> 2] = i1 + (_strlen(HEAP32[i4 >> 2] | 0) | 0);
 while (1) {
  i1 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  HEAP32[i5 >> 2] = i1;
  if (i1 >>> 0 <= (HEAP32[i4 >> 2] | 0) >>> 0) {
   i2 = 8;
   break;
  }
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 32) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 9) {
   i2 = 8;
   break;
  }
  if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + -1 >> 0] | 0 | 0) == 92) {
   i2 = 8;
   break;
  }
  if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + -1 >> 0] | 0 | 0) == 22) {
   i2 = 8;
   break;
  }
  HEAP8[HEAP32[i5 >> 2] >> 0] = 0;
 }
 if ((i2 | 0) == 8) {
  STACKTOP = i3;
  return;
 }
}

function _check_pos(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) > (HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = _ml_get_buf(HEAP32[i4 >> 2] | 0, HEAP32[HEAP32[i5 >> 2] >> 2] | 0, 0) | 0;
 HEAP32[i7 >> 2] = _strlen(HEAP32[i6 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) <= (HEAP32[i7 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 STACKTOP = i3;
 return;
}

function _coll_get_char() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = -1;
 i3 = HEAP32[26392] | 0;
 HEAP32[26392] = i3 + 1;
 switch (HEAPU8[i3 >> 0] | 0 | 0) {
 case 100:
  {
   HEAP32[i2 >> 2] = _getdecchrs() | 0;
   break;
  }
 case 111:
  {
   HEAP32[i2 >> 2] = _getoctchrs() | 0;
   break;
  }
 case 120:
  {
   HEAP32[i2 >> 2] = _gethexchrs(2) | 0;
   break;
  }
 case 117:
  {
   HEAP32[i2 >> 2] = _gethexchrs(4) | 0;
   break;
  }
 case 85:
  {
   HEAP32[i2 >> 2] = _gethexchrs(8) | 0;
   break;
  }
 default:
  {}
 }
 if ((HEAP32[i2 >> 2] | 0) >= 0) {
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 HEAP32[26392] = (HEAP32[26392] | 0) + -1;
 HEAP32[i2 >> 2] = 92;
 i4 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i4 | 0;
}

function _copy_ze_off(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[26327] | 0)) {
  STACKTOP = i3;
  return;
 }
 i2 = (HEAP32[i5 >> 2] | 0) + 4 | 0;
 if (!(HEAP32[26312] | 0)) {
  if ((HEAP32[i2 + 4 >> 2] | 0) < 0) {
   STACKTOP = i3;
   return;
  }
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 + 4 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 + 4 >> 2];
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 + 12 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 + 12 >> 2];
  STACKTOP = i3;
  return;
 } else {
  if (!(HEAP32[i2 + 4 >> 2] | 0)) {
   STACKTOP = i3;
   return;
  }
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 + 4 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 + 4 >> 2];
  STACKTOP = i3;
  return;
 }
}

function _buflist_name_nr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = _buflist_findnr(HEAP32[i6 >> 2] | 0) | 0;
 if (HEAP32[i9 >> 2] | 0) if (HEAP32[(HEAP32[i9 >> 2] | 0) + 76 >> 2] | 0) {
  HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + 76 >> 2];
  i7 = _buflist_findlnum(HEAP32[i9 >> 2] | 0) | 0;
  HEAP32[HEAP32[i8 >> 2] >> 2] = i7;
  HEAP32[i5 >> 2] = 1;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _cycle(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i5 = i4;
 L1 : do if ((i3 | 0) >= 2) {
  i6 = i2 + (i3 << 2) | 0;
  HEAP32[i6 >> 2] = i5;
  if (i1 | 0) {
   i7 = i1;
   i8 = i5;
   while (1) {
    i9 = i7 >>> 0 < 256 ? i7 : 256;
    _memcpy(i8 | 0, HEAP32[i2 >> 2] | 0, i9 | 0) | 0;
    i10 = 0;
    do {
     i11 = i2 + (i10 << 2) | 0;
     i10 = i10 + 1 | 0;
     _memcpy(HEAP32[i11 >> 2] | 0, HEAP32[i2 + (i10 << 2) >> 2] | 0, i9 | 0) | 0;
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i9;
    } while ((i10 | 0) != (i3 | 0));
    i10 = i7 - i9 | 0;
    if (!i10) break L1;
    i7 = i10;
    i8 = HEAP32[i6 >> 2] | 0;
   }
  }
 } while (0);
 STACKTOP = i4;
 return;
}

function _adjust_clip_reg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 do if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) if ((HEAP32[26762] | 0) != 0 | (HEAP32[26767] | 0) != 0) if (HEAP32[26762] | 0) {
  HEAP32[HEAP32[i3 >> 2] >> 2] = (HEAP32[26762] & 2 | 0 ? (HEAP32[27099] | 0) != 0 : 0) ? 43 : 42;
  break;
 } else {
  HEAP32[HEAP32[i3 >> 2] >> 2] = (HEAP32[26767] & 2 | 0 ? (HEAP32[27099] | 0) != 0 : 0) ? 43 : 42;
  break;
 } while (0);
 if (!(HEAP32[27099] | 0)) if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) == 42) HEAP32[HEAP32[i3 >> 2] >> 2] = 0;
 if (HEAP32[27099] | 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) != 43) {
  STACKTOP = i2;
  return;
 }
 HEAP32[HEAP32[i3 >> 2] >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _free_termoptions() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = 15328;
 while (1) {
  if (!(HEAP32[HEAP32[i2 >> 2] >> 2] | 0)) break;
  if (_istermoption(HEAP32[i2 >> 2] | 0) | 0) {
   if (HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 8 | 0) _free_string_option(HEAP32[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] >> 2] | 0);
   if (HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] & 128 | 0) _free_string_option(HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] | 0);
   HEAP32[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] >> 2] = 114072;
   HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] = 114072;
   i3 = (HEAP32[i2 >> 2] | 0) + 8 | 0;
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -137;
  }
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 28;
 }
 _clear_termcodes();
 STACKTOP = i1;
 return;
}

function _inindent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i5 >> 2] = _ml_get_curline() | 0;
 while (1) {
  if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 32) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 9) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 if ((HEAP32[i6 >> 2] | 0) >= ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) | 0)) {
  HEAP32[i3 >> 2] = 1;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 } else {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 return 0;
}

function _vim_strbyte(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i8 >> 2] >> 0] | 0)) {
   i3 = 6;
   break;
  }
  i9 = HEAP32[i8 >> 2] | 0;
  if ((HEAPU8[HEAP32[i8 >> 2] >> 0] | 0 | 0) == (HEAP32[i7 >> 2] | 0)) {
   i3 = 4;
   break;
  }
  HEAP32[i8 >> 2] = i9 + 1;
 }
 if ((i3 | 0) == 4) {
  HEAP32[i5 >> 2] = i9;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } else if ((i3 | 0) == 6) {
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 return 0;
}

function _buflist_nr2name(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = _buflist_findnr(HEAP32[i6 >> 2] | 0) | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 0;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 i6 = HEAP32[i9 >> 2] | 0;
 if (HEAP32[i7 >> 2] | 0) i11 = HEAP32[i6 + 68 >> 2] | 0; else i11 = HEAP32[i6 + 76 >> 2] | 0;
 HEAP32[i5 >> 2] = _home_replace_save(HEAP32[i8 >> 2] | 0 ? HEAP32[i9 >> 2] | 0 : 0, i11) | 0;
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _have_wildcard(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
   i3 = 6;
   break;
  }
  if (_mch_has_wildcard(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0) | 0) {
   i3 = 4;
   break;
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 4) {
  HEAP32[i5 >> 2] = 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else if ((i3 | 0) == 6) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _get_number_arg(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if (!(_vim_isdigit(HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) >> 0] | 0) | 0)) {
  i8 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i4;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = _atoi((HEAP32[i5 >> 2] | 0) + (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0) | 0;
 while (1) {
  if (!(_vim_isdigit(HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) >> 0] | 0) | 0)) break;
  HEAP32[HEAP32[i6 >> 2] >> 2] = (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 1;
 }
 i8 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i4;
 return i8 | 0;
}

function _ex_next(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(_buf_hide(HEAP32[26773] | 0) | 0)) if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) != 404) if (_check_changed(HEAP32[26773] | 0, 1 | (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0 ? 4 : 0) | 16) | 0) {
  STACKTOP = i2;
  return;
 }
 do if (HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0 | 0) if (!(_do_arglist(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 1, 0) | 0)) {
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i4 >> 2] = 0;
  break;
 } else HEAP32[i4 >> 2] = (HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) + (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0); while (0);
 _do_argfile(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = 0;
 i3 = i1;
 L1 : do if (!(i3 & 3)) {
  i4 = i1;
  i2 = 5;
 } else {
  i5 = i1;
  i6 = i3;
  while (1) {
   if (!(HEAP8[i5 >> 0] | 0)) {
    i7 = i6;
    break L1;
   }
   i8 = i5 + 1 | 0;
   i6 = i8;
   if (!(i6 & 3)) {
    i4 = i8;
    i2 = 5;
    break;
   } else i5 = i8;
  }
 } while (0);
 if ((i2 | 0) == 5) {
  i2 = i4;
  while (1) {
   i9 = HEAP32[i2 >> 2] | 0;
   if (!((i9 & -2139062144 ^ -2139062144) & i9 + -16843009)) i2 = i2 + 4 | 0; else break;
  }
  if (!((i9 & 255) << 24 >> 24)) i10 = i2; else {
   i9 = i2;
   while (1) {
    i2 = i9 + 1 | 0;
    if (!(HEAP8[i2 >> 0] | 0)) {
     i10 = i2;
     break;
    } else i9 = i2;
   }
  }
  i7 = i10;
 }
 return i7 - i3 | 0;
}

function _have_dollars(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i8 >> 2] | 0) >= (HEAP32[i6 >> 2] | 0)) {
   i3 = 6;
   break;
  }
  if (_vim_strchr(HEAP32[(HEAP32[i7 >> 2] | 0) + (HEAP32[i8 >> 2] << 2) >> 2] | 0, 36) | 0) {
   i3 = 4;
   break;
  }
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 if ((i3 | 0) == 4) {
  HEAP32[i5 >> 2] = 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else if ((i3 | 0) == 6) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _mf_alloc_bhdr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = _alloc(32) | 0;
 HEAP32[i7 >> 2] = i2;
 do if (i2 | 0) {
  i1 = _alloc(Math_imul(HEAP32[(HEAP32[i5 >> 2] | 0) + 592 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] = i1;
  if (i1 | 0) {
   HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] = HEAP32[i6 >> 2];
   break;
  }
  _vim_free(HEAP32[i7 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } while (0);
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _win_append(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[26887]; else HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = HEAP32[i6 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = HEAP32[i4 >> 2];
 i2 = HEAP32[i5 >> 2] | 0;
 if (!(HEAP32[i4 >> 2] | 0)) HEAP32[26887] = i2; else HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[27112] = i2;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] = i2;
  STACKTOP = i3;
  return;
 }
}

function _version_msg_wrap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _vim_strsize(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i2 + (HEAP32[i5 >> 2] | 0 ? 2 : 0);
 if (!(HEAP32[26834] | 0)) if ((HEAP32[i6 >> 2] | 0) < (HEAP32[10174] | 0)) if (((HEAP32[27043] | 0) + (HEAP32[i6 >> 2] | 0) | 0) >= (HEAP32[10174] | 0)) if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 10) _msg_putchar(10);
 if (HEAP32[26834] | 0) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[i5 >> 2] | 0) _msg_puts(81639);
 _msg_puts(HEAP32[i4 >> 2] | 0);
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _msg_puts(81641);
 STACKTOP = i3;
 return;
}

function _get_flags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  if (!(_vim_strchr(46543, HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0) | 0)) break;
  i1 = HEAP32[i3 >> 2] | 0;
  do if ((HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0 | 0) == 108) {
   i4 = i1 + 48 | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  } else {
   i4 = (HEAP32[i3 >> 2] | 0) + 48 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((HEAPU8[HEAP32[i1 >> 2] >> 0] | 0 | 0) == 112) {
    HEAP32[i4 >> 2] = i5 | 4;
    break;
   } else {
    HEAP32[i4 >> 2] = i5 | 2;
    break;
   }
  } while (0);
  i1 = _skipwhite((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 1 | 0) | 0;
  HEAP32[HEAP32[i3 >> 2] >> 2] = i1;
 }
 STACKTOP = i2;
 return;
}

function _del_termcode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[26602] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26599] = 1;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[26600] | 0)) {
   i2 = 8;
   break;
  }
  if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i5 >> 2] << 4) >> 0] | 0 | 0) == (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[26602] | 0) + (HEAP32[i5 >> 2] << 4) + 1 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0)) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 if ((i2 | 0) == 8) {
  STACKTOP = i3;
  return;
 }
 _del_termcode_idx(HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _redraw_block(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _clip_may_clear_selection(HEAP32[i5 >> 2] | 0, (HEAP32[i6 >> 2] | 0) - 1 | 0);
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = HEAP32[10174];
 } else {
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 96 >> 2];
  HEAP32[i9 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 100 >> 2];
 }
 i7 = HEAP32[i5 >> 2] | 0;
 _screen_draw_rectangle(i7 | 0, HEAP32[i8 >> 2] | 0, (HEAP32[i6 >> 2] | 0) - i7 | 0, HEAP32[i9 >> 2] | 0, 0);
 STACKTOP = i4;
 return;
}

function _msg_start() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = 0;
 if ((HEAP32[26809] | 0) == 0 & (HEAP32[26706] | 0) != 0) {
  _vim_free(HEAP32[26706] | 0);
  HEAP32[26706] = 0;
 }
 if (HEAP32[26710] | 0) i1 = 6; else if (HEAP32[26781] | 0) {
  HEAP32[26877] = HEAP32[26876];
  HEAP32[27043] = 0;
 } else i1 = 6;
 if ((i1 | 0) == 6) if (HEAP32[26711] | 0) {
  _msg_putchar(10);
  HEAP32[i3 >> 2] = 1;
  if ((HEAP32[26798] | 0) != 1) HEAP32[26876] = HEAP32[26877];
 }
 if ((HEAP32[26712] | 0) == 0 | (HEAP32[10176] | 0) < 0) _msg_starthere();
 if (!(HEAP32[26809] | 0)) {
  HEAP32[26711] = 0;
  _cursor_off();
 }
 if (HEAP32[i3 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 _redir_write(97581, -1);
 STACKTOP = i2;
 return;
}

function _coladvance(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _getvpos((HEAP32[26881] | 0) + 24 | 0, HEAP32[i3 >> 2] | 0) | 0;
 if ((HEAP32[i3 >> 2] | 0) == 2147483647 | (HEAP32[i4 >> 2] | 0) == 0) {
  i1 = (HEAP32[26881] | 0) + 108 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -5;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((HEAPU8[(_ml_get_cursor() | 0) >> 0] | 0 | 0) == 9) {
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 i1 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 4;
 HEAP32[(HEAP32[26881] | 0) + 132 >> 2] = HEAP32[i3 >> 2];
 i5 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _swapchars(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = HEAP32[i8 >> 2];
 while (1) {
  if ((HEAP32[i9 >> 2] | 0) <= 0) {
   i4 = 5;
   break;
  }
  i8 = _swapchar(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | i8;
  if ((_inc(HEAP32[i7 >> 2] | 0) | 0) == -1) {
   i4 = 5;
   break;
  }
  HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + -1;
 }
 if ((i4 | 0) == 5) {
  STACKTOP = i5;
  return HEAP32[i10 >> 2] | 0;
 }
 return 0;
}

function _vim_handle_signal(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 L1 : do switch (HEAP32[i4 >> 2] | 0) {
 case -1:
  {
   HEAP32[7434] = 1;
   break;
  }
 case -2:
  {
   HEAP32[7434] = 0;
   if (HEAP32[26290] | 0) {
    i1 = _getpid() | 0;
    _kill(i1 | 0, HEAP32[26290] | 0) | 0;
    HEAP32[26290] = 0;
   }
   break;
  }
 default:
  if (HEAP32[7434] | 0) {
   HEAP32[26290] = HEAP32[i4 >> 2];
   if ((HEAP32[i4 >> 2] | 0) == 30) break L1;
   HEAP32[26834] = 1;
   break L1;
  } else {
   HEAP32[i3 >> 2] = 1;
   i5 = HEAP32[i3 >> 2] | 0;
   STACKTOP = i2;
   return i5 | 0;
  }
 } while (0);
 HEAP32[i3 >> 2] = 0;
 i5 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _col_print(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 8 | 0;
 i7 = i5;
 i8 = i5 + 28 | 0;
 i9 = i5 + 24 | 0;
 i10 = i5 + 20 | 0;
 i11 = i5 + 16 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 i4 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[i10 >> 2] | 0) == (HEAP32[i11 >> 2] | 0)) {
  HEAP32[i7 >> 2] = i9;
  _vim_snprintf(i4, i8, 78969, i7) | 0;
  STACKTOP = i5;
  return;
 } else {
  i7 = HEAP32[i11 >> 2] | 0;
  HEAP32[i6 >> 2] = i9;
  HEAP32[i6 + 4 >> 2] = i7;
  _vim_snprintf(i4, i8, 42685, i6) | 0;
  STACKTOP = i5;
  return;
 }
}

function _syn_id2attr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 >> 2] = _syn_get_final_id(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = (HEAP32[26490] | 0) + (((HEAP32[i3 >> 2] | 0) - 1 | 0) * 96 | 0);
 if (HEAP32[26627] | 0) {
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 68 >> 2];
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 i3 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[26734] | 0) > 1) {
  HEAP32[i4 >> 2] = HEAP32[i3 + 44 >> 2];
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  HEAP32[i4 >> 2] = HEAP32[i3 + 24 >> 2];
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _frexp(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i3 = HEAP32[tempDoublePtr >> 2] | 0;
 i4 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i5 = _bitshift64Lshr(i3 | 0, i4 | 0, 52) | 0;
 switch (i5 & 2047) {
 case 0:
  {
   if (d1 != 0.0) {
    d6 = +_frexp(d1 * 18446744073709551616.0, i2);
    d7 = d6;
    i8 = (HEAP32[i2 >> 2] | 0) + -64 | 0;
   } else {
    d7 = d1;
    i8 = 0;
   }
   HEAP32[i2 >> 2] = i8;
   d9 = d7;
   break;
  }
 case 2047:
  {
   d9 = d1;
   break;
  }
 default:
  {
   HEAP32[i2 >> 2] = (i5 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = i3;
   HEAP32[tempDoublePtr + 4 >> 2] = i4 & -2146435073 | 1071644672;
   d9 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d9;
}

function _did_set_option(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = 15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 256;
 HEAP32[i8 >> 2] = 15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 8;
 if (!(HEAP32[26783] | 0)) if (!(HEAP32[i6 >> 2] & 8)) {
  if (!(HEAP32[i7 >> 2] | 0)) {
   STACKTOP = i4;
   return;
  }
  HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2] & -8388609;
  STACKTOP = i4;
  return;
 }
 HEAP32[HEAP32[i8 >> 2] >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2] | 8388608;
 STACKTOP = i4;
 return;
}

function _atol(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = 0;
 i3 = i1;
 while (1) {
  i4 = i3 + 1 | 0;
  if (!(_isspace(HEAP8[i3 >> 0] | 0) | 0)) break; else i3 = i4;
 }
 i1 = HEAP8[i3 >> 0] | 0;
 switch (i1 | 0) {
 case 45:
  {
   i5 = 1;
   i2 = 5;
   break;
  }
 case 43:
  {
   i5 = 0;
   i2 = 5;
   break;
  }
 default:
  {
   i6 = 0;
   i7 = i3;
   i8 = i1;
  }
 }
 if ((i2 | 0) == 5) {
  i6 = i5;
  i7 = i4;
  i8 = HEAP8[i4 >> 0] | 0;
 }
 if (!(_isdigit(i8) | 0)) i9 = 0; else {
  i8 = 0;
  i4 = i7;
  while (1) {
   i7 = (i8 * 10 | 0) + 48 - (HEAP8[i4 >> 0] | 0) | 0;
   i4 = i4 + 1 | 0;
   if (!(_isdigit(HEAP8[i4 >> 0] | 0) | 0)) {
    i9 = i7;
    break;
   } else i8 = i7;
  }
 }
 return ((i6 | 0) == 0 ? 0 - i9 | 0 : i9) | 0;
}

function _atoi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = 0;
 i3 = i1;
 while (1) {
  i4 = i3 + 1 | 0;
  if (!(_isspace(HEAP8[i3 >> 0] | 0) | 0)) break; else i3 = i4;
 }
 i1 = HEAP8[i3 >> 0] | 0;
 switch (i1 | 0) {
 case 45:
  {
   i5 = 1;
   i2 = 5;
   break;
  }
 case 43:
  {
   i5 = 0;
   i2 = 5;
   break;
  }
 default:
  {
   i6 = 0;
   i7 = i3;
   i8 = i1;
  }
 }
 if ((i2 | 0) == 5) {
  i6 = i5;
  i7 = i4;
  i8 = HEAP8[i4 >> 0] | 0;
 }
 if (!(_isdigit(i8) | 0)) i9 = 0; else {
  i8 = 0;
  i4 = i7;
  while (1) {
   i7 = (i8 * 10 | 0) + 48 - (HEAP8[i4 >> 0] | 0) | 0;
   i4 = i4 + 1 | 0;
   if (!(_isdigit(HEAP8[i4 >> 0] | 0) | 0)) {
    i9 = i7;
    break;
   } else i8 = i7;
  }
 }
 return ((i6 | 0) == 0 ? 0 - i9 | 0 : i9) | 0;
}

function ___fseeko_unlocked(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = 0;
 if ((i3 | 0) == 1) i5 = i2 - (HEAP32[i1 + 8 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] | 0) | 0; else i5 = i2;
 i2 = i1 + 20 | 0;
 i6 = i1 + 28 | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > (HEAP32[i6 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 15](i1, 0, 0) | 0;
  if (!(HEAP32[i2 >> 2] | 0)) i7 = -1; else i4 = 5;
 } else i4 = 5;
 if ((i4 | 0) == 5) {
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 40 >> 2] & 15](i1, i5, i3) | 0) < 0) i7 = -1; else {
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -17;
   i7 = 0;
  }
 }
 return i7 | 0;
}

function _save_re_pat(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAP32[30064 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 _vim_free(HEAP32[30064 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) >> 2] | 0);
 i3 = _vim_strsave(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[30064 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) >> 2] = i3;
 HEAP32[30064 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 4 >> 2] = HEAP32[i7 >> 2];
 HEAP32[30064 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 8 >> 2] = HEAP32[26736];
 HEAP32[26465] = HEAP32[i5 >> 2];
 STACKTOP = i4;
 return;
}

function _ml_new_ptr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = _mf_new(HEAP32[i4 >> 2] | 0, 0, 1) | 0;
 HEAP32[i5 >> 2] = i1;
 if (!i1) {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 } else {
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2];
  HEAP16[HEAP32[i6 >> 2] >> 1] = 28788;
  HEAP16[(HEAP32[i6 >> 2] | 0) + 2 >> 1] = 0;
  HEAP16[(HEAP32[i6 >> 2] | 0) + 4 >> 1] = ((((HEAP32[(HEAP32[i4 >> 2] | 0) + 592 >> 2] | 0) - 24 | 0) >>> 0) / 16 | 0) + 1;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 return 0;
}

function _ins_char_typebuf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) < 0) {
  HEAP8[i4 >> 0] = -128;
  if ((HEAP32[i3 >> 2] | 0) == 128) i5 = 254; else if (!(HEAP32[i3 >> 2] | 0)) i5 = 255; else i5 = 0 - (HEAP32[i3 >> 2] | 0) & 255;
  HEAP8[i4 + 1 >> 0] = i5;
  if ((HEAP32[i3 >> 2] | 0) == 128 | (HEAP32[i3 >> 2] | 0) == 0) i6 = 88; else i6 = (0 - (HEAP32[i3 >> 2] | 0) | 0) >>> 8 & 255;
  HEAP8[i4 + 2 >> 0] = i6;
  HEAP8[i4 + 3 >> 0] = 0;
 } else {
  HEAP8[i4 >> 0] = HEAP32[i3 >> 2];
  HEAP8[i4 + 1 >> 0] = 0;
 }
 _ins_typebuf(i4, HEAP32[25636] | 0, 0, ((HEAP32[27161] | 0) != 0 ^ 1) & 1, HEAP32[26811] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _event_nr2name(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if (!(HEAP32[10084 + (HEAP32[i6 >> 2] << 3) >> 2] | 0)) {
   i2 = 6;
   break;
  }
  i7 = HEAP32[i6 >> 2] | 0;
  if ((HEAP32[10084 + (HEAP32[i6 >> 2] << 3) + 4 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
   i2 = 4;
   break;
  }
  HEAP32[i6 >> 2] = i7 + 1;
 }
 if ((i2 | 0) == 4) {
  HEAP32[i4 >> 2] = HEAP32[10084 + (i7 << 3) >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = 52430;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _cmd_with_count(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i7 = i5 + 20 | 0;
 i8 = i5 + 16 | 0;
 i9 = i5 + 12 | 0;
 i10 = i5 + 8 | 0;
 i11 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = _strlen(HEAP32[i7 >> 2] | 0) | 0;
 _strcpy(HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 if ((HEAP32[i10 >> 2] | 0) <= 0) {
  STACKTOP = i5;
  return;
 }
 i7 = HEAP32[i11 >> 2] | 0;
 i11 = (HEAP32[i8 >> 2] | 0) + i7 | 0;
 i8 = (HEAP32[i9 >> 2] | 0) - i7 | 0;
 HEAP32[i6 >> 2] = HEAP32[i10 >> 2];
 _vim_snprintf(i11, i8, 97769, i6) | 0;
 STACKTOP = i5;
 return;
}

function _termcapinit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[i4 >> 2] | 0) if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 if (!(HEAP32[i5 >> 2] | 0)) HEAP32[i5 >> 2] = _getenv(80460) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) i2 = 8; else if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) i2 = 8;
 if ((i2 | 0) == 8) HEAP32[i5 >> 2] = 78886;
 _set_string_option_direct(78891, -1, HEAP32[i5 >> 2] | 0, 1, 0);
 _set_string_default(78891, HEAP32[i5 >> 2] | 0);
 _set_string_default(80465, HEAP32[i5 >> 2] | 0);
 i2 = HEAP32[26519] | 0;
 _set_termname(i2 | 0 ? i2 | 0 : HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _free_one_termoption(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 15328;
 while (1) {
  if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
   i2 = 8;
   break;
  }
  i6 = HEAP32[i5 >> 2] | 0;
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = i6 + 28;
 }
 if ((i2 | 0) == 8) {
  STACKTOP = i3;
  return;
 }
 if (HEAP32[i6 + 8 >> 2] & 8 | 0) _free_string_option(HEAP32[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] >> 2] | 0);
 HEAP32[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] >> 2] = 114072;
 i6 = (HEAP32[i5 >> 2] | 0) + 8 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & -9;
 STACKTOP = i3;
 return;
}

function _lbr_chartabsize(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i4 + 12 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if ((HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) == 9) if (HEAP32[26862] | 0 ? 1 : (HEAP32[(HEAP32[26881] | 0) + 200 >> 2] | 0) == 0) {
  HEAP32[i8 >> 2] = HEAP32[(HEAP32[26773] | 0) + 700 >> 2];
  i3 = HEAP32[i8 >> 2] | 0;
  HEAP32[i5 >> 2] = (i3 | 0) - ((HEAP32[i7 >> 2] | 0) % (i3 | 0) | 0);
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 HEAP32[i5 >> 2] = _ptr2cells(HEAP32[i6 >> 2] | 0) | 0;
 i9 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _copy_sub_off(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) < (HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) <= 1) {
  STACKTOP = i3;
  return;
 }
 i2 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
 if (!(HEAP32[26312] | 0)) {
  _memmove(i2 + 16 | 0, (HEAP32[i5 >> 2] | 0) + 4 + 16 | 0, (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) - 1 << 4 | 0) | 0;
  STACKTOP = i3;
  return;
 } else {
  _memmove(i2 + 8 | 0, (HEAP32[i5 >> 2] | 0) + 4 + 8 | 0, (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) - 1 << 3 | 0) | 0;
  STACKTOP = i3;
  return;
 }
}

function _strncmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 if (!i3) i4 = 0; else {
  i5 = HEAP8[i1 >> 0] | 0;
  L3 : do if (!(i5 << 24 >> 24)) {
   i6 = i2;
   i7 = 0;
  } else {
   i8 = i1;
   i9 = i3;
   i10 = i2;
   i11 = i5;
   while (1) {
    i9 = i9 + -1 | 0;
    i12 = HEAP8[i10 >> 0] | 0;
    if (!(i11 << 24 >> 24 == i12 << 24 >> 24 & ((i9 | 0) != 0 & i12 << 24 >> 24 != 0))) {
     i6 = i10;
     i7 = i11;
     break L3;
    }
    i8 = i8 + 1 | 0;
    i12 = i10 + 1 | 0;
    i11 = HEAP8[i8 >> 0] | 0;
    if (!(i11 << 24 >> 24)) {
     i6 = i12;
     i7 = 0;
     break;
    } else i10 = i12;
   }
  } while (0);
  i4 = (i7 & 255) - (HEAPU8[i6 >> 0] | 0) | 0;
 }
 return i4 | 0;
}

function _preserve_exit() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 _prepare_to_exit();
 HEAP32[26779] = 1;
 _out_str(HEAP32[26882] | 0);
 _screen_start();
 _out_flush();
 _ml_close_notmod();
 HEAP32[i3 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i3 >> 2] | 0)) {
   i1 = 7;
   break;
  }
  if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) if (HEAP32[HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] >> 2] | 0) break;
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2];
 }
 if ((i1 | 0) == 7) {
  _ml_close_all(0);
  _out_str(60149);
  _getout(1);
  STACKTOP = i2;
  return;
 }
 _out_str(60123);
 _screen_start();
 _out_flush();
 _ml_sync_all(0, 0);
 _ml_close_all(0);
 _out_str(60149);
 _getout(1);
 STACKTOP = i2;
 return;
}

function _ins_redraw(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i2 + 32 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_char_avail() | 0) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[i3 >> 2] | 0) if (_has_textchangedI() | 0) if ((HEAP32[(HEAP32[26773] | 0) + 144 >> 2] | 0) != (HEAP32[(HEAP32[26773] | 0) + 112 + 8 >> 2] | 0)) {
  _aucmd_prepbuf(i4, HEAP32[26773] | 0);
  _apply_autocmds(85, 0, 0, 0, HEAP32[26773] | 0) | 0;
  _aucmd_restbuf(i4);
  i4 = HEAP32[26773] | 0;
  HEAP32[i4 + 144 >> 2] = HEAP32[i4 + 112 + 8 >> 2];
 }
 if (HEAP32[26828] | 0) _update_screen(0) | 0; else if ((HEAP32[26700] | 0) != 0 | (HEAP32[26699] | 0) != 0) _showmode() | 0;
 _showruler(0);
 _setcursor();
 HEAP32[26718] = 0;
 STACKTOP = i2;
 return;
}

function _buf_write_bytes(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2];
 if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) < 0) {
  HEAP32[i3 >> 2] = 1;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 } else {
  HEAP32[i5 >> 2] = _write_eintr(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = (HEAP32[i5 >> 2] | 0) < (HEAP32[i7 >> 2] | 0) ? 0 : 1;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 return 0;
}

function _buf_set_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = _buflist_findnr(HEAP32[i4 >> 2] | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] | 0);
 i4 = _vim_strsave(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] = i4;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] = 0;
 i4 = HEAP32[i6 >> 2] | 0;
 _fname_expand(i4 | 0, i4 + 68 | 0, i4 + 72 | 0);
 i4 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 + 76 >> 2] = HEAP32[i4 + 72 >> 2];
 STACKTOP = i3;
 return;
}

function _nv_halfpage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 21) {
  if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) != 1) i2 = 3;
 } else i2 = 3;
 do if ((i2 | 0) == 3) {
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 4) if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[HEAP32[26773] >> 2] | 0)) break;
  if (_checkclearop(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) {
   STACKTOP = i3;
   return;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  _halfpage((HEAP32[i1 + 8 >> 2] | 0) == 4 & 1, HEAP32[i1 + 24 >> 2] | 0);
  STACKTOP = i3;
  return;
 } while (0);
 _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ga_concat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i6 >> 2] = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 if ((_ga_grow(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) != 1) {
  STACKTOP = i3;
  return;
 }
 _memmove((HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _alist_add(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if (!(HEAP32[i6 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[HEAP32[i5 >> 2] >> 2] << 3) >> 2] = HEAP32[i6 >> 2];
 if ((HEAP32[i7 >> 2] | 0) > 0) {
  i3 = _buflist_add(HEAP32[i6 >> 2] | 0, 2 | ((HEAP32[i7 >> 2] | 0) == 2 ? 1 : 0)) | 0;
  HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[HEAP32[i5 >> 2] >> 2] << 3) + 4 >> 2] = i3;
 }
 i3 = HEAP32[i5 >> 2] | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 STACKTOP = i4;
 return;
}

function _strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP8[i2 >> 0] | 0;
 do if (!(i3 << 24 >> 24)) i4 = i1; else {
  i5 = _strchr(i1, i3 << 24 >> 24) | 0;
  if (!i5) i4 = 0; else if (!(HEAP8[i2 + 1 >> 0] | 0)) i4 = i5; else if (!(HEAP8[i5 + 1 >> 0] | 0)) i4 = 0; else {
   if (!(HEAP8[i2 + 2 >> 0] | 0)) {
    i4 = _twobyte_strstr(i5, i2) | 0;
    break;
   }
   if (!(HEAP8[i5 + 2 >> 0] | 0)) i4 = 0; else {
    if (!(HEAP8[i2 + 3 >> 0] | 0)) {
     i4 = _threebyte_strstr(i5, i2) | 0;
     break;
    }
    if (!(HEAP8[i5 + 3 >> 0] | 0)) i4 = 0; else if (!(HEAP8[i2 + 4 >> 0] | 0)) {
     i4 = _fourbyte_strstr(i5, i2) | 0;
     break;
    } else {
     i4 = _twoway_strstr(i5, i2) | 0;
     break;
    }
   }
  }
 } while (0);
 return i4 | 0;
}

function _skip_to_start(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = (HEAP32[26325] | 0) + (HEAP32[HEAP32[i6 >> 2] >> 2] | 0) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (HEAP32[26323] | 0) HEAP32[i7 >> 2] = _cstrchr(i2, i1) | 0; else HEAP32[i7 >> 2] = _vim_strbyte(i2, i1) | 0;
 if (!(HEAP32[i7 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  HEAP32[HEAP32[i6 >> 2] >> 2] = (HEAP32[i7 >> 2] | 0) - (HEAP32[26325] | 0);
  HEAP32[i4 >> 2] = 1;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _ex_behave(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(_strcmp(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 51092) | 0)) {
  _set_option_value(69116, 0, 64285, 0) | 0;
  _set_option_value(69130, 0, 51098, 0) | 0;
  _set_option_value(68082, 0, 64231, 0) | 0;
  _set_option_value(67585, 0, 51108, 0) | 0;
  STACKTOP = i2;
  return;
 }
 if (!(_strcmp(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 79252) | 0)) {
  _set_option_value(69116, 0, 64275, 0) | 0;
  _set_option_value(69130, 0, 114072, 0) | 0;
  _set_option_value(68082, 0, 64224, 0) | 0;
  _set_option_value(67585, 0, 114072, 0) | 0;
  STACKTOP = i2;
  return;
 } else {
  _emsg2(92476, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
  STACKTOP = i2;
  return;
 }
}

function _t_puts(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[26711] = 1;
 i4 = HEAP32[i7 >> 2] | 0;
 _screen_puts_len(i4 | 0, (HEAP32[i8 >> 2] | 0) - i4 | 0, HEAP32[26877] | 0, HEAP32[27043] | 0, HEAP32[i9 >> 2] | 0);
 HEAP32[27043] = (HEAP32[27043] | 0) + (HEAP32[HEAP32[i6 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i6 >> 2] >> 2] = 0;
 if ((HEAP32[27043] | 0) < (HEAP32[10174] | 0)) {
  STACKTOP = i5;
  return;
 }
 HEAP32[27043] = 0;
 HEAP32[26877] = (HEAP32[26877] | 0) + 1;
 STACKTOP = i5;
 return;
}

function _replace_join(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[25205];
 while (1) {
  i1 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  HEAP32[i5 >> 2] = i1;
  if ((i1 | 0) < 0) {
   i2 = 7;
   break;
  }
  if (!(HEAPU8[(HEAP32[25207] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] | 0)) {
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = i1 + -1;
   if ((i1 | 0) <= 0) break;
  }
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i3;
  return;
 }
 HEAP32[25205] = (HEAP32[25205] | 0) + -1;
 i2 = (HEAP32[25207] | 0) + (HEAP32[i5 >> 2] | 0) | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 _memmove(i2 | 0, i2 + 1 | 0, (HEAP32[25205] | 0) - i4 | 0) | 0;
 STACKTOP = i3;
 return;
}

function _nv_operator(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 >> 2] = _get_op_type(HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0)) {
  _nv_lineop(i1);
  STACKTOP = i2;
  return;
 }
 if (_checkclearop(HEAP32[i1 >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 28 | 0;
 i5 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i2;
 return;
}

function _mf_write_block(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i5 + 12 >> 2] = i3;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i9 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2];
 HEAP32[i10 >> 2] = 1;
 i7 = _write_eintr(HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 if ((i7 | 0) == (HEAP32[i8 >> 2] | 0)) {
  i11 = HEAP32[i10 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 HEAP32[i10 >> 2] = 0;
 i11 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _init_longVersion() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1;
 i3 = i1 + 20 | 0;
 i4 = i1 + 16 | 0;
 i5 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 81107;
 HEAP32[i4 >> 2] = 81128;
 i6 = (_strlen(HEAP32[i4 >> 2] | 0) | 0) + 21 + 11 | 0;
 HEAP32[i5 >> 2] = i6 + (_strlen(HEAP32[i3 >> 2] | 0) | 0);
 HEAP32[27180] = _alloc(HEAP32[i5 >> 2] | 0) | 0;
 if (!(HEAP32[27180] | 0)) {
  HEAP32[27180] = 81149;
  STACKTOP = i1;
  return;
 } else {
  i6 = HEAP32[27180] | 0;
  i7 = HEAP32[i5 >> 2] | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i2 >> 2] = 81185;
  HEAP32[i2 + 4 >> 2] = 81207;
  HEAP32[i2 + 8 >> 2] = i4;
  _vim_snprintf(i6, i7, i5, i2) | 0;
  STACKTOP = i1;
  return;
 }
}

function _oneright() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i3 >> 2] = _ml_get_cursor() | 0;
 if (!(HEAPU8[HEAP32[i3 >> 2] >> 0] | 0)) {
  HEAP32[i2 >> 2] = 0;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = 1;
 if (!(HEAPU8[(HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] | 0)) {
  HEAP32[i2 >> 2] = 0;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i5 | 0;
 } else {
  i3 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i4 >> 2] | 0);
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  HEAP32[i2 >> 2] = 1;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i5 | 0;
 }
 return 0;
}

function _gui_mch_set_shellsize(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i8 + 24 | 0;
 i10 = i8 + 20 | 0;
 i11 = i8 + 16 | 0;
 i12 = i8 + 12 | 0;
 i13 = i8 + 8 | 0;
 i14 = i8 + 4 | 0;
 i15 = i8;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i12 >> 2] = i4;
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i15 >> 2] = i7;
 _vimwasm_resize(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i15 >> 2] | 0) | 0;
 STACKTOP = i8;
 return;
}

function _del_termcode_idx(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 _vim_free(HEAP32[(HEAP32[26602] | 0) + (HEAP32[i3 >> 2] << 4) + 4 >> 2] | 0);
 HEAP32[26600] = (HEAP32[26600] | 0) + -1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26600] | 0)) break;
  i3 = HEAP32[26602] | 0;
  i1 = i3 + (HEAP32[i4 >> 2] << 4) | 0;
  i5 = i3 + ((HEAP32[i4 >> 2] | 0) + 1 << 4) | 0;
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _buf_jump_open_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 L1 : do if ((HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) HEAP32[i4 >> 2] = HEAP32[26881]; else {
  HEAP32[i4 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[i4 >> 2] | 0)) break L1;
   if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) break L1;
   HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
  }
 } while (0);
 if (!(HEAP32[i4 >> 2] | 0)) {
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 _win_enter(HEAP32[i4 >> 2] | 0, 0);
 i5 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _dir_of_file_exists(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _gettail_sep(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 1;
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 } else {
  HEAP32[i6 >> 2] = HEAPU8[HEAP32[i5 >> 2] >> 0];
  HEAP8[HEAP32[i5 >> 2] >> 0] = 0;
  HEAP32[i7 >> 2] = _mch_isdir(HEAP32[i4 >> 2] | 0) | 0;
  HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP32[i6 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i8 | 0;
 }
 return 0;
}

function _emsg3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 20 | 0;
 i7 = i4 + 16 | 0;
 i8 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 if (_emsg_not_now() | 0) {
  HEAP32[i6 >> 2] = 1;
  i10 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 } else {
  i3 = HEAP32[26882] | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i7 = HEAP32[i9 >> 2] | 0;
  HEAP32[i5 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i5 + 4 >> 2] = i7;
  _vim_snprintf(i3, 1025, i2, i5) | 0;
  HEAP32[i6 >> 2] = _emsg(HEAP32[26882] | 0) | 0;
  i10 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 return 0;
}

function _clip_get_line_end(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[26691] | 0) == 0 ? 1 : (HEAP32[i4 >> 2] | 0) >= (HEAP32[26696] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i5 >> 2] = HEAP32[26697];
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) <= 0) break;
  if ((HEAPU8[(HEAP32[26691] | 0) + ((HEAP32[(HEAP32[26693] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] | 0) + (HEAP32[i5 >> 2] | 0) - 1) >> 0] | 0 | 0) != 32) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
 }
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _test_for_static(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2];
 while (1) {
  i5 = _vim_strchr(HEAP32[i6 >> 2] | 0, 9) | 0;
  HEAP32[i6 >> 2] = i5;
  if (!i5) {
   i2 = 6;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  if (!(_strncmp(HEAP32[i6 >> 2] | 0, 78207, 5) | 0)) {
   i2 = 4;
   break;
  }
 }
 if ((i2 | 0) == 4) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _fourbyte_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
 i2 = i1 + 3 | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 i5 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | i4 & 255;
 i1 = i4 << 24 >> 24 == 0;
 if ((i5 | 0) == (i3 | 0) | i1) {
  i6 = i2;
  i7 = i1;
 } else {
  i1 = i2;
  i2 = i5;
  while (1) {
   i5 = i1 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   i2 = i2 << 8 | i4 & 255;
   i8 = i4 << 24 >> 24 == 0;
   if ((i2 | 0) == (i3 | 0) | i8) {
    i6 = i5;
    i7 = i8;
    break;
   } else i1 = i5;
  }
 }
 return (i7 ? 0 : i6 + -3 | 0) | 0;
}

function _syn_check_group(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i8 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i8 >> 2] = _vim_strnsave(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i9 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i9 | 0;
 }
 HEAP32[i7 >> 2] = _syn_name2id(HEAP32[i8 >> 2] | 0) | 0;
 i6 = HEAP32[i8 >> 2] | 0;
 if (!(HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = _syn_add_group(i6) | 0; else _vim_free(i6);
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 i9 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i9 | 0;
}

function _changed() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 108 >> 2] | 0)) {
  HEAP32[i2 >> 2] = HEAP32[26710];
  _change_warning(0);
  do if (HEAP32[(HEAP32[26773] | 0) + 772 >> 2] | 0) {
   HEAP32[i3 >> 2] = HEAP32[26721];
   HEAP32[26721] = 0;
   _ml_open_file(HEAP32[26773] | 0);
   if ((HEAP32[26721] | 0) != 0 & (HEAP32[26810] | 0) == 0) {
    _out_flush();
    _ui_delay(2e3, 1);
    _wait_return(1);
    HEAP32[26710] = HEAP32[i2 >> 2];
    break;
   } else {
    HEAP32[26721] = HEAP32[i3 >> 2];
    break;
   }
  } while (0);
  _changed_int();
 }
 i3 = (HEAP32[26773] | 0) + 112 + 8 | 0;
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 STACKTOP = i1;
 return;
}

function _frame_append(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] = HEAP32[i5 >> 2];
 if (!(HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0)) {
  i6 = HEAP32[i4 >> 2] | 0;
  i7 = HEAP32[i5 >> 2] | 0;
  i8 = i7 + 28 | 0;
  HEAP32[i8 >> 2] = i6;
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] | 0) + 28 >> 2] = HEAP32[i5 >> 2];
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 i8 = i7 + 28 | 0;
 HEAP32[i8 >> 2] = i6;
 STACKTOP = i3;
 return;
}

function _syn_attr2attr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 do if (HEAP32[26627] | 0) HEAP32[i5 >> 2] = _syn_gui_attr2entry(HEAP32[i4 >> 2] | 0) | 0; else {
  i1 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[26734] | 0) > 1) {
   HEAP32[i5 >> 2] = _syn_cterm_attr2entry(i1) | 0;
   break;
  } else {
   HEAP32[i5 >> 2] = _syn_term_attr2entry(i1) | 0;
   break;
  }
 } while (0);
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  HEAP32[i3 >> 2] = HEAP16[HEAP32[i5 >> 2] >> 1];
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _redrawcmdprompt() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26811] | 0) {
  STACKTOP = i1;
  return;
 }
 if (HEAP32[25241] | 0) _msg_putchar(HEAP32[25241] | 0);
 if (HEAP32[25243] | 0) {
  _msg_puts_attr(HEAP32[25243] | 0, HEAP32[25244] | 0);
  HEAP32[25242] = (HEAP32[27043] | 0) + (Math_imul((HEAP32[26877] | 0) - (HEAP32[26876] | 0) | 0, HEAP32[10174] | 0) | 0);
  if (!(HEAP32[25241] | 0)) {
   STACKTOP = i1;
   return;
  }
  HEAP32[25242] = (HEAP32[25242] | 0) + -1;
  STACKTOP = i1;
  return;
 } else {
  HEAP32[i2 >> 2] = HEAP32[25242];
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) <= 0) break;
   _msg_putchar(32);
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  }
  STACKTOP = i1;
  return;
 }
}

function _nv_pipe(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 _beginline(0);
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) > 0) {
  _coladvance((HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) - 1 | 0) | 0;
  HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) - 1;
  i4 = HEAP32[26881] | 0;
  i5 = i4 + 36 | 0;
  HEAP32[i5 >> 2] = 0;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 0;
  i4 = HEAP32[26881] | 0;
  i5 = i4 + 36 | 0;
  HEAP32[i5 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
}

function _gettail(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 114072;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 i1 = _get_past_head(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = i1;
 while (1) {
  if (!(HEAP8[HEAP32[i6 >> 2] >> 0] | 0)) break;
  if (_vim_ispathsep_nocolon(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0) | 0) HEAP32[i5 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _concat_fnames(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = _strlen(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = _alloc(i3 + (_strlen(HEAP32[i6 >> 2] | 0) | 0) + 3 | 0) | 0;
 if (!(HEAP32[i8 >> 2] | 0)) {
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 _strcpy(HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 if (HEAP32[i7 >> 2] | 0) _add_pathsep(HEAP32[i8 >> 2] | 0);
 _strcat(HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _frame_remove(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 i5 = i1 | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) HEAP32[(HEAP32[i5 + 28 >> 2] | 0) + 24 >> 2] = i4; else {
  HEAP32[(HEAP32[i5 + 20 >> 2] | 0) + 32 >> 2] = i4;
  if ((HEAP32[(HEAP32[27114] | 0) + 32 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) HEAP32[(HEAP32[27114] | 0) + 32 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[(HEAP32[i4 + 24 >> 2] | 0) + 28 >> 2] = HEAP32[i4 + 28 >> 2];
 STACKTOP = i2;
 return;
}

function _draw_vsep_win(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 104 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i7 >> 2] = _fillchar_vsep(i6) | 0;
 i2 = HEAP32[(HEAP32[i4 >> 2] | 0) + 84 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i8 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] | 0) | 0;
 _screen_fill(i2 + (HEAP32[i5 >> 2] | 0) | 0, i2 + (HEAP32[i1 + 88 >> 2] | 0) | 0, i8 | 0, i8 + 1 | 0, HEAP32[i7 >> 2] | 0, 32, HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _fchown(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i5 + 48 | 0;
 i7 = i5 + 16 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i8 + 4 >> 2] = i2;
 HEAP32[i8 + 8 >> 2] = i3;
 i9 = ___syscall207(207, i8 | 0) | 0;
 if ((i9 | 0) == -9) {
  HEAP32[i7 >> 2] = i1;
  HEAP32[i7 + 4 >> 2] = 1;
  if ((___syscall221(221, i7 | 0) | 0) < 0) i4 = 3; else {
   ___procfdname(i7, i1);
   HEAP32[i6 >> 2] = i7;
   HEAP32[i6 + 4 >> 2] = i2;
   HEAP32[i6 + 8 >> 2] = i3;
   i10 = ___syscall_ret(___syscall212(212, i6 | 0) | 0) | 0;
  }
 } else i4 = 3;
 if ((i4 | 0) == 3) i10 = ___syscall_ret(i9) | 0;
 STACKTOP = i5;
 return i10 | 0;
}

function _give_warning(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (HEAP32[26809] | 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26720] = (HEAP32[26720] | 0) + 1;
 if (HEAP32[26706] | 0) {
  _vim_free(HEAP32[26706] | 0);
  HEAP32[26706] = 0;
 }
 if (HEAP32[i5 >> 2] | 0) HEAP32[26707] = HEAP32[27067]; else HEAP32[26707] = 0;
 i5 = (_msg_attr(HEAP32[i4 >> 2] | 0, HEAP32[26707] | 0) | 0) != 0;
 if (i5 & (HEAP32[27044] | 0) == 0) _set_keep_msg(HEAP32[i4 >> 2] | 0, HEAP32[26707] | 0);
 HEAP32[26711] = 0;
 HEAP32[26713] = 1;
 HEAP32[27043] = 0;
 HEAP32[26720] = (HEAP32[26720] | 0) + -1;
 STACKTOP = i3;
 return;
}

function _wc_use_keyname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if ((HEAP32[i6 >> 2] | 0) == 108120) i3 = 3; else if ((HEAP32[i6 >> 2] | 0) == 108124) i3 = 3;
 do if ((i3 | 0) == 3) {
  HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
  if ((HEAP32[HEAP32[i7 >> 2] >> 2] | 0) >= 0) if ((_find_special_key_in_table(HEAP32[HEAP32[i7 >> 2] >> 2] | 0) | 0) < 0) break;
  HEAP32[i5 >> 2] = 1;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i8 | 0;
 } while (0);
 HEAP32[i5 >> 2] = 0;
 i8 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i8 | 0;
}

function _check_mtime(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 do if (HEAP32[(HEAP32[i5 >> 2] | 0) + 176 >> 2] | 0) if (_time_differs(HEAP32[(HEAP32[i6 >> 2] | 0) + 56 >> 2] | 0, HEAP32[(HEAP32[i5 >> 2] | 0) + 176 >> 2] | 0) | 0) {
  HEAP32[26710] = 1;
  HEAP32[26809] = 0;
  _msg_attr(55141, HEAP32[27052] | 0) | 0;
  if ((_ask_yesno(55196, 1) | 0) != 110) {
   HEAP32[26710] = 0;
   break;
  }
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } while (0);
 HEAP32[i4 >> 2] = 1;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _nv_at(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 if (_checkclearop(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i3;
  return;
 }
 while (1) {
  i1 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
  i5 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = i5 + -1;
  if (!i5) {
   i2 = 8;
   break;
  }
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
   i2 = 8;
   break;
  }
  if (!(_do_execreg(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0, 0, 0, 0) | 0)) {
   i2 = 6;
   break;
  }
  _line_breakcheck();
 }
 if ((i2 | 0) == 6) {
  _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
  STACKTOP = i3;
  return;
 } else if ((i2 | 0) == 8) {
  STACKTOP = i3;
  return;
 }
}

function _shell_new_rows() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 i3 = (HEAP32[10173] | 0) - (HEAP32[26875] | 0) | 0;
 HEAP32[i2 >> 2] = i3 - (_tabline_height() | 0);
 if (!(HEAP32[26887] | 0)) {
  STACKTOP = i1;
  return;
 }
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) < (_frame_minheight(HEAP32[27114] | 0, 0) | 0)) HEAP32[i2 >> 2] = _frame_minheight(HEAP32[27114] | 0, 0) | 0;
 _frame_new_height(HEAP32[27114] | 0, HEAP32[i2 >> 2] | 0, 0, 1);
 if (!(_frame_check_height(HEAP32[27114] | 0, HEAP32[i2 >> 2] | 0) | 0)) _frame_new_height(HEAP32[27114] | 0, HEAP32[i2 >> 2] | 0, 0, 0);
 _win_comp_pos() | 0;
 _compute_cmdrow();
 HEAP32[(HEAP32[26886] | 0) + 32 >> 2] = HEAP32[26875];
 STACKTOP = i1;
 return;
}

function _fclose(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) i2 = ___lockfile(i1) | 0; else i2 = 0;
 ___unlist_locked_file(i1);
 i3 = (HEAP32[i1 >> 2] & 1 | 0) != 0;
 if (!i3) {
  i4 = ___ofl_lock() | 0;
  i5 = HEAP32[i1 + 52 >> 2] | 0;
  i6 = i1 + 56 | 0;
  if (i5 | 0) HEAP32[i5 + 56 >> 2] = HEAP32[i6 >> 2];
  i7 = HEAP32[i6 >> 2] | 0;
  if (i7 | 0) HEAP32[i7 + 52 >> 2] = i5;
  if ((HEAP32[i4 >> 2] | 0) == (i1 | 0)) HEAP32[i4 >> 2] = i7;
  ___ofl_unlock();
 }
 i7 = _fflush(i1) | 0;
 i4 = FUNCTION_TABLE_ii[HEAP32[i1 + 12 >> 2] & 3](i1) | 0 | i7;
 i7 = HEAP32[i1 + 92 >> 2] | 0;
 if (i7 | 0) _free(i7);
 if (i3) {
  if (i2 | 0) ___unlockfile(i1);
 } else _free(i1);
 return i4 | 0;
}

function _do_sleep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 _cursor_on();
 _out_flush();
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if (HEAP32[26834] | 0) {
   i2 = 7;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) {
   i2 = 7;
   break;
  }
  if (((HEAP32[i4 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0) > 1e3) i7 = 1e3; else i7 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = i7;
  _ui_delay(HEAP32[i6 >> 2] | 0, 1);
  _ui_breakcheck();
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 }
 if ((i2 | 0) == 7) {
  STACKTOP = i3;
  return;
 }
}

function _state_in_list(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 do if ((HEAP32[(HEAP32[i7 >> 2] | 0) + 16 + (HEAP32[26339] << 2) >> 2] | 0) == (HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] | 0)) {
  if (HEAP32[26328] | 0) if (!(_has_state_with_pos(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0) | 0)) break;
  HEAP32[i5 >> 2] = 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } while (0);
 HEAP32[i5 >> 2] = 0;
 i9 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _shift_delete_registers() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[26084] = 104484;
 _free_yank_all();
 HEAP32[i2 >> 2] = 9;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) <= 1) break;
  i3 = 104340 + (HEAP32[i2 >> 2] << 4) | 0;
  i4 = 104340 + ((HEAP32[i2 >> 2] | 0) - 1 << 4) | 0;
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
 }
 HEAP32[26084] = 104356;
 if (HEAP32[26082] | 0) {
  HEAP32[26089] = 0;
  STACKTOP = i1;
  return;
 }
 HEAP32[26083] = HEAP32[26084];
 HEAP32[26089] = 0;
 STACKTOP = i1;
 return;
}

function _set_last_insert(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 _vim_free(HEAP32[25208] | 0);
 HEAP32[25208] = _alloc(8) | 0;
 if (!(HEAP32[25208] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[25208];
 if ((HEAP32[i3 >> 2] | 0) < 32 | (HEAP32[i3 >> 2] | 0) == 127) {
  i1 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i1 + 1;
  HEAP8[i1 >> 0] = 22;
 }
 HEAP32[i4 >> 2] = _add_char2buf(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i3 + 1;
 HEAP8[i3 >> 0] = 27;
 i3 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i3 + 1;
 HEAP8[i3 >> 0] = 0;
 HEAP32[25209] = 0;
 STACKTOP = i2;
 return;
}

function _nv_csearch(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 116) i2 = 3; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == 84) i2 = 3; else HEAP32[i5 >> 2] = 0;
 if ((i2 | 0) == 3) HEAP32[i5 >> 2] = 1;
 HEAP32[(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0) >= 0) if (_searchc(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) {
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  _adjust_for_sel(HEAP32[i4 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
 _clearopbeep(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _termcode_star(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[i6 >> 2] | 0) >= 3) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 2) >> 0] | 0 | 0) == 42) {
  if ((HEAP32[i6 >> 2] | 0) >= 5) if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) - 3) >> 0] | 0 | 0) == 59) {
   HEAP32[i4 >> 2] = 2;
   i7 = HEAP32[i4 >> 2] | 0;
   STACKTOP = i3;
   return i7 | 0;
  }
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _get_emsg_source() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 i3 = i1 + 12 | 0;
 i4 = i1 + 8 | 0;
 i5 = i1 + 4 | 0;
 if (HEAP32[26731] | 0) if (_other_sourcing_name() | 0) {
  HEAP32[i5 >> 2] = 97594;
  i6 = _strlen(HEAP32[26731] | 0) | 0;
  HEAP32[i4 >> 2] = _alloc(i6 + (_strlen(HEAP32[i5 >> 2] | 0) | 0) | 0) | 0;
  if (HEAP32[i4 >> 2] | 0) {
   i6 = HEAP32[i4 >> 2] | 0;
   i7 = HEAP32[i5 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[26731];
   _sprintf(i6, i7, i2) | 0;
  }
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i8 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i1;
  return i8 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i8 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i1;
 return i8 | 0;
}

function _save_cmdline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[25261] | 0)) {
  i4 = 100996;
  i5 = i4 + 48 | 0;
  do {
   HEAP32[i4 >> 2] = 0;
   i4 = i4 + 4 | 0;
  } while ((i4 | 0) < (i5 | 0));
  HEAP32[25261] = 1;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 i3 = 100996;
 i5 = i4 + 48 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  i4 = i4 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i4 | 0) < (i5 | 0));
 i4 = 100996;
 i3 = 100944;
 i5 = i4 + 48 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  i4 = i4 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i4 | 0) < (i5 | 0));
 HEAP32[25236] = 0;
 HEAP32[25243] = 0;
 HEAP32[25246] = 0;
 STACKTOP = i2;
 return;
}

function _nv_addsub(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[26788] | 0)) if (!(HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0)) {
  _prep_redo_cmd(HEAP32[i3 >> 2] | 0);
  HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] = (HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == 1 ? 28 : 29;
  i1 = HEAP32[i3 >> 2] | 0;
  _op_addsub(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0, HEAP32[i1 + 32 >> 2] | 0);
  HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] = 0;
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26788] | 0) {
  _nv_operator(i1);
  STACKTOP = i2;
  return;
 } else {
  _clearop(HEAP32[i1 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
}

function _gui_inchar(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 if (_gui_wait_for_chars(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0) if (!(_typebuf_changed(HEAP32[i10 >> 2] | 0) | 0)) {
  HEAP32[i6 >> 2] = _read_from_input_buf(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  i11 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 HEAP32[i6 >> 2] = 0;
 i11 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _skiptowhite_esc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 while (1) {
  if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 32) if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 9) i5 = (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 0; else i5 = 0; else i5 = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  if (!i5) break;
  if ((HEAPU8[i6 >> 0] | 0 | 0) == 92) i2 = 8; else if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 22) i2 = 8;
  if ((i2 | 0) == 8) {
   i2 = 0;
   if (HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i3;
 return i6 | 0;
}

function _open(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4;
 i7 = i4 + 32 | 0;
 if (!(i2 & 4194368)) i8 = 0; else {
  HEAP32[i7 >> 2] = i3;
  i3 = (HEAP32[i7 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i9 = HEAP32[i3 >> 2] | 0;
  HEAP32[i7 >> 2] = i3 + 4;
  i8 = i9;
 }
 HEAP32[i6 >> 2] = i1;
 HEAP32[i6 + 4 >> 2] = i2 | 32768;
 HEAP32[i6 + 8 >> 2] = i8;
 i8 = ___syscall5(5, i6 | 0) | 0;
 if (!((i2 & 524288 | 0) == 0 | (i8 | 0) < 0)) {
  HEAP32[i5 >> 2] = i8;
  HEAP32[i5 + 4 >> 2] = 2;
  HEAP32[i5 + 8 >> 2] = 1;
  ___syscall221(221, i5 | 0) | 0;
 }
 i5 = ___syscall_ret(i8) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _exe_pre_commands(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = (HEAP32[i3 >> 2] | 0) + 84;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 80 >> 2];
 if ((HEAP32[i5 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 0;
 HEAP32[26731] = 94640;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) break;
  _do_cmdline_cmd(HEAP32[(HEAP32[i4 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 HEAP32[26731] = 0;
 STACKTOP = i2;
 return;
}

function _one_window() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i4 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) {
   i1 = 8;
   break;
  }
  if ((HEAP32[i4 >> 2] | 0) != (HEAP32[27113] | 0)) {
   if (HEAP32[i5 >> 2] | 0) {
    i1 = 5;
    break;
   }
   HEAP32[i5 >> 2] = 1;
  }
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 }
 if ((i1 | 0) == 5) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else if ((i1 | 0) == 8) {
  HEAP32[i3 >> 2] = 1;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _check_prevcol(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -1;
 if (HEAP32[i9 >> 2] | 0) HEAP32[HEAP32[i9 >> 2] >> 2] = HEAP32[i7 >> 2];
 if ((HEAP32[i7 >> 2] | 0) < 0) {
  i10 = 0;
  i11 = i10 ? 1 : 0;
  STACKTOP = i5;
  return i11 | 0;
 }
 i10 = (HEAPU8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] | 0 | 0) == (HEAP32[i8 >> 2] | 0);
 i11 = i10 ? 1 : 0;
 STACKTOP = i5;
 return i11 | 0;
}

function _ends_in_white(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _ml_get(HEAP32[i4 >> 2] | 0) | 0;
 if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 HEAP32[i6 >> 2] = (_strlen(HEAP32[i5 >> 2] | 0) | 0) - 1;
 if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) == 32) i8 = 1; else i8 = (HEAPU8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) >> 0] | 0 | 0) == 9;
 HEAP32[i3 >> 2] = i8 & 1;
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _win_hasvertsplit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 if ((HEAP8[HEAP32[27114] >> 0] | 0) == 1) {
  HEAP32[i2 >> 2] = 1;
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 L5 : do if ((HEAP8[HEAP32[27114] >> 0] | 0) == 2) {
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[27114] | 0) + 32 >> 2];
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break L5;
   if ((HEAP8[HEAP32[i3 >> 2] >> 0] | 0) == 1) break;
   HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
  }
  HEAP32[i2 >> 2] = 1;
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 } while (0);
 HEAP32[i2 >> 2] = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i4 | 0;
}

function _mf_hash_free_all(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  i7 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[i4 >> 2] | 0) >>> 0 > (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) >>> 0) break;
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i7 + 8 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2];
  while (1) {
   if (!(HEAP32[i5 >> 2] | 0)) break;
   HEAP32[i6 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
   _vim_free(HEAP32[i5 >> 2] | 0);
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 _mf_hash_free(i7);
 STACKTOP = i2;
 return;
}

function _skip_chars(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 while (1) {
  i2 = _cls() | 0;
  if ((i2 | 0) != (HEAP32[i6 >> 2] | 0)) {
   i3 = 9;
   break;
  }
  if ((HEAP32[i7 >> 2] | 0) == 1) i8 = _inc_cursor() | 0; else i8 = _dec_cursor() | 0;
  if ((i8 | 0) == -1) {
   i3 = 7;
   break;
  }
 }
 if ((i3 | 0) == 7) {
  HEAP32[i5 >> 2] = 1;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else if ((i3 | 0) == 9) {
  HEAP32[i5 >> 2] = 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _get_stty() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 24 | 0;
 i4 = i1;
 if ((_get_tty_info(HEAP32[26833] | 0, i2) | 0) != 1) {
  STACKTOP = i1;
  return;
 }
 HEAP32[26725] = HEAP32[i2 + 8 >> 2];
 HEAP8[i3 >> 0] = HEAP32[i2 >> 2];
 HEAP8[i3 + 1 >> 0] = 0;
 _add_termcode(78907, i3, 0);
 HEAP32[i4 >> 2] = _find_termcode(78910) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i1;
  return;
 }
 if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != (HEAPU8[i3 >> 0] | 0 | 0)) {
  STACKTOP = i1;
  return;
 }
 if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != (HEAPU8[i3 + 1 >> 0] | 0 | 0)) {
  STACKTOP = i1;
  return;
 }
 _do_fixdel(0);
 STACKTOP = i1;
 return;
}

function _get_last_insert_save() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 if (!(HEAP32[25208] | 0)) {
  HEAP32[i2 >> 2] = 0;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i5 | 0;
 }
 HEAP32[i3 >> 2] = _vim_strsave((HEAP32[25208] | 0) + (HEAP32[25209] | 0) | 0) | 0;
 if (HEAP32[i3 >> 2] | 0) {
  HEAP32[i4 >> 2] = _strlen(HEAP32[i3 >> 2] | 0) | 0;
  if ((HEAP32[i4 >> 2] | 0) > 0) if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) - 1) >> 0] | 0 | 0) == 27) HEAP8[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) - 1) >> 0] = 0;
 }
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 i5 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _init_normal_cmds() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= 188) break;
  HEAP16[109596 + (HEAP32[i3 >> 2] << 1) >> 1] = HEAP32[i3 >> 2];
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 _qsort(109596, 188, 2, 7);
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) >= 188) {
   i1 = 8;
   break;
  }
  if ((HEAP32[i3 >> 2] | 0) != (HEAP32[13020 + ((HEAP16[109596 + (HEAP32[i3 >> 2] << 1) >> 1] | 0) * 12 | 0) >> 2] | 0)) {
   i1 = 8;
   break;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 if ((i1 | 0) == 8) {
  HEAP32[26060] = (HEAP32[i3 >> 2] | 0) - 1;
  STACKTOP = i2;
  return;
 }
}

function _clip_invert_rectangle(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 16 | 0;
 i8 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i10 = i6 + 4 | 0;
 i11 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 i5 = HEAP32[i7 >> 2] | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 i9 = HEAP32[i10 >> 2] | 0;
 if (HEAP32[26627] | 0) {
  _gui_mch_invert_rectangle(i5, i7, i8, i9);
  STACKTOP = i6;
  return;
 } else {
  _screen_draw_rectangle(i5, i7, i8, i9, HEAP32[i11 >> 2] | 0);
  STACKTOP = i6;
  return;
 }
}

function _syn_name2id(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 _vim_strncpy(i6, HEAP32[i4 >> 2] | 0, 199);
 _vim_strup(i6);
 HEAP32[i5 >> 2] = HEAP32[26486];
 while (1) {
  i4 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  HEAP32[i5 >> 2] = i4;
  if ((i4 | 0) < 0) {
   i2 = 6;
   break;
  }
  if (HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 4 >> 2] | 0) if (!(_strcmp(i6, HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i5 >> 2] | 0) * 96 | 0) + 4 >> 2] | 0) | 0)) {
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) {
  STACKTOP = i3;
  return (HEAP32[i5 >> 2] | 0) + 1 | 0;
 }
 return 0;
}

function _scroll_line_len(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _ml_get(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = 0;
 if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) {
  i7 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 while (1) {
  HEAP32[i6 >> 2] = _chartabsize(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
  if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] | 0);
 }
 i7 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _hash_hash(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAPU8[HEAP32[i4 >> 2] >> 0] | 0;
 HEAP32[i5 >> 2] = i1;
 if (!i1) {
  HEAP32[i3 >> 2] = 0;
  i7 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i7 | 0;
 }
 HEAP32[i6 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 while (1) {
  i8 = HEAP32[i5 >> 2] | 0;
  if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) break;
  i4 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i4 + 1;
  HEAP32[i5 >> 2] = (i8 * 101 | 0) + (HEAPU8[i4 >> 0] | 0);
 }
 HEAP32[i3 >> 2] = i8;
 i7 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i7 | 0;
}

function _fmarks_check_names(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 >> 2] = _home_replace_save(i1 | 0, HEAP32[i1 + 68 >> 2] | 0) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 36) break;
  _fmarks_check_one(103600 + (HEAP32[i5 >> 2] << 4) | 0, HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 _vim_free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _chartabsize(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0) == 9) if (HEAP32[26862] | 0 ? 1 : (HEAP32[(HEAP32[26881] | 0) + 200 >> 2] | 0) == 0) {
  HEAP32[i7 >> 2] = HEAP32[(HEAP32[26773] | 0) + 700 >> 2];
  i2 = HEAP32[i7 >> 2] | 0;
  HEAP32[i4 >> 2] = (i2 | 0) - ((HEAP32[i6 >> 2] | 0) % (i2 | 0) | 0);
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i4 >> 2] = _ptr2cells(HEAP32[i5 >> 2] | 0) | 0;
 i8 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _print_line(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = HEAP32[26787];
 if (_message_filtered(_ml_get(HEAP32[i5 >> 2] | 0) | 0) | 0) {
  STACKTOP = i4;
  return;
 }
 _msg_start();
 HEAP32[26787] = 0;
 HEAP32[26715] = 1;
 _print_line_no_prefix(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0);
 if (HEAP32[i8 >> 2] | 0) {
  _msg_putchar(10);
  _cursor_on();
  _out_flush();
  HEAP32[26787] = HEAP32[i8 >> 2];
 }
 HEAP32[26715] = 0;
 STACKTOP = i4;
 return;
}

function _cmd_source(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) {
  _emsg(92160) | 0;
  STACKTOP = i3;
  return;
 }
 if (HEAP32[i5 >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0) {
  if ((HEAP32[26841] | 0) != 0 | (HEAP32[26842] | 0) != 0) i6 = 1; else i6 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0) != 0;
  _openscript(HEAP32[i4 >> 2] | 0, i6 & 1);
  STACKTOP = i3;
  return;
 }
 if (_do_source(HEAP32[i4 >> 2] | 0, 0, 0) | 0) {
  STACKTOP = i3;
  return;
 }
 _emsg2(93293, HEAP32[i4 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _vim_beep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26810] | 0) {
  STACKTOP = i2;
  return;
 }
 do if (!(HEAP32[26900] & HEAP32[i3 >> 2])) if (!(HEAP32[26900] & 1)) {
  if (HEAP32[26050] | 0) if ((_elapsed(104204) | 0) <= 500) break;
  HEAP32[26050] = 1;
  _gettimeofday(104204, 0) | 0;
  if (HEAP32[27024] | 0) if (!((HEAP32[26627] | 0) != 0 & (HEAP32[26628] | 0) != 0)) {
   _out_str_cf(HEAP32[26555] | 0);
   break;
  }
  _out_char(7);
 } while (0);
 if (!(_vim_strchr(HEAP32[26905] | 0, 101) | 0)) {
  STACKTOP = i2;
  return;
 }
 _msg_source(HEAP32[27067] | 0);
 _msg_attr(60086, HEAP32[27067] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _nv_goto(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) HEAP32[i4 >> 2] = HEAP32[HEAP32[26773] >> 2]; else HEAP32[i4 >> 2] = 1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] = 1;
 _setpcmark();
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
 if ((HEAP32[i4 >> 2] | 0) < 1) HEAP32[i4 >> 2] = 1; else if ((HEAP32[i4 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[i4 >> 2] = HEAP32[HEAP32[26773] >> 2];
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i4 >> 2];
 _beginline(6);
 STACKTOP = i2;
 return;
}

function _ins_eol(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if (_echeck_abbr((HEAP32[i4 >> 2] | 0) + 256 | 0) | 0) {
  HEAP32[i3 >> 2] = 1;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 if (!(_stop_arrow() | 0)) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 _undisplay_dollar();
 if (HEAP32[10180] & 64 | 0) _replace_push(0);
 _AppendToRedobuff(97581);
 HEAP32[i5 >> 2] = _open_line(1, 0, HEAP32[25203] | 0) | 0;
 HEAP32[25203] = 0;
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _truncate_spaces(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = (_strlen(HEAP32[i4 >> 2] | 0) | 0) - 1;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) < 0) {
   i2 = 8;
   break;
  }
  if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] | 0 | 0) != 32) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] | 0 | 0) != 9) {
   i2 = 8;
   break;
  }
  if (HEAP32[10180] & 64 | 0) _replace_join(0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
 }
 if ((i2 | 0) == 8) {
  HEAP8[(HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) + 1) >> 0] = 0;
  STACKTOP = i3;
  return;
 }
}

function _ml_close(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _mf_close(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 2 | 0) _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = 0;
 i5 = (HEAP32[i4 >> 2] | 0) + 60 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
 STACKTOP = i3;
 return;
}

function _home_replace_save(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = 3;
 if (HEAP32[i5 >> 2] | 0) {
  i2 = _strlen(HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i2;
 }
 HEAP32[i6 >> 2] = _alloc(HEAP32[i7 >> 2] | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 _home_replace(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 1);
 i8 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _flush_buffers(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _init_typebuf();
 _start_stuff();
 do {} while ((_read_readbuffers(1) | 0) != 0);
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[26820] = (HEAP32[26820] | 0) + (HEAP32[26822] | 0);
  HEAP32[26821] = (HEAP32[26821] | 0) - (HEAP32[26822] | 0);
  HEAP32[26822] = 0;
  HEAP32[26823] = 0;
  HEAP32[26811] = 0;
  HEAP32[26824] = 0;
  STACKTOP = i2;
  return;
 }
 do {} while ((_inchar(HEAP32[26817] | 0, (HEAP32[26819] | 0) - 1 | 0, 10) | 0) != 0);
 HEAP32[26820] = 50;
 HEAP32[26821] = 0;
 HEAP32[26822] = 0;
 HEAP32[26823] = 0;
 HEAP32[26811] = 0;
 HEAP32[26824] = 0;
 STACKTOP = i2;
 return;
}

function _save_current_state(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[26710];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = HEAP32[26806];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = HEAP32[26711];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = HEAP32[10180];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] = HEAP32[26883];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = HEAP32[26796];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = HEAP32[26797];
 HEAP32[26710] = 0;
 HEAP32[26806] = 0;
 HEAP32[26883] = 0;
 _save_typeahead((HEAP32[i3 >> 2] | 0) + 28 | 0);
 STACKTOP = i2;
 return HEAP32[(HEAP32[i3 >> 2] | 0) + 28 + 36 >> 2] | 0;
}

function _exec_normal(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i5 = i4 + 88 | 0;
 i6 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 + 84 >> 2] = i2;
 _clear_oparg(i6);
 HEAP32[26796] = 0;
 L1 : while (1) {
  do if (_stuff_empty() | 0) if (HEAP32[i5 >> 2] | 0) if ((HEAP32[26821] | 0) > 0) break; else {
   i3 = 8;
   break L1;
  } else {
   i2 = (_typebuf_typed() | 0) == 0;
   if (i2 & (HEAP32[26821] | 0) > 0) break; else {
    i3 = 8;
    break L1;
   }
  } while (0);
  if (!((HEAP32[26834] | 0) != 0 ^ 1)) {
   i3 = 8;
   break;
  }
  _update_topline_cursor();
  _normal_cmd(i6, 1);
 }
 if ((i3 | 0) == 8) {
  STACKTOP = i4;
  return;
 }
}

function _concat_str(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = _strlen(HEAP32[i4 >> 2] | 0) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i6 >> 2] = _alloc(i2 + (_strlen(HEAP32[i5 >> 2] | 0) | 0) + 1 | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 _strcpy(HEAP32[i6 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
 _strcpy((HEAP32[i6 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) | 0, HEAP32[i5 >> 2] | 0) | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _buf_write_all(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = HEAP32[26773];
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i6 >> 2] = _buf_write(i2 | 0, HEAP32[i2 + 68 >> 2] | 0, HEAP32[i2 + 76 >> 2] | 0, 1, HEAP32[HEAP32[i4 >> 2] >> 2] | 0, 0, 0, HEAP32[i5 >> 2] | 0, 1, 0) | 0;
 if ((HEAP32[26773] | 0) == (HEAP32[i7 >> 2] | 0)) {
  i8 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 _msg_source(HEAP32[27067] | 0);
 _msg(45050) | 0;
 i8 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _catch_signals(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 while (1) {
  if ((HEAP32[29472 + ((HEAP32[i6 >> 2] | 0) * 12 | 0) >> 2] | 0) == -1) break;
  if (HEAP8[29472 + ((HEAP32[i6 >> 2] | 0) * 12 | 0) + 8 >> 0] | 0) _signal(HEAP32[29472 + ((HEAP32[i6 >> 2] | 0) * 12 | 0) >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0; else if ((HEAP32[i5 >> 2] | 0) != (-1 | 0)) _signal(HEAP32[29472 + ((HEAP32[i6 >> 2] | 0) * 12 | 0) >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 STACKTOP = i3;
 return;
}

function _save_search_patterns() {
 var i1 = 0;
 i1 = HEAP32[26467] | 0;
 HEAP32[26467] = i1 + 1;
 if (i1 | 0) return;
 HEAP32[26468] = HEAP32[7516];
 HEAP32[26469] = HEAP32[7517];
 HEAP32[26470] = HEAP32[7518];
 HEAP32[26471] = HEAP32[7519];
 HEAP32[26472] = HEAP32[7520];
 HEAP32[26473] = HEAP32[7521];
 HEAP32[26474] = HEAP32[7522];
 if (HEAP32[7516] | 0) HEAP32[26468] = _vim_strsave(HEAP32[7516] | 0) | 0;
 HEAP32[26475] = HEAP32[7523];
 HEAP32[26476] = HEAP32[7524];
 HEAP32[26477] = HEAP32[7525];
 HEAP32[26478] = HEAP32[7526];
 HEAP32[26479] = HEAP32[7527];
 HEAP32[26480] = HEAP32[7528];
 HEAP32[26481] = HEAP32[7529];
 if (!(HEAP32[7523] | 0)) return;
 HEAP32[26475] = _vim_strsave(HEAP32[7523] | 0) | 0;
 return;
}

function _threebyte_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8;
 i2 = i1 + 2 | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 i5 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (i4 & 255) << 8;
 i1 = i4 << 24 >> 24 == 0;
 if ((i5 | 0) == (i3 | 0) | i1) {
  i6 = i2;
  i7 = i1;
 } else {
  i1 = i2;
  i2 = i5;
  while (1) {
   i5 = i1 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   i2 = (i2 | i4 & 255) << 8;
   i8 = i4 << 24 >> 24 == 0;
   if ((i2 | 0) == (i3 | 0) | i8) {
    i6 = i5;
    i7 = i8;
    break;
   } else i1 = i5;
  }
 }
 return (i7 ? 0 : i6 + -2 | 0) | 0;
}

function _alist_check_arg_idx() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i3 >> 2] | 0)) break;
  if ((HEAP32[i3 >> 2] | 0) == (HEAP32[26886] | 0)) i4 = HEAP32[26887] | 0; else i4 = HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i2 >> 2] = i4;
  while (1) {
   if (!(HEAP32[i2 >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[i2 >> 2] | 0) + 184 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0)) _check_arg_idx(HEAP32[i2 >> 2] | 0);
   HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2];
  }
  HEAP32[i3 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 }
 STACKTOP = i1;
 return;
}

function _nv_normal(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) != 14) if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) != 7) {
  _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 _clearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 if ((HEAP32[26806] | 0) != 0 & (HEAP32[26701] | 0) != 0) HEAP32[26700] = 1;
 HEAP32[26806] = 0;
 if (HEAP32[26788] | 0) {
  _end_visual_mode();
  _redraw_curbuf_later(20);
 }
 if (!(HEAP32[26883] | 0 ? (HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) == 7 : 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26806] = 97;
 STACKTOP = i2;
 return;
}

function _unchanged(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 4 | 0;
 i6 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 108 >> 2] | 0) i3 = 4; else if (HEAP32[i6 >> 2] | 0) if (_file_ff_differs(HEAP32[i5 >> 2] | 0, 0) | 0) i3 = 4;
 if ((i3 | 0) == 4) {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 108 >> 2] = 0;
  _ml_setflags(HEAP32[i5 >> 2] | 0);
  if (HEAP32[i6 >> 2] | 0) _save_file_ff(HEAP32[i5 >> 2] | 0);
  _check_status(HEAP32[i5 >> 2] | 0);
  HEAP32[26770] = 1;
 }
 i6 = (HEAP32[i5 >> 2] | 0) + 112 + 8 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 STACKTOP = i4;
 return;
}

function ___fflush_unlocked(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = i1 + 20 | 0;
 i4 = i1 + 28 | 0;
 if ((HEAP32[i3 >> 2] | 0) >>> 0 > (HEAP32[i4 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 15](i1, 0, 0) | 0;
  if (!(HEAP32[i3 >> 2] | 0)) i5 = -1; else i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) {
  i2 = i1 + 4 | 0;
  i6 = HEAP32[i2 >> 2] | 0;
  i7 = i1 + 8 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  if (i6 >>> 0 < i8 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i1 + 40 >> 2] & 15](i1, i6 - i8 | 0, 1) | 0;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  i5 = 0;
 }
 return i5 | 0;
}

function _redrawWinline(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i2;
 if (!(HEAP32[(HEAP32[26881] | 0) + 168 >> 2] | 0)) i3 = 3; else if ((HEAP32[(HEAP32[26881] | 0) + 168 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) i3 = 3;
 if ((i3 | 0) == 3) HEAP32[(HEAP32[26881] | 0) + 168 >> 2] = HEAP32[i5 >> 2];
 if (HEAP32[(HEAP32[26881] | 0) + 172 >> 2] | 0) if ((HEAP32[(HEAP32[26881] | 0) + 172 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) {
  _redraw_later(10);
  STACKTOP = i4;
  return;
 }
 HEAP32[(HEAP32[26881] | 0) + 172 >> 2] = HEAP32[i5 >> 2];
 _redraw_later(10);
 STACKTOP = i4;
 return;
}

function _win_valid(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 do if (!(HEAP32[i5 >> 2] | 0)) HEAP32[i4 >> 2] = 0; else {
  HEAP32[i6 >> 2] = HEAP32[26887];
  while (1) {
   if (!(HEAP32[i6 >> 2] | 0)) {
    i2 = 8;
    break;
   }
   if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
    i2 = 6;
    break;
   }
   HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
  }
  if ((i2 | 0) == 6) {
   HEAP32[i4 >> 2] = 1;
   break;
  } else if ((i2 | 0) == 8) {
   HEAP32[i4 >> 2] = 0;
   break;
  }
 } while (0);
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _read_from_input_buf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[26615] | 0)) _fill_input_buf(1);
 if ((HEAP32[i5 >> 2] | 0) > (HEAP32[26615] | 0)) HEAP32[i5 >> 2] = HEAP32[26615];
 _memmove(HEAP32[i4 >> 2] | 0, 113468, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[26615] = (HEAP32[26615] | 0) - (HEAP32[i5 >> 2] | 0);
 if (!(HEAP32[26615] | 0)) {
  i6 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 _memmove(113468, 113468 + (HEAP32[i5 >> 2] | 0) | 0, HEAP32[26615] | 0) | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i3;
 return i6 | 0;
}

function _nfa_save_listids(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = (HEAP32[i4 >> 2] | 0) + 52;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2];
 while (1) {
  i4 = (HEAP32[i6 >> 2] | 0) + -1 | 0;
  HEAP32[i6 >> 2] = i4;
  if ((i4 | 0) < 0) break;
  HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 + 4 >> 2];
  HEAP32[(HEAP32[i7 >> 2] | 0) + 16 + 4 >> 2] = 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 28;
 }
 STACKTOP = i3;
 return;
}

function _buflist_match(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = _fname_match(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 72 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 if (HEAP32[i8 >> 2] | 0) {
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 HEAP32[i8 >> 2] = _fname_match(HEAP32[i5 >> 2] | 0, HEAP32[(HEAP32[i6 >> 2] | 0) + 68 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _re_put_long(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = (HEAP32[i5 >> 2] | 0) >>> 24 & 255;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i1 + 1;
 HEAP8[i1 >> 0] = i2;
 i2 = (HEAP32[i5 >> 2] | 0) >>> 16 & 255;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i1 + 1;
 HEAP8[i1 >> 0] = i2;
 i2 = (HEAP32[i5 >> 2] | 0) >>> 8 & 255;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i1 + 1;
 HEAP8[i1 >> 0] = i2;
 i2 = HEAP32[i5 >> 2] & 255;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i5 + 1;
 HEAP8[i5 >> 0] = i2;
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _compatible_set() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = 0;
 while (1) {
  if (!((_istermoption(15328 + ((HEAP32[i3 >> 2] | 0) * 28 | 0) | 0) | 0) != 0 ^ 1)) break;
  if (HEAP32[26903] | 0 ? (HEAP32[15328 + ((HEAP32[i3 >> 2] | 0) * 28 | 0) + 8 >> 2] & 2048 | 0) != 0 : 0) i1 = 5; else if (!(HEAP32[26903] | 0 ? 1 : (HEAP32[15328 + ((HEAP32[i3 >> 2] | 0) * 28 | 0) + 8 >> 2] & 1024 | 0) != 0)) i1 = 5;
  if ((i1 | 0) == 5) {
   i1 = 0;
   _set_option_default(HEAP32[i3 >> 2] | 0, 1, HEAP32[26903] | 0);
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 _didset_options();
 _didset_options2();
 STACKTOP = i2;
 return;
}

function _v_visop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 do if (_isupper(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) | 0) {
  if ((HEAP32[10179] | 0) != 22) {
   HEAP32[26071] = HEAP32[10179];
   HEAP32[10179] = 86;
   break;
  }
  if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) != 67) if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) != 68) break;
  HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647;
 } while (0);
 i1 = HEAPU8[(_vim_strchr(61890, HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) | 0) + 1 >> 0] | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = i1;
 _nv_operator(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _u_update_save_nr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[i3 >> 2] | 0) + 524 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 536 >> 2] = HEAP32[i1 + 524 >> 2];
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 508 >> 2];
 if (HEAP32[i4 >> 2] | 0) HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2]; else HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 504 >> 2];
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 280 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 524 >> 2];
 STACKTOP = i2;
 return;
}

function _vim_strnsize(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) {
   i3 = 5;
   break;
  }
  i2 = (HEAP32[i6 >> 2] | 0) + -1 | 0;
  HEAP32[i6 >> 2] = i2;
  if ((i2 | 0) < 0) {
   i3 = 5;
   break;
  }
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + 1;
  i1 = _byte2cells(HEAPU8[i2 >> 0] | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i1;
 }
 if ((i3 | 0) == 5) {
  STACKTOP = i4;
  return HEAP32[i7 >> 2] | 0;
 }
 return 0;
}

function _nv_Replace(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26788] | 0) {
  HEAP32[i1 + 8 >> 2] = 99;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 0;
  HEAP32[26071] = HEAP32[10179];
  HEAP32[10179] = 86;
  _nv_operator(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (_checkclearopq(HEAP32[i1 >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[26773] | 0) + 664 >> 2] | 0) {
  i1 = HEAP32[i3 >> 2] | 0;
  _invoke_edit(i1 | 0, 0, HEAP32[i1 + 32 >> 2] | 0 ? 86 : 82, 0);
  STACKTOP = i2;
  return;
 } else {
  _emsg(92640) | 0;
  STACKTOP = i2;
  return;
 }
}

function _buf_valid(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[26772];
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) {
   i2 = 6;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
   i2 = 4;
   break;
  }
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 52 >> 2];
 }
 if ((i2 | 0) == 4) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _st_pop(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[HEAP32[i5 >> 2] >> 2] = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + -8;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 if ((HEAP32[i7 >> 2] | 0) >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = HEAP32[26389];
  HEAP32[i1 + 4 >> 2] = HEAP32[26390];
  STACKTOP = i4;
  return;
 } else {
  i6 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  STACKTOP = i4;
  return;
 }
}

function _apply_autocmds_exarg(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i8 = i7 + 20 | 0;
 i9 = i7 + 16 | 0;
 i10 = i7 + 12 | 0;
 i11 = i7 + 8 | 0;
 i12 = i7 + 4 | 0;
 i13 = i7;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i3;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = i6;
 i6 = _apply_autocmds_group(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, -3, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _n_start_visual_mode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[10179] = HEAP32[i3 >> 2];
 HEAP32[26788] = 1;
 HEAP32[27119] = 1;
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[27117] = HEAP32[i3 >> 2];
 HEAP32[27118] = HEAP32[i3 + 4 >> 2];
 _setmouse();
 if ((HEAP32[26988] | 0) != 0 & (HEAP32[26809] | 0) == 0) HEAP32[26699] = 1;
 HEAP32[27105] = 0;
 if ((HEAP32[(HEAP32[26881] | 0) + 160 >> 2] | 0) >= 20) {
  STACKTOP = i2;
  return;
 }
 i3 = HEAP32[26881] | 0;
 HEAP32[i3 + 44 >> 2] = HEAP32[i3 + 24 >> 2];
 i3 = HEAP32[26881] | 0;
 HEAP32[i3 + 56 >> 2] = HEAP32[i3 + 24 >> 2];
 STACKTOP = i2;
 return;
}

function _start_redo_ins() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 if (!(_read_redo(1, 0) | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 _start_stuff();
 while (1) {
  i6 = _read_redo(0, 0) | 0;
  HEAP32[i4 >> 2] = i6;
  if (!i6) break;
  if (_vim_strchr(56155, HEAP32[i4 >> 2] | 0) | 0) {
   i1 = 6;
   break;
  }
 }
 if ((i1 | 0) == 6) if ((HEAP32[i4 >> 2] | 0) == 79 | (HEAP32[i4 >> 2] | 0) == 111) _add_buff(101948, 97581, -1);
 _copy_redo(0);
 HEAP32[25628] = 1;
 HEAP32[i3 >> 2] = 1;
 i5 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _ignorecase_opt(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 if (!((((HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[26736] | 0) != 0) ^ 1) & (HEAP32[i7 >> 2] | 0) != 0)) {
  HEAP32[26736] = 0;
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 HEAP32[i8 >> 2] = ((_pat_has_uppercase(HEAP32[i5 >> 2] | 0) | 0) != 0 ^ 1) & 1;
 HEAP32[26736] = 0;
 i9 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _get_register_name(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAP32[i4 >> 2] | 0) == -1) HEAP32[i3 >> 2] = 34; else {
  i1 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[i4 >> 2] | 0) < 10) {
   HEAP32[i3 >> 2] = i1 + 48;
   break;
  }
  if ((i1 | 0) == 36) {
   HEAP32[i3 >> 2] = 45;
   break;
  }
  if ((HEAP32[i4 >> 2] | 0) == 37) {
   HEAP32[i3 >> 2] = 42;
   break;
  }
  if ((HEAP32[i4 >> 2] | 0) == 37) {
   HEAP32[i3 >> 2] = 43;
   break;
  } else {
   HEAP32[i3 >> 2] = (HEAP32[i4 >> 2] | 0) + 97 - 10;
   break;
  }
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _WaitForCharOrMouse(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 if (!(HEAP32[i8 >> 2] | 0)) if (_input_available() | 0) {
  HEAP32[i5 >> 2] = 1;
  i10 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i10 | 0;
 }
 HEAP32[i9 >> 2] = _RealWaitForChar(HEAP32[26833] | 0, HEAP32[i6 >> 2] | 0, 0, HEAP32[i7 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 i10 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i4;
 return i10 | 0;
}

function _valid_tabpage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) {
   i2 = 6;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i5 >> 2] | 0)) {
   i2 = 4;
   break;
  }
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
 }
 if ((i2 | 0) == 4) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else if ((i2 | 0) == 6) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _nfa_regexec_nl(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[26312] = HEAP32[i6 >> 2];
 HEAP32[26313] = 0;
 HEAP32[26321] = 0;
 HEAP32[26322] = HEAP32[i9 >> 2];
 HEAP32[26319] = HEAP32[26773];
 HEAP32[26318] = 0;
 HEAP32[26323] = HEAP32[(HEAP32[i6 >> 2] | 0) + 84 >> 2];
 HEAP32[26324] = 0;
 i6 = _nfa_regexec_both(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0, 0) | 0;
 STACKTOP = i5;
 return i6 | 0;
}

function _frame_insert(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] = HEAP32[i4 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] = HEAP32[i5 >> 2];
 i4 = HEAP32[i5 >> 2] | 0;
 i2 = i4 | 0;
 i1 = i4 | 0;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] | 0) {
  HEAP32[(HEAP32[i1 + 28 >> 2] | 0) + 24 >> 2] = i2;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + 32 >> 2] = i2;
  STACKTOP = i3;
  return;
 }
}

function _win_init_empty(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _redraw_win_later(HEAP32[i3 >> 2] | 0, 40);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 152 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 + 4 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 300 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 300 + 4 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 308 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 308 + 4 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 144 >> 2] = 2;
 STACKTOP = i2;
 return;
}

function _regnode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26453];
 if ((HEAP32[i4 >> 2] | 0) == (-1 | 0)) {
  HEAP32[26404] = (HEAP32[26404] | 0) + 3;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  i1 = HEAP32[i3 >> 2] & 255;
  i3 = HEAP32[26453] | 0;
  HEAP32[26453] = i3 + 1;
  HEAP8[i3 >> 0] = i1;
  i1 = HEAP32[26453] | 0;
  HEAP32[26453] = i1 + 1;
  HEAP8[i1 >> 0] = 0;
  i1 = HEAP32[26453] | 0;
  HEAP32[26453] = i1 + 1;
  HEAP8[i1 >> 0] = 0;
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _gui_remove_scrollbars() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= 3) break;
  L4 : do if ((HEAP32[i2 >> 2] | 0) == 2) _gui_mch_enable_scrollbar(106604, 0); else {
   HEAP32[i3 >> 2] = HEAP32[26887];
   while (1) {
    if (!(HEAP32[i3 >> 2] | 0)) break L4;
    _gui_do_scrollbar(HEAP32[i3 >> 2] | 0, HEAP32[i2 >> 2] | 0, 0);
    HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
   }
  } while (0);
  HEAP32[(HEAP32[26886] | 0) + 36 + (HEAP32[i2 >> 2] << 2) >> 2] = -1;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i1;
 return;
}

function _ex_wnext(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0;
 i5 = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0;
 if ((HEAPU8[(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) + 1 >> 0] | 0 | 0) == 110) HEAP32[i4 >> 2] = i1 + i5; else HEAP32[i4 >> 2] = i1 - i5;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = HEAP32[HEAP32[26773] >> 2];
 if (!(_do_write(HEAP32[i3 >> 2] | 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_argfile(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _bt_regexec_nl(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[26312] = HEAP32[i6 >> 2];
 HEAP32[26313] = 0;
 HEAP32[26321] = 0;
 HEAP32[26322] = HEAP32[i9 >> 2];
 HEAP32[26319] = HEAP32[26773];
 HEAP32[26318] = 0;
 HEAP32[26323] = HEAP32[(HEAP32[i6 >> 2] | 0) + 84 >> 2];
 HEAP32[26324] = 0;
 i6 = _bt_regexec_both(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0, 0) | 0;
 STACKTOP = i5;
 return i6 | 0;
}

function _alloc_typebuf() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[26817] = _alloc(265) | 0;
 HEAP32[26818] = _alloc(265) | 0;
 if ((HEAP32[26817] | 0) == 0 | (HEAP32[26818] | 0) == 0) {
  _free_typebuf();
  HEAP32[i2 >> 2] = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 } else {
  HEAP32[26819] = 265;
  HEAP32[26820] = 54;
  HEAP32[26821] = 0;
  HEAP32[26822] = 0;
  HEAP32[26823] = 0;
  HEAP32[26824] = 0;
  i4 = (HEAP32[26825] | 0) + 1 | 0;
  HEAP32[26825] = i4;
  HEAP32[26825] = (i4 | 0) == 0 ? 1 : i4;
  HEAP32[i2 >> 2] = 1;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}

function _mch_delay(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] | 0)) {
  _WaitForChar(HEAP32[i4 >> 2] | 0, 0, 0) | 0;
  STACKTOP = i3;
  return;
 }
 HEAP32[26286] = 1;
 HEAP32[i6 >> 2] = HEAP32[26287];
 if ((HEAP32[26287] | 0) == 2) _settmode(1);
 HEAP32[i7 >> 2] = (HEAP32[i4 >> 2] | 0) / 1e3 | 0;
 HEAP32[i7 + 4 >> 2] = ((HEAP32[i4 >> 2] | 0) % 1e3 | 0) * 1e6;
 _nanosleep(i7 | 0, 0) | 0;
 _settmode(HEAP32[i6 >> 2] | 0);
 HEAP32[26286] = 0;
 STACKTOP = i3;
 return;
}

function _gui_mch_draw_string(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 16 | 0;
 i8 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i10 = i6 + 4 | 0;
 i11 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 _vimwasm_draw_string(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] & 1 | 0, HEAP32[i11 >> 2] & 2 | 0, HEAP32[i11 >> 2] & 4 | 0, HEAP32[i11 >> 2] & 8 | 0, HEAP32[i11 >> 2] & 64 | 0);
 STACKTOP = i6;
 return;
}

function _fstat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 40 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4;
 i8 = i2;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i7 + 4 >> 2] = i8;
 i2 = ___syscall197(197, i7 | 0) | 0;
 if ((i2 | 0) == -9) {
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = 1;
  if ((___syscall221(221, i6 | 0) | 0) < 0) i3 = 3; else {
   ___procfdname(i6, i1);
   HEAP32[i5 >> 2] = i6;
   HEAP32[i5 + 4 >> 2] = i8;
   i9 = ___syscall_ret(___syscall195(195, i5 | 0) | 0) | 0;
  }
 } else i3 = 3;
 if ((i3 | 0) == 3) i9 = ___syscall_ret(i2) | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _ex_winsize(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 i6 = i2 + 4 | 0;
 i7 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 HEAP32[i4 >> 2] = _getdigits(i6) | 0;
 HEAP32[i6 >> 2] = _skipwhite(HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 >> 2] = _getdigits(i6) | 0;
 if (HEAPU8[HEAP32[i7 >> 2] >> 0] | 0 | 0) if (!(HEAPU8[HEAP32[i6 >> 2] >> 0] | 0)) {
  _set_shellsize(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 1);
  STACKTOP = i2;
  return;
 }
 _emsg(50281) | 0;
 STACKTOP = i2;
 return;
}

function _bt_nofile(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 do if (HEAP32[i3 >> 2] | 0) {
  if ((HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] >> 0] | 0 | 0) == 110) if ((HEAPU8[(HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] | 0) + 2 >> 0] | 0 | 0) == 102) {
   i4 = 1;
   break;
  }
  if ((HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] >> 0] | 0 | 0) == 97) i4 = 1; else if ((HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] >> 0] | 0 | 0) == 116) i4 = 1; else i4 = (HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] >> 0] | 0 | 0) == 112;
 } else i4 = 0; while (0);
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _color_name2handle(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if (!(_strcmp(HEAP32[i4 >> 2] | 0, 94449) | 0)) HEAP32[i3 >> 2] = -11111; else {
  if (_strcasecmp(HEAP32[i4 >> 2] | 0, 76657) | 0) if (_strcasecmp(HEAP32[i4 >> 2] | 0, 76914) | 0) {
   if (_strcasecmp(HEAP32[i4 >> 2] | 0, 76683) | 0) if (_strcasecmp(HEAP32[i4 >> 2] | 0, 76925) | 0) {
    HEAP32[i3 >> 2] = _gui_get_color(HEAP32[i4 >> 2] | 0) | 0;
    break;
   }
   HEAP32[i3 >> 2] = HEAP32[26674];
   break;
  }
  HEAP32[i3 >> 2] = HEAP32[26675];
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _get_user_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 do if (!(HEAP32[26059] | 0)) {
  if (_mch_get_user_name(i2, HEAP32[i6 >> 2] | 0) | 0) {
   HEAP32[26059] = _vim_strsave(HEAP32[i5 >> 2] | 0) | 0;
   break;
  }
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else _vim_strncpy(i2, HEAP32[26059] | 0, (HEAP32[i6 >> 2] | 0) - 1 | 0); while (0);
 HEAP32[i4 >> 2] = 1;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _autowrite_all() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 12 | 0;
 i3 = i1;
 if (!(((HEAP32[26890] | 0) != 0 | (HEAP32[26891] | 0) != 0) & (HEAP32[27039] | 0) != 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i2 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i2 >> 2] | 0)) break;
  if (_bufIsChanged(HEAP32[i2 >> 2] | 0) | 0) if (!(HEAP32[(HEAP32[i2 >> 2] | 0) + 676 >> 2] | 0)) {
   _set_bufref(i3, HEAP32[i2 >> 2] | 0);
   _buf_write_all(HEAP32[i2 >> 2] | 0, 0) | 0;
   if (!(_bufref_valid(i3) | 0)) HEAP32[i2 >> 2] = HEAP32[26771];
  }
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2];
 }
 STACKTOP = i1;
 return;
}

function _nv_down(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26698] & 2 | 0) {
  HEAP32[i1 + 32 >> 2] = 1;
  _nv_page(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] = 1;
 i1 = (_cursor_down(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) == 0 & 1) | 0) == 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  _clearopbeep(HEAP32[i4 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[i4 + 32 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _beginline(5);
 STACKTOP = i2;
 return;
}

function _restore_parse_state(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26392] = HEAP32[HEAP32[i3 >> 2] >> 2];
 HEAP32[26393] = HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2];
 HEAP32[26398] = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2];
 HEAP32[26396] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
 HEAP32[26397] = HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2];
 HEAP32[26399] = HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2];
 HEAP32[26394] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
 HEAP32[26395] = HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2];
 HEAP32[26387] = HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2];
 STACKTOP = i2;
 return;
}

function _exit_scroll() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1;
 if (HEAP32[26787] | 0) {
  STACKTOP = i1;
  return;
 }
 if (!((HEAP32[26724] | 0) != 0 | (HEAP32[26711] | 0) != 0)) {
  _restore_cterm_colors();
  _msg_clr_eos_force();
  _windgoto((HEAP32[10173] | 0) - 1 | 0, 0);
  STACKTOP = i1;
  return;
 }
 if (!(_msg_use_printf() | 0)) {
  _out_char(10);
  STACKTOP = i1;
  return;
 }
 if (HEAP32[26715] | 0) {
  HEAP32[i3 >> 2] = 97581;
  _printf(97576, i3) | 0;
  STACKTOP = i1;
  return;
 } else {
  i3 = HEAP32[10211] | 0;
  HEAP32[i2 >> 2] = 79006;
  _fprintf(i3, 97576, i2) | 0;
  STACKTOP = i1;
  return;
 }
}

function _setaltfname(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = _buflist_new(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
 if ((HEAP32[i8 >> 2] | 0) == 0 | (HEAP32[27130] | 0) != 0) {
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 HEAP32[(HEAP32[26881] | 0) + 180 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 92 >> 2];
 i9 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function _check_auto_format(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 32;
 if (!(HEAP32[25210] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i5 >> 2] = _gchar_cursor() | 0;
 if (!((HEAP32[i5 >> 2] | 0) == 32 | (HEAP32[i5 >> 2] | 0) == 9)) {
  HEAP32[25210] = 0;
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[i3 >> 2] | 0)) {
  _inc_cursor() | 0;
  HEAP32[i4 >> 2] = _gchar_cursor() | 0;
  _dec_cursor() | 0;
 }
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _del_char(0) | 0;
 HEAP32[25210] = 0;
 STACKTOP = i2;
 return;
}

function _nv_up(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26698] & 2 | 0) {
  HEAP32[i1 + 32 >> 2] = -1;
  _nv_page(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] = 1;
 i1 = (_cursor_up(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) == 0 & 1) | 0) == 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  _clearopbeep(HEAP32[i4 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[i4 + 32 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _beginline(5);
 STACKTOP = i2;
 return;
}

function _ins_down(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 _undisplay_dollar();
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if ((_cursor_down(1, 1) | 0) != 1) {
  _vim_beep(4);
  STACKTOP = i2;
  return;
 }
 if (HEAP32[i3 >> 2] | 0) _coladvance(_getvcol_nolist(108488) | 0) | 0;
 if ((HEAP32[i5 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) _redraw_later(10);
 _start_arrow(i4);
 STACKTOP = i2;
 return;
}

function _save_parse_state(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[26392];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = HEAP32[26393];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = HEAP32[26398];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = HEAP32[26396];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] = HEAP32[26397];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = HEAP32[26399];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = HEAP32[26394];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = HEAP32[26395];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = HEAP32[26387];
 STACKTOP = i2;
 return;
}

function _find_wininfo(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 168 >> 2];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[26881] | 0)) break;
  HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 }
 if (HEAP32[i5 >> 2] | 0) {
  i6 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 168 >> 2];
 i6 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i3;
 return i6 | 0;
}

function _mf_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _vim_free(HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] | 0);
 _mf_rem_hash(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 _mf_rem_used(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) < 0) {
  _vim_free(HEAP32[i5 >> 2] | 0);
  i2 = (HEAP32[i4 >> 2] | 0) + 584 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
  STACKTOP = i3;
  return;
 } else {
  _mf_ins_free(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
}

function _ins_up(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[(HEAP32[26881] | 0) + 68 >> 2];
 _undisplay_dollar();
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if ((_cursor_up(1, 1) | 0) != 1) {
  _vim_beep(4);
  STACKTOP = i2;
  return;
 }
 if (HEAP32[i3 >> 2] | 0) _coladvance(_getvcol_nolist(108488) | 0) | 0;
 if ((HEAP32[i5 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 68 >> 2] | 0)) _redraw_later(10);
 _start_arrow(i4);
 STACKTOP = i2;
 return;
}

function _cleanup_subexpr() {
 var i1 = 0, i2 = 0;
 if (!(HEAP32[26332] | 0)) return;
 if (!(HEAP32[26312] | 0)) {
  i1 = HEAP32[26316] | 0;
  i2 = i1 + 80 | 0;
  do {
   HEAP32[i1 >> 2] = -1;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  i1 = HEAP32[26317] | 0;
  i2 = i1 + 80 | 0;
  do {
   HEAP32[i1 >> 2] = -1;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
 } else {
  i1 = HEAP32[26314] | 0;
  i2 = i1 + 40 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  i1 = HEAP32[26315] | 0;
  i2 = i1 + 40 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
 }
 HEAP32[26332] = 0;
 return;
}

function _nv_record(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) == 9) {
  HEAP32[i1 + 8 >> 2] = 103;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 113;
  _nv_operator(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 i4 = (_checkclearop(HEAP32[i1 >> 2] | 0) | 0) == 0;
 if (!(i4 & (HEAP32[26801] | 0) == 0)) {
  STACKTOP = i2;
  return;
 }
 if (_do_record(HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _echeck_abbr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[26961] | 0) != 0 | (HEAP32[10181] | 0) != 0 | (HEAP32[27126] | 0) != 0) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  i1 = HEAP32[i4 >> 2] | 0;
  i4 = _ml_get_curline() | 0;
  i6 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i3 >> 2] = _check_abbr(i1, i4, HEAP32[i6 + 4 >> 2] | 0, (HEAP32[i6 >> 2] | 0) == (HEAP32[27122] | 0) ? HEAP32[27123] | 0 : 0) | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _alloc_tabpage() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i3 >> 2] = _alloc_clear(56) | 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 0;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) >= 3) break;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 36 + (HEAP32[i4 >> 2] << 2) >> 2] = -1;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = HEAP32[26875];
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 i5 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _win_goto(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_text_locked() | 0) {
  _beep_flush();
  _text_locked_msg();
  STACKTOP = i2;
  return;
 }
 if (_curbuf_locked() | 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[26773] | 0)) _reset_VIsual_and_resel(); else if (HEAP32[26788] | 0) {
  i1 = (HEAP32[i3 >> 2] | 0) + 24 | 0;
  i4 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 }
 HEAP32[26757] = 1;
 _win_enter(HEAP32[i3 >> 2] | 0, 1);
 STACKTOP = i2;
 return;
}

function _report_default_term(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 i6 = i2 + 20 | 0;
 HEAP32[i6 >> 2] = i1;
 i1 = HEAP32[10211] | 0;
 HEAP32[i5 >> 2] = 78986;
 _fprintf(i1, 97576, i5) | 0;
 i5 = HEAP32[10211] | 0;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 _fprintf(i5, 97576, i4) | 0;
 i4 = HEAP32[10211] | 0;
 HEAP32[i3 >> 2] = 79002;
 _fprintf(i4, 97576, i3) | 0;
 if (HEAP32[26810] | 0) {
  STACKTOP = i2;
  return;
 }
 _screen_start();
 _out_flush();
 if (_is_not_a_term() | 0) {
  STACKTOP = i2;
  return;
 }
 _ui_delay(2e3, 1);
 STACKTOP = i2;
 return;
}

function _fchmod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i4 + 40 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i7 + 4 >> 2] = i2;
 i8 = ___syscall94(94, i7 | 0) | 0;
 if ((i8 | 0) == -9) {
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = 1;
  if ((___syscall221(221, i6 | 0) | 0) < 0) i3 = 3; else {
   ___procfdname(i6, i1);
   HEAP32[i5 >> 2] = i6;
   HEAP32[i5 + 4 >> 2] = i2;
   i9 = ___syscall_ret(___syscall15(15, i5 | 0) | 0) | 0;
  }
 } else i3 = 3;
 if ((i3 | 0) == 3) i9 = ___syscall_ret(i8) | 0;
 STACKTOP = i4;
 return i9 | 0;
}

function ___strerror_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = 0;
 i4 = 0;
 while (1) {
  if ((HEAPU8[98581 + i4 >> 0] | 0) == (i1 | 0)) {
   i3 = 4;
   break;
  }
  i5 = i4 + 1 | 0;
  if ((i5 | 0) == 87) {
   i6 = 87;
   i3 = 5;
   break;
  } else i4 = i5;
 }
 if ((i3 | 0) == 4) if (!i4) i7 = 98669; else {
  i6 = i4;
  i3 = 5;
 }
 if ((i3 | 0) == 5) {
  i3 = 98669;
  i4 = i6;
  while (1) {
   i6 = i3;
   do {
    i1 = i6;
    i6 = i6 + 1 | 0;
   } while ((HEAP8[i1 >> 0] | 0) != 0);
   i4 = i4 + -1 | 0;
   if (!i4) {
    i7 = i6;
    break;
   } else i3 = i6;
  }
 }
 return ___lctrans(i7, HEAP32[i2 + 20 >> 2] | 0) | 0;
}

function _out_str_cf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAPU8[HEAP32[i3 >> 2] >> 0] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[26627] | 0) {
  _out_str_nf(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[26596] | 0) > 2027) _out_flush();
 while (1) {
  if (!(HEAP8[HEAP32[i3 >> 2] >> 0] | 0)) break;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i1 + 1;
  _out_char_nf(HEAPU8[i1 >> 0] | 0);
 }
 if (!(HEAP32[27042] | 0)) {
  STACKTOP = i2;
  return;
 }
 _out_flush();
 STACKTOP = i2;
 return;
}

function _cstrncmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i6 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
 if (HEAP32[26323] | 0) {
  HEAP32[i8 >> 2] = _strncasecmp(i3, i5, i6) | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else {
  HEAP32[i8 >> 2] = _strncmp(i3, i5, i6) | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _out_str(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAPU8[HEAP32[i3 >> 2] >> 0] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[26627] | 0) {
  _out_str_nf(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[26596] | 0) > 2027) _out_flush();
 while (1) {
  if (!(HEAP8[HEAP32[i3 >> 2] >> 0] | 0)) break;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i1 + 1;
  _out_char_nf(HEAPU8[i1 >> 0] | 0);
 }
 if (!(HEAP32[27042] | 0)) {
  STACKTOP = i2;
  return;
 }
 _out_flush();
 STACKTOP = i2;
 return;
}

function _syn_id2colors(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i5 >> 2] = _syn_get_final_id(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = (HEAP32[26490] | 0) + (((HEAP32[i5 >> 2] | 0) - 1 | 0) * 96 | 0);
 HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2];
 HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 52 >> 2];
 STACKTOP = i4;
 return HEAP32[(HEAP32[i8 >> 2] | 0) + 72 >> 2] | 0;
}

function _copy_sub(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) <= 0) {
  STACKTOP = i3;
  return;
 }
 i2 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
 if (!(HEAP32[26312] | 0)) {
  _memmove(i2 | 0, (HEAP32[i5 >> 2] | 0) + 4 | 0, HEAP32[HEAP32[i5 >> 2] >> 2] << 4 | 0) | 0;
  STACKTOP = i3;
  return;
 } else {
  _memmove(i2 | 0, (HEAP32[i5 >> 2] | 0) + 4 | 0, HEAP32[HEAP32[i5 >> 2] >> 2] << 3 | 0) | 0;
  STACKTOP = i3;
  return;
 }
}

function _nfa_restore_listids(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = (HEAP32[i4 >> 2] | 0) + 52;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2];
 while (1) {
  i4 = (HEAP32[i6 >> 2] | 0) + -1 | 0;
  HEAP32[i6 >> 2] = i4;
  if ((i4 | 0) < 0) break;
  HEAP32[(HEAP32[i7 >> 2] | 0) + 16 + 4 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + (HEAP32[i6 >> 2] << 2) >> 2];
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 28;
 }
 STACKTOP = i3;
 return;
}

function _ml_check_b0_id(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 98) {
  if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 48) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 99) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 67) if ((HEAPU8[(HEAP32[i4 >> 2] | 0) + 1 >> 0] | 0 | 0) != 100) break;
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 0;
 i5 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _vim_fnamencmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 i3 = HEAP32[i6 >> 2] | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 if (HEAP32[26918] | 0) {
  HEAP32[i5 >> 2] = _strncasecmp(i3, i6, i7) | 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 } else {
  HEAP32[i5 >> 2] = _strncmp(i3, i6, i7) | 0;
  i9 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i4;
  return i9 | 0;
 }
 return 0;
}

function _str2specialbuf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP8[HEAP32[i6 >> 2] >> 0] = 0;
 while (1) {
  if (!(HEAP8[HEAP32[i5 >> 2] >> 0] | 0)) break;
  HEAP32[i8 >> 2] = _str2special(i5, 0) | 0;
  i3 = _strlen(HEAP32[i8 >> 2] | 0) | 0;
  i2 = i3 + (_strlen(HEAP32[i6 >> 2] | 0) | 0) | 0;
  if ((i2 | 0) < (HEAP32[i7 >> 2] | 0)) _strcat(HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
 }
 STACKTOP = i4;
 return;
}

function _redraw_win_later(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (HEAP32[26778] | 0) {
  STACKTOP = i3;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] | 0) >= (HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[(HEAP32[i4 >> 2] | 0) + 160 >> 2] = HEAP32[i5 >> 2];
 if ((HEAP32[i5 >> 2] | 0) >= 40) HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = 0;
 if ((HEAP32[26828] | 0) >= (HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26828] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _mch_exit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26778] = 1;
 if (!(HEAP32[26627] | 0)) {
  _settmode(0);
  i1 = (_swapping_screen() | 0) == 0;
  if (!(i1 | (HEAP32[26724] | 0) != 0)) _exit_scroll();
  _stoptermcap();
  i1 = (_swapping_screen() | 0) == 0;
  if (i1 | (HEAP32[26724] | 0) != 0) _exit_scroll();
  if (HEAP32[26781] | 0) _cursor_on();
 }
 _out_flush();
 _ml_close_all(1);
 _may_core_dump();
 if (!(HEAP32[26627] | 0)) {
  i4 = HEAP32[i3 >> 2] | 0;
  _exit(i4 | 0);
 }
 _gui_exit(HEAP32[i3 >> 2] | 0);
 i4 = HEAP32[i3 >> 2] | 0;
 _exit(i4 | 0);
}

function _win_equal(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if (!(HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = HEAPU8[HEAP32[26910] >> 0];
 i3 = HEAP32[i5 >> 2] | 0;
 i5 = (i3 | 0) == 0 ? HEAP32[26881] | 0 : i3 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i6 = HEAP32[27114] | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i7 = _tabline_height() | 0;
 _win_equal_rec(i5, i3, i6, i2, 0, i7, HEAP32[10174] | 0, HEAP32[(HEAP32[27114] | 0) + 12 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _term_7to8bit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 do if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) == 27) {
  if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) == 91) {
   HEAP32[i4 >> 2] = 155;
   break;
  }
  if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) == 93) {
   HEAP32[i4 >> 2] = 157;
   break;
  }
  if ((HEAPU8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] | 0 | 0) == 79) HEAP32[i4 >> 2] = 143; else i2 = 8;
 } else i2 = 8; while (0);
 if ((i2 | 0) == 8) HEAP32[i4 >> 2] = 0;
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _init_homedir() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26053] | 0) {
  _vim_free(HEAP32[26053] | 0);
  HEAP32[26053] = 0;
 }
 HEAP32[i2 >> 2] = _getenv(60092) | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  STACKTOP = i1;
  return;
 }
 if ((_mch_dirname(HEAP32[26885] | 0, 4096) | 0) == 1) if (!(_mch_chdir(HEAP32[26885] | 0) | 0)) {
  if (!(_mch_chdir(HEAP32[i2 >> 2] | 0) | 0)) if ((_mch_dirname(HEAP32[26882] | 0, 1025) | 0) == 1) HEAP32[i2 >> 2] = HEAP32[26882];
  if (_mch_chdir(HEAP32[26885] | 0) | 0) _emsg(93442) | 0;
 }
 HEAP32[26053] = _vim_strsave(HEAP32[i2 >> 2] | 0) | 0;
 STACKTOP = i1;
 return;
}

function _restore_current_state(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _restore_typeahead((HEAP32[i3 >> 2] | 0) + 28 | 0);
 HEAP32[26710] = HEAP32[HEAP32[i3 >> 2] >> 2];
 HEAP32[26806] = HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2];
 HEAP32[26883] = HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2];
 HEAP32[26796] = HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2];
 HEAP32[26797] = HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2];
 HEAP32[26711] = HEAP32[26711] | HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2];
 HEAP32[10180] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
 _ui_cursor_shape();
 STACKTOP = i2;
 return;
}

function _display_dollar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(_redrawing() | 0)) {
  STACKTOP = i2;
  return;
 }
 _cursor_off();
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i3 >> 2];
 _curs_columns(0);
 if ((HEAP32[(HEAP32[26881] | 0) + 140 >> 2] | 0) < (HEAP32[(HEAP32[26881] | 0) + 100 >> 2] | 0)) {
  _edit_putchar(36, 0);
  HEAP32[10175] = HEAP32[(HEAP32[26881] | 0) + 132 >> 2];
 }
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i2;
 return;
}

function _stop_arrow() {
 var i1 = 0;
 if (HEAP32[27126] | 0) {
  i1 = (HEAP32[26881] | 0) + 24 | 0;
  HEAP32[27122] = HEAP32[i1 >> 2];
  HEAP32[27123] = HEAP32[i1 + 4 >> 2];
  if (!(HEAP32[25201] | 0 ? 1 : (HEAP32[27123] | 0) <= (HEAP32[27125] | 0))) HEAP32[259] = 0;
  HEAP32[25198] = _linetabsize(_ml_get_curline() | 0) | 0;
  if ((_u_save_cursor() | 0) == 1) {
   HEAP32[27126] = 0;
   HEAP32[25201] = 0;
  }
  HEAP32[26792] = 0;
  _ResetRedobuff();
  _AppendToRedobuff(42696);
  HEAP32[25202] = 2;
 } else if (HEAP32[25201] | 0) if ((_u_save_cursor() | 0) == 1) HEAP32[25201] = 0;
 return ((HEAP32[27126] | 0 ? 1 : (HEAP32[25201] | 0) != 0) ? 0 : 1) | 0;
}

function _read_eintr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 while (1) {
  HEAP32[i9 >> 2] = _read(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
  if ((HEAP32[i9 >> 2] | 0) >= 0) {
   i4 = 5;
   break;
  }
  if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 4) {
   i4 = 5;
   break;
  }
 }
 if ((i4 | 0) == 5) {
  STACKTOP = i5;
  return HEAP32[i9 >> 2] | 0;
 }
 return 0;
}

function _getc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) < 0) i2 = 3; else if (!(___lockfile(i1) | 0)) i2 = 3; else {
  i3 = i1 + 4 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < (HEAP32[i1 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i3 >> 2] = i4 + 1;
   i5 = HEAPU8[i4 >> 0] | 0;
  } else i5 = ___uflow(i1) | 0;
  i6 = i5;
 }
 do if ((i2 | 0) == 3) {
  i5 = i1 + 4 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  if (i4 >>> 0 < (HEAP32[i1 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i5 >> 2] = i4 + 1;
   i6 = HEAPU8[i4 >> 0] | 0;
   break;
  } else {
   i6 = ___uflow(i1) | 0;
   break;
  }
 } while (0);
 return i6 | 0;
}

function _win_setminheight() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i5 >> 2] = 1;
 while (1) {
  if ((HEAP32[27035] | 0) <= 0) {
   i1 = 7;
   break;
  }
  HEAP32[i3 >> 2] = (HEAP32[10173] | 0) - (HEAP32[26875] | 0);
  HEAP32[i4 >> 2] = _frame_minheight(HEAP32[27114] | 0, 0) | 0;
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) {
   i1 = 7;
   break;
  }
  HEAP32[27035] = (HEAP32[27035] | 0) + -1;
  if (HEAP32[i5 >> 2] | 0) {
   _emsg(93214) | 0;
   HEAP32[i5 >> 2] = 0;
  }
 }
 if ((i1 | 0) == 7) {
  STACKTOP = i2;
  return;
 }
}

function _restoreRedobuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _free_buff(101908);
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[25477] = HEAP32[i1 >> 2];
 HEAP32[25478] = HEAP32[i1 + 4 >> 2];
 HEAP32[25479] = HEAP32[i1 + 8 >> 2];
 HEAP32[25480] = HEAP32[i1 + 12 >> 2];
 HEAP32[25481] = HEAP32[i1 + 16 >> 2];
 _free_buff(102516);
 i1 = (HEAP32[i3 >> 2] | 0) + 20 | 0;
 HEAP32[25629] = HEAP32[i1 >> 2];
 HEAP32[25630] = HEAP32[i1 + 4 >> 2];
 HEAP32[25631] = HEAP32[i1 + 8 >> 2];
 HEAP32[25632] = HEAP32[i1 + 12 >> 2];
 HEAP32[25633] = HEAP32[i1 + 16 >> 2];
 STACKTOP = i2;
 return;
}

function _set_term_option_alloced(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 1;
 while (1) {
  if (!(HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) >> 2] | 0)) {
   i2 = 6;
   break;
  }
  i6 = HEAP32[i5 >> 2] | 0;
  if ((HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = i6 + 1;
 }
 if ((i2 | 0) == 6) {
  STACKTOP = i3;
  return;
 }
 i2 = 15328 + (i6 * 28 | 0) + 8 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 8;
 STACKTOP = i3;
 return;
}

function _end_visual_mode() {
 var i1 = 0, i2 = 0;
 if ((HEAP32[27099] | 0) != 0 & (HEAP32[27100] | 0) != 0) _clip_auto_select();
 HEAP32[26788] = 0;
 _setmouse();
 HEAP32[26756] = 0;
 HEAP32[(HEAP32[26773] | 0) + 396 + 16 >> 2] = HEAP32[10179];
 i1 = (HEAP32[26773] | 0) + 396 | 0;
 HEAP32[i1 >> 2] = HEAP32[27117];
 HEAP32[i1 + 4 >> 2] = HEAP32[27118];
 i1 = (HEAP32[26773] | 0) + 396 + 8 | 0;
 i2 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[(HEAP32[26773] | 0) + 396 + 20 >> 2] = HEAP32[(HEAP32[26881] | 0) + 32 >> 2];
 _may_clear_cmdline();
 _adjust_cursor_eol();
 return;
}

function ___procfdname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = i1;
 i4 = 100473;
 i5 = i3 + 15 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i4 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i4 = i4 + 1 | 0;
 } while ((i3 | 0) < (i5 | 0));
 if (!i2) {
  HEAP8[i1 + 14 >> 0] = 48;
  HEAP8[i1 + 15 >> 0] = 0;
 } else {
  i4 = i2;
  i3 = 14;
  while (1) {
   i3 = i3 + 1 | 0;
   if (i4 >>> 0 < 10) break; else i4 = (i4 >>> 0) / 10 | 0;
  }
  HEAP8[i1 + i3 >> 0] = 0;
  i4 = i2;
  i2 = i3;
  do {
   i3 = i4;
   i4 = (i4 >>> 0) / 10 | 0;
   i2 = i2 + -1 | 0;
   HEAP8[i1 + i2 >> 0] = i3 - (i4 * 10 | 0) | 48;
  } while (i3 >>> 0 >= 10);
 }
 return;
}

function _sm_gettail(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) break;
  if (_vim_ispathsep(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0) HEAP32[i6 >> 2] = 1; else if (HEAP32[i6 >> 2] | 0) {
   HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i6 >> 2] = 0;
  }
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return HEAP32[i5 >> 2] | 0;
}

function _reg_restore(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[26312] | 0)) {
  if ((HEAP32[26326] | 0) != (HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) {
   HEAP32[26326] = HEAP32[HEAP32[i4 >> 2] >> 2];
   HEAP32[26325] = _reg_getline(HEAP32[26326] | 0) | 0;
  }
  HEAP32[26334] = (HEAP32[26325] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0);
 } else HEAP32[26334] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2];
 STACKTOP = i3;
 return;
}

function _fm_getname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0)) {
  HEAP32[i4 >> 2] = _mark_line(i2, HEAP32[i6 >> 2] | 0) | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else {
  HEAP32[i4 >> 2] = _buflist_nr2name(HEAP32[i2 + 8 >> 2] | 0, 0, 1) | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _clear_sb_text(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 do if (HEAP32[i3 >> 2] | 0) HEAP32[i5 >> 2] = 108924; else if (!(HEAP32[27231] | 0)) {
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i5 >> 2] = (HEAP32[27231] | 0) + 4;
  break;
 } while (0);
 while (1) {
  if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 4 >> 2];
  _vim_free(HEAP32[HEAP32[i5 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[i4 >> 2];
 }
 STACKTOP = i2;
 return;
}

function _regcomp_start(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _initchr(HEAP32[i4 >> 2] | 0);
 if (HEAP32[i5 >> 2] & 1 | 0) HEAP32[26391] = 3; else HEAP32[26391] = 2;
 HEAP32[26401] = HEAP32[i5 >> 2] & 2;
 HEAP32[26402] = HEAP32[i5 >> 2] & 4;
 _get_cpo_flags();
 HEAP32[26403] = 0;
 HEAP32[26387] = 1;
 i5 = 111107;
 i4 = i5 + 10 | 0;
 do {
  HEAP8[i5 >> 0] = 0;
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (i4 | 0));
 HEAP32[26404] = 0;
 HEAP32[26405] = 0;
 HEAP32[26386] = 0;
 STACKTOP = i3;
 return;
}

function _settmode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26627] | 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[26781] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!((HEAP32[i3 >> 2] | 0) != 0 | (HEAP32[26836] | 0) != 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) != 2) _out_str(HEAP32[26593] | 0);
 _out_flush();
 _mch_settmode(HEAP32[i3 >> 2] | 0);
 HEAP32[26836] = HEAP32[i3 >> 2];
 if ((HEAP32[i3 >> 2] | 0) == 2) _setmouse();
 if ((HEAP32[i3 >> 2] | 0) == 2) _out_str(HEAP32[26592] | 0);
 _out_flush();
 STACKTOP = i2;
 return;
}

function _ff_clear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  i1 = _ff_pop(HEAP32[i3 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = i1;
  if (!i1) break;
  _ff_free_stack_element(HEAP32[i4 >> 2] | 0);
 }
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _clip_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 108396;
 while (1) {
  HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[i3 >> 2];
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 8 + 4 >> 2] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] = 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 16 + 4 >> 2] = 0;
  HEAP16[(HEAP32[i4 >> 2] | 0) + 48 >> 1] = 0;
  if ((HEAP32[i4 >> 2] | 0) == 108396) break;
  HEAP32[i4 >> 2] = 108396;
 }
 STACKTOP = i2;
 return;
}

function _buf_same_ino(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 80 >> 2] | 0)) {
  i6 = 0;
  i7 = i6 & 1;
  STACKTOP = i3;
  return i7 | 0;
 }
 if ((HEAP32[HEAP32[i5 >> 2] >> 2] | 0) != (HEAP32[(HEAP32[i4 >> 2] | 0) + 84 >> 2] | 0)) {
  i6 = 0;
  i7 = i6 & 1;
  STACKTOP = i3;
  return i7 | 0;
 }
 i6 = (HEAP32[(HEAP32[i5 >> 2] | 0) + 72 >> 2] | 0) == (HEAP32[(HEAP32[i4 >> 2] | 0) + 88 >> 2] | 0);
 i7 = i6 & 1;
 STACKTOP = i3;
 return i7 | 0;
}

function _vim_is_vt300(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i4 >> 2] = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 if (!(_strncasecmp(HEAP32[i5 >> 2] | 0, 71950, 2) | 0)) if (_vim_strchr(71953, HEAPU8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] | 0) | 0) i7 = 1; else i2 = 5; else i2 = 5;
 if ((i2 | 0) == 5) i7 = (_strcmp(HEAP32[i5 >> 2] | 0, 71959) | 0) == 0;
 HEAP32[i4 >> 2] = i7 & 1;
 i6 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i6 | 0;
}

function _emsgn(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (_emsg_not_now() | 0) {
  HEAP32[i5 >> 2] = 1;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  i2 = HEAP32[26882] | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  _vim_snprintf(i2, 1025, i1, i4) | 0;
  HEAP32[i5 >> 2] = _emsg(HEAP32[26882] | 0) | 0;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function ___toread(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 74 | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i3 + 255 | i3;
 i3 = i1 + 20 | 0;
 i2 = i1 + 28 | 0;
 if ((HEAP32[i3 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i1 + 36 >> 2] & 15](i1, 0, 0) | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(i3 & 4)) {
  i2 = (HEAP32[i1 + 44 >> 2] | 0) + (HEAP32[i1 + 48 >> 2] | 0) | 0;
  HEAP32[i1 + 8 >> 2] = i2;
  HEAP32[i1 + 4 >> 2] = i2;
  i4 = i3 << 27 >> 31;
 } else {
  HEAP32[i1 >> 2] = i3 | 32;
  i4 = -1;
 }
 return i4 | 0;
}

function _realloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!i1) {
  i3 = _malloc(i2) | 0;
  return i3 | 0;
 }
 if (i2 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  i3 = 0;
  return i3 | 0;
 }
 i4 = _try_realloc_chunk(i1 + -8 | 0, i2 >>> 0 < 11 ? 16 : i2 + 11 & -8) | 0;
 if (i4 | 0) {
  i3 = i4 + 8 | 0;
  return i3 | 0;
 }
 i4 = _malloc(i2) | 0;
 if (!i4) {
  i3 = 0;
  return i3 | 0;
 }
 i5 = HEAP32[i1 + -4 >> 2] | 0;
 i6 = (i5 & -8) - ((i5 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i4 | 0, i1 | 0, (i6 >>> 0 < i2 >>> 0 ? i6 : i2) | 0) | 0;
 _free(i1);
 i3 = i4;
 return i3 | 0;
}

function _find_special_key_in_table(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  if (!(HEAP32[11620 + (HEAP32[i4 >> 2] << 3) + 4 >> 2] | 0)) break;
  if ((HEAP32[i3 >> 2] | 0) == (HEAP32[11620 + (HEAP32[i4 >> 2] << 3) >> 2] | 0)) break;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 if (HEAP32[11620 + (HEAP32[i4 >> 2] << 3) + 4 >> 2] | 0) {
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = -1;
 i5 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _ex_redraw(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26814];
 HEAP32[i5 >> 2] = HEAP32[26945];
 HEAP32[26814] = 0;
 HEAP32[26945] = 0;
 _validate_cursor();
 _update_topline();
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) i6 = 50; else i6 = HEAP32[26788] | 0 ? 20 : 0;
 _update_screen(i6) | 0;
 HEAP32[26814] = HEAP32[i4 >> 2];
 HEAP32[26945] = HEAP32[i5 >> 2];
 HEAP32[26711] = 0;
 HEAP32[27043] = 0;
 HEAP32[26721] = 0;
 _out_flush();
 STACKTOP = i2;
 return;
}

function _get_mouse_class(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAPU8[HEAP32[i4 >> 2] >> 0];
 do if ((HEAP32[i5 >> 2] | 0) == 32 | (HEAP32[i5 >> 2] | 0) == 9) HEAP32[i3 >> 2] = 0; else {
  if (_vim_iswordc(HEAP32[i5 >> 2] | 0) | 0) {
   HEAP32[i3 >> 2] = 2;
   break;
  }
  if (HEAP32[i5 >> 2] | 0) if (_vim_strchr(61668, HEAP32[i5 >> 2] | 0) | 0) {
   HEAP32[i3 >> 2] = 1;
   break;
  }
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _clip_copy_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[26788] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[10180] & 1)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _clip_update_selection(HEAP32[i3 >> 2] | 0);
 _clip_free_selection(HEAP32[i3 >> 2] | 0);
 _clip_own_selection(HEAP32[i3 >> 2] | 0);
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) _clip_get_selection(HEAP32[i3 >> 2] | 0);
 _clip_gen_set_selection(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _vim_iswordc_buf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((HEAP32[i5 >> 2] | 0) >= 256) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 if ((HEAP32[i5 >> 2] | 0) > 0) i8 = ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 444 + ((HEAP32[i5 >> 2] | 0) >>> 3) >> 0] | 0) & 1 << (HEAP32[i5 >> 2] & 7) | 0) != 0; else i8 = 0;
 HEAP32[i4 >> 2] = i8 & 1;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _vim_findfile_free_visited_list(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  i5 = HEAP32[i3 >> 2] | 0;
  if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
  _ff_free_visited_list(HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] | 0);
  _vim_free(HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 4 >> 2] | 0);
  _vim_free(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
  HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[i4 >> 2];
 }
 HEAP32[i5 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _mf_hash_find(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) + ((HEAP32[i5 >> 2] & HEAP32[HEAP32[i4 >> 2] >> 2]) << 2) >> 2];
 while (1) {
  if (HEAP32[i6 >> 2] | 0) i7 = (HEAP32[(HEAP32[i6 >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[i5 >> 2] | 0); else i7 = 0;
  i8 = HEAP32[i6 >> 2] | 0;
  if (!i7) break;
  HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
 }
 STACKTOP = i3;
 return i8 | 0;
}

function _char_to_long(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAPU8[(HEAP32[i3 >> 2] | 0) + 3 >> 0];
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << 8;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | (HEAPU8[(HEAP32[i3 >> 2] | 0) + 2 >> 0] | 0);
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << 8;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | (HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0);
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] << 8;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | (HEAPU8[HEAP32[i3 >> 2] >> 0] | 0);
 STACKTOP = i2;
 return HEAP32[i4 >> 2] | 0;
}

function _nv_brace(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 16 >> 2] = 1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = (_findsent(HEAP32[i1 + 32 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0) | 0) == 0;
 i1 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
 if (i4) {
  _clearopbeep(i1);
  STACKTOP = i2;
  return;
 } else {
  _adjust_cursor(i1);
  STACKTOP = i2;
  return;
 }
}

function _nv_regname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) if (_valid_yank_reg(HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0, 0) | 0) {
  HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 + 20 >> 2] = HEAP32[i1 + 24 >> 2];
  STACKTOP = i2;
  return;
 }
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _restore_search_patterns() {
 var i1 = 0;
 i1 = (HEAP32[26467] | 0) + -1 | 0;
 HEAP32[26467] = i1;
 if (i1 | 0) return;
 _vim_free(HEAP32[7516] | 0);
 HEAP32[7516] = HEAP32[26468];
 HEAP32[7517] = HEAP32[26469];
 HEAP32[7518] = HEAP32[26470];
 HEAP32[7519] = HEAP32[26471];
 HEAP32[7520] = HEAP32[26472];
 HEAP32[7521] = HEAP32[26473];
 HEAP32[7522] = HEAP32[26474];
 _vim_free(HEAP32[7523] | 0);
 HEAP32[7523] = HEAP32[26475];
 HEAP32[7524] = HEAP32[26476];
 HEAP32[7525] = HEAP32[26477];
 HEAP32[7526] = HEAP32[26478];
 HEAP32[7527] = HEAP32[26479];
 HEAP32[7528] = HEAP32[26480];
 HEAP32[7529] = HEAP32[26481];
 return;
}

function _illegal_char(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = i3 + 12 | 0;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i5 >> 2] = 114072;
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i4 >> 2] = _transchar(HEAP32[i7 >> 2] | 0) | 0;
  _sprintf(i2, 64049, i4) | 0;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  i8 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _get_input_buf() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = _alloc(20) | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  _trash_input_buf();
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 i4 = _alloc((HEAP32[26615] | 0) + 1 | 0) | 0;
 HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] = i4;
 if (HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0) _memmove(HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0, 113468, HEAP32[26615] | 0) | 0;
 HEAP32[HEAP32[i2 >> 2] >> 2] = HEAP32[26615];
 _trash_input_buf();
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _check_mark(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if (!(HEAP32[i4 >> 2] | 0)) {
  _emsg(93870) | 0;
  HEAP32[i3 >> 2] = 0;
 } else {
  i1 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
  if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) <= 0) {
   if (!i1) _emsg(92622) | 0;
   HEAP32[i3 >> 2] = 0;
   break;
  } else if ((i1 | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
   _emsg(92588) | 0;
   HEAP32[i3 >> 2] = 0;
   break;
  } else {
   HEAP32[i3 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _win_new_width(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 100 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = 0;
 _changed_line_abv_curs_win(HEAP32[i4 >> 2] | 0);
 _invalidate_botline_win(HEAP32[i4 >> 2] | 0);
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[26881] | 0)) {
  _update_topline();
  _curs_columns(1);
 }
 _redraw_win_later(HEAP32[i4 >> 2] | 0, 40);
 HEAP32[(HEAP32[i4 >> 2] | 0) + 176 >> 2] = 1;
 STACKTOP = i3;
 return;
}

function _twobyte_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
 i2 = i1 + 1 | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 L1 : do if (!(i4 << 24 >> 24)) i5 = 0; else {
  i6 = (HEAPU8[i1 >> 0] | 0) << 8 | i4 & 255;
  i7 = i2;
  while (1) {
   i8 = i6 & 65535;
   if ((i8 | 0) == (i3 | 0)) break;
   i9 = i7 + 1 | 0;
   i10 = HEAP8[i9 >> 0] | 0;
   if (!(i10 << 24 >> 24)) {
    i5 = 0;
    break L1;
   } else {
    i6 = i8 << 8 | i10 & 255;
    i7 = i9;
   }
  }
  i5 = i7 + -1 | 0;
 } while (0);
 return i5 | 0;
}

function _free_yank(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[HEAP32[26084] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  i3 = (HEAP32[i4 >> 2] | 0) + -1 | 0;
  HEAP32[i4 >> 2] = i3;
  i5 = HEAP32[HEAP32[26084] >> 2] | 0;
  if ((i3 | 0) < 0) break;
  _vim_free(HEAP32[i5 + (HEAP32[i4 >> 2] << 2) >> 2] | 0);
 }
 if (!i5) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[HEAP32[26084] >> 2] | 0);
 HEAP32[HEAP32[26084] >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _ex_buffer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0) {
  HEAP32[i1 + 88 >> 2] = 93844;
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP32[i1 + 32 >> 2] | 0)) _goto_buffer(i4, 0, 1, 0); else _goto_buffer(i4, 1, 1, HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_cmdline_cmd(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _checkpcmark() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 if (!(HEAP32[(HEAP32[26881] | 0) + 308 >> 2] | 0)) return;
 if ((HEAP32[(HEAP32[26881] | 0) + 300 >> 2] | 0) == (HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0)) {
  if ((HEAP32[(HEAP32[26881] | 0) + 300 + 4 >> 2] | 0) != (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) i1 = 4;
 } else i1 = 4;
 if ((i1 | 0) == 4) if (HEAP32[(HEAP32[26881] | 0) + 300 >> 2] | 0) return;
 i1 = HEAP32[26881] | 0;
 i2 = i1 + 300 | 0;
 i3 = i1 + 308 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 308 >> 2] = 0;
 return;
}

function _msg_scroll_up() {
 var i1 = 0, i2 = 0;
 if (HEAP32[26627] | 0) _gui_undraw_cursor();
 _gui_disable_flush();
 _screen_del_lines(0, 0, 1, HEAP32[10173] | 0, 1, 0, 0) | 0;
 _gui_enable_flush();
 if (_can_clear(97452) | 0) return;
 i1 = HEAP32[10173] | 0;
 _screen_fill(i1 - 1 | 0, i1 | 0, 0, HEAP32[10174] | 0, 32, 32, 0);
 if ((HEAPU16[(HEAP32[26692] | 0) + ((HEAP32[(HEAP32[26693] | 0) + ((HEAP32[10173] | 0) - 2 << 2) >> 2] | 0) + (HEAP32[10174] | 0) - 1 << 1) >> 1] | 0) != 65535) return;
 i1 = HEAP32[10173] | 0;
 i2 = HEAP32[10174] | 0;
 _screen_fill(i1 - 2 | 0, i1 - 1 | 0, i2 - 1 | 0, i2 | 0, 32, 32, 0);
 return;
}

function _nv_findpar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 16 >> 2] = 1;
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 if (_findpar((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, 0, 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _win_setminwidth() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i5 >> 2] = 1;
 while (1) {
  if ((HEAP32[27036] | 0) <= 0) {
   i1 = 7;
   break;
  }
  HEAP32[i3 >> 2] = HEAP32[10174];
  HEAP32[i4 >> 2] = _frame_minwidth(HEAP32[27114] | 0, 0) | 0;
  if ((HEAP32[i3 >> 2] | 0) >= (HEAP32[i4 >> 2] | 0)) {
   i1 = 7;
   break;
  }
  HEAP32[27036] = (HEAP32[27036] | 0) + -1;
  if (HEAP32[i5 >> 2] | 0) {
   _emsg(93214) | 0;
   HEAP32[i5 >> 2] = 0;
  }
 }
 if ((i1 | 0) == 7) {
  STACKTOP = i2;
  return;
 }
}

function _reg_save_equal(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[26312] | 0) {
  HEAP32[i3 >> 2] = (HEAP32[26334] | 0) == (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) & 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((HEAP32[26326] | 0) == (HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) i6 = (HEAP32[26334] | 0) == ((HEAP32[26325] | 0) + (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0); else i6 = 0;
 HEAP32[i3 >> 2] = i6 & 1;
 i5 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _regoptail(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i4 >> 2] | 0) == 0 | (HEAP32[i4 >> 2] | 0) == (-1 | 0)) {
  STACKTOP = i3;
  return;
 }
 if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 3) {
  if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) < 140) {
   STACKTOP = i3;
   return;
  }
  if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) > 149) {
   STACKTOP = i3;
   return;
  }
 }
 _regtail((HEAP32[i4 >> 2] | 0) + 3 | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _nv_page(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0;
 if (!(HEAP32[26698] & 4)) {
  _onepage(i1, HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) | 0;
  STACKTOP = i2;
  return;
 }
 i4 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) == -1) {
  _goto_tabpage(0 - (HEAP32[i4 + 28 >> 2] | 0) | 0);
  STACKTOP = i2;
  return;
 } else {
  _goto_tabpage(HEAP32[i4 + 24 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
}

function _make_tabpages(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 if ((HEAP32[i4 >> 2] | 0) > (HEAP32[26994] | 0)) HEAP32[i4 >> 2] = HEAP32[26994];
 _block_autocmds();
 HEAP32[i5 >> 2] = (HEAP32[i4 >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) <= 0) break;
  if (!(_win_new_tabpage(0) | 0)) break;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
 }
 _unblock_autocmds();
 STACKTOP = i2;
 return (HEAP32[i4 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) | 0;
}

function _strtox_738(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = 0;
 i8 = i7 + 4 | 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i7 + 44 >> 2] = i1;
 i9 = i7 + 8 | 0;
 HEAP32[i9 >> 2] = (i1 | 0) < 0 ? -1 : i1 + 2147483647 | 0;
 HEAP32[i7 + 76 >> 2] = -1;
 ___shlim(i7, 0);
 i10 = ___intscan(i7, i3, 1, i4, i5) | 0;
 if (i2 | 0) HEAP32[i2 >> 2] = i1 + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 + 108 >> 2] | 0) - (HEAP32[i9 >> 2] | 0));
 STACKTOP = i6;
 return i10 | 0;
}

function _gui_screenchar(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 16 | 0;
 i8 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i10 = i6 + 4 | 0;
 i11 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 i5 = _gui_outstr_nowrap((HEAP32[26691] | 0) + (HEAP32[i7 >> 2] | 0) | 0, 1, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _free_highlight_fonts() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[26486] | 0)) break;
  _gui_mch_free_font(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i2 >> 2] | 0) * 96 | 0) + 60 >> 2] | 0);
  HEAP32[(HEAP32[26490] | 0) + ((HEAP32[i2 >> 2] | 0) * 96 | 0) + 60 >> 2] = 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 _gui_mch_free_font(HEAP32[26670] | 0);
 _gui_mch_free_font(HEAP32[26671] | 0);
 _gui_mch_free_font(HEAP32[26672] | 0);
 _gui_mch_free_font(HEAP32[26673] | 0);
 STACKTOP = i1;
 return;
}

function _u_savedel(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (HEAP32[26840] | 0) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else {
  i2 = HEAP32[i5 >> 2] | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  HEAP32[i4 >> 2] = _u_savecommon(i2 - 1 | 0, i2 + i5 | 0, (i5 | 0) == (HEAP32[HEAP32[26773] >> 2] | 0) ? 2 : i2 | 0, 0) | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _syn_namen2id(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i6 >> 2] = _vim_strnsave(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i8 = HEAP32[i7 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 HEAP32[i7 >> 2] = _syn_name2id(HEAP32[i6 >> 2] | 0) | 0;
 _vim_free(HEAP32[i6 >> 2] | 0);
 i8 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _msg_add_fileformat(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAP32[i4 >> 2] | 0) == 1) {
  i1 = HEAP32[26882] | 0;
  i5 = (_shortmess(120) | 0) != 0;
  _strcat(i1, i5 ? 53724 : 53730) | 0;
  HEAP32[i3 >> 2] = 1;
 } else if ((HEAP32[i4 >> 2] | 0) == 2) {
  i5 = HEAP32[26882] | 0;
  i1 = (_shortmess(120) | 0) != 0;
  _strcat(i5, i1 ? 53743 : 53749) | 0;
  HEAP32[i3 >> 2] = 1;
  break;
 } else {
  HEAP32[i3 >> 2] = 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _nv_gd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 16 | 0;
 i6 = i4 + 12 | 0;
 i7 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i9 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = _find_ident_under_cursor(i9, 1) | 0;
 HEAP32[i8 >> 2] = i3;
 if (i3 | 0) if (_find_decl(HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, (HEAP32[i6 >> 2] | 0) == 100 & 1, HEAP32[i7 >> 2] | 0, 256) | 0) {
  STACKTOP = i4;
  return;
 }
 _clearopbeep(HEAP32[i5 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _getcwd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 i5 = i4;
 i6 = i4 + 8 | 0;
 if (!i1) {
  i7 = 4096;
  i8 = i6;
  i3 = 4;
 } else if (!i2) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i9 = 0;
 } else {
  i7 = i2;
  i8 = i1;
  i3 = 4;
 }
 if ((i3 | 0) == 4) {
  HEAP32[i5 >> 2] = i8;
  HEAP32[i5 + 4 >> 2] = i7;
  if ((___syscall_ret(___syscall183(183, i5 | 0) | 0) | 0) < 0) i9 = 0; else if ((i8 | 0) == (i6 | 0)) i9 = ___strdup(i6) | 0; else i9 = i8;
 }
 STACKTOP = i4;
 return i9 | 0;
}

function _mkdtemp(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = _strlen(i1) | 0;
 L1 : do if (i3 >>> 0 < 6) i2 = 4; else {
  i4 = i1 + i3 + -6 | 0;
  if (!(_memcmp(i4, 100621, 6) | 0)) {
   i5 = 100;
   do {
    ___randname(i4) | 0;
    if (!(_mkdir(i1, 448) | 0)) {
     i6 = i1;
     break L1;
    }
    i5 = i5 + -1 | 0;
    if (!i5) break;
   } while ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 17);
   _memcpy(i4 | 0, 100621, 6) | 0;
   i6 = 0;
  } else i2 = 4;
 } while (0);
 if ((i2 | 0) == 4) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i6 = 0;
 }
 return i6 | 0;
}

function _current_win_nr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i5 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) {
   i2 = 5;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) {
   i2 = 5;
   break;
  }
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2];
 }
 if ((i2 | 0) == 5) {
  STACKTOP = i3;
  return HEAP32[i6 >> 2] | 0;
 }
 return 0;
}

function _buflist_add(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = _buflist_new(HEAP32[i5 >> 2] | 0, 0, 0, HEAP32[i6 >> 2] | 0) | 0;
 if (HEAP32[i7 >> 2] | 0) {
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i7 >> 2] | 0) + 92 >> 2];
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 } else {
  HEAP32[i4 >> 2] = 0;
  i8 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i8 | 0;
 }
 return 0;
}

function _plines_m_win(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = 0;
 while (1) {
  if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i7 >> 2] | 0)) break;
  i3 = _plines_win(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 1) | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i3;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
 }
 STACKTOP = i4;
 return HEAP32[i8 >> 2] | 0;
}

function _yank_register_mline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 if (HEAP32[i5 >> 2] | 0) if (_valid_yank_reg(HEAP32[i5 >> 2] | 0, 0) | 0) i2 = 4; else HEAP32[i4 >> 2] = 0; else i2 = 4;
 do if ((i2 | 0) == 4) if ((HEAP32[i5 >> 2] | 0) == 95) {
  HEAP32[i4 >> 2] = 0;
  break;
 } else {
  _get_yank_register(HEAP32[i5 >> 2] | 0, 0) | 0;
  HEAP32[i4 >> 2] = (HEAPU8[(HEAP32[26084] | 0) + 8 >> 0] | 0 | 0) == 1 & 1;
  break;
 } while (0);
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _updateWindow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26758] | 0) {
  STACKTOP = i2;
  return;
 }
 _update_prepare();
 if (HEAP32[27099] | 0) if (_clip_isautosel_star() | 0) _clip_update_selection(108396);
 if (HEAP32[27099] | 0) if (_clip_isautosel_plus() | 0) _clip_update_selection(108396);
 _win_update(HEAP32[i3 >> 2] | 0);
 if (HEAP32[26770] | 0) _draw_tabline();
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 176 >> 2] | 0) _win_redr_status(HEAP32[i3 >> 2] | 0, 0);
 _update_finish();
 STACKTOP = i2;
 return;
}

function _mch_dirname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (!(_getcwd(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
  i6 = HEAP32[i5 >> 2] | 0;
  _strcpy(i6, _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0) | 0;
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _ex_recover(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26816] = 1;
 if (_check_changed(HEAP32[26773] | 0, (HEAP32[26891] | 0 ? 1 : 0) | 2 | (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0 ? 4 : 0) | 16) | 0) {
  HEAP32[26816] = 0;
  STACKTOP = i2;
  return;
 }
 if (HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0 | 0) if ((_setfname(HEAP32[26773] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 0, 1) | 0) != 1) {
  HEAP32[26816] = 0;
  STACKTOP = i2;
  return;
 }
 _ml_recover();
 HEAP32[26816] = 0;
 STACKTOP = i2;
 return;
}

function _copy_pim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2];
 _copy_sub((HEAP32[i4 >> 2] | 0) + 8 | 0, (HEAP32[i5 >> 2] | 0) + 8 | 0);
 i2 = (HEAP32[i4 >> 2] | 0) + 172 | 0;
 i4 = (HEAP32[i5 >> 2] | 0) + 172 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 STACKTOP = i3;
 return;
}

function _ex_previous(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[26881] | 0;
 if (((HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) - (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) | 0) >= (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0)) {
  _do_argfile(i1, (HEAP32[HEAP32[i4 + 184 >> 2] >> 2] | 0) - 1 | 0);
  STACKTOP = i2;
  return;
 } else {
  _do_argfile(i1, (HEAP32[i4 + 188 >> 2] | 0) - (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) | 0);
  STACKTOP = i2;
  return;
 }
}

function _put_reedit_in_typebuf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[26806] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[26806] | 0) == 86) {
  HEAP8[i4 >> 0] = 103;
  HEAP8[i4 + 1 >> 0] = 82;
  HEAP8[i4 + 2 >> 0] = 0;
 } else {
  i1 = HEAP32[26806] | 0;
  HEAP8[i4 >> 0] = (i1 | 0) == 73 ? 105 : i1 | 0;
  HEAP8[i4 + 1 >> 0] = 0;
 }
 if ((_ins_typebuf(i4, -1, 0, 1, HEAP32[i3 >> 2] | 0) | 0) != 1) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26806] = 0;
 STACKTOP = i2;
 return;
}

function _win_setwidth_win(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i5 >> 2] | 0) == (HEAP32[26881] | 0)) {
  if ((HEAP32[i4 >> 2] | 0) < (HEAP32[27036] | 0)) HEAP32[i4 >> 2] = HEAP32[27036];
  if (!(HEAP32[i4 >> 2] | 0)) HEAP32[i4 >> 2] = 1;
 }
 i2 = HEAP32[i5 >> 2] | 0;
 _frame_setwidth(HEAP32[i2 + 20 >> 2] | 0, (HEAP32[i4 >> 2] | 0) + (HEAP32[i2 + 104 >> 2] | 0) | 0);
 _win_comp_pos() | 0;
 _redraw_all_later(40);
 STACKTOP = i3;
 return;
}

function _mf_open_file(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 _mf_do_open(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 194);
 if ((HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0) < 0) {
  HEAP32[i4 >> 2] = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else {
  HEAP32[(HEAP32[i5 >> 2] | 0) + 596 >> 2] = 1;
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _fchdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3 + 40 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3;
 HEAP32[i6 >> 2] = i1;
 i7 = ___syscall133(133, i6 | 0) | 0;
 if ((i7 | 0) == -9) {
  HEAP32[i5 >> 2] = i1;
  HEAP32[i5 + 4 >> 2] = 1;
  if ((___syscall221(221, i5 | 0) | 0) < 0) i2 = 3; else {
   ___procfdname(i5, i1);
   HEAP32[i4 >> 2] = i5;
   i8 = ___syscall_ret(___syscall12(12, i4 | 0) | 0) | 0;
  }
 } else i2 = 3;
 if ((i2 | 0) == 3) i8 = ___syscall_ret(i7) | 0;
 STACKTOP = i3;
 return i8 | 0;
}

function _current_tab_nr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i5 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) {
   i2 = 5;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) {
   i2 = 5;
   break;
  }
  HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 }
 if ((i2 | 0) == 5) {
  STACKTOP = i3;
  return HEAP32[i6 >> 2] | 0;
 }
 return 0;
}

function _vim_strnsave(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = _alloc((HEAP32[i5 >> 2] | 0) + 1 | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i7 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 _strncpy(HEAP32[i6 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 HEAP8[(HEAP32[i6 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) >> 0] = 0;
 i7 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _delete_first_msg() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 if ((HEAP32[27236] | 0) <= 0) {
  HEAP32[i2 >> 2] = 0;
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[27237];
 HEAP32[27237] = HEAP32[HEAP32[i3 >> 2] >> 2];
 if (!(HEAP32[27237] | 0)) HEAP32[27227] = 0;
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0);
 _vim_free(HEAP32[i3 >> 2] | 0);
 HEAP32[27236] = (HEAP32[27236] | 0) + -1;
 HEAP32[i2 >> 2] = 1;
 i4 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i4 | 0;
}

function _gettail_sep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _get_past_head(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i5 >> 2] = _gettail(HEAP32[i3 >> 2] | 0) | 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >>> 0 > (HEAP32[i4 >> 2] | 0) >>> 0) i6 = (_vim_ispathsep(HEAPU8[(HEAP32[i5 >> 2] | 0) + -1 >> 0] | 0) | 0) != 0; else i6 = 0;
  i7 = HEAP32[i5 >> 2] | 0;
  if (!i6) break;
  HEAP32[i5 >> 2] = i7 + -1;
 }
 STACKTOP = i2;
 return i7 | 0;
}

function _find_tabpage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i5 >> 2] = HEAP32[26884];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) {
   i2 = 5;
   break;
  }
  if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) {
   i2 = 5;
   break;
  }
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 1;
  HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 }
 if ((i2 | 0) == 5) {
  STACKTOP = i3;
  return HEAP32[i5 >> 2] | 0;
 }
 return 0;
}

function _long_to_char(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP8[HEAP32[i5 >> 2] >> 0] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[i5 >> 2] | 0) + 1 >> 0] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[i5 >> 2] | 0) + 2 >> 0] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[i5 >> 2] | 0) + 3 >> 0] = HEAP32[i4 >> 2];
 STACKTOP = i3;
 return;
}

function _apply_autocmds(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i6 + 16 | 0;
 i8 = i6 + 12 | 0;
 i9 = i6 + 8 | 0;
 i10 = i6 + 4 | 0;
 i11 = i6;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i11 >> 2] = i5;
 i5 = _apply_autocmds_group(HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, -3, HEAP32[i11 >> 2] | 0, 0) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _st_push(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 if ((HEAP32[i7 >> 2] | 0) >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) {
  STACKTOP = i4;
  return;
 }
 i6 = HEAP32[i7 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[HEAP32[i5 >> 2] >> 2] = (HEAP32[HEAP32[i5 >> 2] >> 2] | 0) + 8;
 STACKTOP = i4;
 return;
}

function _check_for_delay(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26718] | 0) {
  if (!((HEAP32[26722] | 0) == 0 & (HEAP32[26810] | 0) == 0)) {
   STACKTOP = i2;
   return;
  }
 } else if (!((((HEAP32[i3 >> 2] | 0) != 0 & (HEAP32[26710] | 0) != 0 ^ 1 | (HEAP32[26722] | 0) != 0) ^ 1) & (HEAP32[26810] | 0) == 0)) {
  STACKTOP = i2;
  return;
 }
 _out_flush();
 _ui_delay(1e3, 1);
 HEAP32[26718] = 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26710] = 0;
 STACKTOP = i2;
 return;
}

function _char2cells(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) >= 0) {
  HEAP32[i3 >> 2] = (HEAPU8[113724 + (i1 & 255) >> 0] | 0) & 7;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if ((i1 | 0) == 128) i6 = 254; else if (!(HEAP32[i4 >> 2] | 0)) i6 = 255; else i6 = 0 - (HEAP32[i4 >> 2] | 0) & 255;
 HEAP32[i3 >> 2] = (_char2cells(i6) | 0) + 2;
 i5 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _set_topline(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = (HEAP32[i4 >> 2] | 0) + 144 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] | 0));
 HEAP32[(HEAP32[i4 >> 2] | 0) + 68 >> 2] = HEAP32[i5 >> 2];
 HEAP8[(HEAP32[i4 >> 2] | 0) + 72 >> 0] = 1;
 i5 = (HEAP32[i4 >> 2] | 0) + 108 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -178;
 _redraw_later(10);
 STACKTOP = i3;
 return;
}

function _alist_name(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _buflist_findnr(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0;
 if (HEAP32[i5 >> 2] | 0) if (HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2] | 0) {
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 76 >> 2];
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _save_typebuf() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _init_typebuf();
 i3 = 101972 + ((HEAP32[26831] | 0) * 36 | 0) | 0;
 i4 = 107268;
 i5 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i3 = i3 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 if (!(_alloc_typebuf() | 0)) {
  _closescript();
  HEAP32[i2 >> 2] = 0;
  i6 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i6 | 0;
 } else {
  HEAP32[i2 >> 2] = 1;
  i6 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i6 | 0;
 }
 return 0;
}

function _trigger_cursorhold() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 do if (!(HEAP32[26848] | 0)) {
  i4 = (_has_cursorhold() | 0) != 0;
  if (i4 & (HEAP32[26800] | 0) == 0 & (HEAP32[26821] | 0) == 0) {
   HEAP32[i3 >> 2] = _get_real_state() | 0;
   if ((HEAP32[i3 >> 2] | 0) != 257) if (!(HEAP32[i3 >> 2] & 16)) break;
   HEAP32[i2 >> 2] = 1;
   i5 = HEAP32[i2 >> 2] | 0;
   STACKTOP = i1;
   return i5 | 0;
  }
 } while (0);
 HEAP32[i2 >> 2] = 0;
 i5 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _add_to_input_buf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (((HEAP32[26615] | 0) + (HEAP32[i5 >> 2] | 0) | 0) > 256) {
  STACKTOP = i3;
  return;
 }
 while (1) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + -1;
  if (!i2) break;
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i2 + 1;
  i1 = HEAP8[i2 >> 0] | 0;
  i2 = HEAP32[26615] | 0;
  HEAP32[26615] = i2 + 1;
  HEAP8[113468 + i2 >> 0] = i1;
 }
 STACKTOP = i3;
 return;
}

function _vim_strup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  i3 = HEAPU8[HEAP32[i4 >> 2] >> 0] | 0;
  HEAP32[i5 >> 2] = i3;
  if (!i3) break;
  i3 = HEAP32[i5 >> 2] | 0;
  i1 = ((i3 | 0) < 97 | (i3 | 0) > 122 ? i3 | 0 : i3 - 32 | 0) & 255;
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i3 + 1;
  HEAP8[i3 >> 0] = i1;
 }
 STACKTOP = i2;
 return;
}

function _help_compare(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
 HEAP32[i6 >> 2] = i2 + (_strlen(HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0) + 1;
 i4 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
 HEAP32[i7 >> 2] = i4 + (_strlen(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0) + 1;
 i5 = _strcmp(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i5 | 0;
}

function _set_input_buf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) {
  _memmove(113468, HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0, HEAP32[HEAP32[i4 >> 2] >> 2] | 0) | 0;
  HEAP32[26615] = HEAP32[HEAP32[i4 >> 2] >> 2];
  _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0);
 }
 _vim_free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ins_pageup() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _undisplay_dollar();
 if (HEAP32[26698] & 4 | 0) {
  if (!(HEAP32[HEAP32[26884] >> 2] | 0)) {
   STACKTOP = i1;
   return;
  }
  _start_arrow((HEAP32[26881] | 0) + 24 | 0);
  _goto_tabpage(-1);
  STACKTOP = i1;
  return;
 }
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 if ((_onepage(-1, 1) | 0) == 1) {
  _start_arrow(i2);
  STACKTOP = i1;
  return;
 } else {
  _vim_beep(4);
  STACKTOP = i1;
  return;
 }
}

function _ins_pagedown() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _undisplay_dollar();
 if (HEAP32[26698] & 4 | 0) {
  if (!(HEAP32[HEAP32[26884] >> 2] | 0)) {
   STACKTOP = i1;
   return;
  }
  _start_arrow((HEAP32[26881] | 0) + 24 | 0);
  _goto_tabpage(0);
  STACKTOP = i1;
  return;
 }
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 if ((_onepage(1, 1) | 0) == 1) {
  _start_arrow(i2);
  STACKTOP = i1;
  return;
 } else {
  _vim_beep(4);
  STACKTOP = i1;
  return;
 }
}

function _mch_nodetype(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 80 | 0;
 i4 = i2 + 76 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 do if (_stat(HEAP32[i4 >> 2] | 0, i5) | 0) HEAP32[i3 >> 2] = 0; else {
  if ((HEAP32[i5 + 12 >> 2] & 61440 | 0) != 32768) if ((HEAP32[i5 + 12 >> 2] & 61440 | 0) != 16384) if ((HEAP32[i5 + 12 >> 2] & 61440 | 0) == 24576) {
   HEAP32[i3 >> 2] = 2;
   break;
  } else {
   HEAP32[i3 >> 2] = 1;
   break;
  }
  HEAP32[i3 >> 2] = 0;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _clip_yank_selection(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 8 | 0;
 i9 = i5 + 4 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i10 >> 2] = 104932;
 _clip_free_selection(HEAP32[i9 >> 2] | 0);
 _str_to_reg(HEAP32[i10 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, 0, 0);
 STACKTOP = i5;
 return;
}

function _ml_close_all(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  i1 = HEAP32[i4 >> 2] | 0;
  if (HEAP32[i3 >> 2] | 0) if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 60 >> 2] & 256)) i5 = 1; else i5 = (_vim_strchr(HEAP32[26904] | 0, 38) | 0) == 0; else i5 = 0;
  _ml_close(i1, i5 & 1);
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 48 >> 2];
 }
 _vim_deltempdir();
 STACKTOP = i2;
 return;
}

function _put_register(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _get_yank_register(HEAP32[i4 >> 2] | 0, 0) | 0;
 _free_yank_all();
 i4 = HEAP32[26084] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 _vim_free(HEAP32[i5 >> 2] | 0);
 _may_set_selection();
 STACKTOP = i3;
 return;
}

function _gui_start() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = _vim_strsave(HEAP32[26519] | 0) | 0;
 _settmode(0);
 if (HEAP32[26781] | 0) _cursor_on();
 HEAP32[26781] = 0;
 HEAP32[26678] = (HEAP32[26678] | 0) + 1;
 _gui_attempt_start();
 if (!(HEAP32[26627] | 0)) {
  _termcapinit(HEAP32[i2 >> 2] | 0);
  _settmode(2);
 }
 _vim_free(HEAP32[i2 >> 2] | 0);
 _gui_mch_update();
 _apply_autocmds(HEAP32[26627] | 0 ? 55 : 56, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[26678] = (HEAP32[26678] | 0) + -1;
 STACKTOP = i1;
 return;
}

function _win_init_some(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 184 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 184 >> 2];
 i2 = (HEAP32[(HEAP32[i4 >> 2] | 0) + 184 >> 2] | 0) + 20 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 188 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 188 >> 2];
 _win_copy_options(HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _vim_strrchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
 while (1) {
  if (!(HEAP8[HEAP32[i7 >> 2] >> 0] | 0)) break;
  if ((HEAPU8[HEAP32[i7 >> 2] >> 0] | 0) == (HEAP32[i5 >> 2] | 0)) HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 }
 STACKTOP = i3;
 return HEAP32[i6 >> 2] | 0;
}

function _getnextcomp(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  if (HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) i4 = (_vim_ispathsep(HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) | 0) != 0 ^ 1; else i4 = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  if (!i4) break;
  HEAP32[i3 >> 2] = i5 + 1;
 }
 if (!(HEAP8[i5 >> 0] | 0)) {
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _get_trans_bufname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_buf_spname(HEAP32[i3 >> 2] | 0) | 0) {
  i1 = HEAP32[26885] | 0;
  _vim_strncpy(i1, _buf_spname(HEAP32[i3 >> 2] | 0) | 0, 4095);
  i4 = HEAP32[26885] | 0;
  _trans_characters(i4, 4096);
  STACKTOP = i2;
  return;
 } else {
  i1 = HEAP32[i3 >> 2] | 0;
  _home_replace(i1 | 0, HEAP32[i1 + 76 >> 2] | 0, HEAP32[26885] | 0, 4096, 1);
  i4 = HEAP32[26885] | 0;
  _trans_characters(i4, 4096);
  STACKTOP = i2;
  return;
 }
}

function _updatescript(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) != 0 & (HEAP32[26832] | 0) != 0) _putc(HEAP32[i3 >> 2] | 0, HEAP32[26832] | 0) | 0;
 if (HEAP32[i3 >> 2] | 0) {
  if ((HEAP32[26879] | 0) <= 0) {
   STACKTOP = i2;
   return;
  }
  i1 = (HEAP32[25896] | 0) + 1 | 0;
  HEAP32[25896] = i1;
  if ((i1 | 0) < (HEAP32[26879] | 0)) {
   STACKTOP = i2;
   return;
  }
 }
 _ml_sync_all((HEAP32[i3 >> 2] | 0) == 0 & 1, 1);
 HEAP32[25896] = 0;
 STACKTOP = i2;
 return;
}

function _message_filtered(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[27137] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i5 >> 2] = _vim_regexec(108548, HEAP32[i4 >> 2] | 0, 0) | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 if (HEAP32[27159] | 0) i7 = i4; else i7 = ((i4 | 0) != 0 ^ 1) & 1;
 HEAP32[i3 >> 2] = i7;
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _gui_get_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) {
  HEAP32[i3 >> 2] = -11111;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i5 >> 2] = _gui_mch_get_color(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAP32[i5 >> 2] | 0) == -11111) _emsg2(84452, HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _linetabsize_col(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 while (1) {
  if (!(HEAPU8[HEAP32[i5 >> 2] >> 0] | 0)) break;
  i4 = _lbr_chartabsize_adv(HEAP32[i7 >> 2] | 0, i5, HEAP32[i6 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i4;
 }
 STACKTOP = i3;
 return HEAP32[i6 >> 2] | 0;
}

function _frame_add_height(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 _frame_new_height(i2 | 0, (HEAP32[i2 + 12 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0, 0, 0);
 while (1) {
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2];
  if (!(HEAP32[i4 >> 2] | 0)) break;
  i2 = (HEAP32[i4 >> 2] | 0) + 12 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
 }
 STACKTOP = i3;
 return;
}

function _check_status(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] | 0) {
   HEAP32[(HEAP32[i4 >> 2] | 0) + 176 >> 2] = 1;
   if ((HEAP32[26828] | 0) < 10) HEAP32[26828] = 10;
  }
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 }
 STACKTOP = i2;
 return;
}

function _changed_lines(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _changed_lines_buf(HEAP32[26773] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 _changed_common(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _hl_set_fg_color_name(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = _syn_name2id(77230) | 0;
 if ((HEAP32[i4 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i4 >> 2] | 0) - 1 | 0) * 96 | 0) + 76 >> 2] | 0);
 HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i4 >> 2] | 0) - 1 | 0) * 96 | 0) + 76 >> 2] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return;
}

function _hl_set_bg_color_name(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = _syn_name2id(77230) | 0;
 if ((HEAP32[i4 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i4 >> 2] | 0) - 1 | 0) * 96 | 0) + 80 >> 2] | 0);
 HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i4 >> 2] | 0) - 1 | 0) * 96 | 0) + 80 >> 2] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return;
}

function _hl_get_font_name() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i3 >> 2] = _syn_name2id(77230) | 0;
 if ((HEAP32[i3 >> 2] | 0) > 0) {
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[26490] | 0) + (((HEAP32[i3 >> 2] | 0) - 1 | 0) * 96 | 0) + 64 >> 2];
  if (HEAP32[i4 >> 2] | 0) {
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   i5 = HEAP32[i2 >> 2] | 0;
   STACKTOP = i1;
   return i5 | 0;
  }
 }
 HEAP32[i2 >> 2] = 114072;
 i5 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _ex_setfiletype(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26747] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 if (!(_strncmp(HEAP32[i4 >> 2] | 0, 50410, 9) | 0)) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 9;
 _set_option_value(65807, 0, HEAP32[i4 >> 2] | 0, 4) | 0;
 if ((HEAP32[i4 >> 2] | 0) == (HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26747] = 0;
 STACKTOP = i2;
 return;
}

function _buf_spname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = (_bt_nofile(HEAP32[i4 >> 2] | 0) | 0) != 0;
 i5 = HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2] | 0;
 do if (i1) if (i5 | 0) {
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 76 >> 2];
  break;
 } else {
  HEAP32[i3 >> 2] = 42497;
  break;
 } else if (!i5) {
  HEAP32[i3 >> 2] = 57571;
  break;
 } else {
  HEAP32[i3 >> 2] = 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _win_new_shellsize() {
 var i1 = 0;
 i1 = 0;
 if ((HEAP32[26603] | 0) != (HEAP32[10173] | 0)) i1 = 3; else if ((HEAP32[26604] | 0) != (HEAP32[10174] | 0)) i1 = 3;
 if ((i1 | 0) == 3) _ui_new_shellsize();
 if ((HEAP32[26603] | 0) != (HEAP32[10173] | 0)) {
  if ((HEAP32[26603] | 0) == 0 ? 1 : (HEAP32[27026] | 0) == ((HEAP32[26603] | 0) - 1 | 0)) HEAP32[27026] = (HEAP32[10173] | 0) - 1;
  HEAP32[26603] = HEAP32[10173];
  _shell_new_rows();
 }
 if ((HEAP32[26604] | 0) == (HEAP32[10174] | 0)) return;
 HEAP32[26604] = HEAP32[10174];
 _shell_new_columns();
 return;
}

function _shorten_fnames(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 _mch_dirname(i4, 4096) | 0;
 HEAP32[i5 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i5 >> 2] | 0)) break;
  _shorten_buf_fname(HEAP32[i5 >> 2] | 0, i4, HEAP32[i3 >> 2] | 0);
  _mf_fullname(HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0);
  HEAP32[i5 >> 2] = HEAP32[(HEAP32[i5 >> 2] | 0) + 48 >> 2];
 }
 _status_redraw_all();
 HEAP32[26770] = 1;
 STACKTOP = i2;
 return;
}

function _ex_quit_all(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 if (_text_locked() | 0) {
  _text_locked_msg();
  STACKTOP = i3;
  return;
 }
 if (_before_quit_autocmds(HEAP32[26881] | 0, 1, HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) | 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26778] = 1;
 if (HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] | 0) i2 = 6; else if (!(_check_changed_any(0, 0) | 0)) i2 = 6;
 if ((i2 | 0) == 6) _getout(0);
 _not_exiting();
 STACKTOP = i3;
 return;
}

function _win_alloc_lines(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 152 >> 2] = 0;
 i1 = _alloc_clear(HEAP32[10173] << 3) | 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 156 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _pad_680(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i7 = i6;
 if ((i3 | 0) > (i4 | 0) & (i5 & 73728 | 0) == 0) {
  i5 = i3 - i4 | 0;
  _memset(i7 | 0, i2 << 24 >> 24 | 0, (i5 >>> 0 < 256 ? i5 : 256) | 0) | 0;
  if (i5 >>> 0 > 255) {
   i2 = i3 - i4 | 0;
   i4 = i5;
   do {
    _out(i1, i7, 256);
    i4 = i4 + -256 | 0;
   } while (i4 >>> 0 > 255);
   i8 = i2 & 255;
  } else i8 = i5;
  _out(i1, i7, i8);
 }
 STACKTOP = i6;
 return;
}

function _gui_mch_get_font(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if (_vimwasm_is_font(HEAP32[i5 >> 2] | 0) | 0) {
  HEAP32[i4 >> 2] = _vim_strsave(HEAP32[i5 >> 2] | 0) | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 if (HEAP32[i6 >> 2] | 0) _emsg2(92351, HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _tag_full_fname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] >> 0];
 HEAP8[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] >> 0] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 >> 2] = _expand_tag_fname(HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, 0) | 0;
 HEAP8[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] >> 0] = HEAP32[i5 >> 2];
 STACKTOP = i2;
 return HEAP32[i4 >> 2] | 0;
}

function _prog_magic_wrong() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 if (!(HEAP32[26312] | 0)) i4 = HEAP32[HEAP32[26313] >> 2] | 0; else i4 = HEAP32[HEAP32[26312] >> 2] | 0;
 HEAP32[i3 >> 2] = i4;
 do if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) == 29808) HEAP32[i2 >> 2] = 0; else if ((HEAPU8[(HEAP32[i3 >> 2] | 0) + 32 >> 0] | 0 | 0) != 156) {
  _emsg(93511) | 0;
  HEAP32[i2 >> 2] = 1;
  break;
 } else {
  HEAP32[i2 >> 2] = 0;
  break;
 } while (0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _buf_setino(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 76 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 76 >> 2] | 0) if ((_stat(HEAP32[(HEAP32[i3 >> 2] | 0) + 76 >> 2] | 0, i4) | 0) >= 0) {
  HEAP32[(HEAP32[i3 >> 2] | 0) + 80 >> 2] = 1;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 84 >> 2] = HEAP32[i4 >> 2];
  HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = HEAP32[i4 + 72 >> 2];
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 80 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _alt_tabpage() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 if (HEAP32[HEAP32[26886] >> 2] | 0) {
  HEAP32[i2 >> 2] = HEAP32[HEAP32[26886] >> 2];
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[26884];
 while (1) {
  i5 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) == (HEAP32[26886] | 0)) break;
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
 }
 HEAP32[i2 >> 2] = i5;
 i4 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i4 | 0;
}

function _ex_redrawstatus(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26814];
 HEAP32[i5 >> 2] = HEAP32[26945];
 HEAP32[26814] = 0;
 HEAP32[26945] = 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) _status_redraw_all(); else _status_redraw_curbuf();
 _update_screen(HEAP32[26788] | 0 ? 20 : 0) | 0;
 HEAP32[26814] = HEAP32[i4 >> 2];
 HEAP32[26945] = HEAP32[i5 >> 2];
 _out_flush();
 STACKTOP = i2;
 return;
}

function _nv_window(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) == 58) {
  HEAP32[i1 + 8 >> 2] = 58;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 0;
  _nv_colon(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (_checkclearop(HEAP32[i1 >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 _do_window(HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _backslash_halve_save(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _vim_strsave(HEAP32[i4 >> 2] | 0) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  _backslash_halve(HEAP32[i5 >> 2] | 0);
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _get_fileformat(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAPU8[HEAP32[(HEAP32[i4 >> 2] | 0) + 620 >> 2] >> 0];
 do if ((HEAP32[i5 >> 2] | 0) == 117 ? 1 : (HEAP32[(HEAP32[i4 >> 2] | 0) + 584 >> 2] | 0) != 0) HEAP32[i3 >> 2] = 0; else if ((HEAP32[i5 >> 2] | 0) == 109) {
  HEAP32[i3 >> 2] = 2;
  break;
 } else {
  HEAP32[i3 >> 2] = 1;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _replace_do_bs(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _replace_pop() | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  _pchar_cursor(i1);
  _replace_pop_ins();
  i4 = (HEAP32[26881] | 0) + 24 | 0;
  _changed_bytes(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (i1 | 0) {
  STACKTOP = i2;
  return;
 }
 _del_char_after_col(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _msg_home_replace_attr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = _home_replace_save(0, HEAP32[i4 >> 2] | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i7 = HEAP32[i6 >> 2] | 0;
  _vim_free(i7);
  STACKTOP = i3;
  return;
 }
 _msg_outtrans_attr(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 _vim_free(i7);
 STACKTOP = i3;
 return;
}

function _win_col_off2(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i5 >> 2] = i1;
 if (HEAP32[(HEAP32[i5 >> 2] | 0) + 200 + 4 >> 2] | 0) i2 = 3; else if (HEAP32[(HEAP32[i5 >> 2] | 0) + 200 + 8 >> 2] | 0) i2 = 3;
 if ((i2 | 0) == 3) if (_vim_strchr(HEAP32[26904] | 0, 110) | 0) {
  HEAP32[i4 >> 2] = 8;
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i6 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i6 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i6 | 0;
}

function _putcmdline(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (HEAP32[26811] | 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[26730] = 1;
 _msg_putchar(HEAP32[i4 >> 2] | 0);
 if (HEAP32[i5 >> 2] | 0) {
  i2 = HEAP32[25239] | 0;
  _draw_cmdline(i2 | 0, (HEAP32[25238] | 0) - i2 | 0);
 }
 HEAP32[26730] = 0;
 _cursorcmd();
 HEAP32[25248] = HEAP32[i4 >> 2];
 HEAP32[25262] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _msg_moremsg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 97458;
 HEAP32[i4 >> 2] = HEAP32[27056];
 _screen_puts(HEAP32[i5 >> 2] | 0, (HEAP32[10173] | 0) - 1 | 0, 0, HEAP32[i4 >> 2] | 0);
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i3 = (HEAP32[10173] | 0) - 1 | 0;
 i1 = _vim_strsize(HEAP32[i5 >> 2] | 0) | 0;
 _screen_puts(97469, i3, i1, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ins_ctrl_v() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = 0;
 _ins_redraw(0);
 if (_redrawing() | 0) if (!(_char_avail() | 0)) {
  _edit_putchar(94, 1);
  HEAP32[i3 >> 2] = 1;
 }
 _AppendToRedobuff(42699);
 HEAP32[i2 >> 2] = _get_literal() | 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  i4 = HEAP32[i2 >> 2] | 0;
  _insert_special(i4, 0, 1);
  STACKTOP = i1;
  return;
 }
 _edit_unputchar();
 i4 = HEAP32[i2 >> 2] | 0;
 _insert_special(i4, 0, 1);
 STACKTOP = i1;
 return;
}

function _gui_mch_set_sp_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 3) break;
  HEAP32[i4 + (HEAP32[i5 >> 2] << 2) >> 2] = HEAP32[i3 >> 2] & 255;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] >> 8;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 _vimwasm_set_sp_color(HEAP32[i4 + 8 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _gui_mch_set_fg_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 3) break;
  HEAP32[i4 + (HEAP32[i5 >> 2] << 2) >> 2] = HEAP32[i3 >> 2] & 255;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] >> 8;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 _vimwasm_set_fg_color(HEAP32[i4 + 8 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _gui_mch_set_bg_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 while (1) {
  if ((HEAP32[i5 >> 2] | 0) >= 3) break;
  HEAP32[i4 + (HEAP32[i5 >> 2] << 2) >> 2] = HEAP32[i3 >> 2] & 255;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] >> 8;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 }
 _vimwasm_set_bg_color(HEAP32[i4 + 8 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ex_checktime(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = HEAP32[26739];
 HEAP32[26739] = 0;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) _check_timestamps(0) | 0; else {
  HEAP32[i4 >> 2] = _buflist_findnr(HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) | 0;
  if (HEAP32[i4 >> 2] | 0) _buf_check_timestamp(HEAP32[i4 >> 2] | 0, 0) | 0;
 }
 HEAP32[26739] = HEAP32[i5 >> 2];
 STACKTOP = i2;
 return;
}

function _vim_fnamecmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 if (HEAP32[26918] | 0) {
  HEAP32[i4 >> 2] = _strcasecmp(i2, i5) | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 } else {
  HEAP32[i4 >> 2] = _strcmp(i2, i5) | 0;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 return 0;
}

function _nv_Undo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26788] | 0 ? 1 : (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) == 11) {
  HEAP32[i1 + 8 >> 2] = 103;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 85;
  _nv_operator(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (_checkclearopq(HEAP32[i1 >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _u_undoline();
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _buflist_getfpos() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = _buflist_findfpos(HEAP32[26773] | 0) | 0;
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[i2 >> 2] >> 2];
 _check_cursor_lnum();
 if (HEAP32[26996] | 0) {
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
  STACKTOP = i1;
  return;
 } else {
  HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2];
  _check_cursor_col();
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  STACKTOP = i1;
  return;
 }
}

function _mf_set_dirty(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) > 0) {
   i1 = (HEAP32[i4 >> 2] | 0) + 28 | 0;
   HEAP8[i1 >> 0] = HEAP8[i1 >> 0] | 1;
  }
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2];
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 596 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _ex_bunload(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 23) i4 = 3; else i4 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 41 ? 4 : 2;
 i1 = HEAP32[i3 >> 2] | 0;
 i5 = _do_bufdel(i4, HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[i1 + 32 >> 2] | 0, HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = i5;
 STACKTOP = i2;
 return;
}

function _check_nextcmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _skipwhite(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 124) if ((HEAPU8[HEAP32[i5 >> 2] >> 0] | 0 | 0) != 10) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _clear_hl_tables() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 _ga_clear(105964);
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[26496] | 0)) break;
  HEAP32[i3 >> 2] = (HEAP32[26500] | 0) + ((HEAP32[i2 >> 2] | 0) * 20 | 0);
  _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0);
  _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 + 4 >> 2] | 0);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 _ga_clear(105984);
 _ga_clear(106004);
 STACKTOP = i1;
 return;
}

function _adjust_cursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= 0) {
  STACKTOP = i2;
  return;
 }
 if (_gchar_cursor() | 0) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[26788] | 0) if ((HEAPU8[HEAP32[26975] >> 0] | 0 | 0) != 111) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[26881] | 0) + 24 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _tltoa(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 113210;
 HEAP8[HEAP32[i4 >> 2] >> 0] = 0;
 do {
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
  HEAP8[HEAP32[i4 >> 2] >> 0] = (((HEAP32[i3 >> 2] | 0) >>> 0) % 10 | 0) + 48;
  HEAP32[i3 >> 2] = ((HEAP32[i3 >> 2] | 0) >>> 0) / 10 | 0;
 } while ((HEAP32[i3 >> 2] | 0) >>> 0 > 0 ? (HEAP32[i4 >> 2] | 0) >>> 0 > 113195 >>> 0 : 0);
 STACKTOP = i2;
 return HEAP32[i4 >> 2] | 0;
}

function _vim_settempdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _alloc(4098) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(_vim_FullName(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, 4096, 0) | 0)) _strcpy(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
 _add_pathsep(HEAP32[i4 >> 2] | 0);
 HEAP32[26777] = _vim_strsave(HEAP32[i4 >> 2] | 0) | 0;
 _vim_free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _nv_dollar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 1;
 HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647;
 if (_cursor_down((HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0) - 1 | 0, (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) == 0 & 1) | 0) {
  STACKTOP = i2;
  return;
 }
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _escape_fname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _alloc((_strlen(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) + 2 | 0) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP8[HEAP32[i4 >> 2] >> 0] = 92;
 _strcpy((HEAP32[i4 >> 2] | 0) + 1 | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
 _vim_free(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i2;
 return;
}

function _redraw_buf_later(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i6 >> 2] | 0)) break;
  if ((HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[i4 >> 2] | 0)) _redraw_win_later(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0);
  HEAP32[i6 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
 }
 STACKTOP = i3;
 return;
}

function _ins_bs_one(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _dec_cursor() | 0;
 i1 = HEAP32[26881] | 0;
 _getvcol(i1 | 0, i1 + 24 | 0, HEAP32[i3 >> 2] | 0, 0, 0);
 if (!(HEAP32[10180] & 64)) {
  _del_char(0) | 0;
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) == (HEAP32[27122] | 0)) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) < (HEAP32[27123] | 0)) {
  STACKTOP = i2;
  return;
 }
 _replace_do_bs(-1);
 STACKTOP = i2;
 return;
}

function _global_exe_one(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) != 10) {
  _do_cmdline(HEAP32[i4 >> 2] | 0, 0, 0, 2) | 0;
  STACKTOP = i3;
  return;
 }
 _do_cmdline(43706, 0, 0, 2) | 0;
 STACKTOP = i3;
 return;
}

function _mf_fullname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _found_tagfile_cb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 if ((_ga_grow(106056, 1) | 0) != 1) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i5 >> 2] = _vim_strsave(HEAP32[i4 >> 2] | 0) | 0;
 _simplify_filename(HEAP32[i5 >> 2] | 0);
 i4 = HEAP32[i5 >> 2] | 0;
 i5 = HEAP32[26518] | 0;
 i2 = HEAP32[26514] | 0;
 HEAP32[26514] = i2 + 1;
 HEAP32[i5 + (i2 << 2) >> 2] = i4;
 STACKTOP = i3;
 return;
}

function _fname_expand(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 4 | 0;
 i6 = i4;
 HEAP32[i4 + 8 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 if (!(HEAP32[HEAP32[i5 >> 2] >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 if (!(HEAP32[HEAP32[i6 >> 2] >> 2] | 0)) HEAP32[HEAP32[i6 >> 2] >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 i6 = _fix_fname(HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0;
 HEAP32[HEAP32[i5 >> 2] >> 2] = i6;
 STACKTOP = i4;
 return;
}

function _check_nomodeline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(_strncmp(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, 56083, 12) | 0)) {
  i1 = _skipwhite((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) + 12 | 0) | 0;
  HEAP32[HEAP32[i4 >> 2] >> 2] = i1;
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _can_abandon(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (_buf_hide(HEAP32[i4 >> 2] | 0) | 0) i6 = 1; else if (_bufIsChanged(HEAP32[i4 >> 2] | 0) | 0) if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 56 >> 2] | 0) > 1) i6 = 1; else if ((_autowrite(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) == 1) i6 = 1; else i6 = (HEAP32[i5 >> 2] | 0) != 0; else i6 = 1;
 STACKTOP = i3;
 return i6 & 1 | 0;
}

function _vim_strsave(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = (_strlen(HEAP32[i3 >> 2] | 0) | 0) + 1;
 HEAP32[i4 >> 2] = _alloc(HEAP32[i5 >> 2] | 0) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  i6 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 _memmove(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _screen_putchar(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 i10 = i5 + 16 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP8[i10 >> 0] = HEAP32[i6 >> 2];
 HEAP8[i10 + 1 >> 0] = 0;
 _screen_puts(i10, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _msg_screen_putchar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[26711] = 1;
 _screen_putchar(HEAP32[i4 >> 2] | 0, HEAP32[26877] | 0, HEAP32[27043] | 0, HEAP32[i5 >> 2] | 0);
 i5 = (HEAP32[27043] | 0) + 1 | 0;
 HEAP32[27043] = i5;
 if ((i5 | 0) < (HEAP32[10174] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[27043] = 0;
 HEAP32[26877] = (HEAP32[26877] | 0) + 1;
 STACKTOP = i3;
 return;
}

function _lbr_chartabsize_adv(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4 + 4 | 0;
 i8 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = _lbr_chartabsize(HEAP32[i5 >> 2] | 0, HEAP32[HEAP32[i6 >> 2] >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 STACKTOP = i4;
 return HEAP32[i8 >> 2] | 0;
}

function _hex2nr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 do if ((HEAP32[i4 >> 2] | 0) >= 97 & (HEAP32[i4 >> 2] | 0) <= 102) HEAP32[i3 >> 2] = i1 - 97 + 10; else {
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) >= 65 & (HEAP32[i4 >> 2] | 0) <= 70) {
   HEAP32[i3 >> 2] = i5 - 65 + 10;
   break;
  } else {
   HEAP32[i3 >> 2] = i5 - 48;
   break;
  }
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _gchar_pos(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) == 2147483647) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  HEAP32[i5 >> 2] = _ml_get_pos(HEAP32[i4 >> 2] | 0) | 0;
  HEAP32[i3 >> 2] = HEAPU8[HEAP32[i5 >> 2] >> 0];
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _executable_file(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 80 | 0;
 i4 = i2 + 76 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if (_stat(HEAP32[i4 >> 2] | 0, i5) | 0) {
  HEAP32[i3 >> 2] = 0;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 if ((HEAP32[i5 + 12 >> 2] & 61440 | 0) == 32768) i7 = (_access(HEAP32[i4 >> 2] | 0, 1) | 0) == 0; else i7 = 0;
 HEAP32[i3 >> 2] = i7 & 1;
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _set_b0_dir_flag(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i5 >> 2] | 0;
 i5 = (_same_directory(HEAP32[HEAP32[i2 + 4 >> 2] >> 2] | 0, HEAP32[i2 + 68 >> 2] | 0) | 0) != 0;
 i2 = (HEAP32[i4 >> 2] | 0) + 108 + 898 | 0;
 i4 = HEAPU8[i2 >> 0] | 0;
 if (i5) {
  HEAP8[i2 >> 0] = i4 | 4;
  STACKTOP = i3;
  return;
 } else {
  HEAP8[i2 >> 0] = i4 & -5;
  STACKTOP = i3;
  return;
 }
}

function _ins_del() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (!(_stop_arrow() | 0)) {
  STACKTOP = i1;
  return;
 }
 do if (!(_gchar_cursor() | 0)) {
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2];
  if (_can_bs(111) | 0) if (_do_join(2, 0, 1, 0, 0) | 0) {
   HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = HEAP32[i2 >> 2];
   break;
  }
  _vim_beep(2);
 } else if (!(_del_char(0) | 0)) _vim_beep(2); while (0);
 HEAP32[26791] = 0;
 _AppendCharToRedobuff(-17515);
 STACKTOP = i1;
 return;
}

function _can_bs(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 switch (HEAPU8[HEAP32[26892] >> 0] | 0 | 0) {
 case 50:
  {
   HEAP32[i3 >> 2] = 1;
   break;
  }
 case 49:
  {
   HEAP32[i3 >> 2] = (HEAP32[i4 >> 2] | 0) != 115 & 1;
   break;
  }
 case 48:
  {
   HEAP32[i3 >> 2] = 0;
   break;
  }
 default:
  HEAP32[i3 >> 2] = (_vim_strchr(HEAP32[26892] | 0, HEAP32[i4 >> 2] | 0) | 0) != 0 & 1;
 }
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _may_open_tabpage() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 i4 = HEAP32[27129] | 0;
 HEAP32[i3 >> 2] = (i4 | 0) == 0 ? HEAP32[26852] | 0 : i4 | 0;
 if (HEAP32[i3 >> 2] | 0) {
  HEAP32[27129] = 0;
  HEAP32[26852] = 0;
  HEAP32[i2 >> 2] = _win_new_tabpage(HEAP32[i3 >> 2] | 0) | 0;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i5 | 0;
 } else {
  HEAP32[i2 >> 2] = 0;
  i5 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i5 | 0;
 }
 return 0;
}

function _clear_wininfo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 168 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 168 >> 2];
  HEAP32[(HEAP32[i3 >> 2] | 0) + 168 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) _clear_winopt((HEAP32[i4 >> 2] | 0) + 24 | 0);
  _vim_free(HEAP32[i4 >> 2] | 0);
 }
 STACKTOP = i2;
 return;
}

function _ex_autocmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26783] | 0) {
  HEAP32[26783] = 2;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = 92223;
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
 i4 = HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 16) {
  _do_autocmd(i1, i4);
  STACKTOP = i2;
  return;
 } else {
  _do_augroup(i1, i4);
  STACKTOP = i2;
  return;
 }
}

function _buf_store_time(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 172 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 56 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 180 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 184 >> 2] = HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2];
 STACKTOP = i4;
 return;
}

function _do_nv_ident(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i4 = i3 + 132 | 0;
 i5 = i3 + 128 | 0;
 i6 = i3 + 44 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _clear_oparg(i6);
 i2 = i7;
 i1 = i2 + 44 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i1 | 0));
 HEAP32[i7 >> 2] = i6;
 HEAP32[i7 + 8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i5 >> 2];
 _nv_ident(i7);
 STACKTOP = i3;
 return;
}

function _clip_gen_set_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 do if (!(HEAP32[8292] | 0)) {
  if ((HEAP32[i4 >> 2] | 0) == 108396) {
   if (!(HEAP32[26767] & 2)) i2 = 4;
  } else i2 = 4;
  if ((i2 | 0) == 4) {
   if ((HEAP32[i4 >> 2] | 0) != 108396) break;
   if (!(HEAP32[26767] & 1)) break;
  }
  HEAP32[26613] = 1;
  STACKTOP = i3;
  return;
 } while (0);
 _clip_mch_set_selection(HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _msg_sb_start(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  if (HEAP32[i4 >> 2] | 0) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) i5 = (HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) + 8 >> 0] | 0) != 0 ^ 1; else i5 = 0; else i5 = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  if (!i5) break;
  HEAP32[i4 >> 2] = HEAP32[i6 + 4 >> 2];
 }
 STACKTOP = i2;
 return i6 | 0;
}

function _getdigits(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 HEAP32[i5 >> 2] = _atol(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 45) HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 HEAP32[i4 >> 2] = _skipdigits(HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i2;
 return HEAP32[i5 >> 2] | 0;
}

function _ex_helpclose(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) {
   i2 = 6;
   break;
  }
  i1 = (_bt_help(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) | 0) != 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if (i1) break;
  HEAP32[i4 >> 2] = HEAP32[i5 + 12 >> 2];
 }
 if ((i2 | 0) == 6) {
  STACKTOP = i3;
  return;
 }
 _win_close(i5, 0) | 0;
 STACKTOP = i3;
 return;
}

function _cls() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = _gchar_cursor() | 0;
 do if ((HEAP32[i3 >> 2] | 0) == 32 | (HEAP32[i3 >> 2] | 0) == 9 | (HEAP32[i3 >> 2] | 0) == 0) HEAP32[i2 >> 2] = 0; else {
  if (HEAP32[26484] | 0) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (_vim_iswordc(HEAP32[i3 >> 2] | 0) | 0) {
   HEAP32[i2 >> 2] = 2;
   break;
  } else {
   HEAP32[i2 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _expand_env_save_opt(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = _alloc(4096) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i7 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 _expand_env_esc(HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 4096, 0, HEAP32[i5 >> 2] | 0, 0);
 i7 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _ins_end(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 _undisplay_dollar();
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if ((HEAP32[i3 >> 2] | 0) == -22781) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
 _coladvance(2147483647) | 0;
 HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 2147483647;
 _start_arrow(i4);
 STACKTOP = i2;
 return;
}

function _free_buffer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[25158] = (HEAP32[25158] | 0) + 1;
 _free_buffer_stuff(HEAP32[i3 >> 2] | 0, 1);
 _buf_hashtab_remove(HEAP32[i3 >> 2] | 0);
 _aubuflocal_remove(HEAP32[i3 >> 2] | 0);
 if (HEAP32[26744] | 0) {
  HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] = HEAP32[26752];
  HEAP32[26752] = HEAP32[i3 >> 2];
  STACKTOP = i2;
  return;
 } else {
  _vim_free(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
}

function _u_unch_branch(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  i3 = (HEAP32[i4 >> 2] | 0) + 40 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1;
  if (HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) _u_unch_branch(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0);
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 }
 STACKTOP = i2;
 return;
}

function _alist_new() {
 var i1 = 0;
 i1 = _alloc(28) | 0;
 HEAP32[(HEAP32[26881] | 0) + 184 >> 2] = i1;
 i1 = (HEAP32[26881] | 0) + 184 | 0;
 if (!(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 107472;
  HEAP32[26873] = (HEAP32[26873] | 0) + 1;
  return;
 } else {
  HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] = 1;
  i1 = (HEAP32[26775] | 0) + 1 | 0;
  HEAP32[26775] = i1;
  HEAP32[(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0) + 24 >> 2] = i1;
  _alist_init(HEAP32[(HEAP32[26881] | 0) + 184 >> 2] | 0);
  return;
 }
}

function _tabpage_index(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 1;
 HEAP32[i5 >> 2] = HEAP32[26884];
 while (1) {
  if (HEAP32[i5 >> 2] | 0) i6 = (HEAP32[i5 >> 2] | 0) != (HEAP32[i3 >> 2] | 0); else i6 = 0;
  i7 = HEAP32[i4 >> 2] | 0;
  if (!i6) break;
  HEAP32[i4 >> 2] = i7 + 1;
  HEAP32[i5 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 }
 STACKTOP = i2;
 return i7 | 0;
}

function _syn_cterm_attr2entry(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - 256;
 if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26501] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = (HEAP32[26505] | 0) + ((HEAP32[i4 >> 2] | 0) * 20 | 0);
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _re_multi_type(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAP32[i4 >> 2] | 0) == -192 | (HEAP32[i4 >> 2] | 0) == -195 | (HEAP32[i4 >> 2] | 0) == -193) HEAP32[i3 >> 2] = 1; else if ((HEAP32[i4 >> 2] | 0) == -214 | (HEAP32[i4 >> 2] | 0) == -213 | (HEAP32[i4 >> 2] | 0) == -133) {
  HEAP32[i3 >> 2] = 2;
  break;
 } else {
  HEAP32[i3 >> 2] = 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _clip_clear_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAPU16[(HEAP32[i3 >> 2] | 0) + 48 >> 1] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[i3 >> 2] | 0) + 8 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + 16 | 0;
 _clip_invert_area(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, 1);
 HEAP16[(HEAP32[i3 >> 2] | 0) + 48 >> 1] = 0;
 STACKTOP = i2;
 return;
}

function _syn_term_attr2entry(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - 256;
 if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26496] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = (HEAP32[26500] | 0) + ((HEAP32[i4 >> 2] | 0) * 20 | 0);
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _lalloc_clear(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = _lalloc(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i7 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 _memset(HEAP32[i6 >> 2] | 0, 0, HEAP32[i4 >> 2] | 0) | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _syn_gui_attr2entry(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - 256;
 if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26491] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = (HEAP32[26495] | 0) + ((HEAP32[i4 >> 2] | 0) * 20 | 0);
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _reg_getline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if (((HEAP32[26320] | 0) + (HEAP32[i4 >> 2] | 0) | 0) < 1) HEAP32[i3 >> 2] = 0; else if ((HEAP32[i4 >> 2] | 0) > (HEAP32[26321] | 0)) {
  HEAP32[i3 >> 2] = 114072;
  break;
 } else {
  HEAP32[i3 >> 2] = _ml_get_buf(HEAP32[26319] | 0, (HEAP32[26320] | 0) + (HEAP32[i4 >> 2] | 0) | 0, 0) | 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _wipe_buffer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2] | 0) == ((HEAP32[258] | 0) - 1 | 0)) HEAP32[258] = (HEAP32[258] | 0) + -1;
 if (!(HEAP32[i5 >> 2] | 0)) _block_autocmds();
 _close_buffer(0, HEAP32[i4 >> 2] | 0, 4, 0);
 if (HEAP32[i5 >> 2] | 0) {
  STACKTOP = i3;
  return;
 }
 _unblock_autocmds();
 STACKTOP = i3;
 return;
}

function _vim_snprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i5 + 32 | 0;
 i7 = i5 + 28 | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 8 | 0;
 i10 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i10 >> 2] = _vim_vsnprintf(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, i9) | 0;
 STACKTOP = i5;
 return HEAP32[i10 >> 2] | 0;
}

function _ex_undojoin(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[26773] | 0) + 508 >> 2] | 0) {
  _emsg(81062) | 0;
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[26773] | 0) + 516 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((_get_undolevel() | 0) < 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[26773] | 0) + 516 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _plain_vgetc() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 while (1) {
  HEAP32[i2 >> 2] = _safe_vgetc() | 0;
  if ((HEAP32[i2 >> 2] | 0) == -13821 | (HEAP32[i2 >> 2] | 0) == -22777) continue; else if ((HEAP32[i2 >> 2] | 0) == -22776) continue; else break;
 }
 if ((HEAP32[i2 >> 2] | 0) != -21328) {
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = _bracketed_paste(3, 0, 0) | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _nv_Zet(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 L1 : do if (!(_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0)) switch (HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) {
 case 90:
  {
   _do_cmdline_cmd(61885) | 0;
   break L1;
   break;
  }
 case 81:
  {
   _do_cmdline_cmd(61887) | 0;
   break L1;
   break;
  }
 default:
  {
   _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
   break L1;
  }
 } while (0);
 STACKTOP = i2;
 return;
}

function _gui_mch_clear_block(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _gui_mch_set_bg_color(HEAP32[26674] | 0);
 _vimwasm_clear_block(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _FreeWild(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[i4 >> 2] | 0) <= 0 | (HEAP32[i5 >> 2] | 0) == 0) {
  STACKTOP = i3;
  return;
 }
 while (1) {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i2 + -1;
  i6 = HEAP32[i5 >> 2] | 0;
  if (!i2) break;
  _vim_free(HEAP32[i6 + (HEAP32[i4 >> 2] << 2) >> 2] | 0);
 }
 _vim_free(i6);
 STACKTOP = i3;
 return;
}

function _ui_write(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAP32[26627] | 0) == 0 | (HEAP32[26630] | 0) != 0 | (HEAP32[26628] | 0) != 0) {
  STACKTOP = i3;
  return;
 }
 _gui_write(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 if (!(HEAP32[27042] | 0)) {
  STACKTOP = i3;
  return;
 }
 _gui_wait_for_chars(HEAP32[27042] | 0, HEAP32[26825] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _modname(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 if (HEAP32[(HEAP32[26773] | 0) + 684 >> 2] | 0) i8 = 1; else i8 = (HEAP32[(HEAP32[26773] | 0) + 784 >> 2] | 0) != 0;
 i3 = _buf_modname(i8 & 1, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _option_was_set(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _findoption(HEAP32[i4 >> 2] | 0) | 0;
 do if ((HEAP32[i5 >> 2] | 0) < 0) HEAP32[i3 >> 2] = 0; else if (HEAP32[15328 + ((HEAP32[i5 >> 2] | 0) * 28 | 0) + 8 >> 2] & 256 | 0) {
  HEAP32[i3 >> 2] = 1;
  break;
 } else {
  HEAP32[i3 >> 2] = 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _nv_bck_word(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 if (_bck_word(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0, 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _get_real_state() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 do if (HEAP32[10180] & 1 | 0) {
  if (!(HEAP32[26788] | 0)) {
   if (!(HEAP32[26796] | 0)) {
    i1 = 8;
    break;
   }
   HEAP32[i3 >> 2] = 4;
   break;
  }
  if (HEAP32[26789] | 0) {
   HEAP32[i3 >> 2] = 4096;
   break;
  } else {
   HEAP32[i3 >> 2] = 2;
   break;
  }
 } else i1 = 8; while (0);
 if ((i1 | 0) == 8) HEAP32[i3 >> 2] = HEAP32[10180];
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _restore_cmdline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = 100944;
 i4 = 100996;
 i5 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  i1 = i1 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i1 | 0) < (i5 | 0));
 i1 = 100996;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  i1 = i1 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i1 | 0) < (i5 | 0));
 STACKTOP = i2;
 return;
}

function _nv_abbrev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == -17515) i2 = 3; else if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0) == -20733) i2 = 3;
 if ((i2 | 0) == 3) HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = 120;
 i2 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[26788] | 0) {
  _v_visop(i2);
  STACKTOP = i3;
  return;
 } else {
  _nv_optrans(i2);
  STACKTOP = i3;
  return;
 }
}

function _ins_home(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 _undisplay_dollar();
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 if ((HEAP32[i3 >> 2] | 0) == -22525) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
 HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] = 0;
 HEAP32[(HEAP32[26881] | 0) + 32 >> 2] = 0;
 _start_arrow(i4);
 STACKTOP = i2;
 return;
}

function _botline_forw(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) {
  HEAP32[i1 + 4 >> 2] = 2147483647;
  STACKTOP = i2;
  return;
 } else {
  i4 = _plines(HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = i4;
  STACKTOP = i2;
  return;
 }
}

function _au_remove_cmds(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  if (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) {
   _vim_free(HEAP32[HEAP32[i4 >> 2] >> 2] | 0);
   HEAP32[HEAP32[i4 >> 2] >> 2] = 0;
  }
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2];
 }
 HEAP32[25368] = 1;
 STACKTOP = i2;
 return;
}

function _shell_resized_check() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i2 >> 2] = HEAP32[10173];
 HEAP32[i3 >> 2] = HEAP32[10174];
 if ((HEAP32[26778] | 0) != 0 | (HEAP32[26628] | 0) != 0) {
  STACKTOP = i1;
  return;
 }
 _ui_get_shellsize() | 0;
 _check_shellsize();
 if ((HEAP32[i2 >> 2] | 0) == (HEAP32[10173] | 0)) if ((HEAP32[i3 >> 2] | 0) == (HEAP32[10174] | 0)) {
  STACKTOP = i1;
  return;
 }
 _shell_resized();
 STACKTOP = i1;
 return;
}

function _msg_check_screen() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26781] | 0) if (_screen_valid(0) | 0) {
  if ((HEAP32[26877] | 0) >= (HEAP32[10173] | 0)) HEAP32[26877] = (HEAP32[10173] | 0) - 1;
  if ((HEAP32[27043] | 0) >= (HEAP32[10174] | 0)) HEAP32[27043] = (HEAP32[10174] | 0) - 1;
  HEAP32[i2 >> 2] = 1;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _buflist_findfpos(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = _find_wininfo(HEAP32[i4 >> 2] | 0, 0) | 0;
 if (HEAP32[i5 >> 2] | 0) {
  HEAP32[i3 >> 2] = (HEAP32[i5 >> 2] | 0) + 12;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  HEAP32[i3 >> 2] = 1024;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _u_undo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 516 >> 2] | 0)) {
  _u_sync(1);
  HEAP32[i3 >> 2] = 1;
 }
 if (!(_vim_strchr(HEAP32[26904] | 0, 117) | 0)) {
  HEAP32[26622] = 1;
  i4 = HEAP32[i3 >> 2] | 0;
  _u_doit(i4);
  STACKTOP = i2;
  return;
 } else {
  HEAP32[26622] = ((HEAP32[26622] | 0) != 0 ^ 1) & 1;
  i4 = HEAP32[i3 >> 2] | 0;
  _u_doit(i4);
  STACKTOP = i2;
  return;
 }
}

function _u_sync(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[26773] | 0) + 516 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i3 >> 2] | 0) == 0 & (HEAP32[26805] | 0) > 0) {
  STACKTOP = i2;
  return;
 }
 if ((_get_undolevel() | 0) < 0) {
  HEAP32[(HEAP32[26773] | 0) + 516 >> 2] = 1;
  STACKTOP = i2;
  return;
 } else {
  _u_getbot();
  HEAP32[(HEAP32[26773] | 0) + 508 >> 2] = 0;
  STACKTOP = i2;
  return;
 }
}

function _reg_save(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[26334] | 0;
 if (!(HEAP32[26312] | 0)) {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i2 - (HEAP32[26325] | 0);
  HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[26326];
 } else HEAP32[HEAP32[i4 >> 2] >> 2] = i2;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 STACKTOP = i3;
 return;
}

function _put_line(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 if ((_fputs(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) >= 0) if (_put_eol(HEAP32[i5 >> 2] | 0) | 0) {
  HEAP32[i4 >> 2] = 1;
  i7 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i3;
  return i7 | 0;
 }
 HEAP32[i4 >> 2] = 0;
 i7 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i3;
 return i7 | 0;
}

function _map_clear(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5 + 16 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 + 12 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i9 >> 2] = _get_map_mode(i6, HEAP32[i7 >> 2] | 0) | 0;
 _map_clear_int(HEAP32[26773] | 0, HEAP32[i9 >> 2] | 0, 0, HEAP32[i8 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _change_compatible(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[26903] | 0) != (HEAP32[i3 >> 2] | 0)) {
  HEAP32[26903] = HEAP32[i3 >> 2];
  _compatible_set();
 }
 HEAP32[i4 >> 2] = _findoption(65033) | 0;
 if ((HEAP32[i4 >> 2] | 0) < 0) {
  STACKTOP = i2;
  return;
 }
 i3 = 15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 256;
 STACKTOP = i2;
 return;
}

function _u_savesub(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[26840] | 0) {
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  i1 = HEAP32[i4 >> 2] | 0;
  i6 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
  HEAP32[i3 >> 2] = _u_savecommon(i1 - 1 | 0, i6 | 0, i6 | 0, 0) | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _do_in_runtimepath(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 i4 = _do_in_path_and_pp(HEAP32[26969] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _file_owned(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 80 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = _getuid() | 0;
 if (_stat(HEAP32[i3 >> 2] | 0, i4) | 0) i6 = 1; else if ((HEAP32[i4 + 20 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) i6 = 1; else if (_lstat(HEAP32[i3 >> 2] | 0, i4) | 0) i6 = 1; else i6 = (HEAP32[i4 + 20 >> 2] | 0) != (HEAP32[i5 >> 2] | 0);
 STACKTOP = i2;
 return (i6 ^ 1) & 1 | 0;
}

function _check_options() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if (!(HEAP32[15328 + ((HEAP32[i2 >> 2] | 0) * 28 | 0) >> 2] | 0)) break;
  if (HEAP32[15328 + ((HEAP32[i2 >> 2] | 0) * 28 | 0) + 8 >> 2] & 4 | 0) if (HEAP32[15328 + ((HEAP32[i2 >> 2] | 0) * 28 | 0) + 12 >> 2] | 0) _check_string_option(_get_varp(15328 + ((HEAP32[i2 >> 2] | 0) * 28 | 0) | 0) | 0);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i1;
 return;
}

function _fillchar_vsep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[27063];
 if ((HEAP32[10187] | 0) == 32 ? (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) == 0 : 0) {
  HEAP32[i3 >> 2] = 124;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = HEAP32[10187];
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _vim_is_iris(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[i4 >> 2] | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 if (!(_strncasecmp(HEAP32[i4 >> 2] | 0, 80009, 9) | 0)) i6 = 1; else i6 = (_strcmp(HEAP32[i4 >> 2] | 0, 71932) | 0) == 0;
 HEAP32[i3 >> 2] = i6 & 1;
 i5 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _backslash_trans(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 switch (HEAP32[i4 >> 2] | 0) {
 case 114:
  {
   HEAP32[i3 >> 2] = 13;
   break;
  }
 case 116:
  {
   HEAP32[i3 >> 2] = 9;
   break;
  }
 case 101:
  {
   HEAP32[i3 >> 2] = 27;
   break;
  }
 case 98:
  {
   HEAP32[i3 >> 2] = 8;
   break;
  }
 default:
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 }
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _appended_lines_mark(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (((HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0) < (HEAP32[HEAP32[26773] >> 2] | 0)) _mark_adjust((HEAP32[i4 >> 2] | 0) + 1 | 0, 2147483647, HEAP32[i5 >> 2] | 0, 0);
 i2 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
 _changed_lines(i2 | 0, 0, i2 | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ui_get_shellsize() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26627] | 0) HEAP32[i2 >> 2] = _gui_get_shellsize() | 0; else HEAP32[i2 >> 2] = _mch_get_shellsize() | 0;
 _check_shellsize();
 if ((HEAP32[i2 >> 2] | 0) != 1) {
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 _set_number_default(80592, HEAP32[10173] | 0);
 _set_number_default(80598, HEAP32[10174] | 0);
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _u_freeentry(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 while (1) {
  i6 = HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0;
  if ((HEAP32[i5 >> 2] | 0) <= 0) break;
  i2 = (HEAP32[i5 >> 2] | 0) + -1 | 0;
  HEAP32[i5 >> 2] = i2;
  _vim_free(HEAP32[i6 + (i2 << 2) >> 2] | 0);
 }
 _vim_free(i6);
 _vim_free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _set_buflisted(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == (HEAP32[(HEAP32[26773] | 0) + 596 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[26773] | 0) + 596 >> 2] = HEAP32[i3 >> 2];
 i1 = HEAP32[26773] | 0;
 if (HEAP32[i3 >> 2] | 0) {
  _apply_autocmds(0, 0, 0, 0, i1) | 0;
  STACKTOP = i2;
  return;
 } else {
  _apply_autocmds(1, 0, 0, 0, i1) | 0;
  STACKTOP = i2;
  return;
 }
}

function _bufref_valid(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[25158] | 0)) {
  i4 = 1;
  STACKTOP = i2;
  return i4 | 0;
 }
 if (_buf_valid(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) i5 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 92 >> 2] | 0); else i5 = 0;
 i4 = i5 & 1;
 STACKTOP = i2;
 return i4 | 0;
}

function _end_global_changes() {
 var i1 = 0;
 i1 = (HEAP32[26614] | 0) + -1 | 0;
 HEAP32[26614] = i1;
 if ((i1 | 0) > 0) return;
 if (!(HEAP32[8292] | 0)) {
  HEAP32[8292] = 1;
  HEAP32[26762] = HEAP32[26767];
  HEAP32[26767] = 0;
  if (HEAP32[26613] | 0) {
   if (HEAP32[26762] & 1 | 0) {
    _clip_own_selection(108396);
    _clip_gen_set_selection(108396);
   }
   if (HEAP32[26762] & 2 | 0) {
    _clip_own_selection(108396);
    _clip_gen_set_selection(108396);
   }
  }
 }
 HEAP32[26613] = 0;
 return;
}

function _repeat_message() {
 if ((HEAP32[10180] | 0) == 768) {
  _msg_moremsg(1);
  HEAP32[26877] = (HEAP32[10173] | 0) - 1;
  return;
 }
 if ((HEAP32[10180] | 0) == 1536) {
  _windgoto(HEAP32[26877] | 0, HEAP32[27043] | 0);
  return;
 }
 if (!((HEAP32[10180] | 0) == 513 | (HEAP32[10180] | 0) == 1024)) return;
 if ((HEAP32[26877] | 0) == ((HEAP32[10173] | 0) - 1 | 0)) {
  HEAP32[26711] = 0;
  HEAP32[27043] = 0;
  _msg_clr_eos();
 }
 _hit_return_msg();
 HEAP32[26877] = (HEAP32[10173] | 0) - 1;
 return;
}

function ___stdio_seek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 20 | 0;
 HEAP32[i5 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = i2;
 HEAP32[i5 + 12 >> 2] = i6;
 HEAP32[i5 + 16 >> 2] = i3;
 if ((___syscall_ret(___syscall140(140, i5 | 0) | 0) | 0) < 0) {
  HEAP32[i6 >> 2] = -1;
  i7 = -1;
 } else i7 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i4;
 return i7 | 0;
}

function _ex_doautocmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 i6 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 HEAP32[i5 >> 2] = _check_nomodeline(i4) | 0;
 _do_doautocmd(HEAP32[i4 >> 2] | 0, 1, i6) | 0;
 if (!((HEAP32[i5 >> 2] | 0) != 0 & (HEAP32[i6 >> 2] | 0) != 0)) {
  STACKTOP = i2;
  return;
 }
 _do_modelines(0);
 STACKTOP = i2;
 return;
}

function _strcmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = HEAP8[i1 >> 0] | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i4 << 24 >> 24) {
  i5 = i4;
  i6 = i3;
 } else {
  i3 = i2;
  i2 = i1;
  do {
   i2 = i2 + 1 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   i4 = HEAP8[i3 >> 0] | 0;
  } while (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i4 << 24 >> 24));
  i5 = i4;
  i6 = i1;
 }
 return (i6 & 255) - (i5 & 255) | 0;
}

function _ml_open_files() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i3 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[i3 >> 2] | 0) + 676 >> 2] | 0) {
   if (HEAP32[(HEAP32[i3 >> 2] | 0) + 108 >> 2] | 0) i1 = 5;
  } else i1 = 5;
  if ((i1 | 0) == 5) {
   i1 = 0;
   _ml_open_file(HEAP32[i3 >> 2] | 0);
  }
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2];
 }
 STACKTOP = i2;
 return;
}

function _lineclear(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _memset((HEAP32[26691] | 0) + (HEAP32[i5 >> 2] | 0) | 0, 32, HEAP32[i6 >> 2] | 0) | 0;
 _memset((HEAP32[26692] | 0) + (HEAP32[i5 >> 2] << 1) | 0, HEAP32[i7 >> 2] & 255 | 0, HEAP32[i6 >> 2] << 1 | 0) | 0;
 STACKTOP = i4;
 return;
}

function _backslash_halve(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  if (!(HEAP8[HEAP32[i3 >> 2] >> 0] | 0)) break;
  if (_rem_backslash(HEAP32[i3 >> 2] | 0) | 0) {
   i1 = HEAP32[i3 >> 2] | 0;
   i4 = i1 | 0;
   i5 = i1 + 1 | 0;
   _memmove(i4 | 0, i5 | 0, (_strlen((HEAP32[i3 >> 2] | 0) + 1 | 0) | 0) + 1 | 0) | 0;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 }
 STACKTOP = i2;
 return;
}

function _map_free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 _vim_free(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ff_free_stack_element(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0)) {
  i4 = HEAP32[i3 >> 2] | 0;
  _vim_free(i4);
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 _FreeWild(HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0);
 i4 = HEAP32[i3 >> 2] | 0;
 _vim_free(i4);
 STACKTOP = i2;
 return;
}

function _save_se_multi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[26326];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = (HEAP32[26334] | 0) - (HEAP32[26325] | 0);
 STACKTOP = i3;
 return;
}

function _ga_append(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((_ga_grow(HEAP32[i4 >> 2] | 0, 1) | 0) != 1) {
  STACKTOP = i3;
  return;
 }
 HEAP8[(HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) >> 0] = HEAP32[i5 >> 2];
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
 STACKTOP = i3;
 return;
}

function _re_mult_next(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((_re_multi_type(_peekchr() | 0) | 0) == 2) {
  _emsg2(73900, HEAP32[i4 >> 2] | 0 ? 114072 : 73093) | 0;
  HEAP32[26719] = 1;
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _msg_clr_eos_force() {
 var i1 = 0;
 if (!(_msg_use_printf() | 0)) {
  i1 = HEAP32[26877] | 0;
  _screen_fill(i1 | 0, i1 + 1 | 0, HEAP32[27043] | 0, HEAP32[10174] | 0, 32, 32, 0);
  _screen_fill((HEAP32[26877] | 0) + 1 | 0, HEAP32[10173] | 0, 0, HEAP32[10174] | 0, 32, 32, 0);
  return;
 }
 if (!(HEAP32[26781] | 0)) return;
 if (HEAP8[HEAP32[26527] >> 0] | 0) {
  _out_str(HEAP32[26527] | 0);
  return;
 }
 if (!(HEAP8[HEAP32[26520] >> 0] | 0)) return;
 _out_str(HEAP32[26520] | 0);
 return;
}

function _ex_put(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0)) {
  HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = 1;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = 1;
 }
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2];
 i1 = HEAP32[i3 >> 2] | 0;
 _do_put(HEAP32[i1 + 72 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0 ? -1 : 1, 1, 12);
 STACKTOP = i2;
 return;
}

function _buf_hide(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 switch (HEAPU8[HEAP32[(HEAP32[i4 >> 2] | 0) + 588 >> 2] >> 0] | 0 | 0) {
 case 100:
 case 119:
 case 117:
  {
   HEAP32[i3 >> 2] = 0;
   break;
  }
 case 104:
  {
   HEAP32[i3 >> 2] = 1;
   break;
  }
 default:
  HEAP32[i3 >> 2] = (HEAP32[26929] | 0 ? 1 : (HEAP32[27127] | 0) != 0) & 1;
 }
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _oneleft() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (!(HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 } else {
  HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
  i4 = (HEAP32[26881] | 0) + 24 + 4 | 0;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1;
  HEAP32[i2 >> 2] = 1;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}

function _fwrite(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = Math_imul(i3, i2) | 0;
 i6 = (i2 | 0) == 0 ? 0 : i3;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) {
  i3 = (___lockfile(i4) | 0) == 0;
  i7 = ___fwritex(i1, i5, i4) | 0;
  if (i3) i8 = i7; else {
   ___unlockfile(i4);
   i8 = i7;
  }
 } else i8 = ___fwritex(i1, i5, i4) | 0;
 if ((i8 | 0) == (i5 | 0)) i9 = i6; else i9 = (i8 >>> 0) / (i2 >>> 0) | 0;
 return i9 | 0;
}

function _memcmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 L1 : do if (!i3) i4 = 0; else {
  i5 = i1;
  i6 = i3;
  i7 = i2;
  while (1) {
   i8 = HEAP8[i5 >> 0] | 0;
   i9 = HEAP8[i7 >> 0] | 0;
   if (i8 << 24 >> 24 != i9 << 24 >> 24) break;
   i6 = i6 + -1 | 0;
   if (!i6) {
    i4 = 0;
    break L1;
   } else {
    i5 = i5 + 1 | 0;
    i7 = i7 + 1 | 0;
   }
  }
  i4 = (i8 & 255) - (i9 & 255) | 0;
 } while (0);
 return i4 | 0;
}

function _may_get_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 do if ((HEAP32[i3 >> 2] | 0) == 42) if (HEAP32[27099] | 0) {
  _clip_get_selection(108396);
  break;
 } else {
  HEAP32[i3 >> 2] = 0;
  break;
 } else if ((HEAP32[i3 >> 2] | 0) == 43) if (HEAP32[27099] | 0) {
  _clip_get_selection(108396);
  break;
 } else {
  HEAP32[i3 >> 2] = 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _vim_vsnprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 i4 = _vim_vsnprintf_typval(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _verbose_open() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (!((HEAP32[27233] | 0) != 0 | (HEAP32[27235] | 0) != 0)) {
  HEAP32[27235] = 1;
  HEAP32[27233] = _fopen(HEAP32[3827] | 0, 97579) | 0;
  if (!(HEAP32[27233] | 0)) {
   _emsg2(93293, HEAP32[3827] | 0) | 0;
   HEAP32[i2 >> 2] = 0;
   i3 = HEAP32[i2 >> 2] | 0;
   STACKTOP = i1;
   return i3 | 0;
  }
 }
 HEAP32[i2 >> 2] = 1;
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _ex_stop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_check_restricted() | 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0)) _autowrite_all();
 _windgoto((HEAP32[10173] | 0) - 1 | 0, 0);
 _out_char(10);
 _out_flush();
 _stoptermcap();
 _out_flush();
 _ui_suspend();
 _starttermcap();
 _scroll_start();
 _redraw_later_clear();
 _shell_resized();
 STACKTOP = i2;
 return;
}

function _ui_breakcheck_force(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26758];
 HEAP32[26758] = (HEAP32[26758] | 0) + 1;
 if (HEAP32[26627] | 0) _gui_mch_update(); else _mch_breakcheck(HEAP32[i3 >> 2] | 0);
 if (HEAP32[i4 >> 2] | 0) {
  HEAP32[26758] = HEAP32[i4 >> 2];
  STACKTOP = i2;
  return;
 } else {
  _reset_updating_screen(0);
  STACKTOP = i2;
  return;
 }
}

function _curbuf_reusable() {
 var i1 = 0;
 do if (HEAP32[26773] | 0) if (!(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) if ((HEAP32[(HEAP32[26773] | 0) + 56 >> 2] | 0) <= 1) {
  if (HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0) {
   if ((HEAP32[HEAP32[26773] >> 2] | 0) != 1) {
    i1 = 0;
    break;
   }
   if (HEAPU8[(_ml_get(1) | 0) >> 0] | 0 | 0) {
    i1 = 0;
    break;
   }
  }
  i1 = (_curbufIsChanged() | 0) != 0 ^ 1;
 } else i1 = 0; else i1 = 0; else i1 = 0; while (0);
 return i1 & 1 | 0;
}

function _buf_hashtab_remove(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _hash_find(100636, (HEAP32[i3 >> 2] | 0) + 96 | 0) | 0;
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] | 0) == 113987) {
  STACKTOP = i2;
  return;
 }
 _hash_remove(100636, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _u_clearall(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 508 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 500 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 504 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 516 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 512 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 540 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 544 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _nv_end(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) if (!(HEAP32[26698] & 4)) {
  i4 = HEAP32[i3 >> 2] | 0;
  _nv_dollar(i4);
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = 1;
 _nv_goto(HEAP32[i3 >> 2] | 0);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = 1;
 i4 = HEAP32[i3 >> 2] | 0;
 _nv_dollar(i4);
 STACKTOP = i2;
 return;
}

function _mch_isrealdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 80 | 0;
 i4 = i2 + 76 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 do if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) HEAP32[i3 >> 2] = 0; else if (_lstat(HEAP32[i4 >> 2] | 0, i5) | 0) {
  HEAP32[i3 >> 2] = 0;
  break;
 } else {
  HEAP32[i3 >> 2] = (HEAP32[i5 + 12 >> 2] & 61440 | 0) == 16384 ? 1 : 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _hit_return_msg() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[26958];
 HEAP32[26958] = 0;
 if (HEAP32[26711] | 0) _msg_putchar(10);
 if (HEAP32[26834] | 0) _msg_puts(97524);
 _msg_puts_attr(97536, HEAP32[27060] | 0);
 if (_msg_use_printf() | 0) {
  i3 = HEAP32[i2 >> 2] | 0;
  HEAP32[26958] = i3;
  STACKTOP = i1;
  return;
 }
 _msg_clr_eos();
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[26958] = i3;
 STACKTOP = i1;
 return;
}

function _gui_mch_invert_rectangle(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _vimwasm_invert_rectangle(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _highest_patch() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if (!(HEAP32[33180 + (HEAP32[i2 >> 2] << 2) >> 2] | 0)) break;
  if ((HEAP32[33180 + (HEAP32[i2 >> 2] << 2) >> 2] | 0) > (HEAP32[i3 >> 2] | 0)) HEAP32[i3 >> 2] = HEAP32[33180 + (HEAP32[i2 >> 2] << 2) >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i1;
 return HEAP32[i3 >> 2] | 0;
}

function _has_format_option(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[26961] | 0) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = (_vim_strchr(HEAP32[(HEAP32[26773] | 0) + 628 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0) != 0 & 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _get_nolist_virtcol() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[(HEAP32[26881] | 0) + 200 >> 2] | 0) if (!(_vim_strchr(HEAP32[26904] | 0, 76) | 0)) {
  HEAP32[i2 >> 2] = _getvcol_nolist((HEAP32[26881] | 0) + 24 | 0) | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 _validate_virtcol();
 HEAP32[i2 >> 2] = HEAP32[(HEAP32[26881] | 0) + 132 >> 2];
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _ga_clear_strings(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  i5 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) break;
  _vim_free(HEAP32[(HEAP32[i5 + 16 >> 2] | 0) + (HEAP32[i4 >> 2] << 2) >> 2] | 0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 _ga_clear(i5);
 STACKTOP = i2;
 return;
}

function _vim_isfilec_or_wc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP8[i4 >> 0] = HEAP32[i3 >> 2];
 HEAP8[i4 + 1 >> 0] = 0;
 i1 = (_vim_isfilec(HEAP32[i3 >> 2] | 0) | 0) != 0;
 if (i1 | (HEAP32[i3 >> 2] | 0) == 93) {
  i5 = 1;
  i6 = i5 & 1;
  STACKTOP = i2;
  return i6 | 0;
 }
 i5 = (_mch_has_wildcard(i4) | 0) != 0;
 i6 = i5 & 1;
 STACKTOP = i2;
 return i6 | 0;
}

function _topline_back(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) < 1) {
  HEAP32[i1 + 4 >> 2] = 2147483647;
  STACKTOP = i2;
  return;
 } else {
  i4 = _plines(HEAP32[i1 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = i4;
  STACKTOP = i2;
  return;
 }
}

function _mch_isdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 80 | 0;
 i4 = i2 + 76 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 do if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) HEAP32[i3 >> 2] = 0; else if (_stat(HEAP32[i4 >> 2] | 0, i5) | 0) {
  HEAP32[i3 >> 2] = 0;
  break;
 } else {
  HEAP32[i3 >> 2] = (HEAP32[i5 + 12 >> 2] & 61440 | 0) == 16384 ? 1 : 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _nv_dot(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[26806] | 0) i4 = (HEAP32[27126] | 0) != 0 ^ 1; else i4 = 0;
 if (_start_redo(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0, i4 & 1) | 0) {
  STACKTOP = i2;
  return;
 }
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _mark_adjust_nofold(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _mark_adjust_internal(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0);
 STACKTOP = i5;
 return;
}

function _ExpandInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = -1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _status_redraw_curbuf() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i2 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[i2 >> 2] | 0) + 92 >> 2] | 0) if ((HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[26773] | 0)) {
   HEAP32[(HEAP32[i2 >> 2] | 0) + 176 >> 2] = 1;
   _redraw_later(10);
  }
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2];
 }
 STACKTOP = i1;
 return;
}

function _ex_argadd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) > 0) {
  i4 = HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0;
  _do_arglist(i1, 2, i4) | 0;
  STACKTOP = i2;
  return;
 } else {
  i4 = (HEAP32[(HEAP32[26881] | 0) + 188 >> 2] | 0) + 1 | 0;
  _do_arglist(i1, 2, i4) | 0;
  STACKTOP = i2;
  return;
 }
}

function _set_bufref(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[i5 >> 2];
 if (!(HEAP32[i5 >> 2] | 0)) i6 = 0; else i6 = HEAP32[(HEAP32[i5 >> 2] | 0) + 92 >> 2] | 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i6;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = HEAP32[25158];
 STACKTOP = i3;
 return;
}

function _u_get_headentry() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) if (HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 24 >> 2] | 0) {
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[(HEAP32[26773] | 0) + 504 >> 2] | 0) + 24 >> 2];
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 _iemsg(80702);
 HEAP32[i2 >> 2] = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _correct_range(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 4096 | 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0)) HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] = 1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _goto_tabpage_win(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _goto_tabpage_tp(HEAP32[i4 >> 2] | 0, 1, 1);
 if ((HEAP32[26886] | 0) != (HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 if (!(_win_valid(HEAP32[i5 >> 2] | 0) | 0)) {
  STACKTOP = i3;
  return;
 }
 _win_enter(HEAP32[i5 >> 2] | 0, 1);
 STACKTOP = i3;
 return;
}

function _b0_magic_wrong(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 1008 >> 2] | 0) != 808530483) i4 = 1; else if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 1012 >> 2] | 0) != 539042339) i4 = 1; else if ((HEAP16[(HEAP32[i3 >> 2] | 0) + 1016 >> 1] | 0) != 4627) i4 = 1; else i4 = (HEAPU8[(HEAP32[i3 >> 2] | 0) + 1018 >> 0] | 0) != 85;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _checkclearopq(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[26788] | 0 ? 1 : (HEAP32[HEAP32[i4 >> 2] >> 2] | 0) != 0) {
  _clearopbeep(HEAP32[i4 >> 2] | 0);
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _bt_dontwrite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[i3 >> 2] | 0) if ((HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] >> 0] | 0 | 0) == 110) i4 = 1; else if ((HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] >> 0] | 0 | 0) == 116) i4 = 1; else i4 = (HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] >> 0] | 0 | 0) == 112; else i4 = 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _mark_adjust(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _mark_adjust_internal(HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, 1);
 STACKTOP = i5;
 return;
}

function _getaltfname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 12 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 if (_buflist_name_nr(0, i5, i2) | 0) {
  HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 if (HEAP32[i4 >> 2] | 0) _emsg(92715) | 0;
 HEAP32[i3 >> 2] = 0;
 i6 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i2;
 return i6 | 0;
}

function _win_alloc_first() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 do if (!(_win_alloc_firstwin(0) | 0)) HEAP32[i2 >> 2] = 0; else {
  HEAP32[26884] = _alloc_tabpage() | 0;
  if (!(HEAP32[26884] | 0)) {
   HEAP32[i2 >> 2] = 0;
   break;
  } else {
   HEAP32[(HEAP32[26884] | 0) + 4 >> 2] = HEAP32[27114];
   HEAP32[26886] = HEAP32[26884];
   HEAP32[i2 >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _screen_puts(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5 + 12 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5 + 4 | 0;
 i9 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i9 >> 2] = i4;
 _screen_puts_len(HEAP32[i6 >> 2] | 0, -1, HEAP32[i7 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0);
 STACKTOP = i5;
 return;
}

function _ioctl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 16 | 0;
 HEAP32[i6 >> 2] = i3;
 i3 = (HEAP32[i6 >> 2] | 0) + (4 - 1) & ~(4 - 1);
 i7 = HEAP32[i3 >> 2] | 0;
 HEAP32[i6 >> 2] = i3 + 4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i7;
 i7 = ___syscall_ret(___syscall54(54, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i7 | 0;
}

function _get_highlight_default() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = _findoption(66615) | 0;
 if ((HEAP32[i3 >> 2] | 0) >= 0) {
  HEAP32[i2 >> 2] = HEAP32[15328 + ((HEAP32[i3 >> 2] | 0) * 28 | 0) + 20 >> 2];
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 } else {
  HEAP32[i2 >> 2] = 0;
  i4 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i4 | 0;
 }
 return 0;
}

function _append(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 while (1) {
  if (!(HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 }
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return HEAP32[i6 >> 2] | 0;
}

function _free_buff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i5 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
  _vim_free(HEAP32[i4 >> 2] | 0);
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 }
 HEAP32[HEAP32[i3 >> 2] >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _buf_clear_file(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[HEAP32[i3 >> 2] >> 2] = 1;
 _unchanged(HEAP32[i3 >> 2] | 0, 1);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 784 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 600 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 764 >> 2] = 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function ___towrite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 74 | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i3 + 255 | i3;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(i3 & 8)) {
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i2 = HEAP32[i1 + 44 >> 2] | 0;
  HEAP32[i1 + 28 >> 2] = i2;
  HEAP32[i1 + 20 >> 2] = i2;
  HEAP32[i1 + 16 >> 2] = i2 + (HEAP32[i1 + 48 >> 2] | 0);
  i4 = 0;
 } else {
  HEAP32[i1 >> 2] = i3 | 32;
  i4 = -1;
 }
 return i4 | 0;
}

function _u_inssub(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (HEAP32[26840] | 0) {
  HEAP32[i3 >> 2] = 1;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  i1 = HEAP32[i4 >> 2] | 0;
  HEAP32[i3 >> 2] = _u_savecommon(i1 - 1 | 0, i1 | 0, i1 + 1 | 0, 0) | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _bufIsChangedNotTerm(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 if (_bt_dontwrite(HEAP32[i4 >> 2] | 0) | 0) if (_bt_prompt(HEAP32[i4 >> 2] | 0) | 0) i2 = 3; else i5 = 0; else i2 = 3;
 if ((i2 | 0) == 3) if (HEAP32[(HEAP32[i4 >> 2] | 0) + 108 >> 2] | 0) i5 = 1; else i5 = (_file_ff_differs(HEAP32[i4 >> 2] | 0, 1) | 0) != 0;
 STACKTOP = i3;
 return i5 & 1 | 0;
}

function _closescript() {
 var i1 = 0, i2 = 0, i3 = 0;
 _free_typebuf();
 i1 = 107268;
 i2 = 101972 + ((HEAP32[26831] | 0) * 36 | 0) | 0;
 i3 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 _fclose(HEAP32[108652 + (HEAP32[26831] << 2) >> 2] | 0) | 0;
 HEAP32[108652 + (HEAP32[26831] << 2) >> 2] = 0;
 if ((HEAP32[26831] | 0) <= 0) return;
 HEAP32[26831] = (HEAP32[26831] | 0) + -1;
 return;
}

function _re2post() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 do if (!(_nfa_reg(0) | 0)) HEAP32[i2 >> 2] = 0; else {
  if ((HEAP32[26382] | 0) >>> 0 >= (HEAP32[26383] | 0) >>> 0) if (!(_realloc_post_list() | 0)) {
   HEAP32[i2 >> 2] = 0;
   break;
  }
  i3 = HEAP32[26382] | 0;
  HEAP32[26382] = i3 + 4;
  HEAP32[i3 >> 2] = -966;
  HEAP32[i2 >> 2] = HEAP32[26384];
 } while (0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _font_name2handle(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(_strcmp(HEAP32[i4 >> 2] | 0, 94449) | 0)) {
  HEAP32[i3 >> 2] = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = _gui_mch_get_font(HEAP32[i4 >> 2] | 0, 1) | 0;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _set_number_default(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = _findoption(HEAP32[i4 >> 2] | 0) | 0;
 if ((HEAP32[i6 >> 2] | 0) < 0) {
  STACKTOP = i3;
  return;
 }
 HEAP32[15328 + ((HEAP32[i6 >> 2] | 0) * 28 | 0) + 20 >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _read_readbuffers(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _read_readbuf(101928, HEAP32[i3 >> 2] | 0) | 0;
 if (HEAP32[i4 >> 2] | 0) {
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = _read_readbuf(101948, HEAP32[i3 >> 2] | 0) | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _gui_mch_draw_part_cursor(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _gui_mch_set_fg_color(HEAP32[i7 >> 2] | 0);
 _vimwasm_draw_part_cursor(HEAP32[26636] | 0, HEAP32[26635] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0);
 STACKTOP = i4;
 return;
}

function _buf_name_changed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) _ml_setname(HEAP32[i3 >> 2] | 0);
 if ((HEAP32[(HEAP32[26881] | 0) + 4 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) _check_arg_idx(HEAP32[26881] | 0);
 _status_redraw_all();
 _fmarks_check_names(HEAP32[i3 >> 2] | 0);
 _ml_timestamp(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _skiptohex(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) i5 = (_vim_isxdigit(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0) != 0 ^ 1; else i5 = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  if (!i5) break;
  HEAP32[i4 >> 2] = i6 + 1;
 }
 STACKTOP = i2;
 return i6 | 0;
}

function _skiptodigit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) i5 = ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) - 48 | 0) >>> 0 < 10 ^ 1; else i5 = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  if (!i5) break;
  HEAP32[i4 >> 2] = i6 + 1;
 }
 STACKTOP = i2;
 return i6 | 0;
}

function _skiptobin(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  if (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) i5 = (_vim_isbdigit(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0) != 0 ^ 1; else i5 = 0;
  i6 = HEAP32[i4 >> 2] | 0;
  if (!i5) break;
  HEAP32[i4 >> 2] = i6 + 1;
 }
 STACKTOP = i2;
 return i6 | 0;
}

function _getvcol_nolist(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2 + 4 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[26881] | 0) + 200 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = 0;
 _getvcol(HEAP32[26881] | 0, HEAP32[i3 >> 2] | 0, 0, i5, 0);
 HEAP32[(HEAP32[26881] | 0) + 200 >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i2;
 return HEAP32[i5 >> 2] | 0;
}

function _deleted_lines_mark(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 _mark_adjust(i2 | 0, i2 + i1 - 1 | 0, 2147483647, 0 - i1 | 0);
 i1 = HEAP32[i4 >> 2] | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 _changed_lines(i1 | 0, 0, i1 + i4 | 0, 0 - i4 | 0);
 STACKTOP = i3;
 return;
}

function _msg_add_fname(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) == 0 ? 52028 : i2;
 _home_replace(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, (HEAP32[26882] | 0) + 1 | 0, 1021, 1);
 HEAP8[HEAP32[26882] >> 0] = 34;
 _strcat(HEAP32[26882] | 0, 52036) | 0;
 STACKTOP = i3;
 return;
}

function _alist_unlink(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == 107472) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[i3 >> 2] | 0) + 20 | 0;
 i4 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
 HEAP32[i1 >> 2] = i4;
 if ((i4 | 0) > 0) {
  STACKTOP = i2;
  return;
 }
 _alist_clear(HEAP32[i3 >> 2] | 0);
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _validate_virtcol_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _check_cursor_moved(HEAP32[i3 >> 2] | 0);
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 108 >> 2] & 4 | 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 _getvcol(i1 | 0, i1 + 24 | 0, 0, i1 + 132 | 0, 0);
 i1 = (HEAP32[i3 >> 2] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 4;
 STACKTOP = i2;
 return;
}

function _set_empty_rows(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i2 + 148 >> 2] = 0;
  STACKTOP = i3;
  return;
 } else {
  HEAP32[(HEAP32[i4 >> 2] | 0) + 148 >> 2] = (HEAP32[i2 + 88 >> 2] | 0) - (HEAP32[i5 >> 2] | 0);
  STACKTOP = i3;
  return;
 }
}

function _get_cursor_rel_lnum(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 12 | 0;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2];
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return HEAP32[i7 >> 2] | 0;
}

function _fmt_x(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 if ((i1 | 0) == 0 & (i2 | 0) == 0) i5 = i3; else {
  i6 = i3;
  i3 = i2;
  i2 = i1;
  while (1) {
   i1 = i6 + -1 | 0;
   HEAP8[i1 >> 0] = HEAPU8[98563 + (i2 & 15) >> 0] | 0 | i4;
   i2 = _bitshift64Lshr(i2 | 0, i3 | 0, 4) | 0;
   i3 = tempRet0;
   if ((i2 | 0) == 0 & (i3 | 0) == 0) {
    i5 = i1;
    break;
   } else i6 = i1;
  }
 }
 return i5 | 0;
}

function _ff_pop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
 if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) {
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2];
 i5 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _redo_literal(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 i5 = i2 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 if (((HEAP32[i4 >> 2] | 0) - 48 | 0) >>> 0 < 10) {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  _vim_snprintf(i5, 10, 42691, i3) | 0;
  _AppendToRedobuff(i5);
  STACKTOP = i2;
  return;
 } else {
  _AppendCharToRedobuff(HEAP32[i4 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
}

function _skipchr() {
 if ((HEAPU8[HEAP32[26392] >> 0] | 0 | 0) == 92) HEAP32[26393] = 1; else HEAP32[26393] = 0;
 if (HEAPU8[(HEAP32[26392] | 0) + (HEAP32[26393] | 0) >> 0] | 0 | 0) HEAP32[26393] = (HEAP32[26393] | 0) + 1;
 HEAP32[26392] = (HEAP32[26392] | 0) + (HEAP32[26393] | 0);
 HEAP32[26395] = HEAP32[26394];
 HEAP32[26394] = 0;
 HEAP32[26397] = HEAP32[26396];
 HEAP32[26396] = HEAP32[26398];
 HEAP32[26398] = HEAP32[26399];
 HEAP32[26399] = -1;
 return;
}

function _mch_getperm(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 80 | 0;
 i4 = i2 + 76 | 0;
 i5 = i2;
 HEAP32[i4 >> 2] = i1;
 if (_stat(HEAP32[i4 >> 2] | 0, i5) | 0) {
  HEAP32[i3 >> 2] = -1;
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 } else {
  HEAP32[i3 >> 2] = HEAP32[i5 + 12 >> 2];
  i6 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i6 | 0;
 }
 return 0;
}

function _mch_get_host_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = (_uname(i6) | 0) < 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i2) {
  HEAP8[i1 >> 0] = 0;
  STACKTOP = i3;
  return;
 } else {
  _vim_strncpy(i1, i6 + 65 | 0, (HEAP32[i5 >> 2] | 0) - 1 | 0);
  STACKTOP = i3;
  return;
 }
}

function _gui_get_base_width() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[26669] << 1;
 if (HEAP32[26661] | 0) HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[26647] | 0);
 if (!(HEAP32[26662] | 0)) {
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[26647] | 0);
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _set_keep_msg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _vim_free(HEAP32[26706] | 0);
 if ((HEAP32[i4 >> 2] | 0) != 0 & (HEAP32[26809] | 0) == 0) HEAP32[26706] = _vim_strsave(HEAP32[i4 >> 2] | 0) | 0; else HEAP32[26706] = 0;
 HEAP32[26708] = 0;
 HEAP32[26707] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function ___stdout_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 HEAP32[i1 + 36 >> 2] = 1;
 if (!(HEAP32[i1 >> 2] & 64)) {
  HEAP32[i5 >> 2] = HEAP32[i1 + 60 >> 2];
  HEAP32[i5 + 4 >> 2] = 21523;
  HEAP32[i5 + 8 >> 2] = i4 + 16;
  if (___syscall54(54, i5 | 0) | 0) HEAP8[i1 + 75 >> 0] = -1;
 }
 i5 = ___stdio_write(i1, i2, i3) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _skiptowhite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) != 32) if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) != 9) i4 = (HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) != 0; else i4 = 0; else i4 = 0;
  i5 = HEAP32[i3 >> 2] | 0;
  if (!i4) break;
  HEAP32[i3 >> 2] = i5 + 1;
 }
 STACKTOP = i2;
 return i5 | 0;
}

function _matching_line_len(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 i1 = (_strlen(HEAP32[i4 >> 2] | 0) | 0) + 1 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 i1 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
 i3 = i1 + (_strlen(HEAP32[i4 >> 2] | 0) | 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _alist_clear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  i4 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  i5 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) < 0) break;
  _vim_free(HEAP32[(HEAP32[i5 + 16 >> 2] | 0) + (HEAP32[HEAP32[i3 >> 2] >> 2] << 3) >> 2] | 0);
 }
 _ga_clear(i5);
 STACKTOP = i2;
 return;
}

function _skipwhite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 32) i5 = 1; else i5 = (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 9;
  i6 = HEAP32[i4 >> 2] | 0;
  if (!i5) break;
  HEAP32[i4 >> 2] = i6 + 1;
 }
 STACKTOP = i2;
 return i6 | 0;
}

function _replace_pop() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (!(HEAP32[25205] | 0)) {
  HEAP32[i2 >> 2] = -1;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 } else {
  i4 = HEAP32[25207] | 0;
  i5 = (HEAP32[25205] | 0) + -1 | 0;
  HEAP32[25205] = i5;
  HEAP32[i2 >> 2] = HEAPU8[i4 + i5 >> 0];
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}

function _redraw_statuslines() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i2 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[i2 >> 2] | 0) + 176 >> 2] | 0) _win_redr_status(HEAP32[i2 >> 2] | 0, 0);
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2];
 }
 if (!(HEAP32[26770] | 0)) {
  STACKTOP = i1;
  return;
 }
 _draw_tabline();
 STACKTOP = i1;
 return;
}

function _smsg_attr_keep(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _vim_vsnprintf(HEAP32[26882] | 0, 1025, HEAP32[i6 >> 2] | 0, i7) | 0;
 i7 = _msg_attr_keep(HEAP32[26882] | 0, HEAP32[i5 >> 2] | 0, 1) | 0;
 STACKTOP = i4;
 return i7 | 0;
}

function _nr2hex(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] & 15;
 if ((HEAP32[i4 >> 2] & 15) >>> 0 <= 9) {
  HEAP32[i3 >> 2] = i1 + 48;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 } else {
  HEAP32[i3 >> 2] = i1 - 10 + 97;
  i5 = HEAP32[i3 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 return 0;
}

function _ui_delay(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[26627] | 0) == 0 | (HEAP32[i5 >> 2] | 0) != 0) {
  _mch_delay(i2, HEAP32[i5 >> 2] | 0);
  STACKTOP = i3;
  return;
 } else {
  _gui_wait_for_chars(i2, HEAP32[26825] | 0) | 0;
  STACKTOP = i3;
  return;
 }
}

function _scrolljump_value() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[26970] | 0) >= 0) {
  HEAP32[i2 >> 2] = HEAP32[26970];
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 } else {
  HEAP32[i2 >> 2] = (Math_imul(HEAP32[(HEAP32[26881] | 0) + 88 >> 2] | 0, 0 - (HEAP32[26970] | 0) | 0) | 0) / 100 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}

function _nv_undo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26788] | 0 ? 1 : (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) == 12) {
  HEAP32[i1 + 8 >> 2] = 103;
  HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 117;
  _nv_operator(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 } else {
  _nv_kundo(i1);
  STACKTOP = i2;
  return;
 }
}

function ___fmodeflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = (_strchr(i1, 43) | 0) == 0;
 i3 = HEAP8[i1 >> 0] | 0;
 i4 = i3 << 24 >> 24 | 0;
 i3 = i2 ? (i4 | 0) != 114 & 1 : 2;
 i2 = (_strchr(i1, 120) | 0) == 0;
 i5 = i2 ? i3 : i3 | 128;
 i3 = (_strchr(i1, 101) | 0) == 0;
 i1 = i3 ? i5 : i5 | 524288;
 i5 = (i4 | 0) == 114 ? i1 : i1 | 64;
 i1 = (i4 | 0) == 119 ? i5 | 512 : i5;
 return ((i4 | 0) == 97 ? i1 | 1024 : i1) | 0;
}

function _nv_subst(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP32[26788] | 0)) {
  _nv_optrans(i1);
  STACKTOP = i2;
  return;
 }
 if ((HEAP32[i1 + 8 >> 2] | 0) == 83) {
  HEAP32[26071] = HEAP32[10179];
  HEAP32[10179] = 86;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] = 99;
 _nv_operator(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ins_ctrl_hat() {
 var i1 = 0;
 do if (_map_to_exists_mode(114072, 32, 0) | 0) {
  i1 = (HEAP32[26773] | 0) + 552 | 0;
  if (HEAP32[10180] & 32 | 0) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[10180] = HEAP32[10180] & -33;
   break;
  } else {
   HEAP32[i1 >> 2] = 1;
   HEAP32[10180] = HEAP32[10180] | 32;
   break;
  }
 } while (0);
 _set_iminsert_global();
 _showmode() | 0;
 if (!(HEAP32[26627] | 0)) return;
 _gui_update_cursor(1, 0);
 return;
}

function _ga_init2(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _ga_init(HEAP32[i5 >> 2] | 0);
 HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = HEAP32[i7 >> 2];
 STACKTOP = i4;
 return;
}

function _nv_ctrlo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[26788] | 0) != 0 & (HEAP32[26789] | 0) != 0) {
  HEAP32[26789] = 0;
  _showmode() | 0;
  HEAP32[26076] = 2;
  STACKTOP = i2;
  return;
 } else {
  i1 = (HEAP32[i3 >> 2] | 0) + 28 | 0;
  HEAP32[i1 >> 2] = 0 - (HEAP32[i1 >> 2] | 0);
  _nv_pcmark(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
}

function _msg_advance(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26809] | 0) {
  HEAP32[27043] = i1;
  STACKTOP = i2;
  return;
 }
 if ((i1 | 0) >= (HEAP32[10174] | 0)) HEAP32[i3 >> 2] = (HEAP32[10174] | 0) - 1;
 while (1) {
  if ((HEAP32[27043] | 0) >= (HEAP32[i3 >> 2] | 0)) break;
  _msg_putchar(32);
 }
 STACKTOP = i2;
 return;
}

function _find_ident_under_cursor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[26881] | 0;
 i1 = (HEAP32[26881] | 0) + 24 | 0;
 i6 = _find_ident_at_pos(i2 | 0, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i6 | 0;
}

function _check_row(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAP32[i4 >> 2] | 0) < 0) HEAP32[i3 >> 2] = 0; else if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26696] | 0)) {
  HEAP32[i3 >> 2] = (HEAP32[26696] | 0) - 1;
  break;
 } else {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _check_col(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if ((HEAP32[i4 >> 2] | 0) < 0) HEAP32[i3 >> 2] = 0; else if ((HEAP32[i4 >> 2] | 0) >= (HEAP32[26697] | 0)) {
  HEAP32[i3 >> 2] = (HEAP32[26697] | 0) - 1;
  break;
 } else {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _new_frame(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _alloc_clear(40) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = HEAP32[i4 >> 2];
 if (!(HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP8[HEAP32[i4 >> 2] >> 0] = 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return;
}

function ___ftello_unlocked(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!(HEAP32[i1 >> 2] & 128)) i2 = 1; else i2 = (HEAP32[i1 + 20 >> 2] | 0) >>> 0 > (HEAP32[i1 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i3 = FUNCTION_TABLE_iiii[HEAP32[i1 + 40 >> 2] & 15](i1, 0, i2) | 0;
 if ((i3 | 0) < 0) i4 = i3; else i4 = i3 - (HEAP32[i1 + 8 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i1 + 20 >> 2] | 0) - (HEAP32[i1 + 28 >> 2] | 0) | 0;
 return i4 | 0;
}

function _nv_ctrlg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26788] | 0) {
  HEAP32[26789] = ((HEAP32[26789] | 0) != 0 ^ 1) & 1;
  _showmode() | 0;
  STACKTOP = i2;
  return;
 }
 if (_checkclearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _fileinfo(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0, 0, 1);
 STACKTOP = i2;
 return;
}

function _alloc_clear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _lalloc(HEAP32[i3 >> 2] | 0, 1) | 0;
 if (!(HEAP32[i4 >> 2] | 0)) {
  i5 = HEAP32[i4 >> 2] | 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 _memset(HEAP32[i4 >> 2] | 0, 0, HEAP32[i3 >> 2] | 0) | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _win_init_size() {
 var i1 = 0, i2 = 0;
 i1 = (HEAP32[10173] | 0) - (HEAP32[26875] | 0) | 0;
 i2 = i1 - (_tabline_height() | 0) | 0;
 HEAP32[(HEAP32[26887] | 0) + 88 >> 2] = i2;
 i2 = (HEAP32[10173] | 0) - (HEAP32[26875] | 0) | 0;
 i1 = i2 - (_tabline_height() | 0) | 0;
 HEAP32[(HEAP32[27114] | 0) + 12 >> 2] = i1;
 HEAP32[(HEAP32[26887] | 0) + 100 >> 2] = HEAP32[10174];
 HEAP32[(HEAP32[27114] | 0) + 4 >> 2] = HEAP32[10174];
 return;
}

function _out_str_nf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[26596] | 0) > 2027) _out_flush();
 while (1) {
  if (!(HEAP8[HEAP32[i3 >> 2] >> 0] | 0)) break;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i1 + 1;
  _out_char_nf(HEAPU8[i1 >> 0] | 0);
 }
 if (!(HEAP32[27042] | 0)) {
  STACKTOP = i2;
  return;
 }
 _out_flush();
 STACKTOP = i2;
 return;
}

function _patch(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  HEAP32[i6 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
  HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[i5 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 }
 STACKTOP = i3;
 return;
}

function _vim_strncpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _strncpy(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 HEAP8[(HEAP32[i5 >> 2] | 0) + (HEAP32[i7 >> 2] | 0) >> 0] = 0;
 STACKTOP = i4;
 return;
}

function _setpcmark() {
 var i1 = 0, i2 = 0, i3 = 0;
 if ((HEAP32[26841] | 0) != 0 | (HEAP32[26842] | 0) != 0 | (HEAP32[27132] | 0) != 0) return;
 i1 = HEAP32[26881] | 0;
 i2 = i1 + 308 | 0;
 i3 = i1 + 300 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 i3 = HEAP32[26881] | 0;
 i2 = i3 + 300 | 0;
 i1 = i3 + 24 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 return;
}

function _ex_set(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 391) HEAP32[i4 >> 2] = 4; else if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 390) HEAP32[i4 >> 2] = 2;
 _do_set(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _setcursor_mayforce(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) if (!(_redrawing() | 0)) {
  STACKTOP = i2;
  return;
 }
 _validate_cursor();
 i3 = HEAP32[26881] | 0;
 _windgoto((HEAP32[i3 + 84 >> 2] | 0) + (HEAP32[i3 + 136 >> 2] | 0) | 0, (HEAP32[i3 + 96 >> 2] | 0) + (HEAP32[i3 + 140 >> 2] | 0) | 0);
 STACKTOP = i2;
 return;
}

function _clip_own_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (_clip_gen_own_selection(HEAP32[i3 >> 2] | 0) | 0) == 1 & 1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _vim_isblankline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _skipwhite(HEAP32[i3 >> 2] | 0) | 0;
 if (!(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0)) i5 = 1; else if ((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 13) i5 = 1; else i5 = (HEAPU8[HEAP32[i4 >> 2] >> 0] | 0 | 0) == 10;
 STACKTOP = i2;
 return i5 & 1 | 0;
}

function _set_fraction(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0) <= 1) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0;
 HEAP32[i1 + 804 >> 2] = ((HEAP32[i1 + 136 >> 2] << 14) + ((i4 | 0) / 2 | 0) | 0) / (i4 | 0) | 0;
 STACKTOP = i2;
 return;
}

function _smsg_attr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4 + 20 | 0;
 i6 = i4 + 16 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _vim_vsnprintf(HEAP32[26882] | 0, 1025, HEAP32[i6 >> 2] | 0, i7) | 0;
 i7 = _msg_attr(HEAP32[26882] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i4;
 return i7 | 0;
}

function _out_flush_cursor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _gui_disable_flush();
 _out_flush();
 _gui_enable_flush();
 if (!(HEAP32[26627] | 0)) {
  STACKTOP = i3;
  return;
 }
 _gui_update_cursor(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 _gui_may_flush();
 STACKTOP = i3;
 return;
}

function _tabpage_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[26887] | 0) != (HEAP32[27112] | 0)) _close_others(1, HEAP32[i3 >> 2] | 0);
 if ((HEAP32[26887] | 0) != (HEAP32[27112] | 0)) {
  HEAP32[26757] = 1;
  STACKTOP = i2;
  return;
 }
 _ex_win_close(HEAP32[i3 >> 2] | 0, HEAP32[26881] | 0, 0);
 HEAP32[26757] = 1;
 STACKTOP = i2;
 return;
}

function _path_is_url(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 do if (!(_strncmp(HEAP32[i4 >> 2] | 0, 84242, 3) | 0)) HEAP32[i3 >> 2] = 1; else if (!(_strncmp(HEAP32[i4 >> 2] | 0, 84246, 3) | 0)) {
  HEAP32[i3 >> 2] = 2;
  break;
 } else {
  HEAP32[i3 >> 2] = 0;
  break;
 } while (0);
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _ex_argument(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) > 0) HEAP32[i4 >> 2] = (HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0) - 1; else HEAP32[i4 >> 2] = HEAP32[(HEAP32[26881] | 0) + 188 >> 2];
 _do_argfile(HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _vim_findfile_free_visited(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 _vim_findfile_free_visited_list((HEAP32[i4 >> 2] | 0) + 12 | 0);
 _vim_findfile_free_visited_list((HEAP32[i4 >> 2] | 0) + 16 | 0);
 STACKTOP = i2;
 return;
}

function _opendir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = _open(i1, 589824, i2) | 0;
 do if ((i4 | 0) < 0) i5 = 0; else {
  i1 = _calloc(1, 2072) | 0;
  if (!i1) {
   HEAP32[i3 >> 2] = i4;
   ___syscall6(6, i3 | 0) | 0;
   i5 = 0;
   break;
  } else {
   HEAP32[i1 >> 2] = i4;
   i5 = i1;
   break;
  }
 } while (0);
 STACKTOP = i2;
 return i5 | 0;
}

function _buf_hashtab_add(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 i1 = (HEAP32[i4 >> 2] | 0) + 96 | 0;
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 92 >> 2];
 _sprintf(i1, 41824, i3) | 0;
 if (_hash_add(100636, (HEAP32[i4 >> 2] | 0) + 96 | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _emsg(41827) | 0;
 STACKTOP = i2;
 return;
}

function _out_char(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == 10) _out_char(13);
 i1 = HEAP32[i3 >> 2] & 255;
 i3 = HEAP32[26596] | 0;
 HEAP32[26596] = i3 + 1;
 HEAP8[111117 + i3 >> 0] = i1;
 if (!((HEAP32[26596] | 0) >= 2047 | (HEAP32[27042] | 0) != 0)) {
  STACKTOP = i2;
  return;
 }
 _out_flush();
 STACKTOP = i2;
 return;
}

function _lseek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i4;
 i6 = i4 + 20 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = i2;
 HEAP32[i5 + 12 >> 2] = i6;
 HEAP32[i5 + 16 >> 2] = i3;
 i3 = (___syscall_ret(___syscall140(140, i5 | 0) | 0) | 0) == 0;
 STACKTOP = i4;
 return (i3 ? HEAP32[i6 >> 2] | 0 : -1) | 0;
}

function runPostSets() {}
function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i1 & 65535;
 i4 = i2 & 65535;
 i5 = Math_imul(i4, i3) | 0;
 i6 = i1 >>> 16;
 i1 = (i5 >>> 16) + (Math_imul(i4, i6) | 0) | 0;
 i4 = i2 >>> 16;
 i2 = Math_imul(i4, i3) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i4, i6) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i5 & 65535 | 0) | 0;
}

function _set_last_cursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = (HEAP32[i1 + 4 >> 2] | 0) + 420 | 0;
 i4 = i1 + 24 | 0;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 STACKTOP = i2;
 return;
}

function _set_color_count(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 i5 = i2 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[26734] = HEAP32[i4 >> 2];
 if ((HEAP32[26734] | 0) > 1) {
  HEAP32[i3 >> 2] = HEAP32[26734];
  _sprintf(i5, 78969, i3) | 0;
 } else HEAP8[i5 >> 0] = 0;
 _set_string_option_direct(78972, -1, i5, 1, 0);
 STACKTOP = i2;
 return;
}

function _sbrk(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 i3 = i2 + i1 | 0;
 if ((i1 | 0) > 0 & (i3 | 0) < (i2 | 0) | (i3 | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = i3;
 if ((i3 | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = i2;
  ___setErrNo(12);
  return -1;
 }
 return i2 | 0;
}

function _recording_mode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 i5 = i2 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 _msg_puts_attr(74519, HEAP32[i4 >> 2] | 0);
 if (_shortmess(113) | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i3 >> 2] = HEAP32[26800];
 _sprintf(i5, 74529, i3) | 0;
 _msg_puts_attr(i5, HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _add_pathsep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAPU8[HEAP32[i3 >> 2] >> 0] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 if (_vim_ispathsep(HEAPU8[i1 + (_strlen(HEAP32[i3 >> 2] | 0) | 0) + -1 >> 0] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _strcat(HEAP32[i3 >> 2] | 0, 72032) | 0;
 STACKTOP = i2;
 return;
}

function _redrawcmd() {
 if (HEAP32[26811] | 0) return;
 if (!(HEAP32[25236] | 0)) {
  _windgoto(HEAP32[26876] | 0, 0);
  _msg_clr_eos();
  return;
 }
 _msg_start();
 _redrawcmdprompt();
 HEAP32[26730] = 1;
 _draw_cmdline(0, HEAP32[25238] | 0);
 _msg_clr_eos();
 HEAP32[26730] = 0;
 _set_cmdspos_cursor();
 if (HEAP32[25248] | 0) _putcmdline(HEAP32[25248] | 0, HEAP32[25262] | 0);
 HEAP32[26710] = 0;
 HEAP32[26829] = 0;
 return;
}

function _nv_select(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26788] | 0) {
  HEAP32[26789] = 1;
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[27119] | 0)) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 118;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] = 1;
 _nv_g_cmd(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _frag(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 12 | 0;
 i6 = i4 + 8 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i7 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 STACKTOP = i4;
 return;
}

function _path_with_url(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  i3 = (_isalpha(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0) != 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if (!i3) break;
  HEAP32[i4 >> 2] = i5 + 1;
 }
 i4 = _path_is_url(i5) | 0;
 STACKTOP = i2;
 return i4 | 0;
}

function _start_arrow_common(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!((HEAP32[27126] | 0) == 0 & (HEAP32[i5 >> 2] | 0) != 0)) {
  STACKTOP = i3;
  return;
 }
 _AppendToRedobuff(42703);
 _stop_insert(HEAP32[i4 >> 2] | 0, 0, 0);
 HEAP32[27126] = 1;
 STACKTOP = i3;
 return;
}

function _check_file_readonly(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] & 146)) {
  i6 = 1;
  i7 = i6 & 1;
  STACKTOP = i3;
  return i7 | 0;
 }
 i6 = (_access(HEAP32[i4 >> 2] | 0, 2) | 0) != 0;
 i7 = i6 & 1;
 STACKTOP = i3;
 return i7 | 0;
}

function _start_arrow_with_change(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _start_arrow_common(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 if (HEAP32[i5 >> 2] | 0) {
  STACKTOP = i3;
  return;
 }
 _AppendCharToRedobuff(7);
 _AppendCharToRedobuff(85);
 STACKTOP = i3;
 return;
}

function _shl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = i1 + 4 | 0;
 if (i2 >>> 0 > 31) {
  i4 = HEAP32[i1 >> 2] | 0;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i1 >> 2] = 0;
  i5 = i2 + -32 | 0;
  i6 = 0;
  i7 = i4;
 } else {
  i5 = i2;
  i6 = HEAP32[i1 >> 2] | 0;
  i7 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i6 >>> (32 - i5 | 0) | i7 << i5;
 HEAP32[i1 >> 2] = i6 << i5;
 return;
}

function _win_free_lsize(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 156 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 156 >> 2] | 0);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 156 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _reset_option_was_set(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _findoption(HEAP32[i3 >> 2] | 0) | 0;
 if ((HEAP32[i4 >> 2] | 0) < 0) {
  STACKTOP = i2;
  return;
 }
 i3 = 15328 + ((HEAP32[i4 >> 2] | 0) * 28 | 0) + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -257;
 STACKTOP = i2;
 return;
}

function _get_equalprg() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (!(HEAPU8[HEAP32[(HEAP32[26773] | 0) + 732 >> 2] >> 0] | 0)) {
  HEAP32[i2 >> 2] = HEAP32[26912];
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 } else {
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[26773] | 0) + 732 >> 2];
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}

function _ex_highlight(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0)) if ((HEAPU8[(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) + 2 >> 0] | 0 | 0) == 33) _msg(50747) | 0;
 _do_highlight(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _ins_insert(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _apply_autocmds(57, 0, 0, 0, HEAP32[26773] | 0) | 0;
 if (HEAP32[10180] & 64 | 0) HEAP32[10180] = 16 | HEAP32[10180] & 32; else HEAP32[10180] = HEAP32[i3 >> 2] | HEAP32[10180] & 32;
 _AppendCharToRedobuff(-18795);
 _showmode() | 0;
 _ui_cursor_shape();
 STACKTOP = i2;
 return;
}

function _get_undolevel() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[(HEAP32[26773] | 0) + 756 >> 2] | 0) == -123456) {
  HEAP32[i2 >> 2] = HEAP32[27020];
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 } else {
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[26773] | 0) + 756 >> 2];
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 return 0;
}

function _gui_get_lightness(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _gui_mch_get_rgb(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 return ((((i2 | 0) >>> 16 & 255) * 299 | 0) + (((i2 | 0) >>> 8 & 255) * 587 | 0) + ((HEAP32[i4 >> 2] & 255) * 114 | 0) | 0) / 1e3 | 0 | 0;
}

function _ex_colorscheme(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0)) {
  _msg(50950) | 0;
  STACKTOP = i2;
  return;
 }
 if (_load_colors(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _emsg2(50958, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _vim_isxdigit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) >= 48 & (HEAP32[i3 >> 2] | 0) <= 57) i4 = 1; else if ((HEAP32[i3 >> 2] | 0) >= 97 & (HEAP32[i3 >> 2] | 0) <= 102) i4 = 1; else {
  i1 = HEAP32[i3 >> 2] | 0;
  i4 = (i1 | 0) >= 65 ? (i1 | 0) <= 70 : 0;
 }
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _shr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = i1 + 4 | 0;
 if (i2 >>> 0 > 31) {
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i4;
  HEAP32[i3 >> 2] = 0;
  i5 = i2 + -32 | 0;
  i6 = 0;
  i7 = i4;
 } else {
  i5 = i2;
  i6 = HEAP32[i3 >> 2] | 0;
  i7 = HEAP32[i1 >> 2] | 0;
 }
 HEAP32[i1 >> 2] = i6 << 32 - i5 | i7 >>> i5;
 HEAP32[i3 >> 2] = i6 >>> i5;
 return;
}

function _term_fg_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP8[HEAP32[26568] >> 0] | 0) {
  _term_color(HEAP32[26568] | 0, HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (!(HEAP8[HEAP32[26563] >> 0] | 0)) {
  STACKTOP = i2;
  return;
 }
 _term_color(HEAP32[26563] | 0, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _term_bg_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP8[HEAP32[26569] >> 0] | 0) {
  _term_color(HEAP32[26569] | 0, HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 if (!(HEAP8[HEAP32[26564] >> 0] | 0)) {
  STACKTOP = i2;
  return;
 }
 _term_color(HEAP32[26564] | 0, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _skip_to_option_part(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) == 44) HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
 while (1) {
  i4 = HEAP32[i3 >> 2] | 0;
  if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) != 32) break;
  HEAP32[i3 >> 2] = i4 + 1;
 }
 STACKTOP = i2;
 return i4 | 0;
}

function _getint(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!(_isdigit(HEAP8[HEAP32[i1 >> 2] >> 0] | 0) | 0)) i2 = 0; else {
  i3 = 0;
  while (1) {
   i4 = HEAP32[i1 >> 2] | 0;
   i5 = (i3 * 10 | 0) + -48 + (HEAP8[i4 >> 0] | 0) | 0;
   i6 = i4 + 1 | 0;
   HEAP32[i1 >> 2] = i6;
   if (!(_isdigit(HEAP8[i6 >> 0] | 0) | 0)) {
    i2 = i5;
    break;
   } else i3 = i5;
  }
 }
 return i2 | 0;
}

function _getexline(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 if (HEAP32[26703] | 0) if ((_vpeekc() | 0) == 58) _vgetc() | 0;
 i3 = _getcmdline(HEAP32[i5 >> 2] | 0, 1, HEAP32[i6 >> 2] | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _fmt_o(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if ((i1 | 0) == 0 & (i2 | 0) == 0) i4 = i3; else {
  i5 = i3;
  i3 = i2;
  i2 = i1;
  while (1) {
   i1 = i5 + -1 | 0;
   HEAP8[i1 >> 0] = i2 & 7 | 48;
   i2 = _bitshift64Lshr(i2 | 0, i3 | 0, 3) | 0;
   i3 = tempRet0;
   if ((i2 | 0) == 0 & (i3 | 0) == 0) {
    i4 = i1;
    break;
   } else i5 = i1;
  }
 }
 return i4 | 0;
}

function _free_tabpage(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 while (1) {
  i5 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[i4 >> 2] | 0) >= 2) break;
  _clear_snapshot(i5, HEAP32[i4 >> 2] | 0);
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 }
 _vim_free(i5);
 STACKTOP = i2;
 return;
}

function _init_changedtick(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = (HEAP32[i3 >> 2] | 0) + 112;
 HEAP8[(HEAP32[i4 >> 2] | 0) + 12 >> 0] = 5;
 HEAP32[HEAP32[i4 >> 2] >> 2] = 1;
 HEAP8[(HEAP32[i4 >> 2] | 0) + 4 >> 0] = 2;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _hash_remove(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] = 113987;
 _hash_may_resize(HEAP32[i4 >> 2] | 0, 0) | 0;
 STACKTOP = i3;
 return;
}

function _exec_normal_cmd(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _ins_typebuf(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, 1, HEAP32[i7 >> 2] | 0) | 0;
 _exec_normal(0, 0);
 STACKTOP = i4;
 return;
}

function _clip_may_clear_selection(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if ((HEAPU16[54222] | 0 | 0) == 2) if ((HEAP32[i5 >> 2] | 0) >= (HEAP32[27101] | 0)) if ((HEAP32[i4 >> 2] | 0) <= (HEAP32[27103] | 0)) _clip_clear_selection(108396);
 STACKTOP = i3;
 return;
}

function _mf_new_page_size(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[27225] = (HEAP32[27225] | 0) + ((HEAP32[i5 >> 2] | 0) - (HEAP32[(HEAP32[i4 >> 2] | 0) + 592 >> 2] | 0));
 HEAP32[(HEAP32[i4 >> 2] | 0) + 592 >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _status_redraw_all() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i2 >> 2] | 0)) break;
  if (HEAP32[(HEAP32[i2 >> 2] | 0) + 92 >> 2] | 0) {
   HEAP32[(HEAP32[i2 >> 2] | 0) + 176 >> 2] = 1;
   _redraw_later(10);
  }
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2];
 }
 STACKTOP = i1;
 return;
}

function _source_in_path(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = _do_in_path_and_pp(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 2, 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _ex_may_print(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 48 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[i3 >> 2] | 0) + 48 | 0;
 _print_line(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, HEAP32[i1 >> 2] & 2, HEAP32[i1 >> 2] & 1);
 HEAP32[26799] = 1;
 STACKTOP = i2;
 return;
}

function _check_opt_strings(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = _opt_strings_flags(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _shortmess(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26985] | 0) if (_vim_strchr(HEAP32[26985] | 0, HEAP32[i3 >> 2] | 0) | 0) i4 = 1; else if (_vim_strchr(HEAP32[26985] | 0, 97) | 0) i4 = (_vim_strchr(71696, HEAP32[i3 >> 2] | 0) | 0) != 0; else i4 = 0; else i4 = 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _redraw_all_later(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26887];
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) break;
  _redraw_win_later(HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0);
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 }
 STACKTOP = i2;
 return;
}

function _out_char_nf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == 10) _out_char_nf(13);
 i1 = HEAP32[i3 >> 2] & 255;
 i3 = HEAP32[26596] | 0;
 HEAP32[26596] = i3 + 1;
 HEAP8[111117 + i3 >> 0] = i1;
 if ((HEAP32[26596] | 0) < 2047) {
  STACKTOP = i2;
  return;
 }
 _out_flush();
 STACKTOP = i2;
 return;
}

function _last_status(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[27114] | 0;
 if ((HEAP32[26942] | 0) == 2) i4 = 1; else if ((HEAP32[26942] | 0) == 1) if (HEAP32[i3 >> 2] | 0) i4 = 1; else i4 = (HEAP32[26887] | 0) == (HEAP32[27112] | 0) ^ 1; else i4 = 0;
 _last_status_rec(i1, i4 & 1);
 STACKTOP = i2;
 return;
}

function _gui_undraw_cursor() {
 var i1 = 0, i2 = 0, i3 = 0;
 if (!(HEAP8[106556] | 0)) return;
 i1 = HEAP32[26638] | 0;
 i2 = HEAP32[26637] | 0;
 i3 = (_gui_redraw_block(i1 | 0, i2 | 0, i1 | 0, i2 | 0, 16) | 0) != 0;
 if (i3 & (HEAP32[26637] | 0) > 0) {
  i3 = HEAP32[26638] | 0;
  i2 = (HEAP32[26637] | 0) - 1 | 0;
  _gui_redraw_block(i3 | 0, i2 | 0, i3 | 0, i2 | 0, 16) | 0;
 }
 HEAP8[106556] = 0;
 return;
}

function _gui_mch_insert_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _gui_mch_set_bg_color(HEAP32[26674] | 0);
 _vimwasm_insert_lines(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[26644] | 0, HEAP32[26643] | 0, HEAP32[26645] | 0);
 STACKTOP = i3;
 return;
}

function _gui_mch_delete_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _gui_mch_set_bg_color(HEAP32[26674] | 0);
 _vimwasm_delete_lines(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[26644] | 0, HEAP32[26643] | 0, HEAP32[26645] | 0);
 STACKTOP = i3;
 return;
}

function _emsg_not_now() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[26714] | 0) > 0) if (!(_vim_strchr(HEAP32[26905] | 0, 109) | 0)) if (!(_vim_strchr(HEAP32[26905] | 0, 116) | 0)) {
  HEAP32[i2 >> 2] = 1;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _mch_expandpath(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = _unix_expandpath(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, HEAP32[i7 >> 2] | 0, 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _main_msg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2 + 16 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 i6 = i2 + 20 | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i5 >> 2] = 96759;
 _printf(97576, i5) | 0;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 _printf(97576, i4) | 0;
 HEAP32[i3 >> 2] = 97581;
 _printf(97576, i3) | 0;
 STACKTOP = i2;
 return;
}

function _clear_termcodes() {
 var i1 = 0, i2 = 0;
 while (1) {
  i1 = HEAP32[26602] | 0;
  if ((HEAP32[26600] | 0) <= 0) break;
  i2 = (HEAP32[26600] | 0) + -1 | 0;
  HEAP32[26600] = i2;
  _vim_free(HEAP32[i1 + (i2 << 4) + 4 >> 2] | 0);
 }
 if (!i1) {
  HEAP32[26601] = 0;
  HEAP32[26599] = 1;
  return;
 }
 _vim_free(HEAP32[26602] | 0);
 HEAP32[26602] = 0;
 HEAP32[26601] = 0;
 HEAP32[26599] = 1;
 return;
}

function _changed_window_setting_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 152 >> 2] = 0;
 _changed_line_abv_curs_win(HEAP32[i3 >> 2] | 0);
 i1 = (HEAP32[i3 >> 2] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -225;
 _redraw_win_later(HEAP32[i3 >> 2] | 0, 40);
 STACKTOP = i2;
 return;
}

function ___randname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 ___clock_gettime(0, i3 | 0) | 0;
 i4 = 0;
 i5 = (HEAP32[i3 + 4 >> 2] | 0) * 65537 ^ (i3 >>> 4) + i1;
 while (1) {
  HEAP8[i1 + i4 >> 0] = (i5 & 15) + 65 | i5 << 1 & 32;
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == 6) break; else i5 = i5 >>> 5;
 }
 STACKTOP = i2;
 return i1 | 0;
}

function _vim_regexec(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = _vim_regexec_string(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _vim_isIDc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!((HEAP32[i3 >> 2] | 0) > 0 & (HEAP32[i3 >> 2] | 0) < 256)) {
  i4 = 0;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = ((HEAPU8[113724 + (HEAP32[i3 >> 2] | 0) >> 0] | 0) & 32 | 0) != 0;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _replace_pop_ins() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = HEAP32[10180];
 HEAP32[10180] = 1;
 while (1) {
  i4 = _replace_pop() | 0;
  HEAP32[i2 >> 2] = i4;
  if ((i4 | 0) <= 0) break;
  _ins_char(HEAP32[i2 >> 2] | 0);
  _dec_cursor() | 0;
 }
 HEAP32[10180] = HEAP32[i3 >> 2];
 STACKTOP = i1;
 return;
}

function _get_past_head(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  i3 = (_vim_ispathsep(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0) != 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if (!i3) break;
  HEAP32[i4 >> 2] = i5 + 1;
 }
 STACKTOP = i2;
 return i5 | 0;
}

function _check_need_swap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 772 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[i3 >> 2] | 0 ? (HEAP32[(HEAP32[26773] | 0) + 676 >> 2] | 0) != 0 : 0) {
  STACKTOP = i2;
  return;
 }
 _ml_open_file(HEAP32[26773] | 0);
 STACKTOP = i2;
 return;
}

function _skipchr_keepstart() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 8 | 0;
 i3 = i1 + 4 | 0;
 i4 = i1;
 HEAP32[i2 >> 2] = HEAP32[26395];
 HEAP32[i3 >> 2] = HEAP32[26396];
 HEAP32[i4 >> 2] = HEAP32[26397];
 _skipchr();
 HEAP32[26394] = HEAP32[i2 >> 2];
 HEAP32[26396] = HEAP32[i3 >> 2];
 HEAP32[26397] = HEAP32[i4 >> 2];
 STACKTOP = i1;
 return;
}

function _highlight_gui_started() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26627] | 0) _set_normal_colors();
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= (HEAP32[26486] | 0)) break;
  _gui_do_one_color(HEAP32[i2 >> 2] | 0, 0, 0);
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 _highlight_changed() | 0;
 STACKTOP = i1;
 return;
}

function _getmark_buf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = _getmark_buf_fnum(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _ex_bprevious(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _goto_buffer(i1 | 0, 0, -1, HEAP32[i1 + 40 >> 2] | 0);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_cmdline_cmd(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _win_comp_scroll(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 200 + 20 >> 2] = (HEAP32[i1 + 88 >> 2] | 0) >>> 1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 200 + 20 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 200 + 20 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _ff_push(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _clear_snapshot_rec(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _clear_snapshot_rec(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0);
 _clear_snapshot_rec(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0);
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _WaitForChar(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 i3 = _WaitForCharOrMouse(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _win_copy_options(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _copy_winopt((HEAP32[i4 >> 2] | 0) + 200 | 0, (HEAP32[i5 >> 2] | 0) + 200 | 0);
 _copy_winopt((HEAP32[i4 >> 2] | 0) + 248 | 0, (HEAP32[i5 >> 2] | 0) + 248 | 0);
 STACKTOP = i3;
 return;
}

function _trigger_cmd_autocmd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 i6 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP8[i6 >> 0] = HEAP32[i4 >> 2];
 HEAP8[i6 + 1 >> 0] = 0;
 _apply_autocmds(HEAP32[i5 >> 2] | 0, i6, i6, 0, HEAP32[26773] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _fmt_check_par(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAPU8[(_skipwhite(_ml_get(HEAP32[i3 >> 2] | 0) | 0) | 0) >> 0] | 0)) {
  i4 = 1;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (_startPS(HEAP32[i3 >> 2] | 0, 0, 0) | 0) != 0;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}
function _ex_bmodified(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _goto_buffer(i1 | 0, 3, 1, HEAP32[i1 + 40 >> 2] | 0);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_cmdline_cmd(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _win_rest_invalid(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  if (!(HEAP32[i3 >> 2] | 0)) break;
  _redraw_win_later(HEAP32[i3 >> 2] | 0, 40);
  HEAP32[(HEAP32[i3 >> 2] | 0) + 176 >> 2] = 1;
  HEAP32[i3 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
 }
 HEAP32[26699] = 1;
 STACKTOP = i2;
 return;
}

function _redraw_for_cursorline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 200 + 8 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 108 >> 2] & 16 | 0) {
  STACKTOP = i2;
  return;
 }
 _redraw_win_later(HEAP32[i3 >> 2] | 0, 35);
 STACKTOP = i2;
 return;
}

function _clear_snapshot(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _clear_snapshot_rec(HEAP32[(HEAP32[i4 >> 2] | 0) + 48 + (HEAP32[i5 >> 2] << 2) >> 2] | 0);
 HEAP32[(HEAP32[i4 >> 2] | 0) + 48 + (HEAP32[i5 >> 2] << 2) >> 2] = 0;
 STACKTOP = i3;
 return;
}

function _istermoption(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0) != 116) {
  i4 = 0;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAP8[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 1 >> 0] | 0) == 95;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _vim_strnsave_up(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = _vim_strnsave(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 _vim_strup(HEAP32[i6 >> 2] | 0);
 STACKTOP = i3;
 return HEAP32[i6 >> 2] | 0;
}

function _nv_mark(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 if (_setmark(HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ff_free_visited_list(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  if (!(HEAP32[i3 >> 2] | 0)) break;
  HEAP32[i4 >> 2] = HEAP32[HEAP32[i3 >> 2] >> 2];
  _vim_free(HEAP32[i3 >> 2] | 0);
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 }
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _ex_bnext(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _goto_buffer(i1 | 0, 0, 1, HEAP32[i1 + 40 >> 2] | 0);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_cmdline_cmd(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _gui_mch_get_screen_dimensions(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _vimwasm_get_win_width() | 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = i2;
 i2 = _vimwasm_get_win_height() | 0;
 HEAP32[HEAP32[i5 >> 2] >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _msg_end() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[26778] | 0) == 0 & (HEAP32[26721] | 0) != 0) if (!(HEAP32[10180] & 8)) {
  _wait_return(0);
  HEAP32[i2 >> 2] = 0;
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 _out_flush();
 HEAP32[i2 >> 2] = 1;
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _ends_excmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == 0 | (HEAP32[i3 >> 2] | 0) == 124 | (HEAP32[i3 >> 2] | 0) == 34) {
  i4 = 1;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAP32[i3 >> 2] | 0) == 10;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _ex_all(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0)) HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] = 9999;
 i1 = HEAP32[i3 >> 2] | 0;
 _do_arg_all(HEAP32[i1 + 40 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0, (HEAP32[i1 + 16 >> 2] | 0) == 122 & 1);
 STACKTOP = i2;
 return;
}

function _add_num_buff(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i3;
 i5 = i3 + 8 | 0;
 i6 = i3 + 4 | 0;
 i7 = i3 + 16 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
 _sprintf(i7, 97769, i4) | 0;
 _add_buff(HEAP32[i5 >> 2] | 0, i7, -1);
 STACKTOP = i3;
 return;
}

function _ExpandCleanup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0) < 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 _FreeWild(HEAP32[i1 + 20 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] = -1;
 STACKTOP = i2;
 return;
}

function _win_col_off(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 200 + 4 >> 2] | 0) {
  i4 = 1;
  i5 = i4 ? 8 : 0;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 200 + 8 >> 2] | 0) != 0;
 i5 = i4 ? 8 : 0;
 STACKTOP = i2;
 return i5 | 0;
}

function _showruler(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[i3 >> 2] | 0) {
  if (!(HEAP32[26770] | 0)) {
   STACKTOP = i2;
   return;
  }
 } else {
  i3 = (_redrawing() | 0) != 0;
  if (!(i3 & (HEAP32[26770] | 0) != 0)) {
   STACKTOP = i2;
   return;
  }
 }
 _draw_tabline();
 STACKTOP = i2;
 return;
}

function _elapsed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 _gettimeofday(i4 | 0, 0) | 0;
 STACKTOP = i2;
 return (((HEAP32[i4 >> 2] | 0) - (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) * 1e3 | 0) + (((HEAP32[i4 + 4 >> 2] | 0) - (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) | 0) / 1e3 | 0) | 0;
}

function _win_count() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i2 >> 2] = HEAP32[26887];
 while (1) {
  i4 = HEAP32[i3 >> 2] | 0;
  if (!(HEAP32[i2 >> 2] | 0)) break;
  HEAP32[i3 >> 2] = i4 + 1;
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2];
 }
 STACKTOP = i1;
 return i4 | 0;
}

function _au_remove_pat(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0);
  HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = 0;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] = -1;
 HEAP32[25368] = 1;
 STACKTOP = i2;
 return;
}

function _get_sw_value(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 680 >> 2] | 0) {
  i4 = HEAP32[i1 + 680 >> 2] | 0;
  STACKTOP = i2;
  return i4 | 0;
 } else {
  i4 = HEAP32[i1 + 700 >> 2] | 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 return 0;
}

function _vim_iswordp_buf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 i5 = i3 + 4 | 0;
 i6 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i6 >> 2] = HEAPU8[HEAP32[i4 >> 2] >> 0];
 i4 = _vim_iswordc_buf(HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i4 | 0;
}

function _u_blockfree(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  i4 = HEAP32[i3 >> 2] | 0;
  if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 500 >> 2] | 0)) break;
  _u_freeheader(i4, HEAP32[(HEAP32[i3 >> 2] | 0) + 500 >> 2] | 0, 0);
 }
 _vim_free(HEAP32[i4 + 540 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _regc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[26453] | 0) == (-1 | 0)) {
  HEAP32[26404] = (HEAP32[26404] | 0) + 1;
  STACKTOP = i2;
  return;
 } else {
  i1 = HEAP32[i3 >> 2] & 255;
  i3 = HEAP32[26453] | 0;
  HEAP32[26453] = i3 + 1;
  HEAP8[i3 >> 0] = i1;
  STACKTOP = i2;
  return;
 }
}

function _expand_env(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4 + 4 | 0;
 i7 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i7 >> 2] = i3;
 _expand_env_esc(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i7 >> 2] | 0, 0, 0, 0);
 STACKTOP = i4;
 return;
}

function _unshowmode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 do if (_redrawing() | 0) {
  if (!(HEAP32[i3 >> 2] | 0)) {
   i1 = (_char_avail() | 0) == 0;
   if (!(i1 | (HEAP32[27161] | 0) != 0)) break;
  }
  _clearmode();
  STACKTOP = i2;
  return;
 } while (0);
 HEAP32[26699] = 1;
 STACKTOP = i2;
 return;
}

function _undo_allowed() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 do if (HEAP32[(HEAP32[26773] | 0) + 664 >> 2] | 0) if (HEAP32[26784] | 0) {
  _emsg(93591) | 0;
  HEAP32[i2 >> 2] = 0;
  break;
 } else {
  HEAP32[i2 >> 2] = 1;
  break;
 } else {
  _emsg(92640) | 0;
  HEAP32[i2 >> 2] = 0;
 } while (0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _skipdigits(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 while (1) {
  i5 = HEAP32[i4 >> 2] | 0;
  if (((HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) - 48 | 0) >>> 0 >= 10) break;
  HEAP32[i4 >> 2] = i5 + 1;
 }
 STACKTOP = i2;
 return i5 | 0;
}

function _nv_tilde(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!((HEAP32[27010] | 0) != 0 | (HEAP32[26788] | 0) != 0)) if ((HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) != 7) {
  _n_swapchar(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
 _nv_operator(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _calloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i1) i3 = 0; else {
  i4 = Math_imul(i2, i1) | 0;
  if ((i2 | i1) >>> 0 > 65535) i3 = ((i4 >>> 0) / (i1 >>> 0) | 0 | 0) == (i2 | 0) ? i4 : -1; else i3 = i4;
 }
 i4 = _malloc(i3) | 0;
 if (!i4) return i4 | 0;
 if (!(HEAP32[i4 + -4 >> 2] & 3)) return i4 | 0;
 _memset(i4 | 0, 0, i3 | 0) | 0;
 return i4 | 0;
}

function _can_clear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) if ((HEAP32[26734] | 0) <= 1 | (HEAP32[26627] | 0) != 0 | (HEAP32[26743] | 0) == 0) i4 = 1; else i4 = (HEAPU8[HEAP32[26528] >> 0] | 0 | 0) != 0; else i4 = 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _set_expand_context(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[25241] | 0) != 58) {
  HEAP32[i1 >> 2] = 0;
  STACKTOP = i2;
  return;
 } else {
  _set_cmd_context(i1, HEAP32[25236] | 0, HEAP32[25238] | 0, HEAP32[25239] | 0, 1);
  STACKTOP = i2;
  return;
 }
}

function _space_to_screenline(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP8[(HEAP32[26691] | 0) + (HEAP32[i4 >> 2] | 0) >> 0] = 32;
 HEAP16[(HEAP32[26692] | 0) + (HEAP32[i4 >> 2] << 1) >> 1] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _ins_horscroll() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _undisplay_dollar();
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 if (!(_gui_do_horiz_scroll(HEAP32[27098] | 0, 0) | 0)) {
  STACKTOP = i1;
  return;
 }
 _start_arrow(i2);
 STACKTOP = i1;
 return;
}

function _incl(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _inc(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = i1;
 if ((i1 | 0) >= 1) if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) HEAP32[i4 >> 2] = _inc(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return HEAP32[i4 >> 2] | 0;
}

function _free_buffer_stuff(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 if (!(HEAP32[i5 >> 2] | 0)) {
  STACKTOP = i3;
  return;
 }
 _clear_wininfo(HEAP32[i4 >> 2] | 0);
 _free_buf_options(HEAP32[i4 >> 2] | 0, 1);
 STACKTOP = i3;
 return;
}

function _decl(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _dec(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = i1;
 if ((i1 | 0) == 1) if (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) HEAP32[i4 >> 2] = _dec(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return HEAP32[i4 >> 2] | 0;
}

function _clearmode() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i2 >> 2] = HEAP32[26877];
 HEAP32[i3 >> 2] = HEAP32[27043];
 _msg_pos_mode();
 if (HEAP32[26800] | 0) _recording_mode(HEAP32[27057] | 0);
 _msg_clr_eos();
 HEAP32[27043] = HEAP32[i3 >> 2];
 HEAP32[26877] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return;
}

function _changed_bytes(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _changedOneline(HEAP32[26773] | 0, HEAP32[i4 >> 2] | 0);
 i2 = HEAP32[i4 >> 2] | 0;
 _changed_common(i2 | 0, HEAP32[i5 >> 2] | 0, i2 + 1 | 0, 0);
 STACKTOP = i3;
 return;
}

function _rem_backslash(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) != 92) {
  i4 = 0;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAPU8[(HEAP32[i3 >> 2] | 0) + 1 >> 0] | 0 | 0) != 0;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _other_sourcing_name() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 do if (HEAP32[26731] | 0) if (HEAP32[27228] | 0) {
  HEAP32[i2 >> 2] = (_strcmp(HEAP32[26731] | 0, HEAP32[27228] | 0) | 0) != 0 & 1;
  break;
 } else {
  HEAP32[i2 >> 2] = 1;
  break;
 } else HEAP32[i2 >> 2] = 0; while (0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _nv_home(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26698] & 4 | 0) {
  _nv_goto(i1);
  HEAP32[26807] = 0;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[i1 + 24 >> 2] = 1;
  _nv_pipe(HEAP32[i3 >> 2] | 0);
  HEAP32[26807] = 0;
  STACKTOP = i2;
  return;
 }
}

function _memmove(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) < (i1 | 0) & (i1 | 0) < (i2 + i3 | 0)) {
  i4 = i1;
  i2 = i2 + i3 | 0;
  i1 = i1 + i3 | 0;
  while ((i3 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i2 = i2 - 1 | 0;
   i3 = i3 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  }
  i1 = i4;
 } else _memcpy(i1, i2, i3) | 0;
 return i1 | 0;
}

function _gui_mch_getmouse(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _vimwasm_get_mouse_x() | 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = i2;
 i2 = _vimwasm_get_mouse_y() | 0;
 HEAP32[HEAP32[i5 >> 2] >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _mf_ins_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _regstack_pop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = (HEAP32[26412] | 0) + (HEAP32[26408] | 0) + -24;
 HEAP32[HEAP32[i3 >> 2] >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2];
 HEAP32[26408] = (HEAP32[26408] | 0) - 24;
 STACKTOP = i2;
 return;
}

function _msg_outtrans_attr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = _strlen(HEAP32[i4 >> 2] | 0) | 0;
 i4 = _msg_outtrans_len_attr(i2, i1, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i4 | 0;
}

function _mch_breakcheck(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!((HEAP32[26287] | 0) == 2 | (HEAP32[i3 >> 2] | 0) != 0)) {
  STACKTOP = i2;
  return;
 }
 if (!(_RealWaitForChar(HEAP32[26833] | 0, 0, 0, 0) | 0)) {
  STACKTOP = i2;
  return;
 }
 _fill_input_buf(0);
 STACKTOP = i2;
 return;
}

function _get_bkc_value(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 576 >> 2] | 0) {
  i4 = HEAP32[(HEAP32[i3 >> 2] | 0) + 576 >> 2] | 0;
  STACKTOP = i2;
  return i4 | 0;
 } else {
  i4 = HEAP32[26896] | 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 return 0;
}

function _nfa_regfree(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0);
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _mch_isFullName(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) == 47) {
  i4 = 1;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) == 126;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _gui_get_base_height() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[26669] << 1;
 if (!(HEAP32[26663] | 0)) {
  i3 = HEAP32[i2 >> 2] | 0;
  STACKTOP = i1;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + (HEAP32[26648] | 0);
 i3 = HEAP32[i2 >> 2] | 0;
 STACKTOP = i1;
 return i3 | 0;
}

function _mch_chdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 if ((HEAP32[26888] | 0) >= 5) {
  _verbose_enter();
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  _smsg(71705, i3) | 0;
  _verbose_leave();
 }
 i3 = _chdir(HEAP32[i4 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _ex_tabmove(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _get_tabpage_arg(HEAP32[i3 >> 2] | 0) | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 _tabpage_move(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _bt_prompt(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  i4 = 0;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAPU8[HEAP32[(HEAP32[i3 >> 2] | 0) + 592 >> 2] >> 0] | 0 | 0) == 112;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _ex_swapname(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 if (HEAP32[(HEAP32[26773] | 0) + 4 >> 2] | 0) if (HEAP32[HEAP32[(HEAP32[26773] | 0) + 4 >> 2] >> 2] | 0) {
  _msg(HEAP32[HEAP32[(HEAP32[26773] | 0) + 4 >> 2] >> 2] | 0) | 0;
  STACKTOP = i2;
  return;
 }
 _msg(50397) | 0;
 STACKTOP = i2;
 return;
}

function _vim_isAbsName(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_path_with_url(HEAP32[i3 >> 2] | 0) | 0) {
  i4 = 1;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (_mch_isFullName(HEAP32[i3 >> 2] | 0) | 0) != 0;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _term_is_gui(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(_strcmp(HEAP32[i3 >> 2] | 0, 84250) | 0)) {
  i4 = 1;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (_strcmp(HEAP32[i3 >> 2] | 0, 78977) | 0) == 0;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _nv_ctrlh(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[26788] | 0) != 0 & (HEAP32[26789] | 0) != 0) {
  HEAP32[i1 + 8 >> 2] = 120;
  _v_visop(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 } else {
  _nv_left(i1);
  STACKTOP = i2;
  return;
 }
}

function _ex_script_ni(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) {
  _vim_free(_script_get(i1, HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0);
  STACKTOP = i2;
  return;
 } else {
  _ex_ni(i1);
  STACKTOP = i2;
  return;
 }
}

function _reset_modifiable() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[(HEAP32[26773] | 0) + 664 >> 2] = 0;
 HEAP32[26276] = 0;
 HEAP32[i2 >> 2] = _findoption(68030) | 0;
 if ((HEAP32[i2 >> 2] | 0) < 0) {
  STACKTOP = i1;
  return;
 }
 HEAP32[15328 + ((HEAP32[i2 >> 2] | 0) * 28 | 0) + 20 >> 2] = 0;
 STACKTOP = i1;
 return;
}

function _mf_need_trans(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[HEAP32[i3 >> 2] >> 2] | 0)) {
  i4 = 0;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 584 >> 2] | 0) > 0;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _didset_options() {
 _init_chartab() | 0;
 _opt_strings_flags(HEAP32[26895] | 0, 29040, 107584, 1) | 0;
 _opt_strings_flags(HEAP32[26899] | 0, 29064, 107600, 1) | 0;
 _opt_strings_flags(HEAP32[26907] | 0, 29144, 107632, 1) | 0;
 _opt_strings_flags(HEAP32[27002] | 0, 29160, 108012, 0) | 0;
 _opt_strings_flags(HEAP32[27018] | 0, 29184, 108076, 0) | 0;
 return;
}

function _msg_outtrans_one(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _transchar(HEAPU8[HEAP32[i4 >> 2] >> 0] | 0) | 0;
 _msg_puts_attr(i2, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return (HEAP32[i4 >> 2] | 0) + 1 | 0;
}

function _ex_submagic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[26946];
 HEAP32[26946] = (HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0) == 400 & 1;
 _do_sub(HEAP32[i3 >> 2] | 0);
 HEAP32[26946] = HEAP32[i4 >> 2];
 STACKTOP = i2;
 return;
}

function _vim_isspace(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) >= 9 & (HEAP32[i3 >> 2] | 0) <= 13) {
  i4 = 1;
  i5 = i4 & 1;
  STACKTOP = i2;
  return i5 | 0;
 }
 i4 = (HEAP32[i3 >> 2] | 0) == 32;
 i5 = i4 & 1;
 STACKTOP = i2;
 return i5 | 0;
}

function _clear_sub(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
 if (!(HEAP32[26312] | 0)) _memset(i1 | 0, -1, HEAP32[26329] << 4 | 0) | 0; else _memset(i1 | 0, 0, HEAP32[26329] << 3 | 0) | 0;
 HEAP32[HEAP32[i3 >> 2] >> 2] = 0;
 STACKTOP = i2;
 return;
}

function ___unlist_locked_file(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (HEAP32[i1 + 68 >> 2] | 0) {
  i2 = HEAP32[i1 + 116 >> 2] | 0;
  i3 = i1 + 112 | 0;
  if (i2 | 0) HEAP32[i2 + 112 >> 2] = HEAP32[i3 >> 2];
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) i4 = (___pthread_self_612() | 0) + 232 | 0; else i4 = i1 + 116 | 0;
  HEAP32[i4 >> 2] = i2;
 }
 return;
}

function _ml_close_notmod() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[26771];
 while (1) {
  if (!(HEAP32[i2 >> 2] | 0)) break;
  if (!(_bufIsChanged(HEAP32[i2 >> 2] | 0) | 0)) _ml_close(HEAP32[i2 >> 2] | 0, 1);
  HEAP32[i2 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2];
 }
 STACKTOP = i1;
 return;
}

function _tabline_height() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 switch (HEAP32[26943] | 0) {
 case 0:
  {
   HEAP32[i2 >> 2] = 0;
   break;
  }
 case 1:
  {
   HEAP32[i2 >> 2] = (HEAP32[HEAP32[26884] >> 2] | 0) == 0 ? 0 : 1;
   break;
  }
 default:
  HEAP32[i2 >> 2] = 1;
 }
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _read_stdin() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[26812] = 1;
 HEAP32[26720] = 1;
 HEAP32[i2 >> 2] = HEAP32[26712];
 _set_buflisted(1);
 _open_buffer(1, 0, 0) | 0;
 HEAP32[26720] = 0;
 HEAP32[26712] = HEAP32[i2 >> 2];
 _check_swap_exists_action();
 _close(0) | 0;
 _dup(2) | 0;
 STACKTOP = i1;
 return;
}

function _nv_beginline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 20 >> 2] = 0;
 _beginline(HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0);
 HEAP32[26807] = 0;
 STACKTOP = i2;
 return;
}

function _msg_puts_long_attr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i1 = _strlen(HEAP32[i4 >> 2] | 0) | 0;
 _msg_puts_long_len_attr(i2, i1, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ex_brewind(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _goto_buffer(HEAP32[i3 >> 2] | 0, 1, 1, 0);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_cmdline_cmd(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _ml_delete(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _ml_flush_line(HEAP32[26773] | 0);
 i2 = _ml_delete_int(HEAP32[26773] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _hash_find(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 i1 = _hash_lookup(i2, i4, _hash_hash(HEAP32[i5 >> 2] | 0) | 0) | 0;
 STACKTOP = i3;
 return i1 | 0;
}

function _ex_blast(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _goto_buffer(HEAP32[i3 >> 2] | 0, 2, -1, 0);
 if (!(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_cmdline_cmd(HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _tabpage_new() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i2 = i1;
 i3 = i2;
 i4 = i3 + 100 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i2 + 16 >> 2] = 450;
 HEAP32[i2 + 8 >> 2] = 51849;
 HEAP32[i2 >> 2] = 114072;
 _ex_splitview(i2);
 STACKTOP = i1;
 return;
}

function _write_lnum_adjust(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 760 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 i1 = (HEAP32[26773] | 0) + 760 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + (HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _do_fixdel(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i2 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = _find_termcode(78907) | 0;
 if (HEAP32[i3 >> 2] | 0) i4 = (HEAPU8[HEAP32[i3 >> 2] >> 0] | 0 | 0) == 127; else i4 = 0;
 _add_termcode(78910, i4 ? 78913 : 78915, 0);
 STACKTOP = i2;
 return;
}

function _alloc_cmdbuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) < 80) HEAP32[i3 >> 2] = 100; else HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 20;
 HEAP32[25236] = _alloc(HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[25237] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return;
}

function _vim_isprintc_strict(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) >= 256) i4 = 1; else if ((HEAP32[i3 >> 2] | 0) > 0) i4 = ((HEAPU8[113724 + (HEAP32[i3 >> 2] | 0) >> 0] | 0) & 16 | 0) != 0; else i4 = 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _tagname_free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _vim_free(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 _vim_findfile_cleanup(HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] = 0;
 _ga_clear_strings(106056);
 STACKTOP = i2;
 return;
}

function _pchar_cursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] & 255;
 i3 = _ml_get_buf(HEAP32[26773] | 0, HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 1) | 0;
 HEAP8[i3 + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) >> 0] = i1;
 STACKTOP = i2;
 return;
}

function _mf_rem_free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2];
 STACKTOP = i2;
 return HEAP32[i4 >> 2] | 0;
}

function _show_sb_text() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = _msg_sb_start(HEAP32[27231] | 0) | 0;
 if (HEAP32[i2 >> 2] | 0) if (HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0) {
  _do_more_prompt(71) | 0;
  _wait_return(0);
  STACKTOP = i1;
  return;
 }
 _vim_beep(4096);
 STACKTOP = i1;
 return;
}

function _nv_scroll_line(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 _scroll_redraw(HEAP32[i1 + 32 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _cursorcmd() {
 if (HEAP32[26811] | 0) return;
 HEAP32[26877] = (HEAP32[26876] | 0) + ((HEAP32[25240] | 0) / (HEAP32[10174] | 0) | 0);
 HEAP32[27043] = (HEAP32[25240] | 0) % (HEAP32[10174] | 0) | 0;
 if ((HEAP32[26877] | 0) >= (HEAP32[10173] | 0)) HEAP32[26877] = (HEAP32[10173] | 0) - 1;
 _windgoto(HEAP32[26877] | 0, HEAP32[27043] | 0);
 return;
}

function _nv_kundo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _u_undo(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0);
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _ins_scroll() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 _undisplay_dollar();
 i3 = (HEAP32[26881] | 0) + 24 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 if (!(_gui_do_scroll() | 0)) {
  STACKTOP = i1;
  return;
 }
 _start_arrow(i2);
 STACKTOP = i1;
 return;
}

function _vim_findfile_cleanup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _vim_findfile_free_visited(HEAP32[i3 >> 2] | 0);
 _ff_clear(HEAP32[i3 >> 2] | 0);
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _nv_redo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _u_redo(HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0);
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 STACKTOP = i2;
 return;
}

function _tcsetattr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 if (i2 >>> 0 > 2) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i6 = -1;
 } else {
  HEAP32[i5 >> 2] = i3;
  i6 = _ioctl(i1, i2 + 21506 | 0, i5) | 0;
 }
 STACKTOP = i4;
 return i6 | 0;
}

function _prep_redo_cmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _prep_redo(HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[i1 + 24 >> 2] | 0, 0, HEAP32[i1 + 8 >> 2] | 0, 0, 0, HEAP32[i1 + 12 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _vim_isprintc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) >= 256) i4 = 1; else if ((HEAP32[i3 >> 2] | 0) > 0) i4 = ((HEAPU8[113724 + (HEAP32[i3 >> 2] | 0) >> 0] | 0) & 16 | 0) != 0; else i4 = 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _may_start_select(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_stuff_empty() | 0) if (_typebuf_typed() | 0) i4 = (_vim_strchr(HEAP32[26976] | 0, HEAP32[i3 >> 2] | 0) | 0) != 0; else i4 = 0; else i4 = 0;
 HEAP32[26789] = i4 & 1;
 STACKTOP = i2;
 return;
}

function _vim_isfilec(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) >= 256) i4 = 1; else if ((HEAP32[i3 >> 2] | 0) > 0) i4 = ((HEAPU8[113724 + (HEAP32[i3 >> 2] | 0) >> 0] | 0) & 64 | 0) != 0; else i4 = 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function ___fseeko(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i1) | 0) == 0;
  i5 = ___fseeko_unlocked(i1, i2, i3) | 0;
  if (i4) i6 = i5; else {
   ___unlockfile(i1);
   i6 = i5;
  }
 } else i6 = ___fseeko_unlocked(i1, i2, i3) | 0;
 return i6 | 0;
}

function _ex_stag(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26851] = -1;
 HEAP32[26852] = HEAP32[27129];
 i1 = HEAP32[i3 >> 2] | 0;
 _ex_tag_cmd(i1 | 0, (HEAP32[1336 + (HEAP32[i1 + 16 >> 2] << 4) >> 2] | 0) + 1 | 0);
 HEAP32[26852] = 0;
 STACKTOP = i2;
 return;
}

function _checkclearop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if (!(HEAP32[HEAP32[i4 >> 2] >> 2] | 0)) HEAP32[i3 >> 2] = 0; else {
  _clearopbeep(HEAP32[i4 >> 2] | 0);
  HEAP32[i3 >> 2] = 1;
 }
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _ex_undo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0) == 1) {
  _undo_time(HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] | 0, 0, 0, 1);
  STACKTOP = i2;
  return;
 } else {
  _u_undo(1);
  STACKTOP = i2;
  return;
 }
}

function _gui_mch_set_scrollbar_pos(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i6 + 16 >> 2] = i1;
 HEAP32[i6 + 12 >> 2] = i2;
 HEAP32[i6 + 8 >> 2] = i3;
 HEAP32[i6 + 4 >> 2] = i4;
 HEAP32[i6 >> 2] = i5;
 STACKTOP = i6;
 return;
}

function _taglen_advance(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == 2147483647) {
  _msg_putchar(10);
  _msg_advance(24);
  STACKTOP = i2;
  return;
 } else {
  _msg_advance(13 + (HEAP32[i3 >> 2] | 0) | 0);
  STACKTOP = i2;
  return;
 }
}

function _default_fileformat() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 switch (HEAPU8[HEAP32[26917] >> 0] | 0 | 0) {
 case 109:
  {
   HEAP32[i2 >> 2] = 2;
   break;
  }
 case 100:
  {
   HEAP32[i2 >> 2] = 1;
   break;
  }
 default:
  HEAP32[i2 >> 2] = 0;
 }
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _save_se_one(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[HEAP32[i4 >> 2] >> 2] = HEAP32[HEAP32[i5 >> 2] >> 2];
 HEAP32[HEAP32[i5 >> 2] >> 2] = HEAP32[26334];
 STACKTOP = i3;
 return;
}

function _mf_hash_free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) == ((HEAP32[i3 >> 2] | 0) + 12 | 0)) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _hash_clear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0) == ((HEAP32[i3 >> 2] | 0) + 24 | 0)) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _deleted_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 _changed_lines(i2 | 0, 0, i2 + i4 | 0, 0 - i4 | 0);
 STACKTOP = i3;
 return;
}

function _copy_redo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  i1 = _read_redo(0, HEAP32[i3 >> 2] | 0) | 0;
  HEAP32[i4 >> 2] = i1;
  if (!i1) break;
  _add_char_buff(101948, HEAP32[i4 >> 2] | 0);
 }
 STACKTOP = i2;
 return;
}

function _frame2win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 while (1) {
  i4 = HEAP32[i3 >> 2] | 0;
  if (HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] | 0) break;
  HEAP32[i3 >> 2] = HEAP32[i4 + 32 >> 2];
 }
 STACKTOP = i2;
 return HEAP32[i4 + 36 >> 2] | 0;
}

function _smsg(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i3 + 16 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _vim_vsnprintf(HEAP32[26882] | 0, 1025, HEAP32[i4 >> 2] | 0, i5) | 0;
 i5 = _msg(HEAP32[26882] | 0) | 0;
 STACKTOP = i3;
 return i5 | 0;
}

function _initchr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26392] = HEAP32[i3 >> 2];
 HEAP32[26393] = 0;
 HEAP32[26399] = -1;
 HEAP32[26396] = -1;
 HEAP32[26397] = -1;
 HEAP32[26398] = -1;
 HEAP32[26394] = 1;
 HEAP32[26395] = 0;
 STACKTOP = i2;
 return;
}

function _mch_get_user_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _getuid() | 0;
 i1 = _mch_get_uname(i2, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i1 | 0;
}

function _gui_start_highlight(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) > 255) {
  HEAP32[26646] = i1;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[26646] = HEAP32[26646] | i1;
  STACKTOP = i2;
  return;
 }
}

function ___shlim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i1 + 104 >> 2] = i2;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = i3 - i4 | 0;
 HEAP32[i1 + 108 >> 2] = i5;
 if ((i2 | 0) != 0 & (i5 | 0) > (i2 | 0)) HEAP32[i1 + 100 >> 2] = i4 + i2; else HEAP32[i1 + 100 >> 2] = i3;
 return;
}

function _validate_cheight() {
 var i1 = 0;
 _check_cursor_moved(HEAP32[26881] | 0);
 if (HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 8 | 0) return;
 i1 = _plines(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) | 0;
 HEAP32[(HEAP32[26881] | 0) + 124 >> 2] = i1;
 i1 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8;
 return;
}

function _gui_check_pos() {
 if ((HEAP32[26636] | 0) >= (HEAP32[26696] | 0)) HEAP32[26636] = (HEAP32[26696] | 0) - 1;
 if ((HEAP32[26635] | 0) >= (HEAP32[26697] | 0)) HEAP32[26635] = (HEAP32[26697] | 0) - 1;
 if ((HEAP32[26638] | 0) < (HEAP32[26696] | 0)) if ((HEAP32[26637] | 0) < (HEAP32[26697] | 0)) return;
 HEAP8[106556] = 0;
 return;
}

function _ex_mode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0)) {
  _shell_resized();
  STACKTOP = i2;
  return;
 } else {
  _mch_screenmode(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0;
  STACKTOP = i2;
  return;
 }
}

function _buflist_altfpos(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = (HEAP32[i3 >> 2] | 0) + 24 | 0;
 _buflist_setfpos(HEAP32[26773] | 0, i1 | 0, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, 1);
 STACKTOP = i2;
 return;
}

function _redrawing() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (HEAP32[26814] | 0) {
  i1 = 0;
  i2 = i1 & 1;
  return i2 | 0;
 }
 if (HEAP32[26945] | 0) {
  i3 = (_char_avail() | 0) == 0;
  if (i3 | (HEAP32[27161] | 0) != 0) i4 = 0; else i4 = (HEAP32[26830] | 0) != 0 ^ 1;
 } else i4 = 0;
 i1 = i4 ^ 1;
 i2 = i1 & 1;
 return i2 | 0;
}

function _gui_prepare(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[26627] = 0;
 HEAP32[26628] = 0;
 _gui_mch_prepare(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _ftruncate(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = i2 >> 31;
 i2 = ___syscall_ret(___syscall194(194, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _clearop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[HEAP32[i3 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _vim_strsave_escaped(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _vim_strsave_escaped_ext(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 92, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _toggle_Magic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) < 0) HEAP32[i3 >> 2] = i1 + 256; else HEAP32[i3 >> 2] = i1 - 256;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _sort_compare_1672(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _strcmp(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[HEAP32[i5 >> 2] >> 2] | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _rewind(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  ___fseeko_unlocked(i1, 0, 0) | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -33;
  if (!i2) ___unlockfile(i1);
 } else {
  ___fseeko_unlocked(i1, 0, 0) | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -33;
 }
 return;
}

function _ex_write(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 64 >> 2] | 0) {
  _do_bang(1, i1, 0, 1, 0);
  STACKTOP = i2;
  return;
 } else {
  _do_write(i1) | 0;
  STACKTOP = i2;
  return;
 }
}

function _clip_free_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i2 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = HEAP32[26084];
 HEAP32[26084] = 104932;
 _free_yank_all();
 HEAP32[(HEAP32[26084] | 0) + 4 >> 2] = 0;
 HEAP32[26084] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return;
}

function _buflist_findname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i2 + 76 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((_stat(HEAP32[i3 >> 2] | 0, i4) | 0) < 0) HEAP32[i4 >> 2] = -1;
 i1 = _buflist_findname_stat(HEAP32[i3 >> 2] | 0, i4) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _ex_map(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26783] | 0) {
  HEAP32[26783] = 2;
  _msg_outtrans(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0) | 0;
  _msg_putchar(10);
 }
 _do_exmap(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _source_runtime(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _source_in_path(HEAP32[26969] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _nv_tagpop(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _do_tag(114072, 2, HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] | 0, 0, 1) | 0;
 STACKTOP = i2;
 return;
}

function _getline_equal(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4 + 8 | 0;
 i6 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i6 >> 2] = i3;
 STACKTOP = i4;
 return (HEAP32[i5 >> 2] | 0) == (HEAP32[i6 >> 2] | 0) | 0;
}

function _save_file_ff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 768 >> 2] = HEAPU8[HEAP32[i1 + 620 >> 2] >> 0];
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 764 >> 2] = HEAP32[i1 + 600 >> 2];
 STACKTOP = i2;
 return;
}

function _maybe_intro_message() {
 if ((HEAP32[HEAP32[26773] >> 2] | 0) != 1) return;
 if (HEAPU8[(_ml_get(1) | 0) >> 0] | 0 | 0) return;
 if (HEAP32[(HEAP32[26773] | 0) + 76 >> 2] | 0) return;
 if (HEAP32[(HEAP32[26887] | 0) + 12 >> 2] | 0) return;
 if (_vim_strchr(HEAP32[26985] | 0, 73) | 0) return;
 _intro_message(0);
 return;
}

function _appended_lines(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
 _changed_lines(i2 | 0, 0, i2 | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _CancelRedo() {
 if (HEAP32[25628] | 0) return;
 _free_buff(101908);
 HEAP32[25477] = HEAP32[25629];
 HEAP32[25478] = HEAP32[25630];
 HEAP32[25479] = HEAP32[25631];
 HEAP32[25480] = HEAP32[25632];
 HEAP32[25481] = HEAP32[25633];
 HEAP32[25629] = 0;
 _start_stuff();
 do {} while ((_read_readbuffers(1) | 0) != 0);
 return;
}

function _sn_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i6 >>> 0 > i3 >>> 0 ? i3 : i6;
 _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i3 | 0;
}

function _nv_hat(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _buflist_getfile(HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0, 0, 3, 0) | 0;
 STACKTOP = i2;
 return;
}

function _getmark(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _getmark_buf_fnum(HEAP32[26773] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _pstrcmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _pathcmp(HEAP32[HEAP32[i4 >> 2] >> 2] | 0, HEAP32[HEAP32[i5 >> 2] >> 2] | 0, -1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _draw_cmdline(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _msg_outtrans_len((HEAP32[25236] | 0) + (HEAP32[i4 >> 2] | 0) | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _vim_regfree(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) + 4 >> 2] & 255](HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _setvbuf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1 + 75 | 0;
 HEAP8[i4 >> 0] = -1;
 switch (i3 | 0) {
 case 2:
  {
   HEAP32[i1 + 48 >> 2] = 0;
   break;
  }
 case 1:
  {
   HEAP8[i4 >> 0] = 10;
   break;
  }
 default:
  {}
 }
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 64;
 return 0;
}

function _lineinvalid(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _memset((HEAP32[26692] | 0) + (HEAP32[i4 >> 2] << 1) | 0, -1, HEAP32[i5 >> 2] << 1 | 0) | 0;
 STACKTOP = i3;
 return;
}

function _msg_outtrans_len(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _msg_outtrans_len_attr(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _gui_stop_highlight(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) > 255) {
  HEAP32[26646] = 0;
  STACKTOP = i2;
  return;
 } else {
  HEAP32[26646] = HEAP32[26646] & ~HEAP32[i3 >> 2];
  STACKTOP = i2;
  return;
 }
}

function _no_Magic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) < 0) HEAP32[i3 >> 2] = i1 + 256; else HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _redrawcmdline_ex(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26811] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26721] = 0;
 if (HEAP32[i3 >> 2] | 0) _compute_cmdrow();
 _redrawcmd();
 _cursorcmd();
 STACKTOP = i2;
 return;
}

function _may_set_selection() {
 if ((HEAP32[26084] | 0) == 104932 & (HEAP32[27099] | 0) != 0) {
  _clip_own_selection(108396);
  _clip_gen_set_selection(108396);
  return;
 }
 if (!((HEAP32[26084] | 0) == 104932 & (HEAP32[27099] | 0) != 0)) return;
 _clip_own_selection(108396);
 _clip_gen_set_selection(108396);
 return;
}

function _make_snapshot(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _clear_snapshot(HEAP32[26886] | 0, HEAP32[i3 >> 2] | 0);
 _make_snapshot_rec(HEAP32[27114] | 0, (HEAP32[26886] | 0) + 48 + (HEAP32[i3 >> 2] << 2) | 0);
 STACKTOP = i2;
 return;
}

function _nv_hor_scrollbar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 _gui_do_horiz_scroll(HEAP32[27098] | 0, 0) | 0;
 STACKTOP = i2;
 return;
}

function _nv_cursorhold(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _apply_autocmds(28, 0, 0, 0, HEAP32[26773] | 0) | 0;
 HEAP32[26848] = 1;
 i1 = (HEAP32[i3 >> 2] | 0) + 36 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 STACKTOP = i2;
 return;
}

function _term_windgoto(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _out_str(_tgoto(HEAP32[26552] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0);
 STACKTOP = i3;
 return;
}

function _nv_open(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (HEAP32[26788] | 0) {
  _v_swap_corners(HEAP32[i1 + 8 >> 2] | 0);
  STACKTOP = i2;
  return;
 } else {
  _n_opencmd(i1);
  STACKTOP = i2;
  return;
 }
}

function _mf_find_hash(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _mf_hash_find((HEAP32[i4 >> 2] | 0) + 32 | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _mch_fsetperm(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = (_fchmod(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) == 0;
 STACKTOP = i3;
 return (i2 ? 1 : 0) | 0;
}

function _delbuf_msg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _emsg2(43262, (i1 | 0) == 0 ? 114072 : i1 | 0) | 0;
 _vim_free(HEAP32[i3 >> 2] | 0);
 HEAP32[26749] = 0;
 HEAP32[26751] = 0;
 STACKTOP = i2;
 return;
}

function _ui_cursor_shape_forced(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26627] | 0) {
  _gui_update_cursor_later();
  STACKTOP = i2;
  return;
 } else {
  _term_cursor_mode(HEAP32[i3 >> 2] | 0);
  STACKTOP = i2;
  return;
 }
}

function _mch_setperm(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = (_chmod(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) == 0;
 STACKTOP = i3;
 return (i2 ? 1 : 0) | 0;
}

function _readlink(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall85(85, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _ins_char(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2 + 8 | 0;
 i5 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 1;
 HEAP8[i4 >> 0] = HEAP32[i3 >> 2];
 _ins_char_bytes(i4, HEAP32[i5 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _poll(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall168(168, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _ins_s_right() {
 _undisplay_dollar();
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) >= (HEAP32[HEAP32[26773] >> 2] | 0)) if (!(_gchar_cursor() | 0)) {
  _vim_beep(4);
  return;
 }
 _start_arrow((HEAP32[26881] | 0) + 24 | 0);
 _fwd_word(1, 0, 0) | 0;
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 return;
}

function _ui_set_shellsize(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26627] | 0) {
  _gui_set_shellsize(HEAP32[i3 >> 2] | 0, 1, 15);
  STACKTOP = i2;
  return;
 } else {
  _mch_set_shellsize();
  STACKTOP = i2;
  return;
 }
}

function _findmatch(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _findmatchlimit(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _ins_s_left() {
 _undisplay_dollar();
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) <= 1) if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= 0) {
  _vim_beep(4);
  return;
 }
 _start_arrow((HEAP32[26881] | 0) + 24 | 0);
 _bck_word(1, 0, 0) | 0;
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 1;
 return;
}

function _gui_mch_get_winpos(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[HEAP32[i5 >> 2] >> 2] = 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = 0;
 STACKTOP = i3;
 return 1;
}

function _write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall4(4, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _set_string_default(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _set_string_default_esc(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0);
 STACKTOP = i3;
 return;
}

function _mf_hash_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _memset(HEAP32[i3 >> 2] | 0, 0, 272) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = (i1 | 0) + 12;
 HEAP32[HEAP32[i3 >> 2] >> 2] = 63;
 STACKTOP = i2;
 return;
}

function _vim_fexists(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i3 = i2 + 80 | 0;
 i4 = i2 + 76 | 0;
 HEAP32[i4 >> 2] = i1;
 if (_stat(HEAP32[i4 >> 2] | 0, i2) | 0) HEAP32[i3 >> 2] = 0; else HEAP32[i3 >> 2] = 1;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 8 >> 2] = i3;
 i3 = ___syscall_ret(___syscall3(3, i5 | 0) | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _do_Lower(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _tolower(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = i2;
 STACKTOP = i3;
 return 11;
}

function _clear_string_option(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[HEAP32[i3 >> 2] >> 2] | 0) != 114072) _vim_free(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 HEAP32[HEAP32[i3 >> 2] >> 2] = 114072;
 STACKTOP = i2;
 return;
}

function _mch_check_win(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 8 | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 if (_isatty(1) | 0) HEAP32[i4 >> 2] = 1; else HEAP32[i4 >> 2] = 0;
 STACKTOP = i3;
 return HEAP32[i4 >> 2] | 0;
}

function _hash_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _memset(HEAP32[i3 >> 2] | 0, 0, 152) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 20 >> 2] = (i1 | 0) + 24;
 HEAP32[HEAP32[i3 >> 2] >> 2] = 15;
 STACKTOP = i2;
 return;
}

function _ex_equal(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2];
 _smsg(97769, i3) | 0;
 _ex_may_print(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _do_upper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _toupper(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = i2;
 STACKTOP = i3;
 return 0;
}

function _do_lower(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _tolower(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = i2;
 STACKTOP = i3;
 return 0;
}

function _do_Upper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _toupper(HEAP32[i5 >> 2] | 0) | 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = i2;
 STACKTOP = i3;
 return 9;
}

function ___uflow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 if (!(___toread(i1) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 15](i1, i3, 1) | 0) == 1) i4 = HEAPU8[i3 >> 0] | 0; else i4 = -1; else i4 = -1;
 STACKTOP = i2;
 return i4 | 0;
}

function _msg_attr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _msg_attr_keep(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _vim_strsave_up(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = _vim_strsave(HEAP32[i3 >> 2] | 0) | 0;
 _vim_strup(HEAP32[i4 >> 2] | 0);
 STACKTOP = i2;
 return HEAP32[i4 >> 2] | 0;
}

function _do_outofmem_msg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26838] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[26810] = 0;
 HEAP32[26838] = 1;
 _emsgn(60243, HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _mf_rem_hash(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _mf_hash_rem_item((HEAP32[i4 >> 2] | 0) + 32 | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _mf_ins_hash(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _mf_hash_add_item((HEAP32[i4 >> 2] | 0) + 32 | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _compute_cmdrow() {
 var i1 = 0;
 if ((HEAP32[26798] | 0) != 0 | (HEAP32[27044] | 0) != 0) {
  HEAP32[26876] = (HEAP32[10173] | 0) - 1;
  return;
 } else {
  i1 = HEAP32[27112] | 0;
  HEAP32[26876] = (HEAP32[i1 + 84 >> 2] | 0) + (HEAP32[i1 + 88 >> 2] | 0) + (HEAP32[i1 + 92 >> 2] | 0);
  return;
 }
}

function _do_helptags(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _helptags_one(HEAP32[i4 >> 2] | 0, 44327, 78743, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _init_yank() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = 0;
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) >= 38) break;
  HEAP32[104340 + (HEAP32[i2 >> 2] << 4) >> 2] = 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 STACKTOP = i1;
 return;
}

function _gui_set_cursor(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 HEAP32[26636] = HEAP32[i4 >> 2];
 HEAP32[26635] = HEAP32[i5 >> 2];
 STACKTOP = i3;
 return;
}

function _helptags_cb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _do_helptags(HEAP32[i4 >> 2] | 0, HEAP32[HEAP32[i5 >> 2] >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _gui_dont_update_cursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[26627] | 0)) {
  STACKTOP = i2;
  return;
 }
 if (HEAP32[i3 >> 2] | 0) _gui_undraw_cursor();
 HEAP32[8608] = 0;
 STACKTOP = i2;
 return;
}

function _frame_fix_width(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + 4 >> 2] = (HEAP32[i1 + 100 >> 2] | 0) + (HEAP32[i1 + 104 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _frame_fix_height(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + 12 >> 2] = (HEAP32[i1 + 88 >> 2] | 0) + (HEAP32[i1 + 92 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _win_enter(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _win_enter_ext(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0, 0, 1, 1);
 STACKTOP = i3;
 return;
}

function _win_alloc_aucmd_win() {
 HEAP32[27113] = _win_alloc(0, 1) | 0;
 if (!(HEAP32[27113] | 0)) return;
 _win_init_some(HEAP32[27113] | 0, HEAP32[26881] | 0);
 HEAP32[(HEAP32[27113] | 0) + 200 + 24 >> 2] = 0;
 HEAP32[(HEAP32[27113] | 0) + 200 + 40 >> 2] = 0;
 _new_frame(HEAP32[27113] | 0);
 return;
}

function _put_eol(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i4 >> 2] = i1;
 if ((_putc(10, HEAP32[i4 >> 2] | 0) | 0) < 0) HEAP32[i3 >> 2] = 0; else HEAP32[i3 >> 2] = 1;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _msg_puts_attr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _msg_puts_attr_len(HEAP32[i4 >> 2] | 0, -1, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _stuffReadbuffLen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _add_buff(101928, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 STACKTOP = i3;
 return;
}

function _gui_mch_set_scrollbar_thumb(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAP32[i5 + 8 >> 2] = i2;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 STACKTOP = i5;
 return;
}

function _msg_outnum(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 i4 = i2 + 4 | 0;
 i5 = i2 + 8 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 _sprintf(i5, 97769, i3) | 0;
 _msg_puts(i5);
 STACKTOP = i2;
 return;
}

function _nv_mouse(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _do_mouse(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0, -1, HEAP32[i1 + 28 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return;
}

function _ml_get_pos(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _ml_get_buf(HEAP32[26773] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return i1 + (HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0) | 0;
}

function _gui_mch_set_text_area_pos(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i5 + 12 >> 2] = i1;
 HEAP32[i5 + 8 >> 2] = i2;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i5 >> 2] = i4;
 STACKTOP = i5;
 return;
}

function _check_cursor_lnum() {
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > (HEAP32[HEAP32[26773] >> 2] | 0)) HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = HEAP32[HEAP32[26773] >> 2];
 if ((HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0) > 0) return;
 HEAP32[(HEAP32[26881] | 0) + 24 >> 2] = 1;
 return;
}

function _isatty(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = 21523;
 HEAP32[i3 + 8 >> 2] = i2 + 16;
 i1 = (___syscall_ret(___syscall54(54, i3 | 0) | 0) | 0) == 0 & 1;
 STACKTOP = i2;
 return i1 | 0;
}

function _emsg2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 i2 = _emsg3(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _u_clearline() {
 if (!(HEAP32[(HEAP32[26773] | 0) + 540 >> 2] | 0)) return;
 if (HEAP32[(HEAP32[26773] | 0) + 540 >> 2] | 0) {
  _vim_free(HEAP32[(HEAP32[26773] | 0) + 540 >> 2] | 0);
  HEAP32[(HEAP32[26773] | 0) + 540 >> 2] = 0;
 }
 HEAP32[(HEAP32[26773] | 0) + 544 >> 2] = 0;
 return;
}

function _get_indent_lnum(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _ml_get(HEAP32[i3 >> 2] | 0) | 0;
 i3 = _get_indent_str(i1, HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _nv_ver_scrollbar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[HEAP32[HEAP32[i3 >> 2] >> 2] >> 2] | 0) _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 _gui_do_scroll() | 0;
 STACKTOP = i2;
 return;
}

function _gui_mch_draw_hollow_cursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _gui_mch_set_fg_color(HEAP32[i3 >> 2] | 0);
 _vimwasm_draw_hollow_cursor(HEAP32[26636] | 0, HEAP32[26635] | 0);
 STACKTOP = i2;
 return;
}

function _ex_mapclear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _map_clear(HEAP32[i1 + 8 >> 2] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _a_ctz_l_733(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i1) i2 = 32; else if (!(i1 & 1)) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i4 = i1 + 1 | 0;
   if (!(i3 & 2)) {
    i3 = i3 >>> 1;
    i1 = i4;
   } else {
    i2 = i4;
    break;
   }
  }
 } else i2 = 0;
 return i2 | 0;
}

function _ex_pwd(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 if ((_mch_dirname(HEAP32[26885] | 0, 4096) | 0) == 1) {
  _msg(HEAP32[26885] | 0) | 0;
  STACKTOP = i2;
  return;
 } else {
  _emsg(50552) | 0;
  STACKTOP = i2;
  return;
 }
}

function _stoptermcap() {
 _screen_stop_highlight();
 _reset_cterm_colors();
 if (!(HEAP32[26835] | 0)) return;
 _out_str(HEAP32[26593] | 0);
 _out_str(HEAP32[26557] | 0);
 _out_flush();
 HEAP32[26835] = 0;
 _cursor_on();
 _out_str(HEAP32[26559] | 0);
 _screen_start();
 _out_flush();
 return;
}

function _gui_set_fg_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26675] = _gui_get_color(HEAP32[i3 >> 2] | 0) | 0;
 _hl_set_fg_color_name(_vim_strsave(HEAP32[i3 >> 2] | 0) | 0);
 STACKTOP = i2;
 return;
}

function _gui_set_bg_color(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26674] = _gui_get_color(HEAP32[i3 >> 2] | 0) | 0;
 _hl_set_bg_color_name(_vim_strsave(HEAP32[i3 >> 2] | 0) | 0);
 STACKTOP = i2;
 return;
}

function _ex_ni(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = 46558;
 STACKTOP = i2;
 return;
}

function _clear_oparg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = i1 + 84 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 STACKTOP = i2;
 return;
}

function _vungetc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[2733] = HEAP32[i3 >> 2];
 HEAP32[25637] = HEAP32[26698];
 HEAP32[25897] = HEAP32[27095];
 HEAP32[25898] = HEAP32[27096];
 STACKTOP = i2;
 return;
}

function _vim_setenv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _setenv(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 1) | 0;
 STACKTOP = i3;
 return;
}

function _sort_strings(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _qsort(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, 4, 6);
 STACKTOP = i3;
 return;
}

function _shell_new_columns() {
 if (!(HEAP32[26887] | 0)) return;
 _frame_new_width(HEAP32[27114] | 0, HEAP32[10174] | 0, 0, 1);
 if (!(_frame_check_width(HEAP32[27114] | 0, HEAP32[10174] | 0) | 0)) _frame_new_width(HEAP32[27114] | 0, HEAP32[10174] | 0, 0, 0);
 _win_comp_pos() | 0;
 return;
}

function _ex_version(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAPU8[HEAP32[HEAP32[i3 >> 2] >> 2] >> 0] | 0 | 0) {
  STACKTOP = i2;
  return;
 }
 _msg_putchar(10);
 _list_version();
 STACKTOP = i2;
 return;
}

function _setlocale_one_unlocked(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i2) i3 = HEAP32[109488 + (i1 << 2) >> 2] | 0; else {
  i4 = ___get_locale(i1, i2) | 0;
  HEAP32[109488 + (i1 << 2) >> 2] = i4;
  i3 = i4;
 }
 return ((i3 | 0) == 0 ? 100615 : i3 + 8 | 0) | 0;
}

function _ga_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[HEAP32[i3 >> 2] >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _setmark(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _setmark_pos(HEAP32[i3 >> 2] | 0, (HEAP32[26881] | 0) + 24 | 0, HEAP32[(HEAP32[26773] | 0) + 92 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _time_differs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 STACKTOP = i3;
 return (HEAP32[i4 >> 2] | 0) != (HEAP32[i5 >> 2] | 0) | 0;
}

function _check_string_option(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[HEAP32[i3 >> 2] >> 2] | 0) {
  STACKTOP = i2;
  return;
 }
 HEAP32[HEAP32[i3 >> 2] >> 2] = 114072;
 STACKTOP = i2;
 return;
}

function _vim_free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == 0 | (HEAP32[26779] | 0) != 0) {
  STACKTOP = i2;
  return;
 }
 _free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _nv_exmode(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[26788] | 0) _vim_beep(256); else if (!(_checkclearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0)) _do_exmode(0);
 STACKTOP = i2;
 return;
}

function _gui_check_colors() {
 if (!((HEAP32[26675] | 0) == -11111 ? 1 : (HEAP32[26675] | 0) == (HEAP32[26674] | 0))) return;
 _gui_set_bg_color(84440);
 if (!((HEAP32[26675] | 0) == -11111 ? 1 : (HEAP32[26675] | 0) == (HEAP32[26674] | 0))) return;
 _gui_set_fg_color(84446);
 return;
}

function _win_comp_pos() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1 + 4 | 0;
 i3 = i1;
 HEAP32[i2 >> 2] = _tabline_height() | 0;
 HEAP32[i3 >> 2] = 0;
 _frame_comp_pos(HEAP32[27114] | 0, i2, i3);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _reset_updating_screen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26758] = 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _gui_may_resize_shell();
 STACKTOP = i2;
 return;
}

function _nv_suspend(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _clearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 if (HEAP32[26788] | 0) _end_visual_mode();
 _do_cmdline_cmd(69269) | 0;
 STACKTOP = i2;
 return;
}

function _iemsgn(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _emsgn(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _iemsg2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 i5 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = i2;
 _emsg2(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _scroll_region_reset() {
 _out_str(_tgoto(HEAP32[26525] | 0, (HEAP32[10173] | 0) - 1 | 0, 0) | 0);
 if (!(HEAPU8[HEAP32[26587] >> 0] | 0)) {
  _screen_start();
  return;
 }
 _out_str(_tgoto(HEAP32[26587] | 0, (HEAP32[10174] | 0) - 1 | 0, 0) | 0);
 _screen_start();
 return;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i1 = i3;
 i3 = ___muldsi3(i5, i1) | 0;
 i6 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i1) | 0) + (Math_imul(i4, i5) | 0) + i6 | i6 & 0, i3 | 0 | 0) | 0;
}

function _typebuf_changed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[i3 >> 2] | 0) i4 = (HEAP32[26825] | 0) != (HEAP32[i3 >> 2] | 0); else i4 = 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _reset_cterm_colors() {
 if ((HEAP32[26734] | 0) <= 1) return;
 if ((HEAP32[26741] | 0) > 0 | (HEAP32[26743] | 0) > 0) {
  _out_str(HEAP32[26588] | 0);
  HEAP32[26455] = -1;
 }
 if (!(HEAP32[26742] | 0)) return;
 _out_str(HEAP32[26538] | 0);
 HEAP32[26455] = -1;
 return;
}

function _out_flush() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (!(HEAP32[26596] | 0)) {
  STACKTOP = i1;
  return;
 }
 HEAP32[i2 >> 2] = HEAP32[26596];
 HEAP32[26596] = 0;
 _ui_write(111117, HEAP32[i2 >> 2] | 0);
 STACKTOP = i1;
 return;
}

function _bt_help(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[i3 >> 2] | 0) i4 = (HEAP32[(HEAP32[i3 >> 2] | 0) + 780 >> 2] | 0) != 0; else i4 = 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _AppendNumberToRedobuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[25628] | 0) {
  STACKTOP = i2;
  return;
 }
 _add_num_buff(101908, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _mf_set_ffname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _FullName_save(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 0) | 0;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _mch_call_shell(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 i2 = _vimwasm_call_shell(HEAP32[i4 >> 2] | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _list1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 4 | 0;
 i4 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[HEAP32[i4 >> 2] >> 2] = 0;
 STACKTOP = i2;
 return HEAP32[i4 >> 2] | 0;
}

function _gotocmdline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _msg_start();
 HEAP32[27043] = 0;
 if (HEAP32[i3 >> 2] | 0) _msg_clr_eos();
 _windgoto(HEAP32[26876] | 0, 0);
 STACKTOP = i2;
 return;
}

function _AppendCharToRedobuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[25628] | 0) {
  STACKTOP = i2;
  return;
 }
 _add_char_buff(101908, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _u_unchanged(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _u_unch_branch(HEAP32[(HEAP32[i3 >> 2] | 0) + 500 >> 2] | 0);
 HEAP32[(HEAP32[i3 >> 2] | 0) + 776 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _free_string_option(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if ((HEAP32[i3 >> 2] | 0) == 114072) {
  STACKTOP = i2;
  return;
 }
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _char_avail() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[26802] = (HEAP32[26802] | 0) + 1;
 HEAP32[i2 >> 2] = _vpeekc() | 0;
 HEAP32[26802] = (HEAP32[26802] | 0) + -1;
 STACKTOP = i1;
 return (HEAP32[i2 >> 2] | 0) != 0 | 0;
}

function _set_signals() {
 _signal(28, 204) | 0;
 _signal(20, (HEAP32[26782] | 0 ? 1 : 0) | 0) | 0;
 _signal(13, 1) | 0;
 _catch_int_signal();
 _signal(14, 1) | 0;
 _signal(30, 205) | 0;
 _catch_signals(206, -1);
 if (!(HEAP32[26627] | 0)) return;
 _signal(1, 1) | 0;
 return;
}

function _nv_clear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearop(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _redraw_later(50);
 STACKTOP = i2;
 return;
}

function _curbuf_locked() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[26785] | 0) > 0) {
  _emsg(51923) | 0;
  HEAP32[i2 >> 2] = 1;
 } else HEAP32[i2 >> 2] = _allbuf_locked() | 0;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _check_fname() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (!(HEAP32[(HEAP32[26773] | 0) + 68 >> 2] | 0)) {
  _emsg(93065) | 0;
  HEAP32[i2 >> 2] = 0;
 } else HEAP32[i2 >> 2] = 1;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _AppendToRedobuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (HEAP32[25628] | 0) {
  STACKTOP = i2;
  return;
 }
 _add_buff(101908, HEAP32[i3 >> 2] | 0, -1);
 STACKTOP = i2;
 return;
}

function dynCall_iiiiiiii(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 return FUNCTION_TABLE_iiiiiiii[i1 & 3](i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0) | 0;
}

function ___munmap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall91(91, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _lstat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall196(196, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _check_win_options(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _check_winopt((HEAP32[i3 >> 2] | 0) + 200 | 0);
 _check_winopt((HEAP32[i3 >> 2] | 0) + 248 | 0);
 STACKTOP = i2;
 return;
}

function _ui_char_avail() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26627] | 0) {
  _gui_mch_update();
  HEAP32[i2 >> 2] = _input_available() | 0;
 } else HEAP32[i2 >> 2] = 0;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _stat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall195(195, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _rename(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall38(38, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _access(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall33(33, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _mkdir(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall39(39, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = _dummy_569(i1) | 0;
 i1 = ___syscall6(6, i3 | 0) | 0;
 i3 = ___syscall_ret((i1 | 0) == -4 ? 0 : i1) | 0;
 STACKTOP = i2;
 return i3 | 0;
}

function _chmod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall15(15, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _ResetRedobuff() {
 if (HEAP32[25628] | 0) return;
 _free_buff(102516);
 HEAP32[25629] = HEAP32[25477];
 HEAP32[25630] = HEAP32[25478];
 HEAP32[25631] = HEAP32[25479];
 HEAP32[25632] = HEAP32[25480];
 HEAP32[25633] = HEAP32[25481];
 HEAP32[25477] = 0;
 return;
}

function _nv_help(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (_checkclearopq(HEAP32[HEAP32[i3 >> 2] >> 2] | 0) | 0) {
  STACKTOP = i2;
  return;
 }
 _ex_help(0);
 STACKTOP = i2;
 return;
}

function _check_secure() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26783] | 0) {
  HEAP32[26783] = 2;
  _emsg(92223) | 0;
  HEAP32[i2 >> 2] = 1;
 } else HEAP32[i2 >> 2] = 0;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = _dummy_569(HEAP32[i1 + 60 >> 2] | 0) | 0;
 i1 = ___syscall_ret(___syscall6(6, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _ex_bang(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _do_bang(HEAP32[i1 + 32 >> 2] | 0, i1 | 0, HEAP32[i1 + 28 >> 2] | 0, 1, 1);
 STACKTOP = i2;
 return;
}

function ___ftello(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  i3 = ___ftello_unlocked(i1) | 0;
  if (i2) i4 = i3; else i4 = i3;
 } else i4 = ___ftello_unlocked(i1) | 0;
 return i4 | 0;
}

function _get_last_insert() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (!(HEAP32[25208] | 0)) HEAP32[i2 >> 2] = 0; else HEAP32[i2 >> 2] = (HEAP32[25208] | 0) + (HEAP32[25209] | 0);
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _ex_update(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(_curbufIsChanged() | 0)) {
  STACKTOP = i2;
  return;
 }
 _do_write(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _ex_last(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _do_argfile(HEAP32[i3 >> 2] | 0, (HEAP32[HEAP32[(HEAP32[26881] | 0) + 184 >> 2] >> 2] | 0) - 1 | 0);
 STACKTOP = i2;
 return;
}

function _start_global_changes() {
 var i1 = 0;
 i1 = (HEAP32[26614] | 0) + 1 | 0;
 HEAP32[26614] = i1;
 if ((i1 | 0) > 1) return;
 HEAP32[26767] = HEAP32[26762];
 HEAP32[26613] = 0;
 if (!(HEAP32[8292] | 0)) return;
 HEAP32[26762] = 0;
 HEAP32[8292] = 0;
 return;
}

function _source_callback(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 _do_source(HEAP32[i4 >> 2] | 0, 0, 0) | 0;
 STACKTOP = i3;
 return;
}

function _ex_tag(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 _ex_tag_cmd(i1 | 0, HEAP32[1336 + (HEAP32[i1 + 16 >> 2] << 4) >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ex_preserve(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 i1 = (HEAP32[26773] | 0) + 60 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 256;
 _ml_preserve(HEAP32[26773] | 0, 1);
 STACKTOP = i2;
 return;
}

function _changed_cline_bef_curs_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[i3 >> 2] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -144;
 STACKTOP = i2;
 return;
}

function _ex_abclear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _map_clear(HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0, HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 1, 1);
 STACKTOP = i2;
 return;
}

function _changed_line_abv_curs_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[i3 >> 2] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -160;
 STACKTOP = i2;
 return;
}

function _gui_mch_stop_blink(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(HEAP32[i3 >> 2] | 0)) {
  STACKTOP = i2;
  return;
 }
 _gui_update_cursor(1, 0);
 STACKTOP = i2;
 return;
}

function _gui_bg_default() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((_gui_get_lightness(HEAP32[26674] | 0) | 0) < 127) HEAP32[i2 >> 2] = 76755; else HEAP32[i2 >> 2] = 76760;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _u_redo(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (!(_vim_strchr(HEAP32[26904] | 0, 117) | 0)) HEAP32[26622] = 0;
 _u_doit(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _term_is_8bit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 if (0) i4 = 1; else i4 = (_strstr(HEAP32[i3 >> 2] | 0, 78981) | 0) != 0;
 STACKTOP = i2;
 return i4 & 1 | 0;
}

function _init_gui_options() {
 var i1 = 0;
 if (_option_was_set(76683) | 0) return;
 i1 = HEAP32[26893] | 0;
 if (!(_strcmp(i1, _gui_bg_default() | 0) | 0)) return;
 _set_option_value(76683, 0, _gui_bg_default() | 0, 0) | 0;
 _highlight_changed() | 0;
 return;
}

function _approximate_botline_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[i3 >> 2] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -33;
 STACKTOP = i2;
 return;
}

function _invalidate_botline_win(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[i3 >> 2] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -97;
 STACKTOP = i2;
 return;
}

function _ignorecase(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _ignorecase_opt(HEAP32[i3 >> 2] | 0, HEAP32[26933] | 0, HEAP32[26991] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _vim_deltempdir() {
 if (!(HEAP32[26777] | 0)) return;
 HEAP8[(_gettail(HEAP32[26777] | 0) | 0) + -1 >> 0] = 0;
 _delete_recursive(HEAP32[26777] | 0) | 0;
 if (!(HEAP32[26777] | 0)) return;
 _vim_free(HEAP32[26777] | 0);
 HEAP32[26777] = 0;
 return;
}

function _mf_free_bhdr(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] | 0);
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _verbose_leave_scroll() {
 var i1 = 0;
 if (HEAPU8[HEAP32[3827] >> 0] | 0 | 0) {
  i1 = (HEAP32[26809] | 0) + -1 | 0;
  HEAP32[26809] = i1;
  HEAP32[26809] = (i1 | 0) < 0 ? 0 : i1;
  return;
 } else {
  HEAP32[26876] = HEAP32[26877];
  return;
 }
}

function _update_curbuf(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _redraw_curbuf_later(HEAP32[i3 >> 2] | 0);
 _update_screen(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _st_error(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 + 8 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 _emsg(73024) | 0;
 STACKTOP = i4;
 return;
}

function _pntz(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = _a_ctz_l_733((HEAP32[i1 >> 2] | 0) + -1 | 0) | 0;
 if (!i2) {
  i3 = _a_ctz_l_733(HEAP32[i1 + 4 >> 2] | 0) | 0;
  return ((i3 | 0) == 0 ? 0 : i3 + 32 | 0) | 0;
 } else return i2 | 0;
 return 0;
}

function _adjust_cursor_eol() {
 var i1 = 0;
 if ((HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) <= 0) return;
 i1 = (_gchar_cursor() | 0) != 0;
 if (i1 | (HEAP32[26806] | 0) != 0) return;
 if (HEAP32[10180] & 16 | 0) return;
 _dec_cursor() | 0;
 return;
}

function _allbuf_locked() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[26786] | 0) > 0) {
  _emsg(51968) | 0;
  HEAP32[i2 >> 2] = 1;
 } else HEAP32[i2 >> 2] = 0;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _ga_clear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _vim_free(HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] | 0);
 _ga_init(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _gui_mch_haskey(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (_vimwasm_is_supported_key(HEAP32[i3 >> 2] | 0) | 0) != 0;
 STACKTOP = i2;
 return (i1 ? 1 : 0) | 0;
}

function _get_sts_value() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[26773] | 0;
 if ((HEAP32[(HEAP32[26773] | 0) + 688 >> 2] | 0) < 0) {
  i2 = _get_sw_value(i1) | 0;
  return i2 | 0;
 } else {
  i2 = HEAP32[i1 + 688 >> 2] | 0;
  return i2 | 0;
 }
 return 0;
}

function _unputcmdline() {
 if (HEAP32[26811] | 0) return;
 HEAP32[26730] = 1;
 if ((HEAP32[25238] | 0) == (HEAP32[25239] | 0)) _msg_putchar(32); else _draw_cmdline(HEAP32[25239] | 0, 1);
 HEAP32[26730] = 0;
 _cursorcmd();
 HEAP32[25248] = 0;
 return;
}

function _syn_unadd_group() {
 HEAP32[26486] = (HEAP32[26486] | 0) + -1;
 _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[26486] | 0) * 96 | 0) >> 2] | 0);
 _vim_free(HEAP32[(HEAP32[26490] | 0) + ((HEAP32[26486] | 0) * 96 | 0) + 4 >> 2] | 0);
 return;
}

function _check_restricted() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[26782] | 0) {
  _emsg(42976) | 0;
  HEAP32[i2 >> 2] = 1;
 } else HEAP32[i2 >> 2] = 0;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _free_typebuf() {
 if ((HEAP32[26817] | 0) == 110540) _internal_error(56096); else _vim_free(HEAP32[26817] | 0);
 if ((HEAP32[26818] | 0) == 110805) {
  _internal_error(56111);
  return;
 } else {
  _vim_free(HEAP32[26818] | 0);
  return;
 }
}

function _cmdline_charsize(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _ptr2cells((HEAP32[25236] | 0) + (HEAP32[i3 >> 2] | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function ___ofl_add(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = ___ofl_lock() | 0;
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 >> 2];
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) HEAP32[i3 + 52 >> 2] = i1;
 HEAP32[i2 >> 2] = i1;
 ___ofl_unlock();
 return i1 | 0;
}

function _vpeekc() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if ((HEAP32[2733] | 0) != -1) HEAP32[i2 >> 2] = HEAP32[2733]; else HEAP32[i2 >> 2] = _vgetorpeek(0) | 0;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _safe_vgetc() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = _vgetc() | 0;
 if (!(HEAP32[i2 >> 2] | 0)) HEAP32[i2 >> 2] = _get_keystroke() | 0;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _update_curswant() {
 var i1 = 0;
 if (!(HEAP32[(HEAP32[26881] | 0) + 36 >> 2] | 0)) return;
 _validate_virtcol();
 i1 = HEAP32[26881] | 0;
 HEAP32[i1 + 32 >> 2] = HEAP32[i1 + 132 >> 2];
 HEAP32[(HEAP32[26881] | 0) + 36 >> 2] = 0;
 return;
}

function _gui_mch_set_blinking(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 + 8 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 STACKTOP = i4;
 return;
}

function _buflist_findlnum(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[(_buflist_findfpos(HEAP32[i3 >> 2] | 0) | 0) >> 2] | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i2 - i4 | 0;
 i4 = (i5 | 0) >>> 0;
 i4 = (i5 | 0) - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i1 - i3 >>> 0 | 0) | 0;
}

function _gui_exit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _free_highlight_fonts();
 HEAP32[26627] = 0;
 _gui_mch_exit(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _not_writing() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (HEAP32[27039] | 0) HEAP32[i2 >> 2] = 0; else {
  _emsg(43145) | 0;
  HEAP32[i2 >> 2] = 1;
 }
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _gui_wait_for_chars_or_timer(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _gui_mch_wait_for_chars(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _ungetchr() {
 HEAP32[26399] = HEAP32[26398];
 HEAP32[26398] = HEAP32[26396];
 HEAP32[26396] = HEAP32[26397];
 HEAP32[26394] = HEAP32[26395];
 HEAP32[26395] = 0;
 HEAP32[26392] = (HEAP32[26392] | 0) + (0 - (HEAP32[26393] | 0));
 return;
}

function _tcgetattr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = ((_ioctl(i1, 21505, i4) | 0) != 0) << 31 >> 31;
 STACKTOP = i3;
 return i2 | 0;
}

function _starttermcap() {
 if ((HEAP32[26781] | 0) == 0 | (HEAP32[26835] | 0) != 0) return;
 _out_str(HEAP32[26558] | 0);
 _out_str(HEAP32[26556] | 0);
 _out_str(HEAP32[26592] | 0);
 _out_flush();
 HEAP32[26835] = 1;
 _screen_start();
 return;
}

function _nv_ignore(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (HEAP32[i3 >> 2] | 0) + 36 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 STACKTOP = i2;
 return;
}

function _vim_iswordp(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _vim_iswordp_buf(HEAP32[i3 >> 2] | 0, HEAP32[26773] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _vim_iswordc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _vim_iswordc_buf(HEAP32[i3 >> 2] | 0, HEAP32[26773] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _getwhitecols(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _skipwhite(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 - (HEAP32[i3 >> 2] | 0) | 0;
}

function _vim_isbdigit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 return ((i2 | 0) == 48 ? 1 : (i2 | 0) == 49) & 1 | 0;
}

function _set_file_time(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 + 8 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 >> 2] = i3;
 STACKTOP = i4;
 return;
}

function _otherfile(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _otherfile_buf(HEAP32[26773] | 0, HEAP32[i3 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _clip_gen_own_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _clip_mch_own_selection(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _vim_isdigit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 return ((i2 | 0) >= 48 ? (i2 | 0) <= 57 : 0) & 1 | 0;
}

function _term_is_builtin(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (_strncmp(HEAP32[i3 >> 2] | 0, 80420, 8) | 0) == 0 & 1;
 STACKTOP = i2;
 return i1 | 0;
}

function _prepare_to_exit() {
 _signal(1, 1) | 0;
 if (HEAP32[26627] | 0) {
  HEAP32[26630] = 1;
  _out_trash();
  return;
 } else {
  _windgoto((HEAP32[10173] | 0) - 1 | 0, 0);
  _settmode(0);
  _stoptermcap();
  _out_flush();
  return;
 }
}

function _gui_may_update_scrollbars() {
 if (!((HEAP32[26627] | 0) != 0 & (HEAP32[10177] | 0) == 0)) {
  HEAP32[26757] = 1;
  return;
 }
 _out_flush();
 _gui_init_which_components(0);
 _gui_update_scrollbars(1);
 HEAP32[26757] = 1;
 return;
}

function _term_delete_lines(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _out_str(_tgoto(HEAP32[26524] | 0, 0, HEAP32[i3 >> 2] | 0) | 0);
 STACKTOP = i2;
 return;
}

function _term_cursor_right(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _out_str(_tgoto(HEAP32[26554] | 0, 0, HEAP32[i3 >> 2] | 0) | 0);
 STACKTOP = i2;
 return;
}

function _term_append_lines(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _out_str(_tgoto(HEAP32[26522] | 0, 0, HEAP32[i3 >> 2] | 0) | 0);
 STACKTOP = i2;
 return;
}

function _sprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _fprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vfprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _check_ff_value(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _check_opt_strings(HEAP32[i3 >> 2] | 0, 29268, 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _mch_input_isatty() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 if (_isatty(HEAP32[26833] | 0) | 0) HEAP32[i2 >> 2] = 1; else HEAP32[i2 >> 2] = 0;
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _ptr2cells(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return (HEAPU8[113724 + (HEAPU8[HEAP32[i3 >> 2] >> 0] | 0) >> 0] | 0) & 7 | 0;
}

function _edit_unputchar() {
 if (!(HEAP32[25211] | 0)) return;
 if ((HEAP32[25212] | 0) < (HEAP32[27044] | 0)) return;
 _screen_puts(110538, (HEAP32[25212] | 0) - (HEAP32[27044] | 0) | 0, HEAP32[25213] | 0, HEAP32[25214] | 0);
 return;
}

function _redraw_curbuf_later(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _redraw_buf_later(HEAP32[26773] | 0, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _printf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = _vfprintf(HEAP32[10243] | 0, i1, i4) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _plines(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _plines_win(HEAP32[26881] | 0, HEAP32[i3 >> 2] | 0, 1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _ml_get(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _ml_get_buf(HEAP32[26773] | 0, HEAP32[i3 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _expand_env_save(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _expand_env_save_opt(HEAP32[i3 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _ex_source(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _cmd_source(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _au_has_group(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = (_au_find_group(HEAP32[i3 >> 2] | 0) | 0) != -2 & 1;
 STACKTOP = i2;
 return i1 | 0;
}

function _screen_valid(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _screenalloc(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return (HEAP32[26691] | 0) != 0 | 0;
}

function _get_extra_op_char(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP8[62104 + ((HEAP32[i3 >> 2] | 0) * 3 | 0) + 1 >> 0] | 0;
}

function _clip_gen_request_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _clip_mch_request_selection(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _vim_strsize(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _vim_strnsize(HEAP32[i3 >> 2] | 0, 2147483647) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _u_save_line(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _vim_strsave(_ml_get(HEAP32[i3 >> 2] | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _vim_ispathsep_nocolon(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _vim_ispathsep(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _set_mouse_topline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[26605] = HEAP32[(HEAP32[i3 >> 2] | 0) + 68 >> 2];
 STACKTOP = i2;
 return;
}

function _op_on_lines(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP8[62104 + ((HEAP32[i3 >> 2] | 0) * 3 | 0) + 2 >> 0] & 1 | 0;
}

function _do_cmdline_cmd(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _do_cmdline(HEAP32[i3 >> 2] | 0, 0, 0, 11) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _win_setheight(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _win_setheight_win(HEAP32[i3 >> 2] | 0, HEAP32[26881] | 0);
 STACKTOP = i2;
 return;
}

function _bitshift64Shl(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 << i3 | (i1 & (1 << i3) - 1 << 32 - i3) >>> 32 - i3;
  return i1 << i3;
 }
 tempRet0 = i1 << i3 - 32;
 return 0;
}

function _msg_outtrans(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _msg_outtrans_attr(HEAP32[i3 >> 2] | 0, 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _win_setwidth(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _win_setwidth_win(HEAP32[i3 >> 2] | 0, HEAP32[26881] | 0);
 STACKTOP = i2;
 return;
}

function _redraw_later(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _redraw_win_later(HEAP32[26881] | 0, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _bufIsChanged(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _bufIsChangedNotTerm(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _msg_puts_title(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _msg_puts_attr(HEAP32[i3 >> 2] | 0, HEAP32[27064] | 0);
 STACKTOP = i2;
 return;
}

function _uname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall122(122, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _linetabsize(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _linetabsize_col(0, HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _fsync(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall118(118, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _bitshift64Lshr(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) < 32) {
  tempRet0 = i2 >>> i3;
  return i1 >>> i3 | (i2 & (1 << i3) - 1) << 32 - i3;
 }
 tempRet0 = 0;
 return i2 >>> i3 - 32 | 0;
}

function _unlink(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall10(10, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _umask(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall60(60, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _rmdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall40(40, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _emsg_invreg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _emsg2(97678, _transchar(HEAP32[i3 >> 2] | 0) | 0) | 0;
 STACKTOP = i2;
 return;
}

function _chdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall12(12, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _byte2cells(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return (HEAPU8[113724 + (HEAP32[i3 >> 2] | 0) >> 0] | 0) & 7 | 0;
}

function _get_op_char(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP8[62104 + ((HEAP32[i3 >> 2] | 0) * 3 | 0) >> 0] | 0;
}

function _fix_fname(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _FullName_save(HEAP32[i3 >> 2] | 0, 1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _ex_wrongmodifier(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[(HEAP32[i3 >> 2] | 0) + 88 >> 2] = 92522;
 STACKTOP = i2;
 return;
}

function _dup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = ___syscall_ret(___syscall41(41, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _msg_home_replace(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _msg_home_replace_attr(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _del_char(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _del_bytes(1, HEAP32[i3 >> 2] | 0, 1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _stuffcharReadbuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _add_char_buff(101928, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _msg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _msg_attr_keep(HEAP32[i3 >> 2] | 0, 0, 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _stuffRedoReadbuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _add_buff(101948, HEAP32[i3 >> 2] | 0, -1);
 STACKTOP = i2;
 return;
}

function _stuffnumReadbuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _add_num_buff(101928, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _alloc_check(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _lalloc(HEAP32[i3 >> 2] | 0, 1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _vim_chdir(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _mch_chdir(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _update_topline_cursor() {
 _check_cursor();
 _update_topline();
 if (HEAP32[(HEAP32[26881] | 0) + 200 + 36 >> 2] | 0) {
  _update_curswant();
  return;
 }
 _validate_cursor();
 _update_curswant();
 return;
}

function _re_multiline(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] & 4 | 0;
}

function _clearopbeep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _clearop(HEAP32[i3 >> 2] | 0);
 _beep_flush();
 STACKTOP = i2;
 return;
}

function _stuffReadbuff(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _add_buff(101928, HEAP32[i3 >> 2] | 0, -1);
 STACKTOP = i2;
 return;
}

function _nv_pcmark(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _gui_mch_exit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _vimwasm_will_exit(HEAP32[i3 >> 2] | 0);
 _exit(HEAP32[i3 >> 2] | 0);
}

function _clip_isautosel_star() {
 var i1 = 0;
 if (HEAP32[26627] | 0) {
  i1 = (_vim_strchr(HEAP32[26926] | 0, 97) | 0) != 0 & 1;
  return i1 | 0;
 } else {
  i1 = HEAP32[26763] | 0;
  return i1 | 0;
 }
 return 0;
}

function _clip_isautosel_plus() {
 var i1 = 0;
 if (HEAP32[26627] | 0) {
  i1 = (_vim_strchr(HEAP32[26926] | 0, 80) | 0) != 0 & 1;
  return i1 | 0;
 } else {
  i1 = HEAP32[26764] | 0;
  return i1 | 0;
 }
 return 0;
}

function _start_arrow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _start_arrow_common(HEAP32[i3 >> 2] | 0, 1);
 STACKTOP = i2;
 return;
}

function _nv_error(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _clearopbeep(HEAP32[HEAP32[i3 >> 2] >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _mch_get_acl(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i2 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = 0;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _gui_mch_set_font(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _vimwasm_set_font(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _set_arglist(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _do_arglist(HEAP32[i3 >> 2] | 0, 1, 0) | 0;
 STACKTOP = i2;
 return;
}

function _version_msg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _version_msg_wrap(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _msg_putchar(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _msg_putchar_attr(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _limit_screen_size() {
 if ((HEAP32[10174] | 0) < 12) HEAP32[10174] = 12; else if ((HEAP32[10174] | 0) > 1e4) HEAP32[10174] = 1e4;
 if ((HEAP32[10173] | 0) <= 1e3) return;
 HEAP32[10173] = 1e3;
 return;
}

function _alloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 i1 = _lalloc(HEAP32[i3 >> 2] | 0, 1) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _set_csearch_direction(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[7530] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return;
}

function _mainerr_arg_missing(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _mainerr(2, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function ___lctrans_impl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i2) i3 = 0; else i3 = ___mo_lookup(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, i1) | 0;
 return ((i3 | 0) == 0 ? i1 : i3) | 0;
}

function _scroll_start() {
 if (!(HEAPU8[HEAP32[26533] >> 0] | 0)) return;
 if (!(HEAPU8[HEAP32[26534] >> 0] | 0)) return;
 _out_str(HEAP32[26533] | 0);
 _out_str(HEAP32[26534] | 0);
 _screen_start();
 return;
}

function _ml_timestamp(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _ml_upd_block0(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _gui_attempt_start() {
 HEAP32[26679] = (HEAP32[26679] | 0) + 1;
 HEAP32[26628] = 1;
 _termcapinit(84250);
 HEAP32[26628] = (HEAP32[26679] | 0) - 1;
 HEAP32[26679] = (HEAP32[26679] | 0) + -1;
 return;
}

function _internal_error(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _iemsg2(92395, HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _typeahead_noflush(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[25492] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return;
}

function _gui_mch_enable_scrollbar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _gui_mch_create_scrollbar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _set_csearch_until(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 HEAP32[7531] = HEAP32[i3 >> 2];
 STACKTOP = i2;
 return;
}

function _gui_mch_free_font(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _ex_stopinsert(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 HEAP32[26806] = 0;
 HEAP32[27160] = 1;
 _clearmode();
 STACKTOP = i2;
 return;
}

function _msg_puts(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _msg_puts_attr(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _ex_abbreviate(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _do_exmap(HEAP32[i3 >> 2] | 0, 1);
 STACKTOP = i2;
 return;
}

function _alist_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _ga_init2(HEAP32[i3 >> 2] | 0, 8, 5);
 STACKTOP = i2;
 return;
}

function _abandon_cmdline() {
 if (HEAP32[25236] | 0) {
  _vim_free(HEAP32[25236] | 0);
  HEAP32[25236] = 0;
 }
 if (!(HEAP32[27044] | 0)) _compute_cmdrow();
 _msg(114072) | 0;
 HEAP32[26699] = 1;
 return;
}

function ___strdup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = (_strlen(i1) | 0) + 1 | 0;
 i3 = _malloc(i2) | 0;
 if (!i3) i4 = 0; else i4 = _memcpy(i3 | 0, i1 | 0, i2 | 0) | 0;
 return i4 | 0;
}

function _ui_new_shellsize() {
 if ((HEAP32[26781] | 0) == 0 | (HEAP32[26778] | 0) != 0) return;
 if (HEAP32[26627] | 0) {
  _gui_new_shellsize();
  return;
 } else {
  _mch_new_shellsize();
  return;
 }
}

function _swapping_screen() {
 var i1 = 0, i2 = 0;
 if (!(HEAP32[26781] | 0)) {
  i1 = 0;
  i2 = i1 & 1;
  return i2 | 0;
 }
 i1 = (HEAPU8[HEAP32[26558] >> 0] | 0 | 0) != 0;
 i2 = i1 & 1;
 return i2 | 0;
}

function _ex_rewind(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _do_argfile(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _vim_ispathsep(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return (HEAP32[i3 >> 2] | 0) == 47 | 0;
}

function _gui_mch_set_winpos(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _ex_intro(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _screenclear();
 _intro_message(1);
 _wait_return(1);
 STACKTOP = i2;
 return;
}

function _init_typebuf() {
 if (HEAP32[26817] | 0) return;
 HEAP32[26817] = 110540;
 HEAP32[26818] = 110805;
 HEAP32[26819] = 265;
 HEAP32[26821] = 0;
 HEAP32[26820] = 54;
 HEAP32[26825] = 1;
 return;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i5 >>> 0 < i1 >>> 0 | 0) >>> 0, i5 | 0) | 0;
}

function _ex_unmap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _do_exmap(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _ex_find(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _do_exedit(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _ex_edit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _do_exedit(HEAP32[i3 >> 2] | 0, 0);
 STACKTOP = i2;
 return;
}

function _gui_mch_setmouse(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _bt_regfree(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _vim_free(HEAP32[i3 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _gui_mch_prepare(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _validate_cline_row() {
 _update_topline();
 _check_cursor_moved(HEAP32[26881] | 0);
 if (HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 16 | 0) return;
 _curs_rows(HEAP32[26881] | 0);
 return;
}

function _reg_nextline() {
 var i1 = 0;
 i1 = (HEAP32[26326] | 0) + 1 | 0;
 HEAP32[26326] = i1;
 HEAP32[26325] = _reg_getline(i1) | 0;
 HEAP32[26334] = HEAP32[26325];
 _fast_breakcheck();
 return;
}

function _redirecting() {
 var i1 = 0, i2 = 0;
 if (HEAP32[26856] | 0) {
  i1 = 1;
  i2 = i1 & 1;
  return i2 | 0;
 }
 i1 = (HEAPU8[HEAP32[3827] >> 0] | 0 | 0) != 0;
 i2 = i1 & 1;
 return i2 | 0;
}

function _msg_check() {
 if ((HEAP32[26877] | 0) != ((HEAP32[10173] | 0) - 1 | 0)) return;
 if ((HEAP32[27043] | 0) < (HEAP32[27116] | 0)) return;
 HEAP32[26721] = 1;
 HEAP32[26699] = 1;
 return;
}

function _last_window() {
 var i1 = 0, i2 = 0;
 if (!(_one_window() | 0)) {
  i1 = 0;
  i2 = i1 & 1;
  return i2 | 0;
 }
 i1 = (HEAP32[HEAP32[26884] >> 2] | 0) == 0;
 i2 = i1 & 1;
 return i2 | 0;
}

function _update_finish() {
 if (HEAP32[26699] | 0) _showmode() | 0;
 _reset_updating_screen(1);
 if (!(HEAP32[26627] | 0)) return;
 _out_flush_cursor(0, 0);
 _gui_update_scrollbars(0);
 return;
}

function _ml_get_cursor() {
 var i1 = 0;
 i1 = _ml_get_buf(HEAP32[26773] | 0, HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 0) | 0;
 return i1 + (HEAP32[(HEAP32[26881] | 0) + 24 + 4 >> 2] | 0) | 0;
}

function _mch_set_acl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i3;
 return;
}

function _iemsg(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 _emsg(HEAP32[i3 >> 2] | 0) | 0;
 STACKTOP = i2;
 return;
}

function _free_screenlines() {
 _vim_free(HEAP32[26691] | 0);
 _vim_free(HEAP32[26692] | 0);
 _vim_free(HEAP32[26693] | 0);
 _vim_free(HEAP32[26694] | 0);
 _vim_free(HEAP32[26695] | 0);
 return;
}

function _catch_sigpwr(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _signal(30, 205) | 0;
 _ml_sync_all(0, 0);
 STACKTOP = i2;
 return;
}

function ___DOUBLE_BITS_681(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return i2 | 0;
}

function _verbose_leave() {
 var i1 = 0;
 if (!(HEAPU8[HEAP32[3827] >> 0] | 0)) return;
 i1 = (HEAP32[26809] | 0) + -1 | 0;
 HEAP32[26809] = i1;
 HEAP32[26809] = (i1 | 0) < 0 ? 0 : i1;
 return;
}

function _catch_sigint(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _signal(2, 207) | 0;
 HEAP32[26834] = 1;
 STACKTOP = i2;
 return;
}

function _gui_mch_get_rgb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i2;
 return HEAP32[i3 >> 2] | 0;
}

function _getchr() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = _peekchr() | 0;
 _skipchr();
 STACKTOP = i1;
 return HEAP32[i2 >> 2] | 0;
}

function _start_stuff() {
 if (HEAP32[25482] | 0) {
  HEAP32[25484] = 101928;
  HEAP32[25486] = 0;
 }
 if (!(HEAP32[25487] | 0)) return;
 HEAP32[25489] = 101948;
 HEAP32[25491] = 0;
 return;
}

function _sig_winch(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _signal(28, 204) | 0;
 HEAP32[26285] = 1;
 STACKTOP = i2;
 return;
}

function dynCall_iiiii(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiii[i1 & 3](i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function _may_sync_undo() {
 if (!((HEAP32[10180] & 24 | 0) == 0 | (HEAP32[27126] | 0) != 0)) return;
 if (HEAP32[108652 + (HEAP32[26831] << 2) >> 2] | 0) return;
 _u_sync(0);
 return;
}

function _didset_options2() {
 _highlight_changed() | 0;
 _check_opt_wim() | 0;
 _set_chars_option(107776) | 0;
 _set_chars_option(108092) | 0;
 _check_clipboard_option() | 0;
 return;
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (i1 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - i1;
  i2 = -1;
 } else i2 = i1;
 return i2 | 0;
}

function _no_write_message_nobang(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _emsg(42411) | 0;
 STACKTOP = i2;
 return;
}

function _msg_use_printf() {
 var i1 = 0;
 if (_msg_check_screen() | 0) if (_swapping_screen() | 0) i1 = (HEAP32[26835] | 0) != 0 ^ 1; else i1 = 0; else i1 = 1;
 return i1 & 1 | 0;
}

function _may_core_dump() {
 var i1 = 0;
 if (!(HEAP32[26289] | 0)) return;
 _signal(HEAP32[26289] | 0, 0) | 0;
 i1 = _getpid() | 0;
 _kill(i1 | 0, HEAP32[26289] | 0) | 0;
 return;
}

function _ex_viusage(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _do_cmdline_cmd(44279) | 0;
 STACKTOP = i2;
 return;
}

function _ex_exusage(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _do_cmdline_cmd(44261) | 0;
 STACKTOP = i2;
 return;
}

function _del_char_after_col(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _del_char(0) | 0;
 STACKTOP = i2;
 return 1;
}

function _clip_auto_select() {
 if (_clip_isautosel_star() | 0) _clip_copy_selection(108396);
 if (!(_clip_isautosel_plus() | 0)) return;
 _clip_copy_selection(108396);
 return;
}

function _line_breakcheck() {
 var i1 = 0;
 i1 = (HEAP32[26054] | 0) + 1 | 0;
 HEAP32[26054] = i1;
 if ((i1 | 0) < 200) return;
 HEAP32[26054] = 0;
 _ui_breakcheck();
 return;
}

function _fast_breakcheck() {
 var i1 = 0;
 i1 = (HEAP32[26054] | 0) + 1 | 0;
 HEAP32[26054] = i1;
 if ((i1 | 0) < 2e3) return;
 HEAP32[26054] = 0;
 _ui_breakcheck();
 return;
}

function _check_visual_highlight() {
 if (!(HEAP32[26781] | 0)) return;
 if ((HEAP32[26066] | 0) == 0 & (HEAP32[27065] | 0) == 0) _msg(61681) | 0;
 HEAP32[26066] = 1;
 return;
}

function _set_cmdspos() {
 var i1 = 0;
 i1 = HEAP32[25242] | 0;
 if (HEAP32[25241] | 0) {
  HEAP32[25240] = 1 + i1;
  return;
 } else {
  HEAP32[25240] = 0 + i1;
  return;
 }
}

function _verbose_enter_scroll() {
 if (HEAPU8[HEAP32[3827] >> 0] | 0 | 0) {
  HEAP32[26809] = (HEAP32[26809] | 0) + 1;
  return;
 } else {
  HEAP32[26710] = 1;
  return;
 }
}

function _mch_screenmode(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _emsg(93614) | 0;
 STACKTOP = i2;
 return 0;
}

function _get_cpo_flags() {
 HEAP32[26309] = (_vim_strchr(HEAP32[26904] | 0, 108) | 0) != 0 & 1;
 HEAP32[26308] = (_vim_strchr(HEAP32[26904] | 0, 92) | 0) != 0 & 1;
 return;
}

function _strchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = ___strchrnul(i1, i2) | 0;
 return ((HEAP8[i3 >> 0] | 0) == (i2 & 255) << 24 >> 24 ? i3 : 0) | 0;
}

function _messaging() {
 var i1 = 0;
 if (HEAP32[26945] | 0) if (_char_avail() | 0) i1 = (HEAP32[27161] | 0) != 0 ^ 1; else i1 = 0; else i1 = 0;
 return (i1 ^ 1) & 1 | 0;
}

function _gui_reset_scroll_region() {
 HEAP32[26642] = 0;
 HEAP32[26643] = (HEAP32[26641] | 0) - 1;
 HEAP32[26644] = 0;
 HEAP32[26645] = (HEAP32[26640] | 0) - 1;
 return;
}

function _op_function(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _emsg(61833) | 0;
 STACKTOP = i2;
 return;
}

function _ex_digraphs(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _emsg(50916) | 0;
 STACKTOP = i2;
 return;
}

function _changed_int() {
 HEAP32[(HEAP32[26773] | 0) + 108 >> 2] = 1;
 _ml_setflags(HEAP32[26773] | 0);
 _check_status(HEAP32[26773] | 0);
 HEAP32[26770] = 1;
 return;
}

function _check_shellsize() {
 var i1 = 0;
 i1 = HEAP32[10173] | 0;
 if ((i1 | 0) < (_min_rows() | 0)) HEAP32[10173] = _min_rows() | 0;
 _limit_screen_size();
 return;
}

function _validate_cursor() {
 _check_cursor_moved(HEAP32[26881] | 0);
 if ((HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 3 | 0) == 3) return;
 _curs_columns(1);
 return;
}

function _ex_shell(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _do_shell(0, 0);
 STACKTOP = i2;
 return;
}

function _clip_mch_request_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _gui_mch_destroy_scrollbar(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _goto_im() {
 var i1 = 0;
 if (HEAP32[26883] | 0) if (_stuff_empty() | 0) i1 = (_typebuf_typed() | 0) != 0; else i1 = 0; else i1 = 0;
 return i1 & 1 | 0;
}

function _clip_mch_own_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return 1;
}

function dynCall_iiii(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiii[i1 & 15](i2 | 0, i3 | 0, i4 | 0) | 0;
}

function b4(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(4);
 return 0;
}

function _undisplay_dollar() {
 if ((HEAP32[10175] | 0) < 0) return;
 HEAP32[10175] = -1;
 _redrawWinline(HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 0);
 return;
}

function _redraw_later_clear() {
 _redraw_all_later(50);
 if (HEAP32[26627] | 0) {
  HEAP32[26455] = 256;
  return;
 } else {
  HEAP32[26455] = 139;
  return;
 }
}

function _clip_mch_set_selection(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _ex_cquit(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _getout(1);
 STACKTOP = i2;
 return;
}

function _replace_flush() {
 if (HEAP32[25207] | 0) {
  _vim_free(HEAP32[25207] | 0);
  HEAP32[25207] = 0;
 }
 HEAP32[25206] = 0;
 HEAP32[25205] = 0;
 return;
}

function _getuid() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = ___syscall199(199, i1 | 0) | 0;
 STACKTOP = i1;
 return i2 | 0;
}

function _getgid() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = ___syscall200(200, i1 | 0) | 0;
 STACKTOP = i1;
 return i2 | 0;
}

function _ex_redo(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 _u_redo(1);
 STACKTOP = i2;
 return;
}

function _strpbrk(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + (_strcspn(i1, i2) | 0) | 0;
 return ((HEAP8[i3 >> 0] | 0) == 0 ? 0 : i3) | 0;
}

function _fputs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _strlen(i1) | 0;
 return ((_fwrite(i1, 1, i3, i2) | 0) != (i3 | 0)) << 31 >> 31 | 0;
}

function _set_normal_colors() {
 if (!(_set_group_colors(77230, 106700, 106696, 0, 1, 0) | 0)) return;
 _gui_mch_new_colors();
 HEAP32[26828] = 50;
 return;
}

function _ins_ctrl_o() {
 if (HEAP32[10180] & 64 | 0) HEAP32[26806] = 82; else HEAP32[26806] = 73;
 HEAP32[26807] = (_gchar_cursor() | 0) == 0 & 1;
 return;
}

function _getpid() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = ___syscall20(20, i1 | 0) | 0;
 STACKTOP = i1;
 return i2 | 0;
}

function _gui_mch_mousehide(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _ex_scriptencoding(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _mch_suspend() {
 _out_flush();
 _settmode(0);
 _out_flush();
 _kill(0, 20) | 0;
 _settmode(2);
 HEAP32[26737] = 1;
 HEAP32[26738] = 0;
 return;
}

function _strtol(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = _strtox_738(i1, i2, i3, -2147483648, 0) | 0;
 return i4 | 0;
}

function _msg_add_eol() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[26882] | 0;
 i2 = (_shortmess(105) | 0) != 0;
 _strcat(i1, i2 ? 53762 : 53770) | 0;
 return;
}

function _gui_mch_flash(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _mch_free_acl(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _clear_winopt(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _check_winopt(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _cursor_off() {
 if ((HEAP32[26781] | 0) == 0 | (HEAP32[26598] | 0) != 0) return;
 _out_str(HEAP32[26531] | 0);
 HEAP32[26598] = 1;
 return;
}

function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}

function _gui_mch_adjust_charheight() {
 HEAP32[26666] = _vimwasm_get_char_height() | 0;
 HEAP32[26667] = _vimwasm_get_char_ascent() | 0;
 return 1;
}

function _has_cursorhold() {
 var i1 = 0;
 i1 = (_get_real_state() | 0) == 257;
 return (HEAP32[101068 + ((i1 ? 28 : 29) << 2) >> 2] | 0) != 0 | 0;
}

function _mch_hide(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _get_indent() {
 var i1 = 0;
 i1 = _ml_get_curline() | 0;
 return _get_indent_str(i1, HEAP32[(HEAP32[26773] | 0) + 700 >> 2] | 0, 0) | 0;
}

function _reset_last_sourcing() {
 if (HEAP32[27228] | 0) {
  _vim_free(HEAP32[27228] | 0);
  HEAP32[27228] = 0;
 }
 HEAP32[27229] = 0;
 return;
}

function _reset_VIsual_and_resel() {
 if (HEAP32[26788] | 0) {
  _end_visual_mode();
  _redraw_curbuf_later(20);
 }
 HEAP32[27119] = 0;
 return;
}

function _nv_nop(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = i1;
 STACKTOP = i2;
 return;
}

function _inc_msg_scrolled() {
 HEAP32[27044] = (HEAP32[27044] | 0) + 1;
 if ((HEAP32[26828] | 0) >= 10) return;
 HEAP32[26828] = 10;
 return;
}

function _swapc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _llvm_bswap_i32(i1 | 0) | 0;
 return ((i2 | 0) == 0 ? i1 : i3) | 0;
}

function _verbose_stop() {
 if (HEAP32[27233] | 0) {
  _fclose(HEAP32[27233] | 0) | 0;
  HEAP32[27233] = 0;
 }
 HEAP32[27235] = 0;
 return;
}

function _ispunct(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(_isgraph(i1) | 0)) i2 = 0; else i2 = (_isalnum(i1) | 0) == 0 & 1;
 return i2 | 0;
}

function _isalnum(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!(_isalpha(i1) | 0)) i2 = (_isdigit(i1) | 0) != 0 & 1; else i2 = 1;
 return i2 | 0;
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function _reset_VIsual() {
 if (!(HEAP32[26788] | 0)) return;
 _end_visual_mode();
 _redraw_curbuf_later(20);
 HEAP32[27119] = 0;
 return;
}

function _changed_cline_bef_curs() {
 var i1 = 0;
 i1 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -144;
 return;
}

function _changed_line_abv_curs() {
 var i1 = 0;
 i1 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -160;
 return;
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i1) i3 = 0; else i3 = _wcrtomb(i1, i2, 0) | 0;
 return i3 | 0;
}

function _validate_botline() {
 if (HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 32 | 0) return;
 _comp_botline(HEAP32[26881] | 0);
 return;
}

function _out(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(HEAP32[i1 >> 2] & 32)) ___fwritex(i2, i3, i1) | 0;
 return;
}

function _gui_may_resize_shell() {
 if (!(HEAP32[26761] | 0)) return;
 _gui_resize_shell(HEAP32[26760] | 0, HEAP32[26761] | 0);
 return;
}

function _u_save_cursor() {
 var i1 = 0;
 i1 = HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0;
 return _u_save(i1 - 1 | 0, i1 + 1 | 0) | 0;
}

function _sync() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 ___syscall36(36, i1 | 0) | 0;
 STACKTOP = i1;
 return;
}

function _llvm_bswap_i32(i1) {
 i1 = i1 | 0;
 return (i1 & 255) << 24 | (i1 >> 8 & 255) << 16 | (i1 >> 16 & 255) << 8 | i1 >>> 24 | 0;
}

function _cursor_valid() {
 _check_cursor_moved(HEAP32[26881] | 0);
 return (HEAP32[(HEAP32[26881] | 0) + 108 >> 2] & 3 | 0) == 3 | 0;
}

function dynCall_iii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iii[i1 & 15](i2 | 0, i3 | 0) | 0;
}

function _read_error_exit() {
 if (HEAP32[26787] | 0) _getout(0);
 _strcpy(HEAP32[26882] | 0, 80554) | 0;
 _preserve_exit();
 return;
}

function _invalidate_botline() {
 var i1 = 0;
 i1 = (HEAP32[26881] | 0) + 108 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -97;
 return;
}

function _update_prepare() {
 _cursor_off();
 HEAP32[26758] = 1;
 if (!(HEAP32[26627] | 0)) return;
 _gui_undraw_cursor();
 return;
}

function _fileno(i1) {
 i1 = i1 | 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) ___lockfile(i1) | 0;
 return HEAP32[i1 + 60 >> 2] | 0;
}

function _verbose_enter() {
 if (!(HEAPU8[HEAP32[3827] >> 0] | 0)) return;
 HEAP32[26809] = (HEAP32[26809] | 0) + 1;
 return;
}

function _update_topline_redraw() {
 _update_topline();
 if (!(HEAP32[26828] | 0)) return;
 _update_screen(0) | 0;
 return;
}

function _ui_suspend() {
 if (HEAP32[26627] | 0) {
  _gui_mch_iconify();
  return;
 } else {
  _mch_suspend();
  return;
 }
}

function _vsprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _vsnprintf(i1, 2147483647, i2, i3) | 0;
}

function _validate_maphash() {
 if (HEAP32[25638] | 0) return;
 _memset(102556, 0, 1024) | 0;
 HEAP32[25638] = 1;
 return;
}

function _tag_freematch() {
 if (!(HEAP32[26511] | 0)) return;
 _vim_free(HEAP32[26511] | 0);
 HEAP32[26511] = 0;
 return;
}

function _close_redir() {
 if (!(HEAP32[26856] | 0)) return;
 _fclose(HEAP32[26856] | 0) | 0;
 HEAP32[26856] = 0;
 return;
}

function dynCall_vii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_vii[i1 & 3](i2 | 0, i3 | 0);
}

function _strerror(i1) {
 i1 = i1 | 0;
 return ___strerror_l(i1, HEAP32[(___pthread_self_105() | 0) + 188 >> 2] | 0) | 0;
}

function _strncpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 ___stpncpy(i1, i2, i3) | 0;
 return i1 | 0;
}

function _ml_get_curline() {
 return _ml_get_buf(HEAP32[26773] | 0, HEAP32[(HEAP32[26881] | 0) + 24 >> 2] | 0, 0) | 0;
}

function _closedir(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _close(HEAP32[i1 >> 2] | 0) | 0;
 _free(i1);
 return i2 | 0;
}

function _cursor_on() {
 if (!(HEAP32[26598] | 0)) return;
 _out_str(HEAP32[26532] | 0);
 HEAP32[26598] = 0;
 return;
}

function _strcat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _strcpy(i1 + (_strlen(i1) | 0) | 0, i2) | 0;
 return i1 | 0;
}

function _check_swap_exists_action() {
 if ((HEAP32[26812] | 0) == 2) _getout(1);
 _handle_swap_exists(0);
 return;
}

function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!__THREW__) {
  __THREW__ = i1;
  threwValue = i2;
 }
}

function _toupper(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_islower(i1) | 0) == 0;
 return (i2 ? i1 : i1 & 95) | 0;
}

function _tolower(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_isupper(i1) | 0) == 0;
 return (i2 ? i1 : i1 | 32) | 0;
}

function _msg_clr_cmdline() {
 HEAP32[26877] = HEAP32[26876];
 HEAP32[27043] = 0;
 _msg_clr_eos_force();
 return;
}

function _msg_sb_eol() {
 if (!(HEAP32[27231] | 0)) return;
 HEAP8[(HEAP32[27231] | 0) + 8 >> 0] = 1;
 return;
}

function _get_deleted_augroup() {
 if (!(HEAP32[25465] | 0)) HEAP32[25465] = 54046;
 return HEAP32[25465] | 0;
}

function b3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(3);
 return 0;
}

function _gui_mch_clear_all() {
 _gui_mch_set_bg_color(HEAP32[26674] | 0);
 _vimwasm_clear_all();
 return;
}

function _gui_get_shellsize() {
 HEAP32[10173] = HEAP32[26641];
 HEAP32[10174] = HEAP32[26640];
 return 1;
}

function _fseek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___fseeko(i1, i2, i3) | 0;
}

function _mch_init() {
 HEAP32[10174] = 80;
 HEAP32[10173] = 24;
 _out_flush();
 _set_signals();
 return;
}

function dynCall_ii(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_ii[i1 & 3](i2 | 0) | 0;
}

function _restore_cterm_colors() {
 HEAP32[26741] = 0;
 HEAP32[26742] = 0;
 HEAP32[26743] = 0;
 return;
}

function _beep_flush() {
 if (HEAP32[26810] | 0) return;
 _flush_buffers(0);
 _vim_beep(64);
 return;
}

function _stuff_empty() {
 return ((HEAP32[25482] | 0) == 0 ? (HEAP32[25487] | 0) == 0 : 0) & 1 | 0;
}

function _mch_set_shellsize() {
 _vimwasm_resize_win(HEAP32[10173] | 0, HEAP32[10174] | 0);
 return;
}

function _mch_new_shellsize() {
 _vimwasm_resize_win(HEAP32[10173] | 0, HEAP32[10174] | 0);
 return;
}

function _csh_like_shell() {
 return (_strstr(_gettail(HEAP32[26977] | 0) | 0, 72056) | 0) != 0 | 0;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function _set_imsearch_global() {
 HEAP32[26260] = HEAP32[(HEAP32[26773] | 0) + 556 >> 2];
 return;
}

function _set_iminsert_global() {
 HEAP32[26259] = HEAP32[(HEAP32[26773] | 0) + 552 >> 2];
 return;
}

function _no_console_input() {
 return (HEAP32[26627] | 0 ? (HEAP32[26628] | 0) != 0 : 1) & 1 | 0;
}

function _msg_pos_mode() {
 HEAP32[27043] = 0;
 HEAP32[26877] = (HEAP32[10173] | 0) - 1;
 return;
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function dynCall_vi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vi[i1 & 255](i2 | 0);
}

function _may_clear_cmdline() {
 if (!(HEAP32[26701] | 0)) return;
 HEAP32[26700] = 1;
 return;
}

function _comp_col() {
 HEAP32[27116] = HEAP32[10174];
 HEAP32[27115] = HEAP32[10174];
 return;
}

function _strcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 ___stpcpy(i1, i2) | 0;
 return i1 | 0;
}

function _last_search_pat() {
 return HEAP32[30064 + ((HEAP32[26465] | 0) * 28 | 0) >> 2] | 0;
}

function _changed_window_setting() {
 _changed_window_setting_win(HEAP32[26881] | 0);
 return;
}

function ___lctrans(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return ___lctrans_impl(i1, i2) | 0;
}

function _screenclear() {
 _check_for_delay(0);
 _screenalloc(0);
 _screenclear2();
 return;
}

function _start_selection() {
 _may_start_select(107);
 _n_start_visual_mode(118);
 return;
}

function _free_yank_all() {
 _free_yank(HEAP32[(HEAP32[26084] | 0) + 4 >> 2] | 0);
 return;
}

function b2(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(2);
 return 0;
}

function _msg_clr_eos() {
 if (HEAP32[26809] | 0) return;
 _msg_clr_eos_force();
 return;
}

function _input_available() {
 return ((_vim_is_input_buf_empty() | 0) != 0 ^ 1) & 1 | 0;
}

function _msg_starthere() {
 HEAP32[10176] = HEAP32[26876];
 HEAP32[26712] = 0;
 return;
}

function _mouse_model_popup() {
 return (HEAPU8[HEAP32[26956] >> 0] | 0 | 0) == 112 | 0;
}

function _iscntrl(i1) {
 i1 = i1 | 0;
 return (i1 >>> 0 < 32 | (i1 | 0) == 127) & 1 | 0;
}

function _gui_may_flush() {
 if (HEAP32[26689] | 0) return;
 _gui_mch_flush();
 return;
}

function ___emscripten_environ_constructor() {
 ___buildEnvironment(109564);
 return;
}

function _getwhitecols_curline() {
 return _getwhitecols(_ml_get_curline() | 0) | 0;
}

function _cmdline_at_end() {
 return (HEAP32[25239] | 0) >= (HEAP32[25238] | 0) | 0;
}

function _ml_line_alloced() {
 return HEAP32[(HEAP32[26773] | 0) + 8 >> 2] & 2 | 0;
}

function _isalpha(i1) {
 i1 = i1 | 0;
 return ((i1 | 32) + -97 | 0) >>> 0 < 26 | 0;
}

function _validate_virtcol() {
 _validate_virtcol_win(HEAP32[26881] | 0);
 return;
}

function _unblock_autocmds() {
 HEAP32[25363] = (HEAP32[25363] | 0) + -1;
 return;
}

function _gui_enable_flush() {
 HEAP32[26689] = (HEAP32[26689] | 0) + -1;
 return;
}

function _gui_disable_flush() {
 HEAP32[26689] = (HEAP32[26689] | 0) + 1;
 return;
}

function _check_cursor_col() {
 _check_cursor_col_win(HEAP32[26881] | 0);
 return;
}

function _screen_start() {
 HEAP32[26457] = 9999;
 HEAP32[26458] = 9999;
 return;
}

function _sb_text_start_cmdline() {
 HEAP32[27232] = 2;
 _msg_sb_eol();
 return;
}

function _putchar(i1) {
 i1 = i1 | 0;
 return _fputc(i1, HEAP32[10243] | 0) | 0;
}

function _labs(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) > 0 ? i1 : 0 - i1 | 0) | 0;
}

function _check_cursor() {
 _check_cursor_lnum();
 _check_cursor_col();
 return;
}

function _init_chartab() {
 return _buf_init_chartab(HEAP32[26773] | 0, 1) | 0;
}

function _gchar_cursor() {
 return HEAPU8[(_ml_get_cursor() | 0) >> 0] | 0 | 0;
}

function _frexpl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_frexp(d1, i2));
}

function _clear_termoptions() {
 _stoptermcap();
 _free_termoptions();
 return;
}

function _block_autocmds() {
 HEAP32[25363] = (HEAP32[25363] | 0) + 1;
 return;
}

function _text_locked_msg() {
 _emsg(_get_text_locked_msg() | 0) | 0;
 return;
}

function _isupper(i1) {
 i1 = i1 | 0;
 return (i1 + -65 | 0) >>> 0 < 26 | 0;
}

function _islower(i1) {
 i1 = i1 | 0;
 return (i1 + -97 | 0) >>> 0 < 26 | 0;
}

function _isgraph(i1) {
 i1 = i1 | 0;
 return (i1 + -33 | 0) >>> 0 < 94 | 0;
}

function _isdigit(i1) {
 i1 = i1 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}

function _vim_is_input_buf_full() {
 return (HEAP32[26615] | 0) >= 250 | 0;
}

function _curwin_col_off2() {
 return _win_col_off2(HEAP32[26881] | 0) | 0;
}

function _curbufIsChanged() {
 return _bufIsChanged(HEAP32[26773] | 0) | 0;
}

function _vim_is_input_buf_empty() {
 return (HEAP32[26615] | 0) == 0 | 0;
}

function _curwin_col_off() {
 return _win_col_off(HEAP32[26881] | 0) | 0;
}

function _inc_cursor() {
 return _inc((HEAP32[26881] | 0) + 24 | 0) | 0;
}

function _dec_cursor() {
 return _dec((HEAP32[26881] | 0) + 24 | 0) | 0;
}

function b1(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(1);
 return 0;
}

function _curwin_init() {
 _win_init_empty(HEAP32[26881] | 0);
 return;
}

function _list_features() {
 _list_in_columns(33804, -1, -1);
 return;
}

function _not_exiting() {
 HEAP32[26778] = 0;
 _settmode(2);
 return;
}

function _has_insertcharpre() {
 return (HEAP32[25325] | 0) != 0 | 0;
}

function _gui_new_shellsize() {
 _gui_reset_scroll_region();
 return;
}

function _gui_mch_start_blink() {
 _gui_update_cursor(1, 0);
 return;
}

function _has_textchangedI() {
 return (HEAP32[25352] | 0) != 0 | 0;
}

function _has_cmdundefined() {
 return (HEAP32[25289] | 0) != 0 | 0;
}

function _ui_cursor_shape() {
 _ui_cursor_shape_forced(0);
 return;
}

function _has_textchanged() {
 return (HEAP32[25351] | 0) != 0 | 0;
}

function _has_cursormoved() {
 return (HEAP32[25297] | 0) != 0 | 0;
}

function _is_clipboard_needs_update() {
 return HEAP32[26613] | 0;
}

function _typebuf_typed() {
 return (HEAP32[26822] | 0) == 0 | 0;
}

function setEmtStackMax(i1) {
 i1 = i1 | 0;
 EMT_STACK_MAX = i1;
}

function _gui_update_cursor_later() {
 _out_str(84436);
 return;
}

function _get_inserted() {
 return _get_buffcont(101908, 0) | 0;
}

function emtStackRestore(i1) {
 i1 = i1 | 0;
 EMTSTACKTOP = i1;
}

function _text_locked() {
 return (HEAP32[26784] | 0) != 0 | 0;
}

function _gui_can_update_cursor() {
 HEAP32[8608] = 1;
 return;
}

function _ui_breakcheck() {
 _ui_breakcheck_force(0);
 return;
}

function _shell_resized() {
 _set_shellsize(0, 0, 0);
 return;
}

function _sb_text_end_cmdline() {
 HEAP32[27232] = 3;
 return;
}

function _init_locale() {
 _setlocale(6, 114072) | 0;
 return;
}

function _ftell(i1) {
 i1 = i1 | 0;
 return ___ftello(i1) | 0;
}

function _catch_int_signal() {
 _signal(2, 207) | 0;
 return;
}

function ___pthread_self_612() {
 return _pthread_self() | 0;
}

function ___pthread_self_430() {
 return _pthread_self() | 0;
}

function ___pthread_self_105() {
 return _pthread_self() | 0;
}

function setAsyncState(i1) {
 i1 = i1 | 0;
 asyncState = i1;
}

function b6(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(6);
}

function _may_clear_sb_text() {
 HEAP32[27232] = 1;
 return;
}

function _gui_mch_update() {
 _emscripten_sleep(1);
 return;
}

function _reset_signals() {
 _catch_signals(0, 0);
 return;
}

function _reset_search_dir() {
 HEAP32[7519] = 47;
 return;
}

function _redrawcmdline() {
 _redrawcmdline_ex(1);
 return;
}

function _cmdline_overstrike() {
 return HEAP32[25245] | 0;
}

function _trash_input_buf() {
 HEAP32[26615] = 0;
 return;
}

function _no_write_message() {
 _emsg(42058) | 0;
 return;
}

function ___ofl_lock() {
 ___lock(109536);
 return 109544;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function _setcursor() {
 _setcursor_mayforce(0);
 return;
}

function _main_start_gui() {
 HEAP32[26628] = 1;
 return;
}

function _before_blocking() {
 _updatescript(0);
 return;
}

function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}

function _stop_redo_ins() {
 HEAP32[25628] = 0;
 return;
}

function _typebuf_maplen() {
 return HEAP32[26822] | 0;
}

function _get_search_pat() {
 return HEAP32[26466] | 0;
}

function _dummy_569(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function ___ofl_unlock() {
 ___unlock(109536);
 return;
}

function getEmtStackMax() {
 return EMT_STACK_MAX | 0;
}

function _is_not_a_term() {
 return HEAP32[27218] | 0;
}

function b0(i1) {
 i1 = i1 | 0;
 abort(0);
 return 0;
}

function _out_trash() {
 HEAP32[26596] = 0;
 return;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 0;
}

function emterpret(i1) {
 i1 = i1 | 0;
 assert(0);
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function _mch_get_pid() {
 return _getpid() | 0;
}

function _get_text_locked_msg() {
 return 93591;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function ___errno_location() {
 return 109512;
}

function _gui_mch_is_blink_off() {
 return 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function _vim_time() {
 return _time(0) | 0;
}

function __get_timezone() {
 return 109560;
}

function __get_daylight() {
 return 109556;
}

function b5(i1) {
 i1 = i1 | 0;
 abort(5);
}

function __get_environ() {
 return 109564;
}

function _pthread_self() {
 return 41228;
}

function _gui_mch_new_colors() {
 return;
}

function __get_tzname() {
 return 109548;
}

function _gui_mch_iconify() {
 return;
}

function _mch_early_init() {
 return;
}

function _gui_mch_open() {
 return 1;
}

function _init_mappings() {
 return;
}

function _gui_mch_flush() {
 return;
}

function _gui_mch_beep() {
 return;
}

function _dummy_412() {
 return;
}

function _setmouse() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close,_incl,_decl];
var FUNCTION_TABLE_iii = [b1,_nfa_regcomp,_bt_regcomp,_sort_compare,_help_compare,_pstrcmp,_sort_compare_1672,_nv_compare,_do_upper,_do_Upper,_do_lower,_do_Lower,b1,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,___stdio_write,___stdio_seek,___stdout_write,_sn_write,_getsourceline,_getexline,_getexmodeline,_getnextac,___stdio_read,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,_nfa_regexec_nl,_bt_regexec_nl,b3];
var FUNCTION_TABLE_iiiiiiii = [b4,_nfa_regexec_multi,_bt_regexec_multi,b4];
var FUNCTION_TABLE_vi = [b5,_ex_append,_ex_abbreviate,_ex_abclear,_ex_wrongmodifier,_ex_all,_ex_ni,_ex_args,_ex_argadd,_ex_argdelete,_ex_listdo,_ex_argedit,_ex_argument,_do_ascii,_ex_autocmd,_ex_buffer,_ex_bprevious,_ex_buffer_all,_ex_edit,_ex_bunload,_ex_behave,_ex_brewind,_ex_blast,_ex_bmodified,_ex_bnext,_buflist_list,_ex_change,_ex_cd,_ex_align
,_ex_checktime,_ex_close,_ex_map,_ex_mapclear,_ex_copymove,_ex_colorscheme,_ex_cquit,_ex_unmap,_ex_operators,_ex_delmarks,_ex_display,_ex_digraphs,_ex_doautocmd,_ex_doautoall,_ex_drop,_ex_later,_ex_exit,_ex_exusage,_ex_file,_ex_filetype,_ex_find,_ex_rewind,_do_fixdel,_ex_global,_ex_gui,_ex_help,_ex_helpclose,_ex_helptags,_ex_highlight,_ex_hide
,_ex_intro,_ex_join,_ex_mark,_ex_print,_ex_last,_ex_tag,_ex_script_ni,_do_marks,_ex_messages,_ex_mkrc,_ex_mode,_ex_next,_ex_splitview,_ex_normal,_ex_open,_ex_only,_ex_preserve,_ex_previous,_ex_put,_ex_pwd,_ex_quit,_ex_quit_all,_ex_read,_ex_recover,_ex_redo,_ex_redir,_ex_redraw,_ex_redrawstatus,_ex_resize,_ex_retab
,_ex_runtime,_do_sub,_ex_write,_ex_scriptencoding,_ex_set,_ex_setfiletype,_ex_shell,_ex_sleep,_ex_submagic,_ex_source,_ex_sort,_ex_stop,_ex_stag,_ex_startinsert,_ex_stopinsert,_ex_swapname,_ex_syncbind,_ex_smile,_do_tags,_ex_tabclose,_ex_tabnext,_ex_tabmove,_ex_tabonly,_ex_tabs,_ex_undo,_ex_undojoin,_ex_undolist,_ex_update,_ex_version,_ex_viusage
,_ex_wnext,_do_wqall,_ex_winsize,_ex_wincmd,_ex_winpos,_ex_z,_ex_bang,_ex_at,_ex_equal,_nv_error,_nv_addsub,_nv_page,_nv_esc,_nv_halfpage,_nv_scroll_line,_nv_ctrlg,_nv_ctrlh,_nv_pcmark,_nv_down,_nv_clear,_nv_ctrlo,_nv_up,_nv_visual,_nv_redo,_nv_ignore,_nv_tagpop,_nv_window,_nv_suspend,_nv_normal,_nv_ident
,_nv_hat,_nv_right,_nv_operator,_nv_regname,_nv_dollar,_nv_percent,_nv_optrans,_nv_gomark,_nv_brace,_nv_csearch,_nv_dot,_nv_search,_nv_beginline,_nv_colon,_nv_at,_nv_edit,_nv_bck_word,_nv_abbrev,_nv_wordcmd,_nv_goto,_nv_scroll,_nv_join,_nv_next,_nv_open,_nv_put,_nv_exmode,_nv_Replace,_nv_subst,_nv_Undo,_nv_Zet
,_nv_brackets,_nv_lineop,_nv_g_cmd,_nv_left,_nv_mark,_nv_record,_nv_replace,_nv_undo,_nv_zet,_nv_findpar,_nv_pipe,_nv_tilde,_nv_mousescroll,_nv_mouse,_nv_nop,_nv_end,_nv_home,_nv_kundo,_nv_help,_nv_select,_nv_ver_scrollbar,_nv_hor_scrollbar,_nv_cursorhold,_nfa_regfree,_bt_regfree,_sig_winch,_catch_sigpwr,_deathtrap,_catch_sigint,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,_helptags_cb,_source_callback,_found_tagfile_cb];

  return { ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_environ: __get_environ, __get_timezone: __get_timezone, __get_tzname: __get_tzname, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _gui_wasm_send_key: _gui_wasm_send_key, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, emtStackRestore: emtStackRestore, emtStackSave: emtStackSave, emterpret: emterpret, establishStackSpace: establishStackSpace, getEmtStackMax: getEmtStackMax, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsyncState: setAsyncState, setEmtStackMax: setEmtStackMax, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

Module["asm"] = asm;
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = function() {  return Module["asm"]["___emscripten_environ_constructor"].apply(null, arguments) };
var ___errno_location = Module["___errno_location"] = function() {  return Module["asm"]["___errno_location"].apply(null, arguments) };
var ___muldi3 = Module["___muldi3"] = function() {  return Module["asm"]["___muldi3"].apply(null, arguments) };
var ___udivdi3 = Module["___udivdi3"] = function() {  return Module["asm"]["___udivdi3"].apply(null, arguments) };
var __get_daylight = Module["__get_daylight"] = function() {  return Module["asm"]["__get_daylight"].apply(null, arguments) };
var __get_environ = Module["__get_environ"] = function() {  return Module["asm"]["__get_environ"].apply(null, arguments) };
var __get_timezone = Module["__get_timezone"] = function() {  return Module["asm"]["__get_timezone"].apply(null, arguments) };
var __get_tzname = Module["__get_tzname"] = function() {  return Module["asm"]["__get_tzname"].apply(null, arguments) };
var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments) };
var _bitshift64Shl = Module["_bitshift64Shl"] = function() {  return Module["asm"]["_bitshift64Shl"].apply(null, arguments) };
var _free = Module["_free"] = function() {  return Module["asm"]["_free"].apply(null, arguments) };
var _gui_wasm_send_key = Module["_gui_wasm_send_key"] = function() {  return Module["asm"]["_gui_wasm_send_key"].apply(null, arguments) };
var _i64Add = Module["_i64Add"] = function() {  return Module["asm"]["_i64Add"].apply(null, arguments) };
var _i64Subtract = Module["_i64Subtract"] = function() {  return Module["asm"]["_i64Subtract"].apply(null, arguments) };
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = function() {  return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments) };
var _main = Module["_main"] = function() {  return Module["asm"]["_main"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {  return Module["asm"]["_malloc"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _memmove = Module["_memmove"] = function() {  return Module["asm"]["_memmove"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {  return Module["asm"]["_memset"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {  return Module["asm"]["_sbrk"].apply(null, arguments) };
var emtStackRestore = Module["emtStackRestore"] = function() {  return Module["asm"]["emtStackRestore"].apply(null, arguments) };
var emtStackSave = Module["emtStackSave"] = function() {  return Module["asm"]["emtStackSave"].apply(null, arguments) };
var emterpret = Module["emterpret"] = function() {  return Module["asm"]["emterpret"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var getEmtStackMax = Module["getEmtStackMax"] = function() {  return Module["asm"]["getEmtStackMax"].apply(null, arguments) };
var getTempRet0 = Module["getTempRet0"] = function() {  return Module["asm"]["getTempRet0"].apply(null, arguments) };
var runPostSets = Module["runPostSets"] = function() {  return Module["asm"]["runPostSets"].apply(null, arguments) };
var setAsyncState = Module["setAsyncState"] = function() {  return Module["asm"]["setAsyncState"].apply(null, arguments) };
var setEmtStackMax = Module["setEmtStackMax"] = function() {  return Module["asm"]["setEmtStackMax"].apply(null, arguments) };
var setTempRet0 = Module["setTempRet0"] = function() {  return Module["asm"]["setTempRet0"].apply(null, arguments) };
var setThrew = Module["setThrew"] = function() {  return Module["asm"]["setThrew"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {  return Module["asm"]["stackRestore"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {  return Module["asm"]["stackSave"].apply(null, arguments) };
var dynCall_ii = Module["dynCall_ii"] = function() {  return Module["asm"]["dynCall_ii"].apply(null, arguments) };
var dynCall_iii = Module["dynCall_iii"] = function() {  return Module["asm"]["dynCall_iii"].apply(null, arguments) };
var dynCall_iiii = Module["dynCall_iiii"] = function() {  return Module["asm"]["dynCall_iiii"].apply(null, arguments) };
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {  return Module["asm"]["dynCall_iiiii"].apply(null, arguments) };
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments) };
var dynCall_vi = Module["dynCall_vi"] = function() {  return Module["asm"]["dynCall_vi"].apply(null, arguments) };
var dynCall_vii = Module["dynCall_vii"] = function() {  return Module["asm"]["dynCall_vii"].apply(null, arguments) };
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;




Module["cwrap"] = cwrap;



Module["getMemory"] = getMemory;
























Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;

Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;




























/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['emtStackSave']();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state !== 1) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['emtStackRestore'](initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}









